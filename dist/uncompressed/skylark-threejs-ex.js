/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
(function(factory,globals) {
  var define = globals.define,
      require = globals.require,
      isAmd = (typeof define === 'function' && define.amd),
      isCmd = (!isAmd && typeof exports !== 'undefined');

  if (!isAmd && !define) {
    var map = {};
    function absolute(relative, base) {
        if (relative[0]!==".") {
          return relative;
        }
        var stack = base.split("/"),
            parts = relative.split("/");
        stack.pop(); 
        for (var i=0; i<parts.length; i++) {
            if (parts[i] == ".")
                continue;
            if (parts[i] == "..")
                stack.pop();
            else
                stack.push(parts[i]);
        }
        return stack.join("/");
    }
    define = globals.define = function(id, deps, factory) {
        if (typeof factory == 'function') {
            map[id] = {
                factory: factory,
                deps: deps.map(function(dep){
                  return absolute(dep,id);
                }),
                resolved: false,
                exports: null
            };
            require(id);
        } else {
            map[id] = {
                factory : null,
                resolved : true,
                exports : factory
            };
        }
    };
    require = globals.require = function(id) {
        if (!map.hasOwnProperty(id)) {
            throw new Error('Module ' + id + ' has not been defined');
        }
        var module = map[id];
        if (!module.resolved) {
            var args = [];

            module.deps.forEach(function(dep){
                args.push(require(dep));
            })

            module.exports = module.factory.apply(globals, args) || null;
            module.resolved = true;
        }
        return module.exports;
    };
  }
  
  if (!define) {
     throw new Error("The module utility (ex: requirejs or skylark-utils) is not loaded!");
  }

  factory(define,require);

  if (!isAmd) {
    var skylarkjs = require("skylark-langx-ns");

    if (isCmd) {
      module.exports = skylarkjs;
    } else {
      globals.skylarkjs  = skylarkjs;
    }
  }

})(function(define,require) {

define('skylark-threejs-ex/shaders/CopyShader',[],function () {
    'use strict';
    var CopyShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'opacity': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform float opacity;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tgl_FragColor = opacity * texel;',
            '}'
        ].join('\n')
    };
    return CopyShader;
});
define('skylark-threejs-ex/shaders/BokehShader',[],function () {
    'use strict';
    var BokehShader = {
        defines: {
            'DEPTH_PACKING': 1,
            'PERSPECTIVE_CAMERA': 1
        },
        uniforms: {
            'tColor': { value: null },
            'tDepth': { value: null },
            'focus': { value: 1 },
            'aspect': { value: 1 },
            'aperture': { value: 0.025 },
            'maxblur': { value: 1 },
            'nearClip': { value: 1 },
            'farClip': { value: 1000 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'varying vec2 vUv;',
            'uniform sampler2D tColor;',
            'uniform sampler2D tDepth;',
            'uniform float maxblur;',
            'uniform float aperture;',
            'uniform float nearClip;',
            'uniform float farClip;',
            'uniform float focus;',
            'uniform float aspect;',
            '#include <packing>',
            'float getDepth( const in vec2 screenPosition ) {',
            '\t#if DEPTH_PACKING == 1',
            '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',
            '\t#else',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );',
            '\t#else',
            '\treturn orthographicDepthToViewZ( depth, nearClip, farClip );',
            '\t#endif',
            '}',
            'void main() {',
            '\tvec2 aspectcorrect = vec2( 1.0, aspect );',
            '\tfloat viewZ = getViewZ( getDepth( vUv ) );',
            '\tfloat factor = ( focus + viewZ );',
            '\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );',
            '\tvec2 dofblur9 = dofblur * 0.9;',
            '\tvec2 dofblur7 = dofblur * 0.7;',
            '\tvec2 dofblur4 = dofblur * 0.4;',
            '\tvec4 col = vec4( 0.0 );',
            '\tcol += texture2D( tColor, vUv.xy );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );',
            '\tgl_FragColor = col / 41.0;',
            '\tgl_FragColor.a = 1.0;',
            '}'
        ].join('\n')
    };
    return BokehShader;
});
define('skylark-threejs-ex/shaders/SAOShader',[
   "skylark-threejs"
], function (THREE) {
    'use strict';
    var SAOShader = {
        defines: {
            'NUM_SAMPLES': 7,
            'NUM_RINGS': 4,
            'NORMAL_TEXTURE': 0,
            'DIFFUSE_TEXTURE': 0,
            'DEPTH_PACKING': 1,
            'PERSPECTIVE_CAMERA': 1
        },
        uniforms: {
            'tDepth': { value: null },
            'tDiffuse': { value: null },
            'tNormal': { value: null },
            'size': { value: new THREE.Vector2(512, 512) },
            'cameraNear': { value: 1 },
            'cameraFar': { value: 100 },
            'cameraProjectionMatrix': { value: new THREE.Matrix4() },
            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },
            'scale': { value: 1 },
            'intensity': { value: 0.1 },
            'bias': { value: 0.5 },
            'minResolution': { value: 0 },
            'kernelRadius': { value: 100 },
            'randomSeed': { value: 0 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'varying vec2 vUv;',
            '#if DIFFUSE_TEXTURE == 1',
            'uniform sampler2D tDiffuse;',
            '#endif',
            'uniform sampler2D tDepth;',
            '#if NORMAL_TEXTURE == 1',
            'uniform sampler2D tNormal;',
            '#endif',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'uniform mat4 cameraProjectionMatrix;',
            'uniform mat4 cameraInverseProjectionMatrix;',
            'uniform float scale;',
            'uniform float intensity;',
            'uniform float bias;',
            'uniform float kernelRadius;',
            'uniform float minResolution;',
            'uniform vec2 size;',
            'uniform float randomSeed;',
            '// RGBA depth',
            '#include <packing>',
            'vec4 getDefaultColor( const in vec2 screenPosition ) {',
            '\t#if DIFFUSE_TEXTURE == 1',
            '\treturn texture2D( tDiffuse, vUv );',
            '\t#else',
            '\treturn vec4( 1.0 );',
            '\t#endif',
            '}',
            'float getDepth( const in vec2 screenPosition ) {',
            '\t#if DEPTH_PACKING == 1',
            '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',
            '\t#else',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#else',
            '\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#endif',
            '}',
            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',
            '\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',
            '\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',
            '\tclipPosition *= clipW; // unprojection.',
            '\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',
            '}',
            'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',
            '\t#if NORMAL_TEXTURE == 1',
            '\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',
            '\t#else',
            '\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',
            '\t#endif',
            '}',
            'float scaleDividedByCameraFar;',
            'float minResolutionMultipliedByCameraFar;',
            'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',
            '\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',
            '\tfloat viewDistance = length( viewDelta );',
            '\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',
            '\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',
            '}',
            '// moving costly divides into consts',
            'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',
            'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',
            'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',
            '\t// precompute some variables require in getOcclusion.',
            '\tscaleDividedByCameraFar = scale / cameraFar;',
            '\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',
            '\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',
            '\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',
            '\tfloat angle = rand( vUv + randomSeed ) * PI2;',
            '\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',
            '\tvec2 radiusStep = radius;',
            '\tfloat occlusionSum = 0.0;',
            '\tfloat weightSum = 0.0;',
            '\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',
            '\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',
            '\t\tradius += radiusStep;',
            '\t\tangle += ANGLE_STEP;',
            '\t\tfloat sampleDepth = getDepth( sampleUv );',
            '\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',
            '\t\t\tcontinue;',
            '\t\t}',
            '\t\tfloat sampleViewZ = getViewZ( sampleDepth );',
            '\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',
            '\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',
            '\t\tweightSum += 1.0;',
            '\t}',
            '\tif( weightSum == 0.0 ) discard;',
            '\treturn occlusionSum * ( intensity / weightSum );',
            '}',
            'void main() {',
            '\tfloat centerDepth = getDepth( vUv );',
            '\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',
            '\t\tdiscard;',
            '\t}',
            '\tfloat centerViewZ = getViewZ( centerDepth );',
            '\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',
            '\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',
            '\tgl_FragColor = getDefaultColor( vUv );',
            '\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',
            '}'
        ].join('\n')
    };
    return SAOShader;
});
define('skylark-threejs-ex/shaders/DepthLimitedBlurShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var DepthLimitedBlurShader = {
        defines: {
            'KERNEL_RADIUS': 4,
            'DEPTH_PACKING': 1,
            'PERSPECTIVE_CAMERA': 1
        },
        uniforms: {
            'tDiffuse': { value: null },
            'size': { value: new THREE.Vector2(512, 512) },
            'sampleUvOffsets': { value: [new THREE.Vector2(0, 0)] },
            'sampleWeights': { value: [1] },
            'tDepth': { value: null },
            'cameraNear': { value: 10 },
            'cameraFar': { value: 1000 },
            'depthCutoff': { value: 10 }
        },
        vertexShader: [
            '#include <common>',
            'uniform vec2 size;',
            'varying vec2 vUv;',
            'varying vec2 vInvSize;',
            'void main() {',
            '\tvUv = uv;',
            '\tvInvSize = 1.0 / size;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            '#include <packing>',
            'uniform sampler2D tDiffuse;',
            'uniform sampler2D tDepth;',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'uniform float depthCutoff;',
            'uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];',
            'uniform float sampleWeights[ KERNEL_RADIUS + 1 ];',
            'varying vec2 vUv;',
            'varying vec2 vInvSize;',
            'float getDepth( const in vec2 screenPosition ) {',
            '\t#if DEPTH_PACKING == 1',
            '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',
            '\t#else',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#else',
            '\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#endif',
            '}',
            'void main() {',
            '\tfloat depth = getDepth( vUv );',
            '\tif( depth >= ( 1.0 - EPSILON ) ) {',
            '\t\tdiscard;',
            '\t}',
            '\tfloat centerViewZ = -getViewZ( depth );',
            '\tbool rBreak = false, lBreak = false;',
            '\tfloat weightSum = sampleWeights[0];',
            '\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;',
            '\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {',
            '\t\tfloat sampleWeight = sampleWeights[i];',
            '\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;',
            '\t\tvec2 sampleUv = vUv + sampleUvOffset;',
            '\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );',
            '\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;',
            '\t\tif( ! rBreak ) {',
            '\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',
            '\t\t\tweightSum += sampleWeight;',
            '\t\t}',
            '\t\tsampleUv = vUv - sampleUvOffset;',
            '\t\tviewZ = -getViewZ( getDepth( sampleUv ) );',
            '\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;',
            '\t\tif( ! lBreak ) {',
            '\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',
            '\t\t\tweightSum += sampleWeight;',
            '\t\t}',
            '\t}',
            '\tgl_FragColor = diffuseSum / weightSum;',
            '}'
        ].join('\n')
    };
    var BlurShaderUtils = DepthLimitedBlurShader.BlurShaderUtils = {
        createSampleWeights: function (kernelRadius, stdDev) {
            var gaussian = function (x, stdDev) {
                return Math.exp(-(x * x) / (2 * (stdDev * stdDev))) / (Math.sqrt(2 * Math.PI) * stdDev);
            };
            var weights = [];
            for (var i = 0; i <= kernelRadius; i++) {
                weights.push(gaussian(i, stdDev));
            }
            return weights;
        },
        createSampleOffsets: function (kernelRadius, uvIncrement) {
            var offsets = [];
            for (var i = 0; i <= kernelRadius; i++) {
                offsets.push(uvIncrement.clone().multiplyScalar(i));
            }
            return offsets;
        },
        configure: function (material, kernelRadius, stdDev, uvIncrement) {
            material.defines['KERNEL_RADIUS'] = kernelRadius;
            material.uniforms['sampleUvOffsets'].value = BlurShaderUtils.createSampleOffsets(kernelRadius, uvIncrement);
            material.uniforms['sampleWeights'].value = BlurShaderUtils.createSampleWeights(kernelRadius, stdDev);
            material.needsUpdate = true;
        }
    };

    return DepthLimitedBlurShader;
    
});
define('skylark-threejs-ex/shaders/UnpackDepthRGBAShader',[],function () {
    'use strict';
    var UnpackDepthRGBAShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'opacity': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform float opacity;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            '#include <packing>',
            'void main() {',
            '\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );',
            '\tgl_FragColor = vec4( vec3( depth ), opacity );',
            '}'
        ].join('\n')
    };
    return  UnpackDepthRGBAShader ;
});
define('skylark-threejs-ex/shaders/ConvolutionShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var ConvolutionShader = {
        defines: {
            'KERNEL_SIZE_FLOAT': '25.0',
            'KERNEL_SIZE_INT': '25'
        },
        uniforms: {
            'tDiffuse': { value: null },
            'uImageIncrement': { value: new THREE.Vector2(0.001953125, 0) },
            'cKernel': { value: [] }
        },
        vertexShader: [
            'uniform vec2 uImageIncrement;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform float cKernel[ KERNEL_SIZE_INT ];',
            'uniform sampler2D tDiffuse;',
            'uniform vec2 uImageIncrement;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec2 imageCoord = vUv;',
            '\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );',
            '\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {',
            '\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];',
            '\t\timageCoord += uImageIncrement;',
            '\t}',
            '\tgl_FragColor = sum;',
            '}'
        ].join('\n'),
        buildKernel: function (sigma) {
            function gauss(x, sigma) {
                return Math.exp(-(x * x) / (2 * sigma * sigma));
            }
            var i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil(sigma * 3) + 1;
            if (kernelSize > kMaxKernelSize)
                kernelSize = kMaxKernelSize;
            halfWidth = (kernelSize - 1) * 0.5;
            values = new Array(kernelSize);
            sum = 0;
            for (i = 0; i < kernelSize; ++i) {
                values[i] = gauss(i - halfWidth, sigma);
                sum += values[i];
            }
            for (i = 0; i < kernelSize; ++i)
                values[i] /= sum;
            return values;
        }
    };
    return ConvolutionShader;
});
define('skylark-threejs-ex/shaders/LuminosityHighPassShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var LuminosityHighPassShader = {
        shaderID: 'luminosityHighPass',
        uniforms: {
            'tDiffuse': { value: null },
            'luminosityThreshold': { value: 1 },
            'smoothWidth': { value: 1 },
            'defaultColor': { value: new THREE.Color(0) },
            'defaultOpacity': { value: 0 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform vec3 defaultColor;',
            'uniform float defaultOpacity;',
            'uniform float luminosityThreshold;',
            'uniform float smoothWidth;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',
            '\tfloat v = dot( texel.xyz, luma );',
            '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',
            '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',
            '\tgl_FragColor = mix( outputColor, texel, alpha );',
            '}'
        ].join('\n')
    };
    return LuminosityHighPassShader;
});
define('skylark-threejs-ex/shaders/FXAAShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var FXAAShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'resolution': { value: new  THREE.Vector2(1 / 1024, 1 / 512) }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'precision highp float;',
            '',
            'uniform sampler2D tDiffuse;',
            '',
            'uniform vec2 resolution;',
            '',
            'varying vec2 vUv;',
            '',
            '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)',
            '',
            '//----------------------------------------------------------------------------------',
            '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag',
            '// SDK Version: v3.00',
            '// Email:       gameworks@nvidia.com',
            '// Site:        http://developer.nvidia.com/',
            '//',
            '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.',
            '//',
            '// Redistribution and use in source and binary forms, with or without',
            '// modification, are permitted provided that the following conditions',
            '// are met:',
            '//  * Redistributions of source code must retain the above copyright',
            '//    notice, this list of conditions and the following disclaimer.',
            '//  * Redistributions in binary form must reproduce the above copyright',
            '//    notice, this list of conditions and the following disclaimer in the',
            '//    documentation and/or other materials provided with the distribution.',
            '//  * Neither the name of NVIDIA CORPORATION nor the names of its',
            '//    contributors may be used to endorse or promote products derived',
            '//    from this software without specific prior written permission.',
            '//',
            "// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY",
            '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',
            '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',
            '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR',
            '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,',
            '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,',
            '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR',
            '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY',
            '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',
            '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE',
            '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',
            '//',
            '//----------------------------------------------------------------------------------',
            '',
            '#define FXAA_PC 1',
            '#define FXAA_GLSL_100 1',
            '#define FXAA_QUALITY_PRESET 12',
            '',
            '#define FXAA_GREEN_AS_LUMA 1',
            '',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_PC_CONSOLE',
            '    //',
            '    // The console algorithm for PC is included',
            '    // for developers targeting really low spec machines.',
            '    // Likely better to just run FXAA_PC, and use a really low preset.',
            '    //',
            '    #define FXAA_PC_CONSOLE 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_GLSL_120',
            '    #define FXAA_GLSL_120 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_GLSL_130',
            '    #define FXAA_GLSL_130 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_HLSL_3',
            '    #define FXAA_HLSL_3 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_HLSL_4',
            '    #define FXAA_HLSL_4 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_HLSL_5',
            '    #define FXAA_HLSL_5 0',
            '#endif',
            '/*==========================================================================*/',
            '#ifndef FXAA_GREEN_AS_LUMA',
            '    //',
            '    // For those using non-linear color,',
            '    // and either not able to get luma in alpha, or not wanting to,',
            '    // this enables FXAA to run using green as a proxy for luma.',
            '    // So with this enabled, no need to pack luma in alpha.',
            '    //',
            '    // This will turn off AA on anything which lacks some amount of green.',
            '    // Pure red and blue or combination of only R and B, will get no AA.',
            '    //',
            '    // Might want to lower the settings for both,',
            '    //    fxaaConsoleEdgeThresholdMin',
            '    //    fxaaQualityEdgeThresholdMin',
            '    // In order to insure AA does not get turned off on colors',
            '    // which contain a minor amount of green.',
            '    //',
            '    // 1 = On.',
            '    // 0 = Off.',
            '    //',
            '    #define FXAA_GREEN_AS_LUMA 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_EARLY_EXIT',
            '    //',
            "    // Controls algorithm's early exit path.",
            '    // On PS3 turning this ON adds 2 cycles to the shader.',
            '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',
            '    // Turning this off on console will result in a more blurry image.',
            '    // So this defaults to on.',
            '    //',
            '    // 1 = On.',
            '    // 0 = Off.',
            '    //',
            '    #define FXAA_EARLY_EXIT 1',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_DISCARD',
            '    //',
            '    // Only valid for PC OpenGL currently.',
            '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',
            '    //',
            "    // 1 = Use discard on pixels which don't need AA.",
            '    //     For APIs which enable concurrent TEX+ROP from same surface.',
            "    // 0 = Return unchanged color on pixels which don't need AA.",
            '    //',
            '    #define FXAA_DISCARD 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_FAST_PIXEL_OFFSET',
            '    //',
            '    // Used for GLSL 120 only.',
            '    //',
            '    // 1 = GL API supports fast pixel offsets',
            '    // 0 = do not use fast pixel offsets',
            '    //',
            '    #ifdef GL_EXT_gpu_shader4',
            '        #define FXAA_FAST_PIXEL_OFFSET 1',
            '    #endif',
            '    #ifdef GL_NV_gpu_shader5',
            '        #define FXAA_FAST_PIXEL_OFFSET 1',
            '    #endif',
            '    #ifdef GL_ARB_gpu_shader5',
            '        #define FXAA_FAST_PIXEL_OFFSET 1',
            '    #endif',
            '    #ifndef FXAA_FAST_PIXEL_OFFSET',
            '        #define FXAA_FAST_PIXEL_OFFSET 0',
            '    #endif',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_GATHER4_ALPHA',
            '    //',
            '    // 1 = API supports gather4 on alpha channel.',
            '    // 0 = API does not support gather4 on alpha channel.',
            '    //',
            '    #if (FXAA_HLSL_5 == 1)',
            '        #define FXAA_GATHER4_ALPHA 1',
            '    #endif',
            '    #ifdef GL_ARB_gpu_shader5',
            '        #define FXAA_GATHER4_ALPHA 1',
            '    #endif',
            '    #ifdef GL_NV_gpu_shader5',
            '        #define FXAA_GATHER4_ALPHA 1',
            '    #endif',
            '    #ifndef FXAA_GATHER4_ALPHA',
            '        #define FXAA_GATHER4_ALPHA 0',
            '    #endif',
            '#endif',
            '',
            '',
            '/*============================================================================',
            '                        FXAA QUALITY - TUNING KNOBS',
            '------------------------------------------------------------------------------',
            'NOTE the other tuning knobs are now in the shader function inputs!',
            '============================================================================*/',
            '#ifndef FXAA_QUALITY_PRESET',
            '    //',
            '    // Choose the quality preset.',
            '    // This needs to be compiled into the shader as it effects code.',
            '    // Best option to include multiple presets is to',
            '    // in each shader define the preset, then include this file.',
            '    //',
            '    // OPTIONS',
            '    // -----------------------------------------------------------------------',
            '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',
            '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',
            '    // 39       - no dither, very expensive',
            '    //',
            '    // NOTES',
            '    // -----------------------------------------------------------------------',
            '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',
            '    // 13 = about same speed as FXAA 3.9 and better than 12',
            '    // 23 = closest to FXAA 3.9 visually and performance wise',
            '    //  _ = the lowest digit is directly related to performance',
            '    // _  = the highest digit is directly related to style',
            '    //',
            '    #define FXAA_QUALITY_PRESET 12',
            '#endif',
            '',
            '',
            '/*============================================================================',
            '',
            '                           FXAA QUALITY - PRESETS',
            '',
            '============================================================================*/',
            '',
            '/*============================================================================',
            '                     FXAA QUALITY - MEDIUM DITHER PRESETS',
            '============================================================================*/',
            '#if (FXAA_QUALITY_PRESET == 10)',
            '    #define FXAA_QUALITY_PS 3',
            '    #define FXAA_QUALITY_P0 1.5',
            '    #define FXAA_QUALITY_P1 3.0',
            '    #define FXAA_QUALITY_P2 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 11)',
            '    #define FXAA_QUALITY_PS 4',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 3.0',
            '    #define FXAA_QUALITY_P3 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 12)',
            '    #define FXAA_QUALITY_PS 5',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 4.0',
            '    #define FXAA_QUALITY_P4 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 13)',
            '    #define FXAA_QUALITY_PS 6',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 4.0',
            '    #define FXAA_QUALITY_P5 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 14)',
            '    #define FXAA_QUALITY_PS 7',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 4.0',
            '    #define FXAA_QUALITY_P6 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 15)',
            '    #define FXAA_QUALITY_PS 8',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 4.0',
            '    #define FXAA_QUALITY_P7 12.0',
            '#endif',
            '',
            '/*============================================================================',
            '                     FXAA QUALITY - LOW DITHER PRESETS',
            '============================================================================*/',
            '#if (FXAA_QUALITY_PRESET == 20)',
            '    #define FXAA_QUALITY_PS 3',
            '    #define FXAA_QUALITY_P0 1.5',
            '    #define FXAA_QUALITY_P1 2.0',
            '    #define FXAA_QUALITY_P2 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 21)',
            '    #define FXAA_QUALITY_PS 4',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 22)',
            '    #define FXAA_QUALITY_PS 5',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 23)',
            '    #define FXAA_QUALITY_PS 6',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 24)',
            '    #define FXAA_QUALITY_PS 7',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 3.0',
            '    #define FXAA_QUALITY_P6 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 25)',
            '    #define FXAA_QUALITY_PS 8',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 4.0',
            '    #define FXAA_QUALITY_P7 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 26)',
            '    #define FXAA_QUALITY_PS 9',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 4.0',
            '    #define FXAA_QUALITY_P8 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 27)',
            '    #define FXAA_QUALITY_PS 10',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 4.0',
            '    #define FXAA_QUALITY_P9 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 28)',
            '    #define FXAA_QUALITY_PS 11',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 2.0',
            '    #define FXAA_QUALITY_P9 4.0',
            '    #define FXAA_QUALITY_P10 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 29)',
            '    #define FXAA_QUALITY_PS 12',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 2.0',
            '    #define FXAA_QUALITY_P9 2.0',
            '    #define FXAA_QUALITY_P10 4.0',
            '    #define FXAA_QUALITY_P11 8.0',
            '#endif',
            '',
            '/*============================================================================',
            '                     FXAA QUALITY - EXTREME QUALITY',
            '============================================================================*/',
            '#if (FXAA_QUALITY_PRESET == 39)',
            '    #define FXAA_QUALITY_PS 12',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.0',
            '    #define FXAA_QUALITY_P2 1.0',
            '    #define FXAA_QUALITY_P3 1.0',
            '    #define FXAA_QUALITY_P4 1.0',
            '    #define FXAA_QUALITY_P5 1.5',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 2.0',
            '    #define FXAA_QUALITY_P9 2.0',
            '    #define FXAA_QUALITY_P10 4.0',
            '    #define FXAA_QUALITY_P11 8.0',
            '#endif',
            '',
            '',
            '',
            '/*============================================================================',
            '',
            '                                API PORTING',
            '',
            '============================================================================*/',
            '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',
            '    #define FxaaBool bool',
            '    #define FxaaDiscard discard',
            '    #define FxaaFloat float',
            '    #define FxaaFloat2 vec2',
            '    #define FxaaFloat3 vec3',
            '    #define FxaaFloat4 vec4',
            '    #define FxaaHalf float',
            '    #define FxaaHalf2 vec2',
            '    #define FxaaHalf3 vec3',
            '    #define FxaaHalf4 vec4',
            '    #define FxaaInt2 ivec2',
            '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',
            '    #define FxaaTex sampler2D',
            '#else',
            '    #define FxaaBool bool',
            '    #define FxaaDiscard clip(-1)',
            '    #define FxaaFloat float',
            '    #define FxaaFloat2 float2',
            '    #define FxaaFloat3 float3',
            '    #define FxaaFloat4 float4',
            '    #define FxaaHalf half',
            '    #define FxaaHalf2 half2',
            '    #define FxaaHalf3 half3',
            '    #define FxaaHalf4 half4',
            '    #define FxaaSat(x) saturate(x)',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_GLSL_100 == 1)',
            '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',
            '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_GLSL_120 == 1)',
            '    // Requires,',
            '    //  #version 120',
            '    // And at least,',
            '    //  #extension GL_EXT_gpu_shader4 : enable',
            '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',
            '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',
            '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',
            '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',
            '    #else',
            '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',
            '    #endif',
            '    #if (FXAA_GATHER4_ALPHA == 1)',
            '        // use #extension GL_ARB_gpu_shader5 : enable',
            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',
            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',
            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',
            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',
            '    #endif',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_GLSL_130 == 1)',
            '    // Requires "#version 130" or better',
            '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',
            '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',
            '    #if (FXAA_GATHER4_ALPHA == 1)',
            '        // use #extension GL_ARB_gpu_shader5 : enable',
            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',
            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',
            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',
            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',
            '    #endif',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_HLSL_3 == 1)',
            '    #define FxaaInt2 float2',
            '    #define FxaaTex sampler2D',
            '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',
            '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_HLSL_4 == 1)',
            '    #define FxaaInt2 int2',
            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',
            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',
            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_HLSL_5 == 1)',
            '    #define FxaaInt2 int2',
            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',
            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',
            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',
            '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',
            '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',
            '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',
            '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',
            '#endif',
            '',
            '',
            '/*============================================================================',
            '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',
            '============================================================================*/',
            '#if (FXAA_GREEN_AS_LUMA == 0)',
            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',
            '#else',
            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',
            '#endif',
            '',
            '',
            '',
            '',
            '/*============================================================================',
            '',
            '                             FXAA3 QUALITY - PC',
            '',
            '============================================================================*/',
            '#if (FXAA_PC == 1)',
            '/*--------------------------------------------------------------------------*/',
            'FxaaFloat4 FxaaPixelShader(',
            '    //',
            '    // Use noperspective interpolation here (turn off perspective interpolation).',
            '    // {xy} = center of pixel',
            '    FxaaFloat2 pos,',
            '    //',
            '    // Used only for FXAA Console, and not used on the 360 version.',
            '    // Use noperspective interpolation here (turn off perspective interpolation).',
            '    // {xy_} = upper left of pixel',
            '    // {_zw} = lower right of pixel',
            '    FxaaFloat4 fxaaConsolePosPos,',
            '    //',
            '    // Input color texture.',
            '    // {rgb_} = color in linear or perceptual color space',
            '    // if (FXAA_GREEN_AS_LUMA == 0)',
            '    //     {__a} = luma in perceptual color space (not linear)',
            '    FxaaTex tex,',
            '    //',
            '    // Only used on the optimized 360 version of FXAA Console.',
            '    // For everything but 360, just use the same input here as for "tex".',
            '    // For 360, same texture, just alias with a 2nd sampler.',
            '    // This sampler needs to have an exponent bias of -1.',
            '    FxaaTex fxaaConsole360TexExpBiasNegOne,',
            '    //',
            '    // Only used on the optimized 360 version of FXAA Console.',
            '    // For everything but 360, just use the same input here as for "tex".',
            '    // For 360, same texture, just alias with a 3nd sampler.',
            '    // This sampler needs to have an exponent bias of -2.',
            '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This must be from a constant/uniform.',
            '    // {x_} = 1.0/screenWidthInPixels',
            '    // {_y} = 1.0/screenHeightInPixels',
            '    FxaaFloat2 fxaaQualityRcpFrame,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This must be from a constant/uniform.',
            '    // This effects sub-pixel AA quality and inversely sharpness.',
            '    //   Where N ranges between,',
            '    //     N = 0.50 (default)',
            '    //     N = 0.33 (sharper)',
            '    // {x__} = -N/screenWidthInPixels',
            '    // {_y_} = -N/screenHeightInPixels',
            '    // {_z_} =  N/screenWidthInPixels',
            '    // {__w} =  N/screenHeightInPixels',
            '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // Not used on 360, but used on PS3 and PC.',
            '    // This must be from a constant/uniform.',
            '    // {x__} = -2.0/screenWidthInPixels',
            '    // {_y_} = -2.0/screenHeightInPixels',
            '    // {_z_} =  2.0/screenWidthInPixels',
            '    // {__w} =  2.0/screenHeightInPixels',
            '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',
            '    // This must be from a constant/uniform.',
            '    // {x__} =  8.0/screenWidthInPixels',
            '    // {_y_} =  8.0/screenHeightInPixels',
            '    // {_z_} = -4.0/screenWidthInPixels',
            '    // {__w} = -4.0/screenHeightInPixels',
            '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This used to be the FXAA_QUALITY_SUBPIX define.',
            '    // It is here now to allow easier tuning.',
            '    // Choose the amount of sub-pixel aliasing removal.',
            '    // This can effect sharpness.',
            '    //   1.00 - upper limit (softer)',
            '    //   0.75 - default amount of filtering',
            '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',
            '    //   0.25 - almost off',
            '    //   0.00 - completely off',
            '    FxaaFloat fxaaQualitySubpix,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',
            '    // It is here now to allow easier tuning.',
            '    // The minimum amount of local contrast required to apply algorithm.',
            '    //   0.333 - too little (faster)',
            '    //   0.250 - low quality',
            '    //   0.166 - default',
            '    //   0.125 - high quality',
            '    //   0.063 - overkill (slower)',
            '    FxaaFloat fxaaQualityEdgeThreshold,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',
            '    // It is here now to allow easier tuning.',
            '    // Trims the algorithm from processing darks.',
            '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',
            '    //   0.0625 - high quality (faster)',
            '    //   0.0312 - visible limit (slower)',
            '    // Special notes when using FXAA_GREEN_AS_LUMA,',
            '    //   Likely want to set this to zero.',
            '    //   As colors that are mostly not-green',
            '    //   will appear very dark in the green channel!',
            '    //   Tune by looking at mostly non-green content,',
            '    //   then start at zero and increase until aliasing is a problem.',
            '    FxaaFloat fxaaQualityEdgeThresholdMin,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',
            '    // It is here now to allow easier tuning.',
            '    // This does not effect PS3, as this needs to be compiled in.',
            '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',
            '    //   Due to the PS3 being ALU bound,',
            '    //   there are only three safe values here: 2 and 4 and 8.',
            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',
            '    // For all other platforms can be a non-power of two.',
            '    //   8.0 is sharper (default!!!)',
            '    //   4.0 is softer',
            '    //   2.0 is really soft (good only for vector graphics inputs)',
            '    FxaaFloat fxaaConsoleEdgeSharpness,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',
            '    // It is here now to allow easier tuning.',
            '    // This does not effect PS3, as this needs to be compiled in.',
            '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',
            '    //   Due to the PS3 being ALU bound,',
            '    //   there are only two safe values here: 1/4 and 1/8.',
            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',
            '    // The console setting has a different mapping than the quality setting.',
            '    // Other platforms can use other values.',
            '    //   0.125 leaves less aliasing, but is softer (default!!!)',
            '    //   0.25 leaves more aliasing, and is sharper',
            '    FxaaFloat fxaaConsoleEdgeThreshold,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',
            '    // It is here now to allow easier tuning.',
            '    // Trims the algorithm from processing darks.',
            '    // The console setting has a different mapping than the quality setting.',
            '    // This only applies when FXAA_EARLY_EXIT is 1.',
            '    // This does not apply to PS3,',
            '    // PS3 was simplified to avoid more shader instructions.',
            '    //   0.06 - faster but more aliasing in darks',
            '    //   0.05 - default',
            '    //   0.04 - slower and less aliasing in darks',
            '    // Special notes when using FXAA_GREEN_AS_LUMA,',
            '    //   Likely want to set this to zero.',
            '    //   As colors that are mostly not-green',
            '    //   will appear very dark in the green channel!',
            '    //   Tune by looking at mostly non-green content,',
            '    //   then start at zero and increase until aliasing is a problem.',
            '    FxaaFloat fxaaConsoleEdgeThresholdMin,',
            '    //',
            '    // Extra constants for 360 FXAA Console only.',
            '    // Use zeros or anything else for other platforms.',
            '    // These must be in physical constant registers and NOT immediates.',
            '    // Immediates will result in compiler un-optimizing.',
            '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',
            '    FxaaFloat4 fxaaConsole360ConstDir',
            ') {',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat2 posM;',
            '    posM.x = pos.x;',
            '    posM.y = pos.y;',
            '    #if (FXAA_GATHER4_ALPHA == 1)',
            '        #if (FXAA_DISCARD == 0)',
            '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',
            '            #if (FXAA_GREEN_AS_LUMA == 0)',
            '                #define lumaM rgbyM.w',
            '            #else',
            '                #define lumaM rgbyM.y',
            '            #endif',
            '        #endif',
            '        #if (FXAA_GREEN_AS_LUMA == 0)',
            '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',
            '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',
            '        #else',
            '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',
            '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',
            '        #endif',
            '        #if (FXAA_DISCARD == 1)',
            '            #define lumaM luma4A.w',
            '        #endif',
            '        #define lumaE luma4A.z',
            '        #define lumaS luma4A.x',
            '        #define lumaSE luma4A.y',
            '        #define lumaNW luma4B.w',
            '        #define lumaN luma4B.z',
            '        #define lumaW luma4B.x',
            '    #else',
            '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',
            '        #if (FXAA_GREEN_AS_LUMA == 0)',
            '            #define lumaM rgbyM.w',
            '        #else',
            '            #define lumaM rgbyM.y',
            '        #endif',
            '        #if (FXAA_GLSL_100 == 1)',
            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',
            '        #else',
            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',
            '        #endif',
            '    #endif',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat maxSM = max(lumaS, lumaM);',
            '    FxaaFloat minSM = min(lumaS, lumaM);',
            '    FxaaFloat maxESM = max(lumaE, maxSM);',
            '    FxaaFloat minESM = min(lumaE, minSM);',
            '    FxaaFloat maxWN = max(lumaN, lumaW);',
            '    FxaaFloat minWN = min(lumaN, lumaW);',
            '    FxaaFloat rangeMax = max(maxWN, maxESM);',
            '    FxaaFloat rangeMin = min(minWN, minESM);',
            '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',
            '    FxaaFloat range = rangeMax - rangeMin;',
            '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',
            '    FxaaBool earlyExit = range < rangeMaxClamped;',
            '/*--------------------------------------------------------------------------*/',
            '    if(earlyExit)',
            '        #if (FXAA_DISCARD == 1)',
            '            FxaaDiscard;',
            '        #else',
            '            return rgbyM;',
            '        #endif',
            '/*--------------------------------------------------------------------------*/',
            '    #if (FXAA_GATHER4_ALPHA == 0)',
            '        #if (FXAA_GLSL_100 == 1)',
            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',
            '        #else',
            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',
            '        #endif',
            '    #else',
            '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',
            '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',
            '    #endif',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat lumaNS = lumaN + lumaS;',
            '    FxaaFloat lumaWE = lumaW + lumaE;',
            '    FxaaFloat subpixRcpRange = 1.0/range;',
            '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',
            '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',
            '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat lumaNESE = lumaNE + lumaSE;',
            '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',
            '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',
            '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',
            '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',
            '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',
            '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',
            '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',
            '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',
            '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',
            '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',
            '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',
            '    FxaaBool horzSpan = edgeHorz >= edgeVert;',
            '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',
            '/*--------------------------------------------------------------------------*/',
            '    if(!horzSpan) lumaN = lumaW;',
            '    if(!horzSpan) lumaS = lumaE;',
            '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',
            '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat gradientN = lumaN - lumaM;',
            '    FxaaFloat gradientS = lumaS - lumaM;',
            '    FxaaFloat lumaNN = lumaN + lumaM;',
            '    FxaaFloat lumaSS = lumaS + lumaM;',
            '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',
            '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',
            '    if(pairN) lengthSign = -lengthSign;',
            '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat2 posB;',
            '    posB.x = posM.x;',
            '    posB.y = posM.y;',
            '    FxaaFloat2 offNP;',
            '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',
            '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',
            '    if(!horzSpan) posB.x += lengthSign * 0.5;',
            '    if( horzSpan) posB.y += lengthSign * 0.5;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat2 posN;',
            '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',
            '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',
            '    FxaaFloat2 posP;',
            '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',
            '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',
            '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',
            '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',
            '    FxaaFloat subpixE = subpixC * subpixC;',
            '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',
            '/*--------------------------------------------------------------------------*/',
            '    if(!pairN) lumaNN = lumaSS;',
            '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',
            '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',
            '    FxaaFloat subpixF = subpixD * subpixE;',
            '    FxaaBool lumaMLTZero = lumaMM < 0.0;',
            '/*--------------------------------------------------------------------------*/',
            '    lumaEndN -= lumaNN * 0.5;',
            '    lumaEndP -= lumaNN * 0.5;',
            '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',
            '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',
            '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',
            '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',
            '    FxaaBool doneNP = (!doneN) || (!doneP);',
            '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',
            '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',
            '/*--------------------------------------------------------------------------*/',
            '    if(doneNP) {',
            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '        doneN = abs(lumaEndN) >= gradientScaled;',
            '        doneP = abs(lumaEndP) >= gradientScaled;',
            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',
            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',
            '        doneNP = (!doneN) || (!doneP);',
            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',
            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',
            '/*--------------------------------------------------------------------------*/',
            '        #if (FXAA_QUALITY_PS > 3)',
            '        if(doneNP) {',
            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '            doneN = abs(lumaEndN) >= gradientScaled;',
            '            doneP = abs(lumaEndP) >= gradientScaled;',
            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',
            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',
            '            doneNP = (!doneN) || (!doneP);',
            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',
            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',
            '/*--------------------------------------------------------------------------*/',
            '            #if (FXAA_QUALITY_PS > 4)',
            '            if(doneNP) {',
            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                doneN = abs(lumaEndN) >= gradientScaled;',
            '                doneP = abs(lumaEndP) >= gradientScaled;',
            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',
            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',
            '                doneNP = (!doneN) || (!doneP);',
            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',
            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',
            '/*--------------------------------------------------------------------------*/',
            '                #if (FXAA_QUALITY_PS > 5)',
            '                if(doneNP) {',
            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                    doneN = abs(lumaEndN) >= gradientScaled;',
            '                    doneP = abs(lumaEndP) >= gradientScaled;',
            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',
            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',
            '                    doneNP = (!doneN) || (!doneP);',
            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',
            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',
            '/*--------------------------------------------------------------------------*/',
            '                    #if (FXAA_QUALITY_PS > 6)',
            '                    if(doneNP) {',
            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                        doneN = abs(lumaEndN) >= gradientScaled;',
            '                        doneP = abs(lumaEndP) >= gradientScaled;',
            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',
            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',
            '                        doneNP = (!doneN) || (!doneP);',
            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',
            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',
            '/*--------------------------------------------------------------------------*/',
            '                        #if (FXAA_QUALITY_PS > 7)',
            '                        if(doneNP) {',
            '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                            doneN = abs(lumaEndN) >= gradientScaled;',
            '                            doneP = abs(lumaEndP) >= gradientScaled;',
            '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',
            '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',
            '                            doneNP = (!doneN) || (!doneP);',
            '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',
            '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',
            '/*--------------------------------------------------------------------------*/',
            '    #if (FXAA_QUALITY_PS > 8)',
            '    if(doneNP) {',
            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '        doneN = abs(lumaEndN) >= gradientScaled;',
            '        doneP = abs(lumaEndP) >= gradientScaled;',
            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',
            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',
            '        doneNP = (!doneN) || (!doneP);',
            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',
            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',
            '/*--------------------------------------------------------------------------*/',
            '        #if (FXAA_QUALITY_PS > 9)',
            '        if(doneNP) {',
            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '            doneN = abs(lumaEndN) >= gradientScaled;',
            '            doneP = abs(lumaEndP) >= gradientScaled;',
            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',
            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',
            '            doneNP = (!doneN) || (!doneP);',
            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',
            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',
            '/*--------------------------------------------------------------------------*/',
            '            #if (FXAA_QUALITY_PS > 10)',
            '            if(doneNP) {',
            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                doneN = abs(lumaEndN) >= gradientScaled;',
            '                doneP = abs(lumaEndP) >= gradientScaled;',
            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',
            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',
            '                doneNP = (!doneN) || (!doneP);',
            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',
            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',
            '/*--------------------------------------------------------------------------*/',
            '                #if (FXAA_QUALITY_PS > 11)',
            '                if(doneNP) {',
            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                    doneN = abs(lumaEndN) >= gradientScaled;',
            '                    doneP = abs(lumaEndP) >= gradientScaled;',
            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',
            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',
            '                    doneNP = (!doneN) || (!doneP);',
            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',
            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',
            '/*--------------------------------------------------------------------------*/',
            '                    #if (FXAA_QUALITY_PS > 12)',
            '                    if(doneNP) {',
            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                        doneN = abs(lumaEndN) >= gradientScaled;',
            '                        doneP = abs(lumaEndP) >= gradientScaled;',
            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',
            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',
            '                        doneNP = (!doneN) || (!doneP);',
            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',
            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',
            '/*--------------------------------------------------------------------------*/',
            '                    }',
            '                    #endif',
            '/*--------------------------------------------------------------------------*/',
            '                }',
            '                #endif',
            '/*--------------------------------------------------------------------------*/',
            '            }',
            '            #endif',
            '/*--------------------------------------------------------------------------*/',
            '        }',
            '        #endif',
            '/*--------------------------------------------------------------------------*/',
            '    }',
            '    #endif',
            '/*--------------------------------------------------------------------------*/',
            '                        }',
            '                        #endif',
            '/*--------------------------------------------------------------------------*/',
            '                    }',
            '                    #endif',
            '/*--------------------------------------------------------------------------*/',
            '                }',
            '                #endif',
            '/*--------------------------------------------------------------------------*/',
            '            }',
            '            #endif',
            '/*--------------------------------------------------------------------------*/',
            '        }',
            '        #endif',
            '/*--------------------------------------------------------------------------*/',
            '    }',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat dstN = posM.x - posN.x;',
            '    FxaaFloat dstP = posP.x - posM.x;',
            '    if(!horzSpan) dstN = posM.y - posN.y;',
            '    if(!horzSpan) dstP = posP.y - posM.y;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',
            '    FxaaFloat spanLength = (dstP + dstN);',
            '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',
            '    FxaaFloat spanLengthRcp = 1.0/spanLength;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaBool directionN = dstN < dstP;',
            '    FxaaFloat dst = min(dstN, dstP);',
            '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',
            '    FxaaFloat subpixG = subpixF * subpixF;',
            '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',
            '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',
            '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',
            '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',
            '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',
            '    #if (FXAA_DISCARD == 1)',
            '        return FxaaTexTop(tex, posM);',
            '    #else',
            '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',
            '    #endif',
            '}',
            '/*==========================================================================*/',
            '#endif',
            '',
            'void main() {',
            '  gl_FragColor = FxaaPixelShader(',
            '    vUv,',
            '    vec4(0.0),',
            '    tDiffuse,',
            '    tDiffuse,',
            '    tDiffuse,',
            '    resolution,',
            '    vec4(0.0),',
            '    vec4(0.0),',
            '    vec4(0.0),',
            '    0.75,',
            '    0.166,',
            '    0.0833,',
            '    0.0,',
            '    0.0,',
            '    0.0,',
            '    vec4(0.0)',
            '  );',
            '',
            '  // TODO avoid querying texture twice for same texel',
            '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',
            '}'
        ].join('\n')
    };
    return FXAAShader;
});
define('skylark-threejs-ex/shaders/SSAOShader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SSAOShader = {
        defines: {
            'PERSPECTIVE_CAMERA': 1,
            'KERNEL_SIZE': 32
        },
        uniforms: {
            'tDiffuse': { value: null },
            'tNormal': { value: null },
            'tDepth': { value: null },
            'tNoise': { value: null },
            'kernel': { value: null },
            'cameraNear': { value: null },
            'cameraFar': { value: null },
            'resolution': { value: new THREE.Vector2() },
            'cameraProjectionMatrix': { value: new THREE.Matrix4() },
            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },
            'kernelRadius': { value: 8 },
            'minDistance': { value: 0.005 },
            'maxDistance': { value: 0.05 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform sampler2D tNormal;',
            'uniform sampler2D tDepth;',
            'uniform sampler2D tNoise;',
            'uniform vec3 kernel[ KERNEL_SIZE ];',
            'uniform vec2 resolution;',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'uniform mat4 cameraProjectionMatrix;',
            'uniform mat4 cameraInverseProjectionMatrix;',
            'uniform float kernelRadius;',
            'uniform float minDistance;',
            'uniform float maxDistance;',
            'varying vec2 vUv;',
            '#include <packing>',
            'float getDepth( const in vec2 screenPosition ) {',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '}',
            'float getLinearDepth( const in vec2 screenPosition ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',
            '\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',
            '\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',
            '\t#else',
            '\t\treturn texture2D( depthSampler, coord ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#else',
            '\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#endif',
            '}',
            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',
            '\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',
            '\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',
            '\tclipPosition *= clipW; // unprojection.',
            '\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',
            '}',
            'vec3 getViewNormal( const in vec2 screenPosition ) {',
            '\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',
            '}',
            'void main() {',
            '\tfloat depth = getDepth( vUv );',
            '\tfloat viewZ = getViewZ( depth );',
            '\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );',
            '\tvec3 viewNormal = getViewNormal( vUv );',
            ' vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );',
            '\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;',
            '\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );',
            '\tvec3 bitangent = cross( viewNormal, tangent );',
            '\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );',
            ' float occlusion = 0.0;',
            ' for ( int i = 0; i < KERNEL_SIZE; i ++ ) {',
            '\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];',
            '\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );',
            '\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );',
            '\t\tsamplePointNDC /= samplePointNDC.w;',
            '\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;',
            '\t\tfloat realDepth = getLinearDepth( samplePointUv );',
            '\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );',
            '\t\tfloat delta = sampleDepth - realDepth;',
            '\t\tif ( delta > minDistance && delta < maxDistance ) {',
            '\t\t\tocclusion += 1.0;',
            '\t\t}',
            '\t}',
            '\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );',
            '\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );',
            '}'
        ].join('\n')
    };
    var SSAODepthShader = {
        defines: { 'PERSPECTIVE_CAMERA': 1 },
        uniforms: {
            'tDepth': { value: null },
            'cameraNear': { value: null },
            'cameraFar': { value: null }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDepth;',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'varying vec2 vUv;',
            '#include <packing>',
            'float getLinearDepth( const in vec2 screenPosition ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',
            '\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',
            '\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',
            '\t#else',
            '\t\treturn texture2D( depthSampler, coord ).x;',
            '\t#endif',
            '}',
            'void main() {',
            '\tfloat depth = getLinearDepth( vUv );',
            '\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );',
            '}'
        ].join('\n')
    };
    var SSAOBlurShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'resolution': { value: new THREE.Vector2() }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform vec2 resolution;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec2 texelSize = ( 1.0 / resolution );',
            '\tfloat result = 0.0;',
            '\tfor ( int i = - 2; i <= 2; i ++ ) {',
            '\t\tfor ( int j = - 2; j <= 2; j ++ ) {',
            '\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;',
            '\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;',
            '\t\t}',
            '\t}',
            '\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );',
            '}'
        ].join('\n')
    };
    return {
        SSAOShader,
        SSAODepthShader,
        SSAOBlurShader
    };
});
define('skylark-threejs-ex/shaders/FilmShader',[],function () {
    'use strict';
    var FilmShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'time': { value: 0 },
            'nIntensity': { value: 0.5 },
            'sIntensity': { value: 0.05 },
            'sCount': { value: 4096 },
            'grayscale': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'uniform float time;',
            'uniform bool grayscale;',
            'uniform float nIntensity;',
            'uniform float sIntensity;',
            'uniform float sCount;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );',
            '\tfloat dx = rand( vUv + time );',
            '\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );',
            '\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );',
            '\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;',
            '\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );',
            '\tif( grayscale ) {',
            '\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );',
            '\t}',
            '\tgl_FragColor =  vec4( cResult, cTextureScreen.a );',
            '}'
        ].join('\n')
    };
    return  FilmShader ;
});
define('skylark-threejs-ex/shaders/DotScreenShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var DotScreenShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'tSize': { value: new THREE.Vector2(256, 256) },
            'center': { value: new THREE.Vector2(0.5, 0.5) },
            'angle': { value: 1.57 },
            'scale': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec2 center;',
            'uniform float angle;',
            'uniform float scale;',
            'uniform vec2 tSize;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'float pattern() {',
            '\tfloat s = sin( angle ), c = cos( angle );',
            '\tvec2 tex = vUv * tSize - center;',
            '\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',
            '\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',
            '}',
            'void main() {',
            '\tvec4 color = texture2D( tDiffuse, vUv );',
            '\tfloat average = ( color.r + color.g + color.b ) / 3.0;',
            '\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',
            '}'
        ].join('\n')
    };
    return  DotScreenShader ;
});
define('skylark-threejs-ex/shaders/LuminosityShader',[],function () {
    'use strict';
    var LuminosityShader = {
        uniforms: { 'tDiffuse': { value: null } },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tfloat l = linearToRelativeLuminance( texel.rgb );',
            '\tgl_FragColor = vec4( l, l, l, texel.w );',
            '}'
        ].join('\n')
    };
    return  LuminosityShader ;
});
define('skylark-threejs-ex/shaders/SobelOperatorShader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SobelOperatorShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'resolution': { value: new THREE.Vector2() }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform vec2 resolution;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );',
            '\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );',
            '\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );',
            '\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;',
            '\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;',
            '\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;',
            '\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;',
            '\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;',
            '\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;',
            '\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;',
            '\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;',
            '\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;',
            '\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + ',
            '\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + ',
            '\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; ',
            '\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + ',
            '\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + ',
            '\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; ',
            '\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );',
            '\tgl_FragColor = vec4( vec3( G ), 1 );',
            '}'
        ].join('\n')
    };
    return  SobelOperatorShader ;
});
define('skylark-threejs-ex/shaders/ColorifyShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var ColorifyShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'color': { value: new THREE.Color(16777215) }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec3 color;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',
            '\tfloat v = dot( texel.xyz, luma );',
            '\tgl_FragColor = vec4( v * color, texel.w );',
            '}'
        ].join('\n')
    };
    return ColorifyShader;
});
define('skylark-threejs-ex/shaders/ToneMapShader',[],function () {
    'use strict';
    var ToneMapShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'averageLuminance': { value: 1 },
            'luminanceMap': { value: null },
            'maxLuminance': { value: 16 },
            'minLuminance': { value: 0.01 },
            'middleGrey': { value: 0.6 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'uniform float middleGrey;',
            'uniform float minLuminance;',
            'uniform float maxLuminance;',
            '#ifdef ADAPTED_LUMINANCE',
            '\tuniform sampler2D luminanceMap;',
            '#else',
            '\tuniform float averageLuminance;',
            '#endif',
            'vec3 ToneMap( vec3 vColor ) {',
            '\t#ifdef ADAPTED_LUMINANCE',
            '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;',
            '\t#else',
            '\t\tfloat fLumAvg = averageLuminance;',
            '\t#endif',
            '\tfloat fLumPixel = linearToRelativeLuminance( vColor );',
            '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );',
            '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);',
            '\treturn fLumCompressed * vColor;',
            '}',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );',
            '}'
        ].join('\n')
    };
    return  ToneMapShader ;
});
define('skylark-threejs-ex/shaders/TechnicolorShader',[],function () {
    'use strict';
    var TechnicolorShader = {
        uniforms: { 'tDiffuse': { value: null } },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );',
            '\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);',
            '\tgl_FragColor = newTex;',
            '}'
        ].join('\n')
    };
    return  TechnicolorShader ;
});
define('skylark-threejs-ex/shaders/HueSaturationShader',[],function () {
    'use strict';
    var HueSaturationShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'hue': { value: 0 },
            'saturation': { value: 0 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform float hue;',
            'uniform float saturation;',
            'varying vec2 vUv;',
            'void main() {',
            '\tgl_FragColor = texture2D( tDiffuse, vUv );',
            '\tfloat angle = hue * 3.14159265;',
            '\tfloat s = sin(angle), c = cos(angle);',
            '\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',
            '\tfloat len = length(gl_FragColor.rgb);',
            '\tgl_FragColor.rgb = vec3(',
            '\t\tdot(gl_FragColor.rgb, weights.xyz),',
            '\t\tdot(gl_FragColor.rgb, weights.zxy),',
            '\t\tdot(gl_FragColor.rgb, weights.yzx)',
            '\t);',
            '\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',
            '\tif (saturation > 0.0) {',
            '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',
            '\t} else {',
            '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',
            '\t}',
            '}'
        ].join('\n')
    };
    return  HueSaturationShader ;
});
define('skylark-threejs-ex/postprocessing/Pass',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    function Pass() {
        this.enabled = true;
        this.needsSwap = true;
        this.clear = false;
        this.renderToScreen = false;
    }
    Object.assign(Pass.prototype, {
        setSize: function () {
        },
        render: function () {
            console.error('THREE.Pass: .render() must be implemented in derived pass.');
        }
    });
    Pass.FullScreenQuad = function () {
        var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
        var geometry = new THREE.PlaneBufferGeometry(2, 2);
        var FullScreenQuad = function (material) {
            this._mesh = new THREE.Mesh(geometry, material);
        };
        Object.defineProperty(FullScreenQuad.prototype, 'material', {
            get: function () {
                return this._mesh.material;
            },
            set: function (value) {
                this._mesh.material = value;
            }
        });
        Object.assign(FullScreenQuad.prototype, {
            dispose: function () {
                this._mesh.geometry.dispose();
            },
            render: function (renderer) {
                renderer.render(this._mesh, camera);
            }
        });
        return FullScreenQuad;
    }();
    return Pass;
});
define('skylark-threejs-ex/postprocessing/ShaderPass',[
    "skylark-threejs",
    './Pass'
], function (
    THREE, 
    Pass
) {
    'use strict';
    var ShaderPass = function (shader, textureID) {
        Pass.call(this);
        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';
        if (shader instanceof THREE.ShaderMaterial) {
            this.uniforms = shader.uniforms;
            this.material = shader;
        } else if (shader) {
            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
            this.material = new THREE.ShaderMaterial({
                defines: Object.assign({}, shader.defines),
                uniforms: this.uniforms,
                vertexShader: shader.vertexShader,
                fragmentShader: shader.fragmentShader
            });
        }
        this.fsQuad = new Pass.FullScreenQuad(this.material);
    };
    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {
        constructor: ShaderPass,
        render: function (renderer, writeBuffer, readBuffer) {
            if (this.uniforms[this.textureID]) {
                this.uniforms[this.textureID].value = readBuffer.texture;
            }
            this.fsQuad.material = this.material;
            if (this.renderToScreen) {
                renderer.setRenderTarget(null);
                this.fsQuad.render(renderer);
            } else {
                renderer.setRenderTarget(writeBuffer);
                if (this.clear)
                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
                this.fsQuad.render(renderer);
            }
        }
    });
    return ShaderPass;
});
define('skylark-threejs-ex/postprocessing/MaskPass',[
    './Pass'
], function (Pass) {
    'use strict';
    var MaskPass = function (scene, camera) {
        Pass.call(this);
        this.scene = scene;
        this.camera = camera;
        this.clear = true;
        this.needsSwap = false;
        this.inverse = false;
    };
    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {
        constructor: MaskPass,
        render: function (renderer, writeBuffer, readBuffer) {
            var context = renderer.getContext();
            var state = renderer.state;
            state.buffers.color.setMask(false);
            state.buffers.depth.setMask(false);
            state.buffers.color.setLocked(true);
            state.buffers.depth.setLocked(true);
            var writeValue, clearValue;
            if (this.inverse) {
                writeValue = 0;
                clearValue = 1;
            } else {
                writeValue = 1;
                clearValue = 0;
            }
            state.buffers.stencil.setTest(true);
            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);
            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);
            state.buffers.stencil.setClear(clearValue);
            state.buffers.stencil.setLocked(true);
            renderer.setRenderTarget(readBuffer);
            if (this.clear)
                renderer.clear();
            renderer.render(this.scene, this.camera);
            renderer.setRenderTarget(writeBuffer);
            if (this.clear)
                renderer.clear();
            renderer.render(this.scene, this.camera);
            state.buffers.color.setLocked(false);
            state.buffers.depth.setLocked(false);
            state.buffers.stencil.setLocked(false);
            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);
            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);
            state.buffers.stencil.setLocked(true);
        }
    });
    return  MaskPass;
});
define('skylark-threejs-ex/postprocessing/EffectComposer',[
    "skylark-threejs",
    '../shaders/CopyShader',
    '../postprocessing/ShaderPass',
    '../postprocessing/MaskPass'
], function (
    THREE, 
    CopyShader, 
    ShaderPass, 
    MaskPass
) {
    'use strict';
    var EffectComposer = function (renderer, renderTarget) {
        this.renderer = renderer;
        if (renderTarget === undefined) {
            var parameters = {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                format: THREE.RGBAFormat,
                stencilBuffer: false
            };
            var size = renderer.getSize(new THREE.Vector2());
            this._pixelRatio = renderer.getPixelRatio();
            this._width = size.width;
            this._height = size.height;
            renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);
            renderTarget.texture.name = 'EffectComposer.rt1';
        } else {
            this._pixelRatio = 1;
            this._width = renderTarget.width;
            this._height = renderTarget.height;
        }
        this.renderTarget1 = renderTarget;
        this.renderTarget2 = renderTarget.clone();
        this.renderTarget2.texture.name = 'EffectComposer.rt2';
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
        this.renderToScreen = true;
        this.passes = [];
        if (CopyShader === undefined) {
            console.error('THREE.EffectComposer relies on CopyShader');
        }
        if (ShaderPass === undefined) {
            console.error('THREE.EffectComposer relies on ShaderPass');
        }
        this.copyPass = new ShaderPass(CopyShader);
        this.clock = new THREE.Clock();
    };
    Object.assign(EffectComposer.prototype, {
        swapBuffers: function () {
            var tmp = this.readBuffer;
            this.readBuffer = this.writeBuffer;
            this.writeBuffer = tmp;
        },
        addPass: function (pass) {
            this.passes.push(pass);
            pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
        },
        insertPass: function (pass, index) {
            this.passes.splice(index, 0, pass);
        },
        isLastEnabledPass: function (passIndex) {
            for (var i = passIndex + 1; i < this.passes.length; i++) {
                if (this.passes[i].enabled) {
                    return false;
                }
            }
            return true;
        },
        render: function (deltaTime) {
            if (deltaTime === undefined) {
                deltaTime = this.clock.getDelta();
            }
            var currentRenderTarget = this.renderer.getRenderTarget();
            var maskActive = false;
            var pass, i, il = this.passes.length;
            for (i = 0; i < il; i++) {
                pass = this.passes[i];
                if (pass.enabled === false)
                    continue;
                pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);
                pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);
                if (pass.needsSwap) {
                    if (maskActive) {
                        var context = this.renderer.getContext();
                        var stencil = this.renderer.state.buffers.stencil;
                        stencil.setFunc(context.NOTEQUAL, 1, 4294967295);
                        this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);
                        stencil.setFunc(context.EQUAL, 1, 4294967295);
                    }
                    this.swapBuffers();
                }
                if (MaskPass !== undefined) {
                    if (pass instanceof MaskPass) {
                        maskActive = true;
                    } else if (pass instanceof ClearMaskPass) {
                        maskActive = false;
                    }
                }
            }
            this.renderer.setRenderTarget(currentRenderTarget);
        },
        reset: function (renderTarget) {
            if (renderTarget === undefined) {
                var size = this.renderer.getSize(new THREE.Vector2());
                this._pixelRatio = this.renderer.getPixelRatio();
                this._width = size.width;
                this._height = size.height;
                renderTarget = this.renderTarget1.clone();
                renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
            }
            this.renderTarget1.dispose();
            this.renderTarget2.dispose();
            this.renderTarget1 = renderTarget;
            this.renderTarget2 = renderTarget.clone();
            this.writeBuffer = this.renderTarget1;
            this.readBuffer = this.renderTarget2;
        },
        setSize: function (width, height) {
            this._width = width;
            this._height = height;
            var effectiveWidth = this._width * this._pixelRatio;
            var effectiveHeight = this._height * this._pixelRatio;
            this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
            this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
            for (var i = 0; i < this.passes.length; i++) {
                this.passes[i].setSize(effectiveWidth, effectiveHeight);
            }
        },
        setPixelRatio: function (pixelRatio) {
            this._pixelRatio = pixelRatio;
            this.setSize(this._width, this._height);
        }
    });

    return  EffectComposer;
});
define('skylark-threejs-ex/postprocessing/RenderPass',['./Pass'], function (Pass) {
    'use strict';
    var RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {
        Pass.call(this);
        this.scene = scene;
        this.camera = camera;
        this.overrideMaterial = overrideMaterial;
        this.clearColor = clearColor;
        this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;
        this.clear = true;
        this.clearDepth = false;
        this.needsSwap = false;
    };
    RenderPass.prototype = Object.assign(Object.create(Pass.prototype), {
        constructor: RenderPass,
        render: function (renderer, writeBuffer, readBuffer) {
            var oldAutoClear = renderer.autoClear;
            renderer.autoClear = false;
            var oldClearColor, oldClearAlpha, oldOverrideMaterial;
            if (this.overrideMaterial !== undefined) {
                oldOverrideMaterial = this.scene.overrideMaterial;
                this.scene.overrideMaterial = this.overrideMaterial;
            }
            if (this.clearColor) {
                oldClearColor = renderer.getClearColor().getHex();
                oldClearAlpha = renderer.getClearAlpha();
                renderer.setClearColor(this.clearColor, this.clearAlpha);
            }
            if (this.clearDepth) {
                renderer.clearDepth();
            }
            renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);
            if (this.clear)
                renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
            renderer.render(this.scene, this.camera);
            if (this.clearColor) {
                renderer.setClearColor(oldClearColor, oldClearAlpha);
            }
            if (this.overrideMaterial !== undefined) {
                this.scene.overrideMaterial = oldOverrideMaterial;
            }
            renderer.autoClear = oldAutoClear;
        }
    });
    return RenderPass;
});
define('skylark-threejs-ex/curves/NURBSUtils',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var NURBSUtils = {
        findSpan: function (p, u, U) {
            var n = U.length - p - 1;
            if (u >= U[n]) {
                return n - 1;
            }
            if (u <= U[p]) {
                return p;
            }
            var low = p;
            var high = n;
            var mid = Math.floor((low + high) / 2);
            while (u < U[mid] || u >= U[mid + 1]) {
                if (u < U[mid]) {
                    high = mid;
                } else {
                    low = mid;
                }
                mid = Math.floor((low + high) / 2);
            }
            return mid;
        },
        calcBasisFunctions: function (span, u, p, U) {
            var N = [];
            var left = [];
            var right = [];
            N[0] = 1;
            for (var j = 1; j <= p; ++j) {
                left[j] = u - U[span + 1 - j];
                right[j] = U[span + j] - u;
                var saved = 0;
                for (var r = 0; r < j; ++r) {
                    var rv = right[r + 1];
                    var lv = left[j - r];
                    var temp = N[r] / (rv + lv);
                    N[r] = saved + rv * temp;
                    saved = lv * temp;
                }
                N[j] = saved;
            }
            return N;
        },
        calcBSplinePoint: function (p, U, P, u) {
            var span = this.findSpan(p, u, U);
            var N = this.calcBasisFunctions(span, u, p, U);
            var C = new THREE.Vector4(0, 0, 0, 0);
            for (var j = 0; j <= p; ++j) {
                var point = P[span - p + j];
                var Nj = N[j];
                var wNj = point.w * Nj;
                C.x += point.x * wNj;
                C.y += point.y * wNj;
                C.z += point.z * wNj;
                C.w += point.w * Nj;
            }
            return C;
        },
        calcBasisFunctionDerivatives: function (span, u, p, n, U) {
            var zeroArr = [];
            for (var i = 0; i <= p; ++i)
                zeroArr[i] = 0;
            var ders = [];
            for (var i = 0; i <= n; ++i)
                ders[i] = zeroArr.slice(0);
            var ndu = [];
            for (var i = 0; i <= p; ++i)
                ndu[i] = zeroArr.slice(0);
            ndu[0][0] = 1;
            var left = zeroArr.slice(0);
            var right = zeroArr.slice(0);
            for (var j = 1; j <= p; ++j) {
                left[j] = u - U[span + 1 - j];
                right[j] = U[span + j] - u;
                var saved = 0;
                for (var r = 0; r < j; ++r) {
                    var rv = right[r + 1];
                    var lv = left[j - r];
                    ndu[j][r] = rv + lv;
                    var temp = ndu[r][j - 1] / ndu[j][r];
                    ndu[r][j] = saved + rv * temp;
                    saved = lv * temp;
                }
                ndu[j][j] = saved;
            }
            for (var j = 0; j <= p; ++j) {
                ders[0][j] = ndu[j][p];
            }
            for (var r = 0; r <= p; ++r) {
                var s1 = 0;
                var s2 = 1;
                var a = [];
                for (var i = 0; i <= p; ++i) {
                    a[i] = zeroArr.slice(0);
                }
                a[0][0] = 1;
                for (var k = 1; k <= n; ++k) {
                    var d = 0;
                    var rk = r - k;
                    var pk = p - k;
                    if (r >= k) {
                        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];
                        d = a[s2][0] * ndu[rk][pk];
                    }
                    var j1 = rk >= -1 ? 1 : -rk;
                    var j2 = r - 1 <= pk ? k - 1 : p - r;
                    for (var j = j1; j <= j2; ++j) {
                        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];
                        d += a[s2][j] * ndu[rk + j][pk];
                    }
                    if (r <= pk) {
                        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];
                        d += a[s2][k] * ndu[r][pk];
                    }
                    ders[k][r] = d;
                    var j = s1;
                    s1 = s2;
                    s2 = j;
                }
            }
            var r = p;
            for (var k = 1; k <= n; ++k) {
                for (var j = 0; j <= p; ++j) {
                    ders[k][j] *= r;
                }
                r *= p - k;
            }
            return ders;
        },
        calcBSplineDerivatives: function (p, U, P, u, nd) {
            var du = nd < p ? nd : p;
            var CK = [];
            var span = this.findSpan(p, u, U);
            var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);
            var Pw = [];
            for (var i = 0; i < P.length; ++i) {
                var point = P[i].clone();
                var w = point.w;
                point.x *= w;
                point.y *= w;
                point.z *= w;
                Pw[i] = point;
            }
            for (var k = 0; k <= du; ++k) {
                var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);
                for (var j = 1; j <= p; ++j) {
                    point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));
                }
                CK[k] = point;
            }
            for (var k = du + 1; k <= nd + 1; ++k) {
                CK[k] = new THREE.Vector4(0, 0, 0);
            }
            return CK;
        },
        calcKoverI: function (k, i) {
            var nom = 1;
            for (var j = 2; j <= k; ++j) {
                nom *= j;
            }
            var denom = 1;
            for (var j = 2; j <= i; ++j) {
                denom *= j;
            }
            for (var j = 2; j <= k - i; ++j) {
                denom *= j;
            }
            return nom / denom;
        },
        calcRationalCurveDerivatives: function (Pders) {
            var nd = Pders.length;
            var Aders = [];
            var wders = [];
            for (var i = 0; i < nd; ++i) {
                var point = Pders[i];
                Aders[i] = new THREE.Vector3(point.x, point.y, point.z);
                wders[i] = point.w;
            }
            var CK = [];
            for (var k = 0; k < nd; ++k) {
                var v = Aders[k].clone();
                for (var i = 1; i <= k; ++i) {
                    v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));
                }
                CK[k] = v.divideScalar(wders[0]);
            }
            return CK;
        },
        calcNURBSDerivatives: function (p, U, P, u, nd) {
            var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);
            return this.calcRationalCurveDerivatives(Pders);
        },
        calcSurfacePoint: function (p, q, U, V, P, u, v, target) {
            var uspan = this.findSpan(p, u, U);
            var vspan = this.findSpan(q, v, V);
            var Nu = this.calcBasisFunctions(uspan, u, p, U);
            var Nv = this.calcBasisFunctions(vspan, v, q, V);
            var temp = [];
            for (var l = 0; l <= q; ++l) {
                temp[l] = new THREE.Vector4(0, 0, 0, 0);
                for (var k = 0; k <= p; ++k) {
                    var point = P[uspan - p + k][vspan - q + l].clone();
                    var w = point.w;
                    point.x *= w;
                    point.y *= w;
                    point.z *= w;
                    temp[l].add(point.multiplyScalar(Nu[k]));
                }
            }
            var Sw = new THREE.Vector4(0, 0, 0, 0);
            for (var l = 0; l <= q; ++l) {
                Sw.add(temp[l].multiplyScalar(Nv[l]));
            }
            Sw.divideScalar(Sw.w);
            target.set(Sw.x, Sw.y, Sw.z);
        }
    };
    
    return NURBSUtils;
});
define('skylark-threejs-ex/curves/NURBSCurve',[
    "skylark-threejs",
    './NURBSUtils'
], function (THREE, NURBSUtils) {
    'use strict';
    var NURBSCurve = function (degree, knots, controlPoints, startKnot, endKnot) {
        THREE.Curve.call(this);
        this.degree = degree;
        this.knots = knots;
        this.controlPoints = [];
        this.startKnot = startKnot || 0;
        this.endKnot = endKnot || this.knots.length - 1;
        for (var i = 0; i < controlPoints.length; ++i) {
            var point = controlPoints[i];
            this.controlPoints[i] = new THREE.Vector4(point.x, point.y, point.z, point.w);
        }
    };
    NURBSCurve.prototype = Object.create(THREE.Curve.prototype);
    NURBSCurve.prototype.constructor = NURBSCurve;
    NURBSCurve.prototype.getPoint = function (t) {
        var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);
        var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);
        if (hpoint.w != 1) {
            hpoint.divideScalar(hpoint.w);
        }
        return new THREE.Vector3(hpoint.x, hpoint.y, hpoint.z);
    };
    NURBSCurve.prototype.getTangent = function (t) {
        var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);
        var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);
        var tangent = ders[1].clone();
        tangent.normalize();
        return tangent;
    };
    
    return NURBSCurve;
});
define('skylark-threejs-ex/curves/NURBSSurface',[
    "skylark-threejs",
    './NURBSUtils'
], function (THREE, NURBSUtils) {
    'use strict';
    var NURBSSurface = function (degree1, degree2, knots1, knots2, controlPoints) {
        this.degree1 = degree1;
        this.degree2 = degree2;
        this.knots1 = knots1;
        this.knots2 = knots2;
        this.controlPoints = [];
        var len1 = knots1.length - degree1 - 1;
        var len2 = knots2.length - degree2 - 1;
        for (var i = 0; i < len1; ++i) {
            this.controlPoints[i] = [];
            for (var j = 0; j < len2; ++j) {
                var point = controlPoints[i][j];
                this.controlPoints[i][j] = new THREE.Vector4(point.x, point.y, point.z, point.w);
            }
        }
    };
    NURBSSurface.prototype = {
        constructor: NURBSSurface,
        getPoint: function (t1, t2, target) {
            var u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);
            var v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);
            NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);
        }
    };
    return NURBSSurface;
});
define('skylark-threejs-ex/objects/Lensflare',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var Lensflare = function () {
        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({
            opacity: 0,
            transparent: true
        }));
        this.type = 'Lensflare';
        this.frustumCulled = false;
        this.renderOrder = Infinity;
        var positionScreen = new THREE.Vector3();
        var positionView = new THREE.Vector3();
        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);
        tempMap.minFilter = THREE.NearestFilter;
        tempMap.magFilter = THREE.NearestFilter;
        tempMap.wrapS = THREE.ClampToEdgeWrapping;
        tempMap.wrapT = THREE.ClampToEdgeWrapping;
        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);
        occlusionMap.minFilter = THREE.NearestFilter;
        occlusionMap.magFilter = THREE.NearestFilter;
        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;
        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;
        var geometry = Lensflare.Geometry;
        var material1a = new THREE.RawShaderMaterial({
            uniforms: {
                'scale': { value: null },
                'screenPosition': { value: null }
            },
            vertexShader: [
                'precision highp float;',
                'uniform vec3 screenPosition;',
                'uniform vec2 scale;',
                'attribute vec3 position;',
                'void main() {',
                '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',
                '}'
            ].join('\n'),
            fragmentShader: [
                'precision highp float;',
                'void main() {',
                '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',
                '}'
            ].join('\n'),
            depthTest: true,
            depthWrite: false,
            transparent: false
        });
        var material1b = new THREE.RawShaderMaterial({
            uniforms: {
                'map': { value: tempMap },
                'scale': { value: null },
                'screenPosition': { value: null }
            },
            vertexShader: [
                'precision highp float;',
                'uniform vec3 screenPosition;',
                'uniform vec2 scale;',
                'attribute vec3 position;',
                'attribute vec2 uv;',
                'varying vec2 vUV;',
                'void main() {',
                '\tvUV = uv;',
                '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',
                '}'
            ].join('\n'),
            fragmentShader: [
                'precision highp float;',
                'uniform sampler2D map;',
                'varying vec2 vUV;',
                'void main() {',
                '\tgl_FragColor = texture2D( map, vUV );',
                '}'
            ].join('\n'),
            depthTest: false,
            depthWrite: false,
            transparent: false
        });
        var mesh1 = new THREE.Mesh(geometry, material1a);
        var elements = [];
        var shader = LensflareElement.Shader;
        var material2 = new THREE.RawShaderMaterial({
            uniforms: {
                'map': { value: null },
                'occlusionMap': { value: occlusionMap },
                'color': { value: new THREE.Color(16777215) },
                'scale': { value: new THREE.Vector2() },
                'screenPosition': { value: new THREE.Vector3() }
            },
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            blending: THREE.AdditiveBlending,
            transparent: true,
            depthWrite: false
        });
        var mesh2 = new THREE.Mesh(geometry, material2);
        this.addElement = function (element) {
            elements.push(element);
        };
        var scale = new THREE.Vector2();
        var screenPositionPixels = new THREE.Vector2();
        var validArea = new THREE.Box2();
        var viewport = new THREE.Vector4();
        this.onBeforeRender = function (renderer, scene, camera) {
            renderer.getCurrentViewport(viewport);
            var invAspect = viewport.w / viewport.z;
            var halfViewportWidth = viewport.z / 2;
            var halfViewportHeight = viewport.w / 2;
            var size = 16 / viewport.w;
            scale.set(size * invAspect, size);
            validArea.min.set(viewport.x, viewport.y);
            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));
            positionView.setFromMatrixPosition(this.matrixWorld);
            positionView.applyMatrix4(camera.matrixWorldInverse);
            if (positionView.z > 0)
                return;
            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);
            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;
            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;
            if (validArea.containsPoint(screenPositionPixels)) {
                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);
                var uniforms = material1a.uniforms;
                uniforms['scale'].value = scale;
                uniforms['screenPosition'].value = positionScreen;
                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);
                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);
                var uniforms = material1b.uniforms;
                uniforms['scale'].value = scale;
                uniforms['screenPosition'].value = positionScreen;
                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);
                var vecX = -positionScreen.x * 2;
                var vecY = -positionScreen.y * 2;
                for (var i = 0, l = elements.length; i < l; i++) {
                    var element = elements[i];
                    var uniforms = material2.uniforms;
                    uniforms['color'].value.copy(element.color);
                    uniforms['map'].value = element.texture;
                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;
                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;
                    var size = element.size / viewport.w;
                    var invAspect = viewport.w / viewport.z;
                    uniforms['scale'].value.set(size * invAspect, size);
                    material2.uniformsNeedUpdate = true;
                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);
                }
            }
        };
        this.dispose = function () {
            material1a.dispose();
            material1b.dispose();
            material2.dispose();
            tempMap.dispose();
            occlusionMap.dispose();
            for (var i = 0, l = elements.length; i < l; i++) {
                elements[i].texture.dispose();
            }
        };
    };
    Lensflare.prototype = Object.create(THREE.Mesh.prototype);
    Lensflare.prototype.constructor = Lensflare;
    Lensflare.prototype.isLensflare = true;
    return Lensflare;
});
define('skylark-threejs-ex/objects/Reflector',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var Reflector = function (geometry, options) {
        THREE.Mesh.call(this, geometry);
        this.type = 'Reflector';
        var scope = this;
        options = options || {};
        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);
        var textureWidth = options.textureWidth || 512;
        var textureHeight = options.textureHeight || 512;
        var clipBias = options.clipBias || 0;
        var shader = options.shader || Reflector.ReflectorShader;
        var recursion = options.recursion !== undefined ? options.recursion : 0;
        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;
        var reflectorPlane = new THREE.Plane();
        var normal = new THREE.Vector3();
        var reflectorWorldPosition = new THREE.Vector3();
        var cameraWorldPosition = new THREE.Vector3();
        var rotationMatrix = new THREE.Matrix4();
        var lookAtPosition = new THREE.Vector3(0, 0, -1);
        var clipPlane = new THREE.Vector4();
        var view = new THREE.Vector3();
        var target = new THREE.Vector3();
        var q = new THREE.Vector4();
        var textureMatrix = new THREE.Matrix4();
        var virtualCamera = new THREE.PerspectiveCamera();
        var parameters = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBFormat,
            stencilBuffer: false,
            encoding: encoding
        };
        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);
        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {
            renderTarget.texture.generateMipmaps = false;
        }
        var material = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.clone(shader.uniforms),
            fragmentShader: shader.fragmentShader,
            vertexShader: shader.vertexShader
        });
        material.uniforms['tDiffuse'].value = renderTarget.texture;
        material.uniforms['color'].value = color;
        material.uniforms['textureMatrix'].value = textureMatrix;
        this.material = material;
        this.onBeforeRender = function (renderer, scene, camera) {
            if ('recursion' in camera.userData) {
                if (camera.userData.recursion === recursion)
                    return;
                camera.userData.recursion++;
            }
            reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);
            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
            rotationMatrix.extractRotation(scope.matrixWorld);
            normal.set(0, 0, 1);
            normal.applyMatrix4(rotationMatrix);
            view.subVectors(reflectorWorldPosition, cameraWorldPosition);
            if (view.dot(normal) > 0)
                return;
            view.reflect(normal).negate();
            view.add(reflectorWorldPosition);
            rotationMatrix.extractRotation(camera.matrixWorld);
            lookAtPosition.set(0, 0, -1);
            lookAtPosition.applyMatrix4(rotationMatrix);
            lookAtPosition.add(cameraWorldPosition);
            target.subVectors(reflectorWorldPosition, lookAtPosition);
            target.reflect(normal).negate();
            target.add(reflectorWorldPosition);
            virtualCamera.position.copy(view);
            virtualCamera.up.set(0, 1, 0);
            virtualCamera.up.applyMatrix4(rotationMatrix);
            virtualCamera.up.reflect(normal);
            virtualCamera.lookAt(target);
            virtualCamera.far = camera.far;
            virtualCamera.updateMatrixWorld();
            virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
            virtualCamera.userData.recursion = 0;
            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            textureMatrix.multiply(virtualCamera.projectionMatrix);
            textureMatrix.multiply(virtualCamera.matrixWorldInverse);
            textureMatrix.multiply(scope.matrixWorld);
            reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
            reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
            clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
            var projectionMatrix = virtualCamera.projectionMatrix;
            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
            q.z = -1;
            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
            clipPlane.multiplyScalar(2 / clipPlane.dot(q));
            projectionMatrix.elements[2] = clipPlane.x;
            projectionMatrix.elements[6] = clipPlane.y;
            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;
            projectionMatrix.elements[14] = clipPlane.w;
            scope.visible = false;
            var currentRenderTarget = renderer.getRenderTarget();
            var currentXrEnabled = renderer.xr.enabled;
            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;
            renderer.xr.enabled = false;
            renderer.shadowMap.autoUpdate = false;
            renderer.setRenderTarget(renderTarget);
            if (renderer.autoClear === false)
                renderer.clear();
            renderer.render(scene, virtualCamera);
            renderer.xr.enabled = currentXrEnabled;
            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;
            renderer.setRenderTarget(currentRenderTarget);
            var viewport = camera.viewport;
            if (viewport !== undefined) {
                renderer.state.viewport(viewport);
            }
            scope.visible = true;
        };
        this.getRenderTarget = function () {
            return renderTarget;
        };
    };
    Reflector.prototype = Object.create(THREE.Mesh.prototype);
    Reflector.prototype.constructor = Reflector;
    Reflector.ReflectorShader = {
        uniforms: {
            'color': { value: null },
            'tDiffuse': { value: null },
            'textureMatrix': { value: null }
        },
        vertexShader: [
            'uniform mat4 textureMatrix;',
            'varying vec4 vUv;',
            'void main() {',
            '\tvUv = textureMatrix * vec4( position, 1.0 );',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec3 color;',
            'uniform sampler2D tDiffuse;',
            'varying vec4 vUv;',
            'float blendOverlay( float base, float blend ) {',
            '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',
            '}',
            'vec3 blendOverlay( vec3 base, vec3 blend ) {',
            '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',
            '}',
            'void main() {',
            '\tvec4 base = texture2DProj( tDiffuse, vUv );',
            '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',
            '}'
        ].join('\n')
    };

    return Reflector;
});
define('skylark-threejs-ex/objects/Refractor',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var Refractor = function (geometry, options) {
        THREE.Mesh.call(this, geometry);
        this.type = 'Refractor';
        var scope = this;
        options = options || {};
        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);
        var textureWidth = options.textureWidth || 512;
        var textureHeight = options.textureHeight || 512;
        var clipBias = options.clipBias || 0;
        var shader = options.shader || Refractor.RefractorShader;
        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;
        var virtualCamera = new THREE.PerspectiveCamera();
        virtualCamera.matrixAutoUpdate = false;
        virtualCamera.userData.refractor = true;
        var refractorPlane = new THREE.Plane();
        var textureMatrix = new THREE.Matrix4();
        var parameters = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBFormat,
            stencilBuffer: false,
            encoding: encoding
        };
        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);
        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {
            renderTarget.texture.generateMipmaps = false;
        }
        this.material = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.clone(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            transparent: true
        });
        this.material.uniforms['color'].value = color;
        this.material.uniforms['tDiffuse'].value = renderTarget.texture;
        this.material.uniforms['textureMatrix'].value = textureMatrix;
        var visible = function () {
            var refractorWorldPosition = new THREE.Vector3();
            var cameraWorldPosition = new THREE.Vector3();
            var rotationMatrix = new THREE.Matrix4();
            var view = new THREE.Vector3();
            var normal = new THREE.Vector3();
            return function visible(camera) {
                refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);
                cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
                view.subVectors(refractorWorldPosition, cameraWorldPosition);
                rotationMatrix.extractRotation(scope.matrixWorld);
                normal.set(0, 0, 1);
                normal.applyMatrix4(rotationMatrix);
                return view.dot(normal) < 0;
            };
        }();
        var updateRefractorPlane = function () {
            var normal = new THREE.Vector3();
            var position = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            var scale = new THREE.Vector3();
            return function updateRefractorPlane() {
                scope.matrixWorld.decompose(position, quaternion, scale);
                normal.set(0, 0, 1).applyQuaternion(quaternion).normalize();
                normal.negate();
                refractorPlane.setFromNormalAndCoplanarPoint(normal, position);
            };
        }();
        var updateVirtualCamera = function () {
            var clipPlane = new THREE.Plane();
            var clipVector = new THREE.Vector4();
            var q = new THREE.Vector4();
            return function updateVirtualCamera(camera) {
                virtualCamera.matrixWorld.copy(camera.matrixWorld);
                virtualCamera.matrixWorldInverse.getInverse(virtualCamera.matrixWorld);
                virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
                virtualCamera.far = camera.far;
                clipPlane.copy(refractorPlane);
                clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
                clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);
                var projectionMatrix = virtualCamera.projectionMatrix;
                q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
                q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
                q.z = -1;
                q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
                clipVector.multiplyScalar(2 / clipVector.dot(q));
                projectionMatrix.elements[2] = clipVector.x;
                projectionMatrix.elements[6] = clipVector.y;
                projectionMatrix.elements[10] = clipVector.z + 1 - clipBias;
                projectionMatrix.elements[14] = clipVector.w;
            };
        }();
        function updateTextureMatrix(camera) {
            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            textureMatrix.multiply(camera.projectionMatrix);
            textureMatrix.multiply(camera.matrixWorldInverse);
            textureMatrix.multiply(scope.matrixWorld);
        }
        function render(renderer, scene, camera) {
            scope.visible = false;
            var currentRenderTarget = renderer.getRenderTarget();
            var currentXrEnabled = renderer.xr.enabled;
            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;
            renderer.xr.enabled = false;
            renderer.shadowMap.autoUpdate = false;
            renderer.setRenderTarget(renderTarget);
            if (renderer.autoClear === false)
                renderer.clear();
            renderer.render(scene, virtualCamera);
            renderer.xr.enabled = currentXrEnabled;
            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;
            renderer.setRenderTarget(currentRenderTarget);
            var viewport = camera.viewport;
            if (viewport !== undefined) {
                renderer.state.viewport(viewport);
            }
            scope.visible = true;
        }
        this.onBeforeRender = function (renderer, scene, camera) {
            if (camera.userData.refractor === true)
                return;
            if (!visible(camera) === true)
                return;
            updateRefractorPlane();
            updateTextureMatrix(camera);
            updateVirtualCamera(camera);
            render(renderer, scene, camera);
        };
        this.getRenderTarget = function () {
            return renderTarget;
        };
    };
    Refractor.prototype = Object.create(THREE.Mesh.prototype);
    Refractor.prototype.constructor = Refractor;
    Refractor.RefractorShader = {
        uniforms: {
            'color': { value: null },
            'tDiffuse': { value: null },
            'textureMatrix': { value: null }
        },
        vertexShader: [
            'uniform mat4 textureMatrix;',
            'varying vec4 vUv;',
            'void main() {',
            '\tvUv = textureMatrix * vec4( position, 1.0 );',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec3 color;',
            'uniform sampler2D tDiffuse;',
            'varying vec4 vUv;',
            'float blendOverlay( float base, float blend ) {',
            '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',
            '}',
            'vec3 blendOverlay( vec3 base, vec3 blend ) {',
            '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',
            '}',
            'void main() {',
            '\tvec4 base = texture2DProj( tDiffuse, vUv );',
            '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',
            '}'
        ].join('\n')
    };
    return Refractor;
});
define('skylark-threejs-ex/loaders/TTFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var TTFLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.reversed = false;
    };
    TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: TTFLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (buffer) {
                onLoad(scope.parse(buffer));
            }, onProgress, onError);
        },
        parse: function (arraybuffer) {
            function convert(font, reversed) {
                var round = Math.round;
                var glyphs = {};
                var scale = 100000 / ((font.unitsPerEm || 2048) * 72);
                var glyphIndexMap = font.encoding.cmap.glyphIndexMap;
                var unicodes = Object.keys(glyphIndexMap);
                for (var i = 0; i < unicodes.length; i++) {
                    var unicode = unicodes[i];
                    var glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];
                    if (unicode !== undefined) {
                        var token = {
                            ha: round(glyph.advanceWidth * scale),
                            x_min: round(glyph.xMin * scale),
                            x_max: round(glyph.xMax * scale),
                            o: ''
                        };
                        if (reversed) {
                            glyph.path.commands = reverseCommands(glyph.path.commands);
                        }
                        glyph.path.commands.forEach(function (command) {
                            if (command.type.toLowerCase() === 'c') {
                                command.type = 'b';
                            }
                            token.o += command.type.toLowerCase() + ' ';
                            if (command.x !== undefined && command.y !== undefined) {
                                token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';
                            }
                            if (command.x1 !== undefined && command.y1 !== undefined) {
                                token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';
                            }
                            if (command.x2 !== undefined && command.y2 !== undefined) {
                                token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';
                            }
                        });
                        glyphs[String.fromCodePoint(glyph.unicode)] = token;
                    }
                }
                return {
                    glyphs: glyphs,
                    familyName: font.getEnglishName('fullName'),
                    ascender: round(font.ascender * scale),
                    descender: round(font.descender * scale),
                    underlinePosition: font.tables.post.underlinePosition,
                    underlineThickness: font.tables.post.underlineThickness,
                    boundingBox: {
                        xMin: font.tables.head.xMin,
                        xMax: font.tables.head.xMax,
                        yMin: font.tables.head.yMin,
                        yMax: font.tables.head.yMax
                    },
                    resolution: 1000,
                    original_font_information: font.tables.name
                };
            }
            function reverseCommands(commands) {
                var paths = [];
                var path;
                commands.forEach(function (c) {
                    if (c.type.toLowerCase() === 'm') {
                        path = [c];
                        paths.push(path);
                    } else if (c.type.toLowerCase() !== 'z') {
                        path.push(c);
                    }
                });
                var reversed = [];
                paths.forEach(function (p) {
                    var result = {
                        type: 'm',
                        x: p[p.length - 1].x,
                        y: p[p.length - 1].y
                    };
                    reversed.push(result);
                    for (var i = p.length - 1; i > 0; i--) {
                        var command = p[i];
                        var result = { type: command.type };
                        if (command.x2 !== undefined && command.y2 !== undefined) {
                            result.x1 = command.x2;
                            result.y1 = command.y2;
                            result.x2 = command.x1;
                            result.y2 = command.y1;
                        } else if (command.x1 !== undefined && command.y1 !== undefined) {
                            result.x1 = command.x1;
                            result.y1 = command.y1;
                        }
                        result.x = p[i - 1].x;
                        result.y = p[i - 1].y;
                        reversed.push(result);
                    }
                });
                return reversed;
            }
            if (typeof opentype === 'undefined') {
                console.warn("THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader.");
                return null;
            }
            return convert(opentype.parse(arraybuffer), this.reversed);
        }
    });
    return TTFLoader;
});
define('skylark-threejs-ex/loaders/3MFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var ThreeMFLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.availableExtensions = [];
    };
    ThreeMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: ThreeMFLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (buffer) {
                onLoad(scope.parse(buffer));
            }, onProgress, onError);
        },
        parse: function (data) {
            var scope = this;
            var textureLoader = new THREE.TextureLoader(this.manager);
            function loadDocument(data) {
                var zip = null;
                var file = null;
                var relsName;
                var modelRelsName;
                var modelPartNames = [];
                var printTicketPartNames = [];
                var texturesPartNames = [];
                var otherPartNames = [];
                var rels;
                var modelRels;
                var modelParts = {};
                var printTicketParts = {};
                var texturesParts = {};
                var otherParts = {};
                try {
                    zip = new JSZip(data);
                } catch (e) {
                    if (e instanceof ReferenceError) {
                        console.error('THREE.3MFLoader: jszip missing and file is compressed.');
                        return null;
                    }
                }
                for (file in zip.files) {
                    if (file.match(/\_rels\/.rels$/)) {
                        relsName = file;
                    } else if (file.match(/3D\/_rels\/.*\.model\.rels$/)) {
                        modelRelsName = file;
                    } else if (file.match(/^3D\/.*\.model$/)) {
                        modelPartNames.push(file);
                    } else if (file.match(/^3D\/Metadata\/.*\.xml$/)) {
                        printTicketPartNames.push(file);
                    } else if (file.match(/^3D\/Textures?\/.*/)) {
                        texturesPartNames.push(file);
                    } else if (file.match(/^3D\/Other\/.*/)) {
                        otherPartNames.push(file);
                    }
                }
                var relsView = new Uint8Array(zip.file(relsName).asArrayBuffer());
                var relsFileText = THREE.LoaderUtils.decodeText(relsView);
                rels = parseRelsXml(relsFileText);
                if (modelRelsName) {
                    var relsView = new Uint8Array(zip.file(modelRelsName).asArrayBuffer());
                    var relsFileText = THREE.LoaderUtils.decodeText(relsView);
                    modelRels = parseRelsXml(relsFileText);
                }
                for (var i = 0; i < modelPartNames.length; i++) {
                    var modelPart = modelPartNames[i];
                    var view = new Uint8Array(zip.file(modelPart).asArrayBuffer());
                    var fileText = THREE.LoaderUtils.decodeText(view);
                    var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');
                    if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {
                        console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);
                    }
                    var modelNode = xmlData.querySelector('model');
                    var extensions = {};
                    for (var i = 0; i < modelNode.attributes.length; i++) {
                        var attr = modelNode.attributes[i];
                        if (attr.name.match(/^xmlns:(.+)$/)) {
                            extensions[attr.value] = RegExp.$1;
                        }
                    }
                    var modelData = parseModelNode(modelNode);
                    modelData['xml'] = modelNode;
                    if (0 < Object.keys(extensions).length) {
                        modelData['extensions'] = extensions;
                    }
                    modelParts[modelPart] = modelData;
                }
                for (var i = 0; i < texturesPartNames.length; i++) {
                    var texturesPartName = texturesPartNames[i];
                    texturesParts[texturesPartName] = zip.file(texturesPartName).asArrayBuffer();
                }
                return {
                    rels: rels,
                    modelRels: modelRels,
                    model: modelParts,
                    printTicket: printTicketParts,
                    texture: texturesParts,
                    other: otherParts
                };
            }
            function parseRelsXml(relsFileText) {
                var relationships = [];
                var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');
                var relsNodes = relsXmlData.querySelectorAll('Relationship');
                for (var i = 0; i < relsNodes.length; i++) {
                    var relsNode = relsNodes[i];
                    var relationship = {
                        target: relsNode.getAttribute('Target'),
                        id: relsNode.getAttribute('Id'),
                        type: relsNode.getAttribute('Type')
                    };
                    relationships.push(relationship);
                }
                return relationships;
            }
            function parseMetadataNodes(metadataNodes) {
                var metadataData = {};
                for (var i = 0; i < metadataNodes.length; i++) {
                    var metadataNode = metadataNodes[i];
                    var name = metadataNode.getAttribute('name');
                    var validNames = [
                        'Title',
                        'Designer',
                        'Description',
                        'Copyright',
                        'LicenseTerms',
                        'Rating',
                        'CreationDate',
                        'ModificationDate'
                    ];
                    if (0 <= validNames.indexOf(name)) {
                        metadataData[name] = metadataNode.textContent;
                    }
                }
                return metadataData;
            }
            function parseBasematerialsNode(basematerialsNode) {
                var basematerialsData = {
                    id: basematerialsNode.getAttribute('id'),
                    basematerials: []
                };
                var basematerialNodes = basematerialsNode.querySelectorAll('base');
                for (var i = 0; i < basematerialNodes.length; i++) {
                    var basematerialNode = basematerialNodes[i];
                    var basematerialData = parseBasematerialNode(basematerialNode);
                    basematerialData.index = i;
                    basematerialsData.basematerials.push(basematerialData);
                }
                return basematerialsData;
            }
            function parseTexture2DNode(texture2DNode) {
                var texture2dData = {
                    id: texture2DNode.getAttribute('id'),
                    path: texture2DNode.getAttribute('path'),
                    contenttype: texture2DNode.getAttribute('contenttype'),
                    tilestyleu: texture2DNode.getAttribute('tilestyleu'),
                    tilestylev: texture2DNode.getAttribute('tilestylev'),
                    filter: texture2DNode.getAttribute('filter')
                };
                return texture2dData;
            }
            function parseTextures2DGroupNode(texture2DGroupNode) {
                var texture2DGroupData = {
                    id: texture2DGroupNode.getAttribute('id'),
                    texid: texture2DGroupNode.getAttribute('texid'),
                    displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')
                };
                var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');
                var uvs = [];
                for (var i = 0; i < tex2coordNodes.length; i++) {
                    var tex2coordNode = tex2coordNodes[i];
                    var u = tex2coordNode.getAttribute('u');
                    var v = tex2coordNode.getAttribute('v');
                    uvs.push(parseFloat(u), parseFloat(v));
                }
                texture2DGroupData['uvs'] = new Float32Array(uvs);
                return texture2DGroupData;
            }
            function parseColorGroupNode(colorGroupNode) {
                var colorGroupData = {
                    id: colorGroupNode.getAttribute('id'),
                    displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')
                };
                var colorNodes = colorGroupNode.querySelectorAll('color');
                var colors = [];
                var colorObject = new THREE.Color();
                for (var i = 0; i < colorNodes.length; i++) {
                    var colorNode = colorNodes[i];
                    var color = colorNode.getAttribute('color');
                    colorObject.setStyle(color.substring(0, 7));
                    colorObject.convertSRGBToLinear();
                    colors.push(colorObject.r, colorObject.g, colorObject.b);
                }
                colorGroupData['colors'] = new Float32Array(colors);
                return colorGroupData;
            }
            function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {
                var metallicDisplaypropertiesData = { id: metallicDisplaypropetiesNode.getAttribute('id') };
                var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');
                var metallicData = [];
                for (var i = 0; i < metallicNodes.length; i++) {
                    var metallicNode = metallicNodes[i];
                    metallicData.push({
                        name: metallicNode.getAttribute('name'),
                        metallicness: parseFloat(metallicNode.getAttribute('metallicness')),
                        roughness: parseFloat(metallicNode.getAttribute('roughness'))
                    });
                }
                metallicDisplaypropertiesData.data = metallicData;
                return metallicDisplaypropertiesData;
            }
            function parseBasematerialNode(basematerialNode) {
                var basematerialData = {};
                basematerialData['name'] = basematerialNode.getAttribute('name');
                basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor');
                basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');
                return basematerialData;
            }
            function parseMeshNode(meshNode) {
                var meshData = {};
                var vertices = [];
                var vertexNodes = meshNode.querySelectorAll('vertices vertex');
                for (var i = 0; i < vertexNodes.length; i++) {
                    var vertexNode = vertexNodes[i];
                    var x = vertexNode.getAttribute('x');
                    var y = vertexNode.getAttribute('y');
                    var z = vertexNode.getAttribute('z');
                    vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));
                }
                meshData['vertices'] = new Float32Array(vertices);
                var triangleProperties = [];
                var triangles = [];
                var triangleNodes = meshNode.querySelectorAll('triangles triangle');
                for (var i = 0; i < triangleNodes.length; i++) {
                    var triangleNode = triangleNodes[i];
                    var v1 = triangleNode.getAttribute('v1');
                    var v2 = triangleNode.getAttribute('v2');
                    var v3 = triangleNode.getAttribute('v3');
                    var p1 = triangleNode.getAttribute('p1');
                    var p2 = triangleNode.getAttribute('p2');
                    var p3 = triangleNode.getAttribute('p3');
                    var pid = triangleNode.getAttribute('pid');
                    var triangleProperty = {};
                    triangleProperty['v1'] = parseInt(v1, 10);
                    triangleProperty['v2'] = parseInt(v2, 10);
                    triangleProperty['v3'] = parseInt(v3, 10);
                    triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);
                    if (p1) {
                        triangleProperty['p1'] = parseInt(p1, 10);
                    }
                    if (p2) {
                        triangleProperty['p2'] = parseInt(p2, 10);
                    }
                    if (p3) {
                        triangleProperty['p3'] = parseInt(p3, 10);
                    }
                    if (pid) {
                        triangleProperty['pid'] = pid;
                    }
                    if (0 < Object.keys(triangleProperty).length) {
                        triangleProperties.push(triangleProperty);
                    }
                }
                meshData['triangleProperties'] = triangleProperties;
                meshData['triangles'] = new Uint32Array(triangles);
                return meshData;
            }
            function parseComponentsNode(componentsNode) {
                var components = [];
                var componentNodes = componentsNode.querySelectorAll('component');
                for (var i = 0; i < componentNodes.length; i++) {
                    var componentNode = componentNodes[i];
                    var componentData = parseComponentNode(componentNode);
                    components.push(componentData);
                }
                return components;
            }
            function parseComponentNode(componentNode) {
                var componentData = {};
                componentData['objectId'] = componentNode.getAttribute('objectid');
                var transform = componentNode.getAttribute('transform');
                if (transform) {
                    componentData['transform'] = parseTransform(transform);
                }
                return componentData;
            }
            function parseTransform(transform) {
                var t = [];
                transform.split(' ').forEach(function (s) {
                    t.push(parseFloat(s));
                });
                var matrix = new THREE.Matrix4();
                matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);
                return matrix;
            }
            function parseObjectNode(objectNode) {
                var objectData = { type: objectNode.getAttribute('type') };
                var id = objectNode.getAttribute('id');
                if (id) {
                    objectData['id'] = id;
                }
                var pid = objectNode.getAttribute('pid');
                if (pid) {
                    objectData['pid'] = pid;
                }
                var pindex = objectNode.getAttribute('pindex');
                if (pindex) {
                    objectData['pindex'] = pindex;
                }
                var thumbnail = objectNode.getAttribute('thumbnail');
                if (thumbnail) {
                    objectData['thumbnail'] = thumbnail;
                }
                var partnumber = objectNode.getAttribute('partnumber');
                if (partnumber) {
                    objectData['partnumber'] = partnumber;
                }
                var name = objectNode.getAttribute('name');
                if (name) {
                    objectData['name'] = name;
                }
                var meshNode = objectNode.querySelector('mesh');
                if (meshNode) {
                    objectData['mesh'] = parseMeshNode(meshNode);
                }
                var componentsNode = objectNode.querySelector('components');
                if (componentsNode) {
                    objectData['components'] = parseComponentsNode(componentsNode);
                }
                return objectData;
            }
            function parseResourcesNode(resourcesNode) {
                var resourcesData = {};
                resourcesData['basematerials'] = {};
                var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');
                for (var i = 0; i < basematerialsNodes.length; i++) {
                    var basematerialsNode = basematerialsNodes[i];
                    var basematerialsData = parseBasematerialsNode(basematerialsNode);
                    resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;
                }
                resourcesData['texture2d'] = {};
                var textures2DNodes = resourcesNode.querySelectorAll('texture2d');
                for (var i = 0; i < textures2DNodes.length; i++) {
                    var textures2DNode = textures2DNodes[i];
                    var texture2DData = parseTexture2DNode(textures2DNode);
                    resourcesData['texture2d'][texture2DData['id']] = texture2DData;
                }
                resourcesData['colorgroup'] = {};
                var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');
                for (var i = 0; i < colorGroupNodes.length; i++) {
                    var colorGroupNode = colorGroupNodes[i];
                    var colorGroupData = parseColorGroupNode(colorGroupNode);
                    resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;
                }
                resourcesData['pbmetallicdisplayproperties'] = {};
                var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');
                for (var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {
                    var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];
                    var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);
                    resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;
                }
                resourcesData['texture2dgroup'] = {};
                var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');
                for (var i = 0; i < textures2DGroupNodes.length; i++) {
                    var textures2DGroupNode = textures2DGroupNodes[i];
                    var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);
                    resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;
                }
                resourcesData['object'] = {};
                var objectNodes = resourcesNode.querySelectorAll('object');
                for (var i = 0; i < objectNodes.length; i++) {
                    var objectNode = objectNodes[i];
                    var objectData = parseObjectNode(objectNode);
                    resourcesData['object'][objectData['id']] = objectData;
                }
                return resourcesData;
            }
            function parseBuildNode(buildNode) {
                var buildData = [];
                var itemNodes = buildNode.querySelectorAll('item');
                for (var i = 0; i < itemNodes.length; i++) {
                    var itemNode = itemNodes[i];
                    var buildItem = { objectId: itemNode.getAttribute('objectid') };
                    var transform = itemNode.getAttribute('transform');
                    if (transform) {
                        buildItem['transform'] = parseTransform(transform);
                    }
                    buildData.push(buildItem);
                }
                return buildData;
            }
            function parseModelNode(modelNode) {
                var modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' };
                var metadataNodes = modelNode.querySelectorAll('metadata');
                if (metadataNodes) {
                    modelData['metadata'] = parseMetadataNodes(metadataNodes);
                }
                var resourcesNode = modelNode.querySelector('resources');
                if (resourcesNode) {
                    modelData['resources'] = parseResourcesNode(resourcesNode);
                }
                var buildNode = modelNode.querySelector('build');
                if (buildNode) {
                    modelData['build'] = parseBuildNode(buildNode);
                }
                return modelData;
            }
            function buildTexture(texture2dgroup, objects, modelData, textureData) {
                var texid = texture2dgroup.texid;
                var texture2ds = modelData.resources.texture2d;
                var texture2d = texture2ds[texid];
                if (texture2d) {
                    var data = textureData[texture2d.path];
                    var type = texture2d.contenttype;
                    var blob = new Blob([data], { type: type });
                    var sourceURI = URL.createObjectURL(blob);
                    var texture = textureLoader.load(sourceURI, function () {
                        URL.revokeObjectURL(sourceURI);
                    });
                    texture.encoding = THREE.sRGBEncoding;
                    switch (texture2d.tilestyleu) {
                    case 'wrap':
                        texture.wrapS = THREE.RepeatWrapping;
                        break;
                    case 'mirror':
                        texture.wrapS = THREE.MirroredRepeatWrapping;
                        break;
                    case 'none':
                    case 'clamp':
                        texture.wrapS = THREE.ClampToEdgeWrapping;
                        break;
                    default:
                        texture.wrapS = THREE.RepeatWrapping;
                    }
                    switch (texture2d.tilestylev) {
                    case 'wrap':
                        texture.wrapT = THREE.RepeatWrapping;
                        break;
                    case 'mirror':
                        texture.wrapT = THREE.MirroredRepeatWrapping;
                        break;
                    case 'none':
                    case 'clamp':
                        texture.wrapT = THREE.ClampToEdgeWrapping;
                        break;
                    default:
                        texture.wrapT = THREE.RepeatWrapping;
                    }
                    switch (texture2d.filter) {
                    case 'auto':
                        texture.magFilter = THREE.LinearFilter;
                        texture.minFilter = THREE.LinearMipmapLinearFilter;
                        break;
                    case 'linear':
                        texture.magFilter = THREE.LinearFilter;
                        texture.minFilter = THREE.LinearFilter;
                        break;
                    case 'nearest':
                        texture.magFilter = THREE.NearestFilter;
                        texture.minFilter = THREE.NearestFilter;
                        break;
                    default:
                        texture.magFilter = THREE.LinearFilter;
                        texture.minFilter = THREE.LinearMipmapLinearFilter;
                    }
                    return texture;
                } else {
                    return null;
                }
            }
            function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {
                var objectPindex = objectData.pindex;
                var materialMap = {};
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;
                    if (materialMap[pindex] === undefined)
                        materialMap[pindex] = [];
                    materialMap[pindex].push(triangleProperty);
                }
                var keys = Object.keys(materialMap);
                var meshes = [];
                for (var i = 0, l = keys.length; i < l; i++) {
                    var materialIndex = keys[i];
                    var trianglePropertiesProps = materialMap[materialIndex];
                    var basematerialData = basematerials.basematerials[materialIndex];
                    var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);
                    var geometry = new THREE.BufferGeometry();
                    var positionData = [];
                    var vertices = meshData.vertices;
                    for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {
                        var triangleProperty = trianglePropertiesProps[j];
                        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);
                        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);
                        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);
                        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);
                        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);
                        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);
                        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);
                        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);
                        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);
                    }
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));
                    var mesh = new THREE.Mesh(geometry, material);
                    meshes.push(mesh);
                }
                return meshes;
            }
            function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {
                var geometry = new THREE.BufferGeometry();
                var positionData = [];
                var uvData = [];
                var vertices = meshData.vertices;
                var uvs = texture2dgroup.uvs;
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    positionData.push(vertices[triangleProperty.v1 * 3 + 0]);
                    positionData.push(vertices[triangleProperty.v1 * 3 + 1]);
                    positionData.push(vertices[triangleProperty.v1 * 3 + 2]);
                    positionData.push(vertices[triangleProperty.v2 * 3 + 0]);
                    positionData.push(vertices[triangleProperty.v2 * 3 + 1]);
                    positionData.push(vertices[triangleProperty.v2 * 3 + 2]);
                    positionData.push(vertices[triangleProperty.v3 * 3 + 0]);
                    positionData.push(vertices[triangleProperty.v3 * 3 + 1]);
                    positionData.push(vertices[triangleProperty.v3 * 3 + 2]);
                    uvData.push(uvs[triangleProperty.p1 * 2 + 0]);
                    uvData.push(uvs[triangleProperty.p1 * 2 + 1]);
                    uvData.push(uvs[triangleProperty.p2 * 2 + 0]);
                    uvData.push(uvs[triangleProperty.p2 * 2 + 1]);
                    uvData.push(uvs[triangleProperty.p3 * 2 + 0]);
                    uvData.push(uvs[triangleProperty.p3 * 2 + 1]);
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));
                geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvData, 2));
                var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);
                var material = new THREE.MeshPhongMaterial({
                    map: texture,
                    flatShading: true
                });
                var mesh = new THREE.Mesh(geometry, material);
                return mesh;
            }
            function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData) {
                var geometry = new THREE.BufferGeometry();
                var positionData = [];
                var colorData = [];
                var vertices = meshData.vertices;
                var colors = colorgroup.colors;
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    var v1 = triangleProperty.v1;
                    var v2 = triangleProperty.v2;
                    var v3 = triangleProperty.v3;
                    positionData.push(vertices[v1 * 3 + 0]);
                    positionData.push(vertices[v1 * 3 + 1]);
                    positionData.push(vertices[v1 * 3 + 2]);
                    positionData.push(vertices[v2 * 3 + 0]);
                    positionData.push(vertices[v2 * 3 + 1]);
                    positionData.push(vertices[v2 * 3 + 2]);
                    positionData.push(vertices[v3 * 3 + 0]);
                    positionData.push(vertices[v3 * 3 + 1]);
                    positionData.push(vertices[v3 * 3 + 2]);
                    var p1 = triangleProperty.p1;
                    var p2 = triangleProperty.p2;
                    var p3 = triangleProperty.p3;
                    colorData.push(colors[p1 * 3 + 0]);
                    colorData.push(colors[p1 * 3 + 1]);
                    colorData.push(colors[p1 * 3 + 2]);
                    colorData.push(colors[(p2 || p1) * 3 + 0]);
                    colorData.push(colors[(p2 || p1) * 3 + 1]);
                    colorData.push(colors[(p2 || p1) * 3 + 2]);
                    colorData.push(colors[(p3 || p1) * 3 + 0]);
                    colorData.push(colors[(p3 || p1) * 3 + 1]);
                    colorData.push(colors[(p3 || p1) * 3 + 2]);
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));
                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorData, 3));
                var material = new THREE.MeshPhongMaterial({
                    vertexColors: true,
                    flatShading: true
                });
                var mesh = new THREE.Mesh(geometry, material);
                return mesh;
            }
            function buildDefaultMesh(meshData) {
                var geometry = new THREE.BufferGeometry();
                geometry.setIndex(new THREE.BufferAttribute(meshData['triangles'], 1));
                geometry.setAttribute('position', new THREE.BufferAttribute(meshData['vertices'], 3));
                var material = new THREE.MeshPhongMaterial({
                    color: 11184895,
                    flatShading: true
                });
                var mesh = new THREE.Mesh(geometry, material);
                return mesh;
            }
            function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {
                var keys = Object.keys(resourceMap);
                var meshes = [];
                for (var i = 0, il = keys.length; i < il; i++) {
                    var resourceId = keys[i];
                    var triangleProperties = resourceMap[resourceId];
                    var resourceType = getResourceType(resourceId, modelData);
                    switch (resourceType) {
                    case 'material':
                        var basematerials = modelData.resources.basematerials[resourceId];
                        var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);
                        for (var j = 0, jl = newMeshes.length; j < jl; j++) {
                            meshes.push(newMeshes[j]);
                        }
                        break;
                    case 'texture':
                        var texture2dgroup = modelData.resources.texture2dgroup[resourceId];
                        meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));
                        break;
                    case 'vertexColors':
                        var colorgroup = modelData.resources.colorgroup[resourceId];
                        meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData));
                        break;
                    case 'default':
                        meshes.push(buildDefaultMesh(meshData));
                        break;
                    default:
                        console.error('THREE.3MFLoader: Unsupported resource type.');
                    }
                }
                return meshes;
            }
            function getResourceType(pid, modelData) {
                if (modelData.resources.texture2dgroup[pid] !== undefined) {
                    return 'texture';
                } else if (modelData.resources.basematerials[pid] !== undefined) {
                    return 'material';
                } else if (modelData.resources.colorgroup[pid] !== undefined) {
                    return 'vertexColors';
                } else if (pid === 'default') {
                    return 'default';
                } else {
                    return undefined;
                }
            }
            function analyzeObject(modelData, meshData, objectData) {
                var resourceMap = {};
                var triangleProperties = meshData['triangleProperties'];
                var objectPid = objectData.pid;
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;
                    if (pid === undefined)
                        pid = 'default';
                    if (resourceMap[pid] === undefined)
                        resourceMap[pid] = [];
                    resourceMap[pid].push(triangleProperty);
                }
                return resourceMap;
            }
            function buildGroup(meshData, objects, modelData, textureData, objectData) {
                var group = new THREE.Group();
                var resourceMap = analyzeObject(modelData, meshData, objectData);
                var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);
                for (var i = 0, l = meshes.length; i < l; i++) {
                    group.add(meshes[i]);
                }
                return group;
            }
            function applyExtensions(extensions, meshData, modelXml) {
                if (!extensions) {
                    return;
                }
                var availableExtensions = [];
                var keys = Object.keys(extensions);
                for (var i = 0; i < keys.length; i++) {
                    var ns = keys[i];
                    for (var j = 0; j < scope.availableExtensions.length; j++) {
                        var extension = scope.availableExtensions[j];
                        if (extension.ns === ns) {
                            availableExtensions.push(extension);
                        }
                    }
                }
                for (var i = 0; i < availableExtensions.length; i++) {
                    var extension = availableExtensions[i];
                    extension.apply(modelXml, extensions[extension['ns']], meshData);
                }
            }
            function getBuild(data, objects, modelData, textureData, objectData, builder) {
                if (data.build !== undefined)
                    return data.build;
                data.build = builder(data, objects, modelData, textureData, objectData);
                return data.build;
            }
            function buildBasematerial(materialData, objects, modelData) {
                var material;
                var displaypropertiesid = materialData.displaypropertiesid;
                var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;
                if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {
                    var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];
                    var metallicData = pbmetallicdisplayproperty.data[materialData.index];
                    material = new THREE.MeshStandardMaterial({
                        flatShading: true,
                        roughness: metallicData.roughness,
                        metalness: metallicData.metallicness
                    });
                } else {
                    material = new THREE.MeshPhongMaterial({ flatShading: true });
                }
                material.name = materialData.name;
                var displaycolor = materialData.displaycolor;
                var color = displaycolor.substring(0, 7);
                material.color.setStyle(color);
                material.color.convertSRGBToLinear();
                if (displaycolor.length === 9) {
                    material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;
                }
                return material;
            }
            function buildComposite(compositeData, objects, modelData, textureData) {
                var composite = new THREE.Group();
                for (var j = 0; j < compositeData.length; j++) {
                    var component = compositeData[j];
                    var build = objects[component.objectId];
                    if (build === undefined) {
                        buildObject(component.objectId, objects, modelData, textureData);
                        build = objects[component.objectId];
                    }
                    var object3D = build.clone();
                    var transform = component.transform;
                    if (transform) {
                        object3D.applyMatrix4(transform);
                    }
                    composite.add(object3D);
                }
                return composite;
            }
            function buildObject(objectId, objects, modelData, textureData) {
                var objectData = modelData['resources']['object'][objectId];
                if (objectData['mesh']) {
                    var meshData = objectData['mesh'];
                    var extensions = modelData['extensions'];
                    var modelXml = modelData['xml'];
                    applyExtensions(extensions, meshData, modelXml);
                    objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);
                } else {
                    var compositeData = objectData['components'];
                    objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);
                }
            }
            function buildObjects(data3mf) {
                var modelsData = data3mf.model;
                var modelRels = data3mf.modelRels;
                var objects = {};
                var modelsKeys = Object.keys(modelsData);
                var textureData = {};
                if (modelRels) {
                    for (var i = 0, l = modelRels.length; i < l; i++) {
                        var modelRel = modelRels[i];
                        var textureKey = modelRel.target.substring(1);
                        if (data3mf.texture[textureKey]) {
                            textureData[modelRel.target] = data3mf.texture[textureKey];
                        }
                    }
                }
                for (var i = 0; i < modelsKeys.length; i++) {
                    var modelsKey = modelsKeys[i];
                    var modelData = modelsData[modelsKey];
                    var objectIds = Object.keys(modelData['resources']['object']);
                    for (var j = 0; j < objectIds.length; j++) {
                        var objectId = objectIds[j];
                        buildObject(objectId, objects, modelData, textureData);
                    }
                }
                return objects;
            }
            function build(objects, data3mf) {
                var group = new THREE.Group();
                var relationship = data3mf['rels'][0];
                var buildData = data3mf.model[relationship['target'].substring(1)]['build'];
                for (var i = 0; i < buildData.length; i++) {
                    var buildItem = buildData[i];
                    var object3D = objects[buildItem['objectId']];
                    var transform = buildItem['transform'];
                    if (transform) {
                        object3D.applyMatrix4(transform);
                    }
                    group.add(object3D);
                }
                return group;
            }
            var data3mf = loadDocument(data);
            var objects = buildObjects(data3mf);
            return build(objects, data3mf);
        },
        addExtension: function (extension) {
            this.availableExtensions.push(extension);
        }
    });
    return ThreeMFLoader;
});
define('skylark-threejs-ex/loaders/AMFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var AMFLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    AMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: AMFLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        parse: function (data) {
            function loadDocument(data) {
                var view = new DataView(data);
                var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));
                if (magic === 'PK') {
                    var zip = null;
                    var file = null;
                    console.log('THREE.AMFLoader: Loading Zip');
                    try {
                        zip = new JSZip(data);
                    } catch (e) {
                        if (e instanceof ReferenceError) {
                            console.log('THREE.AMFLoader: jszip missing and file is compressed.');
                            return null;
                        }
                    }
                    for (file in zip.files) {
                        if (file.toLowerCase().substr(-4) === '.amf') {
                            break;
                        }
                    }
                    console.log('THREE.AMFLoader: Trying to load file asset: ' + file);
                    view = new DataView(zip.file(file).asArrayBuffer());
                }
                var fileText = THREE.LoaderUtils.decodeText(view);
                var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');
                if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {
                    console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');
                    return null;
                }
                return xmlData;
            }
            function loadDocumentScale(node) {
                var scale = 1;
                var unit = 'millimeter';
                if (node.documentElement.attributes.unit !== undefined) {
                    unit = node.documentElement.attributes.unit.value.toLowerCase();
                }
                var scaleUnits = {
                    millimeter: 1,
                    inch: 25.4,
                    feet: 304.8,
                    meter: 1000,
                    micron: 0.001
                };
                if (scaleUnits[unit] !== undefined) {
                    scale = scaleUnits[unit];
                }
                console.log('THREE.AMFLoader: Unit scale: ' + scale);
                return scale;
            }
            function loadMaterials(node) {
                var matName = 'AMF Material';
                var matId = node.attributes.id.textContent;
                var color = {
                    r: 1,
                    g: 1,
                    b: 1,
                    a: 1
                };
                var loadedMaterial = null;
                for (var i = 0; i < node.childNodes.length; i++) {
                    var matChildEl = node.childNodes[i];
                    if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {
                        if (matChildEl.attributes.type.value === 'name') {
                            matName = matChildEl.textContent;
                        }
                    } else if (matChildEl.nodeName === 'color') {
                        color = loadColor(matChildEl);
                    }
                }
                loadedMaterial = new THREE.MeshPhongMaterial({
                    flatShading: true,
                    color: new THREE.Color(color.r, color.g, color.b),
                    name: matName
                });
                if (color.a !== 1) {
                    loadedMaterial.transparent = true;
                    loadedMaterial.opacity = color.a;
                }
                return {
                    id: matId,
                    material: loadedMaterial
                };
            }
            function loadColor(node) {
                var color = {
                    r: 1,
                    g: 1,
                    b: 1,
                    a: 1
                };
                for (var i = 0; i < node.childNodes.length; i++) {
                    var matColor = node.childNodes[i];
                    if (matColor.nodeName === 'r') {
                        color.r = matColor.textContent;
                    } else if (matColor.nodeName === 'g') {
                        color.g = matColor.textContent;
                    } else if (matColor.nodeName === 'b') {
                        color.b = matColor.textContent;
                    } else if (matColor.nodeName === 'a') {
                        color.a = matColor.textContent;
                    }
                }
                return color;
            }
            function loadMeshVolume(node) {
                var volume = {
                    name: '',
                    triangles: [],
                    materialid: null
                };
                var currVolumeNode = node.firstElementChild;
                if (node.attributes.materialid !== undefined) {
                    volume.materialId = node.attributes.materialid.nodeValue;
                }
                while (currVolumeNode) {
                    if (currVolumeNode.nodeName === 'metadata') {
                        if (currVolumeNode.attributes.type !== undefined) {
                            if (currVolumeNode.attributes.type.value === 'name') {
                                volume.name = currVolumeNode.textContent;
                            }
                        }
                    } else if (currVolumeNode.nodeName === 'triangle') {
                        var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;
                        var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;
                        var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;
                        volume.triangles.push(v1, v2, v3);
                    }
                    currVolumeNode = currVolumeNode.nextElementSibling;
                }
                return volume;
            }
            function loadMeshVertices(node) {
                var vertArray = [];
                var normalArray = [];
                var currVerticesNode = node.firstElementChild;
                while (currVerticesNode) {
                    if (currVerticesNode.nodeName === 'vertex') {
                        var vNode = currVerticesNode.firstElementChild;
                        while (vNode) {
                            if (vNode.nodeName === 'coordinates') {
                                var x = vNode.getElementsByTagName('x')[0].textContent;
                                var y = vNode.getElementsByTagName('y')[0].textContent;
                                var z = vNode.getElementsByTagName('z')[0].textContent;
                                vertArray.push(x, y, z);
                            } else if (vNode.nodeName === 'normal') {
                                var nx = vNode.getElementsByTagName('nx')[0].textContent;
                                var ny = vNode.getElementsByTagName('ny')[0].textContent;
                                var nz = vNode.getElementsByTagName('nz')[0].textContent;
                                normalArray.push(nx, ny, nz);
                            }
                            vNode = vNode.nextElementSibling;
                        }
                    }
                    currVerticesNode = currVerticesNode.nextElementSibling;
                }
                return {
                    'vertices': vertArray,
                    'normals': normalArray
                };
            }
            function loadObject(node) {
                var objId = node.attributes.id.textContent;
                var loadedObject = {
                    name: 'amfobject',
                    meshes: []
                };
                var currColor = null;
                var currObjNode = node.firstElementChild;
                while (currObjNode) {
                    if (currObjNode.nodeName === 'metadata') {
                        if (currObjNode.attributes.type !== undefined) {
                            if (currObjNode.attributes.type.value === 'name') {
                                loadedObject.name = currObjNode.textContent;
                            }
                        }
                    } else if (currObjNode.nodeName === 'color') {
                        currColor = loadColor(currObjNode);
                    } else if (currObjNode.nodeName === 'mesh') {
                        var currMeshNode = currObjNode.firstElementChild;
                        var mesh = {
                            vertices: [],
                            normals: [],
                            volumes: [],
                            color: currColor
                        };
                        while (currMeshNode) {
                            if (currMeshNode.nodeName === 'vertices') {
                                var loadedVertices = loadMeshVertices(currMeshNode);
                                mesh.normals = mesh.normals.concat(loadedVertices.normals);
                                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);
                            } else if (currMeshNode.nodeName === 'volume') {
                                mesh.volumes.push(loadMeshVolume(currMeshNode));
                            }
                            currMeshNode = currMeshNode.nextElementSibling;
                        }
                        loadedObject.meshes.push(mesh);
                    }
                    currObjNode = currObjNode.nextElementSibling;
                }
                return {
                    'id': objId,
                    'obj': loadedObject
                };
            }
            var xmlData = loadDocument(data);
            var amfName = '';
            var amfAuthor = '';
            var amfScale = loadDocumentScale(xmlData);
            var amfMaterials = {};
            var amfObjects = {};
            var childNodes = xmlData.documentElement.childNodes;
            var i, j;
            for (i = 0; i < childNodes.length; i++) {
                var child = childNodes[i];
                if (child.nodeName === 'metadata') {
                    if (child.attributes.type !== undefined) {
                        if (child.attributes.type.value === 'name') {
                            amfName = child.textContent;
                        } else if (child.attributes.type.value === 'author') {
                            amfAuthor = child.textContent;
                        }
                    }
                } else if (child.nodeName === 'material') {
                    var loadedMaterial = loadMaterials(child);
                    amfMaterials[loadedMaterial.id] = loadedMaterial.material;
                } else if (child.nodeName === 'object') {
                    var loadedObject = loadObject(child);
                    amfObjects[loadedObject.id] = loadedObject.obj;
                }
            }
            var sceneObject = new THREE.Group();
            var defaultMaterial = new THREE.MeshPhongMaterial({
                color: 11184895,
                flatShading: true
            });
            sceneObject.name = amfName;
            sceneObject.userData.author = amfAuthor;
            sceneObject.userData.loader = 'AMF';
            for (var id in amfObjects) {
                var part = amfObjects[id];
                var meshes = part.meshes;
                var newObject = new THREE.Group();
                newObject.name = part.name || '';
                for (i = 0; i < meshes.length; i++) {
                    var objDefaultMaterial = defaultMaterial;
                    var mesh = meshes[i];
                    var vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);
                    var normals = null;
                    if (mesh.normals.length) {
                        normals = new THREE.Float32BufferAttribute(mesh.normals, 3);
                    }
                    if (mesh.color) {
                        var color = mesh.color;
                        objDefaultMaterial = defaultMaterial.clone();
                        objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);
                        if (color.a !== 1) {
                            objDefaultMaterial.transparent = true;
                            objDefaultMaterial.opacity = color.a;
                        }
                    }
                    var volumes = mesh.volumes;
                    for (j = 0; j < volumes.length; j++) {
                        var volume = volumes[j];
                        var newGeometry = new THREE.BufferGeometry();
                        var material = objDefaultMaterial;
                        newGeometry.setIndex(volume.triangles);
                        newGeometry.setAttribute('position', vertices.clone());
                        if (normals) {
                            newGeometry.setAttribute('normal', normals.clone());
                        }
                        if (amfMaterials[volume.materialId] !== undefined) {
                            material = amfMaterials[volume.materialId];
                        }
                        newGeometry.scale(amfScale, amfScale, amfScale);
                        newObject.add(new THREE.Mesh(newGeometry, material.clone()));
                    }
                }
                sceneObject.add(newObject);
            }
            return sceneObject;
        }
    });

    return AMFLoader;
});
define('skylark-threejs-ex/loaders/AssimpJSONLoader',[
	"skylark-threejs"
],function(THREE) {
	/**
	 * @author Alexander Gessler / http://www.greentoken.de/
	 * https://github.com/acgessler
	 *
	 * Loader for models imported with Open Asset Import Library (http://assimp.sf.net)
	 * through assimp2json (https://github.com/acgessler/assimp2json).
	 *
	 * Supports any input format that assimp supports, including 3ds, obj, dae, blend,
	 * fbx, x, ms3d, lwo (and many more).
	 *
	 * See webgl_loader_assimp2json example.
	 */

	THREE.AssimpJSONLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.AssimpJSONLoader.prototype = {

		constructor: THREE.AssimpJSONLoader,

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var path = ( scope.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;

			var loader = new THREE.FileLoader( this.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.__metadata__;

				// check if __metadata__ meta header is present
				// this header is used to disambiguate between different JSON-based file formats

				if ( typeof metadata !== 'undefined' ) {

					// check if assimp2json at all

					if ( metadata.format !== 'assimp2json' ) {

						onError( 'THREE.AssimpJSONLoader: Not an assimp2json scene.' );
						return;

						// check major format version

					} else if ( metadata.version < 100 && metadata.version >= 200 ) {

						onError( 'THREE.AssimpJSONLoader: Unsupported assimp2json file format version.' );
						return;

					}

				}

				onLoad( scope.parse( json, path ) );

			}, onProgress, onError );

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResourcePath: function ( value ) {

			this.resourcePath = value;
			return this;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		parse: function ( json, path ) {

			function parseList( json, handler ) {

				var meshes = new Array( json.length );

				for ( var i = 0; i < json.length; ++ i ) {

					meshes[ i ] = handler.call( this, json[ i ] );

				}

				return meshes;

			}

			function parseMesh( json ) {

				var geometry = new THREE.BufferGeometry();

				var i, l, face;

				var indices = [];

				var vertices = json.vertices || [];
				var normals = json.normals || [];
				var uvs = json.texturecoords || [];
				var colors = json.colors || [];

				uvs = uvs[ 0 ] || []; // only support for a single set of uvs

				for ( i = 0, l = json.faces.length; i < l; i ++ ) {

					face = json.faces[ i ];
					indices.push( face[ 0 ], face[ 1 ], face[ 2 ] );

				}

				geometry.setIndex( indices );
				geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );

				if ( normals.length > 0 ) {

					geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );

				}

				if ( uvs.length > 0 ) {

					geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );

				}

				if ( colors.length > 0 ) {

					geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );

				}

				geometry.computeBoundingSphere();

				return geometry;

			}

			function parseMaterial( json ) {

				var material = new THREE.MeshPhongMaterial();

				for ( var i in json.properties ) {

					var property = json.properties[ i ];
					var key = property.key;
					var value = property.value;

					switch ( key ) {

						case '$tex.file': {

							var semantic = property.semantic;

							// prop.semantic gives the type of the texture
							// 1: diffuse
							// 2: specular map
							// 4: emissive map
							// 5: height map (bumps)
							// 6: normal map
							// more values (i.e. environment, etc) are known by assimp and may be relevant

							if ( semantic === 1 || semantic === 2 || semantic === 4 || semantic === 5 || semantic === 6 ) {

								var keyname;

								switch ( semantic ) {

									case 1:
										keyname = 'map';
										break;
									case 2:
										keyname = 'specularMap';
										break;
									case 4:
										keyname = 'emissiveMap';
										break;
									case 5:
										keyname = 'bumpMap';
										break;
									case 6:
										keyname = 'normalMap';
										break;

								}

								var texture = textureLoader.load( value );

								// TODO: read texture settings from assimp.
								// Wrapping is the default, though.

								texture.wrapS = texture.wrapT = THREE.RepeatWrapping;

								material[ keyname ] = texture;

							}

							break;

						}

						case '?mat.name':
							material.name = value;
							break;

						case '$clr.diffuse':
							material.color.fromArray( value );
							break;

						case '$clr.specular':
							material.specular.fromArray( value );
							break;

						case '$clr.emissive':
							material.emissive.fromArray( value );
							break;

						case '$mat.shininess':
							material.shininess = value;
							break;

						case '$mat.shadingm':
							// aiShadingMode_Flat
							material.flatShading = ( value === 1 ) ? true : false;
							break;

						case '$mat.opacity':
							if ( value < 1 ) {

								material.opacity = value;
								material.transparent = true;

							}
							break;

					}

				}

				return material;

			}

			function parseObject( json, node, meshes, materials ) {

				var obj = new THREE.Object3D(),	i, idx;

				obj.name = node.name || '';
				obj.matrix = new THREE.Matrix4().fromArray( node.transformation ).transpose();
				obj.matrix.decompose( obj.position, obj.quaternion, obj.scale );

				for ( i = 0; node.meshes && i < node.meshes.length; i ++ ) {

					idx = node.meshes[ i ];
					obj.add( new THREE.Mesh( meshes[ idx ], materials[ json.meshes[ idx ].materialindex ] ) );

				}

				for ( i = 0; node.children && i < node.children.length; i ++ ) {

					obj.add( parseObject( json, node.children[ i ], meshes, materials ) );

				}

				return obj;

			}

			var textureLoader = new THREE.TextureLoader( this.manager );
			textureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );

			var meshes = parseList( json.meshes, parseMesh );
			var materials = parseList( json.materials, parseMaterial );
			return parseObject( json, json.rootnode, meshes, materials );

		}

	};
	
	return THREE.AssimpJSONLoader ;
});
define('skylark-threejs-ex/loaders/AssimpLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var AssimpLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    AssimpLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: AssimpLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (buffer) {
                onLoad(scope.parse(buffer, path));
            }, onProgress, onError);
        },
        parse: function (buffer, path) {
            var textureLoader = new THREE.TextureLoader(this.manager);
            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
            var Virtulous = {};
            Virtulous.KeyFrame = function (time, matrix) {
                this.time = time;
                this.matrix = matrix.clone();
                this.position = new THREE.Vector3();
                this.quaternion = new THREE.Quaternion();
                this.scale = new THREE.Vector3(1, 1, 1);
                this.matrix.decompose(this.position, this.quaternion, this.scale);
                this.clone = function () {
                    var n = new Virtulous.KeyFrame(this.time, this.matrix);
                    return n;
                };
                this.lerp = function (nextKey, time) {
                    time -= this.time;
                    var dist = nextKey.time - this.time;
                    var l = time / dist;
                    var l2 = 1 - l;
                    var keypos = this.position;
                    var keyrot = this.quaternion;
                    var key2pos = nextKey.position;
                    var key2rot = nextKey.quaternion;
                    Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;
                    Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;
                    Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;
                    Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);
                    Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);
                    return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);
                };
            };
            Virtulous.KeyFrame.tempAniPos = new THREE.Vector3();
            Virtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();
            Virtulous.KeyFrame.tempAniScale = new THREE.Vector3(1, 1, 1);
            Virtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();
            Virtulous.KeyFrameTrack = function () {
                this.keys = [];
                this.target = null;
                this.time = 0;
                this.length = 0;
                this._accelTable = {};
                this.fps = 20;
                this.addKey = function (key) {
                    this.keys.push(key);
                };
                this.init = function () {
                    this.sortKeys();
                    if (this.keys.length > 0)
                        this.length = this.keys[this.keys.length - 1].time;
                    else
                        this.length = 0;
                    if (!this.fps)
                        return;
                    for (var j = 0; j < this.length * this.fps; j++) {
                        for (var i = 0; i < this.keys.length; i++) {
                            if (this.keys[i].time == j) {
                                this._accelTable[j] = i;
                                break;
                            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {
                                this._accelTable[j] = i;
                                break;
                            }
                        }
                    }
                };
                this.parseFromThree = function (data) {
                    var fps = data.fps;
                    this.target = data.node;
                    var track = data.hierarchy[0].keys;
                    for (var i = 0; i < track.length; i++) {
                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));
                    }
                    this.init();
                };
                this.parseFromCollada = function (data) {
                    var track = data.keys;
                    var fps = this.fps;
                    for (var i = 0; i < track.length; i++) {
                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));
                    }
                    this.init();
                };
                this.sortKeys = function () {
                    this.keys.sort(this.keySortFunc);
                };
                this.keySortFunc = function (a, b) {
                    return a.time - b.time;
                };
                this.clone = function () {
                    var t = new Virtulous.KeyFrameTrack();
                    t.target = this.target;
                    t.time = this.time;
                    t.length = this.length;
                    for (var i = 0; i < this.keys.length; i++) {
                        t.addKey(this.keys[i].clone());
                    }
                    t.init();
                    return t;
                };
                this.reTarget = function (root, compareitor) {
                    if (!compareitor)
                        compareitor = Virtulous.TrackTargetNodeNameCompare;
                    this.target = compareitor(root, this.target);
                };
                this.keySearchAccel = function (time) {
                    time *= this.fps;
                    time = Math.floor(time);
                    return this._accelTable[time] || 0;
                };
                this.setTime = function (time) {
                    time = Math.abs(time);
                    if (this.length)
                        time = time % this.length + 0.05;
                    var key0 = null;
                    var key1 = null;
                    for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {
                        if (this.keys[i].time == time) {
                            key0 = this.keys[i];
                            key1 = this.keys[i];
                            break;
                        } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {
                            key0 = this.keys[i];
                            key1 = this.keys[i + 1];
                            break;
                        } else if (this.keys[i].time < time && i == this.keys.length - 1) {
                            key0 = this.keys[i];
                            key1 = this.keys[0].clone();
                            key1.time += this.length + 0.05;
                            break;
                        }
                    }
                    if (key0 && key1 && key0 !== key1) {
                        this.target.matrixAutoUpdate = false;
                        this.target.matrix.copy(key0.lerp(key1, time));
                        this.target.matrixWorldNeedsUpdate = true;
                        return;
                    }
                    if (key0 && key1 && key0 == key1) {
                        this.target.matrixAutoUpdate = false;
                        this.target.matrix.copy(key0.matrix);
                        this.target.matrixWorldNeedsUpdate = true;
                        return;
                    }
                };
            };
            Virtulous.TrackTargetNodeNameCompare = function (root, target) {
                function find(node, name) {
                    if (node.name == name)
                        return node;
                    for (var i = 0; i < node.children.length; i++) {
                        var r = find(node.children[i], name);
                        if (r)
                            return r;
                    }
                    return null;
                }
                return find(root, target.name);
            };
            Virtulous.Animation = function () {
                this.tracks = [];
                this.length = 0;
                this.addTrack = function (track) {
                    this.tracks.push(track);
                    this.length = Math.max(track.length, this.length);
                };
                this.setTime = function (time) {
                    this.time = time;
                    for (var i = 0; i < this.tracks.length; i++)
                        this.tracks[i].setTime(time);
                };
                this.clone = function (target, compareitor) {
                    if (!compareitor)
                        compareitor = Virtulous.TrackTargetNodeNameCompare;
                    var n = new Virtulous.Animation();
                    n.target = target;
                    for (var i = 0; i < this.tracks.length; i++) {
                        var track = this.tracks[i].clone();
                        track.reTarget(target, compareitor);
                        n.addTrack(track);
                    }
                    return n;
                };
            };
            var ASSBIN_CHUNK_AICAMERA = 4660;
            var ASSBIN_CHUNK_AILIGHT = 4661;
            var ASSBIN_CHUNK_AITEXTURE = 4662;
            var ASSBIN_CHUNK_AIMESH = 4663;
            var ASSBIN_CHUNK_AINODEANIM = 4664;
            var ASSBIN_CHUNK_AISCENE = 4665;
            var ASSBIN_CHUNK_AIBONE = 4666;
            var ASSBIN_CHUNK_AIANIMATION = 4667;
            var ASSBIN_CHUNK_AINODE = 4668;
            var ASSBIN_CHUNK_AIMATERIAL = 4669;
            var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;
            var ASSBIN_MESH_HAS_POSITIONS = 1;
            var ASSBIN_MESH_HAS_NORMALS = 2;
            var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;
            var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;
            var ASSBIN_MESH_HAS_COLOR_BASE = 65536;
            var AI_MAX_NUMBER_OF_COLOR_SETS = 1;
            var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;
            var aiLightSource_DIRECTIONAL = 1;
            var aiLightSource_SPOT = 3;
            var aiTextureType_DIFFUSE = 1;
            var aiTextureType_NORMALS = 6;
            var aiTextureType_OPACITY = 8;
            var aiTextureType_LIGHTMAP = 10;
            var BONESPERVERT = 4;
            function ASSBIN_MESH_HAS_TEXCOORD(n) {
                return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;
            }
            function ASSBIN_MESH_HAS_COLOR(n) {
                return ASSBIN_MESH_HAS_COLOR_BASE << n;
            }
            function markBones(scene) {
                for (var i in scene.mMeshes) {
                    var mesh = scene.mMeshes[i];
                    for (var k in mesh.mBones) {
                        var boneNode = scene.findNode(mesh.mBones[k].mName);
                        if (boneNode)
                            boneNode.isBone = true;
                    }
                }
            }
            function cloneTreeToBones(root, scene) {
                var rootBone = new THREE.Bone();
                rootBone.matrix.copy(root.matrix);
                rootBone.matrixWorld.copy(root.matrixWorld);
                rootBone.position.copy(root.position);
                rootBone.quaternion.copy(root.quaternion);
                rootBone.scale.copy(root.scale);
                scene.nodeCount++;
                rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();
                if (!scene.nodeToBoneMap[root.name])
                    scene.nodeToBoneMap[root.name] = [];
                scene.nodeToBoneMap[root.name].push(rootBone);
                for (var i in root.children) {
                    var child = cloneTreeToBones(root.children[i], scene);
                    rootBone.add(child);
                }
                return rootBone;
            }
            function sortWeights(indexes, weights) {
                var pairs = [];
                for (var i = 0; i < indexes.length; i++) {
                    pairs.push({
                        i: indexes[i],
                        w: weights[i]
                    });
                }
                pairs.sort(function (a, b) {
                    return b.w - a.w;
                });
                while (pairs.length < 4) {
                    pairs.push({
                        i: 0,
                        w: 0
                    });
                }
                if (pairs.length > 4)
                    pairs.length = 4;
                var sum = 0;
                for (var i = 0; i < 4; i++) {
                    sum += pairs[i].w * pairs[i].w;
                }
                sum = Math.sqrt(sum);
                for (var i = 0; i < 4; i++) {
                    pairs[i].w = pairs[i].w / sum;
                    indexes[i] = pairs[i].i;
                    weights[i] = pairs[i].w;
                }
            }
            function findMatchingBone(root, name) {
                if (root.name.indexOf('bone_' + name) == 0)
                    return root;
                for (var i in root.children) {
                    var ret = findMatchingBone(root.children[i], name);
                    if (ret)
                        return ret;
                }
                return undefined;
            }
            function aiMesh() {
                this.mPrimitiveTypes = 0;
                this.mNumVertices = 0;
                this.mNumFaces = 0;
                this.mNumBones = 0;
                this.mMaterialIndex = 0;
                this.mVertices = [];
                this.mNormals = [];
                this.mTangents = [];
                this.mBitangents = [];
                this.mColors = [[]];
                this.mTextureCoords = [[]];
                this.mFaces = [];
                this.mBones = [];
                this.hookupSkeletons = function (scene) {
                    if (this.mBones.length == 0)
                        return;
                    var allBones = [];
                    var offsetMatrix = [];
                    var skeletonRoot = scene.findNode(this.mBones[0].mName);
                    while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {
                        skeletonRoot = skeletonRoot.mParent;
                    }
                    var threeSkeletonRoot = skeletonRoot.toTHREE(scene);
                    var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);
                    this.threeNode.add(threeSkeletonRootBone);
                    for (var i = 0; i < this.mBones.length; i++) {
                        var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);
                        if (bone) {
                            var tbone = bone;
                            allBones.push(tbone);
                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());
                        } else {
                            var skeletonRoot = scene.findNode(this.mBones[i].mName);
                            if (!skeletonRoot)
                                return;
                            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);
                            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);
                            this.threeNode.add(threeSkeletonRootBone);
                            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);
                            var tbone = bone;
                            allBones.push(tbone);
                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());
                        }
                    }
                    var skeleton = new THREE.Skeleton(allBones, offsetMatrix);
                    this.threeNode.bind(skeleton, new THREE.Matrix4());
                    this.threeNode.material.skinning = true;
                };
                this.toTHREE = function (scene) {
                    if (this.threeNode)
                        return this.threeNode;
                    var geometry = new THREE.BufferGeometry();
                    var mat;
                    if (scene.mMaterials[this.mMaterialIndex])
                        mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);
                    else
                        mat = new THREE.MeshLambertMaterial();
                    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(this.mIndexArray), 1));
                    geometry.setAttribute('position', new THREE.BufferAttribute(this.mVertexBuffer, 3));
                    if (this.mNormalBuffer && this.mNormalBuffer.length > 0)
                        geometry.setAttribute('normal', new THREE.BufferAttribute(this.mNormalBuffer, 3));
                    if (this.mColorBuffer && this.mColorBuffer.length > 0)
                        geometry.setAttribute('color', new THREE.BufferAttribute(this.mColorBuffer, 4));
                    if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0)
                        geometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));
                    if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0)
                        geometry.setAttribute('uv1', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));
                    if (this.mTangentBuffer && this.mTangentBuffer.length > 0)
                        geometry.setAttribute('tangents', new THREE.BufferAttribute(this.mTangentBuffer, 3));
                    if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0)
                        geometry.setAttribute('bitangents', new THREE.BufferAttribute(this.mBitangentBuffer, 3));
                    if (this.mBones.length > 0) {
                        var weights = [];
                        var bones = [];
                        for (var i = 0; i < this.mBones.length; i++) {
                            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {
                                var weight = this.mBones[i].mWeights[j];
                                if (weight) {
                                    if (!weights[weight.mVertexId])
                                        weights[weight.mVertexId] = [];
                                    if (!bones[weight.mVertexId])
                                        bones[weight.mVertexId] = [];
                                    weights[weight.mVertexId].push(weight.mWeight);
                                    bones[weight.mVertexId].push(parseInt(i));
                                }
                            }
                        }
                        for (var i in bones) {
                            sortWeights(bones[i], weights[i]);
                        }
                        var _weights = [];
                        var _bones = [];
                        for (var i = 0; i < weights.length; i++) {
                            for (var j = 0; j < 4; j++) {
                                if (weights[i] && bones[i]) {
                                    _weights.push(weights[i][j]);
                                    _bones.push(bones[i][j]);
                                } else {
                                    _weights.push(0);
                                    _bones.push(0);
                                }
                            }
                        }
                        geometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(_weights), BONESPERVERT));
                        geometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(_bones), BONESPERVERT));
                    }
                    var mesh;
                    if (this.mBones.length == 0)
                        mesh = new THREE.Mesh(geometry, mat);
                    if (this.mBones.length > 0) {
                        mesh = new THREE.SkinnedMesh(geometry, mat);
                        mesh.normalizeSkinWeights();
                    }
                    this.threeNode = mesh;
                    return mesh;
                };
            }
            function aiFace() {
                this.mNumIndices = 0;
                this.mIndices = [];
            }
            function aiVector3D() {
                this.x = 0;
                this.y = 0;
                this.z = 0;
                this.toTHREE = function () {
                    return new THREE.Vector3(this.x, this.y, this.z);
                };
            }
            function aiColor3D() {
                this.r = 0;
                this.g = 0;
                this.b = 0;
                this.a = 0;
                this.toTHREE = function () {
                    return new THREE.Color(this.r, this.g, this.b);
                };
            }
            function aiQuaternion() {
                this.x = 0;
                this.y = 0;
                this.z = 0;
                this.w = 0;
                this.toTHREE = function () {
                    return new THREE.Quaternion(this.x, this.y, this.z, this.w);
                };
            }
            function aiVertexWeight() {
                this.mVertexId = 0;
                this.mWeight = 0;
            }
            function aiString() {
                this.data = [];
                this.toString = function () {
                    var str = '';
                    this.data.forEach(function (i) {
                        str += String.fromCharCode(i);
                    });
                    return str.replace(/[^\x20-\x7E]+/g, '');
                };
            }
            function aiVectorKey() {
                this.mTime = 0;
                this.mValue = null;
            }
            function aiQuatKey() {
                this.mTime = 0;
                this.mValue = null;
            }
            function aiNode() {
                this.mName = '';
                this.mTransformation = [];
                this.mNumChildren = 0;
                this.mNumMeshes = 0;
                this.mMeshes = [];
                this.mChildren = [];
                this.toTHREE = function (scene) {
                    if (this.threeNode)
                        return this.threeNode;
                    var o = new THREE.Object3D();
                    o.name = this.mName;
                    o.matrix = this.mTransformation.toTHREE();
                    for (var i = 0; i < this.mChildren.length; i++) {
                        o.add(this.mChildren[i].toTHREE(scene));
                    }
                    for (var i = 0; i < this.mMeshes.length; i++) {
                        o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));
                    }
                    this.threeNode = o;
                    o.matrix.decompose(o.position, o.quaternion, o.scale);
                    return o;
                };
            }
            function aiBone() {
                this.mName = '';
                this.mNumWeights = 0;
                this.mOffsetMatrix = 0;
            }
            function aiMaterialProperty() {
                this.mKey = '';
                this.mSemantic = 0;
                this.mIndex = 0;
                this.mData = [];
                this.mDataLength = 0;
                this.mType = 0;
                this.dataAsColor = function () {
                    var array = new Uint8Array(this.mData).buffer;
                    var reader = new DataView(array);
                    var r = reader.getFloat32(0, true);
                    var g = reader.getFloat32(4, true);
                    var b = reader.getFloat32(8, true);
                    return new THREE.Color(r, g, b);
                };
                this.dataAsFloat = function () {
                    var array = new Uint8Array(this.mData).buffer;
                    var reader = new DataView(array);
                    var r = reader.getFloat32(0, true);
                    return r;
                };
                this.dataAsBool = function () {
                    var array = new Uint8Array(this.mData).buffer;
                    var reader = new DataView(array);
                    var r = reader.getFloat32(0, true);
                    return !!r;
                };
                this.dataAsString = function () {
                    var s = new aiString();
                    s.data = this.mData;
                    return s.toString();
                };
                this.dataAsMap = function () {
                    var s = new aiString();
                    s.data = this.mData;
                    var path = s.toString();
                    path = path.replace(/\\/g, '/');
                    if (path.indexOf('/') != -1) {
                        path = path.substr(path.lastIndexOf('/') + 1);
                    }
                    return textureLoader.load(path);
                };
            }
            var namePropMapping = {
                '?mat.name': 'name',
                '$mat.shadingm': 'shading',
                '$mat.twosided': 'twoSided',
                '$mat.wireframe': 'wireframe',
                '$clr.ambient': 'ambient',
                '$clr.diffuse': 'color',
                '$clr.specular': 'specular',
                '$clr.emissive': 'emissive',
                '$clr.transparent': 'transparent',
                '$clr.reflective': 'reflect',
                '$mat.shininess': 'shininess',
                '$mat.reflectivity': 'reflectivity',
                '$mat.refracti': 'refraction',
                '$tex.file': 'map'
            };
            var nameTypeMapping = {
                '?mat.name': 'string',
                '$mat.shadingm': 'bool',
                '$mat.twosided': 'bool',
                '$mat.wireframe': 'bool',
                '$clr.ambient': 'color',
                '$clr.diffuse': 'color',
                '$clr.specular': 'color',
                '$clr.emissive': 'color',
                '$clr.transparent': 'color',
                '$clr.reflective': 'color',
                '$mat.shininess': 'float',
                '$mat.reflectivity': 'float',
                '$mat.refracti': 'float',
                '$tex.file': 'map'
            };
            function aiMaterial() {
                this.mNumAllocated = 0;
                this.mNumProperties = 0;
                this.mProperties = [];
                this.toTHREE = function () {
                    var mat = new THREE.MeshPhongMaterial();
                    for (var i = 0; i < this.mProperties.length; i++) {
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'float')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'color')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'bool')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'string')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {
                            var prop = this.mProperties[i];
                            if (prop.mSemantic == aiTextureType_DIFFUSE)
                                mat.map = this.mProperties[i].dataAsMap();
                            if (prop.mSemantic == aiTextureType_NORMALS)
                                mat.normalMap = this.mProperties[i].dataAsMap();
                            if (prop.mSemantic == aiTextureType_LIGHTMAP)
                                mat.lightMap = this.mProperties[i].dataAsMap();
                            if (prop.mSemantic == aiTextureType_OPACITY)
                                mat.alphaMap = this.mProperties[i].dataAsMap();
                        }
                    }
                    mat.ambient.r = 0.53;
                    mat.ambient.g = 0.53;
                    mat.ambient.b = 0.53;
                    mat.color.r = 1;
                    mat.color.g = 1;
                    mat.color.b = 1;
                    return mat;
                };
            }
            function veclerp(v1, v2, l) {
                var v = new THREE.Vector3();
                var lm1 = 1 - l;
                v.x = v1.x * l + v2.x * lm1;
                v.y = v1.y * l + v2.y * lm1;
                v.z = v1.z * l + v2.z * lm1;
                return v;
            }
            function quatlerp(q1, q2, l) {
                return q1.clone().slerp(q2, 1 - l);
            }
            function sampleTrack(keys, time, lne, lerp) {
                if (keys.length == 1)
                    return keys[0].mValue.toTHREE();
                var dist = Infinity;
                var key = null;
                var nextKey = null;
                for (var i = 0; i < keys.length; i++) {
                    var timeDist = Math.abs(keys[i].mTime - time);
                    if (timeDist < dist && keys[i].mTime <= time) {
                        dist = timeDist;
                        key = keys[i];
                        nextKey = keys[i + 1];
                    }
                }
                if (!key) {
                    return null;
                } else if (nextKey) {
                    var dT = nextKey.mTime - key.mTime;
                    var T = key.mTime - time;
                    var l = T / dT;
                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);
                } else {
                    nextKey = keys[0].clone();
                    nextKey.mTime += lne;
                    var dT = nextKey.mTime - key.mTime;
                    var T = key.mTime - time;
                    var l = T / dT;
                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);
                }
            }
            function aiNodeAnim() {
                this.mNodeName = '';
                this.mNumPositionKeys = 0;
                this.mNumRotationKeys = 0;
                this.mNumScalingKeys = 0;
                this.mPositionKeys = [];
                this.mRotationKeys = [];
                this.mScalingKeys = [];
                this.mPreState = '';
                this.mPostState = '';
                this.init = function (tps) {
                    if (!tps)
                        tps = 1;
                    function t(t) {
                        t.mTime /= tps;
                    }
                    this.mPositionKeys.forEach(t);
                    this.mRotationKeys.forEach(t);
                    this.mScalingKeys.forEach(t);
                };
                this.sortKeys = function () {
                    function comp(a, b) {
                        return a.mTime - b.mTime;
                    }
                    this.mPositionKeys.sort(comp);
                    this.mRotationKeys.sort(comp);
                    this.mScalingKeys.sort(comp);
                };
                this.getLength = function () {
                    return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {
                        return a.mTime;
                    })), Math.max.apply(null, this.mRotationKeys.map(function (a) {
                        return a.mTime;
                    })), Math.max.apply(null, this.mScalingKeys.map(function (a) {
                        return a.mTime;
                    })));
                };
                this.toTHREE = function (o) {
                    this.sortKeys();
                    var length = this.getLength();
                    var track = new Virtulous.KeyFrameTrack();
                    for (var i = 0; i < length; i += 0.05) {
                        var matrix = new THREE.Matrix4();
                        var time = i;
                        var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);
                        var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);
                        var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);
                        matrix.compose(pos, rotation, scale);
                        var key = new Virtulous.KeyFrame(time, matrix);
                        track.addKey(key);
                    }
                    track.target = o.findNode(this.mNodeName).toTHREE();
                    var tracks = [track];
                    if (o.nodeToBoneMap[this.mNodeName]) {
                        for (var i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {
                            var t2 = track.clone();
                            t2.target = o.nodeToBoneMap[this.mNodeName][i];
                            tracks.push(t2);
                        }
                    }
                    return tracks;
                };
            }
            function aiAnimation() {
                this.mName = '';
                this.mDuration = 0;
                this.mTicksPerSecond = 0;
                this.mNumChannels = 0;
                this.mChannels = [];
                this.toTHREE = function (root) {
                    var animationHandle = new Virtulous.Animation();
                    for (var i in this.mChannels) {
                        this.mChannels[i].init(this.mTicksPerSecond);
                        var tracks = this.mChannels[i].toTHREE(root);
                        for (var j in tracks) {
                            tracks[j].init();
                            animationHandle.addTrack(tracks[j]);
                        }
                    }
                    animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {
                        return e.length;
                    }));
                    return animationHandle;
                };
            }
            function aiTexture() {
                this.mWidth = 0;
                this.mHeight = 0;
                this.texAchFormatHint = [];
                this.pcData = [];
            }
            function aiLight() {
                this.mName = '';
                this.mType = 0;
                this.mAttenuationConstant = 0;
                this.mAttenuationLinear = 0;
                this.mAttenuationQuadratic = 0;
                this.mAngleInnerCone = 0;
                this.mAngleOuterCone = 0;
                this.mColorDiffuse = null;
                this.mColorSpecular = null;
                this.mColorAmbient = null;
            }
            function aiCamera() {
                this.mName = '';
                this.mPosition = null;
                this.mLookAt = null;
                this.mUp = null;
                this.mHorizontalFOV = 0;
                this.mClipPlaneNear = 0;
                this.mClipPlaneFar = 0;
                this.mAspect = 0;
            }
            function aiScene() {
                this.versionMajor = 0;
                this.versionMinor = 0;
                this.versionRevision = 0;
                this.compileFlags = 0;
                this.mFlags = 0;
                this.mNumMeshes = 0;
                this.mNumMaterials = 0;
                this.mNumAnimations = 0;
                this.mNumTextures = 0;
                this.mNumLights = 0;
                this.mNumCameras = 0;
                this.mRootNode = null;
                this.mMeshes = [];
                this.mMaterials = [];
                this.mAnimations = [];
                this.mLights = [];
                this.mCameras = [];
                this.nodeToBoneMap = {};
                this.findNode = function (name, root) {
                    if (!root) {
                        root = this.mRootNode;
                    }
                    if (root.mName == name) {
                        return root;
                    }
                    for (var i = 0; i < root.mChildren.length; i++) {
                        var ret = this.findNode(name, root.mChildren[i]);
                        if (ret)
                            return ret;
                    }
                    return null;
                };
                this.toTHREE = function () {
                    this.nodeCount = 0;
                    markBones(this);
                    var o = this.mRootNode.toTHREE(this);
                    for (var i in this.mMeshes)
                        this.mMeshes[i].hookupSkeletons(this);
                    if (this.mAnimations.length > 0) {
                        var a = this.mAnimations[0].toTHREE(this);
                    }
                    return {
                        object: o,
                        animation: a
                    };
                };
            }
            function aiMatrix4() {
                this.elements = [
                    [],
                    [],
                    [],
                    []
                ];
                this.toTHREE = function () {
                    var m = new THREE.Matrix4();
                    for (var i = 0; i < 4; ++i) {
                        for (var i2 = 0; i2 < 4; ++i2) {
                            m.elements[i * 4 + i2] = this.elements[i2][i];
                        }
                    }
                    return m;
                };
            }
            var littleEndian = true;
            function readFloat(dataview) {
                var val = dataview.getFloat32(dataview.readOffset, littleEndian);
                dataview.readOffset += 4;
                return val;
            }
            function Read_double(dataview) {
                var val = dataview.getFloat64(dataview.readOffset, littleEndian);
                dataview.readOffset += 8;
                return val;
            }
            function Read_uint8_t(dataview) {
                var val = dataview.getUint8(dataview.readOffset);
                dataview.readOffset += 1;
                return val;
            }
            function Read_uint16_t(dataview) {
                var val = dataview.getUint16(dataview.readOffset, littleEndian);
                dataview.readOffset += 2;
                return val;
            }
            function Read_unsigned_int(dataview) {
                var val = dataview.getUint32(dataview.readOffset, littleEndian);
                dataview.readOffset += 4;
                return val;
            }
            function Read_uint32_t(dataview) {
                var val = dataview.getUint32(dataview.readOffset, littleEndian);
                dataview.readOffset += 4;
                return val;
            }
            function Read_aiVector3D(stream) {
                var v = new aiVector3D();
                v.x = readFloat(stream);
                v.y = readFloat(stream);
                v.z = readFloat(stream);
                return v;
            }
            function Read_aiColor3D(stream) {
                var c = new aiColor3D();
                c.r = readFloat(stream);
                c.g = readFloat(stream);
                c.b = readFloat(stream);
                return c;
            }
            function Read_aiQuaternion(stream) {
                var v = new aiQuaternion();
                v.w = readFloat(stream);
                v.x = readFloat(stream);
                v.y = readFloat(stream);
                v.z = readFloat(stream);
                return v;
            }
            function Read_aiString(stream) {
                var s = new aiString();
                var stringlengthbytes = Read_unsigned_int(stream);
                stream.ReadBytes(s.data, 1, stringlengthbytes);
                return s.toString();
            }
            function Read_aiVertexWeight(stream) {
                var w = new aiVertexWeight();
                w.mVertexId = Read_unsigned_int(stream);
                w.mWeight = readFloat(stream);
                return w;
            }
            function Read_aiMatrix4x4(stream) {
                var m = new aiMatrix4();
                for (var i = 0; i < 4; ++i) {
                    for (var i2 = 0; i2 < 4; ++i2) {
                        m.elements[i][i2] = readFloat(stream);
                    }
                }
                return m;
            }
            function Read_aiVectorKey(stream) {
                var v = new aiVectorKey();
                v.mTime = Read_double(stream);
                v.mValue = Read_aiVector3D(stream);
                return v;
            }
            function Read_aiQuatKey(stream) {
                var v = new aiQuatKey();
                v.mTime = Read_double(stream);
                v.mValue = Read_aiQuaternion(stream);
                return v;
            }
            function ReadArray_aiVertexWeight(stream, data, size) {
                for (var i = 0; i < size; i++)
                    data[i] = Read_aiVertexWeight(stream);
            }
            function ReadArray_aiVectorKey(stream, data, size) {
                for (var i = 0; i < size; i++)
                    data[i] = Read_aiVectorKey(stream);
            }
            function ReadArray_aiQuatKey(stream, data, size) {
                for (var i = 0; i < size; i++)
                    data[i] = Read_aiQuatKey(stream);
            }
            function ReadBounds(stream, T, n) {
                return stream.Seek(sizeof(T) * n, aiOrigin_CUR);
            }
            function ai_assert(bool) {
                if (!bool)
                    throw 'asset failed';
            }
            function ReadBinaryNode(stream, parent, depth) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AINODE);
                Read_uint32_t(stream);
                var node = new aiNode();
                node.mParent = parent;
                node.mDepth = depth;
                node.mName = Read_aiString(stream);
                node.mTransformation = Read_aiMatrix4x4(stream);
                node.mNumChildren = Read_unsigned_int(stream);
                node.mNumMeshes = Read_unsigned_int(stream);
                if (node.mNumMeshes) {
                    node.mMeshes = [];
                    for (var i = 0; i < node.mNumMeshes; ++i) {
                        node.mMeshes[i] = Read_unsigned_int(stream);
                    }
                }
                if (node.mNumChildren) {
                    node.mChildren = [];
                    for (var i = 0; i < node.mNumChildren; ++i) {
                        var node2 = ReadBinaryNode(stream, node, depth++);
                        node.mChildren[i] = node2;
                    }
                }
                return node;
            }
            function ReadBinaryBone(stream, b) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);
                Read_uint32_t(stream);
                b.mName = Read_aiString(stream);
                b.mNumWeights = Read_unsigned_int(stream);
                b.mOffsetMatrix = Read_aiMatrix4x4(stream);
                if (shortened) {
                    ReadBounds(stream, b.mWeights, b.mNumWeights);
                } else {
                    b.mWeights = [];
                    ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);
                }
                return b;
            }
            function ReadBinaryMesh(stream, mesh) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);
                Read_uint32_t(stream);
                mesh.mPrimitiveTypes = Read_unsigned_int(stream);
                mesh.mNumVertices = Read_unsigned_int(stream);
                mesh.mNumFaces = Read_unsigned_int(stream);
                mesh.mNumBones = Read_unsigned_int(stream);
                mesh.mMaterialIndex = Read_unsigned_int(stream);
                mesh.mNumUVComponents = [];
                var c = Read_unsigned_int(stream);
                if (c & ASSBIN_MESH_HAS_POSITIONS) {
                    if (shortened) {
                        ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);
                    } else {
                        mesh.mVertices = [];
                        mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                    }
                }
                if (c & ASSBIN_MESH_HAS_NORMALS) {
                    if (shortened) {
                        ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);
                    } else {
                        mesh.mNormals = [];
                        mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                    }
                }
                if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {
                    if (shortened) {
                        ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);
                        ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);
                    } else {
                        mesh.mTangents = [];
                        mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                        mesh.mBitangents = [];
                        mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                    }
                }
                for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {
                    if (!(c & ASSBIN_MESH_HAS_COLOR(n)))
                        break;
                    if (shortened) {
                        ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);
                    } else {
                        mesh.mColors[n] = [];
                        mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);
                        stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);
                    }
                }
                mesh.mTexCoordsBuffers = [];
                for (var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {
                    if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))
                        break;
                    mesh.mNumUVComponents[n] = Read_unsigned_int(stream);
                    if (shortened) {
                        ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);
                    } else {
                        mesh.mTextureCoords[n] = [];
                        mesh.mTexCoordsBuffers[n] = [];
                        for (var uv = 0; uv < mesh.mNumVertices; uv++) {
                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));
                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));
                            readFloat(stream);
                        }
                    }
                }
                if (shortened) {
                    Read_unsigned_int(stream);
                } else {
                    mesh.mFaces = [];
                    mesh.mIndexArray = [];
                    for (var i = 0; i < mesh.mNumFaces; ++i) {
                        var f = mesh.mFaces[i] = new aiFace();
                        f.mNumIndices = Read_uint16_t(stream);
                        f.mIndices = [];
                        for (var a = 0; a < f.mNumIndices; ++a) {
                            if (mesh.mNumVertices < 1 << 16) {
                                f.mIndices[a] = Read_uint16_t(stream);
                            } else {
                                f.mIndices[a] = Read_unsigned_int(stream);
                            }
                        }
                        if (f.mNumIndices === 3) {
                            mesh.mIndexArray.push(f.mIndices[0]);
                            mesh.mIndexArray.push(f.mIndices[1]);
                            mesh.mIndexArray.push(f.mIndices[2]);
                        } else if (f.mNumIndices === 4) {
                            mesh.mIndexArray.push(f.mIndices[0]);
                            mesh.mIndexArray.push(f.mIndices[1]);
                            mesh.mIndexArray.push(f.mIndices[2]);
                            mesh.mIndexArray.push(f.mIndices[2]);
                            mesh.mIndexArray.push(f.mIndices[3]);
                            mesh.mIndexArray.push(f.mIndices[0]);
                        } else {
                            throw new Error("Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.");
                        }
                    }
                }
                if (mesh.mNumBones) {
                    mesh.mBones = [];
                    for (var a = 0; a < mesh.mNumBones; ++a) {
                        mesh.mBones[a] = new aiBone();
                        ReadBinaryBone(stream, mesh.mBones[a]);
                    }
                }
            }
            function ReadBinaryMaterialProperty(stream, prop) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);
                Read_uint32_t(stream);
                prop.mKey = Read_aiString(stream);
                prop.mSemantic = Read_unsigned_int(stream);
                prop.mIndex = Read_unsigned_int(stream);
                prop.mDataLength = Read_unsigned_int(stream);
                prop.mType = Read_unsigned_int(stream);
                prop.mData = [];
                stream.ReadBytes(prop.mData, 1, prop.mDataLength);
            }
            function ReadBinaryMaterial(stream, mat) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);
                Read_uint32_t(stream);
                mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);
                if (mat.mNumProperties) {
                    if (mat.mProperties) {
                        delete mat.mProperties;
                    }
                    mat.mProperties = [];
                    for (var i = 0; i < mat.mNumProperties; ++i) {
                        mat.mProperties[i] = new aiMaterialProperty();
                        ReadBinaryMaterialProperty(stream, mat.mProperties[i]);
                    }
                }
            }
            function ReadBinaryNodeAnim(stream, nd) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);
                Read_uint32_t(stream);
                nd.mNodeName = Read_aiString(stream);
                nd.mNumPositionKeys = Read_unsigned_int(stream);
                nd.mNumRotationKeys = Read_unsigned_int(stream);
                nd.mNumScalingKeys = Read_unsigned_int(stream);
                nd.mPreState = Read_unsigned_int(stream);
                nd.mPostState = Read_unsigned_int(stream);
                if (nd.mNumPositionKeys) {
                    if (shortened) {
                        ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);
                    } else {
                        nd.mPositionKeys = [];
                        ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);
                    }
                }
                if (nd.mNumRotationKeys) {
                    if (shortened) {
                        ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);
                    } else {
                        nd.mRotationKeys = [];
                        ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);
                    }
                }
                if (nd.mNumScalingKeys) {
                    if (shortened) {
                        ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);
                    } else {
                        nd.mScalingKeys = [];
                        ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);
                    }
                }
            }
            function ReadBinaryAnim(stream, anim) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);
                Read_uint32_t(stream);
                anim.mName = Read_aiString(stream);
                anim.mDuration = Read_double(stream);
                anim.mTicksPerSecond = Read_double(stream);
                anim.mNumChannels = Read_unsigned_int(stream);
                if (anim.mNumChannels) {
                    anim.mChannels = [];
                    for (var a = 0; a < anim.mNumChannels; ++a) {
                        anim.mChannels[a] = new aiNodeAnim();
                        ReadBinaryNodeAnim(stream, anim.mChannels[a]);
                    }
                }
            }
            function ReadBinaryTexture(stream, tex) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);
                Read_uint32_t(stream);
                tex.mWidth = Read_unsigned_int(stream);
                tex.mHeight = Read_unsigned_int(stream);
                stream.ReadBytes(tex.achFormatHint, 1, 4);
                if (!shortened) {
                    if (!tex.mHeight) {
                        tex.pcData = [];
                        stream.ReadBytes(tex.pcData, 1, tex.mWidth);
                    } else {
                        tex.pcData = [];
                        stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);
                    }
                }
            }
            function ReadBinaryLight(stream, l) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);
                Read_uint32_t(stream);
                l.mName = Read_aiString(stream);
                l.mType = Read_unsigned_int(stream);
                if (l.mType != aiLightSource_DIRECTIONAL) {
                    l.mAttenuationConstant = readFloat(stream);
                    l.mAttenuationLinear = readFloat(stream);
                    l.mAttenuationQuadratic = readFloat(stream);
                }
                l.mColorDiffuse = Read_aiColor3D(stream);
                l.mColorSpecular = Read_aiColor3D(stream);
                l.mColorAmbient = Read_aiColor3D(stream);
                if (l.mType == aiLightSource_SPOT) {
                    l.mAngleInnerCone = readFloat(stream);
                    l.mAngleOuterCone = readFloat(stream);
                }
            }
            function ReadBinaryCamera(stream, cam) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);
                Read_uint32_t(stream);
                cam.mName = Read_aiString(stream);
                cam.mPosition = Read_aiVector3D(stream);
                cam.mLookAt = Read_aiVector3D(stream);
                cam.mUp = Read_aiVector3D(stream);
                cam.mHorizontalFOV = readFloat(stream);
                cam.mClipPlaneNear = readFloat(stream);
                cam.mClipPlaneFar = readFloat(stream);
                cam.mAspect = readFloat(stream);
            }
            function ReadBinaryScene(stream, scene) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);
                Read_uint32_t(stream);
                scene.mFlags = Read_unsigned_int(stream);
                scene.mNumMeshes = Read_unsigned_int(stream);
                scene.mNumMaterials = Read_unsigned_int(stream);
                scene.mNumAnimations = Read_unsigned_int(stream);
                scene.mNumTextures = Read_unsigned_int(stream);
                scene.mNumLights = Read_unsigned_int(stream);
                scene.mNumCameras = Read_unsigned_int(stream);
                scene.mRootNode = new aiNode();
                scene.mRootNode = ReadBinaryNode(stream, null, 0);
                if (scene.mNumMeshes) {
                    scene.mMeshes = [];
                    for (var i = 0; i < scene.mNumMeshes; ++i) {
                        scene.mMeshes[i] = new aiMesh();
                        ReadBinaryMesh(stream, scene.mMeshes[i]);
                    }
                }
                if (scene.mNumMaterials) {
                    scene.mMaterials = [];
                    for (var i = 0; i < scene.mNumMaterials; ++i) {
                        scene.mMaterials[i] = new aiMaterial();
                        ReadBinaryMaterial(stream, scene.mMaterials[i]);
                    }
                }
                if (scene.mNumAnimations) {
                    scene.mAnimations = [];
                    for (var i = 0; i < scene.mNumAnimations; ++i) {
                        scene.mAnimations[i] = new aiAnimation();
                        ReadBinaryAnim(stream, scene.mAnimations[i]);
                    }
                }
                if (scene.mNumTextures) {
                    scene.mTextures = [];
                    for (var i = 0; i < scene.mNumTextures; ++i) {
                        scene.mTextures[i] = new aiTexture();
                        ReadBinaryTexture(stream, scene.mTextures[i]);
                    }
                }
                if (scene.mNumLights) {
                    scene.mLights = [];
                    for (var i = 0; i < scene.mNumLights; ++i) {
                        scene.mLights[i] = new aiLight();
                        ReadBinaryLight(stream, scene.mLights[i]);
                    }
                }
                if (scene.mNumCameras) {
                    scene.mCameras = [];
                    for (var i = 0; i < scene.mNumCameras; ++i) {
                        scene.mCameras[i] = new aiCamera();
                        ReadBinaryCamera(stream, scene.mCameras[i]);
                    }
                }
            }
            var aiOrigin_CUR = 0;
            var aiOrigin_BEG = 1;
            function extendStream(stream) {
                stream.readOffset = 0;
                stream.Seek = function (off, ori) {
                    if (ori == aiOrigin_CUR) {
                        stream.readOffset += off;
                    }
                    if (ori == aiOrigin_BEG) {
                        stream.readOffset = off;
                    }
                };
                stream.ReadBytes = function (buff, size, n) {
                    var bytes = size * n;
                    for (var i = 0; i < bytes; i++)
                        buff[i] = Read_uint8_t(this);
                };
                stream.subArray32 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Float32Array(newbuff);
                };
                stream.subArrayUint16 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Uint16Array(newbuff);
                };
                stream.subArrayUint8 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Uint8Array(newbuff);
                };
                stream.subArrayUint32 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Uint32Array(newbuff);
                };
            }
            var shortened, compressed;
            function InternReadFile(pFiledata) {
                var pScene = new aiScene();
                var stream = new DataView(pFiledata);
                extendStream(stream);
                stream.Seek(44, aiOrigin_CUR);
                pScene.versionMajor = Read_unsigned_int(stream);
                pScene.versionMinor = Read_unsigned_int(stream);
                pScene.versionRevision = Read_unsigned_int(stream);
                pScene.compileFlags = Read_unsigned_int(stream);
                shortened = Read_uint16_t(stream) > 0;
                compressed = Read_uint16_t(stream) > 0;
                if (shortened)
                    throw 'Shortened binaries are not supported!';
                stream.Seek(256, aiOrigin_CUR);
                stream.Seek(128, aiOrigin_CUR);
                stream.Seek(64, aiOrigin_CUR);
                if (compressed) {
                    var uncompressedSize = Read_uint32_t(stream);
                    var compressedSize = stream.FileSize() - stream.Tell();
                    var compressedData = [];
                    stream.Read(compressedData, 1, compressedSize);
                    var uncompressedData = [];
                    uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);
                    var buff = new ArrayBuffer(uncompressedData);
                    ReadBinaryScene(buff, pScene);
                } else {
                    ReadBinaryScene(stream, pScene);
                }
                return pScene.toTHREE();
            }
            return InternReadFile(buffer);
        }
    });
    return AssimpLoader;
});
define('skylark-threejs-ex/loaders/AWDLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var AWDLoader = function () {
        var AWD_FIELD_INT8 = 1, AWD_FIELD_INT16 = 2, AWD_FIELD_INT32 = 3, AWD_FIELD_UINT8 = 4, AWD_FIELD_UINT16 = 5, AWD_FIELD_UINT32 = 6, AWD_FIELD_FLOAT32 = 7, AWD_FIELD_FLOAT64 = 8, AWD_FIELD_BOOL = 21, AWD_FIELD_BADDR = 23, AWD_FIELD_VECTOR2x1 = 41, AWD_FIELD_VECTOR3x1 = 42, AWD_FIELD_VECTOR4x1 = 43, AWD_FIELD_MTX3x2 = 44, AWD_FIELD_MTX3x3 = 45, AWD_FIELD_MTX4x3 = 46, AWD_FIELD_MTX4x4 = 47, BOOL = 21, BADDR = 23, UINT8 = 4, UINT16 = 5, FLOAT32 = 7, FLOAT64 = 8;
        var littleEndian = true;
        function Block() {
            this.id = 0;
            this.data = null;
            this.namespace = 0;
            this.flags = 0;
        }
        function AWDProperties() {
        }
        AWDProperties.prototype = {
            set: function (key, value) {
                this[key] = value;
            },
            get: function (key, fallback) {
                if (this.hasOwnProperty(key)) {
                    return this[key];
                } else {
                    return fallback;
                }
            }
        };
        var AWDLoader = function (manager) {
            THREE.Loader.call(this, manager);
            this.trunk = new THREE.Object3D();
            this.materialFactory = undefined;
            this._url = '';
            this._baseDir = '';
            this._data = undefined;
            this._ptr = 0;
            this._version = [];
            this._streaming = false;
            this._optimized_for_accuracy = false;
            this._compression = 0;
            this._bodylen = 4294967295;
            this._blocks = [new Block()];
            this._accuracyMatrix = false;
            this._accuracyGeo = false;
            this._accuracyProps = false;
        };
        AWDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: AWDLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                this._url = url;
                this._baseDir = url.substr(0, url.lastIndexOf('/') + 1);
                var loader = new THREE.FileLoader(this.manager);
                loader.setPath(this.path);
                loader.setResponseType('arraybuffer');
                loader.load(url, function (text) {
                    onLoad(scope.parse(text));
                }, onProgress, onError);
            },
            parse: function (data) {
                var blen = data.byteLength;
                this._ptr = 0;
                this._data = new DataView(data);
                this._parseHeader();
                if (this._compression != 0) {
                    console.error('compressed AWD not supported');
                }
                if (!this._streaming && this._bodylen != data.byteLength - this._ptr) {
                    console.error('AWDLoader: body len does not match file length', this._bodylen, blen - this._ptr);
                }
                while (this._ptr < blen) {
                    this.parseNextBlock();
                }
                return this.trunk;
            },
            parseNextBlock: function () {
                var assetData, block, blockId = this.readU32(), ns = this.readU8(), type = this.readU8(), flags = this.readU8(), len = this.readU32();
                switch (type) {
                case 1:
                    assetData = this.parseMeshData();
                    break;
                case 22:
                    assetData = this.parseContainer();
                    break;
                case 23:
                    assetData = this.parseMeshInstance();
                    break;
                case 81:
                    assetData = this.parseMaterial();
                    break;
                case 82:
                    assetData = this.parseTexture();
                    break;
                case 101:
                    assetData = this.parseSkeleton();
                    break;
                case 112:
                    assetData = this.parseMeshPoseAnimation(false);
                    break;
                case 113:
                    assetData = this.parseVertexAnimationSet();
                    break;
                case 102:
                    assetData = this.parseSkeletonPose();
                    break;
                case 103:
                    assetData = this.parseSkeletonAnimation();
                    break;
                case 122:
                    assetData = this.parseAnimatorSet();
                    break;
                default:
                    this._ptr += len;
                    break;
                }
                this._blocks[blockId] = block = new Block();
                block.data = assetData;
                block.id = blockId;
                block.namespace = ns;
                block.flags = flags;
            },
            _parseHeader: function () {
                var version = this._version, awdmagic = this.readU8() << 16 | this.readU8() << 8 | this.readU8();
                if (awdmagic != 4282180)
                    throw new Error('AWDLoader - bad magic');
                version[0] = this.readU8();
                version[1] = this.readU8();
                var flags = this.readU16();
                this._streaming = (flags & 1) == 1;
                if (version[0] === 2 && version[1] === 1) {
                    this._accuracyMatrix = (flags & 2) === 2;
                    this._accuracyGeo = (flags & 4) === 4;
                    this._accuracyProps = (flags & 8) === 8;
                }
                this._geoNrType = this._accuracyGeo ? FLOAT64 : FLOAT32;
                this._matrixNrType = this._accuracyMatrix ? FLOAT64 : FLOAT32;
                this._propsNrType = this._accuracyProps ? FLOAT64 : FLOAT32;
                this._optimized_for_accuracy = (flags & 2) === 2;
                this._compression = this.readU8();
                this._bodylen = this.readU32();
            },
            parseContainer: function () {
                var parent, ctr = new THREE.Object3D(), par_id = this.readU32(), mtx = this.parseMatrix4();
                ctr.name = this.readUTF();
                ctr.applyMatrix4(mtx);
                parent = this._blocks[par_id].data || this.trunk;
                parent.add(ctr);
                this.parseProperties({
                    1: this._matrixNrType,
                    2: this._matrixNrType,
                    3: this._matrixNrType,
                    4: UINT8
                });
                ctr.extra = this.parseUserAttributes();
                return ctr;
            },
            parseMeshInstance: function () {
                var name, mesh, geometries, meshLen, meshes, par_id, data_id, mtx, materials, mat, mat_id, num_materials, parent, i;
                par_id = this.readU32();
                mtx = this.parseMatrix4();
                name = this.readUTF();
                data_id = this.readU32();
                num_materials = this.readU16();
                geometries = this.getBlock(data_id);
                materials = [];
                for (i = 0; i < num_materials; i++) {
                    mat_id = this.readU32();
                    mat = this.getBlock(mat_id);
                    materials.push(mat);
                }
                meshLen = geometries.length;
                meshes = [];
                if (meshLen > 1) {
                    mesh = new THREE.Object3D();
                    for (i = 0; i < meshLen; i++) {
                        var sm = new THREE.Mesh(geometries[i]);
                        meshes.push(sm);
                        mesh.add(sm);
                    }
                } else {
                    mesh = new THREE.Mesh(geometries[0]);
                    meshes.push(mesh);
                }
                mesh.applyMatrix4(mtx);
                mesh.name = name;
                parent = this.getBlock(par_id) || this.trunk;
                parent.add(mesh);
                var matLen = materials.length;
                var maxLen = Math.max(meshLen, matLen);
                for (i = 0; i < maxLen; i++)
                    meshes[i % meshLen].material = materials[i % matLen];
                this.parseProperties(null);
                mesh.extra = this.parseUserAttributes();
                return mesh;
            },
            parseMaterial: function () {
                var name, type, props, mat, attributes, num_methods, methods_parsed;
                name = this.readUTF();
                type = this.readU8();
                num_methods = this.readU8();
                props = this.parseProperties({
                    1: AWD_FIELD_INT32,
                    2: AWD_FIELD_BADDR,
                    11: AWD_FIELD_BOOL,
                    12: AWD_FIELD_FLOAT32,
                    13: AWD_FIELD_BOOL
                });
                methods_parsed = 0;
                while (methods_parsed < num_methods) {
                    this.readU16();
                    this.parseProperties(null);
                    this.parseUserAttributes();
                }
                attributes = this.parseUserAttributes();
                if (this.materialFactory !== undefined) {
                    mat = this.materialFactory(name);
                    if (mat)
                        return mat;
                }
                mat = new THREE.MeshPhongMaterial();
                if (type === 1) {
                    mat.color.setHex(props.get(1, 13421772));
                } else if (type === 2) {
                    var tex_addr = props.get(2, 0);
                    mat.map = this.getBlock(tex_addr);
                }
                mat.extra = attributes;
                mat.alphaThreshold = props.get(12, 0);
                mat.repeat = props.get(13, false);
                return mat;
            },
            parseTexture: function () {
                var name = this.readUTF(), type = this.readU8(), asset, data_len;
                if (type === 0) {
                    data_len = this.readU32();
                    var url = this.readUTFBytes(data_len);
                    console.log(url);
                    asset = this.loadTexture(url);
                    asset.userData = {};
                    asset.userData.name = name;
                } else {
                }
                this.parseProperties(null);
                this.parseUserAttributes();
                return asset;
            },
            loadTexture: function (url) {
                var tex = new THREE.Texture();
                var loader = new THREE.ImageLoader(this.manager);
                loader.load(this._baseDir + url, function (image) {
                    tex.image = image;
                    tex.needsUpdate = true;
                });
                return tex;
            },
            parseSkeleton: function () {
                this.readUTF();
                var num_joints = this.readU16(), skeleton = [], joints_parsed = 0;
                this.parseProperties(null);
                while (joints_parsed < num_joints) {
                    var joint, ibp;
                    this.readU16();
                    joint = new THREE.Bone();
                    joint.parent = this.readU16() - 1;
                    joint.name = this.readUTF();
                    ibp = this.parseMatrix4();
                    joint.skinMatrix = ibp;
                    this.parseProperties(null);
                    this.parseUserAttributes();
                    skeleton.push(joint);
                    joints_parsed++;
                }
                this.parseUserAttributes();
                return skeleton;
            },
            parseSkeletonPose: function () {
                var name = this.readUTF();
                var num_joints = this.readU16();
                this.parseProperties(null);
                var pose = [];
                var joints_parsed = 0;
                while (joints_parsed < num_joints) {
                    var has_transform;
                    var mtx_data;
                    has_transform = this.readU8();
                    if (has_transform === 1) {
                        mtx_data = this.parseMatrix4();
                    } else {
                        mtx_data = new THREE.Matrix4();
                    }
                    pose[joints_parsed] = mtx_data;
                    joints_parsed++;
                }
                this.parseUserAttributes();
                return pose;
            },
            parseSkeletonAnimation: function () {
                var frame_dur;
                var pose_addr;
                var pose;
                var name = this.readUTF();
                var clip = [];
                var num_frames = this.readU16();
                this.parseProperties(null);
                var frames_parsed = 0;
                while (frames_parsed < num_frames) {
                    pose_addr = this.readU32();
                    frame_dur = this.readU16();
                    pose = this._blocks[pose_addr].data;
                    clip.push({
                        pose: pose,
                        duration: frame_dur
                    });
                    frames_parsed++;
                }
                if (clip.length === 0) {
                    return;
                }
                this.parseUserAttributes();
                return clip;
            },
            parseVertexAnimationSet: function () {
                var poseBlockAdress, name = this.readUTF(), num_frames = this.readU16(), props = this.parseProperties({ 1: UINT16 }), frames_parsed = 0, skeletonFrames = [];
                while (frames_parsed < num_frames) {
                    poseBlockAdress = this.readU32();
                    skeletonFrames.push(this._blocks[poseBlockAdress].data);
                    frames_parsed++;
                }
                this.parseUserAttributes();
                return skeletonFrames;
            },
            parseAnimatorSet: function () {
                var animSetBlockAdress;
                var targetAnimationSet;
                var name = this.readUTF();
                var type = this.readU16();
                var props = this.parseProperties({ 1: BADDR });
                animSetBlockAdress = this.readU32();
                var targetMeshLength = this.readU16();
                var meshAdresses = [];
                for (var i = 0; i < targetMeshLength; i++)
                    meshAdresses.push(this.readU32());
                var activeState = this.readU16();
                var autoplay = Boolean(this.readU8());
                this.parseUserAttributes();
                this.parseUserAttributes();
                var targetMeshes = [];
                for (i = 0; i < meshAdresses.length; i++) {
                    targetMeshes.push(this._blocks[meshAdresses[i]].data);
                }
                targetAnimationSet = this._blocks[animSetBlockAdress].data;
                var thisAnimator;
                if (type == 1) {
                    thisAnimator = {
                        animationSet: targetAnimationSet,
                        skeleton: this._blocks[props.get(1, 0)].data
                    };
                } else if (type == 2) {
                }
                for (i = 0; i < targetMeshes.length; i++) {
                    targetMeshes[i].animator = thisAnimator;
                }
                return thisAnimator;
            },
            parseMeshData: function () {
                var name = this.readUTF(), num_subs = this.readU16(), geom, subs_parsed = 0, buffer, geometries = [];
                this.parseProperties({
                    1: this._geoNrType,
                    2: this._geoNrType
                });
                while (subs_parsed < num_subs) {
                    var sm_len, sm_end, attrib;
                    geom = new THREE.BufferGeometry();
                    geom.name = name;
                    geometries.push(geom);
                    sm_len = this.readU32();
                    sm_end = this._ptr + sm_len;
                    this.parseProperties({
                        1: this._geoNrType,
                        2: this._geoNrType
                    });
                    while (this._ptr < sm_end) {
                        var idx = 0, str_type = this.readU8(), str_ftype = this.readU8(), str_len = this.readU32(), str_end = str_len + this._ptr;
                        if (str_type === 1) {
                            buffer = new Float32Array(str_len / 12 * 3);
                            attrib = new THREE.BufferAttribute(buffer, 3);
                            geom.setAttribute('position', attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx] = -this.readF32();
                                buffer[idx + 1] = this.readF32();
                                buffer[idx + 2] = this.readF32();
                                idx += 3;
                            }
                        } else if (str_type === 2) {
                            buffer = new Uint16Array(str_len / 2);
                            attrib = new THREE.BufferAttribute(buffer, 1);
                            geom.setIndex(attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx + 1] = this.readU16();
                                buffer[idx] = this.readU16();
                                buffer[idx + 2] = this.readU16();
                                idx += 3;
                            }
                        } else if (str_type === 3) {
                            buffer = new Float32Array(str_len / 8 * 2);
                            attrib = new THREE.BufferAttribute(buffer, 2);
                            geom.setAttribute('uv', attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx] = this.readF32();
                                buffer[idx + 1] = 1 - this.readF32();
                                idx += 2;
                            }
                        } else if (str_type === 4) {
                            buffer = new Float32Array(str_len / 12 * 3);
                            attrib = new THREE.BufferAttribute(buffer, 3);
                            geom.setAttribute('normal', attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx] = -this.readF32();
                                buffer[idx + 1] = this.readF32();
                                buffer[idx + 2] = this.readF32();
                                idx += 3;
                            }
                        } else {
                            this._ptr = str_end;
                        }
                    }
                    this.parseUserAttributes();
                    geom.computeBoundingSphere();
                    subs_parsed++;
                }
                this.parseUserAttributes();
                return geometries;
            },
            parseMeshPoseAnimation: function (poseOnly) {
                var num_frames = 1, num_submeshes, frames_parsed, subMeshParsed, str_len, str_end, geom, idx = 0, clip = {}, num_Streams, streamsParsed, streamtypes = [], props, name = this.readUTF(), geoAdress = this.readU32();
                var mesh = this.getBlock(geoAdress);
                if (mesh === null) {
                    console.log('parseMeshPoseAnimation target mesh not found at:', geoAdress);
                    return;
                }
                geom = mesh.geometry;
                geom.morphTargets = [];
                if (!poseOnly)
                    num_frames = this.readU16();
                num_submeshes = this.readU16();
                num_Streams = this.readU16();
                streamsParsed = 0;
                while (streamsParsed < num_Streams) {
                    streamtypes.push(this.readU16());
                    streamsParsed++;
                }
                props = this.parseProperties({
                    1: BOOL,
                    2: BOOL
                });
                clip.looping = props.get(1, true);
                clip.stitchFinalFrame = props.get(2, false);
                frames_parsed = 0;
                while (frames_parsed < num_frames) {
                    this.readU16();
                    subMeshParsed = 0;
                    while (subMeshParsed < num_submeshes) {
                        streamsParsed = 0;
                        str_len = this.readU32();
                        str_end = this._ptr + str_len;
                        while (streamsParsed < num_Streams) {
                            if (streamtypes[streamsParsed] === 1) {
                                var buffer = new Float32Array(str_len / 4);
                                geom.morphTargets.push({ array: buffer });
                                idx = 0;
                                while (this._ptr < str_end) {
                                    buffer[idx] = this.readF32();
                                    buffer[idx + 1] = this.readF32();
                                    buffer[idx + 2] = this.readF32();
                                    idx += 3;
                                }
                                subMeshParsed++;
                            } else
                                this._ptr = str_end;
                            streamsParsed++;
                        }
                    }
                    frames_parsed++;
                }
                this.parseUserAttributes();
                return null;
            },
            getBlock: function (id) {
                return this._blocks[id].data;
            },
            parseMatrix4: function () {
                var mtx = new THREE.Matrix4();
                var e = mtx.elements;
                e[0] = this.readF32();
                e[1] = this.readF32();
                e[2] = this.readF32();
                e[3] = 0;
                e[4] = this.readF32();
                e[5] = this.readF32();
                e[6] = this.readF32();
                e[7] = 0;
                e[8] = this.readF32();
                e[9] = this.readF32();
                e[10] = this.readF32();
                e[11] = 0;
                e[12] = -this.readF32();
                e[13] = this.readF32();
                e[14] = this.readF32();
                e[15] = 1;
                return mtx;
            },
            parseProperties: function (expected) {
                var list_len = this.readU32();
                var list_end = this._ptr + list_len;
                var props = new AWDProperties();
                if (expected) {
                    while (this._ptr < list_end) {
                        var key = this.readU16();
                        var len = this.readU32();
                        var type;
                        if (expected.hasOwnProperty(key)) {
                            type = expected[key];
                            props.set(key, this.parseAttrValue(type, len));
                        } else {
                            this._ptr += len;
                        }
                    }
                }
                return props;
            },
            parseUserAttributes: function () {
                this._ptr = this.readU32() + this._ptr;
                return null;
            },
            parseAttrValue: function (type, len) {
                var elem_len;
                var read_func;
                switch (type) {
                case AWD_FIELD_INT8:
                    elem_len = 1;
                    read_func = this.readI8;
                    break;
                case AWD_FIELD_INT16:
                    elem_len = 2;
                    read_func = this.readI16;
                    break;
                case AWD_FIELD_INT32:
                    elem_len = 4;
                    read_func = this.readI32;
                    break;
                case AWD_FIELD_BOOL:
                case AWD_FIELD_UINT8:
                    elem_len = 1;
                    read_func = this.readU8;
                    break;
                case AWD_FIELD_UINT16:
                    elem_len = 2;
                    read_func = this.readU16;
                    break;
                case AWD_FIELD_UINT32:
                case AWD_FIELD_BADDR:
                    elem_len = 4;
                    read_func = this.readU32;
                    break;
                case AWD_FIELD_FLOAT32:
                    elem_len = 4;
                    read_func = this.readF32;
                    break;
                case AWD_FIELD_FLOAT64:
                    elem_len = 8;
                    read_func = this.readF64;
                    break;
                case AWD_FIELD_VECTOR2x1:
                case AWD_FIELD_VECTOR3x1:
                case AWD_FIELD_VECTOR4x1:
                case AWD_FIELD_MTX3x2:
                case AWD_FIELD_MTX3x3:
                case AWD_FIELD_MTX4x3:
                case AWD_FIELD_MTX4x4:
                    elem_len = 8;
                    read_func = this.readF64;
                    break;
                }
                if (elem_len < len) {
                    var list;
                    var num_read;
                    var num_elems;
                    list = [];
                    num_read = 0;
                    num_elems = len / elem_len;
                    while (num_read < num_elems) {
                        list.push(read_func.call(this));
                        num_read++;
                    }
                    return list;
                } else {
                    return read_func.call(this);
                }
            },
            readU8: function () {
                return this._data.getUint8(this._ptr++);
            },
            readI8: function () {
                return this._data.getInt8(this._ptr++);
            },
            readU16: function () {
                var a = this._data.getUint16(this._ptr, littleEndian);
                this._ptr += 2;
                return a;
            },
            readI16: function () {
                var a = this._data.getInt16(this._ptr, littleEndian);
                this._ptr += 2;
                return a;
            },
            readU32: function () {
                var a = this._data.getUint32(this._ptr, littleEndian);
                this._ptr += 4;
                return a;
            },
            readI32: function () {
                var a = this._data.getInt32(this._ptr, littleEndian);
                this._ptr += 4;
                return a;
            },
            readF32: function () {
                var a = this._data.getFloat32(this._ptr, littleEndian);
                this._ptr += 4;
                return a;
            },
            readF64: function () {
                var a = this._data.getFloat64(this._ptr, littleEndian);
                this._ptr += 8;
                return a;
            },
            readUTF: function () {
                var len = this.readU16();
                return this.readUTFBytes(len);
            },
            readUTFBytes: function (len) {
                var out = [], c = 0;
                while (out.length < len) {
                    var c1 = this._data.getUint8(this._ptr++, littleEndian);
                    if (c1 < 128) {
                        out[c++] = String.fromCharCode(c1);
                    } else if (c1 > 191 && c1 < 224) {
                        var c2 = this._data.getUint8(this._ptr++, littleEndian);
                        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
                    } else {
                        var c2 = this._data.getUint8(this._ptr++, littleEndian);
                        var c3 = this._data.getUint8(this._ptr++, littleEndian);
                        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                    }
                }
                return out.join('');
            }
        });
        return AWDLoader;
    }();
    return AWDLoader;
});
define('skylark-threejs-ex/loaders/BabylonLoader',[
	"skylark-threejs"
],function(THREE) {
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	THREE.BabylonLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.BabylonLoader.prototype = {

		constructor: THREE.BabylonLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		parse: function ( json ) {

			function parseMaterials( json ) {

				var materials = {};

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					var data = json.materials[ i ];

					var material = new THREE.MeshPhongMaterial();
					material.name = data.name;
					material.color.fromArray( data.diffuse );
					material.emissive.fromArray( data.emissive );
					material.specular.fromArray( data.specular );
					material.shininess = data.specularPower;
					material.opacity = data.alpha;

					materials[ data.id ] = material;

				}

				if ( json.multiMaterials ) {

					for ( var i = 0, l = json.multiMaterials.length; i < l; i ++ ) {

						var data = json.multiMaterials[ i ];

						console.warn( 'THREE.BabylonLoader: Multi materials not yet supported.' );

						materials[ data.id ] = new THREE.MeshPhongMaterial();

					}

				}

				return materials;

			}

			function parseGeometry( json ) {

				var geometry = new THREE.BufferGeometry();

				var indices = json.indices;
				var positions = json.positions;
				var normals = json.normals;
				var uvs = json.uvs;

				// indices

				geometry.setIndex( indices );

				// positions

				for ( var j = 2, jl = positions.length; j < jl; j += 3 ) {

					positions[ j ] = - positions[ j ];

				}

				geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );

				// normals

				if ( normals ) {

					for ( var j = 2, jl = normals.length; j < jl; j += 3 ) {

						normals[ j ] = - normals[ j ];

					}

					geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );

				}

				// uvs

				if ( uvs ) {

					geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );

				}

				// offsets

				var subMeshes = json.subMeshes;

				if ( subMeshes ) {

					for ( var j = 0, jl = subMeshes.length; j < jl; j ++ ) {

						var subMesh = subMeshes[ j ];

						geometry.addGroup( subMesh.indexStart, subMesh.indexCount );

					}

				}

				return geometry;

			}

			function parseObjects( json, materials ) {

				var objects = {};
				var scene = new THREE.Scene();

				var cameras = json.cameras;

				for ( var i = 0, l = cameras.length; i < l; i ++ ) {

					var data = cameras[ i ];

					var camera = new THREE.PerspectiveCamera( ( data.fov / Math.PI ) * 180, 1.33, data.minZ, data.maxZ );

					camera.name = data.name;
					camera.position.fromArray( data.position );
					if ( data.rotation ) camera.rotation.fromArray( data.rotation );

					objects[ data.id ] = camera;

				}

				var lights = json.lights;

				for ( var i = 0, l = lights.length; i < l; i ++ ) {

					var data = lights[ i ];

					var light;

					switch ( data.type ) {

						case 0:
							light = new THREE.PointLight();
							break;

						case 1:
							light = new THREE.DirectionalLight();
							break;

						case 2:
							light = new THREE.SpotLight();
							break;

						case 3:
							light = new THREE.HemisphereLight();
							break;

					}

					light.name = data.name;
					if ( data.position ) light.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );
					light.color.fromArray( data.diffuse );
					if ( data.groundColor ) light.groundColor.fromArray( data.groundColor );
					if ( data.intensity ) light.intensity = data.intensity;

					objects[ data.id ] = light;

					scene.add( light );

				}

				var meshes = json.meshes;

				for ( var i = 0, l = meshes.length; i < l; i ++ ) {

					var data = meshes[ i ];

					var object;

					if ( data.indices ) {

						var geometry = parseGeometry( data );

						object = new THREE.Mesh( geometry, materials[ data.materialId ] );

					} else {

						object = new THREE.Group();

					}

					object.name = data.name;
					object.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );
					object.rotation.fromArray( data.rotation );
					if ( data.rotationQuaternion ) object.quaternion.fromArray( data.rotationQuaternion );
					object.scale.fromArray( data.scaling );
					// object.visible = data.isVisible;

					if ( data.parentId ) {

						objects[ data.parentId ].add( object );

					} else {

						scene.add( object );

					}

					objects[ data.id ] = object;

				}

				return scene;

			}

			var materials = parseMaterials( json );
			var scene = parseObjects( json, materials );

			return scene;

		}

	};
	
	return THREE.BabylonLoader ;
});
define('skylark-threejs-ex/loaders/TGALoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var TGALoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    TGALoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: TGALoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var texture = new THREE.Texture();
            var loader = new THREE.FileLoader(this.manager);
            loader.setResponseType('arraybuffer');
            loader.setPath(this.path);
            loader.load(url, function (buffer) {
                texture.image = scope.parse(buffer);
                texture.needsUpdate = true;
                if (onLoad !== undefined) {
                    onLoad(texture);
                }
            }, onProgress, onError);
            return texture;
        },
        parse: function (buffer) {
            function tgaCheckHeader(header) {
                switch (header.image_type) {
                case TGA_TYPE_INDEXED:
                case TGA_TYPE_RLE_INDEXED:
                    if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {
                        console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');
                    }
                    break;
                case TGA_TYPE_RGB:
                case TGA_TYPE_GREY:
                case TGA_TYPE_RLE_RGB:
                case TGA_TYPE_RLE_GREY:
                    if (header.colormap_type) {
                        console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');
                    }
                    break;
                case TGA_TYPE_NO_DATA:
                    console.error('THREE.TGALoader: No data.');
                default:
                    console.error('THREE.TGALoader: Invalid type "%s".', header.image_type);
                }
                if (header.width <= 0 || header.height <= 0) {
                    console.error('THREE.TGALoader: Invalid image size.');
                }
                if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {
                    console.error('THREE.TGALoader: Invalid pixel size "%s".', header.pixel_size);
                }
            }
            function tgaParse(use_rle, use_pal, header, offset, data) {
                var pixel_data, pixel_size, pixel_total, palettes;
                pixel_size = header.pixel_size >> 3;
                pixel_total = header.width * header.height * pixel_size;
                if (use_pal) {
                    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));
                }
                if (use_rle) {
                    pixel_data = new Uint8Array(pixel_total);
                    var c, count, i;
                    var shift = 0;
                    var pixels = new Uint8Array(pixel_size);
                    while (shift < pixel_total) {
                        c = data[offset++];
                        count = (c & 127) + 1;
                        if (c & 128) {
                            for (i = 0; i < pixel_size; ++i) {
                                pixels[i] = data[offset++];
                            }
                            for (i = 0; i < count; ++i) {
                                pixel_data.set(pixels, shift + i * pixel_size);
                            }
                            shift += pixel_size * count;
                        } else {
                            count *= pixel_size;
                            for (i = 0; i < count; ++i) {
                                pixel_data[shift + i] = data[offset++];
                            }
                            shift += count;
                        }
                    }
                } else {
                    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);
                }
                return {
                    pixel_data: pixel_data,
                    palettes: palettes
                };
            }
            function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {
                var colormap = palettes;
                var color, i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i++) {
                        color = image[i];
                        imageData[(x + width * y) * 4 + 3] = 255;
                        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];
                        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];
                        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];
                    }
                }
                return imageData;
            }
            function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var color, i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 2) {
                        color = image[i + 0] + (image[i + 1] << 8);
                        imageData[(x + width * y) * 4 + 0] = (color & 31744) >> 7;
                        imageData[(x + width * y) * 4 + 1] = (color & 992) >> 2;
                        imageData[(x + width * y) * 4 + 2] = (color & 31) >> 3;
                        imageData[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;
                    }
                }
                return imageData;
            }
            function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 3) {
                        imageData[(x + width * y) * 4 + 3] = 255;
                        imageData[(x + width * y) * 4 + 2] = image[i + 0];
                        imageData[(x + width * y) * 4 + 1] = image[i + 1];
                        imageData[(x + width * y) * 4 + 0] = image[i + 2];
                    }
                }
                return imageData;
            }
            function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 4) {
                        imageData[(x + width * y) * 4 + 2] = image[i + 0];
                        imageData[(x + width * y) * 4 + 1] = image[i + 1];
                        imageData[(x + width * y) * 4 + 0] = image[i + 2];
                        imageData[(x + width * y) * 4 + 3] = image[i + 3];
                    }
                }
                return imageData;
            }
            function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var color, i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i++) {
                        color = image[i];
                        imageData[(x + width * y) * 4 + 0] = color;
                        imageData[(x + width * y) * 4 + 1] = color;
                        imageData[(x + width * y) * 4 + 2] = color;
                        imageData[(x + width * y) * 4 + 3] = 255;
                    }
                }
                return imageData;
            }
            function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 2) {
                        imageData[(x + width * y) * 4 + 0] = image[i + 0];
                        imageData[(x + width * y) * 4 + 1] = image[i + 0];
                        imageData[(x + width * y) * 4 + 2] = image[i + 0];
                        imageData[(x + width * y) * 4 + 3] = image[i + 1];
                    }
                }
                return imageData;
            }
            function getTgaRGBA(data, width, height, image, palette) {
                var x_start, y_start, x_step, y_step, x_end, y_end;
                switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {
                default:
                case TGA_ORIGIN_UL:
                    x_start = 0;
                    x_step = 1;
                    x_end = width;
                    y_start = 0;
                    y_step = 1;
                    y_end = height;
                    break;
                case TGA_ORIGIN_BL:
                    x_start = 0;
                    x_step = 1;
                    x_end = width;
                    y_start = height - 1;
                    y_step = -1;
                    y_end = -1;
                    break;
                case TGA_ORIGIN_UR:
                    x_start = width - 1;
                    x_step = -1;
                    x_end = -1;
                    y_start = 0;
                    y_step = 1;
                    y_end = height;
                    break;
                case TGA_ORIGIN_BR:
                    x_start = width - 1;
                    x_step = -1;
                    x_end = -1;
                    y_start = height - 1;
                    y_step = -1;
                    y_end = -1;
                    break;
                }
                if (use_grey) {
                    switch (header.pixel_size) {
                    case 8:
                        tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    case 16:
                        tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    default:
                        console.error('THREE.TGALoader: Format not supported.');
                        break;
                    }
                } else {
                    switch (header.pixel_size) {
                    case 8:
                        tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);
                        break;
                    case 16:
                        tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    case 24:
                        tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    case 32:
                        tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    default:
                        console.error('THREE.TGALoader: Format not supported.');
                        break;
                    }
                }
                return data;
            }
            var TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;
            if (buffer.length < 19)
                console.error('THREE.TGALoader: Not enough data to contain header.');
            var content = new Uint8Array(buffer), offset = 0, header = {
                    id_length: content[offset++],
                    colormap_type: content[offset++],
                    image_type: content[offset++],
                    colormap_index: content[offset++] | content[offset++] << 8,
                    colormap_length: content[offset++] | content[offset++] << 8,
                    colormap_size: content[offset++],
                    origin: [
                        content[offset++] | content[offset++] << 8,
                        content[offset++] | content[offset++] << 8
                    ],
                    width: content[offset++] | content[offset++] << 8,
                    height: content[offset++] | content[offset++] << 8,
                    pixel_size: content[offset++],
                    flags: content[offset++]
                };
            tgaCheckHeader(header);
            if (header.id_length + offset > buffer.length) {
                console.error('THREE.TGALoader: No data.');
            }
            offset += header.id_length;
            var use_rle = false, use_pal = false, use_grey = false;
            switch (header.image_type) {
            case TGA_TYPE_RLE_INDEXED:
                use_rle = true;
                use_pal = true;
                break;
            case TGA_TYPE_INDEXED:
                use_pal = true;
                break;
            case TGA_TYPE_RLE_RGB:
                use_rle = true;
                break;
            case TGA_TYPE_RGB:
                break;
            case TGA_TYPE_RLE_GREY:
                use_rle = true;
                use_grey = true;
                break;
            case TGA_TYPE_GREY:
                use_grey = true;
                break;
            }
            var useOffscreen = typeof OffscreenCanvas !== 'undefined';
            var canvas = useOffscreen ? new OffscreenCanvas(header.width, header.height) : document.createElement('canvas');
            canvas.width = header.width;
            canvas.height = header.height;
            var context = canvas.getContext('2d');
            var imageData = context.createImageData(header.width, header.height);
            var result = tgaParse(use_rle, use_pal, header, offset, content);
            var rgbaData = getTgaRGBA(imageData.data, header.width, header.height, result.pixel_data, result.palettes);
            context.putImageData(imageData, 0, 0);
            return useOffscreen ? canvas.transferToImageBitmap() : canvas;
        }
    });
    return  TGALoader;
});
define('skylark-threejs-ex/loaders/ColladaLoader',[
    "skylark-threejs",
    '../loaders/TGALoader'
], function (THREE, TGALoader) {
    'use strict';
    var ColladaLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    ColladaLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: ColladaLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text, path));
            }, onProgress, onError);
        },
        options: {
            set convertUpAxis(value) {
                console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');
            }
        },
        parse: function (text, path) {
            function getElementsByTagName(xml, name) {
                var array = [];
                var childNodes = xml.childNodes;
                for (var i = 0, l = childNodes.length; i < l; i++) {
                    var child = childNodes[i];
                    if (child.nodeName === name) {
                        array.push(child);
                    }
                }
                return array;
            }
            function parseStrings(text) {
                if (text.length === 0)
                    return [];
                var parts = text.trim().split(/\s+/);
                var array = new Array(parts.length);
                for (var i = 0, l = parts.length; i < l; i++) {
                    array[i] = parts[i];
                }
                return array;
            }
            function parseFloats(text) {
                if (text.length === 0)
                    return [];
                var parts = text.trim().split(/\s+/);
                var array = new Array(parts.length);
                for (var i = 0, l = parts.length; i < l; i++) {
                    array[i] = parseFloat(parts[i]);
                }
                return array;
            }
            function parseInts(text) {
                if (text.length === 0)
                    return [];
                var parts = text.trim().split(/\s+/);
                var array = new Array(parts.length);
                for (var i = 0, l = parts.length; i < l; i++) {
                    array[i] = parseInt(parts[i]);
                }
                return array;
            }
            function parseId(text) {
                return text.substring(1);
            }
            function generateId() {
                return 'three_default_' + count++;
            }
            function isEmpty(object) {
                return Object.keys(object).length === 0;
            }
            function parseAsset(xml) {
                return {
                    unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),
                    upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])
                };
            }
            function parseAssetUnit(xml) {
                if (xml !== undefined && xml.hasAttribute('meter') === true) {
                    return parseFloat(xml.getAttribute('meter'));
                } else {
                    return 1;
                }
            }
            function parseAssetUpAxis(xml) {
                return xml !== undefined ? xml.textContent : 'Y_UP';
            }
            function parseLibrary(xml, libraryName, nodeName, parser) {
                var library = getElementsByTagName(xml, libraryName)[0];
                if (library !== undefined) {
                    var elements = getElementsByTagName(library, nodeName);
                    for (var i = 0; i < elements.length; i++) {
                        parser(elements[i]);
                    }
                }
            }
            function buildLibrary(data, builder) {
                for (var name in data) {
                    var object = data[name];
                    object.build = builder(data[name]);
                }
            }
            function getBuild(data, builder) {
                if (data.build !== undefined)
                    return data.build;
                data.build = builder(data);
                return data.build;
            }
            function parseAnimation(xml) {
                var data = {
                    sources: {},
                    samplers: {},
                    channels: {}
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    var id;
                    switch (child.nodeName) {
                    case 'source':
                        id = child.getAttribute('id');
                        data.sources[id] = parseSource(child);
                        break;
                    case 'sampler':
                        id = child.getAttribute('id');
                        data.samplers[id] = parseAnimationSampler(child);
                        break;
                    case 'channel':
                        id = child.getAttribute('target');
                        data.channels[id] = parseAnimationChannel(child);
                        break;
                    default:
                        console.log(child);
                    }
                }
                library.animations[xml.getAttribute('id')] = data;
            }
            function parseAnimationSampler(xml) {
                var data = { inputs: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var id = parseId(child.getAttribute('source'));
                        var semantic = child.getAttribute('semantic');
                        data.inputs[semantic] = id;
                        break;
                    }
                }
                return data;
            }
            function parseAnimationChannel(xml) {
                var data = {};
                var target = xml.getAttribute('target');
                var parts = target.split('/');
                var id = parts.shift();
                var sid = parts.shift();
                var arraySyntax = sid.indexOf('(') !== -1;
                var memberSyntax = sid.indexOf('.') !== -1;
                if (memberSyntax) {
                    parts = sid.split('.');
                    sid = parts.shift();
                    data.member = parts.shift();
                } else if (arraySyntax) {
                    var indices = sid.split('(');
                    sid = indices.shift();
                    for (var i = 0; i < indices.length; i++) {
                        indices[i] = parseInt(indices[i].replace(/\)/, ''));
                    }
                    data.indices = indices;
                }
                data.id = id;
                data.sid = sid;
                data.arraySyntax = arraySyntax;
                data.memberSyntax = memberSyntax;
                data.sampler = parseId(xml.getAttribute('source'));
                return data;
            }
            function buildAnimation(data) {
                var tracks = [];
                var channels = data.channels;
                var samplers = data.samplers;
                var sources = data.sources;
                for (var target in channels) {
                    if (channels.hasOwnProperty(target)) {
                        var channel = channels[target];
                        var sampler = samplers[channel.sampler];
                        var inputId = sampler.inputs.INPUT;
                        var outputId = sampler.inputs.OUTPUT;
                        var inputSource = sources[inputId];
                        var outputSource = sources[outputId];
                        var animation = buildAnimationChannel(channel, inputSource, outputSource);
                        createKeyframeTracks(animation, tracks);
                    }
                }
                return tracks;
            }
            function getAnimation(id) {
                return getBuild(library.animations[id], buildAnimation);
            }
            function buildAnimationChannel(channel, inputSource, outputSource) {
                var node = library.nodes[channel.id];
                var object3D = getNode(node.id);
                var transform = node.transforms[channel.sid];
                var defaultMatrix = node.matrix.clone().transpose();
                var time, stride;
                var i, il, j, jl;
                var data = {};
                switch (transform) {
                case 'matrix':
                    for (i = 0, il = inputSource.array.length; i < il; i++) {
                        time = inputSource.array[i];
                        stride = i * outputSource.stride;
                        if (data[time] === undefined)
                            data[time] = {};
                        if (channel.arraySyntax === true) {
                            var value = outputSource.array[stride];
                            var index = channel.indices[0] + 4 * channel.indices[1];
                            data[time][index] = value;
                        } else {
                            for (j = 0, jl = outputSource.stride; j < jl; j++) {
                                data[time][j] = outputSource.array[stride + j];
                            }
                        }
                    }
                    break;
                case 'translate':
                    console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
                    break;
                case 'rotate':
                    console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
                    break;
                case 'scale':
                    console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
                    break;
                }
                var keyframes = prepareAnimationData(data, defaultMatrix);
                var animation = {
                    name: object3D.uuid,
                    keyframes: keyframes
                };
                return animation;
            }
            function prepareAnimationData(data, defaultMatrix) {
                var keyframes = [];
                for (var time in data) {
                    keyframes.push({
                        time: parseFloat(time),
                        value: data[time]
                    });
                }
                keyframes.sort(ascending);
                for (var i = 0; i < 16; i++) {
                    transformAnimationData(keyframes, i, defaultMatrix.elements[i]);
                }
                return keyframes;
                function ascending(a, b) {
                    return a.time - b.time;
                }
            }
            var position = new THREE.Vector3();
            var scale = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            function createKeyframeTracks(animation, tracks) {
                var keyframes = animation.keyframes;
                var name = animation.name;
                var times = [];
                var positionData = [];
                var quaternionData = [];
                var scaleData = [];
                for (var i = 0, l = keyframes.length; i < l; i++) {
                    var keyframe = keyframes[i];
                    var time = keyframe.time;
                    var value = keyframe.value;
                    matrix.fromArray(value).transpose();
                    matrix.decompose(position, quaternion, scale);
                    times.push(time);
                    positionData.push(position.x, position.y, position.z);
                    quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
                    scaleData.push(scale.x, scale.y, scale.z);
                }
                if (positionData.length > 0)
                    tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));
                if (quaternionData.length > 0)
                    tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));
                if (scaleData.length > 0)
                    tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));
                return tracks;
            }
            function transformAnimationData(keyframes, property, defaultValue) {
                var keyframe;
                var empty = true;
                var i, l;
                for (i = 0, l = keyframes.length; i < l; i++) {
                    keyframe = keyframes[i];
                    if (keyframe.value[property] === undefined) {
                        keyframe.value[property] = null;
                    } else {
                        empty = false;
                    }
                }
                if (empty === true) {
                    for (i = 0, l = keyframes.length; i < l; i++) {
                        keyframe = keyframes[i];
                        keyframe.value[property] = defaultValue;
                    }
                } else {
                    createMissingKeyframes(keyframes, property);
                }
            }
            function createMissingKeyframes(keyframes, property) {
                var prev, next;
                for (var i = 0, l = keyframes.length; i < l; i++) {
                    var keyframe = keyframes[i];
                    if (keyframe.value[property] === null) {
                        prev = getPrev(keyframes, i, property);
                        next = getNext(keyframes, i, property);
                        if (prev === null) {
                            keyframe.value[property] = next.value[property];
                            continue;
                        }
                        if (next === null) {
                            keyframe.value[property] = prev.value[property];
                            continue;
                        }
                        interpolate(keyframe, prev, next, property);
                    }
                }
            }
            function getPrev(keyframes, i, property) {
                while (i >= 0) {
                    var keyframe = keyframes[i];
                    if (keyframe.value[property] !== null)
                        return keyframe;
                    i--;
                }
                return null;
            }
            function getNext(keyframes, i, property) {
                while (i < keyframes.length) {
                    var keyframe = keyframes[i];
                    if (keyframe.value[property] !== null)
                        return keyframe;
                    i++;
                }
                return null;
            }
            function interpolate(key, prev, next, property) {
                if (next.time - prev.time === 0) {
                    key.value[property] = prev.value[property];
                    return;
                }
                key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];
            }
            function parseAnimationClip(xml) {
                var data = {
                    name: xml.getAttribute('id') || 'default',
                    start: parseFloat(xml.getAttribute('start') || 0),
                    end: parseFloat(xml.getAttribute('end') || 0),
                    animations: []
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'instance_animation':
                        data.animations.push(parseId(child.getAttribute('url')));
                        break;
                    }
                }
                library.clips[xml.getAttribute('id')] = data;
            }
            function buildAnimationClip(data) {
                var tracks = [];
                var name = data.name;
                var duration = data.end - data.start || -1;
                var animations = data.animations;
                for (var i = 0, il = animations.length; i < il; i++) {
                    var animationTracks = getAnimation(animations[i]);
                    for (var j = 0, jl = animationTracks.length; j < jl; j++) {
                        tracks.push(animationTracks[j]);
                    }
                }
                return new THREE.AnimationClip(name, duration, tracks);
            }
            function getAnimationClip(id) {
                return getBuild(library.clips[id], buildAnimationClip);
            }
            function parseController(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'skin':
                        data.id = parseId(child.getAttribute('source'));
                        data.skin = parseSkin(child);
                        break;
                    case 'morph':
                        data.id = parseId(child.getAttribute('source'));
                        console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');
                        break;
                    }
                }
                library.controllers[xml.getAttribute('id')] = data;
            }
            function parseSkin(xml) {
                var data = { sources: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'bind_shape_matrix':
                        data.bindShapeMatrix = parseFloats(child.textContent);
                        break;
                    case 'source':
                        var id = child.getAttribute('id');
                        data.sources[id] = parseSource(child);
                        break;
                    case 'joints':
                        data.joints = parseJoints(child);
                        break;
                    case 'vertex_weights':
                        data.vertexWeights = parseVertexWeights(child);
                        break;
                    }
                }
                return data;
            }
            function parseJoints(xml) {
                var data = { inputs: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var semantic = child.getAttribute('semantic');
                        var id = parseId(child.getAttribute('source'));
                        data.inputs[semantic] = id;
                        break;
                    }
                }
                return data;
            }
            function parseVertexWeights(xml) {
                var data = { inputs: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var semantic = child.getAttribute('semantic');
                        var id = parseId(child.getAttribute('source'));
                        var offset = parseInt(child.getAttribute('offset'));
                        data.inputs[semantic] = {
                            id: id,
                            offset: offset
                        };
                        break;
                    case 'vcount':
                        data.vcount = parseInts(child.textContent);
                        break;
                    case 'v':
                        data.v = parseInts(child.textContent);
                        break;
                    }
                }
                return data;
            }
            function buildController(data) {
                var build = { id: data.id };
                var geometry = library.geometries[build.id];
                if (data.skin !== undefined) {
                    build.skin = buildSkin(data.skin);
                    geometry.sources.skinIndices = build.skin.indices;
                    geometry.sources.skinWeights = build.skin.weights;
                }
                return build;
            }
            function buildSkin(data) {
                var BONE_LIMIT = 4;
                var build = {
                    joints: [],
                    indices: {
                        array: [],
                        stride: BONE_LIMIT
                    },
                    weights: {
                        array: [],
                        stride: BONE_LIMIT
                    }
                };
                var sources = data.sources;
                var vertexWeights = data.vertexWeights;
                var vcount = vertexWeights.vcount;
                var v = vertexWeights.v;
                var jointOffset = vertexWeights.inputs.JOINT.offset;
                var weightOffset = vertexWeights.inputs.WEIGHT.offset;
                var jointSource = data.sources[data.joints.inputs.JOINT];
                var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];
                var weights = sources[vertexWeights.inputs.WEIGHT.id].array;
                var stride = 0;
                var i, j, l;
                for (i = 0, l = vcount.length; i < l; i++) {
                    var jointCount = vcount[i];
                    var vertexSkinData = [];
                    for (j = 0; j < jointCount; j++) {
                        var skinIndex = v[stride + jointOffset];
                        var weightId = v[stride + weightOffset];
                        var skinWeight = weights[weightId];
                        vertexSkinData.push({
                            index: skinIndex,
                            weight: skinWeight
                        });
                        stride += 2;
                    }
                    vertexSkinData.sort(descending);
                    for (j = 0; j < BONE_LIMIT; j++) {
                        var d = vertexSkinData[j];
                        if (d !== undefined) {
                            build.indices.array.push(d.index);
                            build.weights.array.push(d.weight);
                        } else {
                            build.indices.array.push(0);
                            build.weights.array.push(0);
                        }
                    }
                }
                if (data.bindShapeMatrix) {
                    build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();
                } else {
                    build.bindMatrix = new THREE.Matrix4().identity();
                }
                for (i = 0, l = jointSource.array.length; i < l; i++) {
                    var name = jointSource.array[i];
                    var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();
                    build.joints.push({
                        name: name,
                        boneInverse: boneInverse
                    });
                }
                return build;
                function descending(a, b) {
                    return b.weight - a.weight;
                }
            }
            function getController(id) {
                return getBuild(library.controllers[id], buildController);
            }
            function parseImage(xml) {
                var data = { init_from: getElementsByTagName(xml, 'init_from')[0].textContent };
                library.images[xml.getAttribute('id')] = data;
            }
            function buildImage(data) {
                if (data.build !== undefined)
                    return data.build;
                return data.init_from;
            }
            function getImage(id) {
                var data = library.images[id];
                if (data !== undefined) {
                    return getBuild(data, buildImage);
                }
                console.warn("THREE.ColladaLoader: Couldn't find image with ID:", id);
                return null;
            }
            function parseEffect(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'profile_COMMON':
                        data.profile = parseEffectProfileCOMMON(child);
                        break;
                    }
                }
                library.effects[xml.getAttribute('id')] = data;
            }
            function parseEffectProfileCOMMON(xml) {
                var data = {
                    surfaces: {},
                    samplers: {}
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'newparam':
                        parseEffectNewparam(child, data);
                        break;
                    case 'technique':
                        data.technique = parseEffectTechnique(child);
                        break;
                    case 'extra':
                        data.extra = parseEffectExtra(child);
                        break;
                    }
                }
                return data;
            }
            function parseEffectNewparam(xml, data) {
                var sid = xml.getAttribute('sid');
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'surface':
                        data.surfaces[sid] = parseEffectSurface(child);
                        break;
                    case 'sampler2D':
                        data.samplers[sid] = parseEffectSampler(child);
                        break;
                    }
                }
            }
            function parseEffectSurface(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'init_from':
                        data.init_from = child.textContent;
                        break;
                    }
                }
                return data;
            }
            function parseEffectSampler(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'source':
                        data.source = child.textContent;
                        break;
                    }
                }
                return data;
            }
            function parseEffectTechnique(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'constant':
                    case 'lambert':
                    case 'blinn':
                    case 'phong':
                        data.type = child.nodeName;
                        data.parameters = parseEffectParameters(child);
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameters(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'emission':
                    case 'diffuse':
                    case 'specular':
                    case 'bump':
                    case 'ambient':
                    case 'shininess':
                    case 'transparency':
                        data[child.nodeName] = parseEffectParameter(child);
                        break;
                    case 'transparent':
                        data[child.nodeName] = {
                            opaque: child.getAttribute('opaque'),
                            data: parseEffectParameter(child)
                        };
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameter(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'color':
                        data[child.nodeName] = parseFloats(child.textContent);
                        break;
                    case 'float':
                        data[child.nodeName] = parseFloat(child.textContent);
                        break;
                    case 'texture':
                        data[child.nodeName] = {
                            id: child.getAttribute('texture'),
                            extra: parseEffectParameterTexture(child)
                        };
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameterTexture(xml) {
                var data = { technique: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'extra':
                        parseEffectParameterTextureExtra(child, data);
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameterTextureExtra(xml, data) {
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique':
                        parseEffectParameterTextureExtraTechnique(child, data);
                        break;
                    }
                }
            }
            function parseEffectParameterTextureExtraTechnique(xml, data) {
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'repeatU':
                    case 'repeatV':
                    case 'offsetU':
                    case 'offsetV':
                        data.technique[child.nodeName] = parseFloat(child.textContent);
                        break;
                    case 'wrapU':
                    case 'wrapV':
                        if (child.textContent.toUpperCase() === 'TRUE') {
                            data.technique[child.nodeName] = 1;
                        } else if (child.textContent.toUpperCase() === 'FALSE') {
                            data.technique[child.nodeName] = 0;
                        } else {
                            data.technique[child.nodeName] = parseInt(child.textContent);
                        }
                        break;
                    }
                }
            }
            function parseEffectExtra(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique':
                        data.technique = parseEffectExtraTechnique(child);
                        break;
                    }
                }
                return data;
            }
            function parseEffectExtraTechnique(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'double_sided':
                        data[child.nodeName] = parseInt(child.textContent);
                        break;
                    }
                }
                return data;
            }
            function buildEffect(data) {
                return data;
            }
            function getEffect(id) {
                return getBuild(library.effects[id], buildEffect);
            }
            function parseMaterial(xml) {
                var data = { name: xml.getAttribute('name') };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'instance_effect':
                        data.url = parseId(child.getAttribute('url'));
                        break;
                    }
                }
                library.materials[xml.getAttribute('id')] = data;
            }
            function getTextureLoader(image) {
                var loader;
                var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2);
                extension = extension.toLowerCase();
                switch (extension) {
                case 'tga':
                    loader = tgaLoader;
                    break;
                default:
                    loader = textureLoader;
                }
                return loader;
            }
            function buildMaterial(data) {
                var effect = getEffect(data.url);
                var technique = effect.profile.technique;
                var extra = effect.profile.extra;
                var material;
                switch (technique.type) {
                case 'phong':
                case 'blinn':
                    material = new THREE.MeshPhongMaterial();
                    break;
                case 'lambert':
                    material = new THREE.MeshLambertMaterial();
                    break;
                default:
                    material = new THREE.MeshBasicMaterial();
                    break;
                }
                material.name = data.name || '';
                function getTexture(textureObject) {
                    var sampler = effect.profile.samplers[textureObject.id];
                    var image = null;
                    if (sampler !== undefined) {
                        var surface = effect.profile.surfaces[sampler.source];
                        image = getImage(surface.init_from);
                    } else {
                        console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');
                        image = getImage(textureObject.id);
                    }
                    if (image !== null) {
                        var loader = getTextureLoader(image);
                        if (loader !== undefined) {
                            var texture = loader.load(image);
                            var extra = textureObject.extra;
                            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {
                                var technique = extra.technique;
                                texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                                texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                                texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);
                                texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);
                            } else {
                                texture.wrapS = THREE.RepeatWrapping;
                                texture.wrapT = THREE.RepeatWrapping;
                            }
                            return texture;
                        } else {
                            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);
                            return null;
                        }
                    } else {
                        console.warn("THREE.ColladaLoader: Couldn't create texture with ID:", textureObject.id);
                        return null;
                    }
                }
                var parameters = technique.parameters;
                for (var key in parameters) {
                    var parameter = parameters[key];
                    switch (key) {
                    case 'diffuse':
                        if (parameter.color)
                            material.color.fromArray(parameter.color);
                        if (parameter.texture)
                            material.map = getTexture(parameter.texture);
                        break;
                    case 'specular':
                        if (parameter.color && material.specular)
                            material.specular.fromArray(parameter.color);
                        if (parameter.texture)
                            material.specularMap = getTexture(parameter.texture);
                        break;
                    case 'bump':
                        if (parameter.texture)
                            material.normalMap = getTexture(parameter.texture);
                        break;
                    case 'ambient':
                        if (parameter.texture)
                            material.lightMap = getTexture(parameter.texture);
                        break;
                    case 'shininess':
                        if (parameter.float && material.shininess)
                            material.shininess = parameter.float;
                        break;
                    case 'emission':
                        if (parameter.color && material.emissive)
                            material.emissive.fromArray(parameter.color);
                        if (parameter.texture)
                            material.emissiveMap = getTexture(parameter.texture);
                        break;
                    }
                }
                var transparent = parameters['transparent'];
                var transparency = parameters['transparency'];
                if (transparency === undefined && transparent) {
                    transparency = { float: 1 };
                }
                if (transparent === undefined && transparency) {
                    transparent = {
                        opaque: 'A_ONE',
                        data: {
                            color: [
                                1,
                                1,
                                1,
                                1
                            ]
                        }
                    };
                }
                if (transparent && transparency) {
                    if (transparent.data.texture) {
                        material.transparent = true;
                    } else {
                        var color = transparent.data.color;
                        switch (transparent.opaque) {
                        case 'A_ONE':
                            material.opacity = color[3] * transparency.float;
                            break;
                        case 'RGB_ZERO':
                            material.opacity = 1 - color[0] * transparency.float;
                            break;
                        case 'A_ZERO':
                            material.opacity = 1 - color[3] * transparency.float;
                            break;
                        case 'RGB_ONE':
                            material.opacity = color[0] * transparency.float;
                            break;
                        default:
                            console.warn('THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', transparent.opaque);
                        }
                        if (material.opacity < 1)
                            material.transparent = true;
                    }
                }
                if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {
                    material.side = THREE.DoubleSide;
                }
                return material;
            }
            function getMaterial(id) {
                return getBuild(library.materials[id], buildMaterial);
            }
            function parseCamera(xml) {
                var data = { name: xml.getAttribute('name') };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'optics':
                        data.optics = parseCameraOptics(child);
                        break;
                    }
                }
                library.cameras[xml.getAttribute('id')] = data;
            }
            function parseCameraOptics(xml) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'technique_common':
                        return parseCameraTechnique(child);
                    }
                }
                return {};
            }
            function parseCameraTechnique(xml) {
                var data = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'perspective':
                    case 'orthographic':
                        data.technique = child.nodeName;
                        data.parameters = parseCameraParameters(child);
                        break;
                    }
                }
                return data;
            }
            function parseCameraParameters(xml) {
                var data = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'xfov':
                    case 'yfov':
                    case 'xmag':
                    case 'ymag':
                    case 'znear':
                    case 'zfar':
                    case 'aspect_ratio':
                        data[child.nodeName] = parseFloat(child.textContent);
                        break;
                    }
                }
                return data;
            }
            function buildCamera(data) {
                var camera;
                switch (data.optics.technique) {
                case 'perspective':
                    camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);
                    break;
                case 'orthographic':
                    var ymag = data.optics.parameters.ymag;
                    var xmag = data.optics.parameters.xmag;
                    var aspectRatio = data.optics.parameters.aspect_ratio;
                    xmag = xmag === undefined ? ymag * aspectRatio : xmag;
                    ymag = ymag === undefined ? xmag / aspectRatio : ymag;
                    xmag *= 0.5;
                    ymag *= 0.5;
                    camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, data.optics.parameters.znear, data.optics.parameters.zfar);
                    break;
                default:
                    camera = new THREE.PerspectiveCamera();
                    break;
                }
                camera.name = data.name || '';
                return camera;
            }
            function getCamera(id) {
                var data = library.cameras[id];
                if (data !== undefined) {
                    return getBuild(data, buildCamera);
                }
                console.warn("THREE.ColladaLoader: Couldn't find camera with ID:", id);
                return null;
            }
            function parseLight(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique_common':
                        data = parseLightTechnique(child);
                        break;
                    }
                }
                library.lights[xml.getAttribute('id')] = data;
            }
            function parseLightTechnique(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'directional':
                    case 'point':
                    case 'spot':
                    case 'ambient':
                        data.technique = child.nodeName;
                        data.parameters = parseLightParameters(child);
                    }
                }
                return data;
            }
            function parseLightParameters(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'color':
                        var array = parseFloats(child.textContent);
                        data.color = new THREE.Color().fromArray(array);
                        break;
                    case 'falloff_angle':
                        data.falloffAngle = parseFloat(child.textContent);
                        break;
                    case 'quadratic_attenuation':
                        var f = parseFloat(child.textContent);
                        data.distance = f ? Math.sqrt(1 / f) : 0;
                        break;
                    }
                }
                return data;
            }
            function buildLight(data) {
                var light;
                switch (data.technique) {
                case 'directional':
                    light = new THREE.DirectionalLight();
                    break;
                case 'point':
                    light = new THREE.PointLight();
                    break;
                case 'spot':
                    light = new THREE.SpotLight();
                    break;
                case 'ambient':
                    light = new THREE.AmbientLight();
                    break;
                }
                if (data.parameters.color)
                    light.color.copy(data.parameters.color);
                if (data.parameters.distance)
                    light.distance = data.parameters.distance;
                return light;
            }
            function getLight(id) {
                var data = library.lights[id];
                if (data !== undefined) {
                    return getBuild(data, buildLight);
                }
                console.warn("THREE.ColladaLoader: Couldn't find light with ID:", id);
                return null;
            }
            function parseGeometry(xml) {
                var data = {
                    name: xml.getAttribute('name'),
                    sources: {},
                    vertices: {},
                    primitives: []
                };
                var mesh = getElementsByTagName(xml, 'mesh')[0];
                if (mesh === undefined)
                    return;
                for (var i = 0; i < mesh.childNodes.length; i++) {
                    var child = mesh.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    var id = child.getAttribute('id');
                    switch (child.nodeName) {
                    case 'source':
                        data.sources[id] = parseSource(child);
                        break;
                    case 'vertices':
                        data.vertices = parseGeometryVertices(child);
                        break;
                    case 'polygons':
                        console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);
                        break;
                    case 'lines':
                    case 'linestrips':
                    case 'polylist':
                    case 'triangles':
                        data.primitives.push(parseGeometryPrimitive(child));
                        break;
                    default:
                        console.log(child);
                    }
                }
                library.geometries[xml.getAttribute('id')] = data;
            }
            function parseSource(xml) {
                var data = {
                    array: [],
                    stride: 3
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'float_array':
                        data.array = parseFloats(child.textContent);
                        break;
                    case 'Name_array':
                        data.array = parseStrings(child.textContent);
                        break;
                    case 'technique_common':
                        var accessor = getElementsByTagName(child, 'accessor')[0];
                        if (accessor !== undefined) {
                            data.stride = parseInt(accessor.getAttribute('stride'));
                        }
                        break;
                    }
                }
                return data;
            }
            function parseGeometryVertices(xml) {
                var data = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));
                }
                return data;
            }
            function parseGeometryPrimitive(xml) {
                var primitive = {
                    type: xml.nodeName,
                    material: xml.getAttribute('material'),
                    count: parseInt(xml.getAttribute('count')),
                    inputs: {},
                    stride: 0,
                    hasUV: false
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var id = parseId(child.getAttribute('source'));
                        var semantic = child.getAttribute('semantic');
                        var offset = parseInt(child.getAttribute('offset'));
                        var set = parseInt(child.getAttribute('set'));
                        var inputname = set > 0 ? semantic + set : semantic;
                        primitive.inputs[inputname] = {
                            id: id,
                            offset: offset
                        };
                        primitive.stride = Math.max(primitive.stride, offset + 1);
                        if (semantic === 'TEXCOORD')
                            primitive.hasUV = true;
                        break;
                    case 'vcount':
                        primitive.vcount = parseInts(child.textContent);
                        break;
                    case 'p':
                        primitive.p = parseInts(child.textContent);
                        break;
                    }
                }
                return primitive;
            }
            function groupPrimitives(primitives) {
                var build = {};
                for (var i = 0; i < primitives.length; i++) {
                    var primitive = primitives[i];
                    if (build[primitive.type] === undefined)
                        build[primitive.type] = [];
                    build[primitive.type].push(primitive);
                }
                return build;
            }
            function checkUVCoordinates(primitives) {
                var count = 0;
                for (var i = 0, l = primitives.length; i < l; i++) {
                    var primitive = primitives[i];
                    if (primitive.hasUV === true) {
                        count++;
                    }
                }
                if (count > 0 && count < primitives.length) {
                    primitives.uvsNeedsFix = true;
                }
            }
            function buildGeometry(data) {
                var build = {};
                var sources = data.sources;
                var vertices = data.vertices;
                var primitives = data.primitives;
                if (primitives.length === 0)
                    return {};
                var groupedPrimitives = groupPrimitives(primitives);
                for (var type in groupedPrimitives) {
                    var primitiveType = groupedPrimitives[type];
                    checkUVCoordinates(primitiveType);
                    build[type] = buildGeometryType(primitiveType, sources, vertices);
                }
                return build;
            }
            function buildGeometryType(primitives, sources, vertices) {
                var build = {};
                var position = {
                    array: [],
                    stride: 0
                };
                var normal = {
                    array: [],
                    stride: 0
                };
                var uv = {
                    array: [],
                    stride: 0
                };
                var uv2 = {
                    array: [],
                    stride: 0
                };
                var color = {
                    array: [],
                    stride: 0
                };
                var skinIndex = {
                    array: [],
                    stride: 4
                };
                var skinWeight = {
                    array: [],
                    stride: 4
                };
                var geometry = new THREE.BufferGeometry();
                var materialKeys = [];
                var start = 0;
                for (var p = 0; p < primitives.length; p++) {
                    var primitive = primitives[p];
                    var inputs = primitive.inputs;
                    var count = 0;
                    switch (primitive.type) {
                    case 'lines':
                    case 'linestrips':
                        count = primitive.count * 2;
                        break;
                    case 'triangles':
                        count = primitive.count * 3;
                        break;
                    case 'polylist':
                        for (var g = 0; g < primitive.count; g++) {
                            var vc = primitive.vcount[g];
                            switch (vc) {
                            case 3:
                                count += 3;
                                break;
                            case 4:
                                count += 6;
                                break;
                            default:
                                count += (vc - 2) * 3;
                                break;
                            }
                        }
                        break;
                    default:
                        console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);
                    }
                    geometry.addGroup(start, count, p);
                    start += count;
                    if (primitive.material) {
                        materialKeys.push(primitive.material);
                    }
                    for (var name in inputs) {
                        var input = inputs[name];
                        switch (name) {
                        case 'VERTEX':
                            for (var key in vertices) {
                                var id = vertices[key];
                                switch (key) {
                                case 'POSITION':
                                    var prevLength = position.array.length;
                                    buildGeometryData(primitive, sources[id], input.offset, position.array);
                                    position.stride = sources[id].stride;
                                    if (sources.skinWeights && sources.skinIndices) {
                                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);
                                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);
                                    }
                                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {
                                        var count = (position.array.length - prevLength) / position.stride;
                                        for (var i = 0; i < count; i++) {
                                            uv.array.push(0, 0);
                                        }
                                    }
                                    break;
                                case 'NORMAL':
                                    buildGeometryData(primitive, sources[id], input.offset, normal.array);
                                    normal.stride = sources[id].stride;
                                    break;
                                case 'COLOR':
                                    buildGeometryData(primitive, sources[id], input.offset, color.array);
                                    color.stride = sources[id].stride;
                                    break;
                                case 'TEXCOORD':
                                    buildGeometryData(primitive, sources[id], input.offset, uv.array);
                                    uv.stride = sources[id].stride;
                                    break;
                                case 'TEXCOORD1':
                                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);
                                    uv.stride = sources[id].stride;
                                    break;
                                default:
                                    console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', key);
                                }
                            }
                            break;
                        case 'NORMAL':
                            buildGeometryData(primitive, sources[input.id], input.offset, normal.array);
                            normal.stride = sources[input.id].stride;
                            break;
                        case 'COLOR':
                            buildGeometryData(primitive, sources[input.id], input.offset, color.array);
                            color.stride = sources[input.id].stride;
                            break;
                        case 'TEXCOORD':
                            buildGeometryData(primitive, sources[input.id], input.offset, uv.array);
                            uv.stride = sources[input.id].stride;
                            break;
                        case 'TEXCOORD1':
                            buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);
                            uv2.stride = sources[input.id].stride;
                            break;
                        }
                    }
                }
                if (position.array.length > 0)
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));
                if (normal.array.length > 0)
                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));
                if (color.array.length > 0)
                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));
                if (uv.array.length > 0)
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));
                if (uv2.array.length > 0)
                    geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));
                if (skinIndex.array.length > 0)
                    geometry.setAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));
                if (skinWeight.array.length > 0)
                    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));
                build.data = geometry;
                build.type = primitives[0].type;
                build.materialKeys = materialKeys;
                return build;
            }
            function buildGeometryData(primitive, source, offset, array) {
                var indices = primitive.p;
                var stride = primitive.stride;
                var vcount = primitive.vcount;
                function pushVector(i) {
                    var index = indices[i + offset] * sourceStride;
                    var length = index + sourceStride;
                    for (; index < length; index++) {
                        array.push(sourceArray[index]);
                    }
                }
                var sourceArray = source.array;
                var sourceStride = source.stride;
                if (primitive.vcount !== undefined) {
                    var index = 0;
                    for (var i = 0, l = vcount.length; i < l; i++) {
                        var count = vcount[i];
                        if (count === 4) {
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
                            var d = index + stride * 3;
                            pushVector(a);
                            pushVector(b);
                            pushVector(d);
                            pushVector(b);
                            pushVector(c);
                            pushVector(d);
                        } else if (count === 3) {
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
                            pushVector(a);
                            pushVector(b);
                            pushVector(c);
                        } else if (count > 4) {
                            for (var k = 1, kl = count - 2; k <= kl; k++) {
                                var a = index + stride * 0;
                                var b = index + stride * k;
                                var c = index + stride * (k + 1);
                                pushVector(a);
                                pushVector(b);
                                pushVector(c);
                            }
                        }
                        index += stride * count;
                    }
                } else {
                    for (var i = 0, l = indices.length; i < l; i += stride) {
                        pushVector(i);
                    }
                }
            }
            function getGeometry(id) {
                return getBuild(library.geometries[id], buildGeometry);
            }
            function parseKinematicsModel(xml) {
                var data = {
                    name: xml.getAttribute('name') || '',
                    joints: {},
                    links: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique_common':
                        parseKinematicsTechniqueCommon(child, data);
                        break;
                    }
                }
                library.kinematicsModels[xml.getAttribute('id')] = data;
            }
            function buildKinematicsModel(data) {
                if (data.build !== undefined)
                    return data.build;
                return data;
            }
            function getKinematicsModel(id) {
                return getBuild(library.kinematicsModels[id], buildKinematicsModel);
            }
            function parseKinematicsTechniqueCommon(xml, data) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'joint':
                        data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);
                        break;
                    case 'link':
                        data.links.push(parseKinematicsLink(child));
                        break;
                    }
                }
            }
            function parseKinematicsJoint(xml) {
                var data;
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'prismatic':
                    case 'revolute':
                        data = parseKinematicsJointParameter(child);
                        break;
                    }
                }
                return data;
            }
            function parseKinematicsJointParameter(xml, data) {
                var data = {
                    sid: xml.getAttribute('sid'),
                    name: xml.getAttribute('name') || '',
                    axis: new THREE.Vector3(),
                    limits: {
                        min: 0,
                        max: 0
                    },
                    type: xml.nodeName,
                    static: false,
                    zeroPosition: 0,
                    middlePosition: 0
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'axis':
                        var array = parseFloats(child.textContent);
                        data.axis.fromArray(array);
                        break;
                    case 'limits':
                        var max = child.getElementsByTagName('max')[0];
                        var min = child.getElementsByTagName('min')[0];
                        data.limits.max = parseFloat(max.textContent);
                        data.limits.min = parseFloat(min.textContent);
                        break;
                    }
                }
                if (data.limits.min >= data.limits.max) {
                    data.static = true;
                }
                data.middlePosition = (data.limits.min + data.limits.max) / 2;
                return data;
            }
            function parseKinematicsLink(xml) {
                var data = {
                    sid: xml.getAttribute('sid'),
                    name: xml.getAttribute('name') || '',
                    attachments: [],
                    transforms: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'attachment_full':
                        data.attachments.push(parseKinematicsAttachment(child));
                        break;
                    case 'matrix':
                    case 'translate':
                    case 'rotate':
                        data.transforms.push(parseKinematicsTransform(child));
                        break;
                    }
                }
                return data;
            }
            function parseKinematicsAttachment(xml) {
                var data = {
                    joint: xml.getAttribute('joint').split('/').pop(),
                    transforms: [],
                    links: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'link':
                        data.links.push(parseKinematicsLink(child));
                        break;
                    case 'matrix':
                    case 'translate':
                    case 'rotate':
                        data.transforms.push(parseKinematicsTransform(child));
                        break;
                    }
                }
                return data;
            }
            function parseKinematicsTransform(xml) {
                var data = { type: xml.nodeName };
                var array = parseFloats(xml.textContent);
                switch (data.type) {
                case 'matrix':
                    data.obj = new THREE.Matrix4();
                    data.obj.fromArray(array).transpose();
                    break;
                case 'translate':
                    data.obj = new THREE.Vector3();
                    data.obj.fromArray(array);
                    break;
                case 'rotate':
                    data.obj = new THREE.Vector3();
                    data.obj.fromArray(array);
                    data.angle = THREE.MathUtils.degToRad(array[3]);
                    break;
                }
                return data;
            }
            function parsePhysicsModel(xml) {
                var data = {
                    name: xml.getAttribute('name') || '',
                    rigidBodies: {}
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'rigid_body':
                        data.rigidBodies[child.getAttribute('name')] = {};
                        parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);
                        break;
                    }
                }
                library.physicsModels[xml.getAttribute('id')] = data;
            }
            function parsePhysicsRigidBody(xml, data) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique_common':
                        parsePhysicsTechniqueCommon(child, data);
                        break;
                    }
                }
            }
            function parsePhysicsTechniqueCommon(xml, data) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'inertia':
                        data.inertia = parseFloats(child.textContent);
                        break;
                    case 'mass':
                        data.mass = parseFloats(child.textContent)[0];
                        break;
                    }
                }
            }
            function parseKinematicsScene(xml) {
                var data = { bindJointAxis: [] };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'bind_joint_axis':
                        data.bindJointAxis.push(parseKinematicsBindJointAxis(child));
                        break;
                    }
                }
                library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;
            }
            function parseKinematicsBindJointAxis(xml) {
                var data = { target: xml.getAttribute('target').split('/').pop() };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'axis':
                        var param = child.getElementsByTagName('param')[0];
                        data.axis = param.textContent;
                        var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];
                        data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);
                        break;
                    }
                }
                return data;
            }
            function buildKinematicsScene(data) {
                if (data.build !== undefined)
                    return data.build;
                return data;
            }
            function getKinematicsScene(id) {
                return getBuild(library.kinematicsScenes[id], buildKinematicsScene);
            }
            function setupKinematics() {
                var kinematicsModelId = Object.keys(library.kinematicsModels)[0];
                var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];
                var visualSceneId = Object.keys(library.visualScenes)[0];
                if (kinematicsModelId === undefined || kinematicsSceneId === undefined)
                    return;
                var kinematicsModel = getKinematicsModel(kinematicsModelId);
                var kinematicsScene = getKinematicsScene(kinematicsSceneId);
                var visualScene = getVisualScene(visualSceneId);
                var bindJointAxis = kinematicsScene.bindJointAxis;
                var jointMap = {};
                for (var i = 0, l = bindJointAxis.length; i < l; i++) {
                    var axis = bindJointAxis[i];
                    var targetElement = collada.querySelector('[sid="' + axis.target + '"]');
                    if (targetElement) {
                        var parentVisualElement = targetElement.parentElement;
                        connect(axis.jointIndex, parentVisualElement);
                    }
                }
                function connect(jointIndex, visualElement) {
                    var visualElementName = visualElement.getAttribute('name');
                    var joint = kinematicsModel.joints[jointIndex];
                    visualScene.traverse(function (object) {
                        if (object.name === visualElementName) {
                            jointMap[jointIndex] = {
                                object: object,
                                transforms: buildTransformList(visualElement),
                                joint: joint,
                                position: joint.zeroPosition
                            };
                        }
                    });
                }
                var m0 = new THREE.Matrix4();
                kinematics = {
                    joints: kinematicsModel && kinematicsModel.joints,
                    getJointValue: function (jointIndex) {
                        var jointData = jointMap[jointIndex];
                        if (jointData) {
                            return jointData.position;
                        } else {
                            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + " doesn't exist.");
                        }
                    },
                    setJointValue: function (jointIndex, value) {
                        var jointData = jointMap[jointIndex];
                        if (jointData) {
                            var joint = jointData.joint;
                            if (value > joint.limits.max || value < joint.limits.min) {
                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');
                            } else if (joint.static) {
                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');
                            } else {
                                var object = jointData.object;
                                var axis = joint.axis;
                                var transforms = jointData.transforms;
                                matrix.identity();
                                for (var i = 0; i < transforms.length; i++) {
                                    var transform = transforms[i];
                                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {
                                        switch (joint.type) {
                                        case 'revolute':
                                            matrix.multiply(m0.makeRotationAxis(axis, THREE.MathUtils.degToRad(value)));
                                            break;
                                        case 'prismatic':
                                            matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));
                                            break;
                                        default:
                                            console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);
                                            break;
                                        }
                                    } else {
                                        switch (transform.type) {
                                        case 'matrix':
                                            matrix.multiply(transform.obj);
                                            break;
                                        case 'translate':
                                            matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));
                                            break;
                                        case 'scale':
                                            matrix.scale(transform.obj);
                                            break;
                                        case 'rotate':
                                            matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));
                                            break;
                                        }
                                    }
                                }
                                object.matrix.copy(matrix);
                                object.matrix.decompose(object.position, object.quaternion, object.scale);
                                jointMap[jointIndex].position = value;
                            }
                        } else {
                            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');
                        }
                    }
                };
            }
            function buildTransformList(node) {
                var transforms = [];
                var xml = collada.querySelector('[id="' + node.id + '"]');
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'matrix':
                        var array = parseFloats(child.textContent);
                        var matrix = new THREE.Matrix4().fromArray(array).transpose();
                        transforms.push({
                            sid: child.getAttribute('sid'),
                            type: child.nodeName,
                            obj: matrix
                        });
                        break;
                    case 'translate':
                    case 'scale':
                        var array = parseFloats(child.textContent);
                        var vector = new THREE.Vector3().fromArray(array);
                        transforms.push({
                            sid: child.getAttribute('sid'),
                            type: child.nodeName,
                            obj: vector
                        });
                        break;
                    case 'rotate':
                        var array = parseFloats(child.textContent);
                        var vector = new THREE.Vector3().fromArray(array);
                        var angle = THREE.MathUtils.degToRad(array[3]);
                        transforms.push({
                            sid: child.getAttribute('sid'),
                            type: child.nodeName,
                            obj: vector,
                            angle: angle
                        });
                        break;
                    }
                }
                return transforms;
            }
            function prepareNodes(xml) {
                var elements = xml.getElementsByTagName('node');
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    if (element.hasAttribute('id') === false) {
                        element.setAttribute('id', generateId());
                    }
                }
            }
            var matrix = new THREE.Matrix4();
            var vector = new THREE.Vector3();
            function parseNode(xml) {
                var data = {
                    name: xml.getAttribute('name') || '',
                    type: xml.getAttribute('type'),
                    id: xml.getAttribute('id'),
                    sid: xml.getAttribute('sid'),
                    matrix: new THREE.Matrix4(),
                    nodes: [],
                    instanceCameras: [],
                    instanceControllers: [],
                    instanceLights: [],
                    instanceGeometries: [],
                    instanceNodes: [],
                    transforms: {}
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'node':
                        data.nodes.push(child.getAttribute('id'));
                        parseNode(child);
                        break;
                    case 'instance_camera':
                        data.instanceCameras.push(parseId(child.getAttribute('url')));
                        break;
                    case 'instance_controller':
                        data.instanceControllers.push(parseNodeInstance(child));
                        break;
                    case 'instance_light':
                        data.instanceLights.push(parseId(child.getAttribute('url')));
                        break;
                    case 'instance_geometry':
                        data.instanceGeometries.push(parseNodeInstance(child));
                        break;
                    case 'instance_node':
                        data.instanceNodes.push(parseId(child.getAttribute('url')));
                        break;
                    case 'matrix':
                        var array = parseFloats(child.textContent);
                        data.matrix.multiply(matrix.fromArray(array).transpose());
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'translate':
                        var array = parseFloats(child.textContent);
                        vector.fromArray(array);
                        data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'rotate':
                        var array = parseFloats(child.textContent);
                        var angle = THREE.MathUtils.degToRad(array[3]);
                        data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'scale':
                        var array = parseFloats(child.textContent);
                        data.matrix.scale(vector.fromArray(array));
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'extra':
                        break;
                    default:
                        console.log(child);
                    }
                }
                if (hasNode(data.id)) {
                    console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);
                } else {
                    library.nodes[data.id] = data;
                }
                return data;
            }
            function parseNodeInstance(xml) {
                var data = {
                    id: parseId(xml.getAttribute('url')),
                    materials: {},
                    skeletons: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'bind_material':
                        var instances = child.getElementsByTagName('instance_material');
                        for (var j = 0; j < instances.length; j++) {
                            var instance = instances[j];
                            var symbol = instance.getAttribute('symbol');
                            var target = instance.getAttribute('target');
                            data.materials[symbol] = parseId(target);
                        }
                        break;
                    case 'skeleton':
                        data.skeletons.push(parseId(child.textContent));
                        break;
                    default:
                        break;
                    }
                }
                return data;
            }
            function buildSkeleton(skeletons, joints) {
                var boneData = [];
                var sortedBoneData = [];
                var i, j, data;
                for (i = 0; i < skeletons.length; i++) {
                    var skeleton = skeletons[i];
                    var root;
                    if (hasNode(skeleton)) {
                        root = getNode(skeleton);
                        buildBoneHierarchy(root, joints, boneData);
                    } else if (hasVisualScene(skeleton)) {
                        var visualScene = library.visualScenes[skeleton];
                        var children = visualScene.children;
                        for (var j = 0; j < children.length; j++) {
                            var child = children[j];
                            if (child.type === 'JOINT') {
                                var root = getNode(child.id);
                                buildBoneHierarchy(root, joints, boneData);
                            }
                        }
                    } else {
                        console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);
                    }
                }
                for (i = 0; i < joints.length; i++) {
                    for (j = 0; j < boneData.length; j++) {
                        data = boneData[j];
                        if (data.bone.name === joints[i].name) {
                            sortedBoneData[i] = data;
                            data.processed = true;
                            break;
                        }
                    }
                }
                for (i = 0; i < boneData.length; i++) {
                    data = boneData[i];
                    if (data.processed === false) {
                        sortedBoneData.push(data);
                        data.processed = true;
                    }
                }
                var bones = [];
                var boneInverses = [];
                for (i = 0; i < sortedBoneData.length; i++) {
                    data = sortedBoneData[i];
                    bones.push(data.bone);
                    boneInverses.push(data.boneInverse);
                }
                return new THREE.Skeleton(bones, boneInverses);
            }
            function buildBoneHierarchy(root, joints, boneData) {
                root.traverse(function (object) {
                    if (object.isBone === true) {
                        var boneInverse;
                        for (var i = 0; i < joints.length; i++) {
                            var joint = joints[i];
                            if (joint.name === object.name) {
                                boneInverse = joint.boneInverse;
                                break;
                            }
                        }
                        if (boneInverse === undefined) {
                            boneInverse = new THREE.Matrix4();
                        }
                        boneData.push({
                            bone: object,
                            boneInverse: boneInverse,
                            processed: false
                        });
                    }
                });
            }
            function buildNode(data) {
                var objects = [];
                var matrix = data.matrix;
                var nodes = data.nodes;
                var type = data.type;
                var instanceCameras = data.instanceCameras;
                var instanceControllers = data.instanceControllers;
                var instanceLights = data.instanceLights;
                var instanceGeometries = data.instanceGeometries;
                var instanceNodes = data.instanceNodes;
                for (var i = 0, l = nodes.length; i < l; i++) {
                    objects.push(getNode(nodes[i]));
                }
                for (var i = 0, l = instanceCameras.length; i < l; i++) {
                    var instanceCamera = getCamera(instanceCameras[i]);
                    if (instanceCamera !== null) {
                        objects.push(instanceCamera.clone());
                    }
                }
                for (var i = 0, l = instanceControllers.length; i < l; i++) {
                    var instance = instanceControllers[i];
                    var controller = getController(instance.id);
                    var geometries = getGeometry(controller.id);
                    var newObjects = buildObjects(geometries, instance.materials);
                    var skeletons = instance.skeletons;
                    var joints = controller.skin.joints;
                    var skeleton = buildSkeleton(skeletons, joints);
                    for (var j = 0, jl = newObjects.length; j < jl; j++) {
                        var object = newObjects[j];
                        if (object.isSkinnedMesh) {
                            object.bind(skeleton, controller.skin.bindMatrix);
                            object.normalizeSkinWeights();
                        }
                        objects.push(object);
                    }
                }
                for (var i = 0, l = instanceLights.length; i < l; i++) {
                    var instanceLight = getLight(instanceLights[i]);
                    if (instanceLight !== null) {
                        objects.push(instanceLight.clone());
                    }
                }
                for (var i = 0, l = instanceGeometries.length; i < l; i++) {
                    var instance = instanceGeometries[i];
                    var geometries = getGeometry(instance.id);
                    var newObjects = buildObjects(geometries, instance.materials);
                    for (var j = 0, jl = newObjects.length; j < jl; j++) {
                        objects.push(newObjects[j]);
                    }
                }
                for (var i = 0, l = instanceNodes.length; i < l; i++) {
                    objects.push(getNode(instanceNodes[i]).clone());
                }
                var object;
                if (nodes.length === 0 && objects.length === 1) {
                    object = objects[0];
                } else {
                    object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();
                    for (var i = 0; i < objects.length; i++) {
                        object.add(objects[i]);
                    }
                }
                if (object.name === '') {
                    object.name = type === 'JOINT' ? data.sid : data.name;
                }
                object.matrix.copy(matrix);
                object.matrix.decompose(object.position, object.quaternion, object.scale);
                return object;
            }
            var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });
            function resolveMaterialBinding(keys, instanceMaterials) {
                var materials = [];
                for (var i = 0, l = keys.length; i < l; i++) {
                    var id = instanceMaterials[keys[i]];
                    if (id === undefined) {
                        console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);
                        materials.push(fallbackMaterial);
                    } else {
                        materials.push(getMaterial(id));
                    }
                }
                return materials;
            }
            function buildObjects(geometries, instanceMaterials) {
                var objects = [];
                for (var type in geometries) {
                    var geometry = geometries[type];
                    var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);
                    if (materials.length === 0) {
                        if (type === 'lines' || type === 'linestrips') {
                            materials.push(new THREE.LineBasicMaterial());
                        } else {
                            materials.push(new THREE.MeshPhongMaterial());
                        }
                    }
                    var skinning = geometry.data.attributes.skinIndex !== undefined;
                    if (skinning) {
                        for (var i = 0, l = materials.length; i < l; i++) {
                            materials[i].skinning = true;
                        }
                    }
                    var material = materials.length === 1 ? materials[0] : materials;
                    var object;
                    switch (type) {
                    case 'lines':
                        object = new THREE.LineSegments(geometry.data, material);
                        break;
                    case 'linestrips':
                        object = new THREE.Line(geometry.data, material);
                        break;
                    case 'triangles':
                    case 'polylist':
                        if (skinning) {
                            object = new THREE.SkinnedMesh(geometry.data, material);
                        } else {
                            object = new THREE.Mesh(geometry.data, material);
                        }
                        break;
                    }
                    objects.push(object);
                }
                return objects;
            }
            function hasNode(id) {
                return library.nodes[id] !== undefined;
            }
            function getNode(id) {
                return getBuild(library.nodes[id], buildNode);
            }
            function parseVisualScene(xml) {
                var data = {
                    name: xml.getAttribute('name'),
                    children: []
                };
                prepareNodes(xml);
                var elements = getElementsByTagName(xml, 'node');
                for (var i = 0; i < elements.length; i++) {
                    data.children.push(parseNode(elements[i]));
                }
                library.visualScenes[xml.getAttribute('id')] = data;
            }
            function buildVisualScene(data) {
                var group = new THREE.Group();
                group.name = data.name;
                var children = data.children;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    group.add(getNode(child.id));
                }
                return group;
            }
            function hasVisualScene(id) {
                return library.visualScenes[id] !== undefined;
            }
            function getVisualScene(id) {
                return getBuild(library.visualScenes[id], buildVisualScene);
            }
            function parseScene(xml) {
                var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];
                return getVisualScene(parseId(instance.getAttribute('url')));
            }
            function setupAnimations() {
                var clips = library.clips;
                if (isEmpty(clips) === true) {
                    if (isEmpty(library.animations) === false) {
                        var tracks = [];
                        for (var id in library.animations) {
                            var animationTracks = getAnimation(id);
                            for (var i = 0, l = animationTracks.length; i < l; i++) {
                                tracks.push(animationTracks[i]);
                            }
                        }
                        animations.push(new THREE.AnimationClip('default', -1, tracks));
                    }
                } else {
                    for (var id in clips) {
                        animations.push(getAnimationClip(id));
                    }
                }
            }
            function parserErrorToText(parserError) {
                var result = '';
                var stack = [parserError];
                while (stack.length) {
                    var node = stack.shift();
                    if (node.nodeType === Node.TEXT_NODE) {
                        result += node.textContent;
                    } else {
                        result += '\n';
                        stack.push.apply(stack, node.childNodes);
                    }
                }
                return result.trim();
            }
            if (text.length === 0) {
                return { scene: new THREE.Scene() };
            }
            var xml = new DOMParser().parseFromString(text, 'application/xml');
            var collada = getElementsByTagName(xml, 'COLLADA')[0];
            var parserError = xml.getElementsByTagName('parsererror')[0];
            if (parserError !== undefined) {
                var errorElement = getElementsByTagName(parserError, 'div')[0];
                var errorText;
                if (errorElement) {
                    errorText = errorElement.textContent;
                } else {
                    errorText = parserErrorToText(parserError);
                }
                console.error('THREE.ColladaLoader: Failed to parse collada file.\n', errorText);
                return null;
            }
            var version = collada.getAttribute('version');
            console.log('THREE.ColladaLoader: File version', version);
            var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);
            var textureLoader = new THREE.TextureLoader(this.manager);
            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
            var tgaLoader;
            if (TGALoader) {
                tgaLoader = new TGALoader(this.manager);
                tgaLoader.setPath(this.resourcePath || path);
            }
            var animations = [];
            var kinematics = {};
            var count = 0;
            var library = {
                animations: {},
                clips: {},
                controllers: {},
                images: {},
                effects: {},
                materials: {},
                cameras: {},
                lights: {},
                geometries: {},
                nodes: {},
                visualScenes: {},
                kinematicsModels: {},
                physicsModels: {},
                kinematicsScenes: {}
            };
            parseLibrary(collada, 'library_animations', 'animation', parseAnimation);
            parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);
            parseLibrary(collada, 'library_controllers', 'controller', parseController);
            parseLibrary(collada, 'library_images', 'image', parseImage);
            parseLibrary(collada, 'library_effects', 'effect', parseEffect);
            parseLibrary(collada, 'library_materials', 'material', parseMaterial);
            parseLibrary(collada, 'library_cameras', 'camera', parseCamera);
            parseLibrary(collada, 'library_lights', 'light', parseLight);
            parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);
            parseLibrary(collada, 'library_nodes', 'node', parseNode);
            parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);
            parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);
            parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);
            parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);
            buildLibrary(library.animations, buildAnimation);
            buildLibrary(library.clips, buildAnimationClip);
            buildLibrary(library.controllers, buildController);
            buildLibrary(library.images, buildImage);
            buildLibrary(library.effects, buildEffect);
            buildLibrary(library.materials, buildMaterial);
            buildLibrary(library.cameras, buildCamera);
            buildLibrary(library.lights, buildLight);
            buildLibrary(library.geometries, buildGeometry);
            buildLibrary(library.visualScenes, buildVisualScene);
            setupAnimations();
            setupKinematics();
            var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);
            if (asset.upAxis === 'Z_UP') {
                scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));
            }
            scene.scale.multiplyScalar(asset.unit);
            return {
                animations: animations,
                kinematics: kinematics,
                library: library,
                scene: scene
            };
        }
    });
    return ColladaLoader;
});
define('skylark-threejs-ex/loaders/DRACOLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var DRACOLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.decoderPath = '';
        this.decoderConfig = {};
        this.decoderBinary = null;
        this.decoderPending = null;
        this.workerLimit = 4;
        this.workerPool = [];
        this.workerNextTaskID = 1;
        this.workerSourceURL = '';
        this.defaultAttributeIDs = {
            position: 'POSITION',
            normal: 'NORMAL',
            color: 'COLOR',
            uv: 'TEX_COORD'
        };
        this.defaultAttributeTypes = {
            position: 'Float32Array',
            normal: 'Float32Array',
            color: 'Float32Array',
            uv: 'Float32Array'
        };
    };
    DRACOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: DRACOLoader,
        setDecoderPath: function (path) {
            this.decoderPath = path;
            return this;
        },
        setDecoderConfig: function (config) {
            this.decoderConfig = config;
            return this;
        },
        setWorkerLimit: function (workerLimit) {
            this.workerLimit = workerLimit;
            return this;
        },
        setVerbosity: function () {
            console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');
        },
        setDrawMode: function () {
            console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');
        },
        setSkipDequantization: function () {
            console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');
        },
        load: function (url, onLoad, onProgress, onError) {
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            if (this.crossOrigin === 'use-credentials') {
                loader.setWithCredentials(true);
            }
            loader.load(url, buffer => {
                var taskConfig = {
                    attributeIDs: this.defaultAttributeIDs,
                    attributeTypes: this.defaultAttributeTypes,
                    useUniqueIDs: false
                };
                this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);
            }, onProgress, onError);
        },
        decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {
            var taskConfig = {
                attributeIDs: attributeIDs || this.defaultAttributeIDs,
                attributeTypes: attributeTypes || this.defaultAttributeTypes,
                useUniqueIDs: !!attributeIDs
            };
            this.decodeGeometry(buffer, taskConfig).then(callback);
        },
        decodeGeometry: function (buffer, taskConfig) {
            for (var attribute in taskConfig.attributeTypes) {
                var type = taskConfig.attributeTypes[attribute];
                if (type.BYTES_PER_ELEMENT !== undefined) {
                    taskConfig.attributeTypes[attribute] = type.name;
                }
            }
            var taskKey = JSON.stringify(taskConfig);
            if (DRACOLoader.taskCache.has(buffer)) {
                var cachedTask = DRACOLoader.taskCache.get(buffer);
                if (cachedTask.key === taskKey) {
                    return cachedTask.promise;
                } else if (buffer.byteLength === 0) {
                    throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');
                }
            }
            var worker;
            var taskID = this.workerNextTaskID++;
            var taskCost = buffer.byteLength;
            var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {
                worker = _worker;
                return new Promise((resolve, reject) => {
                    worker._callbacks[taskID] = {
                        resolve,
                        reject
                    };
                    worker.postMessage({
                        type: 'decode',
                        id: taskID,
                        taskConfig,
                        buffer
                    }, [buffer]);
                });
            }).then(message => this._createGeometry(message.geometry));
            geometryPending.finally(() => {
                if (worker && taskID) {
                    this._releaseTask(worker, taskID);
                }
            });
            DRACOLoader.taskCache.set(buffer, {
                key: taskKey,
                promise: geometryPending
            });
            return geometryPending;
        },
        _createGeometry: function (geometryData) {
            var geometry = new THREE.BufferGeometry();
            if (geometryData.index) {
                geometry.setIndex(new THREE.BufferAttribute(geometryData.index.array, 1));
            }
            for (var i = 0; i < geometryData.attributes.length; i++) {
                var attribute = geometryData.attributes[i];
                var name = attribute.name;
                var array = attribute.array;
                var itemSize = attribute.itemSize;
                geometry.setAttribute(name, new THREE.BufferAttribute(array, itemSize));
            }
            return geometry;
        },
        _loadLibrary: function (url, responseType) {
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.decoderPath);
            loader.setResponseType(responseType);
            return new Promise((resolve, reject) => {
                loader.load(url, resolve, undefined, reject);
            });
        },
        preload: function () {
            this._initDecoder();
            return this;
        },
        _initDecoder: function () {
            if (this.decoderPending)
                return this.decoderPending;
            var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';
            var librariesPending = [];
            if (useJS) {
                librariesPending.push(this._loadLibrary('draco_decoder', 'text'));
            } else {
                librariesPending.push(this._loadLibrary('draco_wasm_wrapper', 'text'));
                librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));
            }
            this.decoderPending = Promise.all(librariesPending).then(libraries => {
                var jsContent = libraries[0];
                if (!useJS) {
                    this.decoderConfig.wasmBinary = libraries[1];
                }
                var fn = DRACOLoader.DRACOWorker.toString();
                var body = [
                    '/* draco decoder */',
                    jsContent,
                    '',
                    '/* worker */',
                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))
                ].join('\n');
                this.workerSourceURL = URL.createObjectURL(new Blob([body]));
            });
            return this.decoderPending;
        },
        _getWorker: function (taskID, taskCost) {
            return this._initDecoder().then(() => {
                if (this.workerPool.length < this.workerLimit) {
                    var worker = new Worker(this.workerSourceURL);
                    worker._callbacks = {};
                    worker._taskCosts = {};
                    worker._taskLoad = 0;
                    worker.postMessage({
                        type: 'init',
                        decoderConfig: this.decoderConfig
                    });
                    worker.onmessage = function (e) {
                        var message = e.data;
                        switch (message.type) {
                        case 'decode':
                            worker._callbacks[message.id].resolve(message);
                            break;
                        case 'error':
                            worker._callbacks[message.id].reject(message);
                            break;
                        default:
                            console.error('THREE.DRACOLoader: Unexpected message, "' + message.type + '"');
                        }
                    };
                    this.workerPool.push(worker);
                } else {
                    this.workerPool.sort(function (a, b) {
                        return a._taskLoad > b._taskLoad ? -1 : 1;
                    });
                }
                var worker = this.workerPool[this.workerPool.length - 1];
                worker._taskCosts[taskID] = taskCost;
                worker._taskLoad += taskCost;
                return worker;
            });
        },
        _releaseTask: function (worker, taskID) {
            worker._taskLoad -= worker._taskCosts[taskID];
            delete worker._callbacks[taskID];
            delete worker._taskCosts[taskID];
        },
        debug: function () {
            console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));
        },
        dispose: function () {
            for (var i = 0; i < this.workerPool.length; ++i) {
                this.workerPool[i].terminate();
            }
            this.workerPool.length = 0;
            return this;
        }
    });
    DRACOLoader.DRACOWorker = function () {
        var decoderConfig;
        var decoderPending;
        onmessage = function (e) {
            var message = e.data;
            switch (message.type) {
            case 'init':
                decoderConfig = message.decoderConfig;
                decoderPending = new Promise(function (resolve) {
                    decoderConfig.onModuleLoaded = function (draco) {
                        resolve({ draco: draco });
                    };
                    DracoDecoderModule(decoderConfig);
                });
                break;
            case 'decode':
                var buffer = message.buffer;
                var taskConfig = message.taskConfig;
                decoderPending.then(module => {
                    var draco = module.draco;
                    var decoder = new draco.Decoder();
                    var decoderBuffer = new draco.DecoderBuffer();
                    decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);
                    try {
                        var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);
                        var buffers = geometry.attributes.map(attr => attr.array.buffer);
                        if (geometry.index)
                            buffers.push(geometry.index.array.buffer);
                        self.postMessage({
                            type: 'decode',
                            id: message.id,
                            geometry
                        }, buffers);
                    } catch (error) {
                        console.error(error);
                        self.postMessage({
                            type: 'error',
                            id: message.id,
                            error: error.message
                        });
                    } finally {
                        draco.destroy(decoderBuffer);
                        draco.destroy(decoder);
                    }
                });
                break;
            }
        };
        function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {
            var attributeIDs = taskConfig.attributeIDs;
            var attributeTypes = taskConfig.attributeTypes;
            var dracoGeometry;
            var decodingStatus;
            var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);
            if (geometryType === draco.TRIANGULAR_MESH) {
                dracoGeometry = new draco.Mesh();
                decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);
            } else if (geometryType === draco.POINT_CLOUD) {
                dracoGeometry = new draco.PointCloud();
                decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);
            } else {
                throw new Error('THREE.DRACOLoader: Unexpected geometry type.');
            }
            if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {
                throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());
            }
            var geometry = {
                index: null,
                attributes: []
            };
            for (var attributeName in attributeIDs) {
                var attributeType = self[attributeTypes[attributeName]];
                var attribute;
                var attributeID;
                if (taskConfig.useUniqueIDs) {
                    attributeID = attributeIDs[attributeName];
                    attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);
                } else {
                    attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);
                    if (attributeID === -1)
                        continue;
                    attribute = decoder.GetAttribute(dracoGeometry, attributeID);
                }
                geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));
            }
            if (geometryType === draco.TRIANGULAR_MESH) {
                var numFaces = dracoGeometry.num_faces();
                var numIndices = numFaces * 3;
                var index = new Uint32Array(numIndices);
                var indexArray = new draco.DracoInt32Array();
                for (var i = 0; i < numFaces; ++i) {
                    decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);
                    for (var j = 0; j < 3; ++j) {
                        index[i * 3 + j] = indexArray.GetValue(j);
                    }
                }
                geometry.index = {
                    array: index,
                    itemSize: 1
                };
                draco.destroy(indexArray);
            }
            draco.destroy(dracoGeometry);
            return geometry;
        }
        function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {
            var numComponents = attribute.num_components();
            var numPoints = dracoGeometry.num_points();
            var numValues = numPoints * numComponents;
            var dracoArray;
            var array;
            switch (attributeType) {
            case Float32Array:
                dracoArray = new draco.DracoFloat32Array();
                decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Float32Array(numValues);
                break;
            case Int8Array:
                dracoArray = new draco.DracoInt8Array();
                decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Int8Array(numValues);
                break;
            case Int16Array:
                dracoArray = new draco.DracoInt16Array();
                decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Int16Array(numValues);
                break;
            case Int32Array:
                dracoArray = new draco.DracoInt32Array();
                decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Int32Array(numValues);
                break;
            case Uint8Array:
                dracoArray = new draco.DracoUInt8Array();
                decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Uint8Array(numValues);
                break;
            case Uint16Array:
                dracoArray = new draco.DracoUInt16Array();
                decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Uint16Array(numValues);
                break;
            case Uint32Array:
                dracoArray = new draco.DracoUInt32Array();
                decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Uint32Array(numValues);
                break;
            default:
                throw new Error('THREE.DRACOLoader: Unexpected attribute type.');
            }
            for (var i = 0; i < numValues; i++) {
                array[i] = dracoArray.GetValue(i);
            }
            draco.destroy(dracoArray);
            return {
                name: attributeName,
                array: array,
                itemSize: numComponents
            };
        }
    };
    DRACOLoader.taskCache = new WeakMap();
    DRACOLoader.setDecoderPath = function () {
        console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');
    };
    DRACOLoader.setDecoderConfig = function () {
        console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');
    };
    DRACOLoader.releaseDecoderModule = function () {
        console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');
    };
    DRACOLoader.getDecoderModule = function () {
        console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');
    };
    return DRACOLoader;
});
define('skylark-threejs-ex/loaders/FBXLoader',[
    "skylark-threejs",
    'skylark-zlib/Inflate',
    '../curves/NURBSCurve'
], function (
    THREE, 
    Inflate, 
    NURBSCurve
) {
    'use strict';
    var FBXLoader = function () {
        var fbxTree;
        var connections;
        var sceneGraph;
        function FBXLoader(manager) {
            THREE.Loader.call(this, manager);
        }
        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: FBXLoader,
            load: function (url, onLoad, onProgress, onError) {
                var self = this;
                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;
                var loader = new THREE.FileLoader(this.manager);
                loader.setPath(self.path);
                loader.setResponseType('arraybuffer');
                loader.load(url, function (buffer) {
                    try {
                        onLoad(self.parse(buffer, path));
                    } catch (error) {
                        setTimeout(function () {
                            if (onError)
                                onError(error);
                            self.manager.itemError(url);
                        }, 0);
                    }
                }, onProgress, onError);
            },
            parse: function (FBXBuffer, path) {
                if (isFbxFormatBinary(FBXBuffer)) {
                    fbxTree = new BinaryParser().parse(FBXBuffer);
                } else {
                    var FBXText = convertArrayBufferToString(FBXBuffer);
                    if (!isFbxFormatASCII(FBXText)) {
                        throw new Error('THREE.FBXLoader: Unknown format.');
                    }
                    if (getFbxVersion(FBXText) < 7000) {
                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));
                    }
                    fbxTree = new TextParser().parse(FBXText);
                }
                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);
            }
        });
        function FBXTreeParser(textureLoader, manager) {
            this.textureLoader = textureLoader;
            this.manager = manager;
        }
        FBXTreeParser.prototype = {
            constructor: FBXTreeParser,
            parse: function () {
                connections = this.parseConnections();
                var images = this.parseImages();
                var textures = this.parseTextures(images);
                var materials = this.parseMaterials(textures);
                var deformers = this.parseDeformers();
                var geometryMap = new GeometryParser().parse(deformers);
                this.parseScene(deformers, geometryMap, materials);
                return sceneGraph;
            },
            parseConnections: function () {
                var connectionMap = new Map();
                if ('Connections' in fbxTree) {
                    var rawConnections = fbxTree.Connections.connections;
                    rawConnections.forEach(function (rawConnection) {
                        var fromID = rawConnection[0];
                        var toID = rawConnection[1];
                        var relationship = rawConnection[2];
                        if (!connectionMap.has(fromID)) {
                            connectionMap.set(fromID, {
                                parents: [],
                                children: []
                            });
                        }
                        var parentRelationship = {
                            ID: toID,
                            relationship: relationship
                        };
                        connectionMap.get(fromID).parents.push(parentRelationship);
                        if (!connectionMap.has(toID)) {
                            connectionMap.set(toID, {
                                parents: [],
                                children: []
                            });
                        }
                        var childRelationship = {
                            ID: fromID,
                            relationship: relationship
                        };
                        connectionMap.get(toID).children.push(childRelationship);
                    });
                }
                return connectionMap;
            },
            parseImages: function () {
                var images = {};
                var blobs = {};
                if ('Video' in fbxTree.Objects) {
                    var videoNodes = fbxTree.Objects.Video;
                    for (var nodeID in videoNodes) {
                        var videoNode = videoNodes[nodeID];
                        var id = parseInt(nodeID);
                        images[id] = videoNode.RelativeFilename || videoNode.Filename;
                        if ('Content' in videoNode) {
                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;
                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';
                            if (arrayBufferContent || base64Content) {
                                var image = this.parseImage(videoNodes[nodeID]);
                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;
                            }
                        }
                    }
                }
                for (var id in images) {
                    var filename = images[id];
                    if (blobs[filename] !== undefined)
                        images[id] = blobs[filename];
                    else
                        images[id] = images[id].split('\\').pop();
                }
                return images;
            },
            parseImage: function (videoNode) {
                var content = videoNode.Content;
                var fileName = videoNode.RelativeFilename || videoNode.Filename;
                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();
                var type;
                switch (extension) {
                case 'bmp':
                    type = 'image/bmp';
                    break;
                case 'jpg':
                case 'jpeg':
                    type = 'image/jpeg';
                    break;
                case 'png':
                    type = 'image/png';
                    break;
                case 'tif':
                    type = 'image/tiff';
                    break;
                case 'tga':
                    if (this.manager.getHandler('.tga') === null) {
                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);
                    }
                    type = 'image/tga';
                    break;
                default:
                    console.warn('FBXLoader: Image type "' + extension + '" is not supported.');
                    return;
                }
                if (typeof content === 'string') {
                    return 'data:' + type + ';base64,' + content;
                } else {
                    var array = new Uint8Array(content);
                    return window.URL.createObjectURL(new Blob([array], { type: type }));
                }
            },
            parseTextures: function (images) {
                var textureMap = new Map();
                if ('Texture' in fbxTree.Objects) {
                    var textureNodes = fbxTree.Objects.undefined;
                    for (var nodeID in textureNodes) {
                        var texture = this.parseTexture(textureNodes[nodeID], images);
                        textureMap.set(parseInt(nodeID), texture);
                    }
                }
                return textureMap;
            },
            parseTexture: function (textureNode, images) {
                var texture = this.loadTexture(textureNode, images);
                texture.ID = textureNode.id;
                texture.name = textureNode.attrName;
                var wrapModeU = textureNode.WrapModeU;
                var wrapModeV = textureNode.WrapModeV;
                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;
                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;
                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                if ('Scaling' in textureNode) {
                    var values = textureNode.Scaling.value;
                    texture.repeat.x = values[0];
                    texture.repeat.y = values[1];
                }
                return texture;
            },
            loadTexture: function (textureNode, images) {
                var fileName;
                var currentPath = this.textureLoader.path;
                var children = connections.get(textureNode.id).children;
                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {
                    fileName = images[children[0].ID];
                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {
                        this.textureLoader.setPath(undefined);
                    }
                }
                var texture;
                var extension = textureNode.FileName.slice(-3).toLowerCase();
                if (extension === 'tga') {
                    var loader = this.manager.getHandler('.tga');
                    if (loader === null) {
                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);
                        texture = new THREE.Texture();
                    } else {
                        texture = loader.load(fileName);
                    }
                } else if (extension === 'psd') {
                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);
                    texture = new THREE.Texture();
                } else {
                    texture = this.textureLoader.load(fileName);
                }
                this.textureLoader.setPath(currentPath);
                return texture;
            },
            parseMaterials: function (textureMap) {
                var materialMap = new Map();
                if ('Material' in fbxTree.Objects) {
                    var materialNodes = fbxTree.Objects.Material;
                    for (var nodeID in materialNodes) {
                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);
                        if (material !== null)
                            materialMap.set(parseInt(nodeID), material);
                    }
                }
                return materialMap;
            },
            parseMaterial: function (materialNode, textureMap) {
                var ID = materialNode.id;
                var name = materialNode.attrName;
                var type = materialNode.ShadingModel;
                if (typeof type === 'object') {
                    type = type.value;
                }
                if (!connections.has(ID))
                    return null;
                var parameters = this.parseParameters(materialNode, textureMap, ID);
                var material;
                switch (type.toLowerCase()) {
                case 'phong':
                    material = new THREE.MeshPhongMaterial();
                    break;
                case 'lambert':
                    material = new THREE.MeshLambertMaterial();
                    break;
                default:
                    console.warn('THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type);
                    material = new THREE.MeshPhongMaterial();
                    break;
                }
                material.setValues(parameters);
                material.name = name;
                return material;
            },
            parseParameters: function (materialNode, textureMap, ID) {
                var parameters = {};
                if (materialNode.BumpFactor) {
                    parameters.bumpScale = materialNode.BumpFactor.value;
                }
                if (materialNode.Diffuse) {
                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);
                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {
                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);
                }
                if (materialNode.DisplacementFactor) {
                    parameters.displacementScale = materialNode.DisplacementFactor.value;
                }
                if (materialNode.Emissive) {
                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);
                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {
                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);
                }
                if (materialNode.EmissiveFactor) {
                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);
                }
                if (materialNode.Opacity) {
                    parameters.opacity = parseFloat(materialNode.Opacity.value);
                }
                if (parameters.opacity < 1) {
                    parameters.transparent = true;
                }
                if (materialNode.ReflectionFactor) {
                    parameters.reflectivity = materialNode.ReflectionFactor.value;
                }
                if (materialNode.Shininess) {
                    parameters.shininess = materialNode.Shininess.value;
                }
                if (materialNode.Specular) {
                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);
                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {
                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);
                }
                var self = this;
                connections.get(ID).children.forEach(function (child) {
                    var type = child.relationship;
                    switch (type) {
                    case 'Bump':
                        parameters.bumpMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'Maya|TEX_ao_map':
                        parameters.aoMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'DiffuseColor':
                    case 'Maya|TEX_color_map':
                        parameters.map = self.getTexture(textureMap, child.ID);
                        parameters.map.encoding = THREE.sRGBEncoding;
                        break;
                    case 'DisplacementColor':
                        parameters.displacementMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'EmissiveColor':
                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);
                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;
                        break;
                    case 'NormalMap':
                    case 'Maya|TEX_normal_map':
                        parameters.normalMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'ReflectionColor':
                        parameters.envMap = self.getTexture(textureMap, child.ID);
                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;
                        parameters.envMap.encoding = THREE.sRGBEncoding;
                        break;
                    case 'SpecularColor':
                        parameters.specularMap = self.getTexture(textureMap, child.ID);
                        parameters.specularMap.encoding = THREE.sRGBEncoding;
                        break;
                    case 'TransparentColor':
                        parameters.alphaMap = self.getTexture(textureMap, child.ID);
                        parameters.transparent = true;
                        break;
                    case 'AmbientColor':
                    case 'ShininessExponent':
                    case 'SpecularFactor':
                    case 'VectorDisplacementColor':
                    default:
                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);
                        break;
                    }
                });
                return parameters;
            },
            getTexture: function (textureMap, id) {
                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {
                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');
                    id = connections.get(id).children[0].ID;
                }
                return textureMap.get(id);
            },
            parseDeformers: function () {
                var skeletons = {};
                var morphTargets = {};
                if ('Deformer' in fbxTree.Objects) {
                    var DeformerNodes = fbxTree.Objects.Deformer;
                    for (var nodeID in DeformerNodes) {
                        var deformerNode = DeformerNodes[nodeID];
                        var relationships = connections.get(parseInt(nodeID));
                        if (deformerNode.attrType === 'Skin') {
                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);
                            skeleton.ID = nodeID;
                            if (relationships.parents.length > 1)
                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');
                            skeleton.geometryID = relationships.parents[0].ID;
                            skeletons[nodeID] = skeleton;
                        } else if (deformerNode.attrType === 'BlendShape') {
                            var morphTarget = { id: nodeID };
                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);
                            morphTarget.id = nodeID;
                            if (relationships.parents.length > 1)
                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');
                            morphTargets[nodeID] = morphTarget;
                        }
                    }
                }
                return {
                    skeletons: skeletons,
                    morphTargets: morphTargets
                };
            },
            parseSkeleton: function (relationships, deformerNodes) {
                var rawBones = [];
                relationships.children.forEach(function (child) {
                    var boneNode = deformerNodes[child.ID];
                    if (boneNode.attrType !== 'Cluster')
                        return;
                    var rawBone = {
                        ID: child.ID,
                        indices: [],
                        weights: [],
                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)
                    };
                    if ('Indexes' in boneNode) {
                        rawBone.indices = boneNode.Indexes.a;
                        rawBone.weights = boneNode.Weights.a;
                    }
                    rawBones.push(rawBone);
                });
                return {
                    rawBones: rawBones,
                    bones: []
                };
            },
            parseMorphTargets: function (relationships, deformerNodes) {
                var rawMorphTargets = [];
                for (var i = 0; i < relationships.children.length; i++) {
                    var child = relationships.children[i];
                    var morphTargetNode = deformerNodes[child.ID];
                    var rawMorphTarget = {
                        name: morphTargetNode.attrName,
                        initialWeight: morphTargetNode.DeformPercent,
                        id: morphTargetNode.id,
                        fullWeights: morphTargetNode.FullWeights.a
                    };
                    if (morphTargetNode.attrType !== 'BlendShapeChannel')
                        return;
                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {
                        return child.relationship === undefined;
                    })[0].ID;
                    rawMorphTargets.push(rawMorphTarget);
                }
                return rawMorphTargets;
            },
            parseScene: function (deformers, geometryMap, materialMap) {
                sceneGraph = new THREE.Group();
                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);
                var modelNodes = fbxTree.Objects.Model;
                var self = this;
                modelMap.forEach(function (model) {
                    var modelNode = modelNodes[model.ID];
                    self.setLookAtProperties(model, modelNode);
                    var parentConnections = connections.get(model.ID).parents;
                    parentConnections.forEach(function (connection) {
                        var parent = modelMap.get(connection.ID);
                        if (parent !== undefined)
                            parent.add(model);
                    });
                    if (model.parent === null) {
                        sceneGraph.add(model);
                    }
                });
                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);
                this.createAmbientLight();
                this.setupMorphMaterials();
                sceneGraph.traverse(function (node) {
                    if (node.userData.transformData) {
                        if (node.parent)
                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;
                        var transform = generateTransform(node.userData.transformData);
                        node.applyMatrix4(transform);
                    }
                });
                var animations = new AnimationParser().parse();
                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {
                    sceneGraph.children[0].animations = animations;
                    sceneGraph = sceneGraph.children[0];
                }
                sceneGraph.animations = animations;
            },
            parseModels: function (skeletons, geometryMap, materialMap) {
                var modelMap = new Map();
                var modelNodes = fbxTree.Objects.Model;
                for (var nodeID in modelNodes) {
                    var id = parseInt(nodeID);
                    var node = modelNodes[nodeID];
                    var relationships = connections.get(id);
                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);
                    if (!model) {
                        switch (node.attrType) {
                        case 'Camera':
                            model = this.createCamera(relationships);
                            break;
                        case 'Light':
                            model = this.createLight(relationships);
                            break;
                        case 'Mesh':
                            model = this.createMesh(relationships, geometryMap, materialMap);
                            break;
                        case 'NurbsCurve':
                            model = this.createCurve(relationships, geometryMap);
                            break;
                        case 'LimbNode':
                        case 'Root':
                            model = new THREE.Bone();
                            break;
                        case 'Null':
                        default:
                            model = new THREE.Group();
                            break;
                        }
                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';
                        model.ID = id;
                    }
                    this.getTransformData(model, node);
                    modelMap.set(id, model);
                }
                return modelMap;
            },
            buildSkeleton: function (relationships, skeletons, id, name) {
                var bone = null;
                relationships.parents.forEach(function (parent) {
                    for (var ID in skeletons) {
                        var skeleton = skeletons[ID];
                        skeleton.rawBones.forEach(function (rawBone, i) {
                            if (rawBone.ID === parent.ID) {
                                var subBone = bone;
                                bone = new THREE.Bone();
                                bone.matrixWorld.copy(rawBone.transformLink);
                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';
                                bone.ID = id;
                                skeleton.bones[i] = bone;
                                if (subBone !== null) {
                                    bone.add(subBone);
                                }
                            }
                        });
                    }
                });
                return bone;
            },
            createCamera: function (relationships) {
                var model;
                var cameraAttribute;
                relationships.children.forEach(function (child) {
                    var attr = fbxTree.Objects.NodeAttribute[child.ID];
                    if (attr !== undefined) {
                        cameraAttribute = attr;
                    }
                });
                if (cameraAttribute === undefined) {
                    model = new THREE.Object3D();
                } else {
                    var type = 0;
                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {
                        type = 1;
                    }
                    var nearClippingPlane = 1;
                    if (cameraAttribute.NearPlane !== undefined) {
                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;
                    }
                    var farClippingPlane = 1000;
                    if (cameraAttribute.FarPlane !== undefined) {
                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;
                    }
                    var width = window.innerWidth;
                    var height = window.innerHeight;
                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {
                        width = cameraAttribute.AspectWidth.value;
                        height = cameraAttribute.AspectHeight.value;
                    }
                    var aspect = width / height;
                    var fov = 45;
                    if (cameraAttribute.FieldOfView !== undefined) {
                        fov = cameraAttribute.FieldOfView.value;
                    }
                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;
                    switch (type) {
                    case 0:
                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);
                        if (focalLength !== null)
                            model.setFocalLength(focalLength);
                        break;
                    case 1:
                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);
                        break;
                    default:
                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');
                        model = new THREE.Object3D();
                        break;
                    }
                }
                return model;
            },
            createLight: function (relationships) {
                var model;
                var lightAttribute;
                relationships.children.forEach(function (child) {
                    var attr = fbxTree.Objects.NodeAttribute[child.ID];
                    if (attr !== undefined) {
                        lightAttribute = attr;
                    }
                });
                if (lightAttribute === undefined) {
                    model = new THREE.Object3D();
                } else {
                    var type;
                    if (lightAttribute.LightType === undefined) {
                        type = 0;
                    } else {
                        type = lightAttribute.LightType.value;
                    }
                    var color = 16777215;
                    if (lightAttribute.undefined !== undefined) {
                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);
                    }
                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;
                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {
                        intensity = 0;
                    }
                    var distance = 0;
                    if (lightAttribute.FarAttenuationEnd !== undefined) {
                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {
                            distance = 0;
                        } else {
                            distance = lightAttribute.FarAttenuationEnd.value;
                        }
                    }
                    var decay = 1;
                    switch (type) {
                    case 0:
                        model = new THREE.PointLight(color, intensity, distance, decay);
                        break;
                    case 1:
                        model = new THREE.DirectionalLight(color, intensity);
                        break;
                    case 2:
                        var angle = Math.PI / 3;
                        if (lightAttribute.InnerAngle !== undefined) {
                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);
                        }
                        var penumbra = 0;
                        if (lightAttribute.OuterAngle !== undefined) {
                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);
                            penumbra = Math.max(penumbra, 1);
                        }
                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);
                        break;
                    default:
                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');
                        model = new THREE.PointLight(color, intensity);
                        break;
                    }
                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {
                        model.castShadow = true;
                    }
                }
                return model;
            },
            createMesh: function (relationships, geometryMap, materialMap) {
                var model;
                var geometry = null;
                var material = null;
                var materials = [];
                relationships.children.forEach(function (child) {
                    if (geometryMap.has(child.ID)) {
                        geometry = geometryMap.get(child.ID);
                    }
                    if (materialMap.has(child.ID)) {
                        materials.push(materialMap.get(child.ID));
                    }
                });
                if (materials.length > 1) {
                    material = materials;
                } else if (materials.length > 0) {
                    material = materials[0];
                } else {
                    material = new THREE.MeshPhongMaterial({ color: 13421772 });
                    materials.push(material);
                }
                if ('color' in geometry.attributes) {
                    materials.forEach(function (material) {
                        material.vertexColors = true;
                    });
                }
                if (geometry.FBX_Deformer) {
                    materials.forEach(function (material) {
                        material.skinning = true;
                    });
                    model = new THREE.SkinnedMesh(geometry, material);
                    model.normalizeSkinWeights();
                } else {
                    model = new THREE.Mesh(geometry, material);
                }
                return model;
            },
            createCurve: function (relationships, geometryMap) {
                var geometry = relationships.children.reduce(function (geo, child) {
                    if (geometryMap.has(child.ID))
                        geo = geometryMap.get(child.ID);
                    return geo;
                }, null);
                var material = new THREE.LineBasicMaterial({
                    color: 3342591,
                    linewidth: 1
                });
                return new THREE.Line(geometry, material);
            },
            getTransformData: function (model, modelNode) {
                var transformData = {};
                if ('InheritType' in modelNode)
                    transformData.inheritType = parseInt(modelNode.InheritType.value);
                if ('RotationOrder' in modelNode)
                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
                else
                    transformData.eulerOrder = 'ZYX';
                if ('Lcl_Translation' in modelNode)
                    transformData.translation = modelNode.Lcl_Translation.value;
                if ('PreRotation' in modelNode)
                    transformData.preRotation = modelNode.PreRotation.value;
                if ('Lcl_Rotation' in modelNode)
                    transformData.rotation = modelNode.Lcl_Rotation.value;
                if ('PostRotation' in modelNode)
                    transformData.postRotation = modelNode.PostRotation.value;
                if ('Lcl_Scaling' in modelNode)
                    transformData.scale = modelNode.Lcl_Scaling.value;
                if ('ScalingOffset' in modelNode)
                    transformData.scalingOffset = modelNode.ScalingOffset.value;
                if ('ScalingPivot' in modelNode)
                    transformData.scalingPivot = modelNode.ScalingPivot.value;
                if ('RotationOffset' in modelNode)
                    transformData.rotationOffset = modelNode.RotationOffset.value;
                if ('RotationPivot' in modelNode)
                    transformData.rotationPivot = modelNode.RotationPivot.value;
                model.userData.transformData = transformData;
            },
            setLookAtProperties: function (model, modelNode) {
                if ('LookAtProperty' in modelNode) {
                    var children = connections.get(model.ID).children;
                    children.forEach(function (child) {
                        if (child.relationship === 'LookAtProperty') {
                            var lookAtTarget = fbxTree.Objects.Model[child.ID];
                            if ('Lcl_Translation' in lookAtTarget) {
                                var pos = lookAtTarget.Lcl_Translation.value;
                                if (model.target !== undefined) {
                                    model.target.position.fromArray(pos);
                                    sceneGraph.add(model.target);
                                } else {
                                    model.lookAt(new THREE.Vector3().fromArray(pos));
                                }
                            }
                        }
                    });
                }
            },
            bindSkeleton: function (skeletons, geometryMap, modelMap) {
                var bindMatrices = this.parsePoseNodes();
                for (var ID in skeletons) {
                    var skeleton = skeletons[ID];
                    var parents = connections.get(parseInt(skeleton.ID)).parents;
                    parents.forEach(function (parent) {
                        if (geometryMap.has(parent.ID)) {
                            var geoID = parent.ID;
                            var geoRelationships = connections.get(geoID);
                            geoRelationships.parents.forEach(function (geoConnParent) {
                                if (modelMap.has(geoConnParent.ID)) {
                                    var model = modelMap.get(geoConnParent.ID);
                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);
                                }
                            });
                        }
                    });
                }
            },
            parsePoseNodes: function () {
                var bindMatrices = {};
                if ('Pose' in fbxTree.Objects) {
                    var BindPoseNode = fbxTree.Objects.Pose;
                    for (var nodeID in BindPoseNode) {
                        if (BindPoseNode[nodeID].attrType === 'BindPose') {
                            var poseNodes = BindPoseNode[nodeID].PoseNode;
                            if (Array.isArray(poseNodes)) {
                                poseNodes.forEach(function (poseNode) {
                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);
                                });
                            } else {
                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);
                            }
                        }
                    }
                }
                return bindMatrices;
            },
            createAmbientLight: function () {
                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {
                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;
                    var r = ambientColor[0];
                    var g = ambientColor[1];
                    var b = ambientColor[2];
                    if (r !== 0 || g !== 0 || b !== 0) {
                        var color = new THREE.Color(r, g, b);
                        sceneGraph.add(new THREE.AmbientLight(color, 1));
                    }
                }
            },
            setupMorphMaterials: function () {
                var self = this;
                sceneGraph.traverse(function (child) {
                    if (child.isMesh) {
                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {
                            if (Array.isArray(child.material)) {
                                child.material.forEach(function (material, i) {
                                    self.setupMorphMaterial(child, material, i);
                                });
                            } else {
                                self.setupMorphMaterial(child, child.material);
                            }
                        }
                    }
                });
            },
            setupMorphMaterial: function (child, material, index) {
                var uuid = child.uuid;
                var matUuid = material.uuid;
                var sharedMat = false;
                sceneGraph.traverse(function (node) {
                    if (node.isMesh) {
                        if (Array.isArray(node.material)) {
                            node.material.forEach(function (mat) {
                                if (mat.uuid === matUuid && node.uuid !== uuid)
                                    sharedMat = true;
                            });
                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)
                            sharedMat = true;
                    }
                });
                if (sharedMat === true) {
                    var clonedMat = material.clone();
                    clonedMat.morphTargets = true;
                    if (index === undefined)
                        child.material = clonedMat;
                    else
                        child.material[index] = clonedMat;
                } else
                    material.morphTargets = true;
            }
        };
        function GeometryParser() {
        }
        GeometryParser.prototype = {
            constructor: GeometryParser,
            parse: function (deformers) {
                var geometryMap = new Map();
                if ('Geometry' in fbxTree.Objects) {
                    var geoNodes = fbxTree.Objects.Geometry;
                    for (var nodeID in geoNodes) {
                        var relationships = connections.get(parseInt(nodeID));
                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);
                        geometryMap.set(parseInt(nodeID), geo);
                    }
                }
                return geometryMap;
            },
            parseGeometry: function (relationships, geoNode, deformers) {
                switch (geoNode.attrType) {
                case 'Mesh':
                    return this.parseMeshGeometry(relationships, geoNode, deformers);
                    break;
                case 'NurbsCurve':
                    return this.parseNurbsGeometry(geoNode);
                    break;
                }
            },
            parseMeshGeometry: function (relationships, geoNode, deformers) {
                var skeletons = deformers.skeletons;
                var morphTargets = [];
                var modelNodes = relationships.parents.map(function (parent) {
                    return fbxTree.Objects.Model[parent.ID];
                });
                if (modelNodes.length === 0)
                    return;
                var skeleton = relationships.children.reduce(function (skeleton, child) {
                    if (skeletons[child.ID] !== undefined)
                        skeleton = skeletons[child.ID];
                    return skeleton;
                }, null);
                relationships.children.forEach(function (child) {
                    if (deformers.morphTargets[child.ID] !== undefined) {
                        morphTargets.push(deformers.morphTargets[child.ID]);
                    }
                });
                var modelNode = modelNodes[0];
                var transformData = {};
                if ('RotationOrder' in modelNode)
                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
                if ('InheritType' in modelNode)
                    transformData.inheritType = parseInt(modelNode.InheritType.value);
                if ('GeometricTranslation' in modelNode)
                    transformData.translation = modelNode.GeometricTranslation.value;
                if ('GeometricRotation' in modelNode)
                    transformData.rotation = modelNode.GeometricRotation.value;
                if ('GeometricScaling' in modelNode)
                    transformData.scale = modelNode.GeometricScaling.value;
                var transform = generateTransform(transformData);
                return this.genGeometry(geoNode, skeleton, morphTargets, transform);
            },
            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {
                var geo = new THREE.BufferGeometry();
                if (geoNode.attrName)
                    geo.name = geoNode.attrName;
                var geoInfo = this.parseGeoNode(geoNode, skeleton);
                var buffers = this.genBuffers(geoInfo);
                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);
                positionAttribute.applyMatrix4(preTransform);
                geo.setAttribute('position', positionAttribute);
                if (buffers.colors.length > 0) {
                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));
                }
                if (skeleton) {
                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));
                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));
                    geo.FBX_Deformer = skeleton;
                }
                if (buffers.normal.length > 0) {
                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);
                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);
                    normalAttribute.applyNormalMatrix(normalMatrix);
                    geo.setAttribute('normal', normalAttribute);
                }
                buffers.uvs.forEach(function (uvBuffer, i) {
                    var name = 'uv' + (i + 1).toString();
                    if (i === 0) {
                        name = 'uv';
                    }
                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));
                });
                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {
                    var prevMaterialIndex = buffers.materialIndex[0];
                    var startIndex = 0;
                    buffers.materialIndex.forEach(function (currentIndex, i) {
                        if (currentIndex !== prevMaterialIndex) {
                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);
                            prevMaterialIndex = currentIndex;
                            startIndex = i;
                        }
                    });
                    if (geo.groups.length > 0) {
                        var lastGroup = geo.groups[geo.groups.length - 1];
                        var lastIndex = lastGroup.start + lastGroup.count;
                        if (lastIndex !== buffers.materialIndex.length) {
                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);
                        }
                    }
                    if (geo.groups.length === 0) {
                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);
                    }
                }
                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);
                return geo;
            },
            parseGeoNode: function (geoNode, skeleton) {
                var geoInfo = {};
                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];
                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];
                if (geoNode.LayerElementColor) {
                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);
                }
                if (geoNode.LayerElementMaterial) {
                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);
                }
                if (geoNode.LayerElementNormal) {
                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);
                }
                if (geoNode.LayerElementUV) {
                    geoInfo.uv = [];
                    var i = 0;
                    while (geoNode.LayerElementUV[i]) {
                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));
                        i++;
                    }
                }
                geoInfo.weightTable = {};
                if (skeleton !== null) {
                    geoInfo.skeleton = skeleton;
                    skeleton.rawBones.forEach(function (rawBone, i) {
                        rawBone.indices.forEach(function (index, j) {
                            if (geoInfo.weightTable[index] === undefined)
                                geoInfo.weightTable[index] = [];
                            geoInfo.weightTable[index].push({
                                id: i,
                                weight: rawBone.weights[j]
                            });
                        });
                    });
                }
                return geoInfo;
            },
            genBuffers: function (geoInfo) {
                var buffers = {
                    vertex: [],
                    normal: [],
                    colors: [],
                    uvs: [],
                    materialIndex: [],
                    vertexWeights: [],
                    weightsIndices: []
                };
                var polygonIndex = 0;
                var faceLength = 0;
                var displayedWeightsWarning = false;
                var facePositionIndexes = [];
                var faceNormals = [];
                var faceColors = [];
                var faceUVs = [];
                var faceWeights = [];
                var faceWeightIndices = [];
                var self = this;
                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {
                    var endOfFace = false;
                    if (vertexIndex < 0) {
                        vertexIndex = vertexIndex ^ -1;
                        endOfFace = true;
                    }
                    var weightIndices = [];
                    var weights = [];
                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);
                    if (geoInfo.color) {
                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);
                        faceColors.push(data[0], data[1], data[2]);
                    }
                    if (geoInfo.skeleton) {
                        if (geoInfo.weightTable[vertexIndex] !== undefined) {
                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {
                                weights.push(wt.weight);
                                weightIndices.push(wt.id);
                            });
                        }
                        if (weights.length > 4) {
                            if (!displayedWeightsWarning) {
                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');
                                displayedWeightsWarning = true;
                            }
                            var wIndex = [
                                0,
                                0,
                                0,
                                0
                            ];
                            var Weight = [
                                0,
                                0,
                                0,
                                0
                            ];
                            weights.forEach(function (weight, weightIndex) {
                                var currentWeight = weight;
                                var currentIndex = weightIndices[weightIndex];
                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {
                                    if (currentWeight > comparedWeight) {
                                        comparedWeightArray[comparedWeightIndex] = currentWeight;
                                        currentWeight = comparedWeight;
                                        var tmp = wIndex[comparedWeightIndex];
                                        wIndex[comparedWeightIndex] = currentIndex;
                                        currentIndex = tmp;
                                    }
                                });
                            });
                            weightIndices = wIndex;
                            weights = Weight;
                        }
                        while (weights.length < 4) {
                            weights.push(0);
                            weightIndices.push(0);
                        }
                        for (var i = 0; i < 4; ++i) {
                            faceWeights.push(weights[i]);
                            faceWeightIndices.push(weightIndices[i]);
                        }
                    }
                    if (geoInfo.normal) {
                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);
                        faceNormals.push(data[0], data[1], data[2]);
                    }
                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {
                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];
                    }
                    if (geoInfo.uv) {
                        geoInfo.uv.forEach(function (uv, i) {
                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);
                            if (faceUVs[i] === undefined) {
                                faceUVs[i] = [];
                            }
                            faceUVs[i].push(data[0]);
                            faceUVs[i].push(data[1]);
                        });
                    }
                    faceLength++;
                    if (endOfFace) {
                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);
                        polygonIndex++;
                        faceLength = 0;
                        facePositionIndexes = [];
                        faceNormals = [];
                        faceColors = [];
                        faceUVs = [];
                        faceWeights = [];
                        faceWeightIndices = [];
                    }
                });
                return buffers;
            },
            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {
                for (var i = 2; i < faceLength; i++) {
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);
                    if (geoInfo.skeleton) {
                        buffers.vertexWeights.push(faceWeights[0]);
                        buffers.vertexWeights.push(faceWeights[1]);
                        buffers.vertexWeights.push(faceWeights[2]);
                        buffers.vertexWeights.push(faceWeights[3]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);
                        buffers.vertexWeights.push(faceWeights[i * 4]);
                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);
                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);
                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);
                        buffers.weightsIndices.push(faceWeightIndices[0]);
                        buffers.weightsIndices.push(faceWeightIndices[1]);
                        buffers.weightsIndices.push(faceWeightIndices[2]);
                        buffers.weightsIndices.push(faceWeightIndices[3]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);
                    }
                    if (geoInfo.color) {
                        buffers.colors.push(faceColors[0]);
                        buffers.colors.push(faceColors[1]);
                        buffers.colors.push(faceColors[2]);
                        buffers.colors.push(faceColors[(i - 1) * 3]);
                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);
                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);
                        buffers.colors.push(faceColors[i * 3]);
                        buffers.colors.push(faceColors[i * 3 + 1]);
                        buffers.colors.push(faceColors[i * 3 + 2]);
                    }
                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {
                        buffers.materialIndex.push(materialIndex);
                        buffers.materialIndex.push(materialIndex);
                        buffers.materialIndex.push(materialIndex);
                    }
                    if (geoInfo.normal) {
                        buffers.normal.push(faceNormals[0]);
                        buffers.normal.push(faceNormals[1]);
                        buffers.normal.push(faceNormals[2]);
                        buffers.normal.push(faceNormals[(i - 1) * 3]);
                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);
                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);
                        buffers.normal.push(faceNormals[i * 3]);
                        buffers.normal.push(faceNormals[i * 3 + 1]);
                        buffers.normal.push(faceNormals[i * 3 + 2]);
                    }
                    if (geoInfo.uv) {
                        geoInfo.uv.forEach(function (uv, j) {
                            if (buffers.uvs[j] === undefined)
                                buffers.uvs[j] = [];
                            buffers.uvs[j].push(faceUVs[j][0]);
                            buffers.uvs[j].push(faceUVs[j][1]);
                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);
                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);
                            buffers.uvs[j].push(faceUVs[j][i * 2]);
                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);
                        });
                    }
                }
            },
            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {
                if (morphTargets.length === 0)
                    return;
                parentGeo.morphTargetsRelative = true;
                parentGeo.morphAttributes.position = [];
                var self = this;
                morphTargets.forEach(function (morphTarget) {
                    morphTarget.rawTargets.forEach(function (rawTarget) {
                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];
                        if (morphGeoNode !== undefined) {
                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);
                        }
                    });
                });
            },
            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {
                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];
                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];
                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];
                var length = parentGeo.attributes.position.count * 3;
                var morphPositions = new Float32Array(length);
                for (var i = 0; i < indices.length; i++) {
                    var morphIndex = indices[i] * 3;
                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];
                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];
                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];
                }
                var morphGeoInfo = {
                    vertexIndices: vertexIndices,
                    vertexPositions: morphPositions
                };
                var morphBuffers = this.genBuffers(morphGeoInfo);
                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);
                positionAttribute.name = name || morphGeoNode.attrName;
                positionAttribute.applyMatrix4(preTransform);
                parentGeo.morphAttributes.position.push(positionAttribute);
            },
            parseNormals: function (NormalNode) {
                var mappingType = NormalNode.MappingInformationType;
                var referenceType = NormalNode.ReferenceInformationType;
                var buffer = NormalNode.Normals.a;
                var indexBuffer = [];
                if (referenceType === 'IndexToDirect') {
                    if ('NormalIndex' in NormalNode) {
                        indexBuffer = NormalNode.NormalIndex.a;
                    } else if ('NormalsIndex' in NormalNode) {
                        indexBuffer = NormalNode.NormalsIndex.a;
                    }
                }
                return {
                    dataSize: 3,
                    buffer: buffer,
                    indices: indexBuffer,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseUVs: function (UVNode) {
                var mappingType = UVNode.MappingInformationType;
                var referenceType = UVNode.ReferenceInformationType;
                var buffer = UVNode.UV.a;
                var indexBuffer = [];
                if (referenceType === 'IndexToDirect') {
                    indexBuffer = UVNode.UVIndex.a;
                }
                return {
                    dataSize: 2,
                    buffer: buffer,
                    indices: indexBuffer,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseVertexColors: function (ColorNode) {
                var mappingType = ColorNode.MappingInformationType;
                var referenceType = ColorNode.ReferenceInformationType;
                var buffer = ColorNode.Colors.a;
                var indexBuffer = [];
                if (referenceType === 'IndexToDirect') {
                    indexBuffer = ColorNode.ColorIndex.a;
                }
                return {
                    dataSize: 4,
                    buffer: buffer,
                    indices: indexBuffer,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseMaterialIndices: function (MaterialNode) {
                var mappingType = MaterialNode.MappingInformationType;
                var referenceType = MaterialNode.ReferenceInformationType;
                if (mappingType === 'NoMappingInformation') {
                    return {
                        dataSize: 1,
                        buffer: [0],
                        indices: [0],
                        mappingType: 'AllSame',
                        referenceType: referenceType
                    };
                }
                var materialIndexBuffer = MaterialNode.Materials.a;
                var materialIndices = [];
                for (var i = 0; i < materialIndexBuffer.length; ++i) {
                    materialIndices.push(i);
                }
                return {
                    dataSize: 1,
                    buffer: materialIndexBuffer,
                    indices: materialIndices,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseNurbsGeometry: function (geoNode) {
                if (c.NURBSCurve === undefined) {
                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');
                    return new THREE.BufferGeometry();
                }
                var order = parseInt(geoNode.Order);
                if (isNaN(order)) {
                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);
                    return new THREE.BufferGeometry();
                }
                var degree = order - 1;
                var knots = geoNode.KnotVector.a;
                var controlPoints = [];
                var pointsValues = geoNode.Points.a;
                for (var i = 0, l = pointsValues.length; i < l; i += 4) {
                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));
                }
                var startKnot, endKnot;
                if (geoNode.Form === 'Closed') {
                    controlPoints.push(controlPoints[0]);
                } else if (geoNode.Form === 'Periodic') {
                    startKnot = degree;
                    endKnot = knots.length - 1 - startKnot;
                    for (var i = 0; i < degree; ++i) {
                        controlPoints.push(controlPoints[i]);
                    }
                }
                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);
                var vertices = curve.getPoints(controlPoints.length * 7);
                var positions = new Float32Array(vertices.length * 3);
                vertices.forEach(function (vertex, i) {
                    vertex.toArray(positions, i * 3);
                });
                var geometry = new THREE.BufferGeometry();
                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
                return geometry;
            }
        };
        function AnimationParser() {
        }
        AnimationParser.prototype = {
            constructor: AnimationParser,
            parse: function () {
                var animationClips = [];
                var rawClips = this.parseClips();
                if (rawClips !== undefined) {
                    for (var key in rawClips) {
                        var rawClip = rawClips[key];
                        var clip = this.addClip(rawClip);
                        animationClips.push(clip);
                    }
                }
                return animationClips;
            },
            parseClips: function () {
                if (fbxTree.Objects.AnimationCurve === undefined)
                    return undefined;
                var curveNodesMap = this.parseAnimationCurveNodes();
                this.parseAnimationCurves(curveNodesMap);
                var layersMap = this.parseAnimationLayers(curveNodesMap);
                var rawClips = this.parseAnimStacks(layersMap);
                return rawClips;
            },
            parseAnimationCurveNodes: function () {
                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;
                var curveNodesMap = new Map();
                for (var nodeID in rawCurveNodes) {
                    var rawCurveNode = rawCurveNodes[nodeID];
                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {
                        var curveNode = {
                            id: rawCurveNode.id,
                            attr: rawCurveNode.attrName,
                            curves: {}
                        };
                        curveNodesMap.set(curveNode.id, curveNode);
                    }
                }
                return curveNodesMap;
            },
            parseAnimationCurves: function (curveNodesMap) {
                var rawCurves = fbxTree.Objects.AnimationCurve;
                for (var nodeID in rawCurves) {
                    var animationCurve = {
                        id: rawCurves[nodeID].id,
                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),
                        values: rawCurves[nodeID].KeyValueFloat.a
                    };
                    var relationships = connections.get(animationCurve.id);
                    if (relationships !== undefined) {
                        var animationCurveID = relationships.parents[0].ID;
                        var animationCurveRelationship = relationships.parents[0].relationship;
                        if (animationCurveRelationship.match(/X/)) {
                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;
                        } else if (animationCurveRelationship.match(/Y/)) {
                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;
                        } else if (animationCurveRelationship.match(/Z/)) {
                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;
                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {
                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;
                        }
                    }
                }
            },
            parseAnimationLayers: function (curveNodesMap) {
                var rawLayers = fbxTree.Objects.AnimationLayer;
                var layersMap = new Map();
                for (var nodeID in rawLayers) {
                    var layerCurveNodes = [];
                    var connection = connections.get(parseInt(nodeID));
                    if (connection !== undefined) {
                        var children = connection.children;
                        children.forEach(function (child, i) {
                            if (curveNodesMap.has(child.ID)) {
                                var curveNode = curveNodesMap.get(child.ID);
                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {
                                    if (layerCurveNodes[i] === undefined) {
                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {
                                            return parent.relationship !== undefined;
                                        })[0].ID;
                                        if (modelID !== undefined) {
                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];
                                            var node = {
                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',
                                                ID: rawModel.id,
                                                initialPosition: [
                                                    0,
                                                    0,
                                                    0
                                                ],
                                                initialRotation: [
                                                    0,
                                                    0,
                                                    0
                                                ],
                                                initialScale: [
                                                    1,
                                                    1,
                                                    1
                                                ]
                                            };
                                            sceneGraph.traverse(function (child) {
                                                if (child.ID === rawModel.id) {
                                                    node.transform = child.matrix;
                                                    if (child.userData.transformData)
                                                        node.eulerOrder = child.userData.transformData.eulerOrder;
                                                }
                                            });
                                            if (!node.transform)
                                                node.transform = new THREE.Matrix4();
                                            if ('PreRotation' in rawModel)
                                                node.preRotation = rawModel.PreRotation.value;
                                            if ('PostRotation' in rawModel)
                                                node.postRotation = rawModel.PostRotation.value;
                                            layerCurveNodes[i] = node;
                                        }
                                    }
                                    if (layerCurveNodes[i])
                                        layerCurveNodes[i][curveNode.attr] = curveNode;
                                } else if (curveNode.curves.morph !== undefined) {
                                    if (layerCurveNodes[i] === undefined) {
                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {
                                            return parent.relationship !== undefined;
                                        })[0].ID;
                                        var morpherID = connections.get(deformerID).parents[0].ID;
                                        var geoID = connections.get(morpherID).parents[0].ID;
                                        var modelID = connections.get(geoID).parents[0].ID;
                                        var rawModel = fbxTree.Objects.Model[modelID];
                                        var node = {
                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',
                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName
                                        };
                                        layerCurveNodes[i] = node;
                                    }
                                    layerCurveNodes[i][curveNode.attr] = curveNode;
                                }
                            }
                        });
                        layersMap.set(parseInt(nodeID), layerCurveNodes);
                    }
                }
                return layersMap;
            },
            parseAnimStacks: function (layersMap) {
                var rawStacks = fbxTree.Objects.AnimationStack;
                var rawClips = {};
                for (var nodeID in rawStacks) {
                    var children = connections.get(parseInt(nodeID)).children;
                    if (children.length > 1) {
                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');
                    }
                    var layer = layersMap.get(children[0].ID);
                    rawClips[nodeID] = {
                        name: rawStacks[nodeID].attrName,
                        layer: layer
                    };
                }
                return rawClips;
            },
            addClip: function (rawClip) {
                var tracks = [];
                var self = this;
                rawClip.layer.forEach(function (rawTracks) {
                    tracks = tracks.concat(self.generateTracks(rawTracks));
                });
                return new THREE.AnimationClip(rawClip.name, -1, tracks);
            },
            generateTracks: function (rawTracks) {
                var tracks = [];
                var initialPosition = new THREE.Vector3();
                var initialRotation = new THREE.Quaternion();
                var initialScale = new THREE.Vector3();
                if (rawTracks.transform)
                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);
                initialPosition = initialPosition.toArray();
                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();
                initialScale = initialScale.toArray();
                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {
                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');
                    if (positionTrack !== undefined)
                        tracks.push(positionTrack);
                }
                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {
                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);
                    if (rotationTrack !== undefined)
                        tracks.push(rotationTrack);
                }
                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {
                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');
                    if (scaleTrack !== undefined)
                        tracks.push(scaleTrack);
                }
                if (rawTracks.DeformPercent !== undefined) {
                    var morphTrack = this.generateMorphTrack(rawTracks);
                    if (morphTrack !== undefined)
                        tracks.push(morphTrack);
                }
                return tracks;
            },
            generateVectorTrack: function (modelName, curves, initialValue, type) {
                var times = this.getTimesForAllAxes(curves);
                var values = this.getKeyframeTrackValues(times, curves, initialValue);
                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);
            },
            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {
                if (curves.x !== undefined) {
                    this.interpolateRotations(curves.x);
                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);
                }
                if (curves.y !== undefined) {
                    this.interpolateRotations(curves.y);
                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);
                }
                if (curves.z !== undefined) {
                    this.interpolateRotations(curves.z);
                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);
                }
                var times = this.getTimesForAllAxes(curves);
                var values = this.getKeyframeTrackValues(times, curves, initialValue);
                if (preRotation !== undefined) {
                    preRotation = preRotation.map(THREE.MathUtils.degToRad);
                    preRotation.push(eulerOrder);
                    preRotation = new THREE.Euler().fromArray(preRotation);
                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);
                }
                if (postRotation !== undefined) {
                    postRotation = postRotation.map(THREE.MathUtils.degToRad);
                    postRotation.push(eulerOrder);
                    postRotation = new THREE.Euler().fromArray(postRotation);
                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();
                }
                var quaternion = new THREE.Quaternion();
                var euler = new THREE.Euler();
                var quaternionValues = [];
                for (var i = 0; i < values.length; i += 3) {
                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);
                    quaternion.setFromEuler(euler);
                    if (preRotation !== undefined)
                        quaternion.premultiply(preRotation);
                    if (postRotation !== undefined)
                        quaternion.multiply(postRotation);
                    quaternion.toArray(quaternionValues, i / 3 * 4);
                }
                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);
            },
            generateMorphTrack: function (rawTracks) {
                var curves = rawTracks.DeformPercent.curves.morph;
                var values = curves.values.map(function (val) {
                    return val / 100;
                });
                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];
                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);
            },
            getTimesForAllAxes: function (curves) {
                var times = [];
                if (curves.x !== undefined)
                    times = times.concat(curves.x.times);
                if (curves.y !== undefined)
                    times = times.concat(curves.y.times);
                if (curves.z !== undefined)
                    times = times.concat(curves.z.times);
                times = times.sort(function (a, b) {
                    return a - b;
                }).filter(function (elem, index, array) {
                    return array.indexOf(elem) == index;
                });
                return times;
            },
            getKeyframeTrackValues: function (times, curves, initialValue) {
                var prevValue = initialValue;
                var values = [];
                var xIndex = -1;
                var yIndex = -1;
                var zIndex = -1;
                times.forEach(function (time) {
                    if (curves.x)
                        xIndex = curves.x.times.indexOf(time);
                    if (curves.y)
                        yIndex = curves.y.times.indexOf(time);
                    if (curves.z)
                        zIndex = curves.z.times.indexOf(time);
                    if (xIndex !== -1) {
                        var xValue = curves.x.values[xIndex];
                        values.push(xValue);
                        prevValue[0] = xValue;
                    } else {
                        values.push(prevValue[0]);
                    }
                    if (yIndex !== -1) {
                        var yValue = curves.y.values[yIndex];
                        values.push(yValue);
                        prevValue[1] = yValue;
                    } else {
                        values.push(prevValue[1]);
                    }
                    if (zIndex !== -1) {
                        var zValue = curves.z.values[zIndex];
                        values.push(zValue);
                        prevValue[2] = zValue;
                    } else {
                        values.push(prevValue[2]);
                    }
                });
                return values;
            },
            interpolateRotations: function (curve) {
                for (var i = 1; i < curve.values.length; i++) {
                    var initialValue = curve.values[i - 1];
                    var valuesSpan = curve.values[i] - initialValue;
                    var absoluteSpan = Math.abs(valuesSpan);
                    if (absoluteSpan >= 180) {
                        var numSubIntervals = absoluteSpan / 180;
                        var step = valuesSpan / numSubIntervals;
                        var nextValue = initialValue + step;
                        var initialTime = curve.times[i - 1];
                        var timeSpan = curve.times[i] - initialTime;
                        var interval = timeSpan / numSubIntervals;
                        var nextTime = initialTime + interval;
                        var interpolatedTimes = [];
                        var interpolatedValues = [];
                        while (nextTime < curve.times[i]) {
                            interpolatedTimes.push(nextTime);
                            nextTime += interval;
                            interpolatedValues.push(nextValue);
                            nextValue += step;
                        }
                        curve.times = inject(curve.times, i, interpolatedTimes);
                        curve.values = inject(curve.values, i, interpolatedValues);
                    }
                }
            }
        };
        function TextParser() {
        }
        TextParser.prototype = {
            constructor: TextParser,
            getPrevNode: function () {
                return this.nodeStack[this.currentIndent - 2];
            },
            getCurrentNode: function () {
                return this.nodeStack[this.currentIndent - 1];
            },
            getCurrentProp: function () {
                return this.currentProp;
            },
            pushStack: function (node) {
                this.nodeStack.push(node);
                this.currentIndent += 1;
            },
            popStack: function () {
                this.nodeStack.pop();
                this.currentIndent -= 1;
            },
            setCurrentProp: function (val, name) {
                this.currentProp = val;
                this.currentPropName = name;
            },
            parse: function (text) {
                this.currentIndent = 0;
                this.allNodes = new FBXTree();
                this.nodeStack = [];
                this.currentProp = [];
                this.currentPropName = '';
                var self = this;
                var split = text.split(/[\r\n]+/);
                split.forEach(function (line, i) {
                    var matchComment = line.match(/^[\s\t]*;/);
                    var matchEmpty = line.match(/^[\s\t]*$/);
                    if (matchComment || matchEmpty)
                        return;
                    var matchBeginning = line.match('^\\t{' + self.currentIndent + '}(\\w+):(.*){', '');
                    var matchProperty = line.match('^\\t{' + self.currentIndent + '}(\\w+):[\\s\\t\\r\\n](.*)');
                    var matchEnd = line.match('^\\t{' + (self.currentIndent - 1) + '}}');
                    if (matchBeginning) {
                        self.parseNodeBegin(line, matchBeginning);
                    } else if (matchProperty) {
                        self.parseNodeProperty(line, matchProperty, split[++i]);
                    } else if (matchEnd) {
                        self.popStack();
                    } else if (line.match(/^[^\s\t}]/)) {
                        self.parseNodePropertyContinued(line);
                    }
                });
                return this.allNodes;
            },
            parseNodeBegin: function (line, property) {
                var nodeName = property[1].trim().replace(/^"/, '').replace(/"$/, '');
                var nodeAttrs = property[2].split(',').map(function (attr) {
                    return attr.trim().replace(/^"/, '').replace(/"$/, '');
                });
                var node = { name: nodeName };
                var attrs = this.parseNodeAttr(nodeAttrs);
                var currentNode = this.getCurrentNode();
                if (this.currentIndent === 0) {
                    this.allNodes.add(nodeName, node);
                } else {
                    if (nodeName in currentNode) {
                        if (nodeName === 'PoseNode') {
                            currentNode.PoseNode.push(node);
                        } else if (currentNode[nodeName].id !== undefined) {
                            currentNode[nodeName] = {};
                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];
                        }
                        if (attrs.id !== '')
                            currentNode[nodeName][attrs.id] = node;
                    } else if (typeof attrs.id === 'number') {
                        currentNode[nodeName] = {};
                        currentNode[nodeName][attrs.id] = node;
                    } else if (nodeName !== 'Properties70') {
                        if (nodeName === 'PoseNode')
                            currentNode[nodeName] = [node];
                        else
                            currentNode[nodeName] = node;
                    }
                }
                if (typeof attrs.id === 'number')
                    node.id = attrs.id;
                if (attrs.name !== '')
                    node.attrName = attrs.name;
                if (attrs.type !== '')
                    node.attrType = attrs.type;
                this.pushStack(node);
            },
            parseNodeAttr: function (attrs) {
                var id = attrs[0];
                if (attrs[0] !== '') {
                    id = parseInt(attrs[0]);
                    if (isNaN(id)) {
                        id = attrs[0];
                    }
                }
                var name = '', type = '';
                if (attrs.length > 1) {
                    name = attrs[1].replace(/^(\w+)::/, '');
                    type = attrs[2];
                }
                return {
                    id: id,
                    name: name,
                    type: type
                };
            },
            parseNodeProperty: function (line, property, contentLine) {
                var propName = property[1].replace(/^"/, '').replace(/"$/, '').trim();
                var propValue = property[2].replace(/^"/, '').replace(/"$/, '').trim();
                if (propName === 'Content' && propValue === ',') {
                    propValue = contentLine.replace(/"/g, '').replace(/,$/, '').trim();
                }
                var currentNode = this.getCurrentNode();
                var parentName = currentNode.name;
                if (parentName === 'Properties70') {
                    this.parseNodeSpecialProperty(line, propName, propValue);
                    return;
                }
                if (propName === 'C') {
                    var connProps = propValue.split(',').slice(1);
                    var from = parseInt(connProps[0]);
                    var to = parseInt(connProps[1]);
                    var rest = propValue.split(',').slice(3);
                    rest = rest.map(function (elem) {
                        return elem.trim().replace(/^"/, '');
                    });
                    propName = 'connections';
                    propValue = [
                        from,
                        to
                    ];
                    append(propValue, rest);
                    if (currentNode[propName] === undefined) {
                        currentNode[propName] = [];
                    }
                }
                if (propName === 'Node')
                    currentNode.id = propValue;
                if (propName in currentNode && Array.isArray(currentNode[propName])) {
                    currentNode[propName].push(propValue);
                } else {
                    if (propName !== 'a')
                        currentNode[propName] = propValue;
                    else
                        currentNode.a = propValue;
                }
                this.setCurrentProp(currentNode, propName);
                if (propName === 'a' && propValue.slice(-1) !== ',') {
                    currentNode.a = parseNumberArray(propValue);
                }
            },
            parseNodePropertyContinued: function (line) {
                var currentNode = this.getCurrentNode();
                currentNode.a += line;
                if (line.slice(-1) !== ',') {
                    currentNode.a = parseNumberArray(currentNode.a);
                }
            },
            parseNodeSpecialProperty: function (line, propName, propValue) {
                var props = propValue.split('",').map(function (prop) {
                    return prop.trim().replace(/^\"/, '').replace(/\s/, '_');
                });
                var innerPropName = props[0];
                var innerPropType1 = props[1];
                var innerPropType2 = props[2];
                var innerPropFlag = props[3];
                var innerPropValue = props[4];
                switch (innerPropType1) {
                case 'int':
                case 'enum':
                case 'bool':
                case 'ULongLong':
                case 'double':
                case 'Number':
                case 'FieldOfView':
                    innerPropValue = parseFloat(innerPropValue);
                    break;
                case 'Color':
                case 'ColorRGB':
                case 'Vector3D':
                case 'Lcl_Translation':
                case 'Lcl_Rotation':
                case 'Lcl_Scaling':
                    innerPropValue = parseNumberArray(innerPropValue);
                    break;
                }
                this.getPrevNode()[innerPropName] = {
                    'type': innerPropType1,
                    'type2': innerPropType2,
                    'flag': innerPropFlag,
                    'value': innerPropValue
                };
                this.setCurrentProp(this.getPrevNode(), innerPropName);
            }
        };
        function BinaryParser() {
        }
        BinaryParser.prototype = {
            constructor: BinaryParser,
            parse: function (buffer) {
                var reader = new BinaryReader(buffer);
                reader.skip(23);
                var version = reader.getUint32();
                console.log('THREE.FBXLoader: FBX binary version: ' + version);
                var allNodes = new FBXTree();
                while (!this.endOfContent(reader)) {
                    var node = this.parseNode(reader, version);
                    if (node !== null)
                        allNodes.add(node.name, node);
                }
                return allNodes;
            },
            endOfContent: function (reader) {
                if (reader.size() % 16 === 0) {
                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();
                } else {
                    return reader.getOffset() + 160 + 16 >= reader.size();
                }
            },
            parseNode: function (reader, version) {
                var node = {};
                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();
                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();
                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();
                var nameLen = reader.getUint8();
                var name = reader.getString(nameLen);
                if (endOffset === 0)
                    return null;
                var propertyList = [];
                for (var i = 0; i < numProperties; i++) {
                    propertyList.push(this.parseProperty(reader));
                }
                var id = propertyList.length > 0 ? propertyList[0] : '';
                var attrName = propertyList.length > 1 ? propertyList[1] : '';
                var attrType = propertyList.length > 2 ? propertyList[2] : '';
                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;
                while (endOffset > reader.getOffset()) {
                    var subNode = this.parseNode(reader, version);
                    if (subNode !== null)
                        this.parseSubNode(name, node, subNode);
                }
                node.propertyList = propertyList;
                if (typeof id === 'number')
                    node.id = id;
                if (attrName !== '')
                    node.attrName = attrName;
                if (attrType !== '')
                    node.attrType = attrType;
                if (name !== '')
                    node.name = name;
                return node;
            },
            parseSubNode: function (name, node, subNode) {
                if (subNode.singleProperty === true) {
                    var value = subNode.propertyList[0];
                    if (Array.isArray(value)) {
                        node[subNode.name] = subNode;
                        subNode.a = value;
                    } else {
                        node[subNode.name] = value;
                    }
                } else if (name === 'Connections' && subNode.name === 'C') {
                    var array = [];
                    subNode.propertyList.forEach(function (property, i) {
                        if (i !== 0)
                            array.push(property);
                    });
                    if (node.connections === undefined) {
                        node.connections = [];
                    }
                    node.connections.push(array);
                } else if (subNode.name === 'Properties70') {
                    var keys = Object.keys(subNode);
                    keys.forEach(function (key) {
                        node[key] = subNode[key];
                    });
                } else if (name === 'Properties70' && subNode.name === 'P') {
                    var innerPropName = subNode.propertyList[0];
                    var innerPropType1 = subNode.propertyList[1];
                    var innerPropType2 = subNode.propertyList[2];
                    var innerPropFlag = subNode.propertyList[3];
                    var innerPropValue;
                    if (innerPropName.indexOf('Lcl ') === 0)
                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');
                    if (innerPropType1.indexOf('Lcl ') === 0)
                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');
                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {
                        innerPropValue = [
                            subNode.propertyList[4],
                            subNode.propertyList[5],
                            subNode.propertyList[6]
                        ];
                    } else {
                        innerPropValue = subNode.propertyList[4];
                    }
                    node[innerPropName] = {
                        'type': innerPropType1,
                        'type2': innerPropType2,
                        'flag': innerPropFlag,
                        'value': innerPropValue
                    };
                } else if (node[subNode.name] === undefined) {
                    if (typeof subNode.id === 'number') {
                        node[subNode.name] = {};
                        node[subNode.name][subNode.id] = subNode;
                    } else {
                        node[subNode.name] = subNode;
                    }
                } else {
                    if (subNode.name === 'PoseNode') {
                        if (!Array.isArray(node[subNode.name])) {
                            node[subNode.name] = [node[subNode.name]];
                        }
                        node[subNode.name].push(subNode);
                    } else if (node[subNode.name][subNode.id] === undefined) {
                        node[subNode.name][subNode.id] = subNode;
                    }
                }
            },
            parseProperty: function (reader) {
                var type = reader.getString(1);
                switch (type) {
                case 'C':
                    return reader.getBoolean();
                case 'D':
                    return reader.getFloat64();
                case 'F':
                    return reader.getFloat32();
                case 'I':
                    return reader.getInt32();
                case 'L':
                    return reader.getInt64();
                case 'R':
                    var length = reader.getUint32();
                    return reader.getArrayBuffer(length);
                case 'S':
                    var length = reader.getUint32();
                    return reader.getString(length);
                case 'Y':
                    return reader.getInt16();
                case 'b':
                case 'c':
                case 'd':
                case 'f':
                case 'i':
                case 'l':
                    var arrayLength = reader.getUint32();
                    var encoding = reader.getUint32();
                    var compressedLength = reader.getUint32();
                    if (encoding === 0) {
                        switch (type) {
                        case 'b':
                        case 'c':
                            return reader.getBooleanArray(arrayLength);
                        case 'd':
                            return reader.getFloat64Array(arrayLength);
                        case 'f':
                            return reader.getFloat32Array(arrayLength);
                        case 'i':
                            return reader.getInt32Array(arrayLength);
                        case 'l':
                            return reader.getInt64Array(arrayLength);
                        }
                    }
                    //if (typeof b.Zlib === 'undefined') {
                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');
                    //}
                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));
                    var reader2 = new BinaryReader(inflate.decompress().buffer);
                    switch (type) {
                    case 'b':
                    case 'c':
                        return reader2.getBooleanArray(arrayLength);
                    case 'd':
                        return reader2.getFloat64Array(arrayLength);
                    case 'f':
                        return reader2.getFloat32Array(arrayLength);
                    case 'i':
                        return reader2.getInt32Array(arrayLength);
                    case 'l':
                        return reader2.getInt64Array(arrayLength);
                    }
                default:
                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);
                }
            }
        };
        function BinaryReader(buffer, littleEndian) {
            this.dv = new DataView(buffer);
            this.offset = 0;
            this.littleEndian = littleEndian !== undefined ? littleEndian : true;
        }
        BinaryReader.prototype = {
            constructor: BinaryReader,
            getOffset: function () {
                return this.offset;
            },
            size: function () {
                return this.dv.buffer.byteLength;
            },
            skip: function (length) {
                this.offset += length;
            },
            getBoolean: function () {
                return (this.getUint8() & 1) === 1;
            },
            getBooleanArray: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getBoolean());
                }
                return a;
            },
            getUint8: function () {
                var value = this.dv.getUint8(this.offset);
                this.offset += 1;
                return value;
            },
            getInt16: function () {
                var value = this.dv.getInt16(this.offset, this.littleEndian);
                this.offset += 2;
                return value;
            },
            getInt32: function () {
                var value = this.dv.getInt32(this.offset, this.littleEndian);
                this.offset += 4;
                return value;
            },
            getInt32Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getInt32());
                }
                return a;
            },
            getUint32: function () {
                var value = this.dv.getUint32(this.offset, this.littleEndian);
                this.offset += 4;
                return value;
            },
            getInt64: function () {
                var low, high;
                if (this.littleEndian) {
                    low = this.getUint32();
                    high = this.getUint32();
                } else {
                    high = this.getUint32();
                    low = this.getUint32();
                }
                if (high & 2147483648) {
                    high = ~high & 4294967295;
                    low = ~low & 4294967295;
                    if (low === 4294967295)
                        high = high + 1 & 4294967295;
                    low = low + 1 & 4294967295;
                    return -(high * 4294967296 + low);
                }
                return high * 4294967296 + low;
            },
            getInt64Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getInt64());
                }
                return a;
            },
            getUint64: function () {
                var low, high;
                if (this.littleEndian) {
                    low = this.getUint32();
                    high = this.getUint32();
                } else {
                    high = this.getUint32();
                    low = this.getUint32();
                }
                return high * 4294967296 + low;
            },
            getFloat32: function () {
                var value = this.dv.getFloat32(this.offset, this.littleEndian);
                this.offset += 4;
                return value;
            },
            getFloat32Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getFloat32());
                }
                return a;
            },
            getFloat64: function () {
                var value = this.dv.getFloat64(this.offset, this.littleEndian);
                this.offset += 8;
                return value;
            },
            getFloat64Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getFloat64());
                }
                return a;
            },
            getArrayBuffer: function (size) {
                var value = this.dv.buffer.slice(this.offset, this.offset + size);
                this.offset += size;
                return value;
            },
            getString: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a[i] = this.getUint8();
                }
                var nullByte = a.indexOf(0);
                if (nullByte >= 0)
                    a = a.slice(0, nullByte);
                return THREE.LoaderUtils.decodeText(new Uint8Array(a));
            }
        };
        function FBXTree() {
        }
        FBXTree.prototype = {
            constructor: FBXTree,
            add: function (key, val) {
                this[key] = val;
            }
        };
        function isFbxFormatBinary(buffer) {
            var CORRECT = 'Kaydara FBX Binary  \0';
            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);
        }
        function isFbxFormatASCII(text) {
            var CORRECT = [
                'K',
                'a',
                'y',
                'd',
                'a',
                'r',
                'a',
                '\\',
                'F',
                'B',
                'X',
                '\\',
                'B',
                'i',
                'n',
                'a',
                'r',
                'y',
                '\\',
                '\\'
            ];
            var cursor = 0;
            function read(offset) {
                var result = text[offset - 1];
                text = text.slice(cursor + offset);
                cursor++;
                return result;
            }
            for (var i = 0; i < CORRECT.length; ++i) {
                var num = read(1);
                if (num === CORRECT[i]) {
                    return false;
                }
            }
            return true;
        }
        function getFbxVersion(text) {
            var versionRegExp = /FBXVersion: (\d+)/;
            var match = text.match(versionRegExp);
            if (match) {
                var version = parseInt(match[1]);
                return version;
            }
            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');
        }
        function convertFBXTimeToSeconds(time) {
            return time / 46186158000;
        }
        var dataArray = [];
        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
            var index;
            switch (infoObject.mappingType) {
            case 'ByPolygonVertex':
                index = polygonVertexIndex;
                break;
            case 'ByPolygon':
                index = polygonIndex;
                break;
            case 'ByVertice':
                index = vertexIndex;
                break;
            case 'AllSame':
                index = infoObject.indices[0];
                break;
            default:
                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);
            }
            if (infoObject.referenceType === 'IndexToDirect')
                index = infoObject.indices[index];
            var from = index * infoObject.dataSize;
            var to = from + infoObject.dataSize;
            return slice(dataArray, infoObject.buffer, from, to);
        }
        var tempEuler = new THREE.Euler();
        var tempVec = new THREE.Vector3();
        function generateTransform(transformData) {
            var lTranslationM = new THREE.Matrix4();
            var lPreRotationM = new THREE.Matrix4();
            var lRotationM = new THREE.Matrix4();
            var lPostRotationM = new THREE.Matrix4();
            var lScalingM = new THREE.Matrix4();
            var lScalingPivotM = new THREE.Matrix4();
            var lScalingOffsetM = new THREE.Matrix4();
            var lRotationOffsetM = new THREE.Matrix4();
            var lRotationPivotM = new THREE.Matrix4();
            var lParentGX = new THREE.Matrix4();
            var lGlobalT = new THREE.Matrix4();
            var inheritType = transformData.inheritType ? transformData.inheritType : 0;
            if (transformData.translation)
                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));
            if (transformData.preRotation) {
                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);
                array.push(transformData.eulerOrder);
                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
            }
            if (transformData.rotation) {
                var array = transformData.rotation.map(THREE.MathUtils.degToRad);
                array.push(transformData.eulerOrder);
                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
            }
            if (transformData.postRotation) {
                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);
                array.push(transformData.eulerOrder);
                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
            }
            if (transformData.scale)
                lScalingM.scale(tempVec.fromArray(transformData.scale));
            if (transformData.scalingOffset)
                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));
            if (transformData.scalingPivot)
                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));
            if (transformData.rotationOffset)
                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));
            if (transformData.rotationPivot)
                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));
            if (transformData.parentMatrixWorld)
                lParentGX = transformData.parentMatrixWorld;
            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);
            var lParentGRM = new THREE.Matrix4();
            lParentGX.extractRotation(lParentGRM);
            var lParentTM = new THREE.Matrix4();
            var lLSM;
            var lParentGSM;
            var lParentGRSM;
            lParentTM.copyPosition(lParentGX);
            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);
            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);
            lLSM = lScalingM;
            var lGlobalRS;
            if (inheritType === 0) {
                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);
            } else if (inheritType === 1) {
                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);
            } else {
                var lParentLSM = new THREE.Matrix4().copy(lScalingM);
                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));
                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);
            }
            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));
            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);
            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);
            lGlobalT.copyPosition(lGlobalTranslation);
            lTransform = lGlobalT.multiply(lGlobalRS);
            return lTransform;
        }
        function getEulerOrder(order) {
            order = order || 0;
            var enums = [
                'ZYX',
                'YZX',
                'XZY',
                'ZXY',
                'YXZ',
                'XYZ'
            ];
            if (order === 6) {
                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');
                return enums[0];
            }
            return enums[order];
        }
        function parseNumberArray(value) {
            var array = value.split(',').map(function (val) {
                return parseFloat(val);
            });
            return array;
        }
        function convertArrayBufferToString(buffer, from, to) {
            if (from === undefined)
                from = 0;
            if (to === undefined)
                to = buffer.byteLength;
            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));
        }
        function append(a, b) {
            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {
                a[j] = b[i];
            }
        }
        function slice(a, b, from, to) {
            for (var i = from, j = 0; i < to; i++, j++) {
                a[j] = b[i];
            }
            return a;
        }
        function inject(a1, index, a2) {
            return a1.slice(0, index).concat(a2).concat(a1.slice(index));
        }
        return FBXLoader;
    }();
    return FBXLoader;
});
define('skylark-threejs-ex/loaders/GCodeLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var GCodeLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.splitLayer = false;
    };
    GCodeLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: GCodeLoader,
        load: function (url, onLoad, onProgress, onError) {
            var self = this;
            var loader = new THREE.FileLoader(self.manager);
            loader.setPath(self.path);
            loader.load(url, function (text) {
                onLoad(self.parse(text));
            }, onProgress, onError);
        },
        parse: function (data) {
            var state = {
                x: 0,
                y: 0,
                z: 0,
                e: 0,
                f: 0,
                extruding: false,
                relative: false
            };
            var layers = [];
            var currentLayer = undefined;
            var pathMaterial = new THREE.LineBasicMaterial({ color: 16711680 });
            pathMaterial.name = 'path';
            var extrudingMaterial = new THREE.LineBasicMaterial({ color: 65280 });
            extrudingMaterial.name = 'extruded';
            function newLayer(line) {
                currentLayer = {
                    vertex: [],
                    pathVertex: [],
                    z: line.z
                };
                layers.push(currentLayer);
            }
            function addSegment(p1, p2) {
                if (currentLayer === undefined) {
                    newLayer(p1);
                }
                if (line.extruding) {
                    currentLayer.vertex.push(p1.x, p1.y, p1.z);
                    currentLayer.vertex.push(p2.x, p2.y, p2.z);
                } else {
                    currentLayer.pathVertex.push(p1.x, p1.y, p1.z);
                    currentLayer.pathVertex.push(p2.x, p2.y, p2.z);
                }
            }
            function delta(v1, v2) {
                return state.relative ? v2 : v2 - v1;
            }
            function absolute(v1, v2) {
                return state.relative ? v1 + v2 : v2;
            }
            var lines = data.replace(/;.+/g, '').split('\n');
            for (var i = 0; i < lines.length; i++) {
                var tokens = lines[i].split(' ');
                var cmd = tokens[0].toUpperCase();
                var args = {};
                tokens.splice(1).forEach(function (token) {
                    if (token[0] !== undefined) {
                        var key = token[0].toLowerCase();
                        var value = parseFloat(token.substring(1));
                        args[key] = value;
                    }
                });
                if (cmd === 'G0' || cmd === 'G1') {
                    var line = {
                        x: args.x !== undefined ? absolute(state.x, args.x) : state.x,
                        y: args.y !== undefined ? absolute(state.y, args.y) : state.y,
                        z: args.z !== undefined ? absolute(state.z, args.z) : state.z,
                        e: args.e !== undefined ? absolute(state.e, args.e) : state.e,
                        f: args.f !== undefined ? absolute(state.f, args.f) : state.f
                    };
                    if (delta(state.e, line.e) > 0) {
                        line.extruding = delta(state.e, line.e) > 0;
                        if (currentLayer == undefined || line.z != currentLayer.z) {
                            newLayer(line);
                        }
                    }
                    addSegment(state, line);
                    state = line;
                } else if (cmd === 'G2' || cmd === 'G3') {
                } else if (cmd === 'G90') {
                    state.relative = false;
                } else if (cmd === 'G91') {
                    state.relative = true;
                } else if (cmd === 'G92') {
                    var line = state;
                    line.x = args.x !== undefined ? args.x : line.x;
                    line.y = args.y !== undefined ? args.y : line.y;
                    line.z = args.z !== undefined ? args.z : line.z;
                    line.e = args.e !== undefined ? args.e : line.e;
                    state = line;
                } else {
                }
            }
            function addObject(vertex, extruding) {
                var geometry = new THREE.BufferGeometry();
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertex, 3));
                var segments = new THREE.LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);
                segments.name = 'layer' + i;
                object.add(segments);
            }
            var object = new THREE.Group();
            object.name = 'gcode';
            if (this.splitLayer) {
                for (var i = 0; i < layers.length; i++) {
                    var layer = layers[i];
                    addObject(layer.vertex, true);
                    addObject(layer.pathVertex, false);
                }
            } else {
                var vertex = [], pathVertex = [];
                for (var i = 0; i < layers.length; i++) {
                    var layer = layers[i];
                    vertex = vertex.concat(layer.vertex);
                    pathVertex = pathVertex.concat(layer.pathVertex);
                }
                addObject(vertex, true);
                addObject(pathVertex, false);
            }
            object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));
            return object;
        }
    });
    return GCodeLoader;
});
define('skylark-threejs-ex/loaders/GLTFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var GLTFLoader = function () {
        function GLTFLoader(manager) {
            THREE.Loader.call(this, manager);
            this.dracoLoader = null;
            this.ddsLoader = null;
        }
        GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: GLTFLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var resourcePath;
                if (this.resourcePath !== '') {
                    resourcePath = this.resourcePath;
                } else if (this.path !== '') {
                    resourcePath = this.path;
                } else {
                    resourcePath = THREE.LoaderUtils.extractUrlBase(url);
                }
                scope.manager.itemStart(url);
                var _onError = function (e) {
                    if (onError) {
                        onError(e);
                    } else {
                        console.error(e);
                    }
                    scope.manager.itemError(url);
                    scope.manager.itemEnd(url);
                };
                var loader = new THREE.FileLoader(scope.manager);
                loader.setPath(this.path);
                loader.setResponseType('arraybuffer');
                if (scope.crossOrigin === 'use-credentials') {
                    loader.setWithCredentials(true);
                }
                loader.load(url, function (data) {
                    try {
                        scope.parse(data, resourcePath, function (gltf) {
                            onLoad(gltf);
                            scope.manager.itemEnd(url);
                        }, _onError);
                    } catch (e) {
                        _onError(e);
                    }
                }, onProgress, _onError);
            },
            setDRACOLoader: function (dracoLoader) {
                this.dracoLoader = dracoLoader;
                return this;
            },
            setDDSLoader: function (ddsLoader) {
                this.ddsLoader = ddsLoader;
                return this;
            },
            parse: function (data, path, onLoad, onError) {
                var content;
                var extensions = {};
                if (typeof data === 'string') {
                    content = data;
                } else {
                    var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));
                    if (magic === BINARY_EXTENSION_HEADER_MAGIC) {
                        try {
                            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);
                        } catch (error) {
                            if (onError)
                                onError(error);
                            return;
                        }
                        content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;
                    } else {
                        content = THREE.LoaderUtils.decodeText(new Uint8Array(data));
                    }
                }
                var json = JSON.parse(content);
                if (json.asset === undefined || json.asset.version[0] < 2) {
                    if (onError)
                        onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));
                    return;
                }
                if (json.extensionsUsed) {
                    for (var i = 0; i < json.extensionsUsed.length; ++i) {
                        var extensionName = json.extensionsUsed[i];
                        var extensionsRequired = json.extensionsRequired || [];
                        switch (extensionName) {
                        case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:
                            extensions[extensionName] = new GLTFLightsExtension(json);
                            break;
                        case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:
                            extensions[extensionName] = new GLTFMaterialsClearcoatExtension();
                            break;
                        case EXTENSIONS.KHR_MATERIALS_UNLIT:
                            extensions[extensionName] = new GLTFMaterialsUnlitExtension();
                            break;
                        case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                            extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();
                            break;
                        case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
                            extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);
                            break;
                        case EXTENSIONS.MSFT_TEXTURE_DDS:
                            extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);
                            break;
                        case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
                            extensions[extensionName] = new GLTFTextureTransformExtension();
                            break;
                        case EXTENSIONS.KHR_MESH_QUANTIZATION:
                            extensions[extensionName] = new GLTFMeshQuantizationExtension();
                            break;
                        default:
                            if (extensionsRequired.indexOf(extensionName) >= 0) {
                                console.warn('THREE.GLTFLoader: Unknown extension "' + extensionName + '".');
                            }
                        }
                    }
                }
                var parser = new GLTFParser(json, extensions, {
                    path: path || this.resourcePath || '',
                    crossOrigin: this.crossOrigin,
                    manager: this.manager
                });
                parser.parse(onLoad, onError);
            }
        });
        function GLTFRegistry() {
            var objects = {};
            return {
                get: function (key) {
                    return objects[key];
                },
                add: function (key, object) {
                    objects[key] = object;
                },
                remove: function (key) {
                    delete objects[key];
                },
                removeAll: function () {
                    objects = {};
                }
            };
        }
        var EXTENSIONS = {
            KHR_BINARY_GLTF: 'KHR_binary_glTF',
            KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',
            KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',
            KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',
            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',
            KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',
            KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',
            KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',
            MSFT_TEXTURE_DDS: 'MSFT_texture_dds'
        };
        function GLTFTextureDDSExtension(ddsLoader) {
            if (!ddsLoader) {
                throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader');
            }
            this.name = EXTENSIONS.MSFT_TEXTURE_DDS;
            this.ddsLoader = ddsLoader;
        }
        function GLTFLightsExtension(json) {
            this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;
            var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};
            this.lightDefs = extension.lights || [];
        }
        GLTFLightsExtension.prototype.loadLight = function (lightIndex) {
            var lightDef = this.lightDefs[lightIndex];
            var lightNode;
            var color = new THREE.Color(16777215);
            if (lightDef.color !== undefined)
                color.fromArray(lightDef.color);
            var range = lightDef.range !== undefined ? lightDef.range : 0;
            switch (lightDef.type) {
            case 'directional':
                lightNode = new THREE.DirectionalLight(color);
                lightNode.target.position.set(0, 0, -1);
                lightNode.add(lightNode.target);
                break;
            case 'point':
                lightNode = new THREE.PointLight(color);
                lightNode.distance = range;
                break;
            case 'spot':
                lightNode = new THREE.SpotLight(color);
                lightNode.distance = range;
                lightDef.spot = lightDef.spot || {};
                lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;
                lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4;
                lightNode.angle = lightDef.spot.outerConeAngle;
                lightNode.penumbra = 1 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
                lightNode.target.position.set(0, 0, -1);
                lightNode.add(lightNode.target);
                break;
            default:
                throw new Error('THREE.GLTFLoader: Unexpected light type, "' + lightDef.type + '".');
            }
            lightNode.position.set(0, 0, 0);
            lightNode.decay = 2;
            if (lightDef.intensity !== undefined)
                lightNode.intensity = lightDef.intensity;
            lightNode.name = lightDef.name || 'light_' + lightIndex;
            return Promise.resolve(lightNode);
        };
        function GLTFMaterialsUnlitExtension() {
            this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;
        }
        GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {
            return THREE.MeshBasicMaterial;
        };
        GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {
            var pending = [];
            materialParams.color = new THREE.Color(1, 1, 1);
            materialParams.opacity = 1;
            var metallicRoughness = materialDef.pbrMetallicRoughness;
            if (metallicRoughness) {
                if (Array.isArray(metallicRoughness.baseColorFactor)) {
                    var array = metallicRoughness.baseColorFactor;
                    materialParams.color.fromArray(array);
                    materialParams.opacity = array[3];
                }
                if (metallicRoughness.baseColorTexture !== undefined) {
                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));
                }
            }
            return Promise.all(pending);
        };
        function GLTFMaterialsClearcoatExtension() {
            this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;
        }
        GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {
            return THREE.MeshPhysicalMaterial;
        };
        GLTFMaterialsClearcoatExtension.prototype.extendParams = function (materialParams, materialDef, parser) {
            var pending = [];
            var extension = materialDef.extensions[this.name];
            if (extension.clearcoatFactor !== undefined) {
                materialParams.clearcoat = extension.clearcoatFactor;
            }
            if (extension.clearcoatTexture !== undefined) {
                pending.push(parser.assignTexture(materialParams, 'clearcoatMap', extension.clearcoatTexture));
            }
            if (extension.clearcoatRoughnessFactor !== undefined) {
                materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;
            }
            if (extension.clearcoatRoughnessTexture !== undefined) {
                pending.push(parser.assignTexture(materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture));
            }
            if (extension.clearcoatNormalTexture !== undefined) {
                pending.push(parser.assignTexture(materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture));
                if (extension.clearcoatNormalTexture.scale !== undefined) {
                    var scale = extension.clearcoatNormalTexture.scale;
                    materialParams.clearcoatNormalScale = new THREE.Vector2(scale, scale);
                }
            }
            return Promise.all(pending);
        };
        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
        var BINARY_EXTENSION_HEADER_LENGTH = 12;
        var BINARY_EXTENSION_CHUNK_TYPES = {
            JSON: 1313821514,
            BIN: 5130562
        };
        function GLTFBinaryExtension(data) {
            this.name = EXTENSIONS.KHR_BINARY_GLTF;
            this.content = null;
            this.body = null;
            var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);
            this.header = {
                magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),
                version: headerView.getUint32(4, true),
                length: headerView.getUint32(8, true)
            };
            if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {
                throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');
            } else if (this.header.version < 2) {
                throw new Error('THREE.GLTFLoader: Legacy binary file detected.');
            }
            var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);
            var chunkIndex = 0;
            while (chunkIndex < chunkView.byteLength) {
                var chunkLength = chunkView.getUint32(chunkIndex, true);
                chunkIndex += 4;
                var chunkType = chunkView.getUint32(chunkIndex, true);
                chunkIndex += 4;
                if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {
                    var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);
                    this.content = THREE.LoaderUtils.decodeText(contentArray);
                } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {
                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
                    this.body = data.slice(byteOffset, byteOffset + chunkLength);
                }
                chunkIndex += chunkLength;
            }
            if (this.content === null) {
                throw new Error('THREE.GLTFLoader: JSON content not found.');
            }
        }
        function GLTFDracoMeshCompressionExtension(json, dracoLoader) {
            if (!dracoLoader) {
                throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');
            }
            this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
            this.json = json;
            this.dracoLoader = dracoLoader;
            this.dracoLoader.preload();
        }
        GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {
            var json = this.json;
            var dracoLoader = this.dracoLoader;
            var bufferViewIndex = primitive.extensions[this.name].bufferView;
            var gltfAttributeMap = primitive.extensions[this.name].attributes;
            var threeAttributeMap = {};
            var attributeNormalizedMap = {};
            var attributeTypeMap = {};
            for (var attributeName in gltfAttributeMap) {
                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();
                threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];
            }
            for (attributeName in primitive.attributes) {
                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();
                if (gltfAttributeMap[attributeName] !== undefined) {
                    var accessorDef = json.accessors[primitive.attributes[attributeName]];
                    var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
                    attributeTypeMap[threeAttributeName] = componentType;
                    attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;
                }
            }
            return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {
                return new Promise(function (resolve) {
                    dracoLoader.decodeDracoFile(bufferView, function (geometry) {
                        for (var attributeName in geometry.attributes) {
                            var attribute = geometry.attributes[attributeName];
                            var normalized = attributeNormalizedMap[attributeName];
                            if (normalized !== undefined)
                                attribute.normalized = normalized;
                        }
                        resolve(geometry);
                    }, threeAttributeMap, attributeTypeMap);
                });
            });
        };
        function GLTFTextureTransformExtension() {
            this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;
        }
        GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {
            texture = texture.clone();
            if (transform.offset !== undefined) {
                texture.offset.fromArray(transform.offset);
            }
            if (transform.rotation !== undefined) {
                texture.rotation = transform.rotation;
            }
            if (transform.scale !== undefined) {
                texture.repeat.fromArray(transform.scale);
            }
            if (transform.texCoord !== undefined) {
                console.warn('THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.');
            }
            texture.needsUpdate = true;
            return texture;
        };
        function GLTFMeshStandardSGMaterial(params) {
            THREE.MeshStandardMaterial.call(this);
            this.isGLTFSpecularGlossinessMaterial = true;
            var specularMapParsFragmentChunk = [
                '#ifdef USE_SPECULARMAP',
                '\tuniform sampler2D specularMap;',
                '#endif'
            ].join('\n');
            var glossinessMapParsFragmentChunk = [
                '#ifdef USE_GLOSSINESSMAP',
                '\tuniform sampler2D glossinessMap;',
                '#endif'
            ].join('\n');
            var specularMapFragmentChunk = [
                'vec3 specularFactor = specular;',
                '#ifdef USE_SPECULARMAP',
                '\tvec4 texelSpecular = texture2D( specularMap, vUv );',
                '\ttexelSpecular = sRGBToLinear( texelSpecular );',
                '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                '\tspecularFactor *= texelSpecular.rgb;',
                '#endif'
            ].join('\n');
            var glossinessMapFragmentChunk = [
                'float glossinessFactor = glossiness;',
                '#ifdef USE_GLOSSINESSMAP',
                '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                '\tglossinessFactor *= texelGlossiness.a;',
                '#endif'
            ].join('\n');
            var lightPhysicalFragmentChunk = [
                'PhysicalMaterial material;',
                'material.diffuseColor = diffuseColor.rgb;',
                'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',
                'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',
                'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',
                'material.specularRoughness += geometryRoughness;',
                'material.specularRoughness = min( material.specularRoughness, 1.0 );',
                'material.specularColor = specularFactor.rgb;'
            ].join('\n');
            var uniforms = {
                specular: { value: new THREE.Color().setHex(16777215) },
                glossiness: { value: 1 },
                specularMap: { value: null },
                glossinessMap: { value: null }
            };
            this._extraUniforms = uniforms;
            this.onBeforeCompile = function (shader) {
                for (var uniformName in uniforms) {
                    shader.uniforms[uniformName] = uniforms[uniformName];
                }
                shader.fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;');
                shader.fragmentShader = shader.fragmentShader.replace('uniform float metalness;', 'uniform float glossiness;');
                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_fragment>', specularMapFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);
            };
            Object.defineProperties(this, {
                specular: {
                    get: function () {
                        return uniforms.specular.value;
                    },
                    set: function (v) {
                        uniforms.specular.value = v;
                    }
                },
                specularMap: {
                    get: function () {
                        return uniforms.specularMap.value;
                    },
                    set: function (v) {
                        uniforms.specularMap.value = v;
                    }
                },
                glossiness: {
                    get: function () {
                        return uniforms.glossiness.value;
                    },
                    set: function (v) {
                        uniforms.glossiness.value = v;
                    }
                },
                glossinessMap: {
                    get: function () {
                        return uniforms.glossinessMap.value;
                    },
                    set: function (v) {
                        uniforms.glossinessMap.value = v;
                        if (v) {
                            this.defines.USE_GLOSSINESSMAP = '';
                            this.defines.USE_ROUGHNESSMAP = '';
                        } else {
                            delete this.defines.USE_ROUGHNESSMAP;
                            delete this.defines.USE_GLOSSINESSMAP;
                        }
                    }
                }
            });
            delete this.metalness;
            delete this.roughness;
            delete this.metalnessMap;
            delete this.roughnessMap;
            this.setValues(params);
        }
        GLTFMeshStandardSGMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);
        GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;
        GLTFMeshStandardSGMaterial.prototype.copy = function (source) {
            THREE.MeshStandardMaterial.prototype.copy.call(this, source);
            this.specularMap = source.specularMap;
            this.specular.copy(source.specular);
            this.glossinessMap = source.glossinessMap;
            this.glossiness = source.glossiness;
            delete this.metalness;
            delete this.roughness;
            delete this.metalnessMap;
            delete this.roughnessMap;
            return this;
        };
        function GLTFMaterialsPbrSpecularGlossinessExtension() {
            return {
                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
                specularGlossinessParams: [
                    'color',
                    'map',
                    'lightMap',
                    'lightMapIntensity',
                    'aoMap',
                    'aoMapIntensity',
                    'emissive',
                    'emissiveIntensity',
                    'emissiveMap',
                    'bumpMap',
                    'bumpScale',
                    'normalMap',
                    'normalMapType',
                    'displacementMap',
                    'displacementScale',
                    'displacementBias',
                    'specularMap',
                    'specular',
                    'glossinessMap',
                    'glossiness',
                    'alphaMap',
                    'envMap',
                    'envMapIntensity',
                    'refractionRatio'
                ],
                getMaterialType: function () {
                    return GLTFMeshStandardSGMaterial;
                },
                extendParams: function (materialParams, materialDef, parser) {
                    var pbrSpecularGlossiness = materialDef.extensions[this.name];
                    materialParams.color = new THREE.Color(1, 1, 1);
                    materialParams.opacity = 1;
                    var pending = [];
                    if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {
                        var array = pbrSpecularGlossiness.diffuseFactor;
                        materialParams.color.fromArray(array);
                        materialParams.opacity = array[3];
                    }
                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {
                        pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));
                    }
                    materialParams.emissive = new THREE.Color(0, 0, 0);
                    materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1;
                    materialParams.specular = new THREE.Color(1, 1, 1);
                    if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {
                        materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);
                    }
                    if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {
                        var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;
                        pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));
                        pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));
                    }
                    return Promise.all(pending);
                },
                createMaterial: function (materialParams) {
                    var material = new GLTFMeshStandardSGMaterial(materialParams);
                    material.fog = true;
                    material.color = materialParams.color;
                    material.map = materialParams.map === undefined ? null : materialParams.map;
                    material.lightMap = null;
                    material.lightMapIntensity = 1;
                    material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;
                    material.aoMapIntensity = 1;
                    material.emissive = materialParams.emissive;
                    material.emissiveIntensity = 1;
                    material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;
                    material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;
                    material.bumpScale = 1;
                    material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;
                    material.normalMapType = THREE.TangentSpaceNormalMap;
                    if (materialParams.normalScale)
                        material.normalScale = materialParams.normalScale;
                    material.displacementMap = null;
                    material.displacementScale = 1;
                    material.displacementBias = 0;
                    material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;
                    material.specular = materialParams.specular;
                    material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;
                    material.glossiness = materialParams.glossiness;
                    material.alphaMap = null;
                    material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;
                    material.envMapIntensity = 1;
                    material.refractionRatio = 0.98;
                    return material;
                }
            };
        }
        function GLTFMeshQuantizationExtension() {
            this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;
        }
        function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
        }
        GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);
        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;
        GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {
            var result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;
            for (var i = 0; i !== valueSize; i++) {
                result[i] = values[offset + i];
            }
            return result;
        };
        GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;
        GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;
        GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {
            var result = this.resultBuffer;
            var values = this.sampleValues;
            var stride = this.valueSize;
            var stride2 = stride * 2;
            var stride3 = stride * 3;
            var td = t1 - t0;
            var p = (t - t0) / td;
            var pp = p * p;
            var ppp = pp * p;
            var offset1 = i1 * stride3;
            var offset0 = offset1 - stride3;
            var s2 = -2 * ppp + 3 * pp;
            var s3 = ppp - pp;
            var s0 = 1 - s2;
            var s1 = s3 - pp + p;
            for (var i = 0; i !== stride; i++) {
                var p0 = values[offset0 + i + stride];
                var m0 = values[offset0 + i + stride2] * td;
                var p1 = values[offset1 + i + stride];
                var m1 = values[offset1 + i] * td;
                result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;
            }
            return result;
        };
        var WEBGL_CONSTANTS = {
            FLOAT: 5126,
            FLOAT_MAT3: 35675,
            FLOAT_MAT4: 35676,
            FLOAT_VEC2: 35664,
            FLOAT_VEC3: 35665,
            FLOAT_VEC4: 35666,
            LINEAR: 9729,
            REPEAT: 10497,
            SAMPLER_2D: 35678,
            POINTS: 0,
            LINES: 1,
            LINE_LOOP: 2,
            LINE_STRIP: 3,
            TRIANGLES: 4,
            TRIANGLE_STRIP: 5,
            TRIANGLE_FAN: 6,
            UNSIGNED_BYTE: 5121,
            UNSIGNED_SHORT: 5123
        };
        var WEBGL_COMPONENT_TYPES = {
            5120: Int8Array,
            5121: Uint8Array,
            5122: Int16Array,
            5123: Uint16Array,
            5125: Uint32Array,
            5126: Float32Array
        };
        var WEBGL_FILTERS = {
            9728: THREE.NearestFilter,
            9729: THREE.LinearFilter,
            9984: THREE.NearestMipmapNearestFilter,
            9985: THREE.LinearMipmapNearestFilter,
            9986: THREE.NearestMipmapLinearFilter,
            9987: THREE.LinearMipmapLinearFilter
        };
        var WEBGL_WRAPPINGS = {
            33071: THREE.ClampToEdgeWrapping,
            33648: THREE.MirroredRepeatWrapping,
            10497: THREE.RepeatWrapping
        };
        var WEBGL_TYPE_SIZES = {
            'SCALAR': 1,
            'VEC2': 2,
            'VEC3': 3,
            'VEC4': 4,
            'MAT2': 4,
            'MAT3': 9,
            'MAT4': 16
        };
        var ATTRIBUTES = {
            POSITION: 'position',
            NORMAL: 'normal',
            TANGENT: 'tangent',
            TEXCOORD_0: 'uv',
            TEXCOORD_1: 'uv2',
            COLOR_0: 'color',
            WEIGHTS_0: 'skinWeight',
            JOINTS_0: 'skinIndex'
        };
        var PATH_PROPERTIES = {
            scale: 'scale',
            translation: 'position',
            rotation: 'quaternion',
            weights: 'morphTargetInfluences'
        };
        var INTERPOLATION = {
            CUBICSPLINE: undefined,
            LINEAR: THREE.InterpolateLinear,
            STEP: THREE.InterpolateDiscrete
        };
        var ALPHA_MODES = {
            OPAQUE: 'OPAQUE',
            MASK: 'MASK',
            BLEND: 'BLEND'
        };
        var MIME_TYPE_FORMATS = {
            'image/png': THREE.RGBAFormat,
            'image/jpeg': THREE.RGBFormat
        };
        function resolveURL(url, path) {
            if (typeof url !== 'string' || url === '')
                return '';
            if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
                path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
            }
            if (/^(https?:)?\/\//i.test(url))
                return url;
            if (/^data:.*,.*$/i.test(url))
                return url;
            if (/^blob:.*$/i.test(url))
                return url;
            return path + url;
        }
        function createDefaultMaterial(cache) {
            if (cache['DefaultMaterial'] === undefined) {
                cache['DefaultMaterial'] = new THREE.MeshStandardMaterial({
                    color: 16777215,
                    emissive: 0,
                    metalness: 1,
                    roughness: 1,
                    transparent: false,
                    depthTest: true,
                    side: THREE.FrontSide
                });
            }
            return cache['DefaultMaterial'];
        }
        function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {
            for (var name in objectDef.extensions) {
                if (knownExtensions[name] === undefined) {
                    object.userData.gltfExtensions = object.userData.gltfExtensions || {};
                    object.userData.gltfExtensions[name] = objectDef.extensions[name];
                }
            }
        }
        function assignExtrasToUserData(object, gltfDef) {
            if (gltfDef.extras !== undefined) {
                if (typeof gltfDef.extras === 'object') {
                    Object.assign(object.userData, gltfDef.extras);
                } else {
                    console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);
                }
            }
        }
        function addMorphTargets(geometry, targets, parser) {
            var hasMorphPosition = false;
            var hasMorphNormal = false;
            for (var i = 0, il = targets.length; i < il; i++) {
                var target = targets[i];
                if (target.POSITION !== undefined)
                    hasMorphPosition = true;
                if (target.NORMAL !== undefined)
                    hasMorphNormal = true;
                if (hasMorphPosition && hasMorphNormal)
                    break;
            }
            if (!hasMorphPosition && !hasMorphNormal)
                return Promise.resolve(geometry);
            var pendingPositionAccessors = [];
            var pendingNormalAccessors = [];
            for (var i = 0, il = targets.length; i < il; i++) {
                var target = targets[i];
                if (hasMorphPosition) {
                    var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;
                    pendingPositionAccessors.push(pendingAccessor);
                }
                if (hasMorphNormal) {
                    var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;
                    pendingNormalAccessors.push(pendingAccessor);
                }
            }
            return Promise.all([
                Promise.all(pendingPositionAccessors),
                Promise.all(pendingNormalAccessors)
            ]).then(function (accessors) {
                var morphPositions = accessors[0];
                var morphNormals = accessors[1];
                if (hasMorphPosition)
                    geometry.morphAttributes.position = morphPositions;
                if (hasMorphNormal)
                    geometry.morphAttributes.normal = morphNormals;
                geometry.morphTargetsRelative = true;
                return geometry;
            });
        }
        function updateMorphTargets(mesh, meshDef) {
            mesh.updateMorphTargets();
            if (meshDef.weights !== undefined) {
                for (var i = 0, il = meshDef.weights.length; i < il; i++) {
                    mesh.morphTargetInfluences[i] = meshDef.weights[i];
                }
            }
            if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {
                var targetNames = meshDef.extras.targetNames;
                if (mesh.morphTargetInfluences.length === targetNames.length) {
                    mesh.morphTargetDictionary = {};
                    for (var i = 0, il = targetNames.length; i < il; i++) {
                        mesh.morphTargetDictionary[targetNames[i]] = i;
                    }
                } else {
                    console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');
                }
            }
        }
        function createPrimitiveKey(primitiveDef) {
            var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];
            var geometryKey;
            if (dracoExtension) {
                geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);
            } else {
                geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;
            }
            return geometryKey;
        }
        function createAttributesKey(attributes) {
            var attributesKey = '';
            var keys = Object.keys(attributes).sort();
            for (var i = 0, il = keys.length; i < il; i++) {
                attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';
            }
            return attributesKey;
        }
        function GLTFParser(json, extensions, options) {
            this.json = json || {};
            this.extensions = extensions || {};
            this.options = options || {};
            this.cache = new GLTFRegistry();
            this.primitiveCache = {};
            this.textureLoader = new THREE.TextureLoader(this.options.manager);
            this.textureLoader.setCrossOrigin(this.options.crossOrigin);
            this.fileLoader = new THREE.FileLoader(this.options.manager);
            this.fileLoader.setResponseType('arraybuffer');
            if (this.options.crossOrigin === 'use-credentials') {
                this.fileLoader.setWithCredentials(true);
            }
        }
        GLTFParser.prototype.parse = function (onLoad, onError) {
            var parser = this;
            var json = this.json;
            var extensions = this.extensions;
            this.cache.removeAll();
            this.markDefs();
            Promise.all([
                this.getDependencies('scene'),
                this.getDependencies('animation'),
                this.getDependencies('camera')
            ]).then(function (dependencies) {
                var result = {
                    scene: dependencies[0][json.scene || 0],
                    scenes: dependencies[0],
                    animations: dependencies[1],
                    cameras: dependencies[2],
                    asset: json.asset,
                    parser: parser,
                    userData: {}
                };
                addUnknownExtensionsToUserData(extensions, result, json);
                assignExtrasToUserData(result, json);
                onLoad(result);
            }).catch(onError);
        };
        GLTFParser.prototype.markDefs = function () {
            var nodeDefs = this.json.nodes || [];
            var skinDefs = this.json.skins || [];
            var meshDefs = this.json.meshes || [];
            var meshReferences = {};
            var meshUses = {};
            for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {
                var joints = skinDefs[skinIndex].joints;
                for (var i = 0, il = joints.length; i < il; i++) {
                    nodeDefs[joints[i]].isBone = true;
                }
            }
            for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {
                var nodeDef = nodeDefs[nodeIndex];
                if (nodeDef.mesh !== undefined) {
                    if (meshReferences[nodeDef.mesh] === undefined) {
                        meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;
                    }
                    meshReferences[nodeDef.mesh]++;
                    if (nodeDef.skin !== undefined) {
                        meshDefs[nodeDef.mesh].isSkinnedMesh = true;
                    }
                }
            }
            this.json.meshReferences = meshReferences;
            this.json.meshUses = meshUses;
        };
        GLTFParser.prototype.getDependency = function (type, index) {
            var cacheKey = type + ':' + index;
            var dependency = this.cache.get(cacheKey);
            if (!dependency) {
                switch (type) {
                case 'scene':
                    dependency = this.loadScene(index);
                    break;
                case 'node':
                    dependency = this.loadNode(index);
                    break;
                case 'mesh':
                    dependency = this.loadMesh(index);
                    break;
                case 'accessor':
                    dependency = this.loadAccessor(index);
                    break;
                case 'bufferView':
                    dependency = this.loadBufferView(index);
                    break;
                case 'buffer':
                    dependency = this.loadBuffer(index);
                    break;
                case 'material':
                    dependency = this.loadMaterial(index);
                    break;
                case 'texture':
                    dependency = this.loadTexture(index);
                    break;
                case 'skin':
                    dependency = this.loadSkin(index);
                    break;
                case 'animation':
                    dependency = this.loadAnimation(index);
                    break;
                case 'camera':
                    dependency = this.loadCamera(index);
                    break;
                case 'light':
                    dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);
                    break;
                default:
                    throw new Error('Unknown type: ' + type);
                }
                this.cache.add(cacheKey, dependency);
            }
            return dependency;
        };
        GLTFParser.prototype.getDependencies = function (type) {
            var dependencies = this.cache.get(type);
            if (!dependencies) {
                var parser = this;
                var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];
                dependencies = Promise.all(defs.map(function (def, index) {
                    return parser.getDependency(type, index);
                }));
                this.cache.add(type, dependencies);
            }
            return dependencies;
        };
        GLTFParser.prototype.loadBuffer = function (bufferIndex) {
            var bufferDef = this.json.buffers[bufferIndex];
            var loader = this.fileLoader;
            if (bufferDef.type && bufferDef.type !== 'arraybuffer') {
                throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');
            }
            if (bufferDef.uri === undefined && bufferIndex === 0) {
                return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);
            }
            var options = this.options;
            return new Promise(function (resolve, reject) {
                loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {
                    reject(new Error('THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".'));
                });
            });
        };
        GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {
            var bufferViewDef = this.json.bufferViews[bufferViewIndex];
            return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {
                var byteLength = bufferViewDef.byteLength || 0;
                var byteOffset = bufferViewDef.byteOffset || 0;
                return buffer.slice(byteOffset, byteOffset + byteLength);
            });
        };
        GLTFParser.prototype.loadAccessor = function (accessorIndex) {
            var parser = this;
            var json = this.json;
            var accessorDef = this.json.accessors[accessorIndex];
            if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {
                return Promise.resolve(null);
            }
            var pendingBufferViews = [];
            if (accessorDef.bufferView !== undefined) {
                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));
            } else {
                pendingBufferViews.push(null);
            }
            if (accessorDef.sparse !== undefined) {
                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));
                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));
            }
            return Promise.all(pendingBufferViews).then(function (bufferViews) {
                var bufferView = bufferViews[0];
                var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];
                var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
                var elementBytes = TypedArray.BYTES_PER_ELEMENT;
                var itemBytes = elementBytes * itemSize;
                var byteOffset = accessorDef.byteOffset || 0;
                var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;
                var normalized = accessorDef.normalized === true;
                var array, bufferAttribute;
                if (byteStride && byteStride !== itemBytes) {
                    var ibSlice = Math.floor(byteOffset / byteStride);
                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;
                    var ib = parser.cache.get(ibCacheKey);
                    if (!ib) {
                        array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);
                        ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);
                        parser.cache.add(ibCacheKey, ib);
                    }
                    bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);
                } else {
                    if (bufferView === null) {
                        array = new TypedArray(accessorDef.count * itemSize);
                    } else {
                        array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);
                    }
                    bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);
                }
                if (accessorDef.sparse !== undefined) {
                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];
                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;
                    var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);
                    var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);
                    if (bufferView !== null) {
                        bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);
                    }
                    for (var i = 0, il = sparseIndices.length; i < il; i++) {
                        var index = sparseIndices[i];
                        bufferAttribute.setX(index, sparseValues[i * itemSize]);
                        if (itemSize >= 2)
                            bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);
                        if (itemSize >= 3)
                            bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);
                        if (itemSize >= 4)
                            bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);
                        if (itemSize >= 5)
                            throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');
                    }
                }
                return bufferAttribute;
            });
        };
        GLTFParser.prototype.loadTexture = function (textureIndex) {
            var parser = this;
            var json = this.json;
            var options = this.options;
            var textureLoader = this.textureLoader;
            var URL = self.URL || self.webkitURL;
            var textureDef = json.textures[textureIndex];
            var textureExtensions = textureDef.extensions || {};
            var source;
            if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {
                source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];
            } else {
                source = json.images[textureDef.source];
            }
            var sourceURI = source.uri;
            var isObjectURL = false;
            if (source.bufferView !== undefined) {
                sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {
                    isObjectURL = true;
                    var blob = new Blob([bufferView], { type: source.mimeType });
                    sourceURI = URL.createObjectURL(blob);
                    return sourceURI;
                });
            }
            return Promise.resolve(sourceURI).then(function (sourceURI) {
                var loader = options.manager.getHandler(sourceURI);
                if (!loader) {
                    loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;
                }
                return new Promise(function (resolve, reject) {
                    loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);
                });
            }).then(function (texture) {
                if (isObjectURL === true) {
                    URL.revokeObjectURL(sourceURI);
                }
                texture.flipY = false;
                if (textureDef.name)
                    texture.name = textureDef.name;
                if (source.mimeType in MIME_TYPE_FORMATS) {
                    texture.format = MIME_TYPE_FORMATS[source.mimeType];
                }
                var samplers = json.samplers || {};
                var sampler = samplers[textureDef.sampler] || {};
                texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;
                texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;
                texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;
                texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;
                return texture;
            });
        };
        GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {
            var parser = this;
            return this.getDependency('texture', mapDef.index).then(function (texture) {
                if (!texture.isCompressedTexture) {
                    switch (mapName) {
                    case 'aoMap':
                    case 'emissiveMap':
                    case 'metalnessMap':
                    case 'normalMap':
                    case 'roughnessMap':
                        texture.format = THREE.RGBFormat;
                        break;
                    }
                }
                if (mapDef.texCoord !== undefined && mapDef.texCoord != 0 && !(mapName === 'aoMap' && mapDef.texCoord == 1)) {
                    console.warn('THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.');
                }
                if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {
                    var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;
                    if (transform) {
                        texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);
                    }
                }
                materialParams[mapName] = texture;
            });
        };
        GLTFParser.prototype.assignFinalMaterial = function (mesh) {
            var geometry = mesh.geometry;
            var material = mesh.material;
            var useVertexTangents = geometry.attributes.tangent !== undefined;
            var useVertexColors = geometry.attributes.color !== undefined;
            var useFlatShading = geometry.attributes.normal === undefined;
            var useSkinning = mesh.isSkinnedMesh === true;
            var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;
            var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;
            if (mesh.isPoints) {
                var cacheKey = 'PointsMaterial:' + material.uuid;
                var pointsMaterial = this.cache.get(cacheKey);
                if (!pointsMaterial) {
                    pointsMaterial = new THREE.PointsMaterial();
                    THREE.Material.prototype.copy.call(pointsMaterial, material);
                    pointsMaterial.color.copy(material.color);
                    pointsMaterial.map = material.map;
                    pointsMaterial.sizeAttenuation = false;
                    this.cache.add(cacheKey, pointsMaterial);
                }
                material = pointsMaterial;
            } else if (mesh.isLine) {
                var cacheKey = 'LineBasicMaterial:' + material.uuid;
                var lineMaterial = this.cache.get(cacheKey);
                if (!lineMaterial) {
                    lineMaterial = new THREE.LineBasicMaterial();
                    THREE.Material.prototype.copy.call(lineMaterial, material);
                    lineMaterial.color.copy(material.color);
                    this.cache.add(cacheKey, lineMaterial);
                }
                material = lineMaterial;
            }
            if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {
                var cacheKey = 'ClonedMaterial:' + material.uuid + ':';
                if (material.isGLTFSpecularGlossinessMaterial)
                    cacheKey += 'specular-glossiness:';
                if (useSkinning)
                    cacheKey += 'skinning:';
                if (useVertexTangents)
                    cacheKey += 'vertex-tangents:';
                if (useVertexColors)
                    cacheKey += 'vertex-colors:';
                if (useFlatShading)
                    cacheKey += 'flat-shading:';
                if (useMorphTargets)
                    cacheKey += 'morph-targets:';
                if (useMorphNormals)
                    cacheKey += 'morph-normals:';
                var cachedMaterial = this.cache.get(cacheKey);
                if (!cachedMaterial) {
                    cachedMaterial = material.clone();
                    if (useSkinning)
                        cachedMaterial.skinning = true;
                    if (useVertexTangents)
                        cachedMaterial.vertexTangents = true;
                    if (useVertexColors)
                        cachedMaterial.vertexColors = true;
                    if (useFlatShading)
                        cachedMaterial.flatShading = true;
                    if (useMorphTargets)
                        cachedMaterial.morphTargets = true;
                    if (useMorphNormals)
                        cachedMaterial.morphNormals = true;
                    this.cache.add(cacheKey, cachedMaterial);
                }
                material = cachedMaterial;
            }
            if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {
                geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));
            }
            if (material.normalScale && !useVertexTangents) {
                material.normalScale.y = -material.normalScale.y;
            }
            if (material.clearcoatNormalScale && !useVertexTangents) {
                material.clearcoatNormalScale.y = -material.clearcoatNormalScale.y;
            }
            mesh.material = material;
        };
        GLTFParser.prototype.loadMaterial = function (materialIndex) {
            var parser = this;
            var json = this.json;
            var extensions = this.extensions;
            var materialDef = json.materials[materialIndex];
            var materialType;
            var materialParams = {};
            var materialExtensions = materialDef.extensions || {};
            var pending = [];
            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {
                var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];
                materialType = sgExtension.getMaterialType();
                pending.push(sgExtension.extendParams(materialParams, materialDef, parser));
            } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {
                var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];
                materialType = kmuExtension.getMaterialType();
                pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));
            } else {
                materialType = THREE.MeshStandardMaterial;
                var metallicRoughness = materialDef.pbrMetallicRoughness || {};
                materialParams.color = new THREE.Color(1, 1, 1);
                materialParams.opacity = 1;
                if (Array.isArray(metallicRoughness.baseColorFactor)) {
                    var array = metallicRoughness.baseColorFactor;
                    materialParams.color.fromArray(array);
                    materialParams.opacity = array[3];
                }
                if (metallicRoughness.baseColorTexture !== undefined) {
                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));
                }
                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1;
                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1;
                if (metallicRoughness.metallicRoughnessTexture !== undefined) {
                    pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));
                    pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));
                }
            }
            if (materialDef.doubleSided === true) {
                materialParams.side = THREE.DoubleSide;
            }
            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;
            if (alphaMode === ALPHA_MODES.BLEND) {
                materialParams.transparent = true;
                materialParams.depthWrite = false;
            } else {
                materialParams.transparent = false;
                if (alphaMode === ALPHA_MODES.MASK) {
                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;
                }
            }
            if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {
                pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));
                materialParams.normalScale = new THREE.Vector2(1, 1);
                if (materialDef.normalTexture.scale !== undefined) {
                    materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);
                }
            }
            if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {
                pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));
                if (materialDef.occlusionTexture.strength !== undefined) {
                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;
                }
            }
            if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {
                materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);
            }
            if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {
                pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));
            }
            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {
                var clearcoatExtension = extensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT];
                materialType = clearcoatExtension.getMaterialType();
                pending.push(clearcoatExtension.extendParams(materialParams, { extensions: materialExtensions }, parser));
            }
            return Promise.all(pending).then(function () {
                var material;
                if (materialType === GLTFMeshStandardSGMaterial) {
                    material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);
                } else {
                    material = new materialType(materialParams);
                }
                if (materialDef.name)
                    material.name = materialDef.name;
                if (material.map)
                    material.map.encoding = THREE.sRGBEncoding;
                if (material.emissiveMap)
                    material.emissiveMap.encoding = THREE.sRGBEncoding;
                assignExtrasToUserData(material, materialDef);
                if (materialDef.extensions)
                    addUnknownExtensionsToUserData(extensions, material, materialDef);
                return material;
            });
        };
        function computeBounds(geometry, primitiveDef, parser) {
            var attributes = primitiveDef.attributes;
            var box = new THREE.Box3();
            if (attributes.POSITION !== undefined) {
                var accessor = parser.json.accessors[attributes.POSITION];
                var min = accessor.min;
                var max = accessor.max;
                if (min !== undefined && max !== undefined) {
                    box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));
                } else {
                    console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');
                    return;
                }
            } else {
                return;
            }
            var targets = primitiveDef.targets;
            if (targets !== undefined) {
                var maxDisplacement = new THREE.Vector3();
                var vector = new THREE.Vector3();
                for (var i = 0, il = targets.length; i < il; i++) {
                    var target = targets[i];
                    if (target.POSITION !== undefined) {
                        var accessor = parser.json.accessors[target.POSITION];
                        var min = accessor.min;
                        var max = accessor.max;
                        if (min !== undefined && max !== undefined) {
                            vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));
                            vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));
                            vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));
                            maxDisplacement.max(vector);
                        } else {
                            console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');
                        }
                    }
                }
                box.expandByVector(maxDisplacement);
            }
            geometry.boundingBox = box;
            var sphere = new THREE.Sphere();
            box.getCenter(sphere.center);
            sphere.radius = box.min.distanceTo(box.max) / 2;
            geometry.boundingSphere = sphere;
        }
        function addPrimitiveAttributes(geometry, primitiveDef, parser) {
            var attributes = primitiveDef.attributes;
            var pending = [];
            function assignAttributeAccessor(accessorIndex, attributeName) {
                return parser.getDependency('accessor', accessorIndex).then(function (accessor) {
                    geometry.setAttribute(attributeName, accessor);
                });
            }
            for (var gltfAttributeName in attributes) {
                var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();
                if (threeAttributeName in geometry.attributes)
                    continue;
                pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));
            }
            if (primitiveDef.indices !== undefined && !geometry.index) {
                var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {
                    geometry.setIndex(accessor);
                });
                pending.push(accessor);
            }
            assignExtrasToUserData(geometry, primitiveDef);
            computeBounds(geometry, primitiveDef, parser);
            return Promise.all(pending).then(function () {
                return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;
            });
        }
        function toTrianglesDrawMode(geometry, drawMode) {
            var index = geometry.getIndex();
            if (index === null) {
                var indices = [];
                var position = geometry.getAttribute('position');
                if (position !== undefined) {
                    for (var i = 0; i < position.count; i++) {
                        indices.push(i);
                    }
                    geometry.setIndex(indices);
                    index = geometry.getIndex();
                } else {
                    console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');
                    return geometry;
                }
            }
            var numberOfTriangles = index.count - 2;
            var newIndices = [];
            if (drawMode === THREE.TriangleFanDrawMode) {
                for (var i = 1; i <= numberOfTriangles; i++) {
                    newIndices.push(index.getX(0));
                    newIndices.push(index.getX(i));
                    newIndices.push(index.getX(i + 1));
                }
            } else {
                for (var i = 0; i < numberOfTriangles; i++) {
                    if (i % 2 === 0) {
                        newIndices.push(index.getX(i));
                        newIndices.push(index.getX(i + 1));
                        newIndices.push(index.getX(i + 2));
                    } else {
                        newIndices.push(index.getX(i + 2));
                        newIndices.push(index.getX(i + 1));
                        newIndices.push(index.getX(i));
                    }
                }
            }
            if (newIndices.length / 3 !== numberOfTriangles) {
                console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');
            }
            var newGeometry = geometry.clone();
            newGeometry.setIndex(newIndices);
            return newGeometry;
        }
        GLTFParser.prototype.loadGeometries = function (primitives) {
            var parser = this;
            var extensions = this.extensions;
            var cache = this.primitiveCache;
            function createDracoPrimitive(primitive) {
                return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {
                    return addPrimitiveAttributes(geometry, primitive, parser);
                });
            }
            var pending = [];
            for (var i = 0, il = primitives.length; i < il; i++) {
                var primitive = primitives[i];
                var cacheKey = createPrimitiveKey(primitive);
                var cached = cache[cacheKey];
                if (cached) {
                    pending.push(cached.promise);
                } else {
                    var geometryPromise;
                    if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {
                        geometryPromise = createDracoPrimitive(primitive);
                    } else {
                        geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);
                    }
                    cache[cacheKey] = {
                        primitive: primitive,
                        promise: geometryPromise
                    };
                    pending.push(geometryPromise);
                }
            }
            return Promise.all(pending);
        };
        GLTFParser.prototype.loadMesh = function (meshIndex) {
            var parser = this;
            var json = this.json;
            var meshDef = json.meshes[meshIndex];
            var primitives = meshDef.primitives;
            var pending = [];
            for (var i = 0, il = primitives.length; i < il; i++) {
                var material = primitives[i].material === undefined ? createDefaultMaterial(this.cache) : this.getDependency('material', primitives[i].material);
                pending.push(material);
            }
            pending.push(parser.loadGeometries(primitives));
            return Promise.all(pending).then(function (results) {
                var materials = results.slice(0, results.length - 1);
                var geometries = results[results.length - 1];
                var meshes = [];
                for (var i = 0, il = geometries.length; i < il; i++) {
                    var geometry = geometries[i];
                    var primitive = primitives[i];
                    var mesh;
                    var material = materials[i];
                    if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {
                        mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);
                        if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {
                            mesh.normalizeSkinWeights();
                        }
                        if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {
                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleStripDrawMode);
                        } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {
                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleFanDrawMode);
                        }
                    } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {
                        mesh = new THREE.LineSegments(geometry, material);
                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {
                        mesh = new THREE.Line(geometry, material);
                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {
                        mesh = new THREE.LineLoop(geometry, material);
                    } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {
                        mesh = new THREE.Points(geometry, material);
                    } else {
                        throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);
                    }
                    if (Object.keys(mesh.geometry.morphAttributes).length > 0) {
                        updateMorphTargets(mesh, meshDef);
                    }
                    mesh.name = meshDef.name || 'mesh_' + meshIndex;
                    if (geometries.length > 1)
                        mesh.name += '_' + i;
                    assignExtrasToUserData(mesh, meshDef);
                    parser.assignFinalMaterial(mesh);
                    meshes.push(mesh);
                }
                if (meshes.length === 1) {
                    return meshes[0];
                }
                var group = new THREE.Group();
                for (var i = 0, il = meshes.length; i < il; i++) {
                    group.add(meshes[i]);
                }
                return group;
            });
        };
        GLTFParser.prototype.loadCamera = function (cameraIndex) {
            var camera;
            var cameraDef = this.json.cameras[cameraIndex];
            var params = cameraDef[cameraDef.type];
            if (!params) {
                console.warn('THREE.GLTFLoader: Missing camera parameters.');
                return;
            }
            if (cameraDef.type === 'perspective') {
                camera = new THREE.PerspectiveCamera(THREE.MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2000000);
            } else if (cameraDef.type === 'orthographic') {
                camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);
            }
            if (cameraDef.name)
                camera.name = cameraDef.name;
            assignExtrasToUserData(camera, cameraDef);
            return Promise.resolve(camera);
        };
        GLTFParser.prototype.loadSkin = function (skinIndex) {
            var skinDef = this.json.skins[skinIndex];
            var skinEntry = { joints: skinDef.joints };
            if (skinDef.inverseBindMatrices === undefined) {
                return Promise.resolve(skinEntry);
            }
            return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {
                skinEntry.inverseBindMatrices = accessor;
                return skinEntry;
            });
        };
        GLTFParser.prototype.loadAnimation = function (animationIndex) {
            var json = this.json;
            var animationDef = json.animations[animationIndex];
            var pendingNodes = [];
            var pendingInputAccessors = [];
            var pendingOutputAccessors = [];
            var pendingSamplers = [];
            var pendingTargets = [];
            for (var i = 0, il = animationDef.channels.length; i < il; i++) {
                var channel = animationDef.channels[i];
                var sampler = animationDef.samplers[channel.sampler];
                var target = channel.target;
                var name = target.node !== undefined ? target.node : target.id;
                var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;
                var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;
                pendingNodes.push(this.getDependency('node', name));
                pendingInputAccessors.push(this.getDependency('accessor', input));
                pendingOutputAccessors.push(this.getDependency('accessor', output));
                pendingSamplers.push(sampler);
                pendingTargets.push(target);
            }
            return Promise.all([
                Promise.all(pendingNodes),
                Promise.all(pendingInputAccessors),
                Promise.all(pendingOutputAccessors),
                Promise.all(pendingSamplers),
                Promise.all(pendingTargets)
            ]).then(function (dependencies) {
                var nodes = dependencies[0];
                var inputAccessors = dependencies[1];
                var outputAccessors = dependencies[2];
                var samplers = dependencies[3];
                var targets = dependencies[4];
                var tracks = [];
                for (var i = 0, il = nodes.length; i < il; i++) {
                    var node = nodes[i];
                    var inputAccessor = inputAccessors[i];
                    var outputAccessor = outputAccessors[i];
                    var sampler = samplers[i];
                    var target = targets[i];
                    if (node === undefined)
                        continue;
                    node.updateMatrix();
                    node.matrixAutoUpdate = true;
                    var TypedKeyframeTrack;
                    switch (PATH_PROPERTIES[target.path]) {
                    case PATH_PROPERTIES.weights:
                        TypedKeyframeTrack = THREE.NumberKeyframeTrack;
                        break;
                    case PATH_PROPERTIES.rotation:
                        TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;
                        break;
                    case PATH_PROPERTIES.position:
                    case PATH_PROPERTIES.scale:
                    default:
                        TypedKeyframeTrack = THREE.VectorKeyframeTrack;
                        break;
                    }
                    var targetName = node.name ? node.name : node.uuid;
                    var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;
                    var targetNames = [];
                    if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {
                        node.traverse(function (object) {
                            if (object.isMesh === true && object.morphTargetInfluences) {
                                targetNames.push(object.name ? object.name : object.uuid);
                            }
                        });
                    } else {
                        targetNames.push(targetName);
                    }
                    var outputArray = outputAccessor.array;
                    if (outputAccessor.normalized) {
                        var scale;
                        if (outputArray.constructor === Int8Array) {
                            scale = 1 / 127;
                        } else if (outputArray.constructor === Uint8Array) {
                            scale = 1 / 255;
                        } else if (outputArray.constructor == Int16Array) {
                            scale = 1 / 32767;
                        } else if (outputArray.constructor === Uint16Array) {
                            scale = 1 / 65535;
                        } else {
                            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');
                        }
                        var scaled = new Float32Array(outputArray.length);
                        for (var j = 0, jl = outputArray.length; j < jl; j++) {
                            scaled[j] = outputArray[j] * scale;
                        }
                        outputArray = scaled;
                    }
                    for (var j = 0, jl = targetNames.length; j < jl; j++) {
                        var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);
                        if (sampler.interpolation === 'CUBICSPLINE') {
                            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {
                                return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);
                            };
                            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;
                        }
                        tracks.push(track);
                    }
                }
                var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;
                return new THREE.AnimationClip(name, undefined, tracks);
            });
        };
        GLTFParser.prototype.loadNode = function (nodeIndex) {
            var json = this.json;
            var extensions = this.extensions;
            var parser = this;
            var meshReferences = json.meshReferences;
            var meshUses = json.meshUses;
            var nodeDef = json.nodes[nodeIndex];
            return function () {
                var pending = [];
                if (nodeDef.mesh !== undefined) {
                    pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {
                        var node;
                        if (meshReferences[nodeDef.mesh] > 1) {
                            var instanceNum = meshUses[nodeDef.mesh]++;
                            node = mesh.clone();
                            node.name += '_instance_' + instanceNum;
                        } else {
                            node = mesh;
                        }
                        if (nodeDef.weights !== undefined) {
                            node.traverse(function (o) {
                                if (!o.isMesh)
                                    return;
                                for (var i = 0, il = nodeDef.weights.length; i < il; i++) {
                                    o.morphTargetInfluences[i] = nodeDef.weights[i];
                                }
                            });
                        }
                        return node;
                    }));
                }
                if (nodeDef.camera !== undefined) {
                    pending.push(parser.getDependency('camera', nodeDef.camera));
                }
                if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {
                    pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));
                }
                return Promise.all(pending);
            }().then(function (objects) {
                var node;
                if (nodeDef.isBone === true) {
                    node = new THREE.Bone();
                } else if (objects.length > 1) {
                    node = new THREE.Group();
                } else if (objects.length === 1) {
                    node = objects[0];
                } else {
                    node = new THREE.Object3D();
                }
                if (node !== objects[0]) {
                    for (var i = 0, il = objects.length; i < il; i++) {
                        node.add(objects[i]);
                    }
                }
                if (nodeDef.name) {
                    node.userData.name = nodeDef.name;
                    node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);
                }
                assignExtrasToUserData(node, nodeDef);
                if (nodeDef.extensions)
                    addUnknownExtensionsToUserData(extensions, node, nodeDef);
                if (nodeDef.matrix !== undefined) {
                    var matrix = new THREE.Matrix4();
                    matrix.fromArray(nodeDef.matrix);
                    node.applyMatrix4(matrix);
                } else {
                    if (nodeDef.translation !== undefined) {
                        node.position.fromArray(nodeDef.translation);
                    }
                    if (nodeDef.rotation !== undefined) {
                        node.quaternion.fromArray(nodeDef.rotation);
                    }
                    if (nodeDef.scale !== undefined) {
                        node.scale.fromArray(nodeDef.scale);
                    }
                }
                return node;
            });
        };
        GLTFParser.prototype.loadScene = function () {
            function buildNodeHierachy(nodeId, parentObject, json, parser) {
                var nodeDef = json.nodes[nodeId];
                return parser.getDependency('node', nodeId).then(function (node) {
                    if (nodeDef.skin === undefined)
                        return node;
                    var skinEntry;
                    return parser.getDependency('skin', nodeDef.skin).then(function (skin) {
                        skinEntry = skin;
                        var pendingJoints = [];
                        for (var i = 0, il = skinEntry.joints.length; i < il; i++) {
                            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));
                        }
                        return Promise.all(pendingJoints);
                    }).then(function (jointNodes) {
                        node.traverse(function (mesh) {
                            if (!mesh.isMesh)
                                return;
                            var bones = [];
                            var boneInverses = [];
                            for (var j = 0, jl = jointNodes.length; j < jl; j++) {
                                var jointNode = jointNodes[j];
                                if (jointNode) {
                                    bones.push(jointNode);
                                    var mat = new THREE.Matrix4();
                                    if (skinEntry.inverseBindMatrices !== undefined) {
                                        mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);
                                    }
                                    boneInverses.push(mat);
                                } else {
                                    console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', skinEntry.joints[j]);
                                }
                            }
                            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);
                        });
                        return node;
                    });
                }).then(function (node) {
                    parentObject.add(node);
                    var pending = [];
                    if (nodeDef.children) {
                        var children = nodeDef.children;
                        for (var i = 0, il = children.length; i < il; i++) {
                            var child = children[i];
                            pending.push(buildNodeHierachy(child, node, json, parser));
                        }
                    }
                    return Promise.all(pending);
                });
            }
            return function loadScene(sceneIndex) {
                var json = this.json;
                var extensions = this.extensions;
                var sceneDef = this.json.scenes[sceneIndex];
                var parser = this;
                var scene = new THREE.Group();
                if (sceneDef.name)
                    scene.name = sceneDef.name;
                assignExtrasToUserData(scene, sceneDef);
                if (sceneDef.extensions)
                    addUnknownExtensionsToUserData(extensions, scene, sceneDef);
                var nodeIds = sceneDef.nodes || [];
                var pending = [];
                for (var i = 0, il = nodeIds.length; i < il; i++) {
                    pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));
                }
                return Promise.all(pending).then(function () {
                    return scene;
                });
            };
        }();
        return GLTFLoader;
    }();
    return GLTFLoader ;
});
define('skylark-threejs-ex/loaders/MTLLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var MTLLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: MTLLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text, path));
            }, onProgress, onError);
        },
        setMaterialOptions: function (value) {
            this.materialOptions = value;
            return this;
        },
        parse: function (text, path) {
            var lines = text.split('\n');
            var info = {};
            var delimiter_pattern = /\s+/;
            var materialsInfo = {};
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                line = line.trim();
                if (line.length === 0 || line.charAt(0) === '#') {
                    continue;
                }
                var pos = line.indexOf(' ');
                var key = pos >= 0 ? line.substring(0, pos) : line;
                key = key.toLowerCase();
                var value = pos >= 0 ? line.substring(pos + 1) : '';
                value = value.trim();
                if (key === 'newmtl') {
                    info = { name: value };
                    materialsInfo[value] = info;
                } else {
                    if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {
                        var ss = value.split(delimiter_pattern, 3);
                        info[key] = [
                            parseFloat(ss[0]),
                            parseFloat(ss[1]),
                            parseFloat(ss[2])
                        ];
                    } else {
                        info[key] = value;
                    }
                }
            }
            var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);
            materialCreator.setCrossOrigin(this.crossOrigin);
            materialCreator.setManager(this.manager);
            materialCreator.setMaterials(materialsInfo);
            return materialCreator;
        }
    });
    MTLLoader.MaterialCreator = function (baseUrl, options) {
        this.baseUrl = baseUrl || '';
        this.options = options;
        this.materialsInfo = {};
        this.materials = {};
        this.materialsArray = [];
        this.nameLookup = {};
        this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;
        this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;
    };
    MTLLoader.MaterialCreator.prototype = {
        constructor: MTLLoader.MaterialCreator,
        crossOrigin: 'anonymous',
        setCrossOrigin: function (value) {
            this.crossOrigin = value;
            return this;
        },
        setManager: function (value) {
            this.manager = value;
        },
        setMaterials: function (materialsInfo) {
            this.materialsInfo = this.convert(materialsInfo);
            this.materials = {};
            this.materialsArray = [];
            this.nameLookup = {};
        },
        convert: function (materialsInfo) {
            if (!this.options)
                return materialsInfo;
            var converted = {};
            for (var mn in materialsInfo) {
                var mat = materialsInfo[mn];
                var covmat = {};
                converted[mn] = covmat;
                for (var prop in mat) {
                    var save = true;
                    var value = mat[prop];
                    var lprop = prop.toLowerCase();
                    switch (lprop) {
                    case 'kd':
                    case 'ka':
                    case 'ks':
                        if (this.options && this.options.normalizeRGB) {
                            value = [
                                value[0] / 255,
                                value[1] / 255,
                                value[2] / 255
                            ];
                        }
                        if (this.options && this.options.ignoreZeroRGBs) {
                            if (value[0] === 0 && value[1] === 0 && value[2] === 0) {
                                save = false;
                            }
                        }
                        break;
                    default:
                        break;
                    }
                    if (save) {
                        covmat[lprop] = value;
                    }
                }
            }
            return converted;
        },
        preload: function () {
            for (var mn in this.materialsInfo) {
                this.create(mn);
            }
        },
        getIndex: function (materialName) {
            return this.nameLookup[materialName];
        },
        getAsArray: function () {
            var index = 0;
            for (var mn in this.materialsInfo) {
                this.materialsArray[index] = this.create(mn);
                this.nameLookup[mn] = index;
                index++;
            }
            return this.materialsArray;
        },
        create: function (materialName) {
            if (this.materials[materialName] === undefined) {
                this.createMaterial_(materialName);
            }
            return this.materials[materialName];
        },
        createMaterial_: function (materialName) {
            var scope = this;
            var mat = this.materialsInfo[materialName];
            var params = {
                name: materialName,
                side: this.side
            };
            function resolveURL(baseUrl, url) {
                if (typeof url !== 'string' || url === '')
                    return '';
                if (/^https?:\/\//i.test(url))
                    return url;
                return baseUrl + url;
            }
            function setMapForType(mapType, value) {
                if (params[mapType])
                    return;
                var texParams = scope.getTextureParams(value, params);
                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));
                map.repeat.copy(texParams.scale);
                map.offset.copy(texParams.offset);
                map.wrapS = scope.wrap;
                map.wrapT = scope.wrap;
                params[mapType] = map;
            }
            for (var prop in mat) {
                var value = mat[prop];
                var n;
                if (value === '')
                    continue;
                switch (prop.toLowerCase()) {
                case 'kd':
                    params.color = new THREE.Color().fromArray(value);
                    break;
                case 'ks':
                    params.specular = new THREE.Color().fromArray(value);
                    break;
                case 'ke':
                    params.emissive = new THREE.Color().fromArray(value);
                    break;
                case 'map_kd':
                    setMapForType('map', value);
                    break;
                case 'map_ks':
                    setMapForType('specularMap', value);
                    break;
                case 'map_ke':
                    setMapForType('emissiveMap', value);
                    break;
                case 'norm':
                    setMapForType('normalMap', value);
                    break;
                case 'map_bump':
                case 'bump':
                    setMapForType('bumpMap', value);
                    break;
                case 'map_d':
                    setMapForType('alphaMap', value);
                    params.transparent = true;
                    break;
                case 'ns':
                    params.shininess = parseFloat(value);
                    break;
                case 'd':
                    n = parseFloat(value);
                    if (n < 1) {
                        params.opacity = n;
                        params.transparent = true;
                    }
                    break;
                case 'tr':
                    n = parseFloat(value);
                    if (this.options && this.options.invertTrProperty)
                        n = 1 - n;
                    if (n > 0) {
                        params.opacity = 1 - n;
                        params.transparent = true;
                    }
                    break;
                default:
                    break;
                }
            }
            this.materials[materialName] = new THREE.MeshPhongMaterial(params);
            return this.materials[materialName];
        },
        getTextureParams: function (value, matParams) {
            var texParams = {
                scale: new THREE.Vector2(1, 1),
                offset: new THREE.Vector2(0, 0)
            };
            var items = value.split(/\s+/);
            var pos;
            pos = items.indexOf('-bm');
            if (pos >= 0) {
                matParams.bumpScale = parseFloat(items[pos + 1]);
                items.splice(pos, 2);
            }
            pos = items.indexOf('-s');
            if (pos >= 0) {
                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));
                items.splice(pos, 4);
            }
            pos = items.indexOf('-o');
            if (pos >= 0) {
                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));
                items.splice(pos, 4);
            }
            texParams.url = items.join(' ').trim();
            return texParams;
        },
        loadTexture: function (url, mapping, onLoad, onProgress, onError) {
            var texture;
            var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;
            var loader = manager.getHandler(url);
            if (loader === null) {
                loader = new THREE.TextureLoader(manager);
            }
            if (loader.setCrossOrigin)
                loader.setCrossOrigin(this.crossOrigin);
            texture = loader.load(url, onLoad, onProgress, onError);
            if (mapping !== undefined)
                texture.mapping = mapping;
            return texture;
        }
    };
    return MTLLoader ;
});
define('skylark-threejs-ex/loaders/OBJLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var OBJLoader = function () {
        var object_pattern = /^[og]\s*(.+)?/;
        var material_library_pattern = /^mtllib /;
        var material_use_pattern = /^usemtl /;
        var map_use_pattern = /^usemap /;
        function ParserState() {
            var state = {
                objects: [],
                object: {},
                vertices: [],
                normals: [],
                colors: [],
                uvs: [],
                materials: {},
                materialLibraries: [],
                startObject: function (name, fromDeclaration) {
                    if (this.object && this.object.fromDeclaration === false) {
                        this.object.name = name;
                        this.object.fromDeclaration = fromDeclaration !== false;
                        return;
                    }
                    var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;
                    if (this.object && typeof this.object._finalize === 'function') {
                        this.object._finalize(true);
                    }
                    this.object = {
                        name: name || '',
                        fromDeclaration: fromDeclaration !== false,
                        geometry: {
                            vertices: [],
                            normals: [],
                            colors: [],
                            uvs: []
                        },
                        materials: [],
                        smooth: true,
                        startMaterial: function (name, libraries) {
                            var previous = this._finalize(false);
                            if (previous && (previous.inherited || previous.groupCount <= 0)) {
                                this.materials.splice(previous.index, 1);
                            }
                            var material = {
                                index: this.materials.length,
                                name: name || '',
                                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',
                                smooth: previous !== undefined ? previous.smooth : this.smooth,
                                groupStart: previous !== undefined ? previous.groupEnd : 0,
                                groupEnd: -1,
                                groupCount: -1,
                                inherited: false,
                                clone: function (index) {
                                    var cloned = {
                                        index: typeof index === 'number' ? index : this.index,
                                        name: this.name,
                                        mtllib: this.mtllib,
                                        smooth: this.smooth,
                                        groupStart: 0,
                                        groupEnd: -1,
                                        groupCount: -1,
                                        inherited: false
                                    };
                                    cloned.clone = this.clone.bind(cloned);
                                    return cloned;
                                }
                            };
                            this.materials.push(material);
                            return material;
                        },
                        currentMaterial: function () {
                            if (this.materials.length > 0) {
                                return this.materials[this.materials.length - 1];
                            }
                            return undefined;
                        },
                        _finalize: function (end) {
                            var lastMultiMaterial = this.currentMaterial();
                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {
                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
                                lastMultiMaterial.inherited = false;
                            }
                            if (end && this.materials.length > 1) {
                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {
                                    if (this.materials[mi].groupCount <= 0) {
                                        this.materials.splice(mi, 1);
                                    }
                                }
                            }
                            if (end && this.materials.length === 0) {
                                this.materials.push({
                                    name: '',
                                    smooth: this.smooth
                                });
                            }
                            return lastMultiMaterial;
                        }
                    };
                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {
                        var declared = previousMaterial.clone(0);
                        declared.inherited = true;
                        this.object.materials.push(declared);
                    }
                    this.objects.push(this.object);
                },
                finalize: function () {
                    if (this.object && typeof this.object._finalize === 'function') {
                        this.object._finalize(true);
                    }
                },
                parseVertexIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 3) * 3;
                },
                parseNormalIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 3) * 3;
                },
                parseUVIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 2) * 2;
                },
                addVertex: function (a, b, c) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                    dst.push(src[b + 0], src[b + 1], src[b + 2]);
                    dst.push(src[c + 0], src[c + 1], src[c + 2]);
                },
                addVertexPoint: function (a) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                },
                addVertexLine: function (a) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                },
                addNormal: function (a, b, c) {
                    var src = this.normals;
                    var dst = this.object.geometry.normals;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                    dst.push(src[b + 0], src[b + 1], src[b + 2]);
                    dst.push(src[c + 0], src[c + 1], src[c + 2]);
                },
                addColor: function (a, b, c) {
                    var src = this.colors;
                    var dst = this.object.geometry.colors;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                    dst.push(src[b + 0], src[b + 1], src[b + 2]);
                    dst.push(src[c + 0], src[c + 1], src[c + 2]);
                },
                addUV: function (a, b, c) {
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
                    dst.push(src[a + 0], src[a + 1]);
                    dst.push(src[b + 0], src[b + 1]);
                    dst.push(src[c + 0], src[c + 1]);
                },
                addUVLine: function (a) {
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
                    dst.push(src[a + 0], src[a + 1]);
                },
                addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {
                    var vLen = this.vertices.length;
                    var ia = this.parseVertexIndex(a, vLen);
                    var ib = this.parseVertexIndex(b, vLen);
                    var ic = this.parseVertexIndex(c, vLen);
                    this.addVertex(ia, ib, ic);
                    if (this.colors.length > 0) {
                        this.addColor(ia, ib, ic);
                    }
                    if (ua !== undefined && ua !== '') {
                        var uvLen = this.uvs.length;
                        ia = this.parseUVIndex(ua, uvLen);
                        ib = this.parseUVIndex(ub, uvLen);
                        ic = this.parseUVIndex(uc, uvLen);
                        this.addUV(ia, ib, ic);
                    }
                    if (na !== undefined && na !== '') {
                        var nLen = this.normals.length;
                        ia = this.parseNormalIndex(na, nLen);
                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);
                        this.addNormal(ia, ib, ic);
                    }
                },
                addPointGeometry: function (vertices) {
                    this.object.geometry.type = 'Points';
                    var vLen = this.vertices.length;
                    for (var vi = 0, l = vertices.length; vi < l; vi++) {
                        this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));
                    }
                },
                addLineGeometry: function (vertices, uvs) {
                    this.object.geometry.type = 'Line';
                    var vLen = this.vertices.length;
                    var uvLen = this.uvs.length;
                    for (var vi = 0, l = vertices.length; vi < l; vi++) {
                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
                    }
                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {
                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));
                    }
                }
            };
            state.startObject('', false);
            return state;
        }
        function OBJLoader(manager) {
            THREE.Loader.call(this, manager);
            this.materials = null;
        }
        OBJLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: OBJLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new THREE.FileLoader(scope.manager);
                loader.setPath(this.path);
                loader.load(url, function (text) {
                    onLoad(scope.parse(text));
                }, onProgress, onError);
            },
            setMaterials: function (materials) {
                this.materials = materials;
                return this;
            },
            parse: function (text) {
                var state = new ParserState();
                if (text.indexOf('\r\n') !== -1) {
                    text = text.replace(/\r\n/g, '\n');
                }
                if (text.indexOf('\\\n') !== -1) {
                    text = text.replace(/\\\n/g, '');
                }
                var lines = text.split('\n');
                var line = '', lineFirstChar = '';
                var lineLength = 0;
                var result = [];
                var trimLeft = typeof ''.trimLeft === 'function';
                for (var i = 0, l = lines.length; i < l; i++) {
                    line = lines[i];
                    line = trimLeft ? line.trimLeft() : line.trim();
                    lineLength = line.length;
                    if (lineLength === 0)
                        continue;
                    lineFirstChar = line.charAt(0);
                    if (lineFirstChar === '#')
                        continue;
                    if (lineFirstChar === 'v') {
                        var data = line.split(/\s+/);
                        switch (data[0]) {
                        case 'v':
                            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));
                            if (data.length >= 7) {
                                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));
                            }
                            break;
                        case 'vn':
                            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));
                            break;
                        case 'vt':
                            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));
                            break;
                        }
                    } else if (lineFirstChar === 'f') {
                        var lineData = line.substr(1).trim();
                        var vertexData = lineData.split(/\s+/);
                        var faceVertices = [];
                        for (var j = 0, jl = vertexData.length; j < jl; j++) {
                            var vertex = vertexData[j];
                            if (vertex.length > 0) {
                                var vertexParts = vertex.split('/');
                                faceVertices.push(vertexParts);
                            }
                        }
                        var v1 = faceVertices[0];
                        for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {
                            var v2 = faceVertices[j];
                            var v3 = faceVertices[j + 1];
                            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);
                        }
                    } else if (lineFirstChar === 'l') {
                        var lineParts = line.substring(1).trim().split(' ');
                        var lineVertices = [], lineUVs = [];
                        if (line.indexOf('/') === -1) {
                            lineVertices = lineParts;
                        } else {
                            for (var li = 0, llen = lineParts.length; li < llen; li++) {
                                var parts = lineParts[li].split('/');
                                if (parts[0] !== '')
                                    lineVertices.push(parts[0]);
                                if (parts[1] !== '')
                                    lineUVs.push(parts[1]);
                            }
                        }
                        state.addLineGeometry(lineVertices, lineUVs);
                    } else if (lineFirstChar === 'p') {
                        var lineData = line.substr(1).trim();
                        var pointData = lineData.split(' ');
                        state.addPointGeometry(pointData);
                    } else if ((result = object_pattern.exec(line)) !== null) {
                        var name = (' ' + result[0].substr(1).trim()).substr(1);
                        state.startObject(name);
                    } else if (material_use_pattern.test(line)) {
                        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);
                    } else if (material_library_pattern.test(line)) {
                        state.materialLibraries.push(line.substring(7).trim());
                    } else if (map_use_pattern.test(line)) {
                        console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');
                    } else if (lineFirstChar === 's') {
                        result = line.split(' ');
                        if (result.length > 1) {
                            var value = result[1].trim().toLowerCase();
                            state.object.smooth = value !== '0' && value !== 'off';
                        } else {
                            state.object.smooth = true;
                        }
                        var material = state.object.currentMaterial();
                        if (material)
                            material.smooth = state.object.smooth;
                    } else {
                        if (line === '\0')
                            continue;
                        console.warn('THREE.OBJLoader: Unexpected line: "' + line + '"');
                    }
                }
                state.finalize();
                var container = new THREE.Group();
                container.materialLibraries = [].concat(state.materialLibraries);
                for (var i = 0, l = state.objects.length; i < l; i++) {
                    var object = state.objects[i];
                    var geometry = object.geometry;
                    var materials = object.materials;
                    var isLine = geometry.type === 'Line';
                    var isPoints = geometry.type === 'Points';
                    var hasVertexColors = false;
                    if (geometry.vertices.length === 0)
                        continue;
                    var buffergeometry = new THREE.BufferGeometry();
                    buffergeometry.setAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));
                    if (geometry.normals.length > 0) {
                        buffergeometry.setAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));
                    } else {
                        buffergeometry.computeVertexNormals();
                    }
                    if (geometry.colors.length > 0) {
                        hasVertexColors = true;
                        buffergeometry.setAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));
                    }
                    if (geometry.uvs.length > 0) {
                        buffergeometry.setAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));
                    }
                    var createdMaterials = [];
                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {
                        var sourceMaterial = materials[mi];
                        var materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;
                        var material = state.materials[materialHash];
                        if (this.materials !== null) {
                            material = this.materials.create(sourceMaterial.name);
                            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {
                                var materialLine = new THREE.LineBasicMaterial();
                                THREE.Material.prototype.copy.call(materialLine, material);
                                materialLine.color.copy(material.color);
                                material = materialLine;
                            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {
                                var materialPoints = new THREE.PointsMaterial({
                                    size: 10,
                                    sizeAttenuation: false
                                });
                                THREE.Material.prototype.copy.call(materialPoints, material);
                                materialPoints.color.copy(material.color);
                                materialPoints.map = material.map;
                                material = materialPoints;
                            }
                        }
                        if (material === undefined) {
                            if (isLine) {
                                material = new THREE.LineBasicMaterial();
                            } else if (isPoints) {
                                material = new THREE.PointsMaterial({
                                    size: 1,
                                    sizeAttenuation: false
                                });
                            } else {
                                material = new THREE.MeshPhongMaterial();
                            }
                            material.name = sourceMaterial.name;
                            material.flatShading = sourceMaterial.smooth ? false : true;
                            material.vertexColors = hasVertexColors;
                            state.materials[materialHash] = material;
                        }
                        createdMaterials.push(material);
                    }
                    var mesh;
                    if (createdMaterials.length > 1) {
                        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {
                            var sourceMaterial = materials[mi];
                            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
                        }
                        if (isLine) {
                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);
                        } else if (isPoints) {
                            mesh = new THREE.Points(buffergeometry, createdMaterials);
                        } else {
                            mesh = new THREE.Mesh(buffergeometry, createdMaterials);
                        }
                    } else {
                        if (isLine) {
                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);
                        } else if (isPoints) {
                            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);
                        } else {
                            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);
                        }
                    }
                    mesh.name = object.name;
                    container.add(mesh);
                }
                return container;
            }
        });
        return OBJLoader;
    }();
    return OBJLoader;
});
define('skylark-threejs-ex/loaders/obj2/OBJLoader2Parser',[],function () {
    'use strict';
    const OBJLoader2Parser = function () {
        this.logging = {
            enabled: false,
            debug: false
        };
        let scope = this;
        this.callbacks = {
            onProgress: function (text) {
                scope._onProgress(text);
            },
            onAssetAvailable: function (payload) {
                scope._onAssetAvailable(payload);
            },
            onError: function (errorMessage) {
                scope._onError(errorMessage);
            },
            onLoad: function (object3d, message) {
                scope._onLoad(object3d, message);
            }
        };
        this.contentRef = null;
        this.legacyMode = false;
        this.materials = {};
        this.materialPerSmoothingGroup = false;
        this.useOAsMesh = false;
        this.useIndices = false;
        this.disregardNormals = false;
        this.vertices = [];
        this.colors = [];
        this.normals = [];
        this.uvs = [];
        this.rawMesh = {
            objectName: '',
            groupName: '',
            activeMtlName: '',
            mtllibName: '',
            faceType: -1,
            subGroups: [],
            subGroupInUse: null,
            smoothingGroup: {
                splitMaterials: false,
                normalized: -1,
                real: -1
            },
            counts: {
                doubleIndicesCount: 0,
                faceCount: 0,
                mtlCount: 0,
                smoothingGroupCount: 0
            }
        };
        this.inputObjectCount = 1;
        this.outputObjectCount = 1;
        this.globalCounts = {
            vertices: 0,
            faces: 0,
            doubleIndicesCount: 0,
            lineByte: 0,
            currentByte: 0,
            totalBytes: 0
        };
    };
    OBJLoader2Parser.prototype = {
        constructor: OBJLoader2Parser,
        _resetRawMesh: function () {
            this.rawMesh.subGroups = [];
            this.rawMesh.subGroupInUse = null;
            this.rawMesh.smoothingGroup.normalized = -1;
            this.rawMesh.smoothingGroup.real = -1;
            this._pushSmoothingGroup(1);
            this.rawMesh.counts.doubleIndicesCount = 0;
            this.rawMesh.counts.faceCount = 0;
            this.rawMesh.counts.mtlCount = 0;
            this.rawMesh.counts.smoothingGroupCount = 0;
        },
        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {
            this.materialPerSmoothingGroup = materialPerSmoothingGroup === true;
            return this;
        },
        setUseOAsMesh: function (useOAsMesh) {
            this.useOAsMesh = useOAsMesh === true;
            return this;
        },
        setUseIndices: function (useIndices) {
            this.useIndices = useIndices === true;
            return this;
        },
        setDisregardNormals: function (disregardNormals) {
            this.disregardNormals = disregardNormals === true;
            return this;
        },
        setMaterials: function (materials) {
            this.materials = Object.assign({}, materials);
        },
        setCallbackOnAssetAvailable: function (onAssetAvailable) {
            if (onAssetAvailable !== null && onAssetAvailable !== undefined && onAssetAvailable instanceof Function) {
                this.callbacks.onAssetAvailable = onAssetAvailable;
            }
            return this;
        },
        setCallbackOnProgress: function (onProgress) {
            if (onProgress !== null && onProgress !== undefined && onProgress instanceof Function) {
                this.callbacks.onProgress = onProgress;
            }
            return this;
        },
        setCallbackOnError: function (onError) {
            if (onError !== null && onError !== undefined && onError instanceof Function) {
                this.callbacks.onError = onError;
            }
            return this;
        },
        setCallbackOnLoad: function (onLoad) {
            if (onLoad !== null && onLoad !== undefined && onLoad instanceof Function) {
                this.callbacks.onLoad = onLoad;
            }
            return this;
        },
        _onProgress: function (text) {
            let message = text ? text : '';
            if (this.logging.enabled && this.logging.debug) {
                console.log(message);
            }
        },
        _onError: function (errorMessage) {
            if (this.logging.enabled && this.logging.debug) {
                console.error(errorMessage);
            }
        },
        _onAssetAvailable: function (payload) {
            let errorMessage = 'OBJLoader2Parser does not provide implementation for onAssetAvailable. Aborting...';
            this.callbacks.onError(errorMessage);
            throw errorMessage;
        },
        _onLoad: function (object3d, message) {
            console.log('You reached parser default onLoad callback: ' + message);
        },
        setLogging: function (enabled, debug) {
            this.logging.enabled = enabled === true;
            this.logging.debug = debug === true;
            return this;
        },
        _configure: function () {
            this._pushSmoothingGroup(1);
            if (this.logging.enabled) {
                let matKeys = Object.keys(this.materials);
                let matNames = matKeys.length > 0 ? '\n\tmaterialNames:\n\t\t- ' + matKeys.join('\n\t\t- ') : '\n\tmaterialNames: None';
                let printedConfig = 'OBJLoader.Parser configuration:' + matNames + '\n\tmaterialPerSmoothingGroup: ' + this.materialPerSmoothingGroup + '\n\tuseOAsMesh: ' + this.useOAsMesh + '\n\tuseIndices: ' + this.useIndices + '\n\tdisregardNormals: ' + this.disregardNormals;
                printedConfig += '\n\tcallbacks.onProgress: ' + this.callbacks.onProgress.name;
                printedConfig += '\n\tcallbacks.onAssetAvailable: ' + this.callbacks.onAssetAvailable.name;
                printedConfig += '\n\tcallbacks.onError: ' + this.callbacks.onError.name;
                console.info(printedConfig);
            }
        },
        execute: function (arrayBuffer) {
            if (this.logging.enabled)
                console.time('OBJLoader2Parser.execute');
            this._configure();
            let arrayBufferView = new Uint8Array(arrayBuffer);
            this.contentRef = arrayBufferView;
            let length = arrayBufferView.byteLength;
            this.globalCounts.totalBytes = length;
            let buffer = new Array(128);
            for (let code, word = '', bufferPointer = 0, slashesCount = 0, i = 0; i < length; i++) {
                code = arrayBufferView[i];
                switch (code) {
                case 32:
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    break;
                case 47:
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    slashesCount++;
                    word = '';
                    break;
                case 10:
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    this.globalCounts.lineByte = this.globalCounts.currentByte;
                    this.globalCounts.currentByte = i;
                    this._processLine(buffer, bufferPointer, slashesCount);
                    bufferPointer = 0;
                    slashesCount = 0;
                    break;
                case 13:
                    break;
                default:
                    word += String.fromCharCode(code);
                    break;
                }
            }
            this._finalizeParsing();
            if (this.logging.enabled)
                console.timeEnd('OBJLoader2Parser.execute');
        },
        executeLegacy: function (text) {
            if (this.logging.enabled)
                console.time('OBJLoader2Parser.executeLegacy');
            this._configure();
            this.legacyMode = true;
            this.contentRef = text;
            let length = text.length;
            this.globalCounts.totalBytes = length;
            let buffer = new Array(128);
            for (let char, word = '', bufferPointer = 0, slashesCount = 0, i = 0; i < length; i++) {
                char = text[i];
                switch (char) {
                case ' ':
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    break;
                case '/':
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    slashesCount++;
                    word = '';
                    break;
                case '\n':
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    this.globalCounts.lineByte = this.globalCounts.currentByte;
                    this.globalCounts.currentByte = i;
                    this._processLine(buffer, bufferPointer, slashesCount);
                    bufferPointer = 0;
                    slashesCount = 0;
                    break;
                case '\r':
                    break;
                default:
                    word += char;
                }
            }
            this._finalizeParsing();
            if (this.logging.enabled)
                console.timeEnd('OBJLoader2Parser.executeLegacy');
        },
        _processLine: function (buffer, bufferPointer, slashesCount) {
            if (bufferPointer < 1)
                return;
            let reconstructString = function (content, legacyMode, start, stop) {
                let line = '';
                if (stop > start) {
                    let i;
                    if (legacyMode) {
                        for (i = start; i < stop; i++)
                            line += content[i];
                    } else {
                        for (i = start; i < stop; i++)
                            line += String.fromCharCode(content[i]);
                    }
                    line = line.trim();
                }
                return line;
            };
            let bufferLength, length, i, lineDesignation;
            lineDesignation = buffer[0];
            switch (lineDesignation) {
            case 'v':
                this.vertices.push(parseFloat(buffer[1]));
                this.vertices.push(parseFloat(buffer[2]));
                this.vertices.push(parseFloat(buffer[3]));
                if (bufferPointer > 4) {
                    this.colors.push(parseFloat(buffer[4]));
                    this.colors.push(parseFloat(buffer[5]));
                    this.colors.push(parseFloat(buffer[6]));
                }
                break;
            case 'vt':
                this.uvs.push(parseFloat(buffer[1]));
                this.uvs.push(parseFloat(buffer[2]));
                break;
            case 'vn':
                this.normals.push(parseFloat(buffer[1]));
                this.normals.push(parseFloat(buffer[2]));
                this.normals.push(parseFloat(buffer[3]));
                break;
            case 'f':
                bufferLength = bufferPointer - 1;
                if (slashesCount === 0) {
                    this._checkFaceType(0);
                    for (i = 2, length = bufferLength; i < length; i++) {
                        this._buildFace(buffer[1]);
                        this._buildFace(buffer[i]);
                        this._buildFace(buffer[i + 1]);
                    }
                } else if (bufferLength === slashesCount * 2) {
                    this._checkFaceType(1);
                    for (i = 3, length = bufferLength - 2; i < length; i += 2) {
                        this._buildFace(buffer[1], buffer[2]);
                        this._buildFace(buffer[i], buffer[i + 1]);
                        this._buildFace(buffer[i + 2], buffer[i + 3]);
                    }
                } else if (bufferLength * 2 === slashesCount * 3) {
                    this._checkFaceType(2);
                    for (i = 4, length = bufferLength - 3; i < length; i += 3) {
                        this._buildFace(buffer[1], buffer[2], buffer[3]);
                        this._buildFace(buffer[i], buffer[i + 1], buffer[i + 2]);
                        this._buildFace(buffer[i + 3], buffer[i + 4], buffer[i + 5]);
                    }
                } else {
                    this._checkFaceType(3);
                    for (i = 3, length = bufferLength - 2; i < length; i += 2) {
                        this._buildFace(buffer[1], undefined, buffer[2]);
                        this._buildFace(buffer[i], undefined, buffer[i + 1]);
                        this._buildFace(buffer[i + 2], undefined, buffer[i + 3]);
                    }
                }
                break;
            case 'l':
            case 'p':
                bufferLength = bufferPointer - 1;
                if (bufferLength === slashesCount * 2) {
                    this._checkFaceType(4);
                    for (i = 1, length = bufferLength + 1; i < length; i += 2)
                        this._buildFace(buffer[i], buffer[i + 1]);
                } else {
                    this._checkFaceType(lineDesignation === 'l' ? 5 : 6);
                    for (i = 1, length = bufferLength + 1; i < length; i++)
                        this._buildFace(buffer[i]);
                }
                break;
            case 's':
                this._pushSmoothingGroup(buffer[1]);
                break;
            case 'g':
                this._processCompletedMesh();
                this.rawMesh.groupName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 2, this.globalCounts.currentByte);
                break;
            case 'o':
                if (this.useOAsMesh)
                    this._processCompletedMesh();
                this.rawMesh.objectName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 2, this.globalCounts.currentByte);
                break;
            case 'mtllib':
                this.rawMesh.mtllibName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 7, this.globalCounts.currentByte);
                break;
            case 'usemtl':
                let mtlName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 7, this.globalCounts.currentByte);
                if (mtlName !== '' && this.rawMesh.activeMtlName !== mtlName) {
                    this.rawMesh.activeMtlName = mtlName;
                    this.rawMesh.counts.mtlCount++;
                    this._checkSubGroup();
                }
                break;
            default:
                break;
            }
        },
        _pushSmoothingGroup: function (smoothingGroup) {
            let smoothingGroupInt = parseInt(smoothingGroup);
            if (isNaN(smoothingGroupInt)) {
                smoothingGroupInt = smoothingGroup === 'off' ? 0 : 1;
            }
            let smoothCheck = this.rawMesh.smoothingGroup.normalized;
            this.rawMesh.smoothingGroup.normalized = this.rawMesh.smoothingGroup.splitMaterials ? smoothingGroupInt : smoothingGroupInt === 0 ? 0 : 1;
            this.rawMesh.smoothingGroup.real = smoothingGroupInt;
            if (smoothCheck !== smoothingGroupInt) {
                this.rawMesh.counts.smoothingGroupCount++;
                this._checkSubGroup();
            }
        },
        _checkFaceType: function (faceType) {
            if (this.rawMesh.faceType !== faceType) {
                this._processCompletedMesh();
                this.rawMesh.faceType = faceType;
                this._checkSubGroup();
            }
        },
        _checkSubGroup: function () {
            let index = this.rawMesh.activeMtlName + '|' + this.rawMesh.smoothingGroup.normalized;
            this.rawMesh.subGroupInUse = this.rawMesh.subGroups[index];
            if (this.rawMesh.subGroupInUse === undefined || this.rawMesh.subGroupInUse === null) {
                this.rawMesh.subGroupInUse = {
                    index: index,
                    objectName: this.rawMesh.objectName,
                    groupName: this.rawMesh.groupName,
                    materialName: this.rawMesh.activeMtlName,
                    smoothingGroup: this.rawMesh.smoothingGroup.normalized,
                    vertices: [],
                    indexMappingsCount: 0,
                    indexMappings: [],
                    indices: [],
                    colors: [],
                    uvs: [],
                    normals: []
                };
                this.rawMesh.subGroups[index] = this.rawMesh.subGroupInUse;
            }
        },
        _buildFace: function (faceIndexV, faceIndexU, faceIndexN) {
            let subGroupInUse = this.rawMesh.subGroupInUse;
            let scope = this;
            let updateSubGroupInUse = function () {
                let faceIndexVi = parseInt(faceIndexV);
                let indexPointerV = 3 * (faceIndexVi > 0 ? faceIndexVi - 1 : faceIndexVi + scope.vertices.length / 3);
                let indexPointerC = scope.colors.length > 0 ? indexPointerV : null;
                let vertices = subGroupInUse.vertices;
                vertices.push(scope.vertices[indexPointerV++]);
                vertices.push(scope.vertices[indexPointerV++]);
                vertices.push(scope.vertices[indexPointerV]);
                if (indexPointerC !== null) {
                    let colors = subGroupInUse.colors;
                    colors.push(scope.colors[indexPointerC++]);
                    colors.push(scope.colors[indexPointerC++]);
                    colors.push(scope.colors[indexPointerC]);
                }
                if (faceIndexU) {
                    let faceIndexUi = parseInt(faceIndexU);
                    let indexPointerU = 2 * (faceIndexUi > 0 ? faceIndexUi - 1 : faceIndexUi + scope.uvs.length / 2);
                    let uvs = subGroupInUse.uvs;
                    uvs.push(scope.uvs[indexPointerU++]);
                    uvs.push(scope.uvs[indexPointerU]);
                }
                if (faceIndexN && !scope.disregardNormals) {
                    let faceIndexNi = parseInt(faceIndexN);
                    let indexPointerN = 3 * (faceIndexNi > 0 ? faceIndexNi - 1 : faceIndexNi + scope.normals.length / 3);
                    let normals = subGroupInUse.normals;
                    normals.push(scope.normals[indexPointerN++]);
                    normals.push(scope.normals[indexPointerN++]);
                    normals.push(scope.normals[indexPointerN]);
                }
            };
            if (this.useIndices) {
                if (this.disregardNormals)
                    faceIndexN = undefined;
                let mappingName = faceIndexV + (faceIndexU ? '_' + faceIndexU : '_n') + (faceIndexN ? '_' + faceIndexN : '_n');
                let indicesPointer = subGroupInUse.indexMappings[mappingName];
                if (indicesPointer === undefined || indicesPointer === null) {
                    indicesPointer = this.rawMesh.subGroupInUse.vertices.length / 3;
                    updateSubGroupInUse();
                    subGroupInUse.indexMappings[mappingName] = indicesPointer;
                    subGroupInUse.indexMappingsCount++;
                } else {
                    this.rawMesh.counts.doubleIndicesCount++;
                }
                subGroupInUse.indices.push(indicesPointer);
            } else {
                updateSubGroupInUse();
            }
            this.rawMesh.counts.faceCount++;
        },
        _createRawMeshReport: function (inputObjectCount) {
            return 'Input Object number: ' + inputObjectCount + '\n\tObject name: ' + this.rawMesh.objectName + '\n\tGroup name: ' + this.rawMesh.groupName + '\n\tMtllib name: ' + this.rawMesh.mtllibName + '\n\tVertex count: ' + this.vertices.length / 3 + '\n\tNormal count: ' + this.normals.length / 3 + '\n\tUV count: ' + this.uvs.length / 2 + '\n\tSmoothingGroup count: ' + this.rawMesh.counts.smoothingGroupCount + '\n\tMaterial count: ' + this.rawMesh.counts.mtlCount + '\n\tReal MeshOutputGroup count: ' + this.rawMesh.subGroups.length;
        },
        _finalizeRawMesh: function () {
            let meshOutputGroupTemp = [];
            let meshOutputGroup;
            let absoluteVertexCount = 0;
            let absoluteIndexMappingsCount = 0;
            let absoluteIndexCount = 0;
            let absoluteColorCount = 0;
            let absoluteNormalCount = 0;
            let absoluteUvCount = 0;
            let indices;
            for (let name in this.rawMesh.subGroups) {
                meshOutputGroup = this.rawMesh.subGroups[name];
                if (meshOutputGroup.vertices.length > 0) {
                    indices = meshOutputGroup.indices;
                    if (indices.length > 0 && absoluteIndexMappingsCount > 0) {
                        for (let i = 0; i < indices.length; i++) {
                            indices[i] = indices[i] + absoluteIndexMappingsCount;
                        }
                    }
                    meshOutputGroupTemp.push(meshOutputGroup);
                    absoluteVertexCount += meshOutputGroup.vertices.length;
                    absoluteIndexMappingsCount += meshOutputGroup.indexMappingsCount;
                    absoluteIndexCount += meshOutputGroup.indices.length;
                    absoluteColorCount += meshOutputGroup.colors.length;
                    absoluteUvCount += meshOutputGroup.uvs.length;
                    absoluteNormalCount += meshOutputGroup.normals.length;
                }
            }
            let result = null;
            if (meshOutputGroupTemp.length > 0) {
                result = {
                    name: this.rawMesh.groupName !== '' ? this.rawMesh.groupName : this.rawMesh.objectName,
                    subGroups: meshOutputGroupTemp,
                    absoluteVertexCount: absoluteVertexCount,
                    absoluteIndexCount: absoluteIndexCount,
                    absoluteColorCount: absoluteColorCount,
                    absoluteNormalCount: absoluteNormalCount,
                    absoluteUvCount: absoluteUvCount,
                    faceCount: this.rawMesh.counts.faceCount,
                    doubleIndicesCount: this.rawMesh.counts.doubleIndicesCount
                };
            }
            return result;
        },
        _processCompletedMesh: function () {
            let result = this._finalizeRawMesh();
            let haveMesh = result !== null;
            if (haveMesh) {
                if (this.colors.length > 0 && this.colors.length !== this.vertices.length) {
                    this.callbacks.onError('Vertex Colors were detected, but vertex count and color count do not match!');
                }
                if (this.logging.enabled && this.logging.debug)
                    console.debug(this._createRawMeshReport(this.inputObjectCount));
                this.inputObjectCount++;
                this._buildMesh(result);
                let progressBytesPercent = this.globalCounts.currentByte / this.globalCounts.totalBytes;
                this._onProgress('Completed [o: ' + this.rawMesh.objectName + ' g:' + this.rawMesh.groupName + '' + '] Total progress: ' + (progressBytesPercent * 100).toFixed(2) + '%');
                this._resetRawMesh();
            }
            return haveMesh;
        },
        _buildMesh: function (result) {
            let meshOutputGroups = result.subGroups;
            let vertexFA = new Float32Array(result.absoluteVertexCount);
            this.globalCounts.vertices += result.absoluteVertexCount / 3;
            this.globalCounts.faces += result.faceCount;
            this.globalCounts.doubleIndicesCount += result.doubleIndicesCount;
            let indexUA = result.absoluteIndexCount > 0 ? new Uint32Array(result.absoluteIndexCount) : null;
            let colorFA = result.absoluteColorCount > 0 ? new Float32Array(result.absoluteColorCount) : null;
            let normalFA = result.absoluteNormalCount > 0 ? new Float32Array(result.absoluteNormalCount) : null;
            let uvFA = result.absoluteUvCount > 0 ? new Float32Array(result.absoluteUvCount) : null;
            let haveVertexColors = colorFA !== null;
            let meshOutputGroup;
            let materialNames = [];
            let createMultiMaterial = meshOutputGroups.length > 1;
            let materialIndex = 0;
            let materialIndexMapping = [];
            let selectedMaterialIndex;
            let materialGroup;
            let materialGroups = [];
            let vertexFAOffset = 0;
            let indexUAOffset = 0;
            let colorFAOffset = 0;
            let normalFAOffset = 0;
            let uvFAOffset = 0;
            let materialGroupOffset = 0;
            let materialGroupLength = 0;
            let materialOrg, material, materialName, materialNameOrg;
            for (let oodIndex in meshOutputGroups) {
                if (!meshOutputGroups.hasOwnProperty(oodIndex))
                    continue;
                meshOutputGroup = meshOutputGroups[oodIndex];
                materialNameOrg = meshOutputGroup.materialName;
                if (this.rawMesh.faceType < 4) {
                    materialName = materialNameOrg + (haveVertexColors ? '_vertexColor' : '') + (meshOutputGroup.smoothingGroup === 0 ? '_flat' : '');
                } else {
                    materialName = this.rawMesh.faceType === 6 ? 'defaultPointMaterial' : 'defaultLineMaterial';
                }
                materialOrg = this.materials[materialNameOrg];
                material = this.materials[materialName];
                if ((materialOrg === undefined || materialOrg === null) && (material === undefined || material === null)) {
                    materialName = haveVertexColors ? 'defaultVertexColorMaterial' : 'defaultMaterial';
                    material = this.materials[materialName];
                    if (this.logging.enabled) {
                        console.info('object_group "' + meshOutputGroup.objectName + '_' + meshOutputGroup.groupName + '" was defined with unresolvable material "' + materialNameOrg + '"! Assigning "' + materialName + '".');
                    }
                }
                if (material === undefined || material === null) {
                    let materialCloneInstructions = {
                        materialNameOrg: materialNameOrg,
                        materialName: materialName,
                        materialProperties: {
                            vertexColors: haveVertexColors ? 2 : 0,
                            flatShading: meshOutputGroup.smoothingGroup === 0
                        }
                    };
                    let payload = {
                        cmd: 'assetAvailable',
                        type: 'material',
                        materials: { materialCloneInstructions: materialCloneInstructions }
                    };
                    this.callbacks.onAssetAvailable(payload);
                    let matCheck = this.materials[materialName];
                    if (matCheck === undefined || matCheck === null) {
                        this.materials[materialName] = materialCloneInstructions;
                    }
                }
                if (createMultiMaterial) {
                    selectedMaterialIndex = materialIndexMapping[materialName];
                    if (!selectedMaterialIndex) {
                        selectedMaterialIndex = materialIndex;
                        materialIndexMapping[materialName] = materialIndex;
                        materialNames.push(materialName);
                        materialIndex++;
                    }
                    materialGroupLength = this.useIndices ? meshOutputGroup.indices.length : meshOutputGroup.vertices.length / 3;
                    materialGroup = {
                        start: materialGroupOffset,
                        count: materialGroupLength,
                        index: selectedMaterialIndex
                    };
                    materialGroups.push(materialGroup);
                    materialGroupOffset += materialGroupLength;
                } else {
                    materialNames.push(materialName);
                }
                vertexFA.set(meshOutputGroup.vertices, vertexFAOffset);
                vertexFAOffset += meshOutputGroup.vertices.length;
                if (indexUA) {
                    indexUA.set(meshOutputGroup.indices, indexUAOffset);
                    indexUAOffset += meshOutputGroup.indices.length;
                }
                if (colorFA) {
                    colorFA.set(meshOutputGroup.colors, colorFAOffset);
                    colorFAOffset += meshOutputGroup.colors.length;
                }
                if (normalFA) {
                    normalFA.set(meshOutputGroup.normals, normalFAOffset);
                    normalFAOffset += meshOutputGroup.normals.length;
                }
                if (uvFA) {
                    uvFA.set(meshOutputGroup.uvs, uvFAOffset);
                    uvFAOffset += meshOutputGroup.uvs.length;
                }
                if (this.logging.enabled && this.logging.debug) {
                    let materialIndexLine = selectedMaterialIndex === undefined || selectedMaterialIndex === null ? '' : '\n\t\tmaterialIndex: ' + selectedMaterialIndex;
                    let createdReport = '\tOutput Object no.: ' + this.outputObjectCount + '\n\t\tgroupName: ' + meshOutputGroup.groupName + '\n\t\tIndex: ' + meshOutputGroup.index + '\n\t\tfaceType: ' + this.rawMesh.faceType + '\n\t\tmaterialName: ' + meshOutputGroup.materialName + '\n\t\tsmoothingGroup: ' + meshOutputGroup.smoothingGroup + materialIndexLine + '\n\t\tobjectName: ' + meshOutputGroup.objectName + '\n\t\t#vertices: ' + meshOutputGroup.vertices.length / 3 + '\n\t\t#indices: ' + meshOutputGroup.indices.length + '\n\t\t#colors: ' + meshOutputGroup.colors.length / 3 + '\n\t\t#uvs: ' + meshOutputGroup.uvs.length / 2 + '\n\t\t#normals: ' + meshOutputGroup.normals.length / 3;
                    console.debug(createdReport);
                }
            }
            this.outputObjectCount++;
            this.callbacks.onAssetAvailable({
                cmd: 'assetAvailable',
                type: 'mesh',
                progress: { numericalValue: this.globalCounts.currentByte / this.globalCounts.totalBytes },
                params: { meshName: result.name },
                materials: {
                    multiMaterial: createMultiMaterial,
                    materialNames: materialNames,
                    materialGroups: materialGroups
                },
                buffers: {
                    vertices: vertexFA,
                    indices: indexUA,
                    colors: colorFA,
                    normals: normalFA,
                    uvs: uvFA
                },
                geometryType: this.rawMesh.faceType < 4 ? 0 : this.rawMesh.faceType === 6 ? 2 : 1
            }, [vertexFA.buffer], indexUA !== null ? [indexUA.buffer] : null, colorFA !== null ? [colorFA.buffer] : null, normalFA !== null ? [normalFA.buffer] : null, uvFA !== null ? [uvFA.buffer] : null);
        },
        _finalizeParsing: function () {
            if (this.logging.enabled)
                console.info('Global output object count: ' + this.outputObjectCount);
            if (this._processCompletedMesh() && this.logging.enabled) {
                let parserFinalReport = 'Overall counts: ' + '\n\tVertices: ' + this.globalCounts.vertices + '\n\tFaces: ' + this.globalCounts.faces + '\n\tMultiple definitions: ' + this.globalCounts.doubleIndicesCount;
                console.info(parserFinalReport);
            }
        }
    };

    return OBJLoader2Parser;
});
define('skylark-threejs-ex/loaders/obj2/shared/MeshReceiver',[
    'skylark-threejs'
], function (THREE) {
    'use strict';
    const MeshReceiver = function (materialHandler) {
        this.logging = {
            enabled: false,
            debug: false
        };
        this.callbacks = {
            onProgress: null,
            onMeshAlter: null
        };
        this.materialHandler = materialHandler;
    };
    MeshReceiver.prototype = {
        constructor: MeshReceiver,
        setLogging: function (enabled, debug) {
            this.logging.enabled = enabled === true;
            this.logging.debug = debug === true;
        },
        _setCallbacks: function (onProgress, onMeshAlter) {
            if (onProgress !== null && onProgress !== undefined && onProgress instanceof Function) {
                this.callbacks.onProgress = onProgress;
            }
            if (onMeshAlter !== null && onMeshAlter !== undefined && onMeshAlter instanceof Function) {
                this.callbacks.onMeshAlter = onMeshAlter;
            }
        },
        buildMeshes: function (meshPayload) {
            let meshName = meshPayload.params.meshName;
            let buffers = meshPayload.buffers;
            let bufferGeometry = new THREE.BufferGeometry();
            if (buffers.vertices !== undefined && buffers.vertices !== null) {
                bufferGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(buffers.vertices), 3));
            }
            if (buffers.indices !== undefined && buffers.indices !== null) {
                bufferGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(buffers.indices), 1));
            }
            if (buffers.colors !== undefined && buffers.colors !== null) {
                bufferGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(buffers.colors), 3));
            }
            if (buffers.normals !== undefined && buffers.normals !== null) {
                bufferGeometry.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffers.normals), 3));
            } else {
                bufferGeometry.computeVertexNormals();
            }
            if (buffers.uvs !== undefined && buffers.uvs !== null) {
                bufferGeometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(buffers.uvs), 2));
            }
            if (buffers.skinIndex !== undefined && buffers.skinIndex !== null) {
                bufferGeometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Uint16Array(buffers.skinIndex), 4));
            }
            if (buffers.skinWeight !== undefined && buffers.skinWeight !== null) {
                bufferGeometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(buffers.skinWeight), 4));
            }
            let material, materialName, key;
            let materialNames = meshPayload.materials.materialNames;
            let createMultiMaterial = meshPayload.materials.multiMaterial;
            let multiMaterials = [];
            for (key in materialNames) {
                materialName = materialNames[key];
                material = this.materialHandler.getMaterial(materialName);
                if (createMultiMaterial)
                    multiMaterials.push(material);
            }
            if (createMultiMaterial) {
                material = multiMaterials;
                let materialGroups = meshPayload.materials.materialGroups;
                let materialGroup;
                for (key in materialGroups) {
                    materialGroup = materialGroups[key];
                    bufferGeometry.addGroup(materialGroup.start, materialGroup.count, materialGroup.index);
                }
            }
            let meshes = [];
            let mesh;
            let callbackOnMeshAlterResult;
            let useOrgMesh = true;
            let geometryType = meshPayload.geometryType === null ? 0 : meshPayload.geometryType;
            if (this.callbacks.onMeshAlter) {
                callbackOnMeshAlterResult = this.callbacks.onMeshAlter({
                    detail: {
                        meshName: meshName,
                        bufferGeometry: bufferGeometry,
                        material: material,
                        geometryType: geometryType
                    }
                });
            }
            if (callbackOnMeshAlterResult) {
                if (callbackOnMeshAlterResult.isDisregardMesh()) {
                    useOrgMesh = false;
                } else if (callbackOnMeshAlterResult.providesAlteredMeshes()) {
                    for (let i in callbackOnMeshAlterResult.meshes) {
                        meshes.push(callbackOnMeshAlterResult.meshes[i]);
                    }
                    useOrgMesh = false;
                }
            }
            if (useOrgMesh) {
                if (meshPayload.computeBoundingSphere)
                    bufferGeometry.computeBoundingSphere();
                if (geometryType === 0) {
                    mesh = new THREE.Mesh(bufferGeometry, material);
                } else if (geometryType === 1) {
                    mesh = new THREE.LineSegments(bufferGeometry, material);
                } else {
                    mesh = new THREE.Points(bufferGeometry, material);
                }
                mesh.name = meshName;
                meshes.push(mesh);
            }
            let progressMessage = meshPayload.params.meshName;
            if (meshes.length > 0) {
                let meshNames = [];
                for (let i in meshes) {
                    mesh = meshes[i];
                    meshNames[i] = mesh.name;
                }
                progressMessage += ': Adding mesh(es) (' + meshNames.length + ': ' + meshNames + ') from input mesh: ' + meshName;
                progressMessage += ' (' + (meshPayload.progress.numericalValue * 100).toFixed(2) + '%)';
            } else {
                progressMessage += ': Not adding mesh: ' + meshName;
                progressMessage += ' (' + (meshPayload.progress.numericalValue * 100).toFixed(2) + '%)';
            }
            if (this.callbacks.onProgress) {
                this.callbacks.onProgress('progress', progressMessage, meshPayload.progress.numericalValue);
            }
            return meshes;
        }
    };

    return  MeshReceiver;
});
define('skylark-threejs-ex/loaders/obj2/shared/MaterialHandler',[
    'skylark-threejs'
], function (THREE) {
    'use strict';
    const MaterialHandler = function () {
        this.logging = {
            enabled: false,
            debug: false
        };
        this.callbacks = { onLoadMaterials: null };
        this.materials = {};
    };
    MaterialHandler.prototype = {
        constructor: MaterialHandler,
        setLogging: function (enabled, debug) {
            this.logging.enabled = enabled === true;
            this.logging.debug = debug === true;
        },
        _setCallbacks: function (onLoadMaterials) {
            if (onLoadMaterials !== undefined && onLoadMaterials !== null && onLoadMaterials instanceof Function) {
                this.callbacks.onLoadMaterials = onLoadMaterials;
            }
        },
        createDefaultMaterials: function (overrideExisting) {
            let defaultMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });
            defaultMaterial.name = 'defaultMaterial';
            let defaultVertexColorMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });
            defaultVertexColorMaterial.name = 'defaultVertexColorMaterial';
            defaultVertexColorMaterial.vertexColors = THREE.VertexColors;
            let defaultLineMaterial = new THREE.LineBasicMaterial();
            defaultLineMaterial.name = 'defaultLineMaterial';
            let defaultPointMaterial = new THREE.PointsMaterial({ size: 0.1 });
            defaultPointMaterial.name = 'defaultPointMaterial';
            let runtimeMaterials = {};
            runtimeMaterials[defaultMaterial.name] = defaultMaterial;
            runtimeMaterials[defaultVertexColorMaterial.name] = defaultVertexColorMaterial;
            runtimeMaterials[defaultLineMaterial.name] = defaultLineMaterial;
            runtimeMaterials[defaultPointMaterial.name] = defaultPointMaterial;
            this.addMaterials(runtimeMaterials, overrideExisting);
        },
        addPayloadMaterials: function (materialPayload) {
            let material, materialName;
            let materialCloneInstructions = materialPayload.materials.materialCloneInstructions;
            let newMaterials = {};
            if (materialCloneInstructions !== undefined && materialCloneInstructions !== null) {
                let materialNameOrg = materialCloneInstructions.materialNameOrg;
                materialNameOrg = materialNameOrg !== undefined && materialNameOrg !== null ? materialNameOrg : '';
                let materialOrg = this.materials[materialNameOrg];
                if (materialOrg) {
                    material = materialOrg.clone();
                    materialName = materialCloneInstructions.materialName;
                    material.name = materialName;
                    Object.assign(material, materialCloneInstructions.materialProperties);
                    this.materials[materialName] = material;
                    newMaterials[materialName] = material;
                } else {
                    if (this.logging.enabled) {
                        console.info('Requested material "' + materialNameOrg + '" is not available!');
                    }
                }
            }
            let materials = materialPayload.materials.serializedMaterials;
            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {
                let loader = new THREE.MaterialLoader();
                let materialJson;
                for (materialName in materials) {
                    materialJson = materials[materialName];
                    if (materialJson !== undefined && materialJson !== null) {
                        material = loader.parse(materialJson);
                        if (this.logging.enabled) {
                            console.info('De-serialized material with name "' + materialName + '" will be added.');
                        }
                        this.materials[materialName] = material;
                        newMaterials[materialName] = material;
                    }
                }
            }
            materials = materialPayload.materials.runtimeMaterials;
            newMaterials = this.addMaterials(materials, true, newMaterials);
            return newMaterials;
        },
        addMaterials: function (materials, overrideExisting, newMaterials) {
            if (newMaterials === undefined || newMaterials === null) {
                newMaterials = {};
            }
            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {
                let material;
                let existingMaterial;
                let add;
                for (let materialName in materials) {
                    material = materials[materialName];
                    add = overrideExisting === true;
                    if (!add) {
                        existingMaterial = this.materials[materialName];
                        add = existingMaterial === null || existingMaterial === undefined;
                    }
                    if (add) {
                        this.materials[materialName] = material;
                        newMaterials[materialName] = material;
                    }
                    if (this.logging.enabled && this.logging.debug) {
                        console.info('Material with name "' + materialName + '" was added.');
                    }
                }
            }
            if (this.callbacks.onLoadMaterials) {
                this.callbacks.onLoadMaterials(newMaterials);
            }
            return newMaterials;
        },
        getMaterials: function () {
            return this.materials;
        },
        getMaterial: function (materialName) {
            return this.materials[materialName];
        },
        getMaterialsJSON: function () {
            let materialsJSON = {};
            let material;
            for (let materialName in this.materials) {
                material = this.materials[materialName];
                materialsJSON[materialName] = material.toJSON();
            }
            return materialsJSON;
        },
        clearMaterials: function () {
            this.materials = {};
        }
    };
    return MaterialHandler;
});
define('skylark-threejs-ex/loaders/OBJLoader2',[
    "skylark-threejs",
    './obj2/OBJLoader2Parser',
    './obj2/shared/MeshReceiver',
    './obj2/shared/MaterialHandler'
], function (
    THREE, 
    OBJLoader2Parser, 
    MeshReceiver, 
    MaterialHandler
) {
    'use strict';
    const OBJLoader2 = function (manager) {
        THREE.Loader.call(this, manager);
        this.parser = new OBJLoader2Parser();
        this.modelName = '';
        this.instanceNo = 0;
        this.baseObject3d = new THREE.Object3D();
        this.materialHandler = new MaterialHandler();
        this.meshReceiver = new MeshReceiver(this.materialHandler);
        let scope = this;
        let defaultOnAssetAvailable = function (payload) {
            scope._onAssetAvailable(payload);
        };
        this.parser.setCallbackOnAssetAvailable(defaultOnAssetAvailable);
    };
    OBJLoader2.OBJLOADER2_VERSION = '3.2.0';
    console.info('Using OBJLoader2 version: ' + OBJLoader2.OBJLOADER2_VERSION);
    OBJLoader2.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: OBJLoader2,
        setLogging: function (enabled, debug) {
            this.parser.setLogging(enabled, debug);
            return this;
        },
        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {
            this.parser.setMaterialPerSmoothingGroup(materialPerSmoothingGroup);
            return this;
        },
        setUseOAsMesh: function (useOAsMesh) {
            this.parser.setUseOAsMesh(useOAsMesh);
            return this;
        },
        setUseIndices: function (useIndices) {
            this.parser.setUseIndices(useIndices);
            return this;
        },
        setDisregardNormals: function (disregardNormals) {
            this.parser.setDisregardNormals(disregardNormals);
            return this;
        },
        setModelName: function (modelName) {
            this.modelName = modelName ? modelName : this.modelName;
            return this;
        },
        setBaseObject3d: function (baseObject3d) {
            this.baseObject3d = baseObject3d === undefined || baseObject3d === null ? this.baseObject3d : baseObject3d;
            return this;
        },
        addMaterials: function (materials, overrideExisting) {
            this.materialHandler.addMaterials(materials, overrideExisting);
            return this;
        },
        setCallbackOnAssetAvailable: function (onAssetAvailable) {
            this.parser.setCallbackOnAssetAvailable(onAssetAvailable);
            return this;
        },
        setCallbackOnProgress: function (onProgress) {
            this.parser.setCallbackOnProgress(onProgress);
            return this;
        },
        setCallbackOnError: function (onError) {
            this.parser.setCallbackOnError(onError);
            return this;
        },
        setCallbackOnLoad: function (onLoad) {
            this.parser.setCallbackOnLoad(onLoad);
            return this;
        },
        setCallbackOnMeshAlter: function (onMeshAlter) {
            this.meshReceiver._setCallbacks(this.parser.callbacks.onProgress, onMeshAlter);
            return this;
        },
        setCallbackOnLoadMaterials: function (onLoadMaterials) {
            this.materialHandler._setCallbacks(onLoadMaterials);
            return this;
        },
        load: function (url, onLoad, onFileLoadProgress, onError, onMeshAlter) {
            let scope = this;
            if (onLoad === null || onLoad === undefined || !(onLoad instanceof Function)) {
                let errorMessage = 'onLoad is not a function! Aborting...';
                scope.parser.callbacks.onError(errorMessage);
                throw errorMessage;
            } else {
                this.parser.setCallbackOnLoad(onLoad);
            }
            if (onError === null || onError === undefined || !(onError instanceof Function)) {
                onError = function (event) {
                    let errorMessage = event;
                    if (event.currentTarget && event.currentTarget.statusText !== null) {
                        errorMessage = 'Error occurred while downloading!\nurl: ' + event.currentTarget.responseURL + '\nstatus: ' + event.currentTarget.statusText;
                    }
                    scope.parser.callbacks.onError(errorMessage);
                };
            }
            if (!url) {
                onError('An invalid url was provided. Unable to continue!');
            }
            let urlFull = new URL(url, window.location.href).href;
            let filename = urlFull;
            let urlParts = urlFull.split('/');
            if (urlParts.length > 2) {
                filename = urlParts[urlParts.length - 1];
                this.path = urlParts.slice(0, urlParts.length - 1).join('/') + '/';
            }
            if (onFileLoadProgress === null || onFileLoadProgress === undefined || !(onFileLoadProgress instanceof Function)) {
                let numericalValueRef = 0;
                let numericalValue = 0;
                onFileLoadProgress = function (event) {
                    if (!event.lengthComputable)
                        return;
                    numericalValue = event.loaded / event.total;
                    if (numericalValue > numericalValueRef) {
                        numericalValueRef = numericalValue;
                        let output = 'Download of "' + url + '": ' + (numericalValue * 100).toFixed(2) + '%';
                        scope.parser.callbacks.onProgress('progressLoad', output, numericalValue);
                    }
                };
            }
            this.setCallbackOnMeshAlter(onMeshAlter);
            let fileLoaderOnLoad = function (content) {
                scope.parser.callbacks.onLoad(scope.parse(content), 'OBJLoader2#load: Parsing completed');
            };
            let fileLoader = new THREE.FileLoader(this.manager);
            fileLoader.setPath(this.path || this.resourcePath);
            fileLoader.setResponseType('arraybuffer');
            fileLoader.load(filename, fileLoaderOnLoad, onFileLoadProgress, onError);
        },
        parse: function (content) {
            if (content === null || content === undefined) {
                throw 'Provided content is not a valid ArrayBuffer or String. Unable to continue parsing';
            }
            if (this.parser.logging.enabled) {
                console.time('OBJLoader parse: ' + this.modelName);
            }
            this.materialHandler.createDefaultMaterials(false);
            this.parser.setMaterials(this.materialHandler.getMaterials());
            if (content instanceof ArrayBuffer || content instanceof Uint8Array) {
                if (this.parser.logging.enabled)
                    console.info('Parsing arrayBuffer...');
                this.parser.execute(content);
            } else if (typeof content === 'string' || content instanceof String) {
                if (this.parser.logging.enabled)
                    console.info('Parsing text...');
                this.parser.executeLegacy(content);
            } else {
                this.parser.callbacks.onError('Provided content was neither of type String nor Uint8Array! Aborting...');
            }
            if (this.parser.logging.enabled) {
                console.timeEnd('OBJLoader parse: ' + this.modelName);
            }
            return this.baseObject3d;
        },
        _onAssetAvailable: function (payload) {
            if (payload.cmd !== 'assetAvailable')
                return;
            if (payload.type === 'mesh') {
                let meshes = this.meshReceiver.buildMeshes(payload);
                for (let mesh of meshes) {
                    this.baseObject3d.add(mesh);
                }
            } else if (payload.type === 'material') {
                this.materialHandler.addPayloadMaterials(payload);
            }
        }
    });
    return OBJLoader2;
});
define('skylark-threejs-ex/loaders/PCDLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PCDLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.littleEndian = true;
    };
    PCDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: PCDLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (data) {
                try {
                    onLoad(scope.parse(data, url));
                } catch (e) {
                    if (onError) {
                        onError(e);
                    } else {
                        throw e;
                    }
                }
            }, onProgress, onError);
        },
        parse: function (data, url) {
            function decompressLZF(inData, outLength) {
                var inLength = inData.length;
                var outData = new Uint8Array(outLength);
                var inPtr = 0;
                var outPtr = 0;
                var ctrl;
                var len;
                var ref;
                do {
                    ctrl = inData[inPtr++];
                    if (ctrl < 1 << 5) {
                        ctrl++;
                        if (outPtr + ctrl > outLength)
                            throw new Error('Output buffer is not large enough');
                        if (inPtr + ctrl > inLength)
                            throw new Error('Invalid compressed data');
                        do {
                            outData[outPtr++] = inData[inPtr++];
                        } while (--ctrl);
                    } else {
                        len = ctrl >> 5;
                        ref = outPtr - ((ctrl & 31) << 8) - 1;
                        if (inPtr >= inLength)
                            throw new Error('Invalid compressed data');
                        if (len === 7) {
                            len += inData[inPtr++];
                            if (inPtr >= inLength)
                                throw new Error('Invalid compressed data');
                        }
                        ref -= inData[inPtr++];
                        if (outPtr + len + 2 > outLength)
                            throw new Error('Output buffer is not large enough');
                        if (ref < 0)
                            throw new Error('Invalid compressed data');
                        if (ref >= outPtr)
                            throw new Error('Invalid compressed data');
                        do {
                            outData[outPtr++] = outData[ref++];
                        } while (--len + 2);
                    }
                } while (inPtr < inLength);
                return outData;
            }
            function parseHeader(data) {
                var PCDheader = {};
                var result1 = data.search(/[\r\n]DATA\s(\S*)\s/i);
                var result2 = /[\r\n]DATA\s(\S*)\s/i.exec(data.substr(result1 - 1));
                PCDheader.data = result2[1];
                PCDheader.headerLen = result2[0].length + result1;
                PCDheader.str = data.substr(0, PCDheader.headerLen);
                PCDheader.str = PCDheader.str.replace(/\#.*/gi, '');
                PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);
                PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);
                PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);
                PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);
                PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);
                PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);
                PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);
                PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);
                PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str);
                if (PCDheader.version !== null)
                    PCDheader.version = parseFloat(PCDheader.version[1]);
                if (PCDheader.fields !== null)
                    PCDheader.fields = PCDheader.fields[1].split(' ');
                if (PCDheader.type !== null)
                    PCDheader.type = PCDheader.type[1].split(' ');
                if (PCDheader.width !== null)
                    PCDheader.width = parseInt(PCDheader.width[1]);
                if (PCDheader.height !== null)
                    PCDheader.height = parseInt(PCDheader.height[1]);
                if (PCDheader.viewpoint !== null)
                    PCDheader.viewpoint = PCDheader.viewpoint[1];
                if (PCDheader.points !== null)
                    PCDheader.points = parseInt(PCDheader.points[1], 10);
                if (PCDheader.points === null)
                    PCDheader.points = PCDheader.width * PCDheader.height;
                if (PCDheader.size !== null) {
                    PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {
                        return parseInt(x, 10);
                    });
                }
                if (PCDheader.count !== null) {
                    PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {
                        return parseInt(x, 10);
                    });
                } else {
                    PCDheader.count = [];
                    for (var i = 0, l = PCDheader.fields.length; i < l; i++) {
                        PCDheader.count.push(1);
                    }
                }
                PCDheader.offset = {};
                var sizeSum = 0;
                for (var i = 0, l = PCDheader.fields.length; i < l; i++) {
                    if (PCDheader.data === 'ascii') {
                        PCDheader.offset[PCDheader.fields[i]] = i;
                    } else {
                        PCDheader.offset[PCDheader.fields[i]] = sizeSum;
                        sizeSum += PCDheader.size[i];
                    }
                }
                PCDheader.rowSize = sizeSum;
                return PCDheader;
            }
            var textData = THREE.LoaderUtils.decodeText(new Uint8Array(data));
            var PCDheader = parseHeader(textData);
            var position = [];
            var normal = [];
            var color = [];
            if (PCDheader.data === 'ascii') {
                var offset = PCDheader.offset;
                var pcdData = textData.substr(PCDheader.headerLen);
                var lines = pcdData.split('\n');
                for (var i = 0, l = lines.length; i < l; i++) {
                    if (lines[i] === '')
                        continue;
                    var line = lines[i].split(' ');
                    if (offset.x !== undefined) {
                        position.push(parseFloat(line[offset.x]));
                        position.push(parseFloat(line[offset.y]));
                        position.push(parseFloat(line[offset.z]));
                    }
                    if (offset.rgb !== undefined) {
                        var rgb = parseFloat(line[offset.rgb]);
                        var r = rgb >> 16 & 255;
                        var g = rgb >> 8 & 255;
                        var b = rgb >> 0 & 255;
                        color.push(r / 255, g / 255, b / 255);
                    }
                    if (offset.normal_x !== undefined) {
                        normal.push(parseFloat(line[offset.normal_x]));
                        normal.push(parseFloat(line[offset.normal_y]));
                        normal.push(parseFloat(line[offset.normal_z]));
                    }
                }
            }
            if (PCDheader.data === 'binary_compressed') {
                var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));
                var compressedSize = sizes[0];
                var decompressedSize = sizes[1];
                var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);
                var dataview = new DataView(decompressed.buffer);
                var offset = PCDheader.offset;
                for (var i = 0; i < PCDheader.points; i++) {
                    if (offset.x !== undefined) {
                        position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));
                        position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));
                        position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));
                    }
                    if (offset.rgb !== undefined) {
                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);
                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);
                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);
                    }
                    if (offset.normal_x !== undefined) {
                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));
                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));
                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));
                    }
                }
            }
            if (PCDheader.data === 'binary') {
                var dataview = new DataView(data, PCDheader.headerLen);
                var offset = PCDheader.offset;
                for (var i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {
                    if (offset.x !== undefined) {
                        position.push(dataview.getFloat32(row + offset.x, this.littleEndian));
                        position.push(dataview.getFloat32(row + offset.y, this.littleEndian));
                        position.push(dataview.getFloat32(row + offset.z, this.littleEndian));
                    }
                    if (offset.rgb !== undefined) {
                        color.push(dataview.getUint8(row + offset.rgb + 2) / 255);
                        color.push(dataview.getUint8(row + offset.rgb + 1) / 255);
                        color.push(dataview.getUint8(row + offset.rgb + 0) / 255);
                    }
                    if (offset.normal_x !== undefined) {
                        normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));
                        normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));
                        normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));
                    }
                }
            }
            var geometry = new THREE.BufferGeometry();
            if (position.length > 0)
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
            if (normal.length > 0)
                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal, 3));
            if (color.length > 0)
                geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));
            geometry.computeBoundingSphere();
            var material = new THREE.PointsMaterial({ size: 0.005 });
            if (color.length > 0) {
                material.vertexColors = true;
            } else {
                material.color.setHex(Math.random() * 16777215);
            }
            var mesh = new THREE.Points(geometry, material);
            var name = url.split('').reverse().join('');
            name = /([^\/]*)/.exec(name);
            name = name[1].split('').reverse().join('');
            mesh.name = name;
            return mesh;
        }
    });
    return PCDLoader;
});
define('skylark-threejs-ex/loaders/PLYLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PLYLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.propertyNameMapping = {};
    };
    PLYLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: PLYLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        setPropertyNameMapping: function (mapping) {
            this.propertyNameMapping = mapping;
        },
        parse: function (data) {
            function parseHeader(data) {
                var patternHeader = /ply([\s\S]*)end_header\r?\n/;
                var headerText = '';
                var headerLength = 0;
                var result = patternHeader.exec(data);
                if (result !== null) {
                    headerText = result[1];
                    headerLength = result[0].length;
                }
                var header = {
                    comments: [],
                    elements: [],
                    headerLength: headerLength
                };
                var lines = headerText.split('\n');
                var currentElement;
                var lineType, lineValues;
                function make_ply_element_property(propertValues, propertyNameMapping) {
                    var property = { type: propertValues[0] };
                    if (property.type === 'list') {
                        property.name = propertValues[3];
                        property.countType = propertValues[1];
                        property.itemType = propertValues[2];
                    } else {
                        property.name = propertValues[1];
                    }
                    if (property.name in propertyNameMapping) {
                        property.name = propertyNameMapping[property.name];
                    }
                    return property;
                }
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    line = line.trim();
                    if (line === '')
                        continue;
                    lineValues = line.split(/\s+/);
                    lineType = lineValues.shift();
                    line = lineValues.join(' ');
                    switch (lineType) {
                    case 'format':
                        header.format = lineValues[0];
                        header.version = lineValues[1];
                        break;
                    case 'comment':
                        header.comments.push(line);
                        break;
                    case 'element':
                        if (currentElement !== undefined) {
                            header.elements.push(currentElement);
                        }
                        currentElement = {};
                        currentElement.name = lineValues[0];
                        currentElement.count = parseInt(lineValues[1]);
                        currentElement.properties = [];
                        break;
                    case 'property':
                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));
                        break;
                    default:
                        console.log('unhandled', lineType, lineValues);
                    }
                }
                if (currentElement !== undefined) {
                    header.elements.push(currentElement);
                }
                return header;
            }
            function parseASCIINumber(n, type) {
                switch (type) {
                case 'char':
                case 'uchar':
                case 'short':
                case 'ushort':
                case 'int':
                case 'uint':
                case 'int8':
                case 'uint8':
                case 'int16':
                case 'uint16':
                case 'int32':
                case 'uint32':
                    return parseInt(n);
                case 'float':
                case 'double':
                case 'float32':
                case 'float64':
                    return parseFloat(n);
                }
            }
            function parseASCIIElement(properties, line) {
                var values = line.split(/\s+/);
                var element = {};
                for (var i = 0; i < properties.length; i++) {
                    if (properties[i].type === 'list') {
                        var list = [];
                        var n = parseASCIINumber(values.shift(), properties[i].countType);
                        for (var j = 0; j < n; j++) {
                            list.push(parseASCIINumber(values.shift(), properties[i].itemType));
                        }
                        element[properties[i].name] = list;
                    } else {
                        element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);
                    }
                }
                return element;
            }
            function parseASCII(data, header) {
                var buffer = {
                    indices: [],
                    vertices: [],
                    normals: [],
                    uvs: [],
                    faceVertexUvs: [],
                    colors: []
                };
                var result;
                var patternBody = /end_header\s([\s\S]*)$/;
                var body = '';
                if ((result = patternBody.exec(data)) !== null) {
                    body = result[1];
                }
                var lines = body.split('\n');
                var currentElement = 0;
                var currentElementCount = 0;
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    line = line.trim();
                    if (line === '') {
                        continue;
                    }
                    if (currentElementCount >= header.elements[currentElement].count) {
                        currentElement++;
                        currentElementCount = 0;
                    }
                    var element = parseASCIIElement(header.elements[currentElement].properties, line);
                    handleElement(buffer, header.elements[currentElement].name, element);
                    currentElementCount++;
                }
                return postProcess(buffer);
            }
            function postProcess(buffer) {
                var geometry = new THREE.BufferGeometry();
                if (buffer.indices.length > 0) {
                    geometry.setIndex(buffer.indices);
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3));
                if (buffer.normals.length > 0) {
                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3));
                }
                if (buffer.uvs.length > 0) {
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2));
                }
                if (buffer.colors.length > 0) {
                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3));
                }
                if (buffer.faceVertexUvs.length > 0) {
                    geometry = geometry.toNonIndexed();
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2));
                }
                geometry.computeBoundingSphere();
                return geometry;
            }
            function handleElement(buffer, elementName, element) {
                if (elementName === 'vertex') {
                    buffer.vertices.push(element.x, element.y, element.z);
                    if ('nx' in element && 'ny' in element && 'nz' in element) {
                        buffer.normals.push(element.nx, element.ny, element.nz);
                    }
                    if ('s' in element && 't' in element) {
                        buffer.uvs.push(element.s, element.t);
                    }
                    if ('red' in element && 'green' in element && 'blue' in element) {
                        buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);
                    }
                } else if (elementName === 'face') {
                    var vertex_indices = element.vertex_indices || element.vertex_index;
                    var texcoord = element.texcoord;
                    if (vertex_indices.length === 3) {
                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);
                        if (texcoord && texcoord.length === 6) {
                            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);
                            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);
                            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);
                        }
                    } else if (vertex_indices.length === 4) {
                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);
                        buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);
                    }
                }
            }
            function binaryRead(dataview, at, type, little_endian) {
                switch (type) {
                case 'int8':
                case 'char':
                    return [
                        dataview.getInt8(at),
                        1
                    ];
                case 'uint8':
                case 'uchar':
                    return [
                        dataview.getUint8(at),
                        1
                    ];
                case 'int16':
                case 'short':
                    return [
                        dataview.getInt16(at, little_endian),
                        2
                    ];
                case 'uint16':
                case 'ushort':
                    return [
                        dataview.getUint16(at, little_endian),
                        2
                    ];
                case 'int32':
                case 'int':
                    return [
                        dataview.getInt32(at, little_endian),
                        4
                    ];
                case 'uint32':
                case 'uint':
                    return [
                        dataview.getUint32(at, little_endian),
                        4
                    ];
                case 'float32':
                case 'float':
                    return [
                        dataview.getFloat32(at, little_endian),
                        4
                    ];
                case 'float64':
                case 'double':
                    return [
                        dataview.getFloat64(at, little_endian),
                        8
                    ];
                }
            }
            function binaryReadElement(dataview, at, properties, little_endian) {
                var element = {};
                var result, read = 0;
                for (var i = 0; i < properties.length; i++) {
                    if (properties[i].type === 'list') {
                        var list = [];
                        result = binaryRead(dataview, at + read, properties[i].countType, little_endian);
                        var n = result[0];
                        read += result[1];
                        for (var j = 0; j < n; j++) {
                            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);
                            list.push(result[0]);
                            read += result[1];
                        }
                        element[properties[i].name] = list;
                    } else {
                        result = binaryRead(dataview, at + read, properties[i].type, little_endian);
                        element[properties[i].name] = result[0];
                        read += result[1];
                    }
                }
                return [
                    element,
                    read
                ];
            }
            function parseBinary(data, header) {
                var buffer = {
                    indices: [],
                    vertices: [],
                    normals: [],
                    uvs: [],
                    faceVertexUvs: [],
                    colors: []
                };
                var little_endian = header.format === 'binary_little_endian';
                var body = new DataView(data, header.headerLength);
                var result, loc = 0;
                for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {
                    for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {
                        result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);
                        loc += result[1];
                        var element = result[0];
                        handleElement(buffer, header.elements[currentElement].name, element);
                    }
                }
                return postProcess(buffer);
            }
            var geometry;
            var scope = this;
            if (data instanceof ArrayBuffer) {
                var text = THREE.LoaderUtils.decodeText(new Uint8Array(data));
                var header = parseHeader(text);
                geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);
            } else {
                geometry = parseASCII(data, parseHeader(data));
            }
            return geometry;
        }
    });
    return PLYLoader;
});
define('skylark-threejs-ex/loaders/PRWMLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PRWMLoader = function () {
        var bigEndianPlatform = null;
        function isBigEndianPlatform() {
            if (bigEndianPlatform === null) {
                var buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);
                uint8Array[0] = 170;
                uint8Array[1] = 187;
                bigEndianPlatform = uint16Array[0] === 43707;
            }
            return bigEndianPlatform;
        }
        var InvertedEncodingTypes = [
            null,
            Float32Array,
            null,
            Int8Array,
            Int16Array,
            null,
            Int32Array,
            Uint8Array,
            Uint16Array,
            null,
            Uint32Array
        ];
        var getMethods = {
            Uint16Array: 'getUint16',
            Uint32Array: 'getUint32',
            Int16Array: 'getInt16',
            Int32Array: 'getInt32',
            Float32Array: 'getFloat32',
            Float64Array: 'getFloat64'
        };
        function copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {
            var bytesPerElement = viewType.BYTES_PER_ELEMENT, result;
            if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {
                result = new viewType(sourceArrayBuffer, position, length);
            } else {
                var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian, i = 0;
                result = new viewType(length);
                for (; i < length; i++) {
                    result[i] = readView[getMethod](i * bytesPerElement, littleEndian);
                }
            }
            return result;
        }
        function decodePrwm(buffer) {
            var array = new Uint8Array(buffer), version = array[0], flags = array[1], indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31, valuesNumber = 0, indicesNumber = 0;
            if (bigEndian) {
                valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];
                indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];
            } else {
                valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);
                indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);
            }
            if (version === 0) {
                throw new Error('PRWM decoder: Invalid format version: 0');
            } else if (version !== 1) {
                throw new Error('PRWM decoder: Unsupported format version: ' + version);
            }
            if (!indexedGeometry) {
                if (indicesType !== 0) {
                    throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');
                } else if (indicesNumber !== 0) {
                    throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');
                }
            }
            var pos = 8;
            var attributes = {}, attributeName, char, attributeType, cardinality, encodingType, arrayType, values, indices, i;
            for (i = 0; i < attributesNumber; i++) {
                attributeName = '';
                while (pos < array.length) {
                    char = array[pos];
                    pos++;
                    if (char === 0) {
                        break;
                    } else {
                        attributeName += String.fromCharCode(char);
                    }
                }
                flags = array[pos];
                attributeType = flags >> 7 & 1;
                cardinality = (flags >> 4 & 3) + 1;
                encodingType = flags & 15;
                arrayType = InvertedEncodingTypes[encodingType];
                pos++;
                pos = Math.ceil(pos / 4) * 4;
                values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);
                pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;
                attributes[attributeName] = {
                    type: attributeType,
                    cardinality: cardinality,
                    values: values
                };
            }
            pos = Math.ceil(pos / 4) * 4;
            indices = null;
            if (indexedGeometry) {
                indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);
            }
            return {
                version: version,
                attributes: attributes,
                indices: indices
            };
        }
        function PRWMLoader(manager) {
            THREE.Loader.call(this, manager);
        }
        PRWMLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: PRWMLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new THREE.FileLoader(scope.manager);
                loader.setPath(scope.path);
                loader.setResponseType('arraybuffer');
                url = url.replace(/\*/g, isBigEndianPlatform() ? 'be' : 'le');
                loader.load(url, function (arrayBuffer) {
                    onLoad(scope.parse(arrayBuffer));
                }, onProgress, onError);
            },
            parse: function (arrayBuffer) {
                var data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new THREE.BufferGeometry(), attribute, i;
                for (i = 0; i < attributesKey.length; i++) {
                    attribute = data.attributes[attributesKey[i]];
                    bufferGeometry.setAttribute(attributesKey[i], new THREE.BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));
                }
                if (data.indices !== null) {
                    bufferGeometry.setIndex(new THREE.BufferAttribute(data.indices, 1));
                }
                return bufferGeometry;
            }
        });
        PRWMLoader.isBigEndianPlatform = function () {
            return isBigEndianPlatform();
        };
        return PRWMLoader;
    }();
    return PRWMLoader;
});
define('skylark-threejs-ex/loaders/STLLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var STLLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    STLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: STLLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                try {
                    onLoad(scope.parse(text));
                } catch (exception) {
                    if (onError) {
                        onError(exception);
                    }
                }
            }, onProgress, onError);
        },
        parse: function (data) {
            function isBinary(data) {
                var expect, face_size, n_faces, reader;
                reader = new DataView(data);
                face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;
                n_faces = reader.getUint32(80, true);
                expect = 80 + 32 / 8 + n_faces * face_size;
                if (expect === reader.byteLength) {
                    return true;
                }
                var solid = [
                    115,
                    111,
                    108,
                    105,
                    100
                ];
                for (var off = 0; off < 5; off++) {
                    if (matchDataViewAt(solid, reader, off))
                        return false;
                }
                return true;
            }
            function matchDataViewAt(query, reader, offset) {
                for (var i = 0, il = query.length; i < il; i++) {
                    if (query[i] !== reader.getUint8(offset + i, false))
                        return false;
                }
                return true;
            }
            function parseBinary(data) {
                var reader = new DataView(data);
                var faces = reader.getUint32(80, true);
                var r, g, b, hasColors = false, colors;
                var defaultR, defaultG, defaultB, alpha;
                for (var index = 0; index < 80 - 10; index++) {
                    if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {
                        hasColors = true;
                        colors = new Float32Array(faces * 3 * 3);
                        defaultR = reader.getUint8(index + 6) / 255;
                        defaultG = reader.getUint8(index + 7) / 255;
                        defaultB = reader.getUint8(index + 8) / 255;
                        alpha = reader.getUint8(index + 9) / 255;
                    }
                }
                var dataOffset = 84;
                var faceLength = 12 * 4 + 2;
                var geometry = new THREE.BufferGeometry();
                var vertices = new Float32Array(faces * 3 * 3);
                var normals = new Float32Array(faces * 3 * 3);
                for (var face = 0; face < faces; face++) {
                    var start = dataOffset + face * faceLength;
                    var normalX = reader.getFloat32(start, true);
                    var normalY = reader.getFloat32(start + 4, true);
                    var normalZ = reader.getFloat32(start + 8, true);
                    if (hasColors) {
                        var packedColor = reader.getUint16(start + 48, true);
                        if ((packedColor & 32768) === 0) {
                            r = (packedColor & 31) / 31;
                            g = (packedColor >> 5 & 31) / 31;
                            b = (packedColor >> 10 & 31) / 31;
                        } else {
                            r = defaultR;
                            g = defaultG;
                            b = defaultB;
                        }
                    }
                    for (var i = 1; i <= 3; i++) {
                        var vertexstart = start + i * 12;
                        var componentIdx = face * 3 * 3 + (i - 1) * 3;
                        vertices[componentIdx] = reader.getFloat32(vertexstart, true);
                        vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);
                        vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);
                        normals[componentIdx] = normalX;
                        normals[componentIdx + 1] = normalY;
                        normals[componentIdx + 2] = normalZ;
                        if (hasColors) {
                            colors[componentIdx] = r;
                            colors[componentIdx + 1] = g;
                            colors[componentIdx + 2] = b;
                        }
                    }
                }
                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
                geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
                if (hasColors) {
                    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
                    geometry.hasColors = true;
                    geometry.alpha = alpha;
                }
                return geometry;
            }
            function parseASCII(data) {
                var geometry = new THREE.BufferGeometry();
                var patternSolid = /solid([\s\S]*?)endsolid/g;
                var patternFace = /facet([\s\S]*?)endfacet/g;
                var faceCounter = 0;
                var patternFloat = /[\s]+([+-]?(?:\d*)(?:\.\d*)?(?:[eE][+-]?\d+)?)/.source;
                var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');
                var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');
                var vertices = [];
                var normals = [];
                var normal = new THREE.Vector3();
                var result;
                var groupCount = 0;
                var startVertex = 0;
                var endVertex = 0;
                while ((result = patternSolid.exec(data)) !== null) {
                    startVertex = endVertex;
                    var solid = result[0];
                    while ((result = patternFace.exec(solid)) !== null) {
                        var vertexCountPerFace = 0;
                        var normalCountPerFace = 0;
                        var text = result[0];
                        while ((result = patternNormal.exec(text)) !== null) {
                            normal.x = parseFloat(result[1]);
                            normal.y = parseFloat(result[2]);
                            normal.z = parseFloat(result[3]);
                            normalCountPerFace++;
                        }
                        while ((result = patternVertex.exec(text)) !== null) {
                            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                            normals.push(normal.x, normal.y, normal.z);
                            vertexCountPerFace++;
                            endVertex++;
                        }
                        if (normalCountPerFace !== 1) {
                            console.error("THREE.STLLoader: Something isn't right with the normal of face number " + faceCounter);
                        }
                        if (vertexCountPerFace !== 3) {
                            console.error("THREE.STLLoader: Something isn't right with the vertices of face number " + faceCounter);
                        }
                        faceCounter++;
                    }
                    var start = startVertex;
                    var count = endVertex - startVertex;
                    geometry.addGroup(start, count, groupCount);
                    groupCount++;
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
                return geometry;
            }
            function ensureString(buffer) {
                if (typeof buffer !== 'string') {
                    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer));
                }
                return buffer;
            }
            function ensureBinary(buffer) {
                if (typeof buffer === 'string') {
                    var array_buffer = new Uint8Array(buffer.length);
                    for (var i = 0; i < buffer.length; i++) {
                        array_buffer[i] = buffer.charCodeAt(i) & 255;
                    }
                    return array_buffer.buffer || array_buffer;
                } else {
                    return buffer;
                }
            }
            var binData = ensureBinary(data);
            return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));
        }
    });
    return STLLoader;
});
define('skylark-threejs-ex/loaders/SVGLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SVGLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.defaultDPI = 90;
        this.defaultUnit = 'px';
    };
    SVGLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: SVGLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        parse: function (text) {
            var scope = this;
            function parseNode(node, style) {
                if (node.nodeType !== 1)
                    return;
                var transform = getNodeTransform(node);
                var path = null;
                switch (node.nodeName) {
                case 'svg':
                    break;
                case 'g':
                    style = parseStyle(node, style);
                    break;
                case 'path':
                    style = parseStyle(node, style);
                    if (node.hasAttribute('d'))
                        path = parsePathNode(node);
                    break;
                case 'rect':
                    style = parseStyle(node, style);
                    path = parseRectNode(node);
                    break;
                case 'polygon':
                    style = parseStyle(node, style);
                    path = parsePolygonNode(node);
                    break;
                case 'polyline':
                    style = parseStyle(node, style);
                    path = parsePolylineNode(node);
                    break;
                case 'circle':
                    style = parseStyle(node, style);
                    path = parseCircleNode(node);
                    break;
                case 'ellipse':
                    style = parseStyle(node, style);
                    path = parseEllipseNode(node);
                    break;
                case 'line':
                    style = parseStyle(node, style);
                    path = parseLineNode(node);
                    break;
                default:
                    console.log(node);
                }
                if (path) {
                    if (style.fill !== undefined && style.fill !== 'none') {
                        path.color.setStyle(style.fill);
                    }
                    transformPath(path, currentTransform);
                    paths.push(path);
                    path.userData = {
                        node: node,
                        style: style
                    };
                }
                var nodes = node.childNodes;
                for (var i = 0; i < nodes.length; i++) {
                    parseNode(nodes[i], style);
                }
                if (transform) {
                    transformStack.pop();
                    if (transformStack.length > 0) {
                        currentTransform.copy(transformStack[transformStack.length - 1]);
                    } else {
                        currentTransform.identity();
                    }
                }
            }
            function parsePathNode(node) {
                var path = new THREE.ShapePath();
                var point = new THREE.Vector2();
                var control = new THREE.Vector2();
                var firstPoint = new THREE.Vector2();
                var isFirstPoint = true;
                var doSetFirstPoint = false;
                var d = node.getAttribute('d');
                var commands = d.match(/[a-df-z][^a-df-z]*/ig);
                for (var i = 0, l = commands.length; i < l; i++) {
                    var command = commands[i];
                    var type = command.charAt(0);
                    var data = command.substr(1).trim();
                    if (isFirstPoint === true) {
                        doSetFirstPoint = true;
                        isFirstPoint = false;
                    }
                    switch (type) {
                    case 'M':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x = numbers[j + 0];
                            point.y = numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            if (j === 0) {
                                path.moveTo(point.x, point.y);
                            } else {
                                path.lineTo(point.x, point.y);
                            }
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'H':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.x = numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'V':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.y = numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'L':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x = numbers[j + 0];
                            point.y = numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'C':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {
                            path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);
                            control.x = numbers[j + 2];
                            control.y = numbers[j + 3];
                            point.x = numbers[j + 4];
                            point.y = numbers[j + 5];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'S':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);
                            control.x = numbers[j + 0];
                            control.y = numbers[j + 1];
                            point.x = numbers[j + 2];
                            point.y = numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'Q':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);
                            control.x = numbers[j + 0];
                            control.y = numbers[j + 1];
                            point.x = numbers[j + 2];
                            point.y = numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'T':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            var rx = getReflection(point.x, control.x);
                            var ry = getReflection(point.y, control.y);
                            path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);
                            control.x = rx;
                            control.y = ry;
                            point.x = numbers[j + 0];
                            point.y = numbers[j + 1];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'A':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {
                            var start = point.clone();
                            point.x = numbers[j + 5];
                            point.y = numbers[j + 6];
                            control.x = point.x;
                            control.y = point.y;
                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'm':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x += numbers[j + 0];
                            point.y += numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            if (j === 0) {
                                path.moveTo(point.x, point.y);
                            } else {
                                path.lineTo(point.x, point.y);
                            }
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'h':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.x += numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'v':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.y += numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'l':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x += numbers[j + 0];
                            point.y += numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'c':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {
                            path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);
                            control.x = point.x + numbers[j + 2];
                            control.y = point.y + numbers[j + 3];
                            point.x += numbers[j + 4];
                            point.y += numbers[j + 5];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 's':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);
                            control.x = point.x + numbers[j + 0];
                            control.y = point.y + numbers[j + 1];
                            point.x += numbers[j + 2];
                            point.y += numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'q':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);
                            control.x = point.x + numbers[j + 0];
                            control.y = point.y + numbers[j + 1];
                            point.x += numbers[j + 2];
                            point.y += numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 't':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            var rx = getReflection(point.x, control.x);
                            var ry = getReflection(point.y, control.y);
                            path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);
                            control.x = rx;
                            control.y = ry;
                            point.x = point.x + numbers[j + 0];
                            point.y = point.y + numbers[j + 1];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'a':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {
                            var start = point.clone();
                            point.x += numbers[j + 5];
                            point.y += numbers[j + 6];
                            control.x = point.x;
                            control.y = point.y;
                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'Z':
                    case 'z':
                        path.currentPath.autoClose = true;
                        if (path.currentPath.curves.length > 0) {
                            point.copy(firstPoint);
                            path.currentPath.currentPoint.copy(point);
                            isFirstPoint = true;
                        }
                        break;
                    default:
                        console.warn(command);
                    }
                    doSetFirstPoint = false;
                }
                return path;
            }
            function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {
                x_axis_rotation = x_axis_rotation * Math.PI / 180;
                rx = Math.abs(rx);
                ry = Math.abs(ry);
                var dx2 = (start.x - end.x) / 2;
                var dy2 = (start.y - end.y) / 2;
                var x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;
                var y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;
                var rxs = rx * rx;
                var rys = ry * ry;
                var x1ps = x1p * x1p;
                var y1ps = y1p * y1p;
                var cr = x1ps / rxs + y1ps / rys;
                if (cr > 1) {
                    var s = Math.sqrt(cr);
                    rx = s * rx;
                    ry = s * ry;
                    rxs = rx * rx;
                    rys = ry * ry;
                }
                var dq = rxs * y1ps + rys * x1ps;
                var pq = (rxs * rys - dq) / dq;
                var q = Math.sqrt(Math.max(0, pq));
                if (large_arc_flag === sweep_flag)
                    q = -q;
                var cxp = q * rx * y1p / ry;
                var cyp = -q * ry * x1p / rx;
                var cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;
                var cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;
                var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);
                var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);
                path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);
            }
            function svgAngle(ux, uy, vx, vy) {
                var dot = ux * vx + uy * vy;
                var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);
                var ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));
                if (ux * vy - uy * vx < 0)
                    ang = -ang;
                return ang;
            }
            function parseRectNode(node) {
                var x = parseFloatWithUnits(node.getAttribute('x') || 0);
                var y = parseFloatWithUnits(node.getAttribute('y') || 0);
                var rx = parseFloatWithUnits(node.getAttribute('rx') || 0);
                var ry = parseFloatWithUnits(node.getAttribute('ry') || 0);
                var w = parseFloatWithUnits(node.getAttribute('width'));
                var h = parseFloatWithUnits(node.getAttribute('height'));
                var path = new THREE.ShapePath();
                path.moveTo(x + 2 * rx, y);
                path.lineTo(x + w - 2 * rx, y);
                if (rx !== 0 || ry !== 0)
                    path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);
                path.lineTo(x + w, y + h - 2 * ry);
                if (rx !== 0 || ry !== 0)
                    path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);
                path.lineTo(x + 2 * rx, y + h);
                if (rx !== 0 || ry !== 0) {
                    path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);
                }
                path.lineTo(x, y + 2 * ry);
                if (rx !== 0 || ry !== 0) {
                    path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);
                }
                return path;
            }
            function parsePolygonNode(node) {
                function iterator(match, a, b) {
                    var x = parseFloatWithUnits(a);
                    var y = parseFloatWithUnits(b);
                    if (index === 0) {
                        path.moveTo(x, y);
                    } else {
                        path.lineTo(x, y);
                    }
                    index++;
                }
                var regex = /(-?[\d\.?]+)[,|\s](-?[\d\.?]+)/g;
                var path = new THREE.ShapePath();
                var index = 0;
                node.getAttribute('points').replace(regex, iterator);
                path.currentPath.autoClose = true;
                return path;
            }
            function parsePolylineNode(node) {
                function iterator(match, a, b) {
                    var x = parseFloatWithUnits(a);
                    var y = parseFloatWithUnits(b);
                    if (index === 0) {
                        path.moveTo(x, y);
                    } else {
                        path.lineTo(x, y);
                    }
                    index++;
                }
                var regex = /(-?[\d\.?]+)[,|\s](-?[\d\.?]+)/g;
                var path = new THREE.ShapePath();
                var index = 0;
                node.getAttribute('points').replace(regex, iterator);
                path.currentPath.autoClose = false;
                return path;
            }
            function parseCircleNode(node) {
                var x = parseFloatWithUnits(node.getAttribute('cx'));
                var y = parseFloatWithUnits(node.getAttribute('cy'));
                var r = parseFloatWithUnits(node.getAttribute('r'));
                var subpath = new THREE.Path();
                subpath.absarc(x, y, r, 0, Math.PI * 2);
                var path = new THREE.ShapePath();
                path.subPaths.push(subpath);
                return path;
            }
            function parseEllipseNode(node) {
                var x = parseFloatWithUnits(node.getAttribute('cx'));
                var y = parseFloatWithUnits(node.getAttribute('cy'));
                var rx = parseFloatWithUnits(node.getAttribute('rx'));
                var ry = parseFloatWithUnits(node.getAttribute('ry'));
                var subpath = new THREE.Path();
                subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);
                var path = new THREE.ShapePath();
                path.subPaths.push(subpath);
                return path;
            }
            function parseLineNode(node) {
                var x1 = parseFloatWithUnits(node.getAttribute('x1'));
                var y1 = parseFloatWithUnits(node.getAttribute('y1'));
                var x2 = parseFloatWithUnits(node.getAttribute('x2'));
                var y2 = parseFloatWithUnits(node.getAttribute('y2'));
                var path = new THREE.ShapePath();
                path.moveTo(x1, y1);
                path.lineTo(x2, y2);
                path.currentPath.autoClose = false;
                return path;
            }
            function parseStyle(node, style) {
                style = Object.assign({}, style);
                function addStyle(svgName, jsName, adjustFunction) {
                    if (adjustFunction === undefined)
                        adjustFunction = function copy(v) {
                            return v;
                        };
                    if (node.hasAttribute(svgName))
                        style[jsName] = adjustFunction(node.getAttribute(svgName));
                    if (node.style && node.style[svgName] !== '')
                        style[jsName] = adjustFunction(node.style[svgName]);
                }
                function clamp(v) {
                    return Math.max(0, Math.min(1, parseFloatWithUnits(v)));
                }
                function positive(v) {
                    return Math.max(0, parseFloatWithUnits(v));
                }
                addStyle('fill', 'fill');
                addStyle('fill-opacity', 'fillOpacity', clamp);
                addStyle('stroke', 'stroke');
                addStyle('stroke-opacity', 'strokeOpacity', clamp);
                addStyle('stroke-width', 'strokeWidth', positive);
                addStyle('stroke-linejoin', 'strokeLineJoin');
                addStyle('stroke-linecap', 'strokeLineCap');
                addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);
                return style;
            }
            function getReflection(a, b) {
                return a - (b - a);
            }
            function parseFloats(string) {
                var array = string.split(/[\s,]+|(?=\s?[+\-])/);
                for (var i = 0; i < array.length; i++) {
                    var number = array[i];
                    if (number.indexOf('.') !== number.lastIndexOf('.')) {
                        var split = number.split('.');
                        for (var s = 2; s < split.length; s++) {
                            array.splice(i + s - 1, 0, '0.' + split[s]);
                        }
                    }
                    array[i] = parseFloatWithUnits(number);
                }
                return array;
            }
            var units = [
                'mm',
                'cm',
                'in',
                'pt',
                'pc',
                'px'
            ];
            var unitConversion = {
                'mm': {
                    'mm': 1,
                    'cm': 0.1,
                    'in': 1 / 25.4,
                    'pt': 72 / 25.4,
                    'pc': 6 / 25.4,
                    'px': -1
                },
                'cm': {
                    'mm': 10,
                    'cm': 1,
                    'in': 1 / 2.54,
                    'pt': 72 / 2.54,
                    'pc': 6 / 2.54,
                    'px': -1
                },
                'in': {
                    'mm': 25.4,
                    'cm': 2.54,
                    'in': 1,
                    'pt': 72,
                    'pc': 6,
                    'px': -1
                },
                'pt': {
                    'mm': 25.4 / 72,
                    'cm': 2.54 / 72,
                    'in': 1 / 72,
                    'pt': 1,
                    'pc': 6 / 72,
                    'px': -1
                },
                'pc': {
                    'mm': 25.4 / 6,
                    'cm': 2.54 / 6,
                    'in': 1 / 6,
                    'pt': 72 / 6,
                    'pc': 1,
                    'px': -1
                },
                'px': { 'px': 1 }
            };
            function parseFloatWithUnits(string) {
                var theUnit = 'px';
                if (typeof string === 'string' || string instanceof String) {
                    for (var i = 0, n = units.length; i < n; i++) {
                        var u = units[i];
                        if (string.endsWith(u)) {
                            theUnit = u;
                            string = string.substring(0, string.length - u.length);
                            break;
                        }
                    }
                }
                var scale = undefined;
                if (theUnit === 'px' && scope.defaultUnit !== 'px') {
                    scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;
                } else {
                    scale = unitConversion[theUnit][scope.defaultUnit];
                    if (scale < 0) {
                        scale = unitConversion[theUnit]['in'] * scope.defaultDPI;
                    }
                }
                return scale * parseFloat(string);
            }
            function getNodeTransform(node) {
                if (!node.hasAttribute('transform')) {
                    return null;
                }
                var transform = parseNodeTransform(node);
                if (transformStack.length > 0) {
                    transform.premultiply(transformStack[transformStack.length - 1]);
                }
                currentTransform.copy(transform);
                transformStack.push(transform);
                return transform;
            }
            function parseNodeTransform(node) {
                var transform = new THREE.Matrix3();
                var currentTransform = tempTransform0;
                var transformsTexts = node.getAttribute('transform').split(')');
                for (var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {
                    var transformText = transformsTexts[tIndex].trim();
                    if (transformText === '')
                        continue;
                    var openParPos = transformText.indexOf('(');
                    var closeParPos = transformText.length;
                    if (openParPos > 0 && openParPos < closeParPos) {
                        var transformType = transformText.substr(0, openParPos);
                        var array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));
                        currentTransform.identity();
                        switch (transformType) {
                        case 'translate':
                            if (array.length >= 1) {
                                var tx = array[0];
                                var ty = tx;
                                if (array.length >= 2) {
                                    ty = array[1];
                                }
                                currentTransform.translate(tx, ty);
                            }
                            break;
                        case 'rotate':
                            if (array.length >= 1) {
                                var angle = 0;
                                var cx = 0;
                                var cy = 0;
                                angle = -array[0] * Math.PI / 180;
                                if (array.length >= 3) {
                                    cx = array[1];
                                    cy = array[2];
                                }
                                tempTransform1.identity().translate(-cx, -cy);
                                tempTransform2.identity().rotate(angle);
                                tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);
                                tempTransform1.identity().translate(cx, cy);
                                currentTransform.multiplyMatrices(tempTransform1, tempTransform3);
                            }
                            break;
                        case 'scale':
                            if (array.length >= 1) {
                                var scaleX = array[0];
                                var scaleY = scaleX;
                                if (array.length >= 2) {
                                    scaleY = array[1];
                                }
                                currentTransform.scale(scaleX, scaleY);
                            }
                            break;
                        case 'skewX':
                            if (array.length === 1) {
                                currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);
                            }
                            break;
                        case 'skewY':
                            if (array.length === 1) {
                                currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);
                            }
                            break;
                        case 'matrix':
                            if (array.length === 6) {
                                currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);
                            }
                            break;
                        }
                    }
                    transform.premultiply(currentTransform);
                }
                return transform;
            }
            function transformPath(path, m) {
                function transfVec2(v2) {
                    tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);
                    v2.set(tempV3.x, tempV3.y);
                }
                var isRotated = isTransformRotated(m);
                var subPaths = path.subPaths;
                for (var i = 0, n = subPaths.length; i < n; i++) {
                    var subPath = subPaths[i];
                    var curves = subPath.curves;
                    for (var j = 0; j < curves.length; j++) {
                        var curve = curves[j];
                        if (curve.isLineCurve) {
                            transfVec2(curve.v1);
                            transfVec2(curve.v2);
                        } else if (curve.isCubicBezierCurve) {
                            transfVec2(curve.v0);
                            transfVec2(curve.v1);
                            transfVec2(curve.v2);
                            transfVec2(curve.v3);
                        } else if (curve.isQuadraticBezierCurve) {
                            transfVec2(curve.v0);
                            transfVec2(curve.v1);
                            transfVec2(curve.v2);
                        } else if (curve.isEllipseCurve) {
                            if (isRotated) {
                                console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');
                            }
                            tempV2.set(curve.aX, curve.aY);
                            transfVec2(tempV2);
                            curve.aX = tempV2.x;
                            curve.aY = tempV2.y;
                            curve.xRadius *= getTransformScaleX(m);
                            curve.yRadius *= getTransformScaleY(m);
                        }
                    }
                }
            }
            function isTransformRotated(m) {
                return m.elements[1] !== 0 || m.elements[3] !== 0;
            }
            function getTransformScaleX(m) {
                var te = m.elements;
                return Math.sqrt(te[0] * te[0] + te[1] * te[1]);
            }
            function getTransformScaleY(m) {
                var te = m.elements;
                return Math.sqrt(te[3] * te[3] + te[4] * te[4]);
            }
            var paths = [];
            var transformStack = [];
            var tempTransform0 = new THREE.Matrix3();
            var tempTransform1 = new THREE.Matrix3();
            var tempTransform2 = new THREE.Matrix3();
            var tempTransform3 = new THREE.Matrix3();
            var tempV2 = new THREE.Vector2();
            var tempV3 = new THREE.Vector3();
            var currentTransform = new THREE.Matrix3();
            var xml = new DOMParser().parseFromString(text, 'image/svg+xml');
            parseNode(xml.documentElement, {
                fill: '#000',
                fillOpacity: 1,
                strokeOpacity: 1,
                strokeWidth: 1,
                strokeLineJoin: 'miter',
                strokeLineCap: 'butt',
                strokeMiterLimit: 4
            });
            var data = {
                paths: paths,
                xml: xml.documentElement
            };
            return data;
        }
    });
    SVGLoader.getStrokeStyle = function (width, color, lineJoin, lineCap, miterLimit) {
        width = width !== undefined ? width : 1;
        color = color !== undefined ? color : '#000';
        lineJoin = lineJoin !== undefined ? lineJoin : 'miter';
        lineCap = lineCap !== undefined ? lineCap : 'butt';
        miterLimit = miterLimit !== undefined ? miterLimit : 4;
        return {
            strokeColor: color,
            strokeWidth: width,
            strokeLineJoin: lineJoin,
            strokeLineCap: lineCap,
            strokeMiterLimit: miterLimit
        };
    };
    SVGLoader.pointsToStroke = function (points, style, arcDivisions, minDistance) {
        var vertices = [];
        var normals = [];
        var uvs = [];
        if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {
            return null;
        }
        var geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
        geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
        return geometry;
    };
    SVGLoader.pointsToStrokeWithBuffers = function () {
        var tempV2_1 = new THREE.Vector2();
        var tempV2_2 = new THREE.Vector2();
        var tempV2_3 = new THREE.Vector2();
        var tempV2_4 = new THREE.Vector2();
        var tempV2_5 = new THREE.Vector2();
        var tempV2_6 = new THREE.Vector2();
        var tempV2_7 = new THREE.Vector2();
        var lastPointL = new THREE.Vector2();
        var lastPointR = new THREE.Vector2();
        var point0L = new THREE.Vector2();
        var point0R = new THREE.Vector2();
        var currentPointL = new THREE.Vector2();
        var currentPointR = new THREE.Vector2();
        var nextPointL = new THREE.Vector2();
        var nextPointR = new THREE.Vector2();
        var innerPoint = new THREE.Vector2();
        var outerPoint = new THREE.Vector2();
        return function (points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {
            arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;
            minDistance = minDistance !== undefined ? minDistance : 0.001;
            vertexOffset = vertexOffset !== undefined ? vertexOffset : 0;
            points = removeDuplicatedPoints(points);
            var numPoints = points.length;
            if (numPoints < 2)
                return 0;
            var isClosed = points[0].equals(points[numPoints - 1]);
            var currentPoint;
            var previousPoint = points[0];
            var nextPoint;
            var strokeWidth2 = style.strokeWidth / 2;
            var deltaU = 1 / (numPoints - 1);
            var u0 = 0;
            var innerSideModified;
            var joinIsOnLeftSide;
            var isMiter;
            var initialJoinIsOnLeftSide = false;
            var numVertices = 0;
            var currentCoordinate = vertexOffset * 3;
            var currentCoordinateUV = vertexOffset * 2;
            getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);
            lastPointL.copy(points[0]).sub(tempV2_1);
            lastPointR.copy(points[0]).add(tempV2_1);
            point0L.copy(lastPointL);
            point0R.copy(lastPointR);
            for (var iPoint = 1; iPoint < numPoints; iPoint++) {
                currentPoint = points[iPoint];
                if (iPoint === numPoints - 1) {
                    if (isClosed) {
                        nextPoint = points[1];
                    } else
                        nextPoint = undefined;
                } else {
                    nextPoint = points[iPoint + 1];
                }
                var normal1 = tempV2_1;
                getNormal(previousPoint, currentPoint, normal1);
                tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);
                currentPointL.copy(currentPoint).sub(tempV2_3);
                currentPointR.copy(currentPoint).add(tempV2_3);
                var u1 = u0 + deltaU;
                innerSideModified = false;
                if (nextPoint !== undefined) {
                    getNormal(currentPoint, nextPoint, tempV2_2);
                    tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);
                    nextPointL.copy(currentPoint).sub(tempV2_3);
                    nextPointR.copy(currentPoint).add(tempV2_3);
                    joinIsOnLeftSide = true;
                    tempV2_3.subVectors(nextPoint, previousPoint);
                    if (normal1.dot(tempV2_3) < 0) {
                        joinIsOnLeftSide = false;
                    }
                    if (iPoint === 1)
                        initialJoinIsOnLeftSide = joinIsOnLeftSide;
                    tempV2_3.subVectors(nextPoint, currentPoint);
                    tempV2_3.normalize();
                    var dot = Math.abs(normal1.dot(tempV2_3));
                    if (dot !== 0) {
                        var miterSide = strokeWidth2 / dot;
                        tempV2_3.multiplyScalar(-miterSide);
                        tempV2_4.subVectors(currentPoint, previousPoint);
                        tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);
                        innerPoint.copy(tempV2_5).negate();
                        var miterLength2 = tempV2_5.length();
                        var segmentLengthPrev = tempV2_4.length();
                        tempV2_4.divideScalar(segmentLengthPrev);
                        tempV2_6.subVectors(nextPoint, currentPoint);
                        var segmentLengthNext = tempV2_6.length();
                        tempV2_6.divideScalar(segmentLengthNext);
                        if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {
                            innerSideModified = true;
                        }
                        outerPoint.copy(tempV2_5).add(currentPoint);
                        innerPoint.add(currentPoint);
                        isMiter = false;
                        if (innerSideModified) {
                            if (joinIsOnLeftSide) {
                                nextPointR.copy(innerPoint);
                                currentPointR.copy(innerPoint);
                            } else {
                                nextPointL.copy(innerPoint);
                                currentPointL.copy(innerPoint);
                            }
                        } else {
                            makeSegmentTriangles();
                        }
                        switch (style.strokeLineJoin) {
                        case 'bevel':
                            makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);
                            break;
                        case 'round':
                            createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);
                            if (joinIsOnLeftSide) {
                                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);
                            } else {
                                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);
                            }
                            break;
                        case 'miter':
                        case 'miter-clip':
                        default:
                            var miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;
                            if (miterFraction < 1) {
                                if (style.strokeLineJoin !== 'miter-clip') {
                                    makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);
                                    break;
                                } else {
                                    createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);
                                    if (joinIsOnLeftSide) {
                                        tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);
                                        tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);
                                        addVertex(currentPointL, u1, 0);
                                        addVertex(tempV2_6, u1, 0);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_6, u1, 0);
                                        addVertex(tempV2_7, u1, 0);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_7, u1, 0);
                                        addVertex(nextPointL, u1, 0);
                                    } else {
                                        tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);
                                        tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);
                                        addVertex(currentPointR, u1, 1);
                                        addVertex(tempV2_6, u1, 1);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_6, u1, 1);
                                        addVertex(tempV2_7, u1, 1);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_7, u1, 1);
                                        addVertex(nextPointR, u1, 1);
                                    }
                                }
                            } else {
                                if (innerSideModified) {
                                    if (joinIsOnLeftSide) {
                                        addVertex(lastPointR, u0, 1);
                                        addVertex(lastPointL, u0, 0);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(lastPointR, u0, 1);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(innerPoint, u1, 1);
                                    } else {
                                        addVertex(lastPointR, u0, 1);
                                        addVertex(lastPointL, u0, 0);
                                        addVertex(outerPoint, u1, 1);
                                        addVertex(lastPointL, u0, 0);
                                        addVertex(innerPoint, u1, 0);
                                        addVertex(outerPoint, u1, 1);
                                    }
                                    if (joinIsOnLeftSide) {
                                        nextPointL.copy(outerPoint);
                                    } else {
                                        nextPointR.copy(outerPoint);
                                    }
                                } else {
                                    if (joinIsOnLeftSide) {
                                        addVertex(currentPointL, u1, 0);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(nextPointL, u1, 0);
                                    } else {
                                        addVertex(currentPointR, u1, 1);
                                        addVertex(outerPoint, u1, 1);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(outerPoint, u1, 1);
                                        addVertex(nextPointR, u1, 1);
                                    }
                                }
                                isMiter = true;
                            }
                            break;
                        }
                    } else {
                        makeSegmentTriangles();
                    }
                } else {
                    makeSegmentTriangles();
                }
                if (!isClosed && iPoint === numPoints - 1) {
                    addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);
                }
                u0 = u1;
                previousPoint = currentPoint;
                lastPointL.copy(nextPointL);
                lastPointR.copy(nextPointR);
            }
            if (!isClosed) {
                addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);
            } else if (innerSideModified && vertices) {
                var lastOuter = outerPoint;
                var lastInner = innerPoint;
                if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {
                    lastOuter = innerPoint;
                    lastInner = outerPoint;
                }
                if (joinIsOnLeftSide) {
                    if (isMiter || initialJoinIsOnLeftSide) {
                        lastInner.toArray(vertices, 0 * 3);
                        lastInner.toArray(vertices, 3 * 3);
                        if (isMiter) {
                            lastOuter.toArray(vertices, 1 * 3);
                        }
                    }
                } else {
                    if (isMiter || !initialJoinIsOnLeftSide) {
                        lastInner.toArray(vertices, 1 * 3);
                        lastInner.toArray(vertices, 3 * 3);
                        if (isMiter) {
                            lastOuter.toArray(vertices, 0 * 3);
                        }
                    }
                }
            }
            return numVertices;
            function getNormal(p1, p2, result) {
                result.subVectors(p2, p1);
                return result.set(-result.y, result.x).normalize();
            }
            function addVertex(position, u, v) {
                if (vertices) {
                    vertices[currentCoordinate] = position.x;
                    vertices[currentCoordinate + 1] = position.y;
                    vertices[currentCoordinate + 2] = 0;
                    if (normals) {
                        normals[currentCoordinate] = 0;
                        normals[currentCoordinate + 1] = 0;
                        normals[currentCoordinate + 2] = 1;
                    }
                    currentCoordinate += 3;
                    if (uvs) {
                        uvs[currentCoordinateUV] = u;
                        uvs[currentCoordinateUV + 1] = v;
                        currentCoordinateUV += 2;
                    }
                }
                numVertices += 3;
            }
            function makeCircularSector(center, p1, p2, u, v) {
                tempV2_1.copy(p1).sub(center).normalize();
                tempV2_2.copy(p2).sub(center).normalize();
                var angle = Math.PI;
                var dot = tempV2_1.dot(tempV2_2);
                if (Math.abs(dot) < 1)
                    angle = Math.abs(Math.acos(dot));
                angle /= arcDivisions;
                tempV2_3.copy(p1);
                for (var i = 0, il = arcDivisions - 1; i < il; i++) {
                    tempV2_4.copy(tempV2_3).rotateAround(center, angle);
                    addVertex(tempV2_3, u, v);
                    addVertex(tempV2_4, u, v);
                    addVertex(center, u, 0.5);
                    tempV2_3.copy(tempV2_4);
                }
                addVertex(tempV2_4, u, v);
                addVertex(p2, u, v);
                addVertex(center, u, 0.5);
            }
            function makeSegmentTriangles() {
                addVertex(lastPointR, u0, 1);
                addVertex(lastPointL, u0, 0);
                addVertex(currentPointL, u1, 0);
                addVertex(lastPointR, u0, 1);
                addVertex(currentPointL, u1, 1);
                addVertex(currentPointR, u1, 0);
            }
            function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {
                if (innerSideModified) {
                    if (joinIsOnLeftSide) {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointL, u1, 0);
                        addVertex(lastPointR, u0, 1);
                        addVertex(currentPointL, u1, 0);
                        addVertex(innerPoint, u1, 1);
                        addVertex(currentPointL, u, 0);
                        addVertex(nextPointL, u, 0);
                        addVertex(innerPoint, u, 0.5);
                    } else {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(innerPoint, u1, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(currentPointR, u, 1);
                        addVertex(nextPointR, u, 0);
                        addVertex(innerPoint, u, 0.5);
                    }
                } else {
                    if (joinIsOnLeftSide) {
                        addVertex(currentPointL, u, 0);
                        addVertex(nextPointL, u, 0);
                        addVertex(currentPoint, u, 0.5);
                    } else {
                        addVertex(currentPointR, u, 1);
                        addVertex(nextPointR, u, 0);
                        addVertex(currentPoint, u, 0.5);
                    }
                }
            }
            function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {
                if (innerSideModified) {
                    if (joinIsOnLeftSide) {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointL, u1, 0);
                        addVertex(lastPointR, u0, 1);
                        addVertex(currentPointL, u1, 0);
                        addVertex(innerPoint, u1, 1);
                        addVertex(currentPointL, u0, 0);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(innerPoint, u1, 1);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(nextPointL, u0, 0);
                        addVertex(innerPoint, u1, 1);
                    } else {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(innerPoint, u1, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(currentPointR, u0, 1);
                        addVertex(innerPoint, u1, 0);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(innerPoint, u1, 0);
                        addVertex(nextPointR, u0, 1);
                    }
                }
            }
            function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {
                switch (style.strokeLineCap) {
                case 'round':
                    if (start) {
                        makeCircularSector(center, p2, p1, u, 0.5);
                    } else {
                        makeCircularSector(center, p1, p2, u, 0.5);
                    }
                    break;
                case 'square':
                    if (start) {
                        tempV2_1.subVectors(p1, center);
                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);
                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);
                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);
                        if (joinIsOnLeftSide) {
                            tempV2_3.toArray(vertices, 1 * 3);
                            tempV2_4.toArray(vertices, 0 * 3);
                            tempV2_4.toArray(vertices, 3 * 3);
                        } else {
                            tempV2_3.toArray(vertices, 1 * 3);
                            tempV2_3.toArray(vertices, 3 * 3);
                            tempV2_4.toArray(vertices, 0 * 3);
                        }
                    } else {
                        tempV2_1.subVectors(p2, center);
                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);
                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);
                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);
                        var vl = vertices.length;
                        if (joinIsOnLeftSide) {
                            tempV2_3.toArray(vertices, vl - 1 * 3);
                            tempV2_4.toArray(vertices, vl - 2 * 3);
                            tempV2_4.toArray(vertices, vl - 4 * 3);
                        } else {
                            tempV2_3.toArray(vertices, vl - 2 * 3);
                            tempV2_4.toArray(vertices, vl - 1 * 3);
                            tempV2_4.toArray(vertices, vl - 4 * 3);
                        }
                    }
                    break;
                case 'butt':
                default:
                    break;
                }
            }
            function removeDuplicatedPoints(points) {
                var dupPoints = false;
                for (var i = 1, n = points.length - 1; i < n; i++) {
                    if (points[i].distanceTo(points[i + 1]) < minDistance) {
                        dupPoints = true;
                        break;
                    }
                }
                if (!dupPoints)
                    return points;
                var newPoints = [];
                newPoints.push(points[0]);
                for (var i = 1, n = points.length - 1; i < n; i++) {
                    if (points[i].distanceTo(points[i + 1]) >= minDistance) {
                        newPoints.push(points[i]);
                    }
                }
                newPoints.push(points[points.length - 1]);
                return newPoints;
            }
        };
    }();
    return SVGLoader;
});
define('skylark-threejs-ex/loaders/TDSLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var TDSLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.debug = false;
        this.group = null;
        this.position = 0;
        this.materials = [];
        this.meshes = [];
    };
    TDSLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: TDSLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (data) {
                onLoad(scope.parse(data, path));
            }, onProgress, onError);
        },
        parse: function (arraybuffer, path) {
            this.group = new THREE.Group();
            this.position = 0;
            this.materials = [];
            this.meshes = [];
            this.readFile(arraybuffer, path);
            for (var i = 0; i < this.meshes.length; i++) {
                this.group.add(this.meshes[i]);
            }
            return this.group;
        },
        readFile: function (arraybuffer, path) {
            var data = new DataView(arraybuffer);
            var chunk = this.readChunk(data);
            if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {
                var next = this.nextChunk(data, chunk);
                while (next !== 0) {
                    if (next === M3D_VERSION) {
                        var version = this.readDWord(data);
                        this.debugMessage('3DS file version: ' + version);
                    } else if (next === MDATA) {
                        this.resetPosition(data);
                        this.readMeshData(data, path);
                    } else {
                        this.debugMessage('Unknown main chunk: ' + next.toString(16));
                    }
                    next = this.nextChunk(data, chunk);
                }
            }
            this.debugMessage('Parsed ' + this.meshes.length + ' meshes');
        },
        readMeshData: function (data, path) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            while (next !== 0) {
                if (next === MESH_VERSION) {
                    var version = +this.readDWord(data);
                    this.debugMessage('Mesh Version: ' + version);
                } else if (next === MASTER_SCALE) {
                    var scale = this.readFloat(data);
                    this.debugMessage('Master scale: ' + scale);
                    this.group.scale.set(scale, scale, scale);
                } else if (next === NAMED_OBJECT) {
                    this.debugMessage('Named Object');
                    this.resetPosition(data);
                    this.readNamedObject(data);
                } else if (next === MAT_ENTRY) {
                    this.debugMessage('Material');
                    this.resetPosition(data);
                    this.readMaterialEntry(data, path);
                } else {
                    this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
        },
        readNamedObject: function (data) {
            var chunk = this.readChunk(data);
            var name = this.readString(data, 64);
            chunk.cur = this.position;
            var next = this.nextChunk(data, chunk);
            while (next !== 0) {
                if (next === N_TRI_OBJECT) {
                    this.resetPosition(data);
                    var mesh = this.readMesh(data);
                    mesh.name = name;
                    this.meshes.push(mesh);
                } else {
                    this.debugMessage('Unknown named object chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
        },
        readMaterialEntry: function (data, path) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            var material = new THREE.MeshPhongMaterial();
            while (next !== 0) {
                if (next === MAT_NAME) {
                    material.name = this.readString(data, 64);
                    this.debugMessage('   Name: ' + material.name);
                } else if (next === MAT_WIRE) {
                    this.debugMessage('   Wireframe');
                    material.wireframe = true;
                } else if (next === MAT_WIRE_SIZE) {
                    var value = this.readByte(data);
                    material.wireframeLinewidth = value;
                    this.debugMessage('   Wireframe Thickness: ' + value);
                } else if (next === MAT_TWO_SIDE) {
                    material.side = THREE.DoubleSide;
                    this.debugMessage('   DoubleSided');
                } else if (next === MAT_ADDITIVE) {
                    this.debugMessage('   Additive Blending');
                    material.blending = THREE.AdditiveBlending;
                } else if (next === MAT_DIFFUSE) {
                    this.debugMessage('   Diffuse Color');
                    material.color = this.readColor(data);
                } else if (next === MAT_SPECULAR) {
                    this.debugMessage('   Specular Color');
                    material.specular = this.readColor(data);
                } else if (next === MAT_AMBIENT) {
                    this.debugMessage('   Ambient color');
                    material.color = this.readColor(data);
                } else if (next === MAT_SHININESS) {
                    var shininess = this.readWord(data);
                    material.shininess = shininess;
                    this.debugMessage('   Shininess : ' + shininess);
                } else if (next === MAT_TRANSPARENCY) {
                    var opacity = this.readWord(data);
                    material.opacity = opacity * 0.01;
                    this.debugMessage('  Opacity : ' + opacity);
                    material.transparent = opacity < 100 ? true : false;
                } else if (next === MAT_TEXMAP) {
                    this.debugMessage('   ColorMap');
                    this.resetPosition(data);
                    material.map = this.readMap(data, path);
                } else if (next === MAT_BUMPMAP) {
                    this.debugMessage('   BumpMap');
                    this.resetPosition(data);
                    material.bumpMap = this.readMap(data, path);
                } else if (next === MAT_OPACMAP) {
                    this.debugMessage('   OpacityMap');
                    this.resetPosition(data);
                    material.alphaMap = this.readMap(data, path);
                } else if (next === MAT_SPECMAP) {
                    this.debugMessage('   SpecularMap');
                    this.resetPosition(data);
                    material.specularMap = this.readMap(data, path);
                } else {
                    this.debugMessage('   Unknown material chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
            this.materials[material.name] = material;
        },
        readMesh: function (data) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            var geometry = new THREE.BufferGeometry();
            var uvs = [];
            var material = new THREE.MeshPhongMaterial();
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = 'mesh';
            while (next !== 0) {
                if (next === POINT_ARRAY) {
                    var points = this.readWord(data);
                    this.debugMessage('   Vertex: ' + points);
                    var vertices = [];
                    for (var i = 0; i < points; i++) {
                        vertices.push(this.readFloat(data));
                        vertices.push(this.readFloat(data));
                        vertices.push(this.readFloat(data));
                    }
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
                } else if (next === FACE_ARRAY) {
                    this.resetPosition(data);
                    this.readFaceArray(data, mesh);
                } else if (next === TEX_VERTS) {
                    var texels = this.readWord(data);
                    this.debugMessage('   UV: ' + texels);
                    var uvs = [];
                    for (var i = 0; i < texels; i++) {
                        uvs.push(this.readFloat(data));
                        uvs.push(this.readFloat(data));
                    }
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
                } else if (next === MESH_MATRIX) {
                    this.debugMessage('   Tranformation Matrix (TODO)');
                    var values = [];
                    for (var i = 0; i < 12; i++) {
                        values[i] = this.readFloat(data);
                    }
                    var matrix = new THREE.Matrix4();
                    matrix.elements[0] = values[0];
                    matrix.elements[1] = values[6];
                    matrix.elements[2] = values[3];
                    matrix.elements[3] = values[9];
                    matrix.elements[4] = values[2];
                    matrix.elements[5] = values[8];
                    matrix.elements[6] = values[5];
                    matrix.elements[7] = values[11];
                    matrix.elements[8] = values[1];
                    matrix.elements[9] = values[7];
                    matrix.elements[10] = values[4];
                    matrix.elements[11] = values[10];
                    matrix.elements[12] = 0;
                    matrix.elements[13] = 0;
                    matrix.elements[14] = 0;
                    matrix.elements[15] = 1;
                    matrix.transpose();
                    var inverse = new THREE.Matrix4();
                    inverse.getInverse(matrix);
                    geometry.applyMatrix4(inverse);
                    matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);
                } else {
                    this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
            geometry.computeVertexNormals();
            return mesh;
        },
        readFaceArray: function (data, mesh) {
            var chunk = this.readChunk(data);
            var faces = this.readWord(data);
            this.debugMessage('   Faces: ' + faces);
            var index = [];
            for (var i = 0; i < faces; ++i) {
                index.push(this.readWord(data), this.readWord(data), this.readWord(data));
                this.readWord(data);
            }
            mesh.geometry.setIndex(index);
            while (this.position < chunk.end) {
                var chunk = this.readChunk(data);
                if (chunk.id === MSH_MAT_GROUP) {
                    this.debugMessage('      Material Group');
                    this.resetPosition(data);
                    var group = this.readMaterialGroup(data);
                    var material = this.materials[group.name];
                    if (material !== undefined) {
                        mesh.material = material;
                        if (material.name === '') {
                            material.name = mesh.name;
                        }
                    }
                } else {
                    this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));
                }
                this.endChunk(chunk);
            }
            this.endChunk(chunk);
        },
        readMap: function (data, path) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            var texture = {};
            var loader = new THREE.TextureLoader(this.manager);
            loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
            while (next !== 0) {
                if (next === MAT_MAPNAME) {
                    var name = this.readString(data, 128);
                    texture = loader.load(name);
                    this.debugMessage('      File: ' + path + name);
                } else if (next === MAT_MAP_UOFFSET) {
                    texture.offset.x = this.readFloat(data);
                    this.debugMessage('      OffsetX: ' + texture.offset.x);
                } else if (next === MAT_MAP_VOFFSET) {
                    texture.offset.y = this.readFloat(data);
                    this.debugMessage('      OffsetY: ' + texture.offset.y);
                } else if (next === MAT_MAP_USCALE) {
                    texture.repeat.x = this.readFloat(data);
                    this.debugMessage('      RepeatX: ' + texture.repeat.x);
                } else if (next === MAT_MAP_VSCALE) {
                    texture.repeat.y = this.readFloat(data);
                    this.debugMessage('      RepeatY: ' + texture.repeat.y);
                } else {
                    this.debugMessage('      Unknown map chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
            return texture;
        },
        readMaterialGroup: function (data) {
            this.readChunk(data);
            var name = this.readString(data, 64);
            var numFaces = this.readWord(data);
            this.debugMessage('         Name: ' + name);
            this.debugMessage('         Faces: ' + numFaces);
            var index = [];
            for (var i = 0; i < numFaces; ++i) {
                index.push(this.readWord(data));
            }
            return {
                name: name,
                index: index
            };
        },
        readColor: function (data) {
            var chunk = this.readChunk(data);
            var color = new THREE.Color();
            if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {
                var r = this.readByte(data);
                var g = this.readByte(data);
                var b = this.readByte(data);
                color.setRGB(r / 255, g / 255, b / 255);
                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);
            } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {
                var r = this.readFloat(data);
                var g = this.readFloat(data);
                var b = this.readFloat(data);
                color.setRGB(r, g, b);
                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);
            } else {
                this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));
            }
            this.endChunk(chunk);
            return color;
        },
        readChunk: function (data) {
            var chunk = {};
            chunk.cur = this.position;
            chunk.id = this.readWord(data);
            chunk.size = this.readDWord(data);
            chunk.end = chunk.cur + chunk.size;
            chunk.cur += 6;
            return chunk;
        },
        endChunk: function (chunk) {
            this.position = chunk.end;
        },
        nextChunk: function (data, chunk) {
            if (chunk.cur >= chunk.end) {
                return 0;
            }
            this.position = chunk.cur;
            try {
                var next = this.readChunk(data);
                chunk.cur += next.size;
                return next.id;
            } catch (e) {
                this.debugMessage('Unable to read chunk at ' + this.position);
                return 0;
            }
        },
        resetPosition: function () {
            this.position -= 6;
        },
        readByte: function (data) {
            var v = data.getUint8(this.position, true);
            this.position += 1;
            return v;
        },
        readFloat: function (data) {
            try {
                var v = data.getFloat32(this.position, true);
                this.position += 4;
                return v;
            } catch (e) {
                this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);
            }
        },
        readInt: function (data) {
            var v = data.getInt32(this.position, true);
            this.position += 4;
            return v;
        },
        readShort: function (data) {
            var v = data.getInt16(this.position, true);
            this.position += 2;
            return v;
        },
        readDWord: function (data) {
            var v = data.getUint32(this.position, true);
            this.position += 4;
            return v;
        },
        readWord: function (data) {
            var v = data.getUint16(this.position, true);
            this.position += 2;
            return v;
        },
        readString: function (data, maxLength) {
            var s = '';
            for (var i = 0; i < maxLength; i++) {
                var c = this.readByte(data);
                if (!c) {
                    break;
                }
                s += String.fromCharCode(c);
            }
            return s;
        },
        debugMessage: function (message) {
            if (this.debug) {
                console.log(message);
            }
        }
    });
    var M3DMAGIC = 19789;
    var MLIBMAGIC = 15786;
    var CMAGIC = 49725;
    var M3D_VERSION = 2;
    var COLOR_F = 16;
    var COLOR_24 = 17;
    var LIN_COLOR_24 = 18;
    var LIN_COLOR_F = 19;
    var MDATA = 15677;
    var MESH_VERSION = 15678;
    var MASTER_SCALE = 256;
    var MAT_ENTRY = 45055;
    var MAT_NAME = 40960;
    var MAT_AMBIENT = 40976;
    var MAT_DIFFUSE = 40992;
    var MAT_SPECULAR = 41008;
    var MAT_SHININESS = 41024;
    var MAT_TRANSPARENCY = 41040;
    var MAT_TWO_SIDE = 41089;
    var MAT_ADDITIVE = 41091;
    var MAT_WIRE = 41093;
    var MAT_WIRE_SIZE = 41095;
    var MAT_TEXMAP = 41472;
    var MAT_OPACMAP = 41488;
    var MAT_BUMPMAP = 41520;
    var MAT_SPECMAP = 41476;
    var MAT_MAPNAME = 41728;
    var MAT_MAP_USCALE = 41812;
    var MAT_MAP_VSCALE = 41814;
    var MAT_MAP_UOFFSET = 41816;
    var MAT_MAP_VOFFSET = 41818;
    var NAMED_OBJECT = 16384;
    var N_TRI_OBJECT = 16640;
    var POINT_ARRAY = 16656;
    var FACE_ARRAY = 16672;
    var MSH_MAT_GROUP = 16688;
    var TEX_VERTS = 16704;
    var MESH_MATRIX = 16736;

    return TDSLoader;
});
define('skylark-threejs-ex/loaders/VRMLLoader',[
    "skylark-threejs",
//    '../libs/chevrotain.module.min'
], function (THREE, chevrotain) {
    'use strict';
    var VRMLLoader = function () {
        if (typeof chevrotain === 'undefined') {
            throw Error('THREE.VRMLLoader: External library chevrotain.min.js required.');
        }
        function VRMLLoader(manager) {
            THREE.Loader.call(this, manager);
        }
        VRMLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: VRMLLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
                var loader = new THREE.FileLoader(this.manager);
                loader.setPath(scope.path);
                loader.load(url, function (text) {
                    onLoad(scope.parse(text, path));
                }, onProgress, onError);
            },
            parse: function (data, path) {
                var nodeMap = {};
                function generateVRMLTree(data) {
                    var tokenData = createTokens();
                    var lexer = new VRMLLexer(tokenData.tokens);
                    var parser = new VRMLParser(tokenData.tokenVocabulary);
                    var visitor = createVisitor(parser.getBaseCstVisitorConstructor());
                    var lexingResult = lexer.lex(data);
                    parser.input = lexingResult.tokens;
                    var cstOutput = parser.vrml();
                    if (parser.errors.length > 0) {
                        console.error(parser.errors);
                        throw Error('THREE.VRMLLoader: Parsing errors detected.');
                    }
                    var ast = visitor.visit(cstOutput);
                    return ast;
                }
                function createTokens() {
                    var createToken = chevrotain.createToken;
                    var RouteIdentifier = createToken({
                        name: 'RouteIdentifier',
                        pattern: /[^\x30-\x39\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d][^\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d]*[\.][^\x30-\x39\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d][^\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d]*/
                    });
                    var Identifier = createToken({
                        name: 'Identifier',
                        pattern: /[^\x30-\x39\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d][^\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d]*/,
                        longer_alt: RouteIdentifier
                    });
                    var nodeTypes = [
                        'Anchor',
                        'Billboard',
                        'Collision',
                        'Group',
                        'Transform',
                        'Inline',
                        'LOD',
                        'Switch',
                        'AudioClip',
                        'DirectionalLight',
                        'PointLight',
                        'Script',
                        'Shape',
                        'Sound',
                        'SpotLight',
                        'WorldInfo',
                        'CylinderSensor',
                        'PlaneSensor',
                        'ProximitySensor',
                        'SphereSensor',
                        'TimeSensor',
                        'TouchSensor',
                        'VisibilitySensor',
                        'Box',
                        'Cone',
                        'Cylinder',
                        'ElevationGrid',
                        'Extrusion',
                        'IndexedFaceSet',
                        'IndexedLineSet',
                        'PointSet',
                        'Sphere',
                        'Color',
                        'Coordinate',
                        'Normal',
                        'TextureCoordinate',
                        'Appearance',
                        'FontStyle',
                        'ImageTexture',
                        'Material',
                        'MovieTexture',
                        'PixelTexture',
                        'TextureTransform',
                        'ColorInterpolator',
                        'CoordinateInterpolator',
                        'NormalInterpolator',
                        'OrientationInterpolator',
                        'PositionInterpolator',
                        'ScalarInterpolator',
                        'Background',
                        'Fog',
                        'NavigationInfo',
                        'Viewpoint',
                        'Text'
                    ];
                    var Version = createToken({
                        name: 'Version',
                        pattern: /#VRML.*/,
                        longer_alt: Identifier
                    });
                    var NodeName = createToken({
                        name: 'NodeName',
                        pattern: new RegExp(nodeTypes.join('|')),
                        longer_alt: Identifier
                    });
                    var DEF = createToken({
                        name: 'DEF',
                        pattern: /DEF/,
                        longer_alt: Identifier
                    });
                    var USE = createToken({
                        name: 'USE',
                        pattern: /USE/,
                        longer_alt: Identifier
                    });
                    var ROUTE = createToken({
                        name: 'ROUTE',
                        pattern: /ROUTE/,
                        longer_alt: Identifier
                    });
                    var TO = createToken({
                        name: 'TO',
                        pattern: /TO/,
                        longer_alt: Identifier
                    });
                    var StringLiteral = createToken({
                        name: 'StringLiteral',
                        pattern: /"(:?[^\\"\n\r]+|\\(:?[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/
                    });
                    var HexLiteral = createToken({
                        name: 'HexLiteral',
                        pattern: /0[xX][0-9a-fA-F]+/
                    });
                    var NumberLiteral = createToken({
                        name: 'NumberLiteral',
                        pattern: /[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?/
                    });
                    var TrueLiteral = createToken({
                        name: 'TrueLiteral',
                        pattern: /TRUE/
                    });
                    var FalseLiteral = createToken({
                        name: 'FalseLiteral',
                        pattern: /FALSE/
                    });
                    var NullLiteral = createToken({
                        name: 'NullLiteral',
                        pattern: /NULL/
                    });
                    var LSquare = createToken({
                        name: 'LSquare',
                        pattern: /\[/
                    });
                    var RSquare = createToken({
                        name: 'RSquare',
                        pattern: /]/
                    });
                    var LCurly = createToken({
                        name: 'LCurly',
                        pattern: /{/
                    });
                    var RCurly = createToken({
                        name: 'RCurly',
                        pattern: /}/
                    });
                    var Comment = createToken({
                        name: 'Comment',
                        pattern: /#.*/,
                        group: chevrotain.Lexer.SKIPPED
                    });
                    var WhiteSpace = createToken({
                        name: 'WhiteSpace',
                        pattern: /[ ,\s]/,
                        group: chevrotain.Lexer.SKIPPED
                    });
                    var tokens = [
                        WhiteSpace,
                        NodeName,
                        DEF,
                        USE,
                        ROUTE,
                        TO,
                        TrueLiteral,
                        FalseLiteral,
                        NullLiteral,
                        Version,
                        Identifier,
                        RouteIdentifier,
                        StringLiteral,
                        HexLiteral,
                        NumberLiteral,
                        LSquare,
                        RSquare,
                        LCurly,
                        RCurly,
                        Comment
                    ];
                    var tokenVocabulary = {};
                    for (var i = 0, l = tokens.length; i < l; i++) {
                        var token = tokens[i];
                        tokenVocabulary[token.name] = token;
                    }
                    return {
                        tokens: tokens,
                        tokenVocabulary: tokenVocabulary
                    };
                }
                function createVisitor(BaseVRMLVisitor) {
                    function VRMLToASTVisitor() {
                        BaseVRMLVisitor.call(this);
                        this.validateVisitor();
                    }
                    VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {
                        constructor: VRMLToASTVisitor,
                        vrml: function (ctx) {
                            var data = {
                                version: this.visit(ctx.version),
                                nodes: [],
                                routes: []
                            };
                            for (var i = 0, l = ctx.node.length; i < l; i++) {
                                var node = ctx.node[i];
                                data.nodes.push(this.visit(node));
                            }
                            if (ctx.route) {
                                for (var i = 0, l = ctx.route.length; i < l; i++) {
                                    var route = ctx.route[i];
                                    data.routes.push(this.visit(route));
                                }
                            }
                            return data;
                        },
                        version: function (ctx) {
                            return ctx.Version[0].image;
                        },
                        node: function (ctx) {
                            var data = {
                                name: ctx.NodeName[0].image,
                                fields: []
                            };
                            if (ctx.field) {
                                for (var i = 0, l = ctx.field.length; i < l; i++) {
                                    var field = ctx.field[i];
                                    data.fields.push(this.visit(field));
                                }
                            }
                            if (ctx.def) {
                                data.DEF = this.visit(ctx.def[0]);
                            }
                            return data;
                        },
                        field: function (ctx) {
                            var data = {
                                name: ctx.Identifier[0].image,
                                type: null,
                                values: null
                            };
                            var result;
                            if (ctx.singleFieldValue) {
                                result = this.visit(ctx.singleFieldValue[0]);
                            }
                            if (ctx.multiFieldValue) {
                                result = this.visit(ctx.multiFieldValue[0]);
                            }
                            data.type = result.type;
                            data.values = result.values;
                            return data;
                        },
                        def: function (ctx) {
                            return ctx.Identifier[0].image;
                        },
                        use: function (ctx) {
                            return { USE: ctx.Identifier[0].image };
                        },
                        singleFieldValue: function (ctx) {
                            return processField(this, ctx);
                        },
                        multiFieldValue: function (ctx) {
                            return processField(this, ctx);
                        },
                        route: function (ctx) {
                            var data = {
                                FROM: ctx.RouteIdentifier[0].image,
                                TO: ctx.RouteIdentifier[1].image
                            };
                            return data;
                        }
                    });
                    function processField(scope, ctx) {
                        var field = {
                            type: null,
                            values: []
                        };
                        if (ctx.node) {
                            field.type = 'node';
                            for (var i = 0, l = ctx.node.length; i < l; i++) {
                                var node = ctx.node[i];
                                field.values.push(scope.visit(node));
                            }
                        }
                        if (ctx.use) {
                            field.type = 'use';
                            for (var i = 0, l = ctx.use.length; i < l; i++) {
                                var use = ctx.use[i];
                                field.values.push(scope.visit(use));
                            }
                        }
                        if (ctx.StringLiteral) {
                            field.type = 'string';
                            for (var i = 0, l = ctx.StringLiteral.length; i < l; i++) {
                                var stringLiteral = ctx.StringLiteral[i];
                                field.values.push(stringLiteral.image.replace(/'|"/g, ''));
                            }
                        }
                        if (ctx.NumberLiteral) {
                            field.type = 'number';
                            for (var i = 0, l = ctx.NumberLiteral.length; i < l; i++) {
                                var numberLiteral = ctx.NumberLiteral[i];
                                field.values.push(parseFloat(numberLiteral.image));
                            }
                        }
                        if (ctx.HexLiteral) {
                            field.type = 'hex';
                            for (var i = 0, l = ctx.HexLiteral.length; i < l; i++) {
                                var hexLiteral = ctx.HexLiteral[i];
                                field.values.push(hexLiteral.image);
                            }
                        }
                        if (ctx.TrueLiteral) {
                            field.type = 'boolean';
                            for (var i = 0, l = ctx.TrueLiteral.length; i < l; i++) {
                                var trueLiteral = ctx.TrueLiteral[i];
                                if (trueLiteral.image === 'TRUE')
                                    field.values.push(true);
                            }
                        }
                        if (ctx.FalseLiteral) {
                            field.type = 'boolean';
                            for (var i = 0, l = ctx.FalseLiteral.length; i < l; i++) {
                                var falseLiteral = ctx.FalseLiteral[i];
                                if (falseLiteral.image === 'FALSE')
                                    field.values.push(false);
                            }
                        }
                        if (ctx.NullLiteral) {
                            field.type = 'null';
                            ctx.NullLiteral.forEach(function () {
                                field.values.push(null);
                            });
                        }
                        return field;
                    }
                    return new VRMLToASTVisitor();
                }
                function parseTree(tree) {
                    var nodes = tree.nodes;
                    var scene = new THREE.Scene();
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        var node = nodes[i];
                        buildNodeMap(node);
                    }
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        var node = nodes[i];
                        var object = getNode(node);
                        if (object instanceof THREE.Object3D)
                            scene.add(object);
                    }
                    return scene;
                }
                function buildNodeMap(node) {
                    if (node.DEF) {
                        nodeMap[node.DEF] = node;
                    }
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        if (field.type === 'node') {
                            var fieldValues = field.values;
                            for (var j = 0, jl = fieldValues.length; j < jl; j++) {
                                buildNodeMap(fieldValues[j]);
                            }
                        }
                    }
                }
                function getNode(node) {
                    if (node.USE) {
                        return resolveUSE(node.USE);
                    }
                    if (node.build !== undefined)
                        return node.build;
                    node.build = buildNode(node);
                    return node.build;
                }
                function buildNode(node) {
                    var nodeName = node.name;
                    var build;
                    switch (nodeName) {
                    case 'Group':
                    case 'Transform':
                        build = buildGroupingNode(node);
                        break;
                    case 'Background':
                        build = buildBackgroundNode(node);
                        break;
                    case 'Shape':
                        build = buildShapeNode(node);
                        break;
                    case 'Appearance':
                        build = buildAppearanceNode(node);
                        break;
                    case 'Material':
                        build = buildMaterialNode(node);
                        break;
                    case 'ImageTexture':
                        build = buildImageTextureNode(node);
                        break;
                    case 'PixelTexture':
                        build = buildPixelTextureNode(node);
                        break;
                    case 'TextureTransform':
                        build = buildTextureTransformNode(node);
                        break;
                    case 'IndexedFaceSet':
                        build = buildIndexedFaceSetNode(node);
                        break;
                    case 'IndexedLineSet':
                        build = buildIndexedLineSetNode(node);
                        break;
                    case 'PointSet':
                        build = buildPointSetNode(node);
                        break;
                    case 'Box':
                        build = buildBoxNode(node);
                        break;
                    case 'Cone':
                        build = buildConeNode(node);
                        break;
                    case 'Cylinder':
                        build = buildCylinderNode(node);
                        break;
                    case 'Sphere':
                        build = buildSphereNode(node);
                        break;
                    case 'Color':
                    case 'Coordinate':
                    case 'Normal':
                    case 'TextureCoordinate':
                        build = buildGeometricNode(node);
                        break;
                    case 'Anchor':
                    case 'Billboard':
                    case 'Collision':
                    case 'Inline':
                    case 'LOD':
                    case 'Switch':
                    case 'AudioClip':
                    case 'DirectionalLight':
                    case 'PointLight':
                    case 'Script':
                    case 'Sound':
                    case 'SpotLight':
                    case 'WorldInfo':
                    case 'CylinderSensor':
                    case 'PlaneSensor':
                    case 'ProximitySensor':
                    case 'SphereSensor':
                    case 'TimeSensor':
                    case 'TouchSensor':
                    case 'VisibilitySensor':
                    case 'ElevationGrid':
                    case 'Extrusion':
                    case 'Text':
                    case 'FontStyle':
                    case 'MovieTexture':
                    case 'ColorInterpolator':
                    case 'CoordinateInterpolator':
                    case 'NormalInterpolator':
                    case 'OrientationInterpolator':
                    case 'PositionInterpolator':
                    case 'ScalarInterpolator':
                    case 'Fog':
                    case 'NavigationInfo':
                    case 'Viewpoint':
                        break;
                    default:
                        console.warn('THREE.VRMLLoader: Unknown node:', nodeName);
                        break;
                    }
                    return build;
                }
                function buildGroupingNode(node) {
                    var object = new THREE.Group();
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'center':
                            break;
                        case 'children':
                            parseFieldChildren(fieldValues, object);
                            break;
                        case 'rotation':
                            var axis = new THREE.Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);
                            var angle = fieldValues[3];
                            object.quaternion.setFromAxisAngle(axis, angle);
                            break;
                        case 'scale':
                            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'scaleOrientation':
                            break;
                        case 'translation':
                            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'bboxCenter':
                            break;
                        case 'bboxSize':
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    return object;
                }
                function buildBackgroundNode(node) {
                    var group = new THREE.Group();
                    var groundAngle, groundColor;
                    var skyAngle, skyColor;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'groundAngle':
                            groundAngle = fieldValues;
                            break;
                        case 'groundColor':
                            groundColor = fieldValues;
                            break;
                        case 'backUrl':
                            break;
                        case 'bottomUrl':
                            break;
                        case 'frontUrl':
                            break;
                        case 'leftUrl':
                            break;
                        case 'rightUrl':
                            break;
                        case 'topUrl':
                            break;
                        case 'skyAngle':
                            skyAngle = fieldValues;
                            break;
                        case 'skyColor':
                            skyColor = fieldValues;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var radius = 10000;
                    if (skyColor) {
                        var skyGeometry = new THREE.SphereBufferGeometry(radius, 32, 16);
                        var skyMaterial = new THREE.MeshBasicMaterial({
                            fog: false,
                            side: THREE.BackSide,
                            depthWrite: false,
                            depthTest: false
                        });
                        if (skyColor.length > 3) {
                            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);
                            skyMaterial.vertexColors = true;
                        } else {
                            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);
                        }
                        var sky = new THREE.Mesh(skyGeometry, skyMaterial);
                        group.add(sky);
                    }
                    if (groundColor) {
                        if (groundColor.length > 0) {
                            var groundGeometry = new THREE.SphereBufferGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);
                            var groundMaterial = new THREE.MeshBasicMaterial({
                                fog: false,
                                side: THREE.BackSide,
                                vertexColors: true,
                                depthWrite: false,
                                depthTest: false
                            });
                            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);
                            var ground = new THREE.Mesh(groundGeometry, groundMaterial);
                            group.add(ground);
                        }
                    }
                    group.renderOrder = -Infinity;
                    return group;
                }
                function buildShapeNode(node) {
                    var fields = node.fields;
                    var material = new THREE.MeshBasicMaterial({ color: 0 });
                    var geometry;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'appearance':
                            if (fieldValues[0] !== null) {
                                material = getNode(fieldValues[0]);
                            }
                            break;
                        case 'geometry':
                            if (fieldValues[0] !== null) {
                                geometry = getNode(fieldValues[0]);
                            }
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var object;
                    if (geometry && geometry.attributes.position) {
                        var type = geometry._type;
                        if (type === 'points') {
                            var pointsMaterial = new THREE.PointsMaterial({ color: 16777215 });
                            if (geometry.attributes.color !== undefined) {
                                pointsMaterial.vertexColors = true;
                            } else {
                                if (material.isMeshPhongMaterial) {
                                    pointsMaterial.color.copy(material.emissive);
                                }
                            }
                            object = new THREE.Points(geometry, pointsMaterial);
                        } else if (type === 'line') {
                            var lineMaterial = new THREE.LineBasicMaterial({ color: 16777215 });
                            if (geometry.attributes.color !== undefined) {
                                lineMaterial.vertexColors = true;
                            } else {
                                if (material.isMeshPhongMaterial) {
                                    lineMaterial.color.copy(material.emissive);
                                }
                            }
                            object = new THREE.LineSegments(geometry, lineMaterial);
                        } else {
                            if (geometry._solid !== undefined) {
                                material.side = geometry._solid ? THREE.FrontSide : THREE.DoubleSide;
                            }
                            if (geometry.attributes.color !== undefined) {
                                material.vertexColors = true;
                            }
                            object = new THREE.Mesh(geometry, material);
                        }
                    } else {
                        object = new THREE.Object3D();
                        object.visible = false;
                    }
                    return object;
                }
                function buildAppearanceNode(node) {
                    var material = new THREE.MeshPhongMaterial();
                    var transformData;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'material':
                            if (fieldValues[0] !== null) {
                                var materialData = getNode(fieldValues[0]);
                                if (materialData.diffuseColor)
                                    material.color.copy(materialData.diffuseColor);
                                if (materialData.emissiveColor)
                                    material.emissive.copy(materialData.emissiveColor);
                                if (materialData.shininess)
                                    material.shininess = materialData.shininess;
                                if (materialData.specularColor)
                                    material.specular.copy(materialData.specularColor);
                                if (materialData.transparency)
                                    material.opacity = 1 - materialData.transparency;
                                if (materialData.transparency > 0)
                                    material.transparent = true;
                            } else {
                                material = new THREE.MeshBasicMaterial({ color: 0 });
                            }
                            break;
                        case 'texture':
                            var textureNode = fieldValues[0];
                            if (textureNode !== null) {
                                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {
                                    material.map = getNode(textureNode);
                                } else {
                                }
                            }
                            break;
                        case 'textureTransform':
                            if (fieldValues[0] !== null) {
                                transformData = getNode(fieldValues[0]);
                            }
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (material.map) {
                        if (material.map.__type) {
                            switch (material.map.__type) {
                            case TEXTURE_TYPE.INTENSITY_ALPHA:
                                material.opacity = 1;
                                break;
                            case TEXTURE_TYPE.RGB:
                                material.color.set(16777215);
                                break;
                            case TEXTURE_TYPE.RGBA:
                                material.color.set(16777215);
                                material.opacity = 1;
                                break;
                            default:
                            }
                            delete material.map.__type;
                        }
                        if (transformData) {
                            material.map.center.copy(transformData.center);
                            material.map.rotation = transformData.rotation;
                            material.map.repeat.copy(transformData.scale);
                            material.map.offset.copy(transformData.translation);
                        }
                    }
                    return material;
                }
                function buildMaterialNode(node) {
                    var materialData = {};
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'ambientIntensity':
                            break;
                        case 'diffuseColor':
                            materialData.diffuseColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'emissiveColor':
                            materialData.emissiveColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'shininess':
                            materialData.shininess = fieldValues[0];
                            break;
                        case 'specularColor':
                            materialData.emissiveColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'transparency':
                            materialData.transparency = fieldValues[0];
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    return materialData;
                }
                function parseHexColor(hex, textureType, color) {
                    switch (textureType) {
                    case TEXTURE_TYPE.INTENSITY:
                        var value = parseInt(hex);
                        color.r = value;
                        color.g = value;
                        color.b = value;
                        break;
                    case TEXTURE_TYPE.INTENSITY_ALPHA:
                        var value = parseInt('0x' + hex.substring(2, 4));
                        color.r = value;
                        color.g = value;
                        color.b = value;
                        color.a = parseInt('0x' + hex.substring(4, 6));
                        break;
                    case TEXTURE_TYPE.RGB:
                        color.r = parseInt('0x' + hex.substring(2, 4));
                        color.g = parseInt('0x' + hex.substring(4, 6));
                        color.b = parseInt('0x' + hex.substring(6, 8));
                        break;
                    case TEXTURE_TYPE.RGBA:
                        color.r = parseInt('0x' + hex.substring(2, 4));
                        color.g = parseInt('0x' + hex.substring(4, 6));
                        color.b = parseInt('0x' + hex.substring(6, 8));
                        color.a = parseInt('0x' + hex.substring(8, 10));
                        break;
                    default:
                    }
                }
                function getTextureType(num_components) {
                    var type;
                    switch (num_components) {
                    case 1:
                        type = TEXTURE_TYPE.INTENSITY;
                        break;
                    case 2:
                        type = TEXTURE_TYPE.INTENSITY_ALPHA;
                        break;
                    case 3:
                        type = TEXTURE_TYPE.RGB;
                        break;
                    case 4:
                        type = TEXTURE_TYPE.RGBA;
                        break;
                    default:
                    }
                    return type;
                }
                function buildPixelTextureNode(node) {
                    var texture;
                    var wrapS = THREE.RepeatWrapping;
                    var wrapT = THREE.RepeatWrapping;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'image':
                            var width = fieldValues[0];
                            var height = fieldValues[1];
                            var num_components = fieldValues[2];
                            var useAlpha = num_components === 2 || num_components === 4;
                            var textureType = getTextureType(num_components);
                            var size = (useAlpha === true ? 4 : 3) * (width * height);
                            var data = new Uint8Array(size);
                            var color = {
                                r: 0,
                                g: 0,
                                b: 0,
                                a: 0
                            };
                            for (var j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {
                                parseHexColor(fieldValues[j], textureType, color);
                                if (useAlpha === true) {
                                    var stride = k * 4;
                                    data[stride + 0] = color.r;
                                    data[stride + 1] = color.g;
                                    data[stride + 2] = color.b;
                                    data[stride + 3] = color.a;
                                } else {
                                    var stride = k * 3;
                                    data[stride + 0] = color.r;
                                    data[stride + 1] = color.g;
                                    data[stride + 2] = color.b;
                                }
                            }
                            texture = new THREE.DataTexture(data, width, height, useAlpha === true ? THREE.RGBAFormat : THREE.RGBFormat);
                            texture.__type = textureType;
                            break;
                        case 'repeatS':
                            if (fieldValues[0] === false)
                                wrapS = THREE.ClampToEdgeWrapping;
                            break;
                        case 'repeatT':
                            if (fieldValues[0] === false)
                                wrapT = THREE.ClampToEdgeWrapping;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (texture) {
                        texture.wrapS = wrapS;
                        texture.wrapT = wrapT;
                    }
                    return texture;
                }
                function buildImageTextureNode(node) {
                    var texture;
                    var wrapS = THREE.RepeatWrapping;
                    var wrapT = THREE.RepeatWrapping;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'url':
                            var url = fieldValues[0];
                            if (url)
                                texture = textureLoader.load(url);
                            break;
                        case 'repeatS':
                            if (fieldValues[0] === false)
                                wrapS = THREE.ClampToEdgeWrapping;
                            break;
                        case 'repeatT':
                            if (fieldValues[0] === false)
                                wrapT = THREE.ClampToEdgeWrapping;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (texture) {
                        texture.wrapS = wrapS;
                        texture.wrapT = wrapT;
                    }
                    return texture;
                }
                function buildTextureTransformNode(node) {
                    var transformData = {
                        center: new THREE.Vector2(),
                        rotation: new THREE.Vector2(),
                        scale: new THREE.Vector2(),
                        translation: new THREE.Vector2()
                    };
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'center':
                            transformData.center.set(fieldValues[0], fieldValues[1]);
                            break;
                        case 'rotation':
                            transformData.rotation = fieldValues[0];
                            break;
                        case 'scale':
                            transformData.scale.set(fieldValues[0], fieldValues[1]);
                            break;
                        case 'translation':
                            transformData.translation.set(fieldValues[0], fieldValues[1]);
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    return transformData;
                }
                function buildGeometricNode(node) {
                    return node.fields[0].values;
                }
                function buildIndexedFaceSetNode(node) {
                    var color, coord, normal, texCoord;
                    var ccw = true, solid = true, creaseAngle = 0;
                    var colorIndex, coordIndex, normalIndex, texCoordIndex;
                    var colorPerVertex = true, normalPerVertex = true;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'color':
                            var colorNode = fieldValues[0];
                            if (colorNode !== null) {
                                color = getNode(colorNode);
                            }
                            break;
                        case 'coord':
                            var coordNode = fieldValues[0];
                            if (coordNode !== null) {
                                coord = getNode(coordNode);
                            }
                            break;
                        case 'normal':
                            var normalNode = fieldValues[0];
                            if (normalNode !== null) {
                                normal = getNode(normalNode);
                            }
                            break;
                        case 'texCoord':
                            var texCoordNode = fieldValues[0];
                            if (texCoordNode !== null) {
                                texCoord = getNode(texCoordNode);
                            }
                            break;
                        case 'ccw':
                            ccw = fieldValues[0];
                            break;
                        case 'colorIndex':
                            colorIndex = fieldValues;
                            break;
                        case 'colorPerVertex':
                            colorPerVertex = fieldValues[0];
                            break;
                        case 'convex':
                            break;
                        case 'coordIndex':
                            coordIndex = fieldValues;
                            break;
                        case 'creaseAngle':
                            creaseAngle = fieldValues[0];
                            break;
                        case 'normalIndex':
                            normalIndex = fieldValues;
                            break;
                        case 'normalPerVertex':
                            normalPerVertex = fieldValues[0];
                            break;
                        case 'solid':
                            solid = fieldValues[0];
                            break;
                        case 'texCoordIndex':
                            texCoordIndex = fieldValues;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (coordIndex === undefined) {
                        console.warn('THREE.VRMLLoader: Missing coordIndex.');
                        return new THREE.BufferGeometry();
                    }
                    var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);
                    var positionAttribute;
                    var colorAttribute;
                    var normalAttribute;
                    var uvAttribute;
                    if (color) {
                        if (colorPerVertex === true) {
                            if (colorIndex && colorIndex.length > 0) {
                                var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);
                                colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);
                            } else {
                                colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(color, 3));
                            }
                        } else {
                            if (colorIndex && colorIndex.length > 0) {
                                var flattenFaceColors = flattenData(color, colorIndex);
                                var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);
                                colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);
                            } else {
                                var triangulatedFaceColors = triangulateFaceData(color, coordIndex);
                                colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);
                            }
                        }
                    }
                    if (normal) {
                        if (normalPerVertex === true) {
                            if (normalIndex && normalIndex.length > 0) {
                                var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);
                                normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);
                            } else {
                                normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(normal, 3));
                            }
                        } else {
                            if (normalIndex && normalIndex.length > 0) {
                                var flattenFaceNormals = flattenData(normal, normalIndex);
                                var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);
                                normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);
                            } else {
                                var triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);
                                normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);
                            }
                        }
                    } else {
                        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);
                    }
                    if (texCoord) {
                        if (texCoordIndex && texCoordIndex.length > 0) {
                            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);
                            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);
                        } else {
                            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(texCoord, 2));
                        }
                    }
                    var geometry = new THREE.BufferGeometry();
                    positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(coord, 3));
                    geometry.setAttribute('position', positionAttribute);
                    geometry.setAttribute('normal', normalAttribute);
                    if (colorAttribute)
                        geometry.setAttribute('color', colorAttribute);
                    if (uvAttribute)
                        geometry.setAttribute('uv', uvAttribute);
                    geometry._solid = solid;
                    geometry._type = 'mesh';
                    return geometry;
                }
                function buildIndexedLineSetNode(node) {
                    var color, coord;
                    var colorIndex, coordIndex;
                    var colorPerVertex = true;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'color':
                            var colorNode = fieldValues[0];
                            if (colorNode !== null) {
                                color = getNode(colorNode);
                            }
                            break;
                        case 'coord':
                            var coordNode = fieldValues[0];
                            if (coordNode !== null) {
                                coord = getNode(coordNode);
                            }
                            break;
                        case 'colorIndex':
                            colorIndex = fieldValues;
                            break;
                        case 'colorPerVertex':
                            colorPerVertex = fieldValues[0];
                            break;
                        case 'coordIndex':
                            coordIndex = fieldValues;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var colorAttribute;
                    var expandedLineIndex = expandLineIndex(coordIndex);
                    if (color) {
                        if (colorPerVertex === true) {
                            if (colorIndex.length > 0) {
                                var expandedColorIndex = expandLineIndex(colorIndex);
                                colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);
                            } else {
                                colorAttribute = toNonIndexedAttribute(expandedLineIndex, new THREE.Float32BufferAttribute(color, 3));
                            }
                        } else {
                            if (colorIndex.length > 0) {
                                var flattenLineColors = flattenData(color, colorIndex);
                                var expandedLineColors = expandLineData(flattenLineColors, coordIndex);
                                colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);
                            } else {
                                var expandedLineColors = expandLineData(color, coordIndex);
                                colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);
                            }
                        }
                    }
                    var geometry = new THREE.BufferGeometry();
                    var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new THREE.Float32BufferAttribute(coord, 3));
                    geometry.setAttribute('position', positionAttribute);
                    if (colorAttribute)
                        geometry.setAttribute('color', colorAttribute);
                    geometry._type = 'line';
                    return geometry;
                }
                function buildPointSetNode(node) {
                    var geometry;
                    var color, coord;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'color':
                            var colorNode = fieldValues[0];
                            if (colorNode !== null) {
                                color = getNode(colorNode);
                            }
                            break;
                        case 'coord':
                            var coordNode = fieldValues[0];
                            if (coordNode !== null) {
                                coord = getNode(coordNode);
                            }
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.BufferGeometry();
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(coord, 3));
                    if (color)
                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));
                    geometry._type = 'points';
                    return geometry;
                }
                function buildBoxNode(node) {
                    var size = new THREE.Vector3(2, 2, 2);
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'size':
                            size.x = fieldValues[0];
                            size.y = fieldValues[1];
                            size.z = fieldValues[2];
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.BoxBufferGeometry(size.x, size.y, size.z);
                    return geometry;
                }
                function buildConeNode(node) {
                    var radius = 1, height = 2, openEnded = false;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'bottom':
                            openEnded = !fieldValues[0];
                            break;
                        case 'bottomRadius':
                            radius = fieldValues[0];
                            break;
                        case 'height':
                            height = fieldValues[0];
                            break;
                        case 'side':
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.ConeBufferGeometry(radius, height, 16, 1, openEnded);
                    return geometry;
                }
                function buildCylinderNode(node) {
                    var radius = 1, height = 2;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'bottom':
                            break;
                        case 'radius':
                            radius = fieldValues[0];
                            break;
                        case 'height':
                            height = fieldValues[0];
                            break;
                        case 'side':
                            break;
                        case 'top':
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.CylinderBufferGeometry(radius, radius, height, 16, 1);
                    return geometry;
                }
                function buildSphereNode(node) {
                    var radius = 1;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'radius':
                            radius = fieldValues[0];
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.SphereBufferGeometry(radius, 16, 16);
                    return geometry;
                }
                function resolveUSE(identifier) {
                    var node = nodeMap[identifier];
                    var build = getNode(node);
                    return build.isObject3D || build.isMaterial ? build.clone() : build;
                }
                function parseFieldChildren(children, owner) {
                    for (var i = 0, l = children.length; i < l; i++) {
                        var object = getNode(children[i]);
                        if (object instanceof THREE.Object3D)
                            owner.add(object);
                    }
                }
                function triangulateFaceIndex(index, ccw) {
                    var indices = [];
                    var start = 0;
                    for (var i = 0, l = index.length; i < l; i++) {
                        var i1 = index[start];
                        var i2 = index[i + (ccw ? 1 : 2)];
                        var i3 = index[i + (ccw ? 2 : 1)];
                        indices.push(i1, i2, i3);
                        if (index[i + 3] === -1 || i + 3 >= l) {
                            i += 3;
                            start = i + 1;
                        }
                    }
                    return indices;
                }
                function triangulateFaceData(data, index) {
                    var triangulatedData = [];
                    var start = 0;
                    for (var i = 0, l = index.length; i < l; i++) {
                        var stride = start * 3;
                        var x = data[stride];
                        var y = data[stride + 1];
                        var z = data[stride + 2];
                        triangulatedData.push(x, y, z);
                        if (index[i + 3] === -1 || i + 3 >= l) {
                            i += 3;
                            start++;
                        }
                    }
                    return triangulatedData;
                }
                function flattenData(data, index) {
                    var flattenData = [];
                    for (var i = 0, l = index.length; i < l; i++) {
                        var i1 = index[i];
                        var stride = i1 * 3;
                        var x = data[stride];
                        var y = data[stride + 1];
                        var z = data[stride + 2];
                        flattenData.push(x, y, z);
                    }
                    return flattenData;
                }
                function expandLineIndex(index) {
                    var indices = [];
                    for (var i = 0, l = index.length; i < l; i++) {
                        var i1 = index[i];
                        var i2 = index[i + 1];
                        indices.push(i1, i2);
                        if (index[i + 2] === -1 || i + 2 >= l) {
                            i += 2;
                        }
                    }
                    return indices;
                }
                function expandLineData(data, index) {
                    var triangulatedData = [];
                    var start = 0;
                    for (var i = 0, l = index.length; i < l; i++) {
                        var stride = start * 3;
                        var x = data[stride];
                        var y = data[stride + 1];
                        var z = data[stride + 2];
                        triangulatedData.push(x, y, z);
                        if (index[i + 2] === -1 || i + 2 >= l) {
                            i += 2;
                            start++;
                        }
                    }
                    return triangulatedData;
                }
                var vA = new THREE.Vector3();
                var vB = new THREE.Vector3();
                var vC = new THREE.Vector3();
                var uvA = new THREE.Vector2();
                var uvB = new THREE.Vector2();
                var uvC = new THREE.Vector2();
                function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {
                    var array = [];
                    for (var i = 0, l = coordIndex.length; i < l; i += 3) {
                        var a = index[i];
                        var b = index[i + 1];
                        var c = index[i + 2];
                        if (itemSize === 2) {
                            uvA.fromArray(data, a * itemSize);
                            uvB.fromArray(data, b * itemSize);
                            uvC.fromArray(data, c * itemSize);
                            array.push(uvA.x, uvA.y);
                            array.push(uvB.x, uvB.y);
                            array.push(uvC.x, uvC.y);
                        } else {
                            vA.fromArray(data, a * itemSize);
                            vB.fromArray(data, b * itemSize);
                            vC.fromArray(data, c * itemSize);
                            array.push(vA.x, vA.y, vA.z);
                            array.push(vB.x, vB.y, vB.z);
                            array.push(vC.x, vC.y, vC.z);
                        }
                    }
                    return new THREE.Float32BufferAttribute(array, itemSize);
                }
                function computeAttributeFromFaceData(index, faceData) {
                    var array = [];
                    for (var i = 0, j = 0, l = index.length; i < l; i += 3, j++) {
                        vA.fromArray(faceData, j * 3);
                        array.push(vA.x, vA.y, vA.z);
                        array.push(vA.x, vA.y, vA.z);
                        array.push(vA.x, vA.y, vA.z);
                    }
                    return new THREE.Float32BufferAttribute(array, 3);
                }
                function computeAttributeFromLineData(index, lineData) {
                    var array = [];
                    for (var i = 0, j = 0, l = index.length; i < l; i += 2, j++) {
                        vA.fromArray(lineData, j * 3);
                        array.push(vA.x, vA.y, vA.z);
                        array.push(vA.x, vA.y, vA.z);
                    }
                    return new THREE.Float32BufferAttribute(array, 3);
                }
                function toNonIndexedAttribute(indices, attribute) {
                    var array = attribute.array;
                    var itemSize = attribute.itemSize;
                    var array2 = new array.constructor(indices.length * itemSize);
                    var index = 0, index2 = 0;
                    for (var i = 0, l = indices.length; i < l; i++) {
                        index = indices[i] * itemSize;
                        for (var j = 0; j < itemSize; j++) {
                            array2[index2++] = array[index++];
                        }
                    }
                    return new THREE.Float32BufferAttribute(array2, itemSize);
                }
                var ab = new THREE.Vector3();
                var cb = new THREE.Vector3();
                function computeNormalAttribute(index, coord, creaseAngle) {
                    var faces = [];
                    var vertexNormals = {};
                    for (var i = 0, l = index.length; i < l; i += 3) {
                        var a = index[i];
                        var b = index[i + 1];
                        var c = index[i + 2];
                        var face = new Face(a, b, c);
                        vA.fromArray(coord, a * 3);
                        vB.fromArray(coord, b * 3);
                        vC.fromArray(coord, c * 3);
                        cb.subVectors(vC, vB);
                        ab.subVectors(vA, vB);
                        cb.cross(ab);
                        cb.normalize();
                        face.normal.copy(cb);
                        if (vertexNormals[a] === undefined)
                            vertexNormals[a] = [];
                        if (vertexNormals[b] === undefined)
                            vertexNormals[b] = [];
                        if (vertexNormals[c] === undefined)
                            vertexNormals[c] = [];
                        vertexNormals[a].push(face.normal);
                        vertexNormals[b].push(face.normal);
                        vertexNormals[c].push(face.normal);
                        faces.push(face);
                    }
                    var normals = [];
                    for (var i = 0, l = faces.length; i < l; i++) {
                        var face = faces[i];
                        var nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);
                        var nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);
                        var nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);
                        vA.fromArray(coord, face.a * 3);
                        vB.fromArray(coord, face.b * 3);
                        vC.fromArray(coord, face.c * 3);
                        normals.push(nA.x, nA.y, nA.z);
                        normals.push(nB.x, nB.y, nB.z);
                        normals.push(nC.x, nC.y, nC.z);
                    }
                    return new THREE.Float32BufferAttribute(normals, 3);
                }
                function weightedNormal(normals, vector, creaseAngle) {
                    var normal = new THREE.Vector3();
                    if (creaseAngle === 0) {
                        normal.copy(vector);
                    } else {
                        for (var i = 0, l = normals.length; i < l; i++) {
                            if (normals[i].angleTo(vector) < creaseAngle) {
                                normal.add(normals[i]);
                            }
                        }
                    }
                    return normal.normalize();
                }
                function toColorArray(colors) {
                    var array = [];
                    for (var i = 0, l = colors.length; i < l; i += 3) {
                        array.push(new THREE.Color(colors[i], colors[i + 1], colors[i + 2]));
                    }
                    return array;
                }
                function paintFaces(geometry, radius, angles, colors, topDown) {
                    var thresholds = [];
                    var startAngle = topDown === true ? 0 : Math.PI;
                    for (var i = 0, l = colors.length; i < l; i++) {
                        var angle = i === 0 ? 0 : angles[i - 1];
                        angle = topDown === true ? angle : startAngle - angle;
                        var point = new THREE.Vector3();
                        point.setFromSphericalCoords(radius, angle, 0);
                        thresholds.push(point);
                    }
                    var indices = geometry.index;
                    var positionAttribute = geometry.attributes.position;
                    var colorAttribute = new THREE.BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);
                    var position = new THREE.Vector3();
                    var color = new THREE.Color();
                    for (var i = 0; i < indices.count; i++) {
                        var index = indices.getX(i);
                        position.fromBufferAttribute(positionAttribute, index);
                        var thresholdIndexA, thresholdIndexB;
                        var t = 1;
                        for (var j = 1; j < thresholds.length; j++) {
                            thresholdIndexA = j - 1;
                            thresholdIndexB = j;
                            var thresholdA = thresholds[thresholdIndexA];
                            var thresholdB = thresholds[thresholdIndexB];
                            if (topDown === true) {
                                if (position.y <= thresholdA.y && position.y > thresholdB.y) {
                                    t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);
                                    break;
                                }
                            } else {
                                if (position.y >= thresholdA.y && position.y < thresholdB.y) {
                                    t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);
                                    break;
                                }
                            }
                        }
                        var colorA = colors[thresholdIndexA];
                        var colorB = colors[thresholdIndexB];
                        color.copy(colorA).lerp(colorB, t);
                        colorAttribute.setXYZ(index, color.r, color.g, color.b);
                    }
                    geometry.setAttribute('color', colorAttribute);
                }
                var textureLoader = new THREE.TextureLoader(this.manager);
                textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
                var tree = generateVRMLTree(data);
                if (tree.version.indexOf('V2.0') === -1) {
                    throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');
                }
                var scene = parseTree(tree);
                return scene;
            }
        });
        function VRMLLexer(tokens) {
            this.lexer = new chevrotain.Lexer(tokens);
        }
        VRMLLexer.prototype = {
            constructor: VRMLLexer,
            lex: function (inputText) {
                var lexingResult = this.lexer.tokenize(inputText);
                if (lexingResult.errors.length > 0) {
                    console.error(lexingResult.errors);
                    throw Error('THREE.VRMLLexer: Lexing errors detected.');
                }
                return lexingResult;
            }
        };
        function VRMLParser(tokenVocabulary) {
            chevrotain.Parser.call(this, tokenVocabulary);
            var $ = this;
            var Version = tokenVocabulary['Version'];
            var LCurly = tokenVocabulary['LCurly'];
            var RCurly = tokenVocabulary['RCurly'];
            var LSquare = tokenVocabulary['LSquare'];
            var RSquare = tokenVocabulary['RSquare'];
            var Identifier = tokenVocabulary['Identifier'];
            var RouteIdentifier = tokenVocabulary['RouteIdentifier'];
            var StringLiteral = tokenVocabulary['StringLiteral'];
            var HexLiteral = tokenVocabulary['HexLiteral'];
            var NumberLiteral = tokenVocabulary['NumberLiteral'];
            var TrueLiteral = tokenVocabulary['TrueLiteral'];
            var FalseLiteral = tokenVocabulary['FalseLiteral'];
            var NullLiteral = tokenVocabulary['NullLiteral'];
            var DEF = tokenVocabulary['DEF'];
            var USE = tokenVocabulary['USE'];
            var ROUTE = tokenVocabulary['ROUTE'];
            var TO = tokenVocabulary['TO'];
            var NodeName = tokenVocabulary['NodeName'];
            $.RULE('vrml', function () {
                $.SUBRULE($.version);
                $.AT_LEAST_ONE(function () {
                    $.SUBRULE($.node);
                });
                $.MANY(function () {
                    $.SUBRULE($.route);
                });
            });
            $.RULE('version', function () {
                $.CONSUME(Version);
            });
            $.RULE('node', function () {
                $.OPTION(function () {
                    $.SUBRULE($.def);
                });
                $.CONSUME(NodeName);
                $.CONSUME(LCurly);
                $.MANY(function () {
                    $.SUBRULE($.field);
                });
                $.CONSUME(RCurly);
            });
            $.RULE('field', function () {
                $.CONSUME(Identifier);
                $.OR2([
                    {
                        ALT: function () {
                            $.SUBRULE($.singleFieldValue);
                        }
                    },
                    {
                        ALT: function () {
                            $.SUBRULE($.multiFieldValue);
                        }
                    }
                ]);
            });
            $.RULE('def', function () {
                $.CONSUME(DEF);
                $.CONSUME(Identifier);
            });
            $.RULE('use', function () {
                $.CONSUME(USE);
                $.CONSUME(Identifier);
            });
            $.RULE('singleFieldValue', function () {
                $.AT_LEAST_ONE(function () {
                    $.OR([
                        {
                            ALT: function () {
                                $.SUBRULE($.node);
                            }
                        },
                        {
                            ALT: function () {
                                $.SUBRULE($.use);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(StringLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(HexLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NumberLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(TrueLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(FalseLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NullLiteral);
                            }
                        }
                    ]);
                });
            });
            $.RULE('multiFieldValue', function () {
                $.CONSUME(LSquare);
                $.MANY(function () {
                    $.OR([
                        {
                            ALT: function () {
                                $.SUBRULE($.node);
                            }
                        },
                        {
                            ALT: function () {
                                $.SUBRULE($.use);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(StringLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(HexLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NumberLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NullLiteral);
                            }
                        }
                    ]);
                });
                $.CONSUME(RSquare);
            });
            $.RULE('route', function () {
                $.CONSUME(ROUTE);
                $.CONSUME(RouteIdentifier);
                $.CONSUME(TO);
                $.CONSUME2(RouteIdentifier);
            });
            this.performSelfAnalysis();
        }
        VRMLParser.prototype = Object.create(chevrotain.Parser.prototype);
        VRMLParser.prototype.constructor = VRMLParser;
        function Face(a, b, c) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.normal = new THREE.Vector3();
        }
        var TEXTURE_TYPE = {
            INTENSITY: 1,
            INTENSITY_ALPHA: 2,
            RGB: 3,
            RGBA: 4
        };
        return VRMLLoader;
    }();
    return VRMLLoader;
});
define('skylark-threejs-ex/loaders/VTKLoader',[
    "skylark-threejs",
    'skylark-zlib/Inflate'
], function (
    THREE, 
    Inflate
) {
    'use strict';
    var VTKLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    VTKLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: VTKLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        parse: function (data) {
            function parseASCII(data) {
                var indices = [];
                var positions = [];
                var colors = [];
                var normals = [];
                var result;
                var patWord = /^[^\d.\s-]+/;
                var pat3Floats = /(\-?\d+\.?[\d\-\+e]*)\s+(\-?\d+\.?[\d\-\+e]*)\s+(\-?\d+\.?[\d\-\+e]*)/g;
                var patConnectivity = /^(\d+)\s+([\s\d]*)/;
                var patPOINTS = /^POINTS /;
                var patPOLYGONS = /^POLYGONS /;
                var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;
                var patPOINT_DATA = /^POINT_DATA[ ]+(\d+)/;
                var patCELL_DATA = /^CELL_DATA[ ]+(\d+)/;
                var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\w+)[ ]+3/;
                var patNORMALS = /^NORMALS[ ]+(\w+)[ ]+(\w+)/;
                var inPointsSection = false;
                var inPolygonsSection = false;
                var inTriangleStripSection = false;
                var inPointDataSection = false;
                var inCellDataSection = false;
                var inColorSection = false;
                var inNormalsSection = false;
                var lines = data.split('\n');
                for (var i in lines) {
                    var line = lines[i].trim();
                    if (line.indexOf('DATASET') === 0) {
                        var dataset = line.split(' ')[1];
                        if (dataset !== 'POLYDATA')
                            throw new Error('Unsupported DATASET type: ' + dataset);
                    } else if (inPointsSection) {
                        while ((result = pat3Floats.exec(line)) !== null) {
                            if (patWord.exec(line) !== null)
                                break;
                            var x = parseFloat(result[1]);
                            var y = parseFloat(result[2]);
                            var z = parseFloat(result[3]);
                            positions.push(x, y, z);
                        }
                    } else if (inPolygonsSection) {
                        if ((result = patConnectivity.exec(line)) !== null) {
                            var numVertices = parseInt(result[1]);
                            var inds = result[2].split(/\s+/);
                            if (numVertices >= 3) {
                                var i0 = parseInt(inds[0]);
                                var i1, i2;
                                var k = 1;
                                for (var j = 0; j < numVertices - 2; ++j) {
                                    i1 = parseInt(inds[k]);
                                    i2 = parseInt(inds[k + 1]);
                                    indices.push(i0, i1, i2);
                                    k++;
                                }
                            }
                        }
                    } else if (inTriangleStripSection) {
                        if ((result = patConnectivity.exec(line)) !== null) {
                            var numVertices = parseInt(result[1]);
                            var inds = result[2].split(/\s+/);
                            if (numVertices >= 3) {
                                var i0, i1, i2;
                                for (var j = 0; j < numVertices - 2; j++) {
                                    if (j % 2 === 1) {
                                        i0 = parseInt(inds[j]);
                                        i1 = parseInt(inds[j + 2]);
                                        i2 = parseInt(inds[j + 1]);
                                        indices.push(i0, i1, i2);
                                    } else {
                                        i0 = parseInt(inds[j]);
                                        i1 = parseInt(inds[j + 1]);
                                        i2 = parseInt(inds[j + 2]);
                                        indices.push(i0, i1, i2);
                                    }
                                }
                            }
                        }
                    } else if (inPointDataSection || inCellDataSection) {
                        if (inColorSection) {
                            while ((result = pat3Floats.exec(line)) !== null) {
                                if (patWord.exec(line) !== null)
                                    break;
                                var r = parseFloat(result[1]);
                                var g = parseFloat(result[2]);
                                var b = parseFloat(result[3]);
                                colors.push(r, g, b);
                            }
                        } else if (inNormalsSection) {
                            while ((result = pat3Floats.exec(line)) !== null) {
                                if (patWord.exec(line) !== null)
                                    break;
                                var nx = parseFloat(result[1]);
                                var ny = parseFloat(result[2]);
                                var nz = parseFloat(result[3]);
                                normals.push(nx, ny, nz);
                            }
                        }
                    }
                    if (patPOLYGONS.exec(line) !== null) {
                        inPolygonsSection = true;
                        inPointsSection = false;
                        inTriangleStripSection = false;
                    } else if (patPOINTS.exec(line) !== null) {
                        inPolygonsSection = false;
                        inPointsSection = true;
                        inTriangleStripSection = false;
                    } else if (patTRIANGLE_STRIPS.exec(line) !== null) {
                        inPolygonsSection = false;
                        inPointsSection = false;
                        inTriangleStripSection = true;
                    } else if (patPOINT_DATA.exec(line) !== null) {
                        inPointDataSection = true;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    } else if (patCELL_DATA.exec(line) !== null) {
                        inCellDataSection = true;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    } else if (patCOLOR_SCALARS.exec(line) !== null) {
                        inColorSection = true;
                        inNormalsSection = false;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    } else if (patNORMALS.exec(line) !== null) {
                        inNormalsSection = true;
                        inColorSection = false;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    }
                }
                var geometry = new THREE.BufferGeometry();
                geometry.setIndex(indices);
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
                if (normals.length === positions.length) {
                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
                }
                if (colors.length !== indices.length) {
                    if (colors.length === positions.length) {
                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
                    }
                } else {
                    geometry = geometry.toNonIndexed();
                    var numTriangles = geometry.attributes.position.count / 3;
                    if (colors.length === numTriangles * 3) {
                        var newColors = [];
                        for (var i = 0; i < numTriangles; i++) {
                            var r = colors[3 * i + 0];
                            var g = colors[3 * i + 1];
                            var b = colors[3 * i + 2];
                            newColors.push(r, g, b);
                            newColors.push(r, g, b);
                            newColors.push(r, g, b);
                        }
                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));
                    }
                }
                return geometry;
            }
            function parseBinary(data) {
                var count, pointIndex, i, numberOfPoints, s;
                var buffer = new Uint8Array(data);
                var dataView = new DataView(data);
                var points = [];
                var normals = [];
                var indices = [];
                var vtk = [];
                var index = 0;
                function findString(buffer, start) {
                    var index = start;
                    var c = buffer[index];
                    var s = [];
                    while (c !== 10) {
                        s.push(String.fromCharCode(c));
                        index++;
                        c = buffer[index];
                    }
                    return {
                        start: start,
                        end: index,
                        next: index + 1,
                        parsedString: s.join('')
                    };
                }
                var state, line;
                while (true) {
                    state = findString(buffer, index);
                    line = state.parsedString;
                    if (line.indexOf('DATASET') === 0) {
                        var dataset = line.split(' ')[1];
                        if (dataset !== 'POLYDATA')
                            throw new Error('Unsupported DATASET type: ' + dataset);
                    } else if (line.indexOf('POINTS') === 0) {
                        vtk.push(line);
                        numberOfPoints = parseInt(line.split(' ')[1], 10);
                        count = numberOfPoints * 4 * 3;
                        points = new Float32Array(numberOfPoints * 3);
                        pointIndex = state.next;
                        for (i = 0; i < numberOfPoints; i++) {
                            points[3 * i] = dataView.getFloat32(pointIndex, false);
                            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);
                            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);
                            pointIndex = pointIndex + 12;
                        }
                        state.next = state.next + count + 1;
                    } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {
                        var numberOfStrips = parseInt(line.split(' ')[1], 10);
                        var size = parseInt(line.split(' ')[2], 10);
                        count = size * 4;
                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);
                        var indicesIndex = 0;
                        pointIndex = state.next;
                        for (i = 0; i < numberOfStrips; i++) {
                            var indexCount = dataView.getInt32(pointIndex, false);
                            var strip = [];
                            pointIndex += 4;
                            for (s = 0; s < indexCount; s++) {
                                strip.push(dataView.getInt32(pointIndex, false));
                                pointIndex += 4;
                            }
                            for (var j = 0; j < indexCount - 2; j++) {
                                if (j % 2) {
                                    indices[indicesIndex++] = strip[j];
                                    indices[indicesIndex++] = strip[j + 2];
                                    indices[indicesIndex++] = strip[j + 1];
                                } else {
                                    indices[indicesIndex++] = strip[j];
                                    indices[indicesIndex++] = strip[j + 1];
                                    indices[indicesIndex++] = strip[j + 2];
                                }
                            }
                        }
                        state.next = state.next + count + 1;
                    } else if (line.indexOf('POLYGONS') === 0) {
                        var numberOfStrips = parseInt(line.split(' ')[1], 10);
                        var size = parseInt(line.split(' ')[2], 10);
                        count = size * 4;
                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);
                        var indicesIndex = 0;
                        pointIndex = state.next;
                        for (i = 0; i < numberOfStrips; i++) {
                            var indexCount = dataView.getInt32(pointIndex, false);
                            var strip = [];
                            pointIndex += 4;
                            for (s = 0; s < indexCount; s++) {
                                strip.push(dataView.getInt32(pointIndex, false));
                                pointIndex += 4;
                            }
                            for (var j = 1; j < indexCount - 1; j++) {
                                indices[indicesIndex++] = strip[0];
                                indices[indicesIndex++] = strip[j];
                                indices[indicesIndex++] = strip[j + 1];
                            }
                        }
                        state.next = state.next + count + 1;
                    } else if (line.indexOf('POINT_DATA') === 0) {
                        numberOfPoints = parseInt(line.split(' ')[1], 10);
                        state = findString(buffer, state.next);
                        count = numberOfPoints * 4 * 3;
                        normals = new Float32Array(numberOfPoints * 3);
                        pointIndex = state.next;
                        for (i = 0; i < numberOfPoints; i++) {
                            normals[3 * i] = dataView.getFloat32(pointIndex, false);
                            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);
                            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);
                            pointIndex += 12;
                        }
                        state.next = state.next + count;
                    }
                    index = state.next;
                    if (index >= buffer.byteLength) {
                        break;
                    }
                }
                var geometry = new THREE.BufferGeometry();
                geometry.setIndex(new THREE.BufferAttribute(indices, 1));
                geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));
                if (normals.length === points.length) {
                    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
                }
                return geometry;
            }
            function Float32Concat(first, second) {
                var firstLength = first.length, result = new Float32Array(firstLength + second.length);
                result.set(first);
                result.set(second, firstLength);
                return result;
            }
            function Int32Concat(first, second) {
                var firstLength = first.length, result = new Int32Array(firstLength + second.length);
                result.set(first);
                result.set(second, firstLength);
                return result;
            }
            function parseXML(stringFile) {
                function xmlToJson(xml) {
                    var obj = {};
                    if (xml.nodeType === 1) {
                        if (xml.attributes) {
                            if (xml.attributes.length > 0) {
                                obj['attributes'] = {};
                                for (var j = 0; j < xml.attributes.length; j++) {
                                    var attribute = xml.attributes.item(j);
                                    obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();
                                }
                            }
                        }
                    } else if (xml.nodeType === 3) {
                        obj = xml.nodeValue.trim();
                    }
                    if (xml.hasChildNodes()) {
                        for (var i = 0; i < xml.childNodes.length; i++) {
                            var item = xml.childNodes.item(i);
                            var nodeName = item.nodeName;
                            if (typeof obj[nodeName] === 'undefined') {
                                var tmp = xmlToJson(item);
                                if (tmp !== '')
                                    obj[nodeName] = tmp;
                            } else {
                                if (typeof obj[nodeName].push === 'undefined') {
                                    var old = obj[nodeName];
                                    obj[nodeName] = [old];
                                }
                                var tmp = xmlToJson(item);
                                if (tmp !== '')
                                    obj[nodeName].push(tmp);
                            }
                        }
                    }
                    return obj;
                }
                function Base64toByteArray(b64) {
                    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
                    var i;
                    var lookup = [];
                    var revLookup = [];
                    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                    var len = code.length;
                    for (i = 0; i < len; i++) {
                        lookup[i] = code[i];
                    }
                    for (i = 0; i < len; ++i) {
                        revLookup[code.charCodeAt(i)] = i;
                    }
                    revLookup['-'.charCodeAt(0)] = 62;
                    revLookup['_'.charCodeAt(0)] = 63;
                    var j, l, tmp, placeHolders, arr;
                    var len = b64.length;
                    if (len % 4 > 0) {
                        throw new Error('Invalid string. Length must be a multiple of 4');
                    }
                    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
                    arr = new Arr(len * 3 / 4 - placeHolders);
                    l = placeHolders > 0 ? len - 4 : len;
                    var L = 0;
                    for (i = 0, j = 0; i < l; i += 4, j += 3) {
                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                        arr[L++] = (tmp & 16711680) >> 16;
                        arr[L++] = (tmp & 65280) >> 8;
                        arr[L++] = tmp & 255;
                    }
                    if (placeHolders === 2) {
                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                        arr[L++] = tmp & 255;
                    } else if (placeHolders === 1) {
                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                        arr[L++] = tmp >> 8 & 255;
                        arr[L++] = tmp & 255;
                    }
                    return arr;
                }
                function parseDataArray(ele, compressed) {
                    var numBytes = 0;
                    if (json.attributes.header_type === 'UInt64') {
                        numBytes = 8;
                    } else if (json.attributes.header_type === 'UInt32') {
                        numBytes = 4;
                    }
                    if (ele.attributes.format === 'binary' && compressed) {
                        var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;
                        if (ele.attributes.type === 'Float32') {
                            var txt = new Float32Array();
                        } else if (ele.attributes.type === 'Int64') {
                            var txt = new Int32Array();
                        }
                        rawData = ele['#text'];
                        byteData = Base64toByteArray(rawData);
                        blocks = byteData[0];
                        for (var i = 1; i < numBytes - 1; i++) {
                            blocks = blocks | byteData[i] << i * numBytes;
                        }
                        headerSize = (blocks + 3) * numBytes;
                        padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;
                        headerSize = headerSize + padding;
                        dataOffsets = [];
                        currentOffset = headerSize;
                        dataOffsets.push(currentOffset);
                        cSizeStart = 3 * numBytes;
                        for (var i = 0; i < blocks; i++) {
                            var currentBlockSize = byteData[i * numBytes + cSizeStart];
                            for (var j = 1; j < numBytes - 1; j++) {
                                currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;
                            }
                            currentOffset = currentOffset + currentBlockSize;
                            dataOffsets.push(currentOffset);
                        }
                        for (var i = 0; i < dataOffsets.length - 1; i++) {
                            var inflate = new Inflate(byteData.slice(dataOffsets[i], dataOffsets[i + 1]), {
                                resize: true,
                                verify: true
                            });
                            content = inflate.decompress();
                            content = content.buffer;
                            if (ele.attributes.type === 'Float32') {
                                content = new Float32Array(content);
                                txt = Float32Concat(txt, content);
                            } else if (ele.attributes.type === 'Int64') {
                                content = new Int32Array(content);
                                txt = Int32Concat(txt, content);
                            }
                        }
                        delete ele['#text'];
                        if (ele.attributes.type === 'Int64') {
                            if (ele.attributes.format === 'binary') {
                                txt = txt.filter(function (el, idx) {
                                    if (idx % 2 !== 1)
                                        return true;
                                });
                            }
                        }
                    } else {
                        if (ele.attributes.format === 'binary' && !compressed) {
                            var content = Base64toByteArray(ele['#text']);
                            content = content.slice(numBytes).buffer;
                        } else {
                            if (ele['#text']) {
                                var content = ele['#text'].split(/\s+/).filter(function (el) {
                                    if (el !== '')
                                        return el;
                                });
                            } else {
                                var content = new Int32Array(0).buffer;
                            }
                        }
                        delete ele['#text'];
                        if (ele.attributes.type === 'Float32') {
                            var txt = new Float32Array(content);
                        } else if (ele.attributes.type === 'Int32') {
                            var txt = new Int32Array(content);
                        } else if (ele.attributes.type === 'Int64') {
                            var txt = new Int32Array(content);
                            if (ele.attributes.format === 'binary') {
                                txt = txt.filter(function (el, idx) {
                                    if (idx % 2 !== 1)
                                        return true;
                                });
                            }
                        }
                    }
                    return txt;
                }
                var dom = null;
                if (window.DOMParser) {
                    try {
                        dom = new DOMParser().parseFromString(stringFile, 'text/xml');
                    } catch (e) {
                        dom = null;
                    }
                } else if (window.ActiveXObject) {
                    try {
                        dom = new ActiveXObject('Microsoft.XMLDOM');
                        dom.async = false;
                        if (!dom.loadXML()) {
                            throw new Error(dom.parseError.reason + dom.parseError.srcText);
                        }
                    } catch (e) {
                        dom = null;
                    }
                } else {
                    throw new Error('Cannot parse xml string!');
                }
                var doc = dom.documentElement;
                var json = xmlToJson(doc);
                var points = [];
                var normals = [];
                var indices = [];
                if (json.PolyData) {
                    var piece = json.PolyData.Piece;
                    var compressed = json.attributes.hasOwnProperty('compressor');
                    var sections = [
                        'PointData',
                        'Points',
                        'Strips',
                        'Polys'
                    ];
                    var sectionIndex = 0, numberOfSections = sections.length;
                    while (sectionIndex < numberOfSections) {
                        var section = piece[sections[sectionIndex]];
                        if (section && section.DataArray) {
                            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {
                                var arr = section.DataArray;
                            } else {
                                var arr = [section.DataArray];
                            }
                            var dataArrayIndex = 0, numberOfDataArrays = arr.length;
                            while (dataArrayIndex < numberOfDataArrays) {
                                if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {
                                    arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);
                                }
                                dataArrayIndex++;
                            }
                            switch (sections[sectionIndex]) {
                            case 'PointData':
                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);
                                var normalsName = section.attributes.Normals;
                                if (numberOfPoints > 0) {
                                    for (var i = 0, len = arr.length; i < len; i++) {
                                        if (normalsName === arr[i].attributes.Name) {
                                            var components = arr[i].attributes.NumberOfComponents;
                                            normals = new Float32Array(numberOfPoints * components);
                                            normals.set(arr[i].text, 0);
                                        }
                                    }
                                }
                                break;
                            case 'Points':
                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);
                                if (numberOfPoints > 0) {
                                    var components = section.DataArray.attributes.NumberOfComponents;
                                    points = new Float32Array(numberOfPoints * components);
                                    points.set(section.DataArray.text, 0);
                                }
                                break;
                            case 'Strips':
                                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);
                                if (numberOfStrips > 0) {
                                    var connectivity = new Int32Array(section.DataArray[0].text.length);
                                    var offset = new Int32Array(section.DataArray[1].text.length);
                                    connectivity.set(section.DataArray[0].text, 0);
                                    offset.set(section.DataArray[1].text, 0);
                                    var size = numberOfStrips + connectivity.length;
                                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);
                                    var indicesIndex = 0;
                                    for (var i = 0, len = numberOfStrips; i < len; i++) {
                                        var strip = [];
                                        for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {
                                            strip.push(connectivity[s]);
                                            if (i > 0)
                                                len0 = offset[i - 1];
                                        }
                                        for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {
                                            if (j % 2) {
                                                indices[indicesIndex++] = strip[j];
                                                indices[indicesIndex++] = strip[j + 2];
                                                indices[indicesIndex++] = strip[j + 1];
                                            } else {
                                                indices[indicesIndex++] = strip[j];
                                                indices[indicesIndex++] = strip[j + 1];
                                                indices[indicesIndex++] = strip[j + 2];
                                            }
                                            if (i > 0)
                                                len0 = offset[i - 1];
                                        }
                                    }
                                }
                                break;
                            case 'Polys':
                                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);
                                if (numberOfPolys > 0) {
                                    var connectivity = new Int32Array(section.DataArray[0].text.length);
                                    var offset = new Int32Array(section.DataArray[1].text.length);
                                    connectivity.set(section.DataArray[0].text, 0);
                                    offset.set(section.DataArray[1].text, 0);
                                    var size = numberOfPolys + connectivity.length;
                                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);
                                    var indicesIndex = 0, connectivityIndex = 0;
                                    var i = 0, len = numberOfPolys, len0 = 0;
                                    while (i < len) {
                                        var poly = [];
                                        var s = 0, len1 = offset[i];
                                        while (s < len1 - len0) {
                                            poly.push(connectivity[connectivityIndex++]);
                                            s++;
                                        }
                                        var j = 1;
                                        while (j < len1 - len0 - 1) {
                                            indices[indicesIndex++] = poly[0];
                                            indices[indicesIndex++] = poly[j];
                                            indices[indicesIndex++] = poly[j + 1];
                                            j++;
                                        }
                                        i++;
                                        len0 = offset[i - 1];
                                    }
                                }
                                break;
                            default:
                                break;
                            }
                        }
                        sectionIndex++;
                    }
                    var geometry = new THREE.BufferGeometry();
                    geometry.setIndex(new THREE.BufferAttribute(indices, 1));
                    geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));
                    if (normals.length === points.length) {
                        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
                    }
                    return geometry;
                } else {
                    throw new Error('Unsupported DATASET type');
                }
            }
            function getStringFile(data) {
                var stringFile = '';
                var charArray = new Uint8Array(data);
                var i = 0;
                var len = charArray.length;
                while (len--) {
                    stringFile += String.fromCharCode(charArray[i++]);
                }
                return stringFile;
            }
            var meta = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\n');
            if (meta[0].indexOf('xml') !== -1) {
                return parseXML(getStringFile(data));
            } else if (meta[2].includes('ASCII')) {
                return parseASCII(getStringFile(data));
            } else {
                return parseBinary(data);
            }
        }
    });

    return VTKLoader;
});
define('skylark-threejs-ex/loaders/XLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var XLoader = function () {
        var classCallCheck = function (instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        };
        var createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var XboneInf = function XboneInf() {
            classCallCheck(this, XboneInf);
            this.boneName = '';
            this.BoneIndex = 0;
            this.Indeces = [];
            this.Weights = [];
            this.initMatrix = null;
            this.OffsetMatrix = null;
        };
        var XAnimationInfo = function XAnimationInfo() {
            classCallCheck(this, XAnimationInfo);
            this.animeName = '';
            this.boneName = '';
            this.targetBone = null;
            this.keyType = 4;
            this.frameStartLv = 0;
            this.keyFrames = [];
            this.InverseMx = null;
        };
        var XAnimationObj = function () {
            function XAnimationObj(_flags) {
                classCallCheck(this, XAnimationObj);
                this.fps = 30;
                this.name = 'xanimation';
                this.length = 0;
                this.hierarchy = [];
                this.putFlags = _flags;
                if (this.putFlags.putPos === undefined) {
                    this.putFlags.putPos = true;
                }
                if (this.putFlags.putRot === undefined) {
                    this.putFlags.putRot = true;
                }
                if (this.putFlags.putScl === undefined) {
                    this.putFlags.putScl = true;
                }
            }
            createClass(XAnimationObj, [
                {
                    key: 'make',
                    value: function make(XAnimationInfoArray) {
                        for (var i = 0; i < XAnimationInfoArray.length; i++) {
                            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));
                        }
                        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;
                    }
                },
                {
                    key: 'clone',
                    value: function clone() {
                        return Object.assign({}, this);
                    }
                },
                {
                    key: 'makeBonekeys',
                    value: function makeBonekeys(XAnimationInfo) {
                        var refObj = {};
                        refObj.name = XAnimationInfo.boneName;
                        refObj.parent = '';
                        refObj.keys = this.keyFrameRefactor(XAnimationInfo);
                        refObj.copy = function () {
                            return Object.assign({}, this);
                        };
                        return refObj;
                    }
                },
                {
                    key: 'keyFrameRefactor',
                    value: function keyFrameRefactor(XAnimationInfo) {
                        var keys = [];
                        for (var i = 0; i < XAnimationInfo.keyFrames.length; i++) {
                            var keyframe = {};
                            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;
                            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {
                                keyframe.pos = XAnimationInfo.keyFrames[i].pos;
                            }
                            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {
                                keyframe.rot = XAnimationInfo.keyFrames[i].rot;
                            }
                            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {
                                keyframe.scl = XAnimationInfo.keyFrames[i].scl;
                            }
                            if (XAnimationInfo.keyFrames[i].matrix) {
                                keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;
                                if (this.putFlags.putPos) {
                                    keyframe.pos = new THREE.Vector3().setFromMatrixPosition(keyframe.matrix);
                                }
                                if (this.putFlags.putRot) {
                                    keyframe.rot = new THREE.Quaternion().setFromRotationMatrix(keyframe.matrix);
                                }
                                if (this.putFlags.putScl) {
                                    keyframe.scl = new THREE.Vector3().setFromMatrixScale(keyframe.matrix);
                                }
                            }
                            keys.push(keyframe);
                        }
                        return keys;
                    }
                }
            ]);
            return XAnimationObj;
        }();
        var XKeyFrameInfo = function XKeyFrameInfo() {
            classCallCheck(this, XKeyFrameInfo);
            this.index = 0;
            this.Frame = 0;
            this.time = 0;
            this.matrix = null;
        };
        var XLoader = function () {
            function XLoader(manager) {
                THREE.Loader.call(this, manager);
                classCallCheck(this, XLoader);
                this.debug = false;
                this.texloader = new THREE.TextureLoader(this.manager);
                this.url = '';
                this._putMatLength = 0;
                this._nowMat = null;
                this._nowFrameName = '';
                this.frameHierarchie = [];
                this.Hierarchies = {};
                this.HieStack = [];
                this._currentObject = {};
                this._currentFrame = {};
                this._data = null;
                this.onLoad = null;
                this.IsUvYReverse = true;
                this.Meshes = [];
                this.animations = [];
                this.animTicksPerSecond = 30;
                this._currentGeo = null;
                this._currentAnime = null;
                this._currentAnimeFrames = null;
            }
            createClass(XLoader, [
                {
                    key: '_setArgOption',
                    value: function _setArgOption(_arg) {
                        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        if (!_arg) {
                            return;
                        }
                        for (var i = _start; i < _arg.length; i++) {
                            switch (i) {
                            case 0:
                                this.url = _arg[i];
                                break;
                            case 1:
                                this.options = _arg[i];
                                break;
                            }
                        }
                        if (this.options === undefined) {
                            this.options = {};
                        }
                    }
                },
                {
                    key: 'load',
                    value: function load(_arg, onLoad, onProgress, onError) {
                        var _this = this;
                        this._setArgOption(_arg);
                        var loader = new THREE.FileLoader(this.manager);
                        loader.setPath(this.path);
                        loader.setResponseType('arraybuffer');
                        loader.load(this.url, function (response) {
                            _this.parse(response, onLoad);
                        }, onProgress, onError);
                    }
                },
                {
                    key: '_readLine',
                    value: function _readLine(line) {
                        var readed = 0;
                        while (true) {
                            var find = -1;
                            find = line.indexOf('//', readed);
                            if (find === -1) {
                                find = line.indexOf('#', readed);
                            }
                            if (find > -1 && find < 2) {
                                var foundNewLine = -1;
                                foundNewLine = line.indexOf('\r\n', readed);
                                if (foundNewLine > 0) {
                                    readed = foundNewLine + 2;
                                } else {
                                    foundNewLine = line.indexOf('\r', readed);
                                    if (foundNewLine > 0) {
                                        readed = foundNewLine + 1;
                                    } else {
                                        readed = line.indexOf('\n', readed) + 1;
                                    }
                                }
                            } else {
                                break;
                            }
                        }
                        return line.substr(readed);
                    }
                },
                {
                    key: '_readLine',
                    value: function _readLine(line) {
                        var readed = 0;
                        while (true) {
                            var find = -1;
                            find = line.indexOf('//', readed);
                            if (find === -1) {
                                find = line.indexOf('#', readed);
                            }
                            if (find > -1 && find < 2) {
                                var foundNewLine = -1;
                                foundNewLine = line.indexOf('\r\n', readed);
                                if (foundNewLine > 0) {
                                    readed = foundNewLine + 2;
                                } else {
                                    foundNewLine = line.indexOf('\r', readed);
                                    if (foundNewLine > 0) {
                                        readed = foundNewLine + 1;
                                    } else {
                                        readed = line.indexOf('\n', readed) + 1;
                                    }
                                }
                            } else {
                                break;
                            }
                        }
                        return line.substr(readed);
                    }
                },
                {
                    key: '_isBinary',
                    value: function _isBinary(binData) {
                        var reader = new DataView(binData);
                        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;
                        var n_faces = reader.getUint32(80, true);
                        var expect = 80 + 32 / 8 + n_faces * face_size;
                        if (expect === reader.byteLength) {
                            return true;
                        }
                        var fileLength = reader.byteLength;
                        for (var index = 0; index < fileLength; index++) {
                            if (reader.getUint8(index, false) > 127) {
                                return true;
                            }
                        }
                        return false;
                    }
                },
                {
                    key: '_ensureBinary',
                    value: function _ensureBinary(buf) {
                        if (typeof buf === 'string') {
                            var array_buffer = new Uint8Array(buf.length);
                            for (var i = 0; i < buf.length; i++) {
                                array_buffer[i] = buf.charCodeAt(i) & 255;
                            }
                            return array_buffer.buffer || array_buffer;
                        } else {
                            return buf;
                        }
                    }
                },
                {
                    key: '_ensureString',
                    value: function _ensureString(buf) {
                        if (typeof buf !== 'string') {
                            return THREE.LoaderUtils.decodeText(new Uint8Array(buf));
                        } else {
                            return buf;
                        }
                    }
                },
                {
                    key: 'parse',
                    value: function _parse(data, onLoad) {
                        var binData = this._ensureBinary(data);
                        this._data = this._ensureString(data);
                        this.onLoad = onLoad;
                        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();
                    }
                },
                {
                    key: '_parseBinary',
                    value: function _parseBinary(data) {
                        return this._parseASCII(THREE.LoaderUtils.decodeText(new Uint8Array(data)));
                    }
                },
                {
                    key: '_parseASCII',
                    value: function _parseASCII() {
                        var path;
                        if (this.resourcePath !== '') {
                            path = this.resourcePath;
                        } else if (this.path !== '') {
                            path = this.path;
                        } else {
                            path = THREE.LoaderUtils.extractUrlBase(this.url);
                        }
                        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);
                        var endRead = 16;
                        this.Hierarchies.children = [];
                        this._hierarchieParse(this.Hierarchies, endRead);
                        this._changeRoot();
                        this._currentObject = this.Hierarchies.children.shift();
                        this._mainloop();
                    }
                },
                {
                    key: '_hierarchieParse',
                    value: function _hierarchieParse(_parent, _end) {
                        var endRead = _end;
                        while (true) {
                            var find1 = this._data.indexOf('{', endRead) + 1;
                            var findEnd = this._data.indexOf('}', endRead);
                            var findNext = this._data.indexOf('{', find1) + 1;
                            if (find1 > 0 && findEnd > find1) {
                                var _currentObject = {};
                                _currentObject.children = [];
                                var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();
                                var word = nameData.split(/ /g);
                                if (word.length > 0) {
                                    _currentObject.type = word[0];
                                    if (word.length >= 2) {
                                        _currentObject.name = word[1];
                                    } else {
                                        _currentObject.name = word[0] + this.Hierarchies.children.length;
                                    }
                                } else {
                                    _currentObject.name = nameData;
                                    _currentObject.type = '';
                                }
                                if (_currentObject.type === 'Animation') {
                                    _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();
                                    var refs = this._hierarchieParse(_currentObject, findEnd + 1);
                                    endRead = refs.end;
                                    _currentObject.children = refs.parent.children;
                                } else {
                                    var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);
                                    _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();
                                    if (findNext <= 0 || findEnd < findNext) {
                                        endRead = findEnd + 1;
                                    } else {
                                        var nextStart = Math.max(DataEnder + 1, find1);
                                        var _refs = this._hierarchieParse(_currentObject, nextStart);
                                        endRead = _refs.end;
                                        _currentObject.children = _refs.parent.children;
                                    }
                                }
                                _currentObject.parent = _parent;
                                if (_currentObject.type != 'template') {
                                    _parent.children.push(_currentObject);
                                }
                            } else {
                                endRead = find1 === -1 ? this._data.length : findEnd + 1;
                                break;
                            }
                        }
                        return {
                            parent: _parent,
                            end: endRead
                        };
                    }
                },
                {
                    key: '_mainloop',
                    value: function _mainloop() {
                        var _this2 = this;
                        this._mainProc();
                        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {
                            setTimeout(function () {
                                _this2._mainloop();
                            }, 1);
                        } else {
                            setTimeout(function () {
                                _this2.onLoad({
                                    models: _this2.Meshes,
                                    animations: _this2.animations
                                });
                            }, 1);
                        }
                    }
                },
                {
                    key: '_mainProc',
                    value: function _mainProc() {
                        var breakFlag = false;
                        while (true) {
                            if (!this._currentObject.worked) {
                                switch (this._currentObject.type) {
                                case 'template':
                                    break;
                                case 'AnimTicksPerSecond':
                                    this.animTicksPerSecond = parseInt(this._currentObject.data);
                                    break;
                                case 'Frame':
                                    this._setFrame();
                                    break;
                                case 'FrameTransformMatrix':
                                    this._setFrameTransformMatrix();
                                    break;
                                case 'Mesh':
                                    this._changeRoot();
                                    this._currentGeo = {};
                                    this._currentGeo.name = this._currentObject.name.trim();
                                    this._currentGeo.parentName = this._getParentName(this._currentObject).trim();
                                    this._currentGeo.VertexSetedBoneCount = [];
                                    this._currentGeo.GeometryData = {
                                        vertices: [],
                                        normals: [],
                                        uvs: [],
                                        skinIndices: [],
                                        skinWeights: [],
                                        indices: [],
                                        materialIndices: []
                                    };
                                    this._currentGeo.Materials = [];
                                    this._currentGeo.normalVectors = [];
                                    this._currentGeo.BoneInfs = [];
                                    this._currentGeo.baseFrame = this._currentFrame;
                                    this._makeBoneFrom_CurrentFrame();
                                    this._readVertexDatas();
                                    breakFlag = true;
                                    break;
                                case 'MeshNormals':
                                    this._readVertexDatas();
                                    break;
                                case 'MeshTextureCoords':
                                    this._setMeshTextureCoords();
                                    break;
                                case 'VertexDuplicationIndices':
                                    break;
                                case 'MeshMaterialList':
                                    this._setMeshMaterialList();
                                    break;
                                case 'Material':
                                    this._setMaterial();
                                    break;
                                case 'SkinWeights':
                                    this._setSkinWeights();
                                    break;
                                case 'AnimationSet':
                                    this._changeRoot();
                                    this._currentAnime = {};
                                    this._currentAnime.name = this._currentObject.name.trim();
                                    this._currentAnime.AnimeFrames = [];
                                    break;
                                case 'Animation':
                                    if (this._currentAnimeFrames) {
                                        this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);
                                    }
                                    this._currentAnimeFrames = new XAnimationInfo();
                                    this._currentAnimeFrames.boneName = this._currentObject.data.trim();
                                    break;
                                case 'AnimationKey':
                                    this._readAnimationKey();
                                    breakFlag = true;
                                    break;
                                }
                                this._currentObject.worked = true;
                            }
                            if (this._currentObject.children.length > 0) {
                                this._currentObject = this._currentObject.children.shift();
                                if (this.debug) {
                                    console.log('processing ' + this._currentObject.name);
                                }
                                if (breakFlag)
                                    break;
                            } else {
                                if (this._currentObject.worked) {
                                    if (this._currentObject.parent && !this._currentObject.parent.parent) {
                                        this._changeRoot();
                                    }
                                }
                                if (this._currentObject.parent) {
                                    this._currentObject = this._currentObject.parent;
                                } else {
                                    breakFlag = true;
                                }
                                if (breakFlag)
                                    break;
                            }
                        }
                        return;
                    }
                },
                {
                    key: '_changeRoot',
                    value: function _changeRoot() {
                        if (this._currentGeo != null && this._currentGeo.name) {
                            this._makeOutputGeometry();
                        }
                        this._currentGeo = {};
                        if (this._currentAnime != null && this._currentAnime.name) {
                            if (this._currentAnimeFrames) {
                                this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);
                                this._currentAnimeFrames = null;
                            }
                            this._makeOutputAnimation();
                        }
                        this._currentAnime = {};
                    }
                },
                {
                    key: '_getParentName',
                    value: function _getParentName(_obj) {
                        if (_obj.parent) {
                            if (_obj.parent.name) {
                                return _obj.parent.name;
                            } else {
                                return this._getParentName(_obj.parent);
                            }
                        } else {
                            return '';
                        }
                    }
                },
                {
                    key: '_setFrame',
                    value: function _setFrame() {
                        this._nowFrameName = this._currentObject.name.trim();
                        this._currentFrame = {};
                        this._currentFrame.name = this._nowFrameName;
                        this._currentFrame.children = [];
                        if (this._currentObject.parent && this._currentObject.parent.name) {
                            this._currentFrame.parentName = this._currentObject.parent.name;
                        }
                        this.frameHierarchie.push(this._nowFrameName);
                        this.HieStack[this._nowFrameName] = this._currentFrame;
                    }
                },
                {
                    key: '_setFrameTransformMatrix',
                    value: function _setFrameTransformMatrix() {
                        this._currentFrame.FrameTransformMatrix = new THREE.Matrix4();
                        var data = this._currentObject.data.split(',');
                        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);
                        this._makeBoneFrom_CurrentFrame();
                    }
                },
                {
                    key: '_makeBoneFrom_CurrentFrame',
                    value: function _makeBoneFrom_CurrentFrame() {
                        if (!this._currentFrame.FrameTransformMatrix) {
                            return;
                        }
                        var b = new THREE.Bone();
                        b.name = this._currentFrame.name;
                        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);
                        b.matrixWorld = b.matrix;
                        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;
                        this._currentFrame.putBone = b;
                        if (this._currentFrame.parentName) {
                            for (var frame in this.HieStack) {
                                if (this.HieStack[frame].name === this._currentFrame.parentName) {
                                    this.HieStack[frame].putBone.add(this._currentFrame.putBone);
                                }
                            }
                        }
                    }
                },
                {
                    key: '_readVertexDatas',
                    value: function _readVertexDatas() {
                        var endRead = 0;
                        var mode = 0;
                        var mode_local = 0;
                        var maxLength = 0;
                        while (true) {
                            var changeMode = false;
                            if (mode_local === 0) {
                                var refO = this._readInt1(endRead);
                                endRead = refO.endRead;
                                mode_local = 1;
                                maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;
                                if (maxLength <= 0) {
                                    maxLength = this._currentObject.data.length;
                                }
                            } else {
                                var find = 0;
                                switch (mode) {
                                case 0:
                                    find = this._currentObject.data.indexOf(',', endRead) + 1;
                                    break;
                                case 1:
                                    find = this._currentObject.data.indexOf(';,', endRead) + 1;
                                    break;
                                }
                                if (find === 0 || find > maxLength) {
                                    find = maxLength;
                                    mode_local = 0;
                                    changeMode = true;
                                }
                                switch (this._currentObject.type) {
                                case 'Mesh':
                                    switch (mode) {
                                    case 0:
                                        this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));
                                        break;
                                    case 1:
                                        this._readFace1(this._currentObject.data.substr(endRead, find - endRead));
                                        break;
                                    }
                                    break;
                                case 'MeshNormals':
                                    switch (mode) {
                                    case 0:
                                        this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));
                                        break;
                                    }
                                    break;
                                }
                                endRead = find + 1;
                                if (changeMode) {
                                    mode++;
                                }
                            }
                            if (endRead >= this._currentObject.data.length) {
                                break;
                            }
                        }
                    }
                },
                {
                    key: '_readInt1',
                    value: function _readInt1(start) {
                        var find = this._currentObject.data.indexOf(';', start);
                        return {
                            refI: parseInt(this._currentObject.data.substr(start, find - start)),
                            endRead: find + 1
                        };
                    }
                },
                {
                    key: '_readVertex1',
                    value: function _readVertex1(line) {
                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');
                        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));
                        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);
                        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);
                        this._currentGeo.VertexSetedBoneCount.push(0);
                    }
                },
                {
                    key: '_readFace1',
                    value: function _readFace1(line) {
                        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');
                        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));
                    }
                },
                {
                    key: '_readNormalVector1',
                    value: function _readNormalVector1(line) {
                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');
                        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));
                    }
                },
                {
                    key: '_buildGeometry',
                    value: function _buildGeometry() {
                        var bufferGeometry = new THREE.BufferGeometry();
                        var position = [];
                        var normals = [];
                        var uvs = [];
                        var skinIndices = [];
                        var skinWeights = [];
                        var data = this._currentGeo.GeometryData;
                        for (var i = 0, l = data.indices.length; i < l; i++) {
                            var stride2 = data.indices[i] * 2;
                            var stride3 = data.indices[i] * 3;
                            var stride4 = data.indices[i] * 4;
                            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);
                            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);
                            skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);
                            skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);
                            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);
                        }
                        bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
                        bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
                        bufferGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
                        bufferGeometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));
                        bufferGeometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));
                        this._computeGroups(bufferGeometry, data.materialIndices);
                        return bufferGeometry;
                    }
                },
                {
                    key: '_computeGroups',
                    value: function _computeGroups(bufferGeometry, materialIndices) {
                        var group;
                        var groups = [];
                        var materialIndex = undefined;
                        for (var i = 0; i < materialIndices.length; i++) {
                            var currentMaterialIndex = materialIndices[i];
                            if (currentMaterialIndex !== materialIndex) {
                                materialIndex = currentMaterialIndex;
                                if (group !== undefined) {
                                    group.count = i * 3 - group.start;
                                    groups.push(group);
                                }
                                group = {
                                    start: i * 3,
                                    materialIndex: materialIndex
                                };
                            }
                        }
                        if (group !== undefined) {
                            group.count = i * 3 - group.start;
                            groups.push(group);
                        }
                        bufferGeometry.groups = groups;
                    }
                },
                {
                    key: '_setMeshTextureCoords',
                    value: function _setMeshTextureCoords() {
                        var endRead = 0;
                        var mode = 0;
                        var mode_local = 0;
                        while (true) {
                            switch (mode) {
                            case 0:
                                if (mode_local === 0) {
                                    var refO = this._readInt1(0);
                                    endRead = refO.endRead;
                                    mode_local = 1;
                                } else {
                                    var find = this._currentObject.data.indexOf(',', endRead) + 1;
                                    if (find === 0) {
                                        find = this._currentObject.data.length;
                                        mode = 2;
                                        mode_local = 0;
                                    }
                                    var line = this._currentObject.data.substr(endRead, find - endRead);
                                    var data = this._readLine(line.trim()).split(';');
                                    if (this.IsUvYReverse) {
                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));
                                    } else {
                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));
                                    }
                                    endRead = find + 1;
                                }
                                break;
                            }
                            if (endRead >= this._currentObject.data.length) {
                                break;
                            }
                        }
                    }
                },
                {
                    key: '_setMeshMaterialList',
                    value: function _setMeshMaterialList() {
                        var endRead = 0;
                        var mode = 0;
                        var mode_local = 0;
                        while (true) {
                            if (mode_local < 2) {
                                var refO = this._readInt1(endRead);
                                endRead = refO.endRead;
                                mode_local++;
                            } else {
                                var find = this._currentObject.data.indexOf(';', endRead);
                                if (find === -1) {
                                    find = this._currentObject.data.length;
                                    mode = 3;
                                    mode_local = 0;
                                }
                                var line = this._currentObject.data.substr(endRead, find - endRead);
                                var data = this._readLine(line.trim()).split(',');
                                for (var i = 0; i < data.length; i++) {
                                    this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);
                                }
                                endRead = this._currentObject.data.length;
                            }
                            if (endRead >= this._currentObject.data.length || mode >= 3) {
                                break;
                            }
                        }
                    }
                },
                {
                    key: '_setMaterial',
                    value: function _setMaterial() {
                        var _nowMat = new THREE.MeshPhongMaterial({ color: Math.random() * 16777215 });
                        _nowMat.side = THREE.FrontSide;
                        _nowMat.name = this._currentObject.name;
                        var endRead = 0;
                        var find = this._currentObject.data.indexOf(';;', endRead);
                        var line = this._currentObject.data.substr(endRead, find - endRead);
                        var data = this._readLine(line.trim()).split(';');
                        _nowMat.color.r = parseFloat(data[0]);
                        _nowMat.color.g = parseFloat(data[1]);
                        _nowMat.color.b = parseFloat(data[2]);
                        endRead = find + 2;
                        find = this._currentObject.data.indexOf(';', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        _nowMat.shininess = parseFloat(this._readLine(line));
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';;', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data2 = this._readLine(line.trim()).split(';');
                        _nowMat.specular.r = parseFloat(data2[0]);
                        _nowMat.specular.g = parseFloat(data2[1]);
                        _nowMat.specular.b = parseFloat(data2[2]);
                        endRead = find + 2;
                        find = this._currentObject.data.indexOf(';;', endRead);
                        if (find === -1) {
                            find = this._currentObject.data.length;
                        }
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data3 = this._readLine(line.trim()).split(';');
                        _nowMat.emissive.r = parseFloat(data3[0]);
                        _nowMat.emissive.g = parseFloat(data3[1]);
                        _nowMat.emissive.b = parseFloat(data3[2]);
                        var localObject = null;
                        while (true) {
                            if (this._currentObject.children.length > 0) {
                                localObject = this._currentObject.children.shift();
                                if (this.debug) {
                                    console.log('processing ' + localObject.name);
                                }
                                var fileName = localObject.data.substr(1, localObject.data.length - 2);
                                switch (localObject.type) {
                                case 'TextureFilename':
                                    _nowMat.map = this.texloader.load(fileName);
                                    break;
                                case 'BumpMapFilename':
                                    _nowMat.bumpMap = this.texloader.load(fileName);
                                    _nowMat.bumpScale = 0.05;
                                    break;
                                case 'NormalMapFilename':
                                    _nowMat.normalMap = this.texloader.load(fileName);
                                    _nowMat.normalScale = new THREE.Vector2(2, 2);
                                    break;
                                case 'EmissiveMapFilename':
                                    _nowMat.emissiveMap = this.texloader.load(fileName);
                                    break;
                                case 'LightMapFilename':
                                    _nowMat.lightMap = this.texloader.load(fileName);
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                        this._currentGeo.Materials.push(_nowMat);
                    }
                },
                {
                    key: '_setSkinWeights',
                    value: function _setSkinWeights() {
                        var boneInf = new XboneInf();
                        var endRead = 0;
                        var find = this._currentObject.data.indexOf(';', endRead);
                        var line = this._currentObject.data.substr(endRead, find - endRead);
                        endRead = find + 1;
                        boneInf.boneName = line.substr(1, line.length - 2);
                        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;
                        find = this._currentObject.data.indexOf(';', endRead);
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data = this._readLine(line.trim()).split(',');
                        for (var i = 0; i < data.length; i++) {
                            boneInf.Indeces.push(parseInt(data[i]));
                        }
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data2 = this._readLine(line.trim()).split(',');
                        for (var _i = 0; _i < data2.length; _i++) {
                            boneInf.Weights.push(parseFloat(data2[_i]));
                        }
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';', endRead);
                        if (find <= 0) {
                            find = this._currentObject.data.length;
                        }
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data3 = this._readLine(line.trim()).split(',');
                        boneInf.OffsetMatrix = new THREE.Matrix4();
                        this._ParseMatrixData(boneInf.OffsetMatrix, data3);
                        this._currentGeo.BoneInfs.push(boneInf);
                    }
                },
                {
                    key: '_makePutBoneList',
                    value: function _makePutBoneList(_RootName, _bones) {
                        var putting = false;
                        for (var frame in this.HieStack) {
                            if (this.HieStack[frame].name === _RootName || putting) {
                                putting = true;
                                var b = new THREE.Bone();
                                b.name = this.HieStack[frame].name;
                                b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);
                                b.matrixWorld = b.matrix;
                                b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;
                                b.pos = new THREE.Vector3().setFromMatrixPosition(FrameTransformMatrix).toArray();
                                b.rotq = new THREE.Quaternion().setFromRotationMatrix(FrameTransformMatrix).toArray();
                                b.scl = new THREE.Vector3().setFromMatrixScale(FrameTransformMatrix).toArray();
                                if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {
                                    for (var i = 0; i < _bones.length; i++) {
                                        if (this.HieStack[frame].parentName === _bones[i].name) {
                                            _bones[i].add(b);
                                            b.parent = i;
                                            break;
                                        }
                                    }
                                }
                                _bones.push(b);
                            }
                        }
                    }
                },
                {
                    key: '_makeOutputGeometry',
                    value: function _makeOutputGeometry() {
                        var mesh = null;
                        if (this._currentGeo.BoneInfs.length > 0) {
                            var putBones = [];
                            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);
                            for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {
                                var boneIndex = 0;
                                for (var bb = 0; bb < putBones.length; bb++) {
                                    if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {
                                        boneIndex = bb;
                                        putBones[bb].OffsetMatrix = new THREE.Matrix4();
                                        putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);
                                        break;
                                    }
                                }
                                for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {
                                    var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];
                                    var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];
                                    var stride = nowVertexID * 4;
                                    switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {
                                    case 0:
                                        this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride] = nowVal;
                                        break;
                                    case 1:
                                        this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;
                                        break;
                                    case 2:
                                        this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;
                                        break;
                                    case 3:
                                        this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;
                                        break;
                                    }
                                    this._currentGeo.VertexSetedBoneCount[nowVertexID]++;
                                    if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {
                                        console.log('warn! over 4 bone weight! :' + nowVertexID);
                                    }
                                }
                            }
                            for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {
                                this._currentGeo.Materials[sk].skinning = true;
                            }
                            var offsetList = [];
                            for (var _bi = 0; _bi < putBones.length; _bi++) {
                                if (putBones[_bi].OffsetMatrix) {
                                    offsetList.push(putBones[_bi].OffsetMatrix);
                                } else {
                                    offsetList.push(new THREE.Matrix4());
                                }
                            }
                            var bufferGeometry = this._buildGeometry();
                            mesh = new THREE.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);
                            this._initSkeleton(mesh, putBones, offsetList);
                        } else {
                            var _bufferGeometry = this._buildGeometry();
                            mesh = new THREE.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);
                        }
                        mesh.name = this._currentGeo.name;
                        var worldBaseMx = new THREE.Matrix4();
                        var currentMxFrame = this._currentGeo.baseFrame.putBone;
                        if (currentMxFrame && currentMxFrame.parent) {
                            while (true) {
                                currentMxFrame = currentMxFrame.parent;
                                if (currentMxFrame) {
                                    worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);
                                } else {
                                    break;
                                }
                            }
                            mesh.applyMatrix4(worldBaseMx);
                        }
                        this.Meshes.push(mesh);
                    }
                },
                {
                    key: '_initSkeleton',
                    value: function _initSkeleton(mesh, boneList, boneInverses) {
                        var bones = [], bone, gbone;
                        var i, il;
                        for (i = 0, il = boneList.length; i < il; i++) {
                            gbone = boneList[i];
                            bone = new THREE.Bone();
                            bones.push(bone);
                            bone.name = gbone.name;
                            bone.position.fromArray(gbone.pos);
                            bone.quaternion.fromArray(gbone.rotq);
                            if (gbone.scl !== undefined)
                                bone.scale.fromArray(gbone.scl);
                        }
                        for (i = 0, il = boneList.length; i < il; i++) {
                            gbone = boneList[i];
                            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {
                                bones[gbone.parent].add(bones[i]);
                            } else {
                                mesh.add(bones[i]);
                            }
                        }
                        mesh.updateMatrixWorld(true);
                        var skeleton = new THREE.Skeleton(bones, boneInverses);
                        mesh.bind(skeleton, mesh.matrixWorld);
                    }
                },
                {
                    key: '_readAnimationKey',
                    value: function _readAnimationKey() {
                        var endRead = 0;
                        var find = this._currentObject.data.indexOf(';', endRead);
                        var line = this._currentObject.data.substr(endRead, find - endRead);
                        endRead = find + 1;
                        var nowKeyType = parseInt(this._readLine(line));
                        find = this._currentObject.data.indexOf(';', endRead);
                        endRead = find + 1;
                        line = this._currentObject.data.substr(endRead);
                        var data = this._readLine(line.trim()).split(';;,');
                        for (var i = 0; i < data.length; i++) {
                            var data2 = data[i].split(';');
                            var keyInfo = new XKeyFrameInfo();
                            keyInfo.type = nowKeyType;
                            keyInfo.Frame = parseInt(data2[0]);
                            keyInfo.index = this._currentAnimeFrames.keyFrames.length;
                            keyInfo.time = keyInfo.Frame;
                            if (nowKeyType != 4) {
                                var frameFound = false;
                                for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {
                                    if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {
                                        keyInfo = this._currentAnimeFrames.keyFrames[mm];
                                        frameFound = true;
                                        break;
                                    }
                                }
                                var frameValue = data2[2].split(',');
                                switch (nowKeyType) {
                                case 0:
                                    keyInfo.rot = new THREE.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);
                                    break;
                                case 1:
                                    keyInfo.scl = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));
                                    break;
                                case 2:
                                    keyInfo.pos = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));
                                    break;
                                }
                                if (!frameFound) {
                                    this._currentAnimeFrames.keyFrames.push(keyInfo);
                                }
                            } else {
                                keyInfo.matrix = new THREE.Matrix4();
                                this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));
                                this._currentAnimeFrames.keyFrames.push(keyInfo);
                            }
                        }
                    }
                },
                {
                    key: '_makeOutputAnimation',
                    value: function _makeOutputAnimation() {
                        var animationObj = new XAnimationObj(this.options);
                        animationObj.fps = this.animTicksPerSecond;
                        animationObj.name = this._currentAnime.name;
                        animationObj.make(this._currentAnime.AnimeFrames);
                        this.animations.push(animationObj);
                    }
                },
                {
                    key: 'assignAnimation',
                    value: function assignAnimation(_model, _animation) {
                        var model = _model;
                        var animation = _animation;
                        if (!model) {
                            model = this.Meshes[0];
                        }
                        if (!animation) {
                            animation = this.animations[0];
                        }
                        if (!model || !animation) {
                            return null;
                        }
                        var put = {};
                        put.fps = animation.fps;
                        put.name = animation.name;
                        put.length = animation.length;
                        put.hierarchy = [];
                        for (var b = 0; b < model.skeleton.bones.length; b++) {
                            var findAnimation = false;
                            for (var i = 0; i < animation.hierarchy.length; i++) {
                                if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {
                                    findAnimation = true;
                                    var c_key = animation.hierarchy[i].copy();
                                    c_key.parent = -1;
                                    if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {
                                        for (var bb = 0; bb < put.hierarchy.length; bb++) {
                                            if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {
                                                c_key.parent = bb;
                                                c_key.parentName = model.skeleton.bones[b].parent.name;
                                            }
                                        }
                                    }
                                    put.hierarchy.push(c_key);
                                    break;
                                }
                            }
                            if (!findAnimation) {
                                var _c_key = animation.hierarchy[0].copy();
                                _c_key.name = model.skeleton.bones[b].name;
                                _c_key.parent = -1;
                                for (var k = 0; k < _c_key.keys.length; k++) {
                                    if (_c_key.keys[k].pos) {
                                        _c_key.keys[k].pos.set(0, 0, 0);
                                    }
                                    if (_c_key.keys[k].scl) {
                                        _c_key.keys[k].scl.set(1, 1, 1);
                                    }
                                    if (_c_key.keys[k].rot) {
                                        _c_key.keys[k].rot.set(0, 0, 0, 1);
                                    }
                                }
                                put.hierarchy.push(_c_key);
                            }
                        }
                        if (!model.geometry.animations) {
                            model.geometry.animations = [];
                        }
                        model.geometry.animations.push(THREE.AnimationClip.parseAnimation(put, model.skeleton.bones));
                        if (!model.animationMixer) {
                            model.animationMixer = new THREE.AnimationMixer(model);
                        }
                        return put;
                    }
                },
                {
                    key: '_ParseMatrixData',
                    value: function _ParseMatrixData(targetMatrix, data) {
                        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));
                    }
                }
            ]);
            return XLoader;
        }();
        return XLoader;
    }();

    return XLoader;
});
define('skylark-threejs-ex/loaders/DDSLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var DDSLoader = function (manager) {
        THREE.CompressedTextureLoader.call(this, manager);
    };
    DDSLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {
        constructor: DDSLoader,
        parse: function (buffer, loadMipmaps) {
            var dds = {
                mipmaps: [],
                width: 0,
                height: 0,
                format: null,
                mipmapCount: 1
            };
            var DDS_MAGIC = 542327876;
            var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;
            var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;
            var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;
            var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;
            function fourCCToInt32(value) {
                return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);
            }
            function int32ToFourCC(value) {
                return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);
            }
            function loadARGBMip(buffer, dataOffset, width, height) {
                var dataLength = width * height * 4;
                var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);
                var byteArray = new Uint8Array(dataLength);
                var dst = 0;
                var src = 0;
                for (var y = 0; y < height; y++) {
                    for (var x = 0; x < width; x++) {
                        var b = srcBuffer[src];
                        src++;
                        var g = srcBuffer[src];
                        src++;
                        var r = srcBuffer[src];
                        src++;
                        var a = srcBuffer[src];
                        src++;
                        byteArray[dst] = r;
                        dst++;
                        byteArray[dst] = g;
                        dst++;
                        byteArray[dst] = b;
                        dst++;
                        byteArray[dst] = a;
                        dst++;
                    }
                }
                return byteArray;
            }
            var FOURCC_DXT1 = fourCCToInt32('DXT1');
            var FOURCC_DXT3 = fourCCToInt32('DXT3');
            var FOURCC_DXT5 = fourCCToInt32('DXT5');
            var FOURCC_ETC1 = fourCCToInt32('ETC1');
            var headerLengthInt = 31;
            var off_magic = 0;
            var off_size = 1;
            var off_flags = 2;
            var off_height = 3;
            var off_width = 4;
            var off_mipmapCount = 7;
            var off_pfFlags = 20;
            var off_pfFourCC = 21;
            var off_RGBBitCount = 22;
            var off_RBitMask = 23;
            var off_GBitMask = 24;
            var off_BBitMask = 25;
            var off_ABitMask = 26;
            var off_caps = 27;
            var off_caps2 = 28;
            var off_caps3 = 29;
            var off_caps4 = 30;
            var header = new Int32Array(buffer, 0, headerLengthInt);
            if (header[off_magic] !== DDS_MAGIC) {
                console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');
                return dds;
            }
            if (!header[off_pfFlags] & DDPF_FOURCC) {
                console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');
                return dds;
            }
            var blockBytes;
            var fourCC = header[off_pfFourCC];
            var isRGBAUncompressed = false;
            switch (fourCC) {
            case FOURCC_DXT1:
                blockBytes = 8;
                dds.format = THREE.RGB_S3TC_DXT1_Format;
                break;
            case FOURCC_DXT3:
                blockBytes = 16;
                dds.format = THREE.RGBA_S3TC_DXT3_Format;
                break;
            case FOURCC_DXT5:
                blockBytes = 16;
                dds.format = THREE.RGBA_S3TC_DXT5_Format;
                break;
            case FOURCC_ETC1:
                blockBytes = 8;
                dds.format = THREE.RGB_ETC1_Format;
                break;
            default:
                if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {
                    isRGBAUncompressed = true;
                    blockBytes = 64;
                    dds.format = THREE.RGBAFormat;
                } else {
                    console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));
                    return dds;
                }
            }
            dds.mipmapCount = 1;
            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);
            }
            var caps2 = header[off_caps2];
            dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;
            if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {
                console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');
                return dds;
            }
            dds.width = header[off_width];
            dds.height = header[off_height];
            var dataOffset = header[off_size] + 4;
            var faces = dds.isCubemap ? 6 : 1;
            for (var face = 0; face < faces; face++) {
                var width = dds.width;
                var height = dds.height;
                for (var i = 0; i < dds.mipmapCount; i++) {
                    if (isRGBAUncompressed) {
                        var byteArray = loadARGBMip(buffer, dataOffset, width, height);
                        var dataLength = byteArray.length;
                    } else {
                        var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
                        var byteArray = new Uint8Array(buffer, dataOffset, dataLength);
                    }
                    var mipmap = {
                        'data': byteArray,
                        'width': width,
                        'height': height
                    };
                    dds.mipmaps.push(mipmap);
                    dataOffset += dataLength;
                    width = Math.max(width >> 1, 1);
                    height = Math.max(height >> 1, 1);
                }
            }
            return dds;
        }
    });
    return DDSLoader;
});
define('skylark-threejs-ex/loaders/PVRLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PVRLoader = function (manager) {
        THREE.CompressedTextureLoader.call(this, manager);
    };
    PVRLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {
        constructor: PVRLoader,
        parse: function (buffer, loadMipmaps) {
            var headerLengthInt = 13;
            var header = new Uint32Array(buffer, 0, headerLengthInt);
            var pvrDatas = {
                buffer: buffer,
                header: header,
                loadMipmaps: loadMipmaps
            };
            if (header[0] === 55727696) {
                return PVRLoader._parseV3(pvrDatas);
            } else if (header[11] === 559044176) {
                return PVRLoader._parseV2(pvrDatas);
            } else {
                console.error('THREE.PVRLoader: Unknown PVR format.');
            }
        }
    });
    PVRLoader._parseV3 = function (pvrDatas) {
        var header = pvrDatas.header;
        var bpp, format;
        var metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];
        switch (pixelFormat) {
        case 0:
            bpp = 2;
            format = THREE.RGB_PVRTC_2BPPV1_Format;
            break;
        case 1:
            bpp = 2;
            format = THREE.RGBA_PVRTC_2BPPV1_Format;
            break;
        case 2:
            bpp = 4;
            format = THREE.RGB_PVRTC_4BPPV1_Format;
            break;
        case 3:
            bpp = 4;
            format = THREE.RGBA_PVRTC_4BPPV1_Format;
            break;
        default:
            console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);
        }
        pvrDatas.dataPtr = 52 + metaLen;
        pvrDatas.bpp = bpp;
        pvrDatas.format = format;
        pvrDatas.width = width;
        pvrDatas.height = height;
        pvrDatas.numSurfaces = numFaces;
        pvrDatas.numMipmaps = numMipmaps;
        pvrDatas.isCubemap = numFaces === 6;
        return PVRLoader._extract(pvrDatas);
    };
    PVRLoader._parseV2 = function (pvrDatas) {
        var header = pvrDatas.header;
        var headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];
        var TYPE_MASK = 255;
        var PVRTC_2 = 24, PVRTC_4 = 25;
        var formatFlags = flags & TYPE_MASK;
        var bpp, format;
        var _hasAlpha = bitmaskAlpha > 0;
        if (formatFlags === PVRTC_4) {
            format = _hasAlpha ? THREE.RGBA_PVRTC_4BPPV1_Format : THREE.RGB_PVRTC_4BPPV1_Format;
            bpp = 4;
        } else if (formatFlags === PVRTC_2) {
            format = _hasAlpha ? THREE.RGBA_PVRTC_2BPPV1_Format : THREE.RGB_PVRTC_2BPPV1_Format;
            bpp = 2;
        } else {
            console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);
        }
        pvrDatas.dataPtr = headerLength;
        pvrDatas.bpp = bpp;
        pvrDatas.format = format;
        pvrDatas.width = width;
        pvrDatas.height = height;
        pvrDatas.numSurfaces = numSurfs;
        pvrDatas.numMipmaps = numMipmaps + 1;
        pvrDatas.isCubemap = numSurfs === 6;
        return PVRLoader._extract(pvrDatas);
    };
    PVRLoader._extract = function (pvrDatas) {
        var pvr = {
            mipmaps: [],
            width: pvrDatas.width,
            height: pvrDatas.height,
            format: pvrDatas.format,
            mipmapCount: pvrDatas.numMipmaps,
            isCubemap: pvrDatas.isCubemap
        };
        var buffer = pvrDatas.buffer;
        var dataOffset = pvrDatas.dataPtr, bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;
        if (bpp === 2) {
            blockWidth = 8;
            blockHeight = 4;
        } else {
            blockWidth = 4;
            blockHeight = 4;
        }
        blockSize = blockWidth * blockHeight * bpp / 8;
        pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;
        var mipLevel = 0;
        while (mipLevel < pvrDatas.numMipmaps) {
            var sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;
            widthBlocks = sWidth / blockWidth;
            heightBlocks = sHeight / blockHeight;
            if (widthBlocks < 2)
                widthBlocks = 2;
            if (heightBlocks < 2)
                heightBlocks = 2;
            dataSize = widthBlocks * heightBlocks * blockSize;
            for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {
                var byteArray = new Uint8Array(buffer, dataOffset, dataSize);
                var mipmap = {
                    data: byteArray,
                    width: sWidth,
                    height: sHeight
                };
                pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;
                dataOffset += dataSize;
            }
            mipLevel++;
        }
        return pvr;
    };
    return PVRLoader;
});
define('skylark-threejs-ex/loaders/KTXLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var KTXLoader = function (manager) {
        THREE.CompressedTextureLoader.call(this, manager);
    };
    KTXLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {
        constructor: KTXLoader,
        parse: function (buffer, loadMipmaps) {
            var ktx = new KhronosTextureContainer(buffer, 1);
            return {
                mipmaps: ktx.mipmaps(loadMipmaps),
                width: ktx.pixelWidth,
                height: ktx.pixelHeight,
                format: ktx.glInternalFormat,
                isCubemap: ktx.numberOfFaces === 6,
                mipmapCount: ktx.numberOfMipmapLevels
            };
        }
    });
    var KhronosTextureContainer = function () {
        function KhronosTextureContainer(arrayBuffer, facesExpected) {
            this.arrayBuffer = arrayBuffer;
            var identifier = new Uint8Array(this.arrayBuffer, 0, 12);
            if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {
                console.error('texture missing KTX identifier');
                return;
            }
            var dataSize = Uint32Array.BYTES_PER_ELEMENT;
            var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);
            var endianness = headerDataView.getUint32(0, true);
            var littleEndian = endianness === 67305985;
            this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);
            this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);
            this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);
            this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);
            this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);
            this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);
            this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);
            this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);
            this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);
            this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);
            this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);
            this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);
            if (this.glType !== 0) {
                console.warn('only compressed formats currently supported');
                return;
            } else {
                this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);
            }
            if (this.pixelHeight === 0 || this.pixelDepth !== 0) {
                console.warn('only 2D textures currently supported');
                return;
            }
            if (this.numberOfArrayElements !== 0) {
                console.warn('texture arrays not currently supported');
                return;
            }
            if (this.numberOfFaces !== facesExpected) {
                console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);
                return;
            }
            this.loadType = KhronosTextureContainer.COMPRESSED_2D;
        }
        KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {
            var mipmaps = [];
            var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;
            var width = this.pixelWidth;
            var height = this.pixelHeight;
            var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;
            for (var level = 0; level < mipmapCount; level++) {
                var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];
                dataOffset += 4;
                for (var face = 0; face < this.numberOfFaces; face++) {
                    var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);
                    mipmaps.push({
                        'data': byteArray,
                        'width': width,
                        'height': height
                    });
                    dataOffset += imageSize;
                    dataOffset += 3 - (imageSize + 3) % 4;
                }
                width = Math.max(1, width * 0.5);
                height = Math.max(1, height * 0.5);
            }
            return mipmaps;
        };
        KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4;
        KhronosTextureContainer.COMPRESSED_2D = 0;
        KhronosTextureContainer.COMPRESSED_3D = 1;
        KhronosTextureContainer.TEX_2D = 2;
        KhronosTextureContainer.TEX_3D = 3;
        return KhronosTextureContainer;
    }();
    return KTXLoader;
});
define('skylark-threejs-ex/modifiers/SimplifyModifier',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SimplifyModifier = function () {
    };
    (function () {
        var cb = new THREE.Vector3(), ab = new THREE.Vector3();
        function pushIfUnique(array, object) {
            if (array.indexOf(object) === -1)
                array.push(object);
        }
        function removeFromArray(array, object) {
            var k = array.indexOf(object);
            if (k > -1)
                array.splice(k, 1);
        }
        function computeEdgeCollapseCost(u, v) {
            var edgelength = v.position.distanceTo(u.position);
            var curvature = 0;
            var sideFaces = [];
            var i, il = u.faces.length, face, sideFace;
            for (i = 0; i < il; i++) {
                face = u.faces[i];
                if (face.hasVertex(v)) {
                    sideFaces.push(face);
                }
            }
            for (i = 0; i < il; i++) {
                var minCurvature = 1;
                face = u.faces[i];
                for (var j = 0; j < sideFaces.length; j++) {
                    sideFace = sideFaces[j];
                    var dotProd = face.normal.dot(sideFace.normal);
                    minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);
                }
                curvature = Math.max(curvature, minCurvature);
            }
            var borders = 0;
            if (sideFaces.length < 2) {
                curvature = 1;
            }
            var amt = edgelength * curvature + borders;
            return amt;
        }
        function computeEdgeCostAtVertex(v) {
            if (v.neighbors.length === 0) {
                v.collapseNeighbor = null;
                v.collapseCost = -0.01;
                return;
            }
            v.collapseCost = 100000;
            v.collapseNeighbor = null;
            for (var i = 0; i < v.neighbors.length; i++) {
                var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);
                if (!v.collapseNeighbor) {
                    v.collapseNeighbor = v.neighbors[i];
                    v.collapseCost = collapseCost;
                    v.minCost = collapseCost;
                    v.totalCost = 0;
                    v.costCount = 0;
                }
                v.costCount++;
                v.totalCost += collapseCost;
                if (collapseCost < v.minCost) {
                    v.collapseNeighbor = v.neighbors[i];
                    v.minCost = collapseCost;
                }
            }
            v.collapseCost = v.totalCost / v.costCount;
        }
        function removeVertex(v, vertices) {
            console.assert(v.faces.length === 0);
            while (v.neighbors.length) {
                var n = v.neighbors.pop();
                removeFromArray(n.neighbors, v);
            }
            removeFromArray(vertices, v);
        }
        function removeFace(f, faces) {
            removeFromArray(faces, f);
            if (f.v1)
                removeFromArray(f.v1.faces, f);
            if (f.v2)
                removeFromArray(f.v2.faces, f);
            if (f.v3)
                removeFromArray(f.v3.faces, f);
            var vs = [
                f.v1,
                f.v2,
                f.v3
            ];
            var v1, v2;
            for (var i = 0; i < 3; i++) {
                v1 = vs[i];
                v2 = vs[(i + 1) % 3];
                if (!v1 || !v2)
                    continue;
                v1.removeIfNonNeighbor(v2);
                v2.removeIfNonNeighbor(v1);
            }
        }
        function collapse(vertices, faces, u, v) {
            if (!v) {
                removeVertex(u, vertices);
                return;
            }
            var i;
            var tmpVertices = [];
            for (i = 0; i < u.neighbors.length; i++) {
                tmpVertices.push(u.neighbors[i]);
            }
            for (i = u.faces.length - 1; i >= 0; i--) {
                if (u.faces[i].hasVertex(v)) {
                    removeFace(u.faces[i], faces);
                }
            }
            for (i = u.faces.length - 1; i >= 0; i--) {
                u.faces[i].replaceVertex(u, v);
            }
            removeVertex(u, vertices);
            for (i = 0; i < tmpVertices.length; i++) {
                computeEdgeCostAtVertex(tmpVertices[i]);
            }
        }
        function minimumCostEdge(vertices) {
            var least = vertices[0];
            for (var i = 0; i < vertices.length; i++) {
                if (vertices[i].collapseCost < least.collapseCost) {
                    least = vertices[i];
                }
            }
            return least;
        }
        function Triangle(v1, v2, v3, a, b, c) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.v1 = v1;
            this.v2 = v2;
            this.v3 = v3;
            this.normal = new THREE.Vector3();
            this.computeNormal();
            v1.faces.push(this);
            v1.addUniqueNeighbor(v2);
            v1.addUniqueNeighbor(v3);
            v2.faces.push(this);
            v2.addUniqueNeighbor(v1);
            v2.addUniqueNeighbor(v3);
            v3.faces.push(this);
            v3.addUniqueNeighbor(v1);
            v3.addUniqueNeighbor(v2);
        }
        Triangle.prototype.computeNormal = function () {
            var vA = this.v1.position;
            var vB = this.v2.position;
            var vC = this.v3.position;
            cb.subVectors(vC, vB);
            ab.subVectors(vA, vB);
            cb.cross(ab).normalize();
            this.normal.copy(cb);
        };
        Triangle.prototype.hasVertex = function (v) {
            return v === this.v1 || v === this.v2 || v === this.v3;
        };
        Triangle.prototype.replaceVertex = function (oldv, newv) {
            if (oldv === this.v1)
                this.v1 = newv;
            else if (oldv === this.v2)
                this.v2 = newv;
            else if (oldv === this.v3)
                this.v3 = newv;
            removeFromArray(oldv.faces, this);
            newv.faces.push(this);
            oldv.removeIfNonNeighbor(this.v1);
            this.v1.removeIfNonNeighbor(oldv);
            oldv.removeIfNonNeighbor(this.v2);
            this.v2.removeIfNonNeighbor(oldv);
            oldv.removeIfNonNeighbor(this.v3);
            this.v3.removeIfNonNeighbor(oldv);
            this.v1.addUniqueNeighbor(this.v2);
            this.v1.addUniqueNeighbor(this.v3);
            this.v2.addUniqueNeighbor(this.v1);
            this.v2.addUniqueNeighbor(this.v3);
            this.v3.addUniqueNeighbor(this.v1);
            this.v3.addUniqueNeighbor(this.v2);
            this.computeNormal();
        };
        function Vertex(v, id) {
            this.position = v;
            this.id = id;
            this.faces = [];
            this.neighbors = [];
            this.collapseCost = 0;
            this.collapseNeighbor = null;
        }
        Vertex.prototype.addUniqueNeighbor = function (vertex) {
            pushIfUnique(this.neighbors, vertex);
        };
        Vertex.prototype.removeIfNonNeighbor = function (n) {
            var neighbors = this.neighbors;
            var faces = this.faces;
            var offset = neighbors.indexOf(n);
            if (offset === -1)
                return;
            for (var i = 0; i < faces.length; i++) {
                if (faces[i].hasVertex(n))
                    return;
            }
            neighbors.splice(offset, 1);
        };
        SimplifyModifier.prototype.modify = function (geometry, count) {
            if (geometry.isBufferGeometry) {
                geometry = new THREE.Geometry().fromBufferGeometry(geometry);
            }
            geometry.mergeVertices();
            var oldVertices = geometry.vertices;
            var oldFaces = geometry.faces;
            var vertices = [];
            var faces = [];
            var i, il;
            for (i = 0, il = oldVertices.length; i < il; i++) {
                var vertex = new Vertex(oldVertices[i], i);
                vertices.push(vertex);
            }
            for (i = 0, il = oldFaces.length; i < il; i++) {
                var face = oldFaces[i];
                var a = face.a;
                var b = face.b;
                var c = face.c;
                var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);
                faces.push(triangle);
            }
            for (i = 0, il = vertices.length; i < il; i++) {
                computeEdgeCostAtVertex(vertices[i]);
            }
            var nextVertex;
            var z = count;
            while (z--) {
                nextVertex = minimumCostEdge(vertices);
                if (!nextVertex) {
                    console.log('THREE.SimplifyModifier: No next vertex');
                    break;
                }
                collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);
            }
            var simplifiedGeometry = new THREE.BufferGeometry();
            var position = [];
            var index = [];
            for (i = 0; i < vertices.length; i++) {
                var vertex = vertices[i].position;
                position.push(vertex.x, vertex.y, vertex.z);
            }
            for (i = 0; i < faces.length; i++) {
                var face = faces[i];
                var a = vertices.indexOf(face.v1);
                var b = vertices.indexOf(face.v2);
                var c = vertices.indexOf(face.v3);
                index.push(a, b, c);
            }
            simplifiedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
            simplifiedGeometry.setIndex(index);
            return simplifiedGeometry;
        };
    }());
    return SimplifyModifier;
});
define('skylark-threejs-ex/modifiers/SubdivisionModifier',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SubdivisionModifier = function (subdivisions) {
        this.subdivisions = subdivisions === undefined ? 1 : subdivisions;
    };
    SubdivisionModifier.prototype.modify = function (geometry) {
        if (geometry.isBufferGeometry) {
            geometry = new THREE.Geometry().fromBufferGeometry(geometry);
        } else {
            geometry = geometry.clone();
        }
        geometry.mergeVertices();
        var repeats = this.subdivisions;
        while (repeats-- > 0) {
            this.smooth(geometry);
        }
        geometry.computeFaceNormals();
        geometry.computeVertexNormals();
        return geometry;
    };
    (function () {
        var ABC = [
            'a',
            'b',
            'c'
        ];
        function getEdge(a, b, map) {
            var vertexIndexA = Math.min(a, b);
            var vertexIndexB = Math.max(a, b);
            var key = vertexIndexA + '_' + vertexIndexB;
            return map[key];
        }
        function processEdge(a, b, vertices, map, face, metaVertices) {
            var vertexIndexA = Math.min(a, b);
            var vertexIndexB = Math.max(a, b);
            var key = vertexIndexA + '_' + vertexIndexB;
            var edge;
            if (key in map) {
                edge = map[key];
            } else {
                var vertexA = vertices[vertexIndexA];
                var vertexB = vertices[vertexIndexB];
                edge = {
                    a: vertexA,
                    b: vertexB,
                    newEdge: null,
                    faces: []
                };
                map[key] = edge;
            }
            edge.faces.push(face);
            metaVertices[a].edges.push(edge);
            metaVertices[b].edges.push(edge);
        }
        function generateLookups(vertices, faces, metaVertices, edges) {
            var i, il, face;
            for (i = 0, il = vertices.length; i < il; i++) {
                metaVertices[i] = { edges: [] };
            }
            for (i = 0, il = faces.length; i < il; i++) {
                face = faces[i];
                processEdge(face.a, face.b, vertices, edges, face, metaVertices);
                processEdge(face.b, face.c, vertices, edges, face, metaVertices);
                processEdge(face.c, face.a, vertices, edges, face, metaVertices);
            }
        }
        function newFace(newFaces, a, b, c, materialIndex) {
            newFaces.push(new THREE.Face3(a, b, c, undefined, undefined, materialIndex));
        }
        function midpoint(a, b) {
            return Math.abs(b - a) / 2 + Math.min(a, b);
        }
        function newUv(newUvs, a, b, c) {
            newUvs.push([
                THREE.clone(),
                b.clone(),
                c.clone()
            ]);
        }
        SubdivisionModifier.prototype.smooth = function (geometry) {
            var tmp = new THREE.Vector3();
            var oldVertices, oldFaces, oldUvs;
            var newVertices, newFaces, newUVs = [];
            var n, i, il, j, k;
            var metaVertices, sourceEdges;
            var sourceEdges, newEdgeVertices, newSourceVertices;
            oldVertices = geometry.vertices;
            oldFaces = geometry.faces;
            oldUvs = geometry.faceVertexUvs;
            var hasUvs = oldUvs[0] !== undefined && oldUvs[0].length > 0;
            if (hasUvs) {
                for (var j = 0; j < oldUvs.length; j++) {
                    newUVs.push([]);
                }
            }
            metaVertices = new Array(oldVertices.length);
            sourceEdges = {};
            generateLookups(oldVertices, oldFaces, metaVertices, sourceEdges);
            newEdgeVertices = [];
            var other, currentEdge, newEdge, face;
            var edgeVertexWeight, adjacentVertexWeight, connectedFaces;
            for (i in sourceEdges) {
                currentEdge = sourceEdges[i];
                newEdge = new THREE.Vector3();
                edgeVertexWeight = 3 / 8;
                adjacentVertexWeight = 1 / 8;
                connectedFaces = currentEdge.faces.length;
                if (connectedFaces != 2) {
                    edgeVertexWeight = 0.5;
                    adjacentVertexWeight = 0;
                    if (connectedFaces != 1) {
                    }
                }
                newEdge.addVectors(currentEdge.a, currentEdge.b).multiplyScalar(edgeVertexWeight);
                tmp.set(0, 0, 0);
                for (j = 0; j < connectedFaces; j++) {
                    face = currentEdge.faces[j];
                    for (k = 0; k < 3; k++) {
                        other = oldVertices[face[ABC[k]]];
                        if (other !== currentEdge.a && other !== currentEdge.b)
                            break;
                    }
                    tmp.add(other);
                }
                tmp.multiplyScalar(adjacentVertexWeight);
                newEdge.add(tmp);
                currentEdge.newEdge = newEdgeVertices.length;
                newEdgeVertices.push(newEdge);
            }
            var beta, sourceVertexWeight, connectingVertexWeight;
            var connectingEdge, connectingEdges, oldVertex, newSourceVertex;
            newSourceVertices = [];
            for (i = 0, il = oldVertices.length; i < il; i++) {
                oldVertex = oldVertices[i];
                connectingEdges = metaVertices[i].edges;
                n = connectingEdges.length;
                if (n == 3) {
                    beta = 3 / 16;
                } else if (n > 3) {
                    beta = 3 / (8 * n);
                }
                sourceVertexWeight = 1 - n * beta;
                connectingVertexWeight = beta;
                if (n <= 2) {
                    if (n == 2) {
                        sourceVertexWeight = 3 / 4;
                        connectingVertexWeight = 1 / 8;
                    } else if (n == 1) {
                    } else if (n == 0) {
                    }
                }
                newSourceVertex = oldVertex.clone().multiplyScalar(sourceVertexWeight);
                tmp.set(0, 0, 0);
                for (j = 0; j < n; j++) {
                    connectingEdge = connectingEdges[j];
                    other = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;
                    tmp.add(other);
                }
                tmp.multiplyScalar(connectingVertexWeight);
                newSourceVertex.add(tmp);
                newSourceVertices.push(newSourceVertex);
            }
            newVertices = newSourceVertices.concat(newEdgeVertices);
            var sl = newSourceVertices.length, edge1, edge2, edge3;
            newFaces = [];
            var uv, x0, x1, x2;
            var x3 = new THREE.Vector2();
            var x4 = new THREE.Vector2();
            var x5 = new THREE.Vector2();
            for (i = 0, il = oldFaces.length; i < il; i++) {
                face = oldFaces[i];
                edge1 = getEdge(face.a, face.b, sourceEdges).newEdge + sl;
                edge2 = getEdge(face.b, face.c, sourceEdges).newEdge + sl;
                edge3 = getEdge(face.c, face.a, sourceEdges).newEdge + sl;
                newFace(newFaces, edge1, edge2, edge3, face.materialIndex);
                newFace(newFaces, face.a, edge1, edge3, face.materialIndex);
                newFace(newFaces, face.b, edge2, edge1, face.materialIndex);
                newFace(newFaces, face.c, edge3, edge2, face.materialIndex);
                if (hasUvs) {
                    for (var j = 0; j < oldUvs.length; j++) {
                        uv = oldUvs[j][i];
                        x0 = uv[0];
                        x1 = uv[1];
                        x2 = uv[2];
                        x3.set(midpoint(x0.x, x1.x), midpoint(x0.y, x1.y));
                        x4.set(midpoint(x1.x, x2.x), midpoint(x1.y, x2.y));
                        x5.set(midpoint(x0.x, x2.x), midpoint(x0.y, x2.y));
                        newUv(newUVs[j], x3, x4, x5);
                        newUv(newUVs[j], x0, x3, x5);
                        newUv(newUVs[j], x1, x4, x3);
                        newUv(newUVs[j], x2, x5, x4);
                    }
                }
            }
            geometry.vertices = newVertices;
            geometry.faces = newFaces;
            if (hasUvs)
                geometry.faceVertexUvs = newUVs;
        };
    }());
    return SubdivisionModifier;
});
define('skylark-threejs-ex/exporters/ColladaExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var ColladaExporter = function () {
    };
    ColladaExporter.prototype = {
        constructor: ColladaExporter,
        parse: function (object, onDone, options) {
            options = options || {};
            options = Object.assign({
                version: '1.4.1',
                author: null,
                textureDirectory: ''
            }, options);
            if (options.textureDirectory !== '') {
                options.textureDirectory = `${ options.textureDirectory }/`.replace(/\\/g, '/').replace(/\/+/g, '/');
            }
            var version = options.version;
            if (version !== '1.4.1' && version !== '1.5.0') {
                console.warn(`ColladaExporter : Version ${ version } not supported for export. Only 1.4.1 and 1.5.0.`);
                return null;
            }
            function format(urdf) {
                var IS_END_TAG = /^<\//;
                var IS_SELF_CLOSING = /(\?>$)|(\/>$)/;
                var HAS_TEXT = /<[^>]+>[^<]*<\/[^<]+>/;
                var pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';
                var tagnum = 0;
                return urdf.match(/(<[^>]+>[^<]+<\/[^<]+>)|(<[^>]+>)/g).map(tag => {
                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {
                        tagnum--;
                    }
                    var res = `${ pad('  ', tagnum) }${ tag }`;
                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {
                        tagnum++;
                    }
                    return res;
                }).join('\n');
            }
            function base64ToBuffer(str) {
                var b = atob(str);
                var buf = new Uint8Array(b.length);
                for (var i = 0, l = buf.length; i < l; i++) {
                    buf[i] = b.charCodeAt(i);
                }
                return buf;
            }
            var canvas, ctx;
            function imageToData(image, ext) {
                canvas = canvas || document.createElement('canvas');
                ctx = ctx || canvas.getContext('2d');
                canvas.width = image.naturalWidth;
                canvas.height = image.naturalHeight;
                ctx.drawImage(image, 0, 0);
                var base64data = canvas.toDataURL(`image/${ ext }`, 1).replace(/^data:image\/(png|jpg);base64,/, '');
                return base64ToBuffer(base64data);
            }
            var getFuncs = [
                'getX',
                'getY',
                'getZ',
                'getW'
            ];
            function attrBufferToArray(attr) {
                if (attr.isInterleavedBufferAttribute) {
                    var arr = new attr.array.constructor(attr.count * attr.itemSize);
                    var size = attr.itemSize;
                    for (var i = 0, l = attr.count; i < l; i++) {
                        for (var j = 0; j < size; j++) {
                            arr[i * size + j] = attr[getFuncs[j]](i);
                        }
                    }
                    return arr;
                } else {
                    return attr.array;
                }
            }
            function subArray(arr, st, ct) {
                if (Array.isArray(arr))
                    return arr.slice(st, st + ct);
                else
                    return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);
            }
            function getAttribute(attr, name, params, type) {
                var array = attrBufferToArray(attr);
                var res = `<source id="${ name }">` + `<float_array id="${ name }-array" count="${ array.length }">` + array.join(' ') + '</float_array>' + '<technique_common>' + `<accessor source="#${ name }-array" count="${ Math.floor(array.length / attr.itemSize) }" stride="${ attr.itemSize }">` + params.map(n => `<param name="${ n }" type="${ type }" />`).join('') + '</accessor>' + '</technique_common>' + '</source>';
                return res;
            }
            var transMat;
            function getTransform(o) {
                o.updateMatrix();
                transMat = transMat || new THREE.Matrix4();
                transMat.copy(o.matrix);
                transMat.transpose();
                return `<matrix>${ transMat.toArray().join(' ') }</matrix>`;
            }
            function processGeometry(g) {
                var info = geometryInfo.get(g);
                if (!info) {
                    var bufferGeometry = g;
                    if (bufferGeometry instanceof THREE.Geometry) {
                        bufferGeometry = new THREE.BufferGeometry().fromGeometry(bufferGeometry);
                    }
                    var meshid = `Mesh${ libraryGeometries.length + 1 }`;
                    var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;
                    var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{
                            start: 0,
                            count: indexCount,
                            materialIndex: 0
                        }];
                    var gname = g.name ? ` name="${ g.name }"` : '';
                    var gnode = `<geometry id="${ meshid }"${ gname }><mesh>`;
                    var posName = `${ meshid }-position`;
                    var vertName = `${ meshid }-vertices`;
                    gnode += getAttribute(bufferGeometry.attributes.position, posName, [
                        'X',
                        'Y',
                        'Z'
                    ], 'float');
                    gnode += `<vertices id="${ vertName }"><input semantic="POSITION" source="#${ posName }" /></vertices>`;
                    var triangleInputs = `<input semantic="VERTEX" source="#${ vertName }" offset="0" />`;
                    if ('normal' in bufferGeometry.attributes) {
                        var normName = `${ meshid }-normal`;
                        gnode += getAttribute(bufferGeometry.attributes.normal, normName, [
                            'X',
                            'Y',
                            'Z'
                        ], 'float');
                        triangleInputs += `<input semantic="NORMAL" source="#${ normName }" offset="0" />`;
                    }
                    if ('uv' in bufferGeometry.attributes) {
                        var uvName = `${ meshid }-texcoord`;
                        gnode += getAttribute(bufferGeometry.attributes.uv, uvName, [
                            'S',
                            'T'
                        ], 'float');
                        triangleInputs += `<input semantic="TEXCOORD" source="#${ uvName }" offset="0" set="0" />`;
                    }
                    if ('color' in bufferGeometry.attributes) {
                        var colName = `${ meshid }-color`;
                        gnode += getAttribute(bufferGeometry.attributes.color, colName, [
                            'X',
                            'Y',
                            'Z'
                        ], 'uint8');
                        triangleInputs += `<input semantic="COLOR" source="#${ colName }" offset="0" />`;
                    }
                    var indexArray = null;
                    if (bufferGeometry.index) {
                        indexArray = attrBufferToArray(bufferGeometry.index);
                    } else {
                        indexArray = new Array(indexCount);
                        for (var i = 0, l = indexArray.length; i < l; i++)
                            indexArray[i] = i;
                    }
                    for (var i = 0, l = groups.length; i < l; i++) {
                        var group = groups[i];
                        var subarr = subArray(indexArray, group.start, group.count);
                        var polycount = subarr.length / 3;
                        gnode += `<triangles material="MESH_MATERIAL_${ group.materialIndex }" count="${ polycount }">`;
                        gnode += triangleInputs;
                        gnode += `<p>${ subarr.join(' ') }</p>`;
                        gnode += '</triangles>';
                    }
                    gnode += `</mesh></geometry>`;
                    libraryGeometries.push(gnode);
                    info = {
                        meshid: meshid,
                        bufferGeometry: bufferGeometry
                    };
                    geometryInfo.set(g, info);
                }
                return info;
            }
            function processTexture(tex) {
                var texid = imageMap.get(tex);
                if (texid == null) {
                    texid = `image-${ libraryImages.length + 1 }`;
                    var ext = 'png';
                    var name = tex.name || texid;
                    var imageNode = `<image id="${ texid }" name="${ name }">`;
                    if (version === '1.5.0') {
                        imageNode += `<init_from><ref>${ options.textureDirectory }${ name }.${ ext }</ref></init_from>`;
                    } else {
                        imageNode += `<init_from>${ options.textureDirectory }${ name }.${ ext }</init_from>`;
                    }
                    imageNode += '</image>';
                    libraryImages.push(imageNode);
                    imageMap.set(tex, texid);
                    textures.push({
                        directory: options.textureDirectory,
                        name,
                        ext,
                        data: imageToData(tex.image, ext),
                        original: tex
                    });
                }
                return texid;
            }
            function processMaterial(m) {
                var matid = materialMap.get(m);
                if (matid == null) {
                    matid = `Mat${ libraryEffects.length + 1 }`;
                    var type = 'phong';
                    if (m instanceof THREE.MeshLambertMaterial) {
                        type = 'lambert';
                    } else if (m instanceof THREE.MeshBasicMaterial) {
                        type = 'constant';
                        if (m.map !== null) {
                            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');
                        }
                    }
                    var emissive = m.emissive ? m.emissive : new THREE.Color(0, 0, 0);
                    var diffuse = m.color ? m.color : new THREE.Color(0, 0, 0);
                    var specular = m.specular ? m.specular : new THREE.Color(1, 1, 1);
                    var shininess = m.shininess || 0;
                    var reflectivity = m.reflectivity || 0;
                    var transparencyNode = '';
                    if (m.transparent === true) {
                        transparencyNode += `<transparent>` + (m.map ? `<texture texture="diffuse-sampler"></texture>` : '<float>1</float>') + '</transparent>';
                        if (m.opacity < 1) {
                            transparencyNode += `<transparency><float>${ m.opacity }</float></transparency>`;
                        }
                    }
                    var techniqueNode = `<technique sid="common"><${ type }>` + '<emission>' + (m.emissiveMap ? '<texture texture="emissive-sampler" texcoord="TEXCOORD" />' : `<color sid="emission">${ emissive.r } ${ emissive.g } ${ emissive.b } 1</color>`) + '</emission>' + (type !== 'constant' ? '<diffuse>' + (m.map ? '<texture texture="diffuse-sampler" texcoord="TEXCOORD" />' : `<color sid="diffuse">${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color>`) + '</diffuse>' : '') + (type !== 'constant' ? '<bump>' + (m.normalMap ? '<texture texture="bump-sampler" texcoord="TEXCOORD" />' : '') + '</bump>' : '') + (type === 'phong' ? `<specular><color sid="specular">${ specular.r } ${ specular.g } ${ specular.b } 1</color></specular>` + '<shininess>' + (m.specularMap ? '<texture texture="specular-sampler" texcoord="TEXCOORD" />' : `<float sid="shininess">${ shininess }</float>`) + '</shininess>' : '') + `<reflective><color>${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color></reflective>` + `<reflectivity><float>${ reflectivity }</float></reflectivity>` + transparencyNode + `</${ type }></technique>`;
                    var effectnode = `<effect id="${ matid }-effect">` + '<profile_COMMON>' + (m.map ? '<newparam sid="diffuse-surface"><surface type="2D">' + `<init_from>${ processTexture(m.map) }</init_from>` + '</surface></newparam>' + '<newparam sid="diffuse-sampler"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>' : '') + (m.specularMap ? '<newparam sid="specular-surface"><surface type="2D">' + `<init_from>${ processTexture(m.specularMap) }</init_from>` + '</surface></newparam>' + '<newparam sid="specular-sampler"><sampler2D><source>specular-surface</source></sampler2D></newparam>' : '') + (m.emissiveMap ? '<newparam sid="emissive-surface"><surface type="2D">' + `<init_from>${ processTexture(m.emissiveMap) }</init_from>` + '</surface></newparam>' + '<newparam sid="emissive-sampler"><sampler2D><source>emissive-surface</source></sampler2D></newparam>' : '') + (m.normalMap ? '<newparam sid="bump-surface"><surface type="2D">' + `<init_from>${ processTexture(m.normalMap) }</init_from>` + '</surface></newparam>' + '<newparam sid="bump-sampler"><sampler2D><source>bump-surface</source></sampler2D></newparam>' : '') + techniqueNode + (m.side === THREE.DoubleSide ? `<extra><technique profile="THREEJS"><double_sided sid="double_sided" type="int">1</double_sided></technique></extra>` : '') + '</profile_COMMON>' + '</effect>';
                    var materialName = m.name ? ` name="${ m.name }"` : '';
                    var materialNode = `<material id="${ matid }"${ materialName }><instance_effect url="#${ matid }-effect" /></material>`;
                    libraryMaterials.push(materialNode);
                    libraryEffects.push(effectnode);
                    materialMap.set(m, matid);
                }
                return matid;
            }
            function processObject(o) {
                var node = `<node name="${ o.name }">`;
                node += getTransform(o);
                if (o instanceof THREE.Mesh && o.geometry != null) {
                    var geomInfo = processGeometry(o.geometry);
                    var meshid = geomInfo.meshid;
                    var geometry = geomInfo.bufferGeometry;
                    var matids = null;
                    var matidsArray = [];
                    var mat = o.material || new THREE.MeshBasicMaterial();
                    var materials = Array.isArray(mat) ? mat : [mat];
                    if (geometry.groups.length > materials.length) {
                        matidsArray = new Array(geometry.groups.length);
                    } else {
                        matidsArray = new Array(materials.length);
                    }
                    matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));
                    node += `<instance_geometry url="#${ meshid }">` + (matids != null ? '<bind_material><technique_common>' + matids.map((id, i) => `<instance_material symbol="MESH_MATERIAL_${ i }" target="#${ id }" >` + '<bind_vertex_input semantic="TEXCOORD" input_semantic="TEXCOORD" input_set="0" />' + '</instance_material>').join('') + '</technique_common></bind_material>' : '') + '</instance_geometry>';
                }
                o.children.forEach(c => node += processObject(c));
                node += '</node>';
                return node;
            }
            var geometryInfo = new WeakMap();
            var materialMap = new WeakMap();
            var imageMap = new WeakMap();
            var textures = [];
            var libraryImages = [];
            var libraryGeometries = [];
            var libraryEffects = [];
            var libraryMaterials = [];
            var libraryVisualScenes = processObject(object);
            var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';
            var dae = '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>' + `<COLLADA xmlns="${ specLink }" version="${ version }">` + '<asset>' + ('<contributor>' + '<authoring_tool>three.js Collada Exporter</authoring_tool>' + (options.author !== null ? `<author>${ options.author }</author>` : '') + '</contributor>' + `<created>${ new Date().toISOString() }</created>` + `<modified>${ new Date().toISOString() }</modified>` + '<up_axis>Y_UP</up_axis>') + '</asset>';
            dae += `<library_images>${ libraryImages.join('') }</library_images>`;
            dae += `<library_effects>${ libraryEffects.join('') }</library_effects>`;
            dae += `<library_materials>${ libraryMaterials.join('') }</library_materials>`;
            dae += `<library_geometries>${ libraryGeometries.join('') }</library_geometries>`;
            dae += `<library_visual_scenes><visual_scene id="Scene" name="scene">${ libraryVisualScenes }</visual_scene></library_visual_scenes>`;
            dae += '<scene><instance_visual_scene url="#Scene"/></scene>';
            dae += '</COLLADA>';
            var res = {
                data: format(dae),
                textures
            };
            if (typeof onDone === 'function') {
                requestAnimationFrame(() => onDone(res));
            }
            return res;
        }
    };
    return ColladaExporter;
});
define('skylark-threejs-ex/exporters/DRACOExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var DRACOExporter = function () {
    };
    DRACOExporter.prototype = {
        constructor: DRACOExporter,
        parse: function (geometry, options) {
            if (DracoEncoderModule === undefined) {
                throw new Error('THREE.DRACOExporter: required the draco_decoder to work.');
            }
            if (options === undefined) {
                options = {
                    decodeSpeed: 5,
                    encodeSpeed: 5,
                    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,
                    quantization: [
                        16,
                        8,
                        8,
                        8,
                        8
                    ],
                    exportUvs: true,
                    exportNormals: true,
                    exportColor: false
                };
            }
            var dracoEncoder = DracoEncoderModule();
            var encoder = new dracoEncoder.Encoder();
            var builder = new dracoEncoder.MeshBuilder();
            var mesh = new dracoEncoder.Mesh();
            if (geometry.isGeometry === true) {
                var bufferGeometry = new THREE.BufferGeometry();
                bufferGeometry.fromGeometry(geometry);
                geometry = bufferGeometry;
            }
            if (geometry.isBufferGeometry !== true) {
                throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or BufferGeometry instance.');
            }
            var vertices = geometry.getAttribute('position');
            builder.AddFloatAttributeToMesh(mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);
            var faces = geometry.getIndex();
            if (faces !== null) {
                builder.AddFacesToMesh(mesh, faces.count, faces.array);
            } else {
                var faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);
                for (var i = 0; i < faces.length; i++) {
                    faces[i] = i;
                }
                builder.AddFacesToMesh(mesh, vertices.count, faces);
            }
            if (options.exportNormals === true) {
                var normals = geometry.getAttribute('normal');
                if (normals !== undefined) {
                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);
                }
            }
            if (options.exportUvs === true) {
                var uvs = geometry.getAttribute('uv');
                if (uvs !== undefined) {
                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);
                }
            }
            if (options.exportColor === true) {
                var colors = geometry.getAttribute('color');
                if (colors !== undefined) {
                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);
                }
            }
            var encodedData = new dracoEncoder.DracoInt8Array();
            encoder.SetSpeedOptions(options.encodeSpeed || 5, options.decodeSpeed || 5);
            if (options.encoderMethod !== undefined) {
                encoder.SetEncodingMethod(options.encoderMethod);
            }
            if (options.quantization !== undefined) {
                for (var i = 0; i < 5; i++) {
                    if (options.quantization[i] !== undefined) {
                        encoder.SetAttributeQuantization(i, options.quantization[i]);
                    }
                }
            }
            var length = encoder.EncodeMeshToDracoBuffer(mesh, encodedData);
            dracoEncoder.destroy(mesh);
            if (length === 0) {
                throw new Error('THREE.DRACOExporter: Draco encoding failed.');
            }
            var outputData = new Int8Array(new ArrayBuffer(length));
            for (var i = 0; i < length; i++) {
                outputData[i] = encodedData.GetValue(i);
            }
            dracoEncoder.destroy(encodedData);
            dracoEncoder.destroy(encoder);
            dracoEncoder.destroy(builder);
            return outputData;
        }
    };
    DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;
    DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;
    DRACOExporter.POINT_CLOUD = 0;
    DRACOExporter.TRIANGULAR_MESH = 1;
    DRACOExporter.INVALID = -1;
    DRACOExporter.POSITION = 0;
    DRACOExporter.NORMAL = 1;
    DRACOExporter.COLOR = 2;
    DRACOExporter.TEX_COORD = 3;
    DRACOExporter.GENERIC = 4;

    return DRACOExporter;
});
define('skylark-threejs-ex/exporters/GLTFExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var WEBGL_CONSTANTS = {
        POINTS: 0,
        LINES: 1,
        LINE_LOOP: 2,
        LINE_STRIP: 3,
        TRIANGLES: 4,
        TRIANGLE_STRIP: 5,
        TRIANGLE_FAN: 6,
        UNSIGNED_BYTE: 5121,
        UNSIGNED_SHORT: 5123,
        FLOAT: 5126,
        UNSIGNED_INT: 5125,
        ARRAY_BUFFER: 34962,
        ELEMENT_ARRAY_BUFFER: 34963,
        NEAREST: 9728,
        LINEAR: 9729,
        NEAREST_MIPMAP_NEAREST: 9984,
        LINEAR_MIPMAP_NEAREST: 9985,
        NEAREST_MIPMAP_LINEAR: 9986,
        LINEAR_MIPMAP_LINEAR: 9987,
        CLAMP_TO_EDGE: 33071,
        MIRRORED_REPEAT: 33648,
        REPEAT: 10497
    };
    var THREE_TO_WEBGL = {};
    THREE_TO_WEBGL[THREE.NearestFilter] = WEBGL_CONSTANTS.NEAREST;
    THREE_TO_WEBGL[THREE.NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;
    THREE_TO_WEBGL[THREE.NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;
    THREE_TO_WEBGL[THREE.LinearFilter] = WEBGL_CONSTANTS.LINEAR;
    THREE_TO_WEBGL[THREE.LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;
    THREE_TO_WEBGL[THREE.LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;
    THREE_TO_WEBGL[THREE.ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;
    THREE_TO_WEBGL[THREE.RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;
    THREE_TO_WEBGL[THREE.MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;
    var PATH_PROPERTIES = {
        scale: 'scale',
        position: 'translation',
        quaternion: 'rotation',
        morphTargetInfluences: 'weights'
    };
    var GLTFExporter = function () {
    };
    GLTFExporter.prototype = {
        constructor: GLTFExporter,
        parse: function (input, onDone, options) {
            var DEFAULT_OPTIONS = {
                binary: false,
                trs: false,
                onlyVisible: true,
                truncateDrawRange: true,
                embedImages: true,
                maxTextureSize: Infinity,
                animations: [],
                forceIndices: false,
                forcePowerOfTwoTextures: false,
                includeCustomExtensions: false
            };
            options = Object.assign({}, DEFAULT_OPTIONS, options);
            if (options.animations.length > 0) {
                options.trs = true;
            }
            var outputJSON = {
                asset: {
                    version: '2.0',
                    generator: 'GLTFExporter'
                }
            };
            var byteOffset = 0;
            var buffers = [];
            var pending = [];
            var nodeMap = new Map();
            var skins = [];
            var extensionsUsed = {};
            var cachedData = {
                meshes: new Map(),
                attributes: new Map(),
                attributesNormalized: new Map(),
                materials: new Map(),
                textures: new Map(),
                images: new Map()
            };
            var cachedCanvas;
            var uids = new Map();
            var uid = 0;
            function getUID(object) {
                if (!uids.has(object))
                    uids.set(object, uid++);
                return uids.get(object);
            }
            function equalArray(array1, array2) {
                return array1.length === array2.length && array1.every(function (element, index) {
                    return element === array2[index];
                });
            }
            function stringToArrayBuffer(text) {
                if (window.TextEncoder !== undefined) {
                    return new TextEncoder().encode(text).buffer;
                }
                var array = new Uint8Array(new ArrayBuffer(text.length));
                for (var i = 0, il = text.length; i < il; i++) {
                    var value = text.charCodeAt(i);
                    array[i] = value > 255 ? 32 : value;
                }
                return array.buffer;
            }
            function getMinMax(attribute, start, count) {
                var output = {
                    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),
                    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)
                };
                for (var i = start; i < start + count; i++) {
                    for (var a = 0; a < attribute.itemSize; a++) {
                        var value = attribute.array[i * attribute.itemSize + a];
                        output.min[a] = Math.min(output.min[a], value);
                        output.max[a] = Math.max(output.max[a], value);
                    }
                }
                return output;
            }
            function isPowerOfTwo(image) {
                return THREE.MathUtils.isPowerOfTwo(image.width) && THREE.MathUtils.isPowerOfTwo(image.height);
            }
            function isNormalizedNormalAttribute(normal) {
                if (cachedData.attributesNormalized.has(normal)) {
                    return false;
                }
                var v = new THREE.Vector3();
                for (var i = 0, il = normal.count; i < il; i++) {
                    if (Math.abs(v.fromArray(normal.array, i * 3).length() - 1) > 0.0005)
                        return false;
                }
                return true;
            }
            function createNormalizedNormalAttribute(normal) {
                if (cachedData.attributesNormalized.has(normal)) {
                    return cachedData.attributesNormalized.get(normal);
                }
                var attribute = normal.clone();
                var v = new THREE.Vector3();
                for (var i = 0, il = attribute.count; i < il; i++) {
                    v.fromArray(attribute.array, i * 3);
                    if (v.x === 0 && v.y === 0 && v.z === 0) {
                        v.setX(1);
                    } else {
                        v.normalize();
                    }
                    v.toArray(attribute.array, i * 3);
                }
                cachedData.attributesNormalized.set(normal, attribute);
                return attribute;
            }
            function getPaddedBufferSize(bufferSize) {
                return Math.ceil(bufferSize / 4) * 4;
            }
            function getPaddedArrayBuffer(arrayBuffer, paddingByte) {
                paddingByte = paddingByte || 0;
                var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);
                if (paddedLength !== arrayBuffer.byteLength) {
                    var array = new Uint8Array(paddedLength);
                    array.set(new Uint8Array(arrayBuffer));
                    if (paddingByte !== 0) {
                        for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {
                            array[i] = paddingByte;
                        }
                    }
                    return array.buffer;
                }
                return arrayBuffer;
            }
            function serializeUserData(object, gltfProperty) {
                if (Object.keys(object.userData).length === 0) {
                    return;
                }
                try {
                    var json = JSON.parse(JSON.stringify(object.userData));
                    if (options.includeCustomExtensions && json.gltfExtensions) {
                        if (gltfProperty.extensions === undefined) {
                            gltfProperty.extensions = {};
                        }
                        for (var extensionName in json.gltfExtensions) {
                            gltfProperty.extensions[extensionName] = json.gltfExtensions[extensionName];
                            extensionsUsed[extensionName] = true;
                        }
                        delete json.gltfExtensions;
                    }
                    if (Object.keys(json).length > 0) {
                        gltfProperty.extras = json;
                    }
                } catch (error) {
                    console.warn("THREE.GLTFExporter: userData of '" + object.name + "' " + "won't be serialized because of JSON.stringify error - " + error.message);
                }
            }
            function applyTextureTransform(mapDef, texture) {
                var didTransform = false;
                var transformDef = {};
                if (texture.offset.x !== 0 || texture.offset.y !== 0) {
                    transformDef.offset = texture.offset.toArray();
                    didTransform = true;
                }
                if (texture.rotation !== 0) {
                    transformDef.rotation = texture.rotation;
                    didTransform = true;
                }
                if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {
                    transformDef.scale = texture.repeat.toArray();
                    didTransform = true;
                }
                if (didTransform) {
                    mapDef.extensions = mapDef.extensions || {};
                    mapDef.extensions['KHR_texture_transform'] = transformDef;
                    extensionsUsed['KHR_texture_transform'] = true;
                }
            }
            function processBuffer(buffer) {
                if (!outputJSON.buffers) {
                    outputJSON.buffers = [{ byteLength: 0 }];
                }
                buffers.push(buffer);
                return 0;
            }
            function processBufferView(attribute, componentType, start, count, target) {
                if (!outputJSON.bufferViews) {
                    outputJSON.bufferViews = [];
                }
                var componentSize;
                if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {
                    componentSize = 1;
                } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {
                    componentSize = 2;
                } else {
                    componentSize = 4;
                }
                var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);
                var dataView = new DataView(new ArrayBuffer(byteLength));
                var offset = 0;
                for (var i = start; i < start + count; i++) {
                    for (var a = 0; a < attribute.itemSize; a++) {
                        var value = attribute.array[i * attribute.itemSize + a];
                        if (componentType === WEBGL_CONSTANTS.FLOAT) {
                            dataView.setFloat32(offset, value, true);
                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {
                            dataView.setUint32(offset, value, true);
                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {
                            dataView.setUint16(offset, value, true);
                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {
                            dataView.setUint8(offset, value);
                        }
                        offset += componentSize;
                    }
                }
                var gltfBufferView = {
                    buffer: processBuffer(dataView.buffer),
                    byteOffset: byteOffset,
                    byteLength: byteLength
                };
                if (target !== undefined)
                    gltfBufferView.target = target;
                if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {
                    gltfBufferView.byteStride = attribute.itemSize * componentSize;
                }
                byteOffset += byteLength;
                outputJSON.bufferViews.push(gltfBufferView);
                var output = {
                    id: outputJSON.bufferViews.length - 1,
                    byteLength: 0
                };
                return output;
            }
            function processBufferViewImage(blob) {
                if (!outputJSON.bufferViews) {
                    outputJSON.bufferViews = [];
                }
                return new Promise(function (resolve) {
                    var reader = new window.FileReader();
                    reader.readAsArrayBuffer(blob);
                    reader.onloadend = function () {
                        var buffer = getPaddedArrayBuffer(reader.result);
                        var bufferView = {
                            buffer: processBuffer(buffer),
                            byteOffset: byteOffset,
                            byteLength: buffer.byteLength
                        };
                        byteOffset += buffer.byteLength;
                        outputJSON.bufferViews.push(bufferView);
                        resolve(outputJSON.bufferViews.length - 1);
                    };
                });
            }
            function processAccessor(attribute, geometry, start, count) {
                var types = {
                    1: 'SCALAR',
                    2: 'VEC2',
                    3: 'VEC3',
                    4: 'VEC4',
                    16: 'MAT4'
                };
                var componentType;
                if (attribute.array.constructor === Float32Array) {
                    componentType = WEBGL_CONSTANTS.FLOAT;
                } else if (attribute.array.constructor === Uint32Array) {
                    componentType = WEBGL_CONSTANTS.UNSIGNED_INT;
                } else if (attribute.array.constructor === Uint16Array) {
                    componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;
                } else if (attribute.array.constructor === Uint8Array) {
                    componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;
                } else {
                    throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');
                }
                if (start === undefined)
                    start = 0;
                if (count === undefined)
                    count = attribute.count;
                if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {
                    var end = start + count;
                    var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;
                    start = Math.max(start, geometry.drawRange.start);
                    count = Math.min(end, end2) - start;
                    if (count < 0)
                        count = 0;
                }
                if (count === 0) {
                    return null;
                }
                var minMax = getMinMax(attribute, start, count);
                var bufferViewTarget;
                if (geometry !== undefined) {
                    bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;
                }
                var bufferView = processBufferView(attribute, componentType, start, count, bufferViewTarget);
                var gltfAccessor = {
                    bufferView: bufferView.id,
                    byteOffset: bufferView.byteOffset,
                    componentType: componentType,
                    count: count,
                    max: minMax.max,
                    min: minMax.min,
                    type: types[attribute.itemSize]
                };
                if (!outputJSON.accessors) {
                    outputJSON.accessors = [];
                }
                outputJSON.accessors.push(gltfAccessor);
                return outputJSON.accessors.length - 1;
            }
            function processImage(image, format, flipY) {
                if (!cachedData.images.has(image)) {
                    cachedData.images.set(image, {});
                }
                var cachedImages = cachedData.images.get(image);
                var mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';
                var key = mimeType + ':flipY/' + flipY.toString();
                if (cachedImages[key] !== undefined) {
                    return cachedImages[key];
                }
                if (!outputJSON.images) {
                    outputJSON.images = [];
                }
                var gltfImage = { mimeType: mimeType };
                if (options.embedImages) {
                    var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');
                    canvas.width = Math.min(image.width, options.maxTextureSize);
                    canvas.height = Math.min(image.height, options.maxTextureSize);
                    if (options.forcePowerOfTwoTextures && !isPowerOfTwo(canvas)) {
                        console.warn('GLTFExporter: Resized non-power-of-two image.', image);
                        canvas.width = THREE.MathUtils.floorPowerOfTwo(canvas.width);
                        canvas.height = THREE.MathUtils.floorPowerOfTwo(canvas.height);
                    }
                    var ctx = canvas.getContext('2d');
                    if (flipY === true) {
                        ctx.translate(0, canvas.height);
                        ctx.scale(1, -1);
                    }
                    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
                    if (options.binary === true) {
                        pending.push(new Promise(function (resolve) {
                            canvas.toBlob(function (blob) {
                                processBufferViewImage(blob).then(function (bufferViewIndex) {
                                    gltfImage.bufferView = bufferViewIndex;
                                    resolve();
                                });
                            }, mimeType);
                        }));
                    } else {
                        gltfImage.uri = canvas.toDataURL(mimeType);
                    }
                } else {
                    gltfImage.uri = image.src;
                }
                outputJSON.images.push(gltfImage);
                var index = outputJSON.images.length - 1;
                cachedImages[key] = index;
                return index;
            }
            function processSampler(map) {
                if (!outputJSON.samplers) {
                    outputJSON.samplers = [];
                }
                var gltfSampler = {
                    magFilter: THREE_TO_WEBGL[map.magFilter],
                    minFilter: THREE_TO_WEBGL[map.minFilter],
                    wrapS: THREE_TO_WEBGL[map.wrapS],
                    wrapT: THREE_TO_WEBGL[map.wrapT]
                };
                outputJSON.samplers.push(gltfSampler);
                return outputJSON.samplers.length - 1;
            }
            function processTexture(map) {
                if (cachedData.textures.has(map)) {
                    return cachedData.textures.get(map);
                }
                if (!outputJSON.textures) {
                    outputJSON.textures = [];
                }
                var gltfTexture = {
                    sampler: processSampler(map),
                    source: processImage(map.image, map.format, map.flipY)
                };
                if (map.name) {
                    gltfTexture.name = map.name;
                }
                outputJSON.textures.push(gltfTexture);
                var index = outputJSON.textures.length - 1;
                cachedData.textures.set(map, index);
                return index;
            }
            function processMaterial(material) {
                if (cachedData.materials.has(material)) {
                    return cachedData.materials.get(material);
                }
                if (material.isShaderMaterial) {
                    console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');
                    return null;
                }
                if (!outputJSON.materials) {
                    outputJSON.materials = [];
                }
                var gltfMaterial = { pbrMetallicRoughness: {} };
                if (material.isMeshBasicMaterial) {
                    gltfMaterial.extensions = { KHR_materials_unlit: {} };
                    extensionsUsed['KHR_materials_unlit'] = true;
                } else if (material.isGLTFSpecularGlossinessMaterial) {
                    gltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };
                    extensionsUsed['KHR_materials_pbrSpecularGlossiness'] = true;
                } else if (!material.isMeshStandardMaterial) {
                    console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');
                }
                var color = material.color.toArray().concat([material.opacity]);
                if (!equalArray(color, [
                        1,
                        1,
                        1,
                        1
                    ])) {
                    gltfMaterial.pbrMetallicRoughness.baseColorFactor = color;
                }
                if (material.isMeshStandardMaterial) {
                    gltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;
                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;
                } else if (material.isMeshBasicMaterial) {
                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0;
                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;
                } else {
                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;
                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;
                }
                if (material.isGLTFSpecularGlossinessMaterial) {
                    if (gltfMaterial.pbrMetallicRoughness.baseColorFactor) {
                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;
                    }
                    var specularFactor = [
                        1,
                        1,
                        1
                    ];
                    material.specular.toArray(specularFactor, 0);
                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;
                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;
                }
                if (material.metalnessMap || material.roughnessMap) {
                    if (material.metalnessMap === material.roughnessMap) {
                        var metalRoughMapDef = { index: processTexture(material.metalnessMap) };
                        applyTextureTransform(metalRoughMapDef, material.metalnessMap);
                        gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;
                    } else {
                        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');
                    }
                }
                if (material.map) {
                    var baseColorMapDef = { index: processTexture(material.map) };
                    applyTextureTransform(baseColorMapDef, material.map);
                    if (material.isGLTFSpecularGlossinessMaterial) {
                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;
                    }
                    gltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;
                }
                if (material.isGLTFSpecularGlossinessMaterial && material.specularMap) {
                    var specularMapDef = { index: processTexture(material.specularMap) };
                    applyTextureTransform(specularMapDef, material.specularMap);
                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;
                }
                if (material.emissive) {
                    var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();
                    if (!equalArray(emissive, [
                            0,
                            0,
                            0
                        ])) {
                        gltfMaterial.emissiveFactor = emissive;
                    }
                    if (material.emissiveMap) {
                        var emissiveMapDef = { index: processTexture(material.emissiveMap) };
                        applyTextureTransform(emissiveMapDef, material.emissiveMap);
                        gltfMaterial.emissiveTexture = emissiveMapDef;
                    }
                }
                if (material.normalMap) {
                    var normalMapDef = { index: processTexture(material.normalMap) };
                    if (material.normalScale && material.normalScale.x !== -1) {
                        if (material.normalScale.x !== material.normalScale.y) {
                            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');
                        }
                        normalMapDef.scale = material.normalScale.x;
                    }
                    applyTextureTransform(normalMapDef, material.normalMap);
                    gltfMaterial.normalTexture = normalMapDef;
                }
                if (material.aoMap) {
                    var occlusionMapDef = {
                        index: processTexture(material.aoMap),
                        texCoord: 1
                    };
                    if (material.aoMapIntensity !== 1) {
                        occlusionMapDef.strength = material.aoMapIntensity;
                    }
                    applyTextureTransform(occlusionMapDef, material.aoMap);
                    gltfMaterial.occlusionTexture = occlusionMapDef;
                }
                if (material.transparent) {
                    gltfMaterial.alphaMode = 'BLEND';
                } else {
                    if (material.alphaTest > 0) {
                        gltfMaterial.alphaMode = 'MASK';
                        gltfMaterial.alphaCutoff = material.alphaTest;
                    }
                }
                if (material.side === THREE.DoubleSide) {
                    gltfMaterial.doubleSided = true;
                }
                if (material.name !== '') {
                    gltfMaterial.name = material.name;
                }
                serializeUserData(material, gltfMaterial);
                outputJSON.materials.push(gltfMaterial);
                var index = outputJSON.materials.length - 1;
                cachedData.materials.set(material, index);
                return index;
            }
            function processMesh(mesh) {
                var meshCacheKeyParts = [mesh.geometry.uuid];
                if (Array.isArray(mesh.material)) {
                    for (var i = 0, l = mesh.material.length; i < l; i++) {
                        meshCacheKeyParts.push(mesh.material[i].uuid);
                    }
                } else {
                    meshCacheKeyParts.push(mesh.material.uuid);
                }
                var meshCacheKey = meshCacheKeyParts.join(':');
                if (cachedData.meshes.has(meshCacheKey)) {
                    return cachedData.meshes.get(meshCacheKey);
                }
                var geometry = mesh.geometry;
                var mode;
                if (mesh.isLineSegments) {
                    mode = WEBGL_CONSTANTS.LINES;
                } else if (mesh.isLineLoop) {
                    mode = WEBGL_CONSTANTS.LINE_LOOP;
                } else if (mesh.isLine) {
                    mode = WEBGL_CONSTANTS.LINE_STRIP;
                } else if (mesh.isPoints) {
                    mode = WEBGL_CONSTANTS.POINTS;
                } else {
                    mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;
                }
                if (!geometry.isBufferGeometry) {
                    console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.');
                    geometry = new THREE.BufferGeometry().setFromObject(mesh);
                }
                var gltfMesh = {};
                var attributes = {};
                var primitives = [];
                var targets = [];
                var nameConversion = {
                    uv: 'TEXCOORD_0',
                    uv2: 'TEXCOORD_1',
                    color: 'COLOR_0',
                    skinWeight: 'WEIGHTS_0',
                    skinIndex: 'JOINTS_0'
                };
                var originalNormal = geometry.getAttribute('normal');
                if (originalNormal !== undefined && !isNormalizedNormalAttribute(originalNormal)) {
                    console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');
                    geometry.setAttribute('normal', createNormalizedNormalAttribute(originalNormal));
                }
                var modifiedAttribute = null;
                for (var attributeName in geometry.attributes) {
                    if (attributeName.substr(0, 5) === 'morph')
                        continue;
                    var attribute = geometry.attributes[attributeName];
                    attributeName = nameConversion[attributeName] || attributeName.toUpperCase();
                    var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\d+|COLOR_\d+|JOINTS_\d+|WEIGHTS_\d+)$/;
                    if (!validVertexAttributes.test(attributeName)) {
                        attributeName = '_' + attributeName;
                    }
                    if (cachedData.attributes.has(getUID(attribute))) {
                        attributes[attributeName] = cachedData.attributes.get(getUID(attribute));
                        continue;
                    }
                    modifiedAttribute = null;
                    var array = attribute.array;
                    if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {
                        console.warn('GLTFExporter: Attribute "skinIndex" converted to type UNSIGNED_SHORT.');
                        modifiedAttribute = new THREE.BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);
                    }
                    var accessor = processAccessor(modifiedAttribute || attribute, geometry);
                    if (accessor !== null) {
                        attributes[attributeName] = accessor;
                        cachedData.attributes.set(getUID(attribute), accessor);
                    }
                }
                if (originalNormal !== undefined)
                    geometry.setAttribute('normal', originalNormal);
                if (Object.keys(attributes).length === 0) {
                    return null;
                }
                if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {
                    var weights = [];
                    var targetNames = [];
                    var reverseDictionary = {};
                    if (mesh.morphTargetDictionary !== undefined) {
                        for (var key in mesh.morphTargetDictionary) {
                            reverseDictionary[mesh.morphTargetDictionary[key]] = key;
                        }
                    }
                    for (var i = 0; i < mesh.morphTargetInfluences.length; ++i) {
                        var target = {};
                        var warned = false;
                        for (var attributeName in geometry.morphAttributes) {
                            if (attributeName !== 'position' && attributeName !== 'normal') {
                                if (!warned) {
                                    console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');
                                    warned = true;
                                }
                                continue;
                            }
                            var attribute = geometry.morphAttributes[attributeName][i];
                            var gltfAttributeName = attributeName.toUpperCase();
                            var baseAttribute = geometry.attributes[attributeName];
                            if (cachedData.attributes.has(getUID(attribute))) {
                                target[gltfAttributeName] = cachedData.attributes.get(getUID(attribute));
                                continue;
                            }
                            var relativeAttribute = attribute.clone();
                            if (!geometry.morphTargetsRelative) {
                                for (var j = 0, jl = attribute.count; j < jl; j++) {
                                    relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));
                                }
                            }
                            target[gltfAttributeName] = processAccessor(relativeAttribute, geometry);
                            cachedData.attributes.set(getUID(baseAttribute), target[gltfAttributeName]);
                        }
                        targets.push(target);
                        weights.push(mesh.morphTargetInfluences[i]);
                        if (mesh.morphTargetDictionary !== undefined)
                            targetNames.push(reverseDictionary[i]);
                    }
                    gltfMesh.weights = weights;
                    if (targetNames.length > 0) {
                        gltfMesh.extras = {};
                        gltfMesh.extras.targetNames = targetNames;
                    }
                }
                var forceIndices = options.forceIndices;
                var isMultiMaterial = Array.isArray(mesh.material);
                if (isMultiMaterial && geometry.groups.length === 0)
                    return null;
                if (!forceIndices && geometry.index === null && isMultiMaterial) {
                    console.warn('THREE.GLTFExporter: Creating index for non-indexed multi-material mesh.');
                    forceIndices = true;
                }
                var didForceIndices = false;
                if (geometry.index === null && forceIndices) {
                    var indices = [];
                    for (var i = 0, il = geometry.attributes.position.count; i < il; i++) {
                        indices[i] = i;
                    }
                    geometry.setIndex(indices);
                    didForceIndices = true;
                }
                var materials = isMultiMaterial ? mesh.material : [mesh.material];
                var groups = isMultiMaterial ? geometry.groups : [{
                        materialIndex: 0,
                        start: undefined,
                        count: undefined
                    }];
                for (var i = 0, il = groups.length; i < il; i++) {
                    var primitive = {
                        mode: mode,
                        attributes: attributes
                    };
                    serializeUserData(geometry, primitive);
                    if (targets.length > 0)
                        primitive.targets = targets;
                    if (geometry.index !== null) {
                        var cacheKey = getUID(geometry.index);
                        if (groups[i].start !== undefined || groups[i].count !== undefined) {
                            cacheKey += ':' + groups[i].start + ':' + groups[i].count;
                        }
                        if (cachedData.attributes.has(cacheKey)) {
                            primitive.indices = cachedData.attributes.get(cacheKey);
                        } else {
                            primitive.indices = processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);
                            cachedData.attributes.set(cacheKey, primitive.indices);
                        }
                        if (primitive.indices === null)
                            delete primitive.indices;
                    }
                    var material = processMaterial(materials[groups[i].materialIndex]);
                    if (material !== null) {
                        primitive.material = material;
                    }
                    primitives.push(primitive);
                }
                if (didForceIndices) {
                    geometry.setIndex(null);
                }
                gltfMesh.primitives = primitives;
                if (!outputJSON.meshes) {
                    outputJSON.meshes = [];
                }
                outputJSON.meshes.push(gltfMesh);
                var index = outputJSON.meshes.length - 1;
                cachedData.meshes.set(meshCacheKey, index);
                return index;
            }
            function processCamera(camera) {
                if (!outputJSON.cameras) {
                    outputJSON.cameras = [];
                }
                var isOrtho = camera.isOrthographicCamera;
                var gltfCamera = { type: isOrtho ? 'orthographic' : 'perspective' };
                if (isOrtho) {
                    gltfCamera.orthographic = {
                        xmag: camera.right * 2,
                        ymag: camera.top * 2,
                        zfar: camera.far <= 0 ? 0.001 : camera.far,
                        znear: camera.near < 0 ? 0 : camera.near
                    };
                } else {
                    gltfCamera.perspective = {
                        aspectRatio: camera.aspect,
                        yfov: THREE.MathUtils.degToRad(camera.fov),
                        zfar: camera.far <= 0 ? 0.001 : camera.far,
                        znear: camera.near < 0 ? 0 : camera.near
                    };
                }
                if (camera.name !== '') {
                    gltfCamera.name = camera.type;
                }
                outputJSON.cameras.push(gltfCamera);
                return outputJSON.cameras.length - 1;
            }
            function processAnimation(clip, root) {
                if (!outputJSON.animations) {
                    outputJSON.animations = [];
                }
                clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);
                var tracks = clip.tracks;
                var channels = [];
                var samplers = [];
                for (var i = 0; i < tracks.length; ++i) {
                    var track = tracks[i];
                    var trackBinding = THREE.PropertyBinding.parseTrackName(track.name);
                    var trackNode = THREE.PropertyBinding.findNode(root, trackBinding.nodeName);
                    var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];
                    if (trackBinding.objectName === 'bones') {
                        if (trackNode.isSkinnedMesh === true) {
                            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);
                        } else {
                            trackNode = undefined;
                        }
                    }
                    if (!trackNode || !trackProperty) {
                        console.warn('THREE.GLTFExporter: Could not export animation track "%s".', track.name);
                        return null;
                    }
                    var inputItemSize = 1;
                    var outputItemSize = track.values.length / track.times.length;
                    if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {
                        outputItemSize /= trackNode.morphTargetInfluences.length;
                    }
                    var interpolation;
                    if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {
                        interpolation = 'CUBICSPLINE';
                        outputItemSize /= 3;
                    } else if (track.getInterpolation() === THREE.InterpolateDiscrete) {
                        interpolation = 'STEP';
                    } else {
                        interpolation = 'LINEAR';
                    }
                    samplers.push({
                        input: processAccessor(new THREE.BufferAttribute(track.times, inputItemSize)),
                        output: processAccessor(new THREE.BufferAttribute(track.values, outputItemSize)),
                        interpolation: interpolation
                    });
                    channels.push({
                        sampler: samplers.length - 1,
                        target: {
                            node: nodeMap.get(trackNode),
                            path: trackProperty
                        }
                    });
                }
                outputJSON.animations.push({
                    name: clip.name || 'clip_' + outputJSON.animations.length,
                    samplers: samplers,
                    channels: channels
                });
                return outputJSON.animations.length - 1;
            }
            function processSkin(object) {
                var node = outputJSON.nodes[nodeMap.get(object)];
                var skeleton = object.skeleton;
                if (skeleton === undefined)
                    return null;
                var rootJoint = object.skeleton.bones[0];
                if (rootJoint === undefined)
                    return null;
                var joints = [];
                var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);
                for (var i = 0; i < skeleton.bones.length; ++i) {
                    joints.push(nodeMap.get(skeleton.bones[i]));
                    skeleton.boneInverses[i].toArray(inverseBindMatrices, i * 16);
                }
                if (outputJSON.skins === undefined) {
                    outputJSON.skins = [];
                }
                outputJSON.skins.push({
                    inverseBindMatrices: processAccessor(new THREE.BufferAttribute(inverseBindMatrices, 16)),
                    joints: joints,
                    skeleton: nodeMap.get(rootJoint)
                });
                var skinIndex = node.skin = outputJSON.skins.length - 1;
                return skinIndex;
            }
            function processLight(light) {
                var lightDef = {};
                if (light.name)
                    lightDef.name = light.name;
                lightDef.color = light.color.toArray();
                lightDef.intensity = light.intensity;
                if (light.isDirectionalLight) {
                    lightDef.type = 'directional';
                } else if (light.isPointLight) {
                    lightDef.type = 'point';
                    if (light.distance > 0)
                        lightDef.range = light.distance;
                } else if (light.isSpotLight) {
                    lightDef.type = 'spot';
                    if (light.distance > 0)
                        lightDef.range = light.distance;
                    lightDef.spot = {};
                    lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;
                    lightDef.spot.outerConeAngle = light.angle;
                }
                if (light.decay !== undefined && light.decay !== 2) {
                    console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');
                }
                if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {
                    console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');
                }
                var lights = outputJSON.extensions['KHR_lights_punctual'].lights;
                lights.push(lightDef);
                return lights.length - 1;
            }
            function processNode(object) {
                if (!outputJSON.nodes) {
                    outputJSON.nodes = [];
                }
                var gltfNode = {};
                if (options.trs) {
                    var rotation = object.quaternion.toArray();
                    var position = object.position.toArray();
                    var scale = object.scale.toArray();
                    if (!equalArray(rotation, [
                            0,
                            0,
                            0,
                            1
                        ])) {
                        gltfNode.rotation = rotation;
                    }
                    if (!equalArray(position, [
                            0,
                            0,
                            0
                        ])) {
                        gltfNode.translation = position;
                    }
                    if (!equalArray(scale, [
                            1,
                            1,
                            1
                        ])) {
                        gltfNode.scale = scale;
                    }
                } else {
                    if (object.matrixAutoUpdate) {
                        object.updateMatrix();
                    }
                    if (!equalArray(object.matrix.elements, [
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            1
                        ])) {
                        gltfNode.matrix = object.matrix.elements;
                    }
                }
                if (object.name !== '') {
                    gltfNode.name = String(object.name);
                }
                serializeUserData(object, gltfNode);
                if (object.isMesh || object.isLine || object.isPoints) {
                    var mesh = processMesh(object);
                    if (mesh !== null) {
                        gltfNode.mesh = mesh;
                    }
                } else if (object.isCamera) {
                    gltfNode.camera = processCamera(object);
                } else if (object.isDirectionalLight || object.isPointLight || object.isSpotLight) {
                    if (!extensionsUsed['KHR_lights_punctual']) {
                        outputJSON.extensions = outputJSON.extensions || {};
                        outputJSON.extensions['KHR_lights_punctual'] = { lights: [] };
                        extensionsUsed['KHR_lights_punctual'] = true;
                    }
                    gltfNode.extensions = gltfNode.extensions || {};
                    gltfNode.extensions['KHR_lights_punctual'] = { light: processLight(object) };
                } else if (object.isLight) {
                    console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object);
                    return null;
                }
                if (object.isSkinnedMesh) {
                    skins.push(object);
                }
                if (object.children.length > 0) {
                    var children = [];
                    for (var i = 0, l = object.children.length; i < l; i++) {
                        var child = object.children[i];
                        if (child.visible || options.onlyVisible === false) {
                            var node = processNode(child);
                            if (node !== null) {
                                children.push(node);
                            }
                        }
                    }
                    if (children.length > 0) {
                        gltfNode.children = children;
                    }
                }
                outputJSON.nodes.push(gltfNode);
                var nodeIndex = outputJSON.nodes.length - 1;
                nodeMap.set(object, nodeIndex);
                return nodeIndex;
            }
            function processScene(scene) {
                if (!outputJSON.scenes) {
                    outputJSON.scenes = [];
                    outputJSON.scene = 0;
                }
                var gltfScene = {};
                if (scene.name !== '') {
                    gltfScene.name = scene.name;
                }
                outputJSON.scenes.push(gltfScene);
                var nodes = [];
                for (var i = 0, l = scene.children.length; i < l; i++) {
                    var child = scene.children[i];
                    if (child.visible || options.onlyVisible === false) {
                        var node = processNode(child);
                        if (node !== null) {
                            nodes.push(node);
                        }
                    }
                }
                if (nodes.length > 0) {
                    gltfScene.nodes = nodes;
                }
                serializeUserData(scene, gltfScene);
            }
            function processObjects(objects) {
                var scene = new THREE.Scene();
                scene.name = 'AuxScene';
                for (var i = 0; i < objects.length; i++) {
                    scene.children.push(objects[i]);
                }
                processScene(scene);
            }
            function processInput(input) {
                input = input instanceof Array ? input : [input];
                var objectsWithoutScene = [];
                for (var i = 0; i < input.length; i++) {
                    if (input[i] instanceof THREE.Scene) {
                        processScene(input[i]);
                    } else {
                        objectsWithoutScene.push(input[i]);
                    }
                }
                if (objectsWithoutScene.length > 0) {
                    processObjects(objectsWithoutScene);
                }
                for (var i = 0; i < skins.length; ++i) {
                    processSkin(skins[i]);
                }
                for (var i = 0; i < options.animations.length; ++i) {
                    processAnimation(options.animations[i], input[0]);
                }
            }
            processInput(input);
            Promise.all(pending).then(function () {
                var blob = new Blob(buffers, { type: 'application/octet-stream' });
                var extensionsUsedList = Object.keys(extensionsUsed);
                if (extensionsUsedList.length > 0)
                    outputJSON.extensionsUsed = extensionsUsedList;
                if (outputJSON.buffers && outputJSON.buffers.length > 0)
                    outputJSON.buffers[0].byteLength = blob.size;
                if (options.binary === true) {
                    var GLB_HEADER_BYTES = 12;
                    var GLB_HEADER_MAGIC = 1179937895;
                    var GLB_VERSION = 2;
                    var GLB_CHUNK_PREFIX_BYTES = 8;
                    var GLB_CHUNK_TYPE_JSON = 1313821514;
                    var GLB_CHUNK_TYPE_BIN = 5130562;
                    var reader = new window.FileReader();
                    reader.readAsArrayBuffer(blob);
                    reader.onloadend = function () {
                        var binaryChunk = getPaddedArrayBuffer(reader.result);
                        var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));
                        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);
                        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);
                        var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)), 32);
                        var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));
                        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);
                        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);
                        var header = new ArrayBuffer(GLB_HEADER_BYTES);
                        var headerView = new DataView(header);
                        headerView.setUint32(0, GLB_HEADER_MAGIC, true);
                        headerView.setUint32(4, GLB_VERSION, true);
                        var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;
                        headerView.setUint32(8, totalByteLength, true);
                        var glbBlob = new Blob([
                            header,
                            jsonChunkPrefix,
                            jsonChunk,
                            binaryChunkPrefix,
                            binaryChunk
                        ], { type: 'application/octet-stream' });
                        var glbReader = new window.FileReader();
                        glbReader.readAsArrayBuffer(glbBlob);
                        glbReader.onloadend = function () {
                            onDone(glbReader.result);
                        };
                    };
                } else {
                    if (outputJSON.buffers && outputJSON.buffers.length > 0) {
                        var reader = new window.FileReader();
                        reader.readAsDataURL(blob);
                        reader.onloadend = function () {
                            var base64data = reader.result;
                            outputJSON.buffers[0].uri = base64data;
                            onDone(outputJSON);
                        };
                    } else {
                        onDone(outputJSON);
                    }
                }
            });
        }
    };
    GLTFExporter.Utils = {
        insertKeyframe: function (track, time) {
            var tolerance = 0.001;
            var valueSize = track.getValueSize();
            var times = new track.TimeBufferType(track.times.length + 1);
            var values = new track.ValueBufferType(track.values.length + valueSize);
            var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));
            var index;
            if (track.times.length === 0) {
                times[0] = time;
                for (var i = 0; i < valueSize; i++) {
                    values[i] = 0;
                }
                index = 0;
            } else if (time < track.times[0]) {
                if (Math.abs(track.times[0] - time) < tolerance)
                    return 0;
                times[0] = time;
                times.set(track.times, 1);
                values.set(interpolant.evaluate(time), 0);
                values.set(track.values, valueSize);
                index = 0;
            } else if (time > track.times[track.times.length - 1]) {
                if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {
                    return track.times.length - 1;
                }
                times[times.length - 1] = time;
                times.set(track.times, 0);
                values.set(track.values, 0);
                values.set(interpolant.evaluate(time), track.values.length);
                index = times.length - 1;
            } else {
                for (var i = 0; i < track.times.length; i++) {
                    if (Math.abs(track.times[i] - time) < tolerance)
                        return i;
                    if (track.times[i] < time && track.times[i + 1] > time) {
                        times.set(track.times.slice(0, i + 1), 0);
                        times[i + 1] = time;
                        times.set(track.times.slice(i + 1), i + 2);
                        values.set(track.values.slice(0, (i + 1) * valueSize), 0);
                        values.set(interpolant.evaluate(time), (i + 1) * valueSize);
                        values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);
                        index = i + 1;
                        break;
                    }
                }
            }
            track.times = times;
            track.values = values;
            return index;
        },
        mergeMorphTargetTracks: function (clip, root) {
            var tracks = [];
            var mergedTracks = {};
            var sourceTracks = clip.tracks;
            for (var i = 0; i < sourceTracks.length; ++i) {
                var sourceTrack = sourceTracks[i];
                var sourceTrackBinding = THREE.PropertyBinding.parseTrackName(sourceTrack.name);
                var sourceTrackNode = THREE.PropertyBinding.findNode(root, sourceTrackBinding.nodeName);
                if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {
                    tracks.push(sourceTrack);
                    continue;
                }
                if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {
                    if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
                        throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');
                    }
                    console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');
                    sourceTrack = sourceTrack.clone();
                    sourceTrack.setInterpolation(THREE.InterpolateLinear);
                }
                var targetCount = sourceTrackNode.morphTargetInfluences.length;
                var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];
                if (targetIndex === undefined) {
                    throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);
                }
                var mergedTrack;
                if (mergedTracks[sourceTrackNode.uuid] === undefined) {
                    mergedTrack = sourceTrack.clone();
                    var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);
                    for (var j = 0; j < mergedTrack.times.length; j++) {
                        values[j * targetCount + targetIndex] = mergedTrack.values[j];
                    }
                    mergedTrack.name = '.morphTargetInfluences';
                    mergedTrack.values = values;
                    mergedTracks[sourceTrackNode.uuid] = mergedTrack;
                    tracks.push(mergedTrack);
                    continue;
                }
                var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));
                mergedTrack = mergedTracks[sourceTrackNode.uuid];
                for (var j = 0; j < mergedTrack.times.length; j++) {
                    mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);
                }
                for (var j = 0; j < sourceTrack.times.length; j++) {
                    var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);
                    mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];
                }
            }
            clip.tracks = tracks;
            return clip;
        }
    };
    return GLTFExporter;
});
define('skylark-threejs-ex/utils/mmdparser',[],function(){


	/**
	 * @author Takahiro / https://github.com/takahirox
	 *
	 * Simple CharsetEncoder.
	 */

	function CharsetEncoder() {
	}

	/*
	 * Converts from Shift_JIS Uint8Array data to Unicode strings.
	 */
	CharsetEncoder.prototype.s2u = function ( uint8Array ) {

		var t = this.s2uTable;
		var str = '';
		var p = 0;

		while ( p < uint8Array.length ) {

			var key = uint8Array[ p ++ ];

			if ( ! ( ( key >= 0x00 && key <= 0x7e ) ||
	          ( key >= 0xa1 && key <= 0xdf ) ) &&
	       p < uint8Array.length ) {

				key = ( key << 8 ) | uint8Array[ p ++ ];

			}

			if ( t[ key ] === undefined ) {

				throw 'unknown char code ' + key + '.';

			}

			str += String.fromCharCode( t[ key ] );

		}

		return str;

	};

	CharsetEncoder.prototype.s2uTable = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		10: 10,
		11: 11,
		12: 12,
		13: 13,
		14: 14,
		15: 15,
		16: 16,
		17: 17,
		18: 18,
		19: 19,
		20: 20,
		21: 21,
		22: 22,
		23: 23,
		24: 24,
		25: 25,
		26: 26,
		27: 27,
		28: 28,
		29: 29,
		30: 30,
		31: 31,
		32: 32,
		33: 33,
		34: 34,
		35: 35,
		36: 36,
		37: 37,
		38: 38,
		39: 39,
		40: 40,
		41: 41,
		42: 42,
		43: 43,
		44: 44,
		45: 45,
		46: 46,
		47: 47,
		48: 48,
		49: 49,
		50: 50,
		51: 51,
		52: 52,
		53: 53,
		54: 54,
		55: 55,
		56: 56,
		57: 57,
		58: 58,
		59: 59,
		60: 60,
		61: 61,
		62: 62,
		63: 63,
		64: 64,
		65: 65,
		66: 66,
		67: 67,
		68: 68,
		69: 69,
		70: 70,
		71: 71,
		72: 72,
		73: 73,
		74: 74,
		75: 75,
		76: 76,
		77: 77,
		78: 78,
		79: 79,
		80: 80,
		81: 81,
		82: 82,
		83: 83,
		84: 84,
		85: 85,
		86: 86,
		87: 87,
		88: 88,
		89: 89,
		90: 90,
		91: 91,
		92: 92,
		93: 93,
		94: 94,
		95: 95,
		96: 96,
		97: 97,
		98: 98,
		99: 99,
		100: 100,
		101: 101,
		102: 102,
		103: 103,
		104: 104,
		105: 105,
		106: 106,
		107: 107,
		108: 108,
		109: 109,
		110: 110,
		111: 111,
		112: 112,
		113: 113,
		114: 114,
		115: 115,
		116: 116,
		117: 117,
		118: 118,
		119: 119,
		120: 120,
		121: 121,
		122: 122,
		123: 123,
		124: 124,
		125: 125,
		126: 126,
		161: 65377,
		162: 65378,
		163: 65379,
		164: 65380,
		165: 65381,
		166: 65382,
		167: 65383,
		168: 65384,
		169: 65385,
		170: 65386,
		171: 65387,
		172: 65388,
		173: 65389,
		174: 65390,
		175: 65391,
		176: 65392,
		177: 65393,
		178: 65394,
		179: 65395,
		180: 65396,
		181: 65397,
		182: 65398,
		183: 65399,
		184: 65400,
		185: 65401,
		186: 65402,
		187: 65403,
		188: 65404,
		189: 65405,
		190: 65406,
		191: 65407,
		192: 65408,
		193: 65409,
		194: 65410,
		195: 65411,
		196: 65412,
		197: 65413,
		198: 65414,
		199: 65415,
		200: 65416,
		201: 65417,
		202: 65418,
		203: 65419,
		204: 65420,
		205: 65421,
		206: 65422,
		207: 65423,
		208: 65424,
		209: 65425,
		210: 65426,
		211: 65427,
		212: 65428,
		213: 65429,
		214: 65430,
		215: 65431,
		216: 65432,
		217: 65433,
		218: 65434,
		219: 65435,
		220: 65436,
		221: 65437,
		222: 65438,
		223: 65439,
		33088: 12288,
		33089: 12289,
		33090: 12290,
		33091: 65292,
		33092: 65294,
		33093: 12539,
		33094: 65306,
		33095: 65307,
		33096: 65311,
		33097: 65281,
		33098: 12443,
		33099: 12444,
		33100: 180,
		33101: 65344,
		33102: 168,
		33103: 65342,
		33104: 65507,
		33105: 65343,
		33106: 12541,
		33107: 12542,
		33108: 12445,
		33109: 12446,
		33110: 12291,
		33111: 20189,
		33112: 12293,
		33113: 12294,
		33114: 12295,
		33115: 12540,
		33116: 8213,
		33117: 8208,
		33118: 65295,
		33119: 65340,
		33120: 65374,
		33121: 8741,
		33122: 65372,
		33123: 8230,
		33124: 8229,
		33125: 8216,
		33126: 8217,
		33127: 8220,
		33128: 8221,
		33129: 65288,
		33130: 65289,
		33131: 12308,
		33132: 12309,
		33133: 65339,
		33134: 65341,
		33135: 65371,
		33136: 65373,
		33137: 12296,
		33138: 12297,
		33139: 12298,
		33140: 12299,
		33141: 12300,
		33142: 12301,
		33143: 12302,
		33144: 12303,
		33145: 12304,
		33146: 12305,
		33147: 65291,
		33148: 65293,
		33149: 177,
		33150: 215,
		33152: 247,
		33153: 65309,
		33154: 8800,
		33155: 65308,
		33156: 65310,
		33157: 8806,
		33158: 8807,
		33159: 8734,
		33160: 8756,
		33161: 9794,
		33162: 9792,
		33163: 176,
		33164: 8242,
		33165: 8243,
		33166: 8451,
		33167: 65509,
		33168: 65284,
		33169: 65504,
		33170: 65505,
		33171: 65285,
		33172: 65283,
		33173: 65286,
		33174: 65290,
		33175: 65312,
		33176: 167,
		33177: 9734,
		33178: 9733,
		33179: 9675,
		33180: 9679,
		33181: 9678,
		33182: 9671,
		33183: 9670,
		33184: 9633,
		33185: 9632,
		33186: 9651,
		33187: 9650,
		33188: 9661,
		33189: 9660,
		33190: 8251,
		33191: 12306,
		33192: 8594,
		33193: 8592,
		33194: 8593,
		33195: 8595,
		33196: 12307,
		33208: 8712,
		33209: 8715,
		33210: 8838,
		33211: 8839,
		33212: 8834,
		33213: 8835,
		33214: 8746,
		33215: 8745,
		33224: 8743,
		33225: 8744,
		33226: 65506,
		33227: 8658,
		33228: 8660,
		33229: 8704,
		33230: 8707,
		33242: 8736,
		33243: 8869,
		33244: 8978,
		33245: 8706,
		33246: 8711,
		33247: 8801,
		33248: 8786,
		33249: 8810,
		33250: 8811,
		33251: 8730,
		33252: 8765,
		33253: 8733,
		33254: 8757,
		33255: 8747,
		33256: 8748,
		33264: 8491,
		33265: 8240,
		33266: 9839,
		33267: 9837,
		33268: 9834,
		33269: 8224,
		33270: 8225,
		33271: 182,
		33276: 9711,
		33359: 65296,
		33360: 65297,
		33361: 65298,
		33362: 65299,
		33363: 65300,
		33364: 65301,
		33365: 65302,
		33366: 65303,
		33367: 65304,
		33368: 65305,
		33376: 65313,
		33377: 65314,
		33378: 65315,
		33379: 65316,
		33380: 65317,
		33381: 65318,
		33382: 65319,
		33383: 65320,
		33384: 65321,
		33385: 65322,
		33386: 65323,
		33387: 65324,
		33388: 65325,
		33389: 65326,
		33390: 65327,
		33391: 65328,
		33392: 65329,
		33393: 65330,
		33394: 65331,
		33395: 65332,
		33396: 65333,
		33397: 65334,
		33398: 65335,
		33399: 65336,
		33400: 65337,
		33401: 65338,
		33409: 65345,
		33410: 65346,
		33411: 65347,
		33412: 65348,
		33413: 65349,
		33414: 65350,
		33415: 65351,
		33416: 65352,
		33417: 65353,
		33418: 65354,
		33419: 65355,
		33420: 65356,
		33421: 65357,
		33422: 65358,
		33423: 65359,
		33424: 65360,
		33425: 65361,
		33426: 65362,
		33427: 65363,
		33428: 65364,
		33429: 65365,
		33430: 65366,
		33431: 65367,
		33432: 65368,
		33433: 65369,
		33434: 65370,
		33439: 12353,
		33440: 12354,
		33441: 12355,
		33442: 12356,
		33443: 12357,
		33444: 12358,
		33445: 12359,
		33446: 12360,
		33447: 12361,
		33448: 12362,
		33449: 12363,
		33450: 12364,
		33451: 12365,
		33452: 12366,
		33453: 12367,
		33454: 12368,
		33455: 12369,
		33456: 12370,
		33457: 12371,
		33458: 12372,
		33459: 12373,
		33460: 12374,
		33461: 12375,
		33462: 12376,
		33463: 12377,
		33464: 12378,
		33465: 12379,
		33466: 12380,
		33467: 12381,
		33468: 12382,
		33469: 12383,
		33470: 12384,
		33471: 12385,
		33472: 12386,
		33473: 12387,
		33474: 12388,
		33475: 12389,
		33476: 12390,
		33477: 12391,
		33478: 12392,
		33479: 12393,
		33480: 12394,
		33481: 12395,
		33482: 12396,
		33483: 12397,
		33484: 12398,
		33485: 12399,
		33486: 12400,
		33487: 12401,
		33488: 12402,
		33489: 12403,
		33490: 12404,
		33491: 12405,
		33492: 12406,
		33493: 12407,
		33494: 12408,
		33495: 12409,
		33496: 12410,
		33497: 12411,
		33498: 12412,
		33499: 12413,
		33500: 12414,
		33501: 12415,
		33502: 12416,
		33503: 12417,
		33504: 12418,
		33505: 12419,
		33506: 12420,
		33507: 12421,
		33508: 12422,
		33509: 12423,
		33510: 12424,
		33511: 12425,
		33512: 12426,
		33513: 12427,
		33514: 12428,
		33515: 12429,
		33516: 12430,
		33517: 12431,
		33518: 12432,
		33519: 12433,
		33520: 12434,
		33521: 12435,
		33600: 12449,
		33601: 12450,
		33602: 12451,
		33603: 12452,
		33604: 12453,
		33605: 12454,
		33606: 12455,
		33607: 12456,
		33608: 12457,
		33609: 12458,
		33610: 12459,
		33611: 12460,
		33612: 12461,
		33613: 12462,
		33614: 12463,
		33615: 12464,
		33616: 12465,
		33617: 12466,
		33618: 12467,
		33619: 12468,
		33620: 12469,
		33621: 12470,
		33622: 12471,
		33623: 12472,
		33624: 12473,
		33625: 12474,
		33626: 12475,
		33627: 12476,
		33628: 12477,
		33629: 12478,
		33630: 12479,
		33631: 12480,
		33632: 12481,
		33633: 12482,
		33634: 12483,
		33635: 12484,
		33636: 12485,
		33637: 12486,
		33638: 12487,
		33639: 12488,
		33640: 12489,
		33641: 12490,
		33642: 12491,
		33643: 12492,
		33644: 12493,
		33645: 12494,
		33646: 12495,
		33647: 12496,
		33648: 12497,
		33649: 12498,
		33650: 12499,
		33651: 12500,
		33652: 12501,
		33653: 12502,
		33654: 12503,
		33655: 12504,
		33656: 12505,
		33657: 12506,
		33658: 12507,
		33659: 12508,
		33660: 12509,
		33661: 12510,
		33662: 12511,
		33664: 12512,
		33665: 12513,
		33666: 12514,
		33667: 12515,
		33668: 12516,
		33669: 12517,
		33670: 12518,
		33671: 12519,
		33672: 12520,
		33673: 12521,
		33674: 12522,
		33675: 12523,
		33676: 12524,
		33677: 12525,
		33678: 12526,
		33679: 12527,
		33680: 12528,
		33681: 12529,
		33682: 12530,
		33683: 12531,
		33684: 12532,
		33685: 12533,
		33686: 12534,
		33695: 913,
		33696: 914,
		33697: 915,
		33698: 916,
		33699: 917,
		33700: 918,
		33701: 919,
		33702: 920,
		33703: 921,
		33704: 922,
		33705: 923,
		33706: 924,
		33707: 925,
		33708: 926,
		33709: 927,
		33710: 928,
		33711: 929,
		33712: 931,
		33713: 932,
		33714: 933,
		33715: 934,
		33716: 935,
		33717: 936,
		33718: 937,
		33727: 945,
		33728: 946,
		33729: 947,
		33730: 948,
		33731: 949,
		33732: 950,
		33733: 951,
		33734: 952,
		33735: 953,
		33736: 954,
		33737: 955,
		33738: 956,
		33739: 957,
		33740: 958,
		33741: 959,
		33742: 960,
		33743: 961,
		33744: 963,
		33745: 964,
		33746: 965,
		33747: 966,
		33748: 967,
		33749: 968,
		33750: 969,
		33856: 1040,
		33857: 1041,
		33858: 1042,
		33859: 1043,
		33860: 1044,
		33861: 1045,
		33862: 1025,
		33863: 1046,
		33864: 1047,
		33865: 1048,
		33866: 1049,
		33867: 1050,
		33868: 1051,
		33869: 1052,
		33870: 1053,
		33871: 1054,
		33872: 1055,
		33873: 1056,
		33874: 1057,
		33875: 1058,
		33876: 1059,
		33877: 1060,
		33878: 1061,
		33879: 1062,
		33880: 1063,
		33881: 1064,
		33882: 1065,
		33883: 1066,
		33884: 1067,
		33885: 1068,
		33886: 1069,
		33887: 1070,
		33888: 1071,
		33904: 1072,
		33905: 1073,
		33906: 1074,
		33907: 1075,
		33908: 1076,
		33909: 1077,
		33910: 1105,
		33911: 1078,
		33912: 1079,
		33913: 1080,
		33914: 1081,
		33915: 1082,
		33916: 1083,
		33917: 1084,
		33918: 1085,
		33920: 1086,
		33921: 1087,
		33922: 1088,
		33923: 1089,
		33924: 1090,
		33925: 1091,
		33926: 1092,
		33927: 1093,
		33928: 1094,
		33929: 1095,
		33930: 1096,
		33931: 1097,
		33932: 1098,
		33933: 1099,
		33934: 1100,
		33935: 1101,
		33936: 1102,
		33937: 1103,
		33951: 9472,
		33952: 9474,
		33953: 9484,
		33954: 9488,
		33955: 9496,
		33956: 9492,
		33957: 9500,
		33958: 9516,
		33959: 9508,
		33960: 9524,
		33961: 9532,
		33962: 9473,
		33963: 9475,
		33964: 9487,
		33965: 9491,
		33966: 9499,
		33967: 9495,
		33968: 9507,
		33969: 9523,
		33970: 9515,
		33971: 9531,
		33972: 9547,
		33973: 9504,
		33974: 9519,
		33975: 9512,
		33976: 9527,
		33977: 9535,
		33978: 9501,
		33979: 9520,
		33980: 9509,
		33981: 9528,
		33982: 9538,
		34624: 9312,
		34625: 9313,
		34626: 9314,
		34627: 9315,
		34628: 9316,
		34629: 9317,
		34630: 9318,
		34631: 9319,
		34632: 9320,
		34633: 9321,
		34634: 9322,
		34635: 9323,
		34636: 9324,
		34637: 9325,
		34638: 9326,
		34639: 9327,
		34640: 9328,
		34641: 9329,
		34642: 9330,
		34643: 9331,
		34644: 8544,
		34645: 8545,
		34646: 8546,
		34647: 8547,
		34648: 8548,
		34649: 8549,
		34650: 8550,
		34651: 8551,
		34652: 8552,
		34653: 8553,
		34655: 13129,
		34656: 13076,
		34657: 13090,
		34658: 13133,
		34659: 13080,
		34660: 13095,
		34661: 13059,
		34662: 13110,
		34663: 13137,
		34664: 13143,
		34665: 13069,
		34666: 13094,
		34667: 13091,
		34668: 13099,
		34669: 13130,
		34670: 13115,
		34671: 13212,
		34672: 13213,
		34673: 13214,
		34674: 13198,
		34675: 13199,
		34676: 13252,
		34677: 13217,
		34686: 13179,
		34688: 12317,
		34689: 12319,
		34690: 8470,
		34691: 13261,
		34692: 8481,
		34693: 12964,
		34694: 12965,
		34695: 12966,
		34696: 12967,
		34697: 12968,
		34698: 12849,
		34699: 12850,
		34700: 12857,
		34701: 13182,
		34702: 13181,
		34703: 13180,
		34704: 8786,
		34705: 8801,
		34706: 8747,
		34707: 8750,
		34708: 8721,
		34709: 8730,
		34710: 8869,
		34711: 8736,
		34712: 8735,
		34713: 8895,
		34714: 8757,
		34715: 8745,
		34716: 8746,
		34975: 20124,
		34976: 21782,
		34977: 23043,
		34978: 38463,
		34979: 21696,
		34980: 24859,
		34981: 25384,
		34982: 23030,
		34983: 36898,
		34984: 33909,
		34985: 33564,
		34986: 31312,
		34987: 24746,
		34988: 25569,
		34989: 28197,
		34990: 26093,
		34991: 33894,
		34992: 33446,
		34993: 39925,
		34994: 26771,
		34995: 22311,
		34996: 26017,
		34997: 25201,
		34998: 23451,
		34999: 22992,
		35000: 34427,
		35001: 39156,
		35002: 32098,
		35003: 32190,
		35004: 39822,
		35005: 25110,
		35006: 31903,
		35007: 34999,
		35008: 23433,
		35009: 24245,
		35010: 25353,
		35011: 26263,
		35012: 26696,
		35013: 38343,
		35014: 38797,
		35015: 26447,
		35016: 20197,
		35017: 20234,
		35018: 20301,
		35019: 20381,
		35020: 20553,
		35021: 22258,
		35022: 22839,
		35023: 22996,
		35024: 23041,
		35025: 23561,
		35026: 24799,
		35027: 24847,
		35028: 24944,
		35029: 26131,
		35030: 26885,
		35031: 28858,
		35032: 30031,
		35033: 30064,
		35034: 31227,
		35035: 32173,
		35036: 32239,
		35037: 32963,
		35038: 33806,
		35039: 34915,
		35040: 35586,
		35041: 36949,
		35042: 36986,
		35043: 21307,
		35044: 20117,
		35045: 20133,
		35046: 22495,
		35047: 32946,
		35048: 37057,
		35049: 30959,
		35050: 19968,
		35051: 22769,
		35052: 28322,
		35053: 36920,
		35054: 31282,
		35055: 33576,
		35056: 33419,
		35057: 39983,
		35058: 20801,
		35059: 21360,
		35060: 21693,
		35061: 21729,
		35062: 22240,
		35063: 23035,
		35064: 24341,
		35065: 39154,
		35066: 28139,
		35067: 32996,
		35068: 34093,
		35136: 38498,
		35137: 38512,
		35138: 38560,
		35139: 38907,
		35140: 21515,
		35141: 21491,
		35142: 23431,
		35143: 28879,
		35144: 32701,
		35145: 36802,
		35146: 38632,
		35147: 21359,
		35148: 40284,
		35149: 31418,
		35150: 19985,
		35151: 30867,
		35152: 33276,
		35153: 28198,
		35154: 22040,
		35155: 21764,
		35156: 27421,
		35157: 34074,
		35158: 39995,
		35159: 23013,
		35160: 21417,
		35161: 28006,
		35162: 29916,
		35163: 38287,
		35164: 22082,
		35165: 20113,
		35166: 36939,
		35167: 38642,
		35168: 33615,
		35169: 39180,
		35170: 21473,
		35171: 21942,
		35172: 23344,
		35173: 24433,
		35174: 26144,
		35175: 26355,
		35176: 26628,
		35177: 27704,
		35178: 27891,
		35179: 27945,
		35180: 29787,
		35181: 30408,
		35182: 31310,
		35183: 38964,
		35184: 33521,
		35185: 34907,
		35186: 35424,
		35187: 37613,
		35188: 28082,
		35189: 30123,
		35190: 30410,
		35191: 39365,
		35192: 24742,
		35193: 35585,
		35194: 36234,
		35195: 38322,
		35196: 27022,
		35197: 21421,
		35198: 20870,
		35200: 22290,
		35201: 22576,
		35202: 22852,
		35203: 23476,
		35204: 24310,
		35205: 24616,
		35206: 25513,
		35207: 25588,
		35208: 27839,
		35209: 28436,
		35210: 28814,
		35211: 28948,
		35212: 29017,
		35213: 29141,
		35214: 29503,
		35215: 32257,
		35216: 33398,
		35217: 33489,
		35218: 34199,
		35219: 36960,
		35220: 37467,
		35221: 40219,
		35222: 22633,
		35223: 26044,
		35224: 27738,
		35225: 29989,
		35226: 20985,
		35227: 22830,
		35228: 22885,
		35229: 24448,
		35230: 24540,
		35231: 25276,
		35232: 26106,
		35233: 27178,
		35234: 27431,
		35235: 27572,
		35236: 29579,
		35237: 32705,
		35238: 35158,
		35239: 40236,
		35240: 40206,
		35241: 40644,
		35242: 23713,
		35243: 27798,
		35244: 33659,
		35245: 20740,
		35246: 23627,
		35247: 25014,
		35248: 33222,
		35249: 26742,
		35250: 29281,
		35251: 20057,
		35252: 20474,
		35253: 21368,
		35254: 24681,
		35255: 28201,
		35256: 31311,
		35257: 38899,
		35258: 19979,
		35259: 21270,
		35260: 20206,
		35261: 20309,
		35262: 20285,
		35263: 20385,
		35264: 20339,
		35265: 21152,
		35266: 21487,
		35267: 22025,
		35268: 22799,
		35269: 23233,
		35270: 23478,
		35271: 23521,
		35272: 31185,
		35273: 26247,
		35274: 26524,
		35275: 26550,
		35276: 27468,
		35277: 27827,
		35278: 28779,
		35279: 29634,
		35280: 31117,
		35281: 31166,
		35282: 31292,
		35283: 31623,
		35284: 33457,
		35285: 33499,
		35286: 33540,
		35287: 33655,
		35288: 33775,
		35289: 33747,
		35290: 34662,
		35291: 35506,
		35292: 22057,
		35293: 36008,
		35294: 36838,
		35295: 36942,
		35296: 38686,
		35297: 34442,
		35298: 20420,
		35299: 23784,
		35300: 25105,
		35301: 29273,
		35302: 30011,
		35303: 33253,
		35304: 33469,
		35305: 34558,
		35306: 36032,
		35307: 38597,
		35308: 39187,
		35309: 39381,
		35310: 20171,
		35311: 20250,
		35312: 35299,
		35313: 22238,
		35314: 22602,
		35315: 22730,
		35316: 24315,
		35317: 24555,
		35318: 24618,
		35319: 24724,
		35320: 24674,
		35321: 25040,
		35322: 25106,
		35323: 25296,
		35324: 25913,
		35392: 39745,
		35393: 26214,
		35394: 26800,
		35395: 28023,
		35396: 28784,
		35397: 30028,
		35398: 30342,
		35399: 32117,
		35400: 33445,
		35401: 34809,
		35402: 38283,
		35403: 38542,
		35404: 35997,
		35405: 20977,
		35406: 21182,
		35407: 22806,
		35408: 21683,
		35409: 23475,
		35410: 23830,
		35411: 24936,
		35412: 27010,
		35413: 28079,
		35414: 30861,
		35415: 33995,
		35416: 34903,
		35417: 35442,
		35418: 37799,
		35419: 39608,
		35420: 28012,
		35421: 39336,
		35422: 34521,
		35423: 22435,
		35424: 26623,
		35425: 34510,
		35426: 37390,
		35427: 21123,
		35428: 22151,
		35429: 21508,
		35430: 24275,
		35431: 25313,
		35432: 25785,
		35433: 26684,
		35434: 26680,
		35435: 27579,
		35436: 29554,
		35437: 30906,
		35438: 31339,
		35439: 35226,
		35440: 35282,
		35441: 36203,
		35442: 36611,
		35443: 37101,
		35444: 38307,
		35445: 38548,
		35446: 38761,
		35447: 23398,
		35448: 23731,
		35449: 27005,
		35450: 38989,
		35451: 38990,
		35452: 25499,
		35453: 31520,
		35454: 27179,
		35456: 27263,
		35457: 26806,
		35458: 39949,
		35459: 28511,
		35460: 21106,
		35461: 21917,
		35462: 24688,
		35463: 25324,
		35464: 27963,
		35465: 28167,
		35466: 28369,
		35467: 33883,
		35468: 35088,
		35469: 36676,
		35470: 19988,
		35471: 39993,
		35472: 21494,
		35473: 26907,
		35474: 27194,
		35475: 38788,
		35476: 26666,
		35477: 20828,
		35478: 31427,
		35479: 33970,
		35480: 37340,
		35481: 37772,
		35482: 22107,
		35483: 40232,
		35484: 26658,
		35485: 33541,
		35486: 33841,
		35487: 31909,
		35488: 21000,
		35489: 33477,
		35490: 29926,
		35491: 20094,
		35492: 20355,
		35493: 20896,
		35494: 23506,
		35495: 21002,
		35496: 21208,
		35497: 21223,
		35498: 24059,
		35499: 21914,
		35500: 22570,
		35501: 23014,
		35502: 23436,
		35503: 23448,
		35504: 23515,
		35505: 24178,
		35506: 24185,
		35507: 24739,
		35508: 24863,
		35509: 24931,
		35510: 25022,
		35511: 25563,
		35512: 25954,
		35513: 26577,
		35514: 26707,
		35515: 26874,
		35516: 27454,
		35517: 27475,
		35518: 27735,
		35519: 28450,
		35520: 28567,
		35521: 28485,
		35522: 29872,
		35523: 29976,
		35524: 30435,
		35525: 30475,
		35526: 31487,
		35527: 31649,
		35528: 31777,
		35529: 32233,
		35530: 32566,
		35531: 32752,
		35532: 32925,
		35533: 33382,
		35534: 33694,
		35535: 35251,
		35536: 35532,
		35537: 36011,
		35538: 36996,
		35539: 37969,
		35540: 38291,
		35541: 38289,
		35542: 38306,
		35543: 38501,
		35544: 38867,
		35545: 39208,
		35546: 33304,
		35547: 20024,
		35548: 21547,
		35549: 23736,
		35550: 24012,
		35551: 29609,
		35552: 30284,
		35553: 30524,
		35554: 23721,
		35555: 32747,
		35556: 36107,
		35557: 38593,
		35558: 38929,
		35559: 38996,
		35560: 39000,
		35561: 20225,
		35562: 20238,
		35563: 21361,
		35564: 21916,
		35565: 22120,
		35566: 22522,
		35567: 22855,
		35568: 23305,
		35569: 23492,
		35570: 23696,
		35571: 24076,
		35572: 24190,
		35573: 24524,
		35574: 25582,
		35575: 26426,
		35576: 26071,
		35577: 26082,
		35578: 26399,
		35579: 26827,
		35580: 26820,
		35648: 27231,
		35649: 24112,
		35650: 27589,
		35651: 27671,
		35652: 27773,
		35653: 30079,
		35654: 31048,
		35655: 23395,
		35656: 31232,
		35657: 32000,
		35658: 24509,
		35659: 35215,
		35660: 35352,
		35661: 36020,
		35662: 36215,
		35663: 36556,
		35664: 36637,
		35665: 39138,
		35666: 39438,
		35667: 39740,
		35668: 20096,
		35669: 20605,
		35670: 20736,
		35671: 22931,
		35672: 23452,
		35673: 25135,
		35674: 25216,
		35675: 25836,
		35676: 27450,
		35677: 29344,
		35678: 30097,
		35679: 31047,
		35680: 32681,
		35681: 34811,
		35682: 35516,
		35683: 35696,
		35684: 25516,
		35685: 33738,
		35686: 38816,
		35687: 21513,
		35688: 21507,
		35689: 21931,
		35690: 26708,
		35691: 27224,
		35692: 35440,
		35693: 30759,
		35694: 26485,
		35695: 40653,
		35696: 21364,
		35697: 23458,
		35698: 33050,
		35699: 34384,
		35700: 36870,
		35701: 19992,
		35702: 20037,
		35703: 20167,
		35704: 20241,
		35705: 21450,
		35706: 21560,
		35707: 23470,
		35708: 24339,
		35709: 24613,
		35710: 25937,
		35712: 26429,
		35713: 27714,
		35714: 27762,
		35715: 27875,
		35716: 28792,
		35717: 29699,
		35718: 31350,
		35719: 31406,
		35720: 31496,
		35721: 32026,
		35722: 31998,
		35723: 32102,
		35724: 26087,
		35725: 29275,
		35726: 21435,
		35727: 23621,
		35728: 24040,
		35729: 25298,
		35730: 25312,
		35731: 25369,
		35732: 28192,
		35733: 34394,
		35734: 35377,
		35735: 36317,
		35736: 37624,
		35737: 28417,
		35738: 31142,
		35739: 39770,
		35740: 20136,
		35741: 20139,
		35742: 20140,
		35743: 20379,
		35744: 20384,
		35745: 20689,
		35746: 20807,
		35747: 31478,
		35748: 20849,
		35749: 20982,
		35750: 21332,
		35751: 21281,
		35752: 21375,
		35753: 21483,
		35754: 21932,
		35755: 22659,
		35756: 23777,
		35757: 24375,
		35758: 24394,
		35759: 24623,
		35760: 24656,
		35761: 24685,
		35762: 25375,
		35763: 25945,
		35764: 27211,
		35765: 27841,
		35766: 29378,
		35767: 29421,
		35768: 30703,
		35769: 33016,
		35770: 33029,
		35771: 33288,
		35772: 34126,
		35773: 37111,
		35774: 37857,
		35775: 38911,
		35776: 39255,
		35777: 39514,
		35778: 20208,
		35779: 20957,
		35780: 23597,
		35781: 26241,
		35782: 26989,
		35783: 23616,
		35784: 26354,
		35785: 26997,
		35786: 29577,
		35787: 26704,
		35788: 31873,
		35789: 20677,
		35790: 21220,
		35791: 22343,
		35792: 24062,
		35793: 37670,
		35794: 26020,
		35795: 27427,
		35796: 27453,
		35797: 29748,
		35798: 31105,
		35799: 31165,
		35800: 31563,
		35801: 32202,
		35802: 33465,
		35803: 33740,
		35804: 34943,
		35805: 35167,
		35806: 35641,
		35807: 36817,
		35808: 37329,
		35809: 21535,
		35810: 37504,
		35811: 20061,
		35812: 20534,
		35813: 21477,
		35814: 21306,
		35815: 29399,
		35816: 29590,
		35817: 30697,
		35818: 33510,
		35819: 36527,
		35820: 39366,
		35821: 39368,
		35822: 39378,
		35823: 20855,
		35824: 24858,
		35825: 34398,
		35826: 21936,
		35827: 31354,
		35828: 20598,
		35829: 23507,
		35830: 36935,
		35831: 38533,
		35832: 20018,
		35833: 27355,
		35834: 37351,
		35835: 23633,
		35836: 23624,
		35904: 25496,
		35905: 31391,
		35906: 27795,
		35907: 38772,
		35908: 36705,
		35909: 31402,
		35910: 29066,
		35911: 38536,
		35912: 31874,
		35913: 26647,
		35914: 32368,
		35915: 26705,
		35916: 37740,
		35917: 21234,
		35918: 21531,
		35919: 34219,
		35920: 35347,
		35921: 32676,
		35922: 36557,
		35923: 37089,
		35924: 21350,
		35925: 34952,
		35926: 31041,
		35927: 20418,
		35928: 20670,
		35929: 21009,
		35930: 20804,
		35931: 21843,
		35932: 22317,
		35933: 29674,
		35934: 22411,
		35935: 22865,
		35936: 24418,
		35937: 24452,
		35938: 24693,
		35939: 24950,
		35940: 24935,
		35941: 25001,
		35942: 25522,
		35943: 25658,
		35944: 25964,
		35945: 26223,
		35946: 26690,
		35947: 28179,
		35948: 30054,
		35949: 31293,
		35950: 31995,
		35951: 32076,
		35952: 32153,
		35953: 32331,
		35954: 32619,
		35955: 33550,
		35956: 33610,
		35957: 34509,
		35958: 35336,
		35959: 35427,
		35960: 35686,
		35961: 36605,
		35962: 38938,
		35963: 40335,
		35964: 33464,
		35965: 36814,
		35966: 39912,
		35968: 21127,
		35969: 25119,
		35970: 25731,
		35971: 28608,
		35972: 38553,
		35973: 26689,
		35974: 20625,
		35975: 27424,
		35976: 27770,
		35977: 28500,
		35978: 31348,
		35979: 32080,
		35980: 34880,
		35981: 35363,
		35982: 26376,
		35983: 20214,
		35984: 20537,
		35985: 20518,
		35986: 20581,
		35987: 20860,
		35988: 21048,
		35989: 21091,
		35990: 21927,
		35991: 22287,
		35992: 22533,
		35993: 23244,
		35994: 24314,
		35995: 25010,
		35996: 25080,
		35997: 25331,
		35998: 25458,
		35999: 26908,
		36000: 27177,
		36001: 29309,
		36002: 29356,
		36003: 29486,
		36004: 30740,
		36005: 30831,
		36006: 32121,
		36007: 30476,
		36008: 32937,
		36009: 35211,
		36010: 35609,
		36011: 36066,
		36012: 36562,
		36013: 36963,
		36014: 37749,
		36015: 38522,
		36016: 38997,
		36017: 39443,
		36018: 40568,
		36019: 20803,
		36020: 21407,
		36021: 21427,
		36022: 24187,
		36023: 24358,
		36024: 28187,
		36025: 28304,
		36026: 29572,
		36027: 29694,
		36028: 32067,
		36029: 33335,
		36030: 35328,
		36031: 35578,
		36032: 38480,
		36033: 20046,
		36034: 20491,
		36035: 21476,
		36036: 21628,
		36037: 22266,
		36038: 22993,
		36039: 23396,
		36040: 24049,
		36041: 24235,
		36042: 24359,
		36043: 25144,
		36044: 25925,
		36045: 26543,
		36046: 28246,
		36047: 29392,
		36048: 31946,
		36049: 34996,
		36050: 32929,
		36051: 32993,
		36052: 33776,
		36053: 34382,
		36054: 35463,
		36055: 36328,
		36056: 37431,
		36057: 38599,
		36058: 39015,
		36059: 40723,
		36060: 20116,
		36061: 20114,
		36062: 20237,
		36063: 21320,
		36064: 21577,
		36065: 21566,
		36066: 23087,
		36067: 24460,
		36068: 24481,
		36069: 24735,
		36070: 26791,
		36071: 27278,
		36072: 29786,
		36073: 30849,
		36074: 35486,
		36075: 35492,
		36076: 35703,
		36077: 37264,
		36078: 20062,
		36079: 39881,
		36080: 20132,
		36081: 20348,
		36082: 20399,
		36083: 20505,
		36084: 20502,
		36085: 20809,
		36086: 20844,
		36087: 21151,
		36088: 21177,
		36089: 21246,
		36090: 21402,
		36091: 21475,
		36092: 21521,
		36160: 21518,
		36161: 21897,
		36162: 22353,
		36163: 22434,
		36164: 22909,
		36165: 23380,
		36166: 23389,
		36167: 23439,
		36168: 24037,
		36169: 24039,
		36170: 24055,
		36171: 24184,
		36172: 24195,
		36173: 24218,
		36174: 24247,
		36175: 24344,
		36176: 24658,
		36177: 24908,
		36178: 25239,
		36179: 25304,
		36180: 25511,
		36181: 25915,
		36182: 26114,
		36183: 26179,
		36184: 26356,
		36185: 26477,
		36186: 26657,
		36187: 26775,
		36188: 27083,
		36189: 27743,
		36190: 27946,
		36191: 28009,
		36192: 28207,
		36193: 28317,
		36194: 30002,
		36195: 30343,
		36196: 30828,
		36197: 31295,
		36198: 31968,
		36199: 32005,
		36200: 32024,
		36201: 32094,
		36202: 32177,
		36203: 32789,
		36204: 32771,
		36205: 32943,
		36206: 32945,
		36207: 33108,
		36208: 33167,
		36209: 33322,
		36210: 33618,
		36211: 34892,
		36212: 34913,
		36213: 35611,
		36214: 36002,
		36215: 36092,
		36216: 37066,
		36217: 37237,
		36218: 37489,
		36219: 30783,
		36220: 37628,
		36221: 38308,
		36222: 38477,
		36224: 38917,
		36225: 39321,
		36226: 39640,
		36227: 40251,
		36228: 21083,
		36229: 21163,
		36230: 21495,
		36231: 21512,
		36232: 22741,
		36233: 25335,
		36234: 28640,
		36235: 35946,
		36236: 36703,
		36237: 40633,
		36238: 20811,
		36239: 21051,
		36240: 21578,
		36241: 22269,
		36242: 31296,
		36243: 37239,
		36244: 40288,
		36245: 40658,
		36246: 29508,
		36247: 28425,
		36248: 33136,
		36249: 29969,
		36250: 24573,
		36251: 24794,
		36252: 39592,
		36253: 29403,
		36254: 36796,
		36255: 27492,
		36256: 38915,
		36257: 20170,
		36258: 22256,
		36259: 22372,
		36260: 22718,
		36261: 23130,
		36262: 24680,
		36263: 25031,
		36264: 26127,
		36265: 26118,
		36266: 26681,
		36267: 26801,
		36268: 28151,
		36269: 30165,
		36270: 32058,
		36271: 33390,
		36272: 39746,
		36273: 20123,
		36274: 20304,
		36275: 21449,
		36276: 21766,
		36277: 23919,
		36278: 24038,
		36279: 24046,
		36280: 26619,
		36281: 27801,
		36282: 29811,
		36283: 30722,
		36284: 35408,
		36285: 37782,
		36286: 35039,
		36287: 22352,
		36288: 24231,
		36289: 25387,
		36290: 20661,
		36291: 20652,
		36292: 20877,
		36293: 26368,
		36294: 21705,
		36295: 22622,
		36296: 22971,
		36297: 23472,
		36298: 24425,
		36299: 25165,
		36300: 25505,
		36301: 26685,
		36302: 27507,
		36303: 28168,
		36304: 28797,
		36305: 37319,
		36306: 29312,
		36307: 30741,
		36308: 30758,
		36309: 31085,
		36310: 25998,
		36311: 32048,
		36312: 33756,
		36313: 35009,
		36314: 36617,
		36315: 38555,
		36316: 21092,
		36317: 22312,
		36318: 26448,
		36319: 32618,
		36320: 36001,
		36321: 20916,
		36322: 22338,
		36323: 38442,
		36324: 22586,
		36325: 27018,
		36326: 32948,
		36327: 21682,
		36328: 23822,
		36329: 22524,
		36330: 30869,
		36331: 40442,
		36332: 20316,
		36333: 21066,
		36334: 21643,
		36335: 25662,
		36336: 26152,
		36337: 26388,
		36338: 26613,
		36339: 31364,
		36340: 31574,
		36341: 32034,
		36342: 37679,
		36343: 26716,
		36344: 39853,
		36345: 31545,
		36346: 21273,
		36347: 20874,
		36348: 21047,
		36416: 23519,
		36417: 25334,
		36418: 25774,
		36419: 25830,
		36420: 26413,
		36421: 27578,
		36422: 34217,
		36423: 38609,
		36424: 30352,
		36425: 39894,
		36426: 25420,
		36427: 37638,
		36428: 39851,
		36429: 30399,
		36430: 26194,
		36431: 19977,
		36432: 20632,
		36433: 21442,
		36434: 23665,
		36435: 24808,
		36436: 25746,
		36437: 25955,
		36438: 26719,
		36439: 29158,
		36440: 29642,
		36441: 29987,
		36442: 31639,
		36443: 32386,
		36444: 34453,
		36445: 35715,
		36446: 36059,
		36447: 37240,
		36448: 39184,
		36449: 26028,
		36450: 26283,
		36451: 27531,
		36452: 20181,
		36453: 20180,
		36454: 20282,
		36455: 20351,
		36456: 21050,
		36457: 21496,
		36458: 21490,
		36459: 21987,
		36460: 22235,
		36461: 22763,
		36462: 22987,
		36463: 22985,
		36464: 23039,
		36465: 23376,
		36466: 23629,
		36467: 24066,
		36468: 24107,
		36469: 24535,
		36470: 24605,
		36471: 25351,
		36472: 25903,
		36473: 23388,
		36474: 26031,
		36475: 26045,
		36476: 26088,
		36477: 26525,
		36478: 27490,
		36480: 27515,
		36481: 27663,
		36482: 29509,
		36483: 31049,
		36484: 31169,
		36485: 31992,
		36486: 32025,
		36487: 32043,
		36488: 32930,
		36489: 33026,
		36490: 33267,
		36491: 35222,
		36492: 35422,
		36493: 35433,
		36494: 35430,
		36495: 35468,
		36496: 35566,
		36497: 36039,
		36498: 36060,
		36499: 38604,
		36500: 39164,
		36501: 27503,
		36502: 20107,
		36503: 20284,
		36504: 20365,
		36505: 20816,
		36506: 23383,
		36507: 23546,
		36508: 24904,
		36509: 25345,
		36510: 26178,
		36511: 27425,
		36512: 28363,
		36513: 27835,
		36514: 29246,
		36515: 29885,
		36516: 30164,
		36517: 30913,
		36518: 31034,
		36519: 32780,
		36520: 32819,
		36521: 33258,
		36522: 33940,
		36523: 36766,
		36524: 27728,
		36525: 40575,
		36526: 24335,
		36527: 35672,
		36528: 40235,
		36529: 31482,
		36530: 36600,
		36531: 23437,
		36532: 38635,
		36533: 19971,
		36534: 21489,
		36535: 22519,
		36536: 22833,
		36537: 23241,
		36538: 23460,
		36539: 24713,
		36540: 28287,
		36541: 28422,
		36542: 30142,
		36543: 36074,
		36544: 23455,
		36545: 34048,
		36546: 31712,
		36547: 20594,
		36548: 26612,
		36549: 33437,
		36550: 23649,
		36551: 34122,
		36552: 32286,
		36553: 33294,
		36554: 20889,
		36555: 23556,
		36556: 25448,
		36557: 36198,
		36558: 26012,
		36559: 29038,
		36560: 31038,
		36561: 32023,
		36562: 32773,
		36563: 35613,
		36564: 36554,
		36565: 36974,
		36566: 34503,
		36567: 37034,
		36568: 20511,
		36569: 21242,
		36570: 23610,
		36571: 26451,
		36572: 28796,
		36573: 29237,
		36574: 37196,
		36575: 37320,
		36576: 37675,
		36577: 33509,
		36578: 23490,
		36579: 24369,
		36580: 24825,
		36581: 20027,
		36582: 21462,
		36583: 23432,
		36584: 25163,
		36585: 26417,
		36586: 27530,
		36587: 29417,
		36588: 29664,
		36589: 31278,
		36590: 33131,
		36591: 36259,
		36592: 37202,
		36593: 39318,
		36594: 20754,
		36595: 21463,
		36596: 21610,
		36597: 23551,
		36598: 25480,
		36599: 27193,
		36600: 32172,
		36601: 38656,
		36602: 22234,
		36603: 21454,
		36604: 21608,
		36672: 23447,
		36673: 23601,
		36674: 24030,
		36675: 20462,
		36676: 24833,
		36677: 25342,
		36678: 27954,
		36679: 31168,
		36680: 31179,
		36681: 32066,
		36682: 32333,
		36683: 32722,
		36684: 33261,
		36685: 33311,
		36686: 33936,
		36687: 34886,
		36688: 35186,
		36689: 35728,
		36690: 36468,
		36691: 36655,
		36692: 36913,
		36693: 37195,
		36694: 37228,
		36695: 38598,
		36696: 37276,
		36697: 20160,
		36698: 20303,
		36699: 20805,
		36700: 21313,
		36701: 24467,
		36702: 25102,
		36703: 26580,
		36704: 27713,
		36705: 28171,
		36706: 29539,
		36707: 32294,
		36708: 37325,
		36709: 37507,
		36710: 21460,
		36711: 22809,
		36712: 23487,
		36713: 28113,
		36714: 31069,
		36715: 32302,
		36716: 31899,
		36717: 22654,
		36718: 29087,
		36719: 20986,
		36720: 34899,
		36721: 36848,
		36722: 20426,
		36723: 23803,
		36724: 26149,
		36725: 30636,
		36726: 31459,
		36727: 33308,
		36728: 39423,
		36729: 20934,
		36730: 24490,
		36731: 26092,
		36732: 26991,
		36733: 27529,
		36734: 28147,
		36736: 28310,
		36737: 28516,
		36738: 30462,
		36739: 32020,
		36740: 24033,
		36741: 36981,
		36742: 37255,
		36743: 38918,
		36744: 20966,
		36745: 21021,
		36746: 25152,
		36747: 26257,
		36748: 26329,
		36749: 28186,
		36750: 24246,
		36751: 32210,
		36752: 32626,
		36753: 26360,
		36754: 34223,
		36755: 34295,
		36756: 35576,
		36757: 21161,
		36758: 21465,
		36759: 22899,
		36760: 24207,
		36761: 24464,
		36762: 24661,
		36763: 37604,
		36764: 38500,
		36765: 20663,
		36766: 20767,
		36767: 21213,
		36768: 21280,
		36769: 21319,
		36770: 21484,
		36771: 21736,
		36772: 21830,
		36773: 21809,
		36774: 22039,
		36775: 22888,
		36776: 22974,
		36777: 23100,
		36778: 23477,
		36779: 23558,
		36780: 23567,
		36781: 23569,
		36782: 23578,
		36783: 24196,
		36784: 24202,
		36785: 24288,
		36786: 24432,
		36787: 25215,
		36788: 25220,
		36789: 25307,
		36790: 25484,
		36791: 25463,
		36792: 26119,
		36793: 26124,
		36794: 26157,
		36795: 26230,
		36796: 26494,
		36797: 26786,
		36798: 27167,
		36799: 27189,
		36800: 27836,
		36801: 28040,
		36802: 28169,
		36803: 28248,
		36804: 28988,
		36805: 28966,
		36806: 29031,
		36807: 30151,
		36808: 30465,
		36809: 30813,
		36810: 30977,
		36811: 31077,
		36812: 31216,
		36813: 31456,
		36814: 31505,
		36815: 31911,
		36816: 32057,
		36817: 32918,
		36818: 33750,
		36819: 33931,
		36820: 34121,
		36821: 34909,
		36822: 35059,
		36823: 35359,
		36824: 35388,
		36825: 35412,
		36826: 35443,
		36827: 35937,
		36828: 36062,
		36829: 37284,
		36830: 37478,
		36831: 37758,
		36832: 37912,
		36833: 38556,
		36834: 38808,
		36835: 19978,
		36836: 19976,
		36837: 19998,
		36838: 20055,
		36839: 20887,
		36840: 21104,
		36841: 22478,
		36842: 22580,
		36843: 22732,
		36844: 23330,
		36845: 24120,
		36846: 24773,
		36847: 25854,
		36848: 26465,
		36849: 26454,
		36850: 27972,
		36851: 29366,
		36852: 30067,
		36853: 31331,
		36854: 33976,
		36855: 35698,
		36856: 37304,
		36857: 37664,
		36858: 22065,
		36859: 22516,
		36860: 39166,
		36928: 25325,
		36929: 26893,
		36930: 27542,
		36931: 29165,
		36932: 32340,
		36933: 32887,
		36934: 33394,
		36935: 35302,
		36936: 39135,
		36937: 34645,
		36938: 36785,
		36939: 23611,
		36940: 20280,
		36941: 20449,
		36942: 20405,
		36943: 21767,
		36944: 23072,
		36945: 23517,
		36946: 23529,
		36947: 24515,
		36948: 24910,
		36949: 25391,
		36950: 26032,
		36951: 26187,
		36952: 26862,
		36953: 27035,
		36954: 28024,
		36955: 28145,
		36956: 30003,
		36957: 30137,
		36958: 30495,
		36959: 31070,
		36960: 31206,
		36961: 32051,
		36962: 33251,
		36963: 33455,
		36964: 34218,
		36965: 35242,
		36966: 35386,
		36967: 36523,
		36968: 36763,
		36969: 36914,
		36970: 37341,
		36971: 38663,
		36972: 20154,
		36973: 20161,
		36974: 20995,
		36975: 22645,
		36976: 22764,
		36977: 23563,
		36978: 29978,
		36979: 23613,
		36980: 33102,
		36981: 35338,
		36982: 36805,
		36983: 38499,
		36984: 38765,
		36985: 31525,
		36986: 35535,
		36987: 38920,
		36988: 37218,
		36989: 22259,
		36990: 21416,
		36992: 36887,
		36993: 21561,
		36994: 22402,
		36995: 24101,
		36996: 25512,
		36997: 27700,
		36998: 28810,
		36999: 30561,
		37000: 31883,
		37001: 32736,
		37002: 34928,
		37003: 36930,
		37004: 37204,
		37005: 37648,
		37006: 37656,
		37007: 38543,
		37008: 29790,
		37009: 39620,
		37010: 23815,
		37011: 23913,
		37012: 25968,
		37013: 26530,
		37014: 36264,
		37015: 38619,
		37016: 25454,
		37017: 26441,
		37018: 26905,
		37019: 33733,
		37020: 38935,
		37021: 38592,
		37022: 35070,
		37023: 28548,
		37024: 25722,
		37025: 23544,
		37026: 19990,
		37027: 28716,
		37028: 30045,
		37029: 26159,
		37030: 20932,
		37031: 21046,
		37032: 21218,
		37033: 22995,
		37034: 24449,
		37035: 24615,
		37036: 25104,
		37037: 25919,
		37038: 25972,
		37039: 26143,
		37040: 26228,
		37041: 26866,
		37042: 26646,
		37043: 27491,
		37044: 28165,
		37045: 29298,
		37046: 29983,
		37047: 30427,
		37048: 31934,
		37049: 32854,
		37050: 22768,
		37051: 35069,
		37052: 35199,
		37053: 35488,
		37054: 35475,
		37055: 35531,
		37056: 36893,
		37057: 37266,
		37058: 38738,
		37059: 38745,
		37060: 25993,
		37061: 31246,
		37062: 33030,
		37063: 38587,
		37064: 24109,
		37065: 24796,
		37066: 25114,
		37067: 26021,
		37068: 26132,
		37069: 26512,
		37070: 30707,
		37071: 31309,
		37072: 31821,
		37073: 32318,
		37074: 33034,
		37075: 36012,
		37076: 36196,
		37077: 36321,
		37078: 36447,
		37079: 30889,
		37080: 20999,
		37081: 25305,
		37082: 25509,
		37083: 25666,
		37084: 25240,
		37085: 35373,
		37086: 31363,
		37087: 31680,
		37088: 35500,
		37089: 38634,
		37090: 32118,
		37091: 33292,
		37092: 34633,
		37093: 20185,
		37094: 20808,
		37095: 21315,
		37096: 21344,
		37097: 23459,
		37098: 23554,
		37099: 23574,
		37100: 24029,
		37101: 25126,
		37102: 25159,
		37103: 25776,
		37104: 26643,
		37105: 26676,
		37106: 27849,
		37107: 27973,
		37108: 27927,
		37109: 26579,
		37110: 28508,
		37111: 29006,
		37112: 29053,
		37113: 26059,
		37114: 31359,
		37115: 31661,
		37116: 32218,
		37184: 32330,
		37185: 32680,
		37186: 33146,
		37187: 33307,
		37188: 33337,
		37189: 34214,
		37190: 35438,
		37191: 36046,
		37192: 36341,
		37193: 36984,
		37194: 36983,
		37195: 37549,
		37196: 37521,
		37197: 38275,
		37198: 39854,
		37199: 21069,
		37200: 21892,
		37201: 28472,
		37202: 28982,
		37203: 20840,
		37204: 31109,
		37205: 32341,
		37206: 33203,
		37207: 31950,
		37208: 22092,
		37209: 22609,
		37210: 23720,
		37211: 25514,
		37212: 26366,
		37213: 26365,
		37214: 26970,
		37215: 29401,
		37216: 30095,
		37217: 30094,
		37218: 30990,
		37219: 31062,
		37220: 31199,
		37221: 31895,
		37222: 32032,
		37223: 32068,
		37224: 34311,
		37225: 35380,
		37226: 38459,
		37227: 36961,
		37228: 40736,
		37229: 20711,
		37230: 21109,
		37231: 21452,
		37232: 21474,
		37233: 20489,
		37234: 21930,
		37235: 22766,
		37236: 22863,
		37237: 29245,
		37238: 23435,
		37239: 23652,
		37240: 21277,
		37241: 24803,
		37242: 24819,
		37243: 25436,
		37244: 25475,
		37245: 25407,
		37246: 25531,
		37248: 25805,
		37249: 26089,
		37250: 26361,
		37251: 24035,
		37252: 27085,
		37253: 27133,
		37254: 28437,
		37255: 29157,
		37256: 20105,
		37257: 30185,
		37258: 30456,
		37259: 31379,
		37260: 31967,
		37261: 32207,
		37262: 32156,
		37263: 32865,
		37264: 33609,
		37265: 33624,
		37266: 33900,
		37267: 33980,
		37268: 34299,
		37269: 35013,
		37270: 36208,
		37271: 36865,
		37272: 36973,
		37273: 37783,
		37274: 38684,
		37275: 39442,
		37276: 20687,
		37277: 22679,
		37278: 24974,
		37279: 33235,
		37280: 34101,
		37281: 36104,
		37282: 36896,
		37283: 20419,
		37284: 20596,
		37285: 21063,
		37286: 21363,
		37287: 24687,
		37288: 25417,
		37289: 26463,
		37290: 28204,
		37291: 36275,
		37292: 36895,
		37293: 20439,
		37294: 23646,
		37295: 36042,
		37296: 26063,
		37297: 32154,
		37298: 21330,
		37299: 34966,
		37300: 20854,
		37301: 25539,
		37302: 23384,
		37303: 23403,
		37304: 23562,
		37305: 25613,
		37306: 26449,
		37307: 36956,
		37308: 20182,
		37309: 22810,
		37310: 22826,
		37311: 27760,
		37312: 35409,
		37313: 21822,
		37314: 22549,
		37315: 22949,
		37316: 24816,
		37317: 25171,
		37318: 26561,
		37319: 33333,
		37320: 26965,
		37321: 38464,
		37322: 39364,
		37323: 39464,
		37324: 20307,
		37325: 22534,
		37326: 23550,
		37327: 32784,
		37328: 23729,
		37329: 24111,
		37330: 24453,
		37331: 24608,
		37332: 24907,
		37333: 25140,
		37334: 26367,
		37335: 27888,
		37336: 28382,
		37337: 32974,
		37338: 33151,
		37339: 33492,
		37340: 34955,
		37341: 36024,
		37342: 36864,
		37343: 36910,
		37344: 38538,
		37345: 40667,
		37346: 39899,
		37347: 20195,
		37348: 21488,
		37349: 22823,
		37350: 31532,
		37351: 37261,
		37352: 38988,
		37353: 40441,
		37354: 28381,
		37355: 28711,
		37356: 21331,
		37357: 21828,
		37358: 23429,
		37359: 25176,
		37360: 25246,
		37361: 25299,
		37362: 27810,
		37363: 28655,
		37364: 29730,
		37365: 35351,
		37366: 37944,
		37367: 28609,
		37368: 35582,
		37369: 33592,
		37370: 20967,
		37371: 34552,
		37372: 21482,
		37440: 21481,
		37441: 20294,
		37442: 36948,
		37443: 36784,
		37444: 22890,
		37445: 33073,
		37446: 24061,
		37447: 31466,
		37448: 36799,
		37449: 26842,
		37450: 35895,
		37451: 29432,
		37452: 40008,
		37453: 27197,
		37454: 35504,
		37455: 20025,
		37456: 21336,
		37457: 22022,
		37458: 22374,
		37459: 25285,
		37460: 25506,
		37461: 26086,
		37462: 27470,
		37463: 28129,
		37464: 28251,
		37465: 28845,
		37466: 30701,
		37467: 31471,
		37468: 31658,
		37469: 32187,
		37470: 32829,
		37471: 32966,
		37472: 34507,
		37473: 35477,
		37474: 37723,
		37475: 22243,
		37476: 22727,
		37477: 24382,
		37478: 26029,
		37479: 26262,
		37480: 27264,
		37481: 27573,
		37482: 30007,
		37483: 35527,
		37484: 20516,
		37485: 30693,
		37486: 22320,
		37487: 24347,
		37488: 24677,
		37489: 26234,
		37490: 27744,
		37491: 30196,
		37492: 31258,
		37493: 32622,
		37494: 33268,
		37495: 34584,
		37496: 36933,
		37497: 39347,
		37498: 31689,
		37499: 30044,
		37500: 31481,
		37501: 31569,
		37502: 33988,
		37504: 36880,
		37505: 31209,
		37506: 31378,
		37507: 33590,
		37508: 23265,
		37509: 30528,
		37510: 20013,
		37511: 20210,
		37512: 23449,
		37513: 24544,
		37514: 25277,
		37515: 26172,
		37516: 26609,
		37517: 27880,
		37518: 34411,
		37519: 34935,
		37520: 35387,
		37521: 37198,
		37522: 37619,
		37523: 39376,
		37524: 27159,
		37525: 28710,
		37526: 29482,
		37527: 33511,
		37528: 33879,
		37529: 36015,
		37530: 19969,
		37531: 20806,
		37532: 20939,
		37533: 21899,
		37534: 23541,
		37535: 24086,
		37536: 24115,
		37537: 24193,
		37538: 24340,
		37539: 24373,
		37540: 24427,
		37541: 24500,
		37542: 25074,
		37543: 25361,
		37544: 26274,
		37545: 26397,
		37546: 28526,
		37547: 29266,
		37548: 30010,
		37549: 30522,
		37550: 32884,
		37551: 33081,
		37552: 33144,
		37553: 34678,
		37554: 35519,
		37555: 35548,
		37556: 36229,
		37557: 36339,
		37558: 37530,
		37559: 38263,
		37560: 38914,
		37561: 40165,
		37562: 21189,
		37563: 25431,
		37564: 30452,
		37565: 26389,
		37566: 27784,
		37567: 29645,
		37568: 36035,
		37569: 37806,
		37570: 38515,
		37571: 27941,
		37572: 22684,
		37573: 26894,
		37574: 27084,
		37575: 36861,
		37576: 37786,
		37577: 30171,
		37578: 36890,
		37579: 22618,
		37580: 26626,
		37581: 25524,
		37582: 27131,
		37583: 20291,
		37584: 28460,
		37585: 26584,
		37586: 36795,
		37587: 34086,
		37588: 32180,
		37589: 37716,
		37590: 26943,
		37591: 28528,
		37592: 22378,
		37593: 22775,
		37594: 23340,
		37595: 32044,
		37596: 29226,
		37597: 21514,
		37598: 37347,
		37599: 40372,
		37600: 20141,
		37601: 20302,
		37602: 20572,
		37603: 20597,
		37604: 21059,
		37605: 35998,
		37606: 21576,
		37607: 22564,
		37608: 23450,
		37609: 24093,
		37610: 24213,
		37611: 24237,
		37612: 24311,
		37613: 24351,
		37614: 24716,
		37615: 25269,
		37616: 25402,
		37617: 25552,
		37618: 26799,
		37619: 27712,
		37620: 30855,
		37621: 31118,
		37622: 31243,
		37623: 32224,
		37624: 33351,
		37625: 35330,
		37626: 35558,
		37627: 36420,
		37628: 36883,
		37696: 37048,
		37697: 37165,
		37698: 37336,
		37699: 40718,
		37700: 27877,
		37701: 25688,
		37702: 25826,
		37703: 25973,
		37704: 28404,
		37705: 30340,
		37706: 31515,
		37707: 36969,
		37708: 37841,
		37709: 28346,
		37710: 21746,
		37711: 24505,
		37712: 25764,
		37713: 36685,
		37714: 36845,
		37715: 37444,
		37716: 20856,
		37717: 22635,
		37718: 22825,
		37719: 23637,
		37720: 24215,
		37721: 28155,
		37722: 32399,
		37723: 29980,
		37724: 36028,
		37725: 36578,
		37726: 39003,
		37727: 28857,
		37728: 20253,
		37729: 27583,
		37730: 28593,
		37731: 30000,
		37732: 38651,
		37733: 20814,
		37734: 21520,
		37735: 22581,
		37736: 22615,
		37737: 22956,
		37738: 23648,
		37739: 24466,
		37740: 26007,
		37741: 26460,
		37742: 28193,
		37743: 30331,
		37744: 33759,
		37745: 36077,
		37746: 36884,
		37747: 37117,
		37748: 37709,
		37749: 30757,
		37750: 30778,
		37751: 21162,
		37752: 24230,
		37753: 22303,
		37754: 22900,
		37755: 24594,
		37756: 20498,
		37757: 20826,
		37758: 20908,
		37760: 20941,
		37761: 20992,
		37762: 21776,
		37763: 22612,
		37764: 22616,
		37765: 22871,
		37766: 23445,
		37767: 23798,
		37768: 23947,
		37769: 24764,
		37770: 25237,
		37771: 25645,
		37772: 26481,
		37773: 26691,
		37774: 26812,
		37775: 26847,
		37776: 30423,
		37777: 28120,
		37778: 28271,
		37779: 28059,
		37780: 28783,
		37781: 29128,
		37782: 24403,
		37783: 30168,
		37784: 31095,
		37785: 31561,
		37786: 31572,
		37787: 31570,
		37788: 31958,
		37789: 32113,
		37790: 21040,
		37791: 33891,
		37792: 34153,
		37793: 34276,
		37794: 35342,
		37795: 35588,
		37796: 35910,
		37797: 36367,
		37798: 36867,
		37799: 36879,
		37800: 37913,
		37801: 38518,
		37802: 38957,
		37803: 39472,
		37804: 38360,
		37805: 20685,
		37806: 21205,
		37807: 21516,
		37808: 22530,
		37809: 23566,
		37810: 24999,
		37811: 25758,
		37812: 27934,
		37813: 30643,
		37814: 31461,
		37815: 33012,
		37816: 33796,
		37817: 36947,
		37818: 37509,
		37819: 23776,
		37820: 40199,
		37821: 21311,
		37822: 24471,
		37823: 24499,
		37824: 28060,
		37825: 29305,
		37826: 30563,
		37827: 31167,
		37828: 31716,
		37829: 27602,
		37830: 29420,
		37831: 35501,
		37832: 26627,
		37833: 27233,
		37834: 20984,
		37835: 31361,
		37836: 26932,
		37837: 23626,
		37838: 40182,
		37839: 33515,
		37840: 23493,
		37841: 37193,
		37842: 28702,
		37843: 22136,
		37844: 23663,
		37845: 24775,
		37846: 25958,
		37847: 27788,
		37848: 35930,
		37849: 36929,
		37850: 38931,
		37851: 21585,
		37852: 26311,
		37853: 37389,
		37854: 22856,
		37855: 37027,
		37856: 20869,
		37857: 20045,
		37858: 20970,
		37859: 34201,
		37860: 35598,
		37861: 28760,
		37862: 25466,
		37863: 37707,
		37864: 26978,
		37865: 39348,
		37866: 32260,
		37867: 30071,
		37868: 21335,
		37869: 26976,
		37870: 36575,
		37871: 38627,
		37872: 27741,
		37873: 20108,
		37874: 23612,
		37875: 24336,
		37876: 36841,
		37877: 21250,
		37878: 36049,
		37879: 32905,
		37880: 34425,
		37881: 24319,
		37882: 26085,
		37883: 20083,
		37884: 20837,
		37952: 22914,
		37953: 23615,
		37954: 38894,
		37955: 20219,
		37956: 22922,
		37957: 24525,
		37958: 35469,
		37959: 28641,
		37960: 31152,
		37961: 31074,
		37962: 23527,
		37963: 33905,
		37964: 29483,
		37965: 29105,
		37966: 24180,
		37967: 24565,
		37968: 25467,
		37969: 25754,
		37970: 29123,
		37971: 31896,
		37972: 20035,
		37973: 24316,
		37974: 20043,
		37975: 22492,
		37976: 22178,
		37977: 24745,
		37978: 28611,
		37979: 32013,
		37980: 33021,
		37981: 33075,
		37982: 33215,
		37983: 36786,
		37984: 35223,
		37985: 34468,
		37986: 24052,
		37987: 25226,
		37988: 25773,
		37989: 35207,
		37990: 26487,
		37991: 27874,
		37992: 27966,
		37993: 29750,
		37994: 30772,
		37995: 23110,
		37996: 32629,
		37997: 33453,
		37998: 39340,
		37999: 20467,
		38000: 24259,
		38001: 25309,
		38002: 25490,
		38003: 25943,
		38004: 26479,
		38005: 30403,
		38006: 29260,
		38007: 32972,
		38008: 32954,
		38009: 36649,
		38010: 37197,
		38011: 20493,
		38012: 22521,
		38013: 23186,
		38014: 26757,
		38016: 26995,
		38017: 29028,
		38018: 29437,
		38019: 36023,
		38020: 22770,
		38021: 36064,
		38022: 38506,
		38023: 36889,
		38024: 34687,
		38025: 31204,
		38026: 30695,
		38027: 33833,
		38028: 20271,
		38029: 21093,
		38030: 21338,
		38031: 25293,
		38032: 26575,
		38033: 27850,
		38034: 30333,
		38035: 31636,
		38036: 31893,
		38037: 33334,
		38038: 34180,
		38039: 36843,
		38040: 26333,
		38041: 28448,
		38042: 29190,
		38043: 32283,
		38044: 33707,
		38045: 39361,
		38046: 40614,
		38047: 20989,
		38048: 31665,
		38049: 30834,
		38050: 31672,
		38051: 32903,
		38052: 31560,
		38053: 27368,
		38054: 24161,
		38055: 32908,
		38056: 30033,
		38057: 30048,
		38058: 20843,
		38059: 37474,
		38060: 28300,
		38061: 30330,
		38062: 37271,
		38063: 39658,
		38064: 20240,
		38065: 32624,
		38066: 25244,
		38067: 31567,
		38068: 38309,
		38069: 40169,
		38070: 22138,
		38071: 22617,
		38072: 34532,
		38073: 38588,
		38074: 20276,
		38075: 21028,
		38076: 21322,
		38077: 21453,
		38078: 21467,
		38079: 24070,
		38080: 25644,
		38081: 26001,
		38082: 26495,
		38083: 27710,
		38084: 27726,
		38085: 29256,
		38086: 29359,
		38087: 29677,
		38088: 30036,
		38089: 32321,
		38090: 33324,
		38091: 34281,
		38092: 36009,
		38093: 31684,
		38094: 37318,
		38095: 29033,
		38096: 38930,
		38097: 39151,
		38098: 25405,
		38099: 26217,
		38100: 30058,
		38101: 30436,
		38102: 30928,
		38103: 34115,
		38104: 34542,
		38105: 21290,
		38106: 21329,
		38107: 21542,
		38108: 22915,
		38109: 24199,
		38110: 24444,
		38111: 24754,
		38112: 25161,
		38113: 25209,
		38114: 25259,
		38115: 26000,
		38116: 27604,
		38117: 27852,
		38118: 30130,
		38119: 30382,
		38120: 30865,
		38121: 31192,
		38122: 32203,
		38123: 32631,
		38124: 32933,
		38125: 34987,
		38126: 35513,
		38127: 36027,
		38128: 36991,
		38129: 38750,
		38130: 39131,
		38131: 27147,
		38132: 31800,
		38133: 20633,
		38134: 23614,
		38135: 24494,
		38136: 26503,
		38137: 27608,
		38138: 29749,
		38139: 30473,
		38140: 32654,
		38208: 40763,
		38209: 26570,
		38210: 31255,
		38211: 21305,
		38212: 30091,
		38213: 39661,
		38214: 24422,
		38215: 33181,
		38216: 33777,
		38217: 32920,
		38218: 24380,
		38219: 24517,
		38220: 30050,
		38221: 31558,
		38222: 36924,
		38223: 26727,
		38224: 23019,
		38225: 23195,
		38226: 32016,
		38227: 30334,
		38228: 35628,
		38229: 20469,
		38230: 24426,
		38231: 27161,
		38232: 27703,
		38233: 28418,
		38234: 29922,
		38235: 31080,
		38236: 34920,
		38237: 35413,
		38238: 35961,
		38239: 24287,
		38240: 25551,
		38241: 30149,
		38242: 31186,
		38243: 33495,
		38244: 37672,
		38245: 37618,
		38246: 33948,
		38247: 34541,
		38248: 39981,
		38249: 21697,
		38250: 24428,
		38251: 25996,
		38252: 27996,
		38253: 28693,
		38254: 36007,
		38255: 36051,
		38256: 38971,
		38257: 25935,
		38258: 29942,
		38259: 19981,
		38260: 20184,
		38261: 22496,
		38262: 22827,
		38263: 23142,
		38264: 23500,
		38265: 20904,
		38266: 24067,
		38267: 24220,
		38268: 24598,
		38269: 25206,
		38270: 25975,
		38272: 26023,
		38273: 26222,
		38274: 28014,
		38275: 29238,
		38276: 31526,
		38277: 33104,
		38278: 33178,
		38279: 33433,
		38280: 35676,
		38281: 36000,
		38282: 36070,
		38283: 36212,
		38284: 38428,
		38285: 38468,
		38286: 20398,
		38287: 25771,
		38288: 27494,
		38289: 33310,
		38290: 33889,
		38291: 34154,
		38292: 37096,
		38293: 23553,
		38294: 26963,
		38295: 39080,
		38296: 33914,
		38297: 34135,
		38298: 20239,
		38299: 21103,
		38300: 24489,
		38301: 24133,
		38302: 26381,
		38303: 31119,
		38304: 33145,
		38305: 35079,
		38306: 35206,
		38307: 28149,
		38308: 24343,
		38309: 25173,
		38310: 27832,
		38311: 20175,
		38312: 29289,
		38313: 39826,
		38314: 20998,
		38315: 21563,
		38316: 22132,
		38317: 22707,
		38318: 24996,
		38319: 25198,
		38320: 28954,
		38321: 22894,
		38322: 31881,
		38323: 31966,
		38324: 32027,
		38325: 38640,
		38326: 25991,
		38327: 32862,
		38328: 19993,
		38329: 20341,
		38330: 20853,
		38331: 22592,
		38332: 24163,
		38333: 24179,
		38334: 24330,
		38335: 26564,
		38336: 20006,
		38337: 34109,
		38338: 38281,
		38339: 38491,
		38340: 31859,
		38341: 38913,
		38342: 20731,
		38343: 22721,
		38344: 30294,
		38345: 30887,
		38346: 21029,
		38347: 30629,
		38348: 34065,
		38349: 31622,
		38350: 20559,
		38351: 22793,
		38352: 29255,
		38353: 31687,
		38354: 32232,
		38355: 36794,
		38356: 36820,
		38357: 36941,
		38358: 20415,
		38359: 21193,
		38360: 23081,
		38361: 24321,
		38362: 38829,
		38363: 20445,
		38364: 33303,
		38365: 37610,
		38366: 22275,
		38367: 25429,
		38368: 27497,
		38369: 29995,
		38370: 35036,
		38371: 36628,
		38372: 31298,
		38373: 21215,
		38374: 22675,
		38375: 24917,
		38376: 25098,
		38377: 26286,
		38378: 27597,
		38379: 31807,
		38380: 33769,
		38381: 20515,
		38382: 20472,
		38383: 21253,
		38384: 21574,
		38385: 22577,
		38386: 22857,
		38387: 23453,
		38388: 23792,
		38389: 23791,
		38390: 23849,
		38391: 24214,
		38392: 25265,
		38393: 25447,
		38394: 25918,
		38395: 26041,
		38396: 26379,
		38464: 27861,
		38465: 27873,
		38466: 28921,
		38467: 30770,
		38468: 32299,
		38469: 32990,
		38470: 33459,
		38471: 33804,
		38472: 34028,
		38473: 34562,
		38474: 35090,
		38475: 35370,
		38476: 35914,
		38477: 37030,
		38478: 37586,
		38479: 39165,
		38480: 40179,
		38481: 40300,
		38482: 20047,
		38483: 20129,
		38484: 20621,
		38485: 21078,
		38486: 22346,
		38487: 22952,
		38488: 24125,
		38489: 24536,
		38490: 24537,
		38491: 25151,
		38492: 26292,
		38493: 26395,
		38494: 26576,
		38495: 26834,
		38496: 20882,
		38497: 32033,
		38498: 32938,
		38499: 33192,
		38500: 35584,
		38501: 35980,
		38502: 36031,
		38503: 37502,
		38504: 38450,
		38505: 21536,
		38506: 38956,
		38507: 21271,
		38508: 20693,
		38509: 21340,
		38510: 22696,
		38511: 25778,
		38512: 26420,
		38513: 29287,
		38514: 30566,
		38515: 31302,
		38516: 37350,
		38517: 21187,
		38518: 27809,
		38519: 27526,
		38520: 22528,
		38521: 24140,
		38522: 22868,
		38523: 26412,
		38524: 32763,
		38525: 20961,
		38526: 30406,
		38528: 25705,
		38529: 30952,
		38530: 39764,
		38531: 40635,
		38532: 22475,
		38533: 22969,
		38534: 26151,
		38535: 26522,
		38536: 27598,
		38537: 21737,
		38538: 27097,
		38539: 24149,
		38540: 33180,
		38541: 26517,
		38542: 39850,
		38543: 26622,
		38544: 40018,
		38545: 26717,
		38546: 20134,
		38547: 20451,
		38548: 21448,
		38549: 25273,
		38550: 26411,
		38551: 27819,
		38552: 36804,
		38553: 20397,
		38554: 32365,
		38555: 40639,
		38556: 19975,
		38557: 24930,
		38558: 28288,
		38559: 28459,
		38560: 34067,
		38561: 21619,
		38562: 26410,
		38563: 39749,
		38564: 24051,
		38565: 31637,
		38566: 23724,
		38567: 23494,
		38568: 34588,
		38569: 28234,
		38570: 34001,
		38571: 31252,
		38572: 33032,
		38573: 22937,
		38574: 31885,
		38575: 27665,
		38576: 30496,
		38577: 21209,
		38578: 22818,
		38579: 28961,
		38580: 29279,
		38581: 30683,
		38582: 38695,
		38583: 40289,
		38584: 26891,
		38585: 23167,
		38586: 23064,
		38587: 20901,
		38588: 21517,
		38589: 21629,
		38590: 26126,
		38591: 30431,
		38592: 36855,
		38593: 37528,
		38594: 40180,
		38595: 23018,
		38596: 29277,
		38597: 28357,
		38598: 20813,
		38599: 26825,
		38600: 32191,
		38601: 32236,
		38602: 38754,
		38603: 40634,
		38604: 25720,
		38605: 27169,
		38606: 33538,
		38607: 22916,
		38608: 23391,
		38609: 27611,
		38610: 29467,
		38611: 30450,
		38612: 32178,
		38613: 32791,
		38614: 33945,
		38615: 20786,
		38616: 26408,
		38617: 40665,
		38618: 30446,
		38619: 26466,
		38620: 21247,
		38621: 39173,
		38622: 23588,
		38623: 25147,
		38624: 31870,
		38625: 36016,
		38626: 21839,
		38627: 24758,
		38628: 32011,
		38629: 38272,
		38630: 21249,
		38631: 20063,
		38632: 20918,
		38633: 22812,
		38634: 29242,
		38635: 32822,
		38636: 37326,
		38637: 24357,
		38638: 30690,
		38639: 21380,
		38640: 24441,
		38641: 32004,
		38642: 34220,
		38643: 35379,
		38644: 36493,
		38645: 38742,
		38646: 26611,
		38647: 34222,
		38648: 37971,
		38649: 24841,
		38650: 24840,
		38651: 27833,
		38652: 30290,
		38720: 35565,
		38721: 36664,
		38722: 21807,
		38723: 20305,
		38724: 20778,
		38725: 21191,
		38726: 21451,
		38727: 23461,
		38728: 24189,
		38729: 24736,
		38730: 24962,
		38731: 25558,
		38732: 26377,
		38733: 26586,
		38734: 28263,
		38735: 28044,
		38736: 29494,
		38737: 29495,
		38738: 30001,
		38739: 31056,
		38740: 35029,
		38741: 35480,
		38742: 36938,
		38743: 37009,
		38744: 37109,
		38745: 38596,
		38746: 34701,
		38747: 22805,
		38748: 20104,
		38749: 20313,
		38750: 19982,
		38751: 35465,
		38752: 36671,
		38753: 38928,
		38754: 20653,
		38755: 24188,
		38756: 22934,
		38757: 23481,
		38758: 24248,
		38759: 25562,
		38760: 25594,
		38761: 25793,
		38762: 26332,
		38763: 26954,
		38764: 27096,
		38765: 27915,
		38766: 28342,
		38767: 29076,
		38768: 29992,
		38769: 31407,
		38770: 32650,
		38771: 32768,
		38772: 33865,
		38773: 33993,
		38774: 35201,
		38775: 35617,
		38776: 36362,
		38777: 36965,
		38778: 38525,
		38779: 39178,
		38780: 24958,
		38781: 25233,
		38782: 27442,
		38784: 27779,
		38785: 28020,
		38786: 32716,
		38787: 32764,
		38788: 28096,
		38789: 32645,
		38790: 34746,
		38791: 35064,
		38792: 26469,
		38793: 33713,
		38794: 38972,
		38795: 38647,
		38796: 27931,
		38797: 32097,
		38798: 33853,
		38799: 37226,
		38800: 20081,
		38801: 21365,
		38802: 23888,
		38803: 27396,
		38804: 28651,
		38805: 34253,
		38806: 34349,
		38807: 35239,
		38808: 21033,
		38809: 21519,
		38810: 23653,
		38811: 26446,
		38812: 26792,
		38813: 29702,
		38814: 29827,
		38815: 30178,
		38816: 35023,
		38817: 35041,
		38818: 37324,
		38819: 38626,
		38820: 38520,
		38821: 24459,
		38822: 29575,
		38823: 31435,
		38824: 33870,
		38825: 25504,
		38826: 30053,
		38827: 21129,
		38828: 27969,
		38829: 28316,
		38830: 29705,
		38831: 30041,
		38832: 30827,
		38833: 31890,
		38834: 38534,
		38835: 31452,
		38836: 40845,
		38837: 20406,
		38838: 24942,
		38839: 26053,
		38840: 34396,
		38841: 20102,
		38842: 20142,
		38843: 20698,
		38844: 20001,
		38845: 20940,
		38846: 23534,
		38847: 26009,
		38848: 26753,
		38849: 28092,
		38850: 29471,
		38851: 30274,
		38852: 30637,
		38853: 31260,
		38854: 31975,
		38855: 33391,
		38856: 35538,
		38857: 36988,
		38858: 37327,
		38859: 38517,
		38860: 38936,
		38861: 21147,
		38862: 32209,
		38863: 20523,
		38864: 21400,
		38865: 26519,
		38866: 28107,
		38867: 29136,
		38868: 29747,
		38869: 33256,
		38870: 36650,
		38871: 38563,
		38872: 40023,
		38873: 40607,
		38874: 29792,
		38875: 22593,
		38876: 28057,
		38877: 32047,
		38878: 39006,
		38879: 20196,
		38880: 20278,
		38881: 20363,
		38882: 20919,
		38883: 21169,
		38884: 23994,
		38885: 24604,
		38886: 29618,
		38887: 31036,
		38888: 33491,
		38889: 37428,
		38890: 38583,
		38891: 38646,
		38892: 38666,
		38893: 40599,
		38894: 40802,
		38895: 26278,
		38896: 27508,
		38897: 21015,
		38898: 21155,
		38899: 28872,
		38900: 35010,
		38901: 24265,
		38902: 24651,
		38903: 24976,
		38904: 28451,
		38905: 29001,
		38906: 31806,
		38907: 32244,
		38908: 32879,
		38976: 34030,
		38977: 36899,
		38978: 37676,
		38979: 21570,
		38980: 39791,
		38981: 27347,
		38982: 28809,
		38983: 36034,
		38984: 36335,
		38985: 38706,
		38986: 21172,
		38987: 23105,
		38988: 24266,
		38989: 24324,
		38990: 26391,
		38991: 27004,
		38992: 27028,
		38993: 28010,
		38994: 28431,
		38995: 29282,
		38996: 29436,
		38997: 31725,
		38998: 32769,
		38999: 32894,
		39000: 34635,
		39001: 37070,
		39002: 20845,
		39003: 40595,
		39004: 31108,
		39005: 32907,
		39006: 37682,
		39007: 35542,
		39008: 20525,
		39009: 21644,
		39010: 35441,
		39011: 27498,
		39012: 36036,
		39013: 33031,
		39014: 24785,
		39015: 26528,
		39016: 40434,
		39017: 20121,
		39018: 20120,
		39019: 39952,
		39020: 35435,
		39021: 34241,
		39022: 34152,
		39023: 26880,
		39024: 28286,
		39025: 30871,
		39026: 33109,
		39071: 24332,
		39072: 19984,
		39073: 19989,
		39074: 20010,
		39075: 20017,
		39076: 20022,
		39077: 20028,
		39078: 20031,
		39079: 20034,
		39080: 20054,
		39081: 20056,
		39082: 20098,
		39083: 20101,
		39084: 35947,
		39085: 20106,
		39086: 33298,
		39087: 24333,
		39088: 20110,
		39089: 20126,
		39090: 20127,
		39091: 20128,
		39092: 20130,
		39093: 20144,
		39094: 20147,
		39095: 20150,
		39096: 20174,
		39097: 20173,
		39098: 20164,
		39099: 20166,
		39100: 20162,
		39101: 20183,
		39102: 20190,
		39103: 20205,
		39104: 20191,
		39105: 20215,
		39106: 20233,
		39107: 20314,
		39108: 20272,
		39109: 20315,
		39110: 20317,
		39111: 20311,
		39112: 20295,
		39113: 20342,
		39114: 20360,
		39115: 20367,
		39116: 20376,
		39117: 20347,
		39118: 20329,
		39119: 20336,
		39120: 20369,
		39121: 20335,
		39122: 20358,
		39123: 20374,
		39124: 20760,
		39125: 20436,
		39126: 20447,
		39127: 20430,
		39128: 20440,
		39129: 20443,
		39130: 20433,
		39131: 20442,
		39132: 20432,
		39133: 20452,
		39134: 20453,
		39135: 20506,
		39136: 20520,
		39137: 20500,
		39138: 20522,
		39139: 20517,
		39140: 20485,
		39141: 20252,
		39142: 20470,
		39143: 20513,
		39144: 20521,
		39145: 20524,
		39146: 20478,
		39147: 20463,
		39148: 20497,
		39149: 20486,
		39150: 20547,
		39151: 20551,
		39152: 26371,
		39153: 20565,
		39154: 20560,
		39155: 20552,
		39156: 20570,
		39157: 20566,
		39158: 20588,
		39159: 20600,
		39160: 20608,
		39161: 20634,
		39162: 20613,
		39163: 20660,
		39164: 20658,
		39232: 20681,
		39233: 20682,
		39234: 20659,
		39235: 20674,
		39236: 20694,
		39237: 20702,
		39238: 20709,
		39239: 20717,
		39240: 20707,
		39241: 20718,
		39242: 20729,
		39243: 20725,
		39244: 20745,
		39245: 20737,
		39246: 20738,
		39247: 20758,
		39248: 20757,
		39249: 20756,
		39250: 20762,
		39251: 20769,
		39252: 20794,
		39253: 20791,
		39254: 20796,
		39255: 20795,
		39256: 20799,
		39257: 20800,
		39258: 20818,
		39259: 20812,
		39260: 20820,
		39261: 20834,
		39262: 31480,
		39263: 20841,
		39264: 20842,
		39265: 20846,
		39266: 20864,
		39267: 20866,
		39268: 22232,
		39269: 20876,
		39270: 20873,
		39271: 20879,
		39272: 20881,
		39273: 20883,
		39274: 20885,
		39275: 20886,
		39276: 20900,
		39277: 20902,
		39278: 20898,
		39279: 20905,
		39280: 20906,
		39281: 20907,
		39282: 20915,
		39283: 20913,
		39284: 20914,
		39285: 20912,
		39286: 20917,
		39287: 20925,
		39288: 20933,
		39289: 20937,
		39290: 20955,
		39291: 20960,
		39292: 34389,
		39293: 20969,
		39294: 20973,
		39296: 20976,
		39297: 20981,
		39298: 20990,
		39299: 20996,
		39300: 21003,
		39301: 21012,
		39302: 21006,
		39303: 21031,
		39304: 21034,
		39305: 21038,
		39306: 21043,
		39307: 21049,
		39308: 21071,
		39309: 21060,
		39310: 21067,
		39311: 21068,
		39312: 21086,
		39313: 21076,
		39314: 21098,
		39315: 21108,
		39316: 21097,
		39317: 21107,
		39318: 21119,
		39319: 21117,
		39320: 21133,
		39321: 21140,
		39322: 21138,
		39323: 21105,
		39324: 21128,
		39325: 21137,
		39326: 36776,
		39327: 36775,
		39328: 21164,
		39329: 21165,
		39330: 21180,
		39331: 21173,
		39332: 21185,
		39333: 21197,
		39334: 21207,
		39335: 21214,
		39336: 21219,
		39337: 21222,
		39338: 39149,
		39339: 21216,
		39340: 21235,
		39341: 21237,
		39342: 21240,
		39343: 21241,
		39344: 21254,
		39345: 21256,
		39346: 30008,
		39347: 21261,
		39348: 21264,
		39349: 21263,
		39350: 21269,
		39351: 21274,
		39352: 21283,
		39353: 21295,
		39354: 21297,
		39355: 21299,
		39356: 21304,
		39357: 21312,
		39358: 21318,
		39359: 21317,
		39360: 19991,
		39361: 21321,
		39362: 21325,
		39363: 20950,
		39364: 21342,
		39365: 21353,
		39366: 21358,
		39367: 22808,
		39368: 21371,
		39369: 21367,
		39370: 21378,
		39371: 21398,
		39372: 21408,
		39373: 21414,
		39374: 21413,
		39375: 21422,
		39376: 21424,
		39377: 21430,
		39378: 21443,
		39379: 31762,
		39380: 38617,
		39381: 21471,
		39382: 26364,
		39383: 29166,
		39384: 21486,
		39385: 21480,
		39386: 21485,
		39387: 21498,
		39388: 21505,
		39389: 21565,
		39390: 21568,
		39391: 21548,
		39392: 21549,
		39393: 21564,
		39394: 21550,
		39395: 21558,
		39396: 21545,
		39397: 21533,
		39398: 21582,
		39399: 21647,
		39400: 21621,
		39401: 21646,
		39402: 21599,
		39403: 21617,
		39404: 21623,
		39405: 21616,
		39406: 21650,
		39407: 21627,
		39408: 21632,
		39409: 21622,
		39410: 21636,
		39411: 21648,
		39412: 21638,
		39413: 21703,
		39414: 21666,
		39415: 21688,
		39416: 21669,
		39417: 21676,
		39418: 21700,
		39419: 21704,
		39420: 21672,
		39488: 21675,
		39489: 21698,
		39490: 21668,
		39491: 21694,
		39492: 21692,
		39493: 21720,
		39494: 21733,
		39495: 21734,
		39496: 21775,
		39497: 21780,
		39498: 21757,
		39499: 21742,
		39500: 21741,
		39501: 21754,
		39502: 21730,
		39503: 21817,
		39504: 21824,
		39505: 21859,
		39506: 21836,
		39507: 21806,
		39508: 21852,
		39509: 21829,
		39510: 21846,
		39511: 21847,
		39512: 21816,
		39513: 21811,
		39514: 21853,
		39515: 21913,
		39516: 21888,
		39517: 21679,
		39518: 21898,
		39519: 21919,
		39520: 21883,
		39521: 21886,
		39522: 21912,
		39523: 21918,
		39524: 21934,
		39525: 21884,
		39526: 21891,
		39527: 21929,
		39528: 21895,
		39529: 21928,
		39530: 21978,
		39531: 21957,
		39532: 21983,
		39533: 21956,
		39534: 21980,
		39535: 21988,
		39536: 21972,
		39537: 22036,
		39538: 22007,
		39539: 22038,
		39540: 22014,
		39541: 22013,
		39542: 22043,
		39543: 22009,
		39544: 22094,
		39545: 22096,
		39546: 29151,
		39547: 22068,
		39548: 22070,
		39549: 22066,
		39550: 22072,
		39552: 22123,
		39553: 22116,
		39554: 22063,
		39555: 22124,
		39556: 22122,
		39557: 22150,
		39558: 22144,
		39559: 22154,
		39560: 22176,
		39561: 22164,
		39562: 22159,
		39563: 22181,
		39564: 22190,
		39565: 22198,
		39566: 22196,
		39567: 22210,
		39568: 22204,
		39569: 22209,
		39570: 22211,
		39571: 22208,
		39572: 22216,
		39573: 22222,
		39574: 22225,
		39575: 22227,
		39576: 22231,
		39577: 22254,
		39578: 22265,
		39579: 22272,
		39580: 22271,
		39581: 22276,
		39582: 22281,
		39583: 22280,
		39584: 22283,
		39585: 22285,
		39586: 22291,
		39587: 22296,
		39588: 22294,
		39589: 21959,
		39590: 22300,
		39591: 22310,
		39592: 22327,
		39593: 22328,
		39594: 22350,
		39595: 22331,
		39596: 22336,
		39597: 22351,
		39598: 22377,
		39599: 22464,
		39600: 22408,
		39601: 22369,
		39602: 22399,
		39603: 22409,
		39604: 22419,
		39605: 22432,
		39606: 22451,
		39607: 22436,
		39608: 22442,
		39609: 22448,
		39610: 22467,
		39611: 22470,
		39612: 22484,
		39613: 22482,
		39614: 22483,
		39615: 22538,
		39616: 22486,
		39617: 22499,
		39618: 22539,
		39619: 22553,
		39620: 22557,
		39621: 22642,
		39622: 22561,
		39623: 22626,
		39624: 22603,
		39625: 22640,
		39626: 27584,
		39627: 22610,
		39628: 22589,
		39629: 22649,
		39630: 22661,
		39631: 22713,
		39632: 22687,
		39633: 22699,
		39634: 22714,
		39635: 22750,
		39636: 22715,
		39637: 22712,
		39638: 22702,
		39639: 22725,
		39640: 22739,
		39641: 22737,
		39642: 22743,
		39643: 22745,
		39644: 22744,
		39645: 22757,
		39646: 22748,
		39647: 22756,
		39648: 22751,
		39649: 22767,
		39650: 22778,
		39651: 22777,
		39652: 22779,
		39653: 22780,
		39654: 22781,
		39655: 22786,
		39656: 22794,
		39657: 22800,
		39658: 22811,
		39659: 26790,
		39660: 22821,
		39661: 22828,
		39662: 22829,
		39663: 22834,
		39664: 22840,
		39665: 22846,
		39666: 31442,
		39667: 22869,
		39668: 22864,
		39669: 22862,
		39670: 22874,
		39671: 22872,
		39672: 22882,
		39673: 22880,
		39674: 22887,
		39675: 22892,
		39676: 22889,
		39744: 22904,
		39745: 22913,
		39746: 22941,
		39747: 20318,
		39748: 20395,
		39749: 22947,
		39750: 22962,
		39751: 22982,
		39752: 23016,
		39753: 23004,
		39754: 22925,
		39755: 23001,
		39756: 23002,
		39757: 23077,
		39758: 23071,
		39759: 23057,
		39760: 23068,
		39761: 23049,
		39762: 23066,
		39763: 23104,
		39764: 23148,
		39765: 23113,
		39766: 23093,
		39767: 23094,
		39768: 23138,
		39769: 23146,
		39770: 23194,
		39771: 23228,
		39772: 23230,
		39773: 23243,
		39774: 23234,
		39775: 23229,
		39776: 23267,
		39777: 23255,
		39778: 23270,
		39779: 23273,
		39780: 23254,
		39781: 23290,
		39782: 23291,
		39783: 23308,
		39784: 23307,
		39785: 23318,
		39786: 23346,
		39787: 23248,
		39788: 23338,
		39789: 23350,
		39790: 23358,
		39791: 23363,
		39792: 23365,
		39793: 23360,
		39794: 23377,
		39795: 23381,
		39796: 23386,
		39797: 23387,
		39798: 23397,
		39799: 23401,
		39800: 23408,
		39801: 23411,
		39802: 23413,
		39803: 23416,
		39804: 25992,
		39805: 23418,
		39806: 23424,
		39808: 23427,
		39809: 23462,
		39810: 23480,
		39811: 23491,
		39812: 23495,
		39813: 23497,
		39814: 23508,
		39815: 23504,
		39816: 23524,
		39817: 23526,
		39818: 23522,
		39819: 23518,
		39820: 23525,
		39821: 23531,
		39822: 23536,
		39823: 23542,
		39824: 23539,
		39825: 23557,
		39826: 23559,
		39827: 23560,
		39828: 23565,
		39829: 23571,
		39830: 23584,
		39831: 23586,
		39832: 23592,
		39833: 23608,
		39834: 23609,
		39835: 23617,
		39836: 23622,
		39837: 23630,
		39838: 23635,
		39839: 23632,
		39840: 23631,
		39841: 23409,
		39842: 23660,
		39843: 23662,
		39844: 20066,
		39845: 23670,
		39846: 23673,
		39847: 23692,
		39848: 23697,
		39849: 23700,
		39850: 22939,
		39851: 23723,
		39852: 23739,
		39853: 23734,
		39854: 23740,
		39855: 23735,
		39856: 23749,
		39857: 23742,
		39858: 23751,
		39859: 23769,
		39860: 23785,
		39861: 23805,
		39862: 23802,
		39863: 23789,
		39864: 23948,
		39865: 23786,
		39866: 23819,
		39867: 23829,
		39868: 23831,
		39869: 23900,
		39870: 23839,
		39871: 23835,
		39872: 23825,
		39873: 23828,
		39874: 23842,
		39875: 23834,
		39876: 23833,
		39877: 23832,
		39878: 23884,
		39879: 23890,
		39880: 23886,
		39881: 23883,
		39882: 23916,
		39883: 23923,
		39884: 23926,
		39885: 23943,
		39886: 23940,
		39887: 23938,
		39888: 23970,
		39889: 23965,
		39890: 23980,
		39891: 23982,
		39892: 23997,
		39893: 23952,
		39894: 23991,
		39895: 23996,
		39896: 24009,
		39897: 24013,
		39898: 24019,
		39899: 24018,
		39900: 24022,
		39901: 24027,
		39902: 24043,
		39903: 24050,
		39904: 24053,
		39905: 24075,
		39906: 24090,
		39907: 24089,
		39908: 24081,
		39909: 24091,
		39910: 24118,
		39911: 24119,
		39912: 24132,
		39913: 24131,
		39914: 24128,
		39915: 24142,
		39916: 24151,
		39917: 24148,
		39918: 24159,
		39919: 24162,
		39920: 24164,
		39921: 24135,
		39922: 24181,
		39923: 24182,
		39924: 24186,
		39925: 40636,
		39926: 24191,
		39927: 24224,
		39928: 24257,
		39929: 24258,
		39930: 24264,
		39931: 24272,
		39932: 24271,
		40000: 24278,
		40001: 24291,
		40002: 24285,
		40003: 24282,
		40004: 24283,
		40005: 24290,
		40006: 24289,
		40007: 24296,
		40008: 24297,
		40009: 24300,
		40010: 24305,
		40011: 24307,
		40012: 24304,
		40013: 24308,
		40014: 24312,
		40015: 24318,
		40016: 24323,
		40017: 24329,
		40018: 24413,
		40019: 24412,
		40020: 24331,
		40021: 24337,
		40022: 24342,
		40023: 24361,
		40024: 24365,
		40025: 24376,
		40026: 24385,
		40027: 24392,
		40028: 24396,
		40029: 24398,
		40030: 24367,
		40031: 24401,
		40032: 24406,
		40033: 24407,
		40034: 24409,
		40035: 24417,
		40036: 24429,
		40037: 24435,
		40038: 24439,
		40039: 24451,
		40040: 24450,
		40041: 24447,
		40042: 24458,
		40043: 24456,
		40044: 24465,
		40045: 24455,
		40046: 24478,
		40047: 24473,
		40048: 24472,
		40049: 24480,
		40050: 24488,
		40051: 24493,
		40052: 24508,
		40053: 24534,
		40054: 24571,
		40055: 24548,
		40056: 24568,
		40057: 24561,
		40058: 24541,
		40059: 24755,
		40060: 24575,
		40061: 24609,
		40062: 24672,
		40064: 24601,
		40065: 24592,
		40066: 24617,
		40067: 24590,
		40068: 24625,
		40069: 24603,
		40070: 24597,
		40071: 24619,
		40072: 24614,
		40073: 24591,
		40074: 24634,
		40075: 24666,
		40076: 24641,
		40077: 24682,
		40078: 24695,
		40079: 24671,
		40080: 24650,
		40081: 24646,
		40082: 24653,
		40083: 24675,
		40084: 24643,
		40085: 24676,
		40086: 24642,
		40087: 24684,
		40088: 24683,
		40089: 24665,
		40090: 24705,
		40091: 24717,
		40092: 24807,
		40093: 24707,
		40094: 24730,
		40095: 24708,
		40096: 24731,
		40097: 24726,
		40098: 24727,
		40099: 24722,
		40100: 24743,
		40101: 24715,
		40102: 24801,
		40103: 24760,
		40104: 24800,
		40105: 24787,
		40106: 24756,
		40107: 24560,
		40108: 24765,
		40109: 24774,
		40110: 24757,
		40111: 24792,
		40112: 24909,
		40113: 24853,
		40114: 24838,
		40115: 24822,
		40116: 24823,
		40117: 24832,
		40118: 24820,
		40119: 24826,
		40120: 24835,
		40121: 24865,
		40122: 24827,
		40123: 24817,
		40124: 24845,
		40125: 24846,
		40126: 24903,
		40127: 24894,
		40128: 24872,
		40129: 24871,
		40130: 24906,
		40131: 24895,
		40132: 24892,
		40133: 24876,
		40134: 24884,
		40135: 24893,
		40136: 24898,
		40137: 24900,
		40138: 24947,
		40139: 24951,
		40140: 24920,
		40141: 24921,
		40142: 24922,
		40143: 24939,
		40144: 24948,
		40145: 24943,
		40146: 24933,
		40147: 24945,
		40148: 24927,
		40149: 24925,
		40150: 24915,
		40151: 24949,
		40152: 24985,
		40153: 24982,
		40154: 24967,
		40155: 25004,
		40156: 24980,
		40157: 24986,
		40158: 24970,
		40159: 24977,
		40160: 25003,
		40161: 25006,
		40162: 25036,
		40163: 25034,
		40164: 25033,
		40165: 25079,
		40166: 25032,
		40167: 25027,
		40168: 25030,
		40169: 25018,
		40170: 25035,
		40171: 32633,
		40172: 25037,
		40173: 25062,
		40174: 25059,
		40175: 25078,
		40176: 25082,
		40177: 25076,
		40178: 25087,
		40179: 25085,
		40180: 25084,
		40181: 25086,
		40182: 25088,
		40183: 25096,
		40184: 25097,
		40185: 25101,
		40186: 25100,
		40187: 25108,
		40188: 25115,
		40256: 25118,
		40257: 25121,
		40258: 25130,
		40259: 25134,
		40260: 25136,
		40261: 25138,
		40262: 25139,
		40263: 25153,
		40264: 25166,
		40265: 25182,
		40266: 25187,
		40267: 25179,
		40268: 25184,
		40269: 25192,
		40270: 25212,
		40271: 25218,
		40272: 25225,
		40273: 25214,
		40274: 25234,
		40275: 25235,
		40276: 25238,
		40277: 25300,
		40278: 25219,
		40279: 25236,
		40280: 25303,
		40281: 25297,
		40282: 25275,
		40283: 25295,
		40284: 25343,
		40285: 25286,
		40286: 25812,
		40287: 25288,
		40288: 25308,
		40289: 25292,
		40290: 25290,
		40291: 25282,
		40292: 25287,
		40293: 25243,
		40294: 25289,
		40295: 25356,
		40296: 25326,
		40297: 25329,
		40298: 25383,
		40299: 25346,
		40300: 25352,
		40301: 25327,
		40302: 25333,
		40303: 25424,
		40304: 25406,
		40305: 25421,
		40306: 25628,
		40307: 25423,
		40308: 25494,
		40309: 25486,
		40310: 25472,
		40311: 25515,
		40312: 25462,
		40313: 25507,
		40314: 25487,
		40315: 25481,
		40316: 25503,
		40317: 25525,
		40318: 25451,
		40320: 25449,
		40321: 25534,
		40322: 25577,
		40323: 25536,
		40324: 25542,
		40325: 25571,
		40326: 25545,
		40327: 25554,
		40328: 25590,
		40329: 25540,
		40330: 25622,
		40331: 25652,
		40332: 25606,
		40333: 25619,
		40334: 25638,
		40335: 25654,
		40336: 25885,
		40337: 25623,
		40338: 25640,
		40339: 25615,
		40340: 25703,
		40341: 25711,
		40342: 25718,
		40343: 25678,
		40344: 25898,
		40345: 25749,
		40346: 25747,
		40347: 25765,
		40348: 25769,
		40349: 25736,
		40350: 25788,
		40351: 25818,
		40352: 25810,
		40353: 25797,
		40354: 25799,
		40355: 25787,
		40356: 25816,
		40357: 25794,
		40358: 25841,
		40359: 25831,
		40360: 33289,
		40361: 25824,
		40362: 25825,
		40363: 25260,
		40364: 25827,
		40365: 25839,
		40366: 25900,
		40367: 25846,
		40368: 25844,
		40369: 25842,
		40370: 25850,
		40371: 25856,
		40372: 25853,
		40373: 25880,
		40374: 25884,
		40375: 25861,
		40376: 25892,
		40377: 25891,
		40378: 25899,
		40379: 25908,
		40380: 25909,
		40381: 25911,
		40382: 25910,
		40383: 25912,
		40384: 30027,
		40385: 25928,
		40386: 25942,
		40387: 25941,
		40388: 25933,
		40389: 25944,
		40390: 25950,
		40391: 25949,
		40392: 25970,
		40393: 25976,
		40394: 25986,
		40395: 25987,
		40396: 35722,
		40397: 26011,
		40398: 26015,
		40399: 26027,
		40400: 26039,
		40401: 26051,
		40402: 26054,
		40403: 26049,
		40404: 26052,
		40405: 26060,
		40406: 26066,
		40407: 26075,
		40408: 26073,
		40409: 26080,
		40410: 26081,
		40411: 26097,
		40412: 26482,
		40413: 26122,
		40414: 26115,
		40415: 26107,
		40416: 26483,
		40417: 26165,
		40418: 26166,
		40419: 26164,
		40420: 26140,
		40421: 26191,
		40422: 26180,
		40423: 26185,
		40424: 26177,
		40425: 26206,
		40426: 26205,
		40427: 26212,
		40428: 26215,
		40429: 26216,
		40430: 26207,
		40431: 26210,
		40432: 26224,
		40433: 26243,
		40434: 26248,
		40435: 26254,
		40436: 26249,
		40437: 26244,
		40438: 26264,
		40439: 26269,
		40440: 26305,
		40441: 26297,
		40442: 26313,
		40443: 26302,
		40444: 26300,
		40512: 26308,
		40513: 26296,
		40514: 26326,
		40515: 26330,
		40516: 26336,
		40517: 26175,
		40518: 26342,
		40519: 26345,
		40520: 26352,
		40521: 26357,
		40522: 26359,
		40523: 26383,
		40524: 26390,
		40525: 26398,
		40526: 26406,
		40527: 26407,
		40528: 38712,
		40529: 26414,
		40530: 26431,
		40531: 26422,
		40532: 26433,
		40533: 26424,
		40534: 26423,
		40535: 26438,
		40536: 26462,
		40537: 26464,
		40538: 26457,
		40539: 26467,
		40540: 26468,
		40541: 26505,
		40542: 26480,
		40543: 26537,
		40544: 26492,
		40545: 26474,
		40546: 26508,
		40547: 26507,
		40548: 26534,
		40549: 26529,
		40550: 26501,
		40551: 26551,
		40552: 26607,
		40553: 26548,
		40554: 26604,
		40555: 26547,
		40556: 26601,
		40557: 26552,
		40558: 26596,
		40559: 26590,
		40560: 26589,
		40561: 26594,
		40562: 26606,
		40563: 26553,
		40564: 26574,
		40565: 26566,
		40566: 26599,
		40567: 27292,
		40568: 26654,
		40569: 26694,
		40570: 26665,
		40571: 26688,
		40572: 26701,
		40573: 26674,
		40574: 26702,
		40576: 26803,
		40577: 26667,
		40578: 26713,
		40579: 26723,
		40580: 26743,
		40581: 26751,
		40582: 26783,
		40583: 26767,
		40584: 26797,
		40585: 26772,
		40586: 26781,
		40587: 26779,
		40588: 26755,
		40589: 27310,
		40590: 26809,
		40591: 26740,
		40592: 26805,
		40593: 26784,
		40594: 26810,
		40595: 26895,
		40596: 26765,
		40597: 26750,
		40598: 26881,
		40599: 26826,
		40600: 26888,
		40601: 26840,
		40602: 26914,
		40603: 26918,
		40604: 26849,
		40605: 26892,
		40606: 26829,
		40607: 26836,
		40608: 26855,
		40609: 26837,
		40610: 26934,
		40611: 26898,
		40612: 26884,
		40613: 26839,
		40614: 26851,
		40615: 26917,
		40616: 26873,
		40617: 26848,
		40618: 26863,
		40619: 26920,
		40620: 26922,
		40621: 26906,
		40622: 26915,
		40623: 26913,
		40624: 26822,
		40625: 27001,
		40626: 26999,
		40627: 26972,
		40628: 27000,
		40629: 26987,
		40630: 26964,
		40631: 27006,
		40632: 26990,
		40633: 26937,
		40634: 26996,
		40635: 26941,
		40636: 26969,
		40637: 26928,
		40638: 26977,
		40639: 26974,
		40640: 26973,
		40641: 27009,
		40642: 26986,
		40643: 27058,
		40644: 27054,
		40645: 27088,
		40646: 27071,
		40647: 27073,
		40648: 27091,
		40649: 27070,
		40650: 27086,
		40651: 23528,
		40652: 27082,
		40653: 27101,
		40654: 27067,
		40655: 27075,
		40656: 27047,
		40657: 27182,
		40658: 27025,
		40659: 27040,
		40660: 27036,
		40661: 27029,
		40662: 27060,
		40663: 27102,
		40664: 27112,
		40665: 27138,
		40666: 27163,
		40667: 27135,
		40668: 27402,
		40669: 27129,
		40670: 27122,
		40671: 27111,
		40672: 27141,
		40673: 27057,
		40674: 27166,
		40675: 27117,
		40676: 27156,
		40677: 27115,
		40678: 27146,
		40679: 27154,
		40680: 27329,
		40681: 27171,
		40682: 27155,
		40683: 27204,
		40684: 27148,
		40685: 27250,
		40686: 27190,
		40687: 27256,
		40688: 27207,
		40689: 27234,
		40690: 27225,
		40691: 27238,
		40692: 27208,
		40693: 27192,
		40694: 27170,
		40695: 27280,
		40696: 27277,
		40697: 27296,
		40698: 27268,
		40699: 27298,
		40700: 27299,
		40768: 27287,
		40769: 34327,
		40770: 27323,
		40771: 27331,
		40772: 27330,
		40773: 27320,
		40774: 27315,
		40775: 27308,
		40776: 27358,
		40777: 27345,
		40778: 27359,
		40779: 27306,
		40780: 27354,
		40781: 27370,
		40782: 27387,
		40783: 27397,
		40784: 34326,
		40785: 27386,
		40786: 27410,
		40787: 27414,
		40788: 39729,
		40789: 27423,
		40790: 27448,
		40791: 27447,
		40792: 30428,
		40793: 27449,
		40794: 39150,
		40795: 27463,
		40796: 27459,
		40797: 27465,
		40798: 27472,
		40799: 27481,
		40800: 27476,
		40801: 27483,
		40802: 27487,
		40803: 27489,
		40804: 27512,
		40805: 27513,
		40806: 27519,
		40807: 27520,
		40808: 27524,
		40809: 27523,
		40810: 27533,
		40811: 27544,
		40812: 27541,
		40813: 27550,
		40814: 27556,
		40815: 27562,
		40816: 27563,
		40817: 27567,
		40818: 27570,
		40819: 27569,
		40820: 27571,
		40821: 27575,
		40822: 27580,
		40823: 27590,
		40824: 27595,
		40825: 27603,
		40826: 27615,
		40827: 27628,
		40828: 27627,
		40829: 27635,
		40830: 27631,
		40832: 40638,
		40833: 27656,
		40834: 27667,
		40835: 27668,
		40836: 27675,
		40837: 27684,
		40838: 27683,
		40839: 27742,
		40840: 27733,
		40841: 27746,
		40842: 27754,
		40843: 27778,
		40844: 27789,
		40845: 27802,
		40846: 27777,
		40847: 27803,
		40848: 27774,
		40849: 27752,
		40850: 27763,
		40851: 27794,
		40852: 27792,
		40853: 27844,
		40854: 27889,
		40855: 27859,
		40856: 27837,
		40857: 27863,
		40858: 27845,
		40859: 27869,
		40860: 27822,
		40861: 27825,
		40862: 27838,
		40863: 27834,
		40864: 27867,
		40865: 27887,
		40866: 27865,
		40867: 27882,
		40868: 27935,
		40869: 34893,
		40870: 27958,
		40871: 27947,
		40872: 27965,
		40873: 27960,
		40874: 27929,
		40875: 27957,
		40876: 27955,
		40877: 27922,
		40878: 27916,
		40879: 28003,
		40880: 28051,
		40881: 28004,
		40882: 27994,
		40883: 28025,
		40884: 27993,
		40885: 28046,
		40886: 28053,
		40887: 28644,
		40888: 28037,
		40889: 28153,
		40890: 28181,
		40891: 28170,
		40892: 28085,
		40893: 28103,
		40894: 28134,
		40895: 28088,
		40896: 28102,
		40897: 28140,
		40898: 28126,
		40899: 28108,
		40900: 28136,
		40901: 28114,
		40902: 28101,
		40903: 28154,
		40904: 28121,
		40905: 28132,
		40906: 28117,
		40907: 28138,
		40908: 28142,
		40909: 28205,
		40910: 28270,
		40911: 28206,
		40912: 28185,
		40913: 28274,
		40914: 28255,
		40915: 28222,
		40916: 28195,
		40917: 28267,
		40918: 28203,
		40919: 28278,
		40920: 28237,
		40921: 28191,
		40922: 28227,
		40923: 28218,
		40924: 28238,
		40925: 28196,
		40926: 28415,
		40927: 28189,
		40928: 28216,
		40929: 28290,
		40930: 28330,
		40931: 28312,
		40932: 28361,
		40933: 28343,
		40934: 28371,
		40935: 28349,
		40936: 28335,
		40937: 28356,
		40938: 28338,
		40939: 28372,
		40940: 28373,
		40941: 28303,
		40942: 28325,
		40943: 28354,
		40944: 28319,
		40945: 28481,
		40946: 28433,
		40947: 28748,
		40948: 28396,
		40949: 28408,
		40950: 28414,
		40951: 28479,
		40952: 28402,
		40953: 28465,
		40954: 28399,
		40955: 28466,
		40956: 28364,
		57408: 28478,
		57409: 28435,
		57410: 28407,
		57411: 28550,
		57412: 28538,
		57413: 28536,
		57414: 28545,
		57415: 28544,
		57416: 28527,
		57417: 28507,
		57418: 28659,
		57419: 28525,
		57420: 28546,
		57421: 28540,
		57422: 28504,
		57423: 28558,
		57424: 28561,
		57425: 28610,
		57426: 28518,
		57427: 28595,
		57428: 28579,
		57429: 28577,
		57430: 28580,
		57431: 28601,
		57432: 28614,
		57433: 28586,
		57434: 28639,
		57435: 28629,
		57436: 28652,
		57437: 28628,
		57438: 28632,
		57439: 28657,
		57440: 28654,
		57441: 28635,
		57442: 28681,
		57443: 28683,
		57444: 28666,
		57445: 28689,
		57446: 28673,
		57447: 28687,
		57448: 28670,
		57449: 28699,
		57450: 28698,
		57451: 28532,
		57452: 28701,
		57453: 28696,
		57454: 28703,
		57455: 28720,
		57456: 28734,
		57457: 28722,
		57458: 28753,
		57459: 28771,
		57460: 28825,
		57461: 28818,
		57462: 28847,
		57463: 28913,
		57464: 28844,
		57465: 28856,
		57466: 28851,
		57467: 28846,
		57468: 28895,
		57469: 28875,
		57470: 28893,
		57472: 28889,
		57473: 28937,
		57474: 28925,
		57475: 28956,
		57476: 28953,
		57477: 29029,
		57478: 29013,
		57479: 29064,
		57480: 29030,
		57481: 29026,
		57482: 29004,
		57483: 29014,
		57484: 29036,
		57485: 29071,
		57486: 29179,
		57487: 29060,
		57488: 29077,
		57489: 29096,
		57490: 29100,
		57491: 29143,
		57492: 29113,
		57493: 29118,
		57494: 29138,
		57495: 29129,
		57496: 29140,
		57497: 29134,
		57498: 29152,
		57499: 29164,
		57500: 29159,
		57501: 29173,
		57502: 29180,
		57503: 29177,
		57504: 29183,
		57505: 29197,
		57506: 29200,
		57507: 29211,
		57508: 29224,
		57509: 29229,
		57510: 29228,
		57511: 29232,
		57512: 29234,
		57513: 29243,
		57514: 29244,
		57515: 29247,
		57516: 29248,
		57517: 29254,
		57518: 29259,
		57519: 29272,
		57520: 29300,
		57521: 29310,
		57522: 29314,
		57523: 29313,
		57524: 29319,
		57525: 29330,
		57526: 29334,
		57527: 29346,
		57528: 29351,
		57529: 29369,
		57530: 29362,
		57531: 29379,
		57532: 29382,
		57533: 29380,
		57534: 29390,
		57535: 29394,
		57536: 29410,
		57537: 29408,
		57538: 29409,
		57539: 29433,
		57540: 29431,
		57541: 20495,
		57542: 29463,
		57543: 29450,
		57544: 29468,
		57545: 29462,
		57546: 29469,
		57547: 29492,
		57548: 29487,
		57549: 29481,
		57550: 29477,
		57551: 29502,
		57552: 29518,
		57553: 29519,
		57554: 40664,
		57555: 29527,
		57556: 29546,
		57557: 29544,
		57558: 29552,
		57559: 29560,
		57560: 29557,
		57561: 29563,
		57562: 29562,
		57563: 29640,
		57564: 29619,
		57565: 29646,
		57566: 29627,
		57567: 29632,
		57568: 29669,
		57569: 29678,
		57570: 29662,
		57571: 29858,
		57572: 29701,
		57573: 29807,
		57574: 29733,
		57575: 29688,
		57576: 29746,
		57577: 29754,
		57578: 29781,
		57579: 29759,
		57580: 29791,
		57581: 29785,
		57582: 29761,
		57583: 29788,
		57584: 29801,
		57585: 29808,
		57586: 29795,
		57587: 29802,
		57588: 29814,
		57589: 29822,
		57590: 29835,
		57591: 29854,
		57592: 29863,
		57593: 29898,
		57594: 29903,
		57595: 29908,
		57596: 29681,
		57664: 29920,
		57665: 29923,
		57666: 29927,
		57667: 29929,
		57668: 29934,
		57669: 29938,
		57670: 29936,
		57671: 29937,
		57672: 29944,
		57673: 29943,
		57674: 29956,
		57675: 29955,
		57676: 29957,
		57677: 29964,
		57678: 29966,
		57679: 29965,
		57680: 29973,
		57681: 29971,
		57682: 29982,
		57683: 29990,
		57684: 29996,
		57685: 30012,
		57686: 30020,
		57687: 30029,
		57688: 30026,
		57689: 30025,
		57690: 30043,
		57691: 30022,
		57692: 30042,
		57693: 30057,
		57694: 30052,
		57695: 30055,
		57696: 30059,
		57697: 30061,
		57698: 30072,
		57699: 30070,
		57700: 30086,
		57701: 30087,
		57702: 30068,
		57703: 30090,
		57704: 30089,
		57705: 30082,
		57706: 30100,
		57707: 30106,
		57708: 30109,
		57709: 30117,
		57710: 30115,
		57711: 30146,
		57712: 30131,
		57713: 30147,
		57714: 30133,
		57715: 30141,
		57716: 30136,
		57717: 30140,
		57718: 30129,
		57719: 30157,
		57720: 30154,
		57721: 30162,
		57722: 30169,
		57723: 30179,
		57724: 30174,
		57725: 30206,
		57726: 30207,
		57728: 30204,
		57729: 30209,
		57730: 30192,
		57731: 30202,
		57732: 30194,
		57733: 30195,
		57734: 30219,
		57735: 30221,
		57736: 30217,
		57737: 30239,
		57738: 30247,
		57739: 30240,
		57740: 30241,
		57741: 30242,
		57742: 30244,
		57743: 30260,
		57744: 30256,
		57745: 30267,
		57746: 30279,
		57747: 30280,
		57748: 30278,
		57749: 30300,
		57750: 30296,
		57751: 30305,
		57752: 30306,
		57753: 30312,
		57754: 30313,
		57755: 30314,
		57756: 30311,
		57757: 30316,
		57758: 30320,
		57759: 30322,
		57760: 30326,
		57761: 30328,
		57762: 30332,
		57763: 30336,
		57764: 30339,
		57765: 30344,
		57766: 30347,
		57767: 30350,
		57768: 30358,
		57769: 30355,
		57770: 30361,
		57771: 30362,
		57772: 30384,
		57773: 30388,
		57774: 30392,
		57775: 30393,
		57776: 30394,
		57777: 30402,
		57778: 30413,
		57779: 30422,
		57780: 30418,
		57781: 30430,
		57782: 30433,
		57783: 30437,
		57784: 30439,
		57785: 30442,
		57786: 34351,
		57787: 30459,
		57788: 30472,
		57789: 30471,
		57790: 30468,
		57791: 30505,
		57792: 30500,
		57793: 30494,
		57794: 30501,
		57795: 30502,
		57796: 30491,
		57797: 30519,
		57798: 30520,
		57799: 30535,
		57800: 30554,
		57801: 30568,
		57802: 30571,
		57803: 30555,
		57804: 30565,
		57805: 30591,
		57806: 30590,
		57807: 30585,
		57808: 30606,
		57809: 30603,
		57810: 30609,
		57811: 30624,
		57812: 30622,
		57813: 30640,
		57814: 30646,
		57815: 30649,
		57816: 30655,
		57817: 30652,
		57818: 30653,
		57819: 30651,
		57820: 30663,
		57821: 30669,
		57822: 30679,
		57823: 30682,
		57824: 30684,
		57825: 30691,
		57826: 30702,
		57827: 30716,
		57828: 30732,
		57829: 30738,
		57830: 31014,
		57831: 30752,
		57832: 31018,
		57833: 30789,
		57834: 30862,
		57835: 30836,
		57836: 30854,
		57837: 30844,
		57838: 30874,
		57839: 30860,
		57840: 30883,
		57841: 30901,
		57842: 30890,
		57843: 30895,
		57844: 30929,
		57845: 30918,
		57846: 30923,
		57847: 30932,
		57848: 30910,
		57849: 30908,
		57850: 30917,
		57851: 30922,
		57852: 30956,
		57920: 30951,
		57921: 30938,
		57922: 30973,
		57923: 30964,
		57924: 30983,
		57925: 30994,
		57926: 30993,
		57927: 31001,
		57928: 31020,
		57929: 31019,
		57930: 31040,
		57931: 31072,
		57932: 31063,
		57933: 31071,
		57934: 31066,
		57935: 31061,
		57936: 31059,
		57937: 31098,
		57938: 31103,
		57939: 31114,
		57940: 31133,
		57941: 31143,
		57942: 40779,
		57943: 31146,
		57944: 31150,
		57945: 31155,
		57946: 31161,
		57947: 31162,
		57948: 31177,
		57949: 31189,
		57950: 31207,
		57951: 31212,
		57952: 31201,
		57953: 31203,
		57954: 31240,
		57955: 31245,
		57956: 31256,
		57957: 31257,
		57958: 31264,
		57959: 31263,
		57960: 31104,
		57961: 31281,
		57962: 31291,
		57963: 31294,
		57964: 31287,
		57965: 31299,
		57966: 31319,
		57967: 31305,
		57968: 31329,
		57969: 31330,
		57970: 31337,
		57971: 40861,
		57972: 31344,
		57973: 31353,
		57974: 31357,
		57975: 31368,
		57976: 31383,
		57977: 31381,
		57978: 31384,
		57979: 31382,
		57980: 31401,
		57981: 31432,
		57982: 31408,
		57984: 31414,
		57985: 31429,
		57986: 31428,
		57987: 31423,
		57988: 36995,
		57989: 31431,
		57990: 31434,
		57991: 31437,
		57992: 31439,
		57993: 31445,
		57994: 31443,
		57995: 31449,
		57996: 31450,
		57997: 31453,
		57998: 31457,
		57999: 31458,
		58000: 31462,
		58001: 31469,
		58002: 31472,
		58003: 31490,
		58004: 31503,
		58005: 31498,
		58006: 31494,
		58007: 31539,
		58008: 31512,
		58009: 31513,
		58010: 31518,
		58011: 31541,
		58012: 31528,
		58013: 31542,
		58014: 31568,
		58015: 31610,
		58016: 31492,
		58017: 31565,
		58018: 31499,
		58019: 31564,
		58020: 31557,
		58021: 31605,
		58022: 31589,
		58023: 31604,
		58024: 31591,
		58025: 31600,
		58026: 31601,
		58027: 31596,
		58028: 31598,
		58029: 31645,
		58030: 31640,
		58031: 31647,
		58032: 31629,
		58033: 31644,
		58034: 31642,
		58035: 31627,
		58036: 31634,
		58037: 31631,
		58038: 31581,
		58039: 31641,
		58040: 31691,
		58041: 31681,
		58042: 31692,
		58043: 31695,
		58044: 31668,
		58045: 31686,
		58046: 31709,
		58047: 31721,
		58048: 31761,
		58049: 31764,
		58050: 31718,
		58051: 31717,
		58052: 31840,
		58053: 31744,
		58054: 31751,
		58055: 31763,
		58056: 31731,
		58057: 31735,
		58058: 31767,
		58059: 31757,
		58060: 31734,
		58061: 31779,
		58062: 31783,
		58063: 31786,
		58064: 31775,
		58065: 31799,
		58066: 31787,
		58067: 31805,
		58068: 31820,
		58069: 31811,
		58070: 31828,
		58071: 31823,
		58072: 31808,
		58073: 31824,
		58074: 31832,
		58075: 31839,
		58076: 31844,
		58077: 31830,
		58078: 31845,
		58079: 31852,
		58080: 31861,
		58081: 31875,
		58082: 31888,
		58083: 31908,
		58084: 31917,
		58085: 31906,
		58086: 31915,
		58087: 31905,
		58088: 31912,
		58089: 31923,
		58090: 31922,
		58091: 31921,
		58092: 31918,
		58093: 31929,
		58094: 31933,
		58095: 31936,
		58096: 31941,
		58097: 31938,
		58098: 31960,
		58099: 31954,
		58100: 31964,
		58101: 31970,
		58102: 39739,
		58103: 31983,
		58104: 31986,
		58105: 31988,
		58106: 31990,
		58107: 31994,
		58108: 32006,
		58176: 32002,
		58177: 32028,
		58178: 32021,
		58179: 32010,
		58180: 32069,
		58181: 32075,
		58182: 32046,
		58183: 32050,
		58184: 32063,
		58185: 32053,
		58186: 32070,
		58187: 32115,
		58188: 32086,
		58189: 32078,
		58190: 32114,
		58191: 32104,
		58192: 32110,
		58193: 32079,
		58194: 32099,
		58195: 32147,
		58196: 32137,
		58197: 32091,
		58198: 32143,
		58199: 32125,
		58200: 32155,
		58201: 32186,
		58202: 32174,
		58203: 32163,
		58204: 32181,
		58205: 32199,
		58206: 32189,
		58207: 32171,
		58208: 32317,
		58209: 32162,
		58210: 32175,
		58211: 32220,
		58212: 32184,
		58213: 32159,
		58214: 32176,
		58215: 32216,
		58216: 32221,
		58217: 32228,
		58218: 32222,
		58219: 32251,
		58220: 32242,
		58221: 32225,
		58222: 32261,
		58223: 32266,
		58224: 32291,
		58225: 32289,
		58226: 32274,
		58227: 32305,
		58228: 32287,
		58229: 32265,
		58230: 32267,
		58231: 32290,
		58232: 32326,
		58233: 32358,
		58234: 32315,
		58235: 32309,
		58236: 32313,
		58237: 32323,
		58238: 32311,
		58240: 32306,
		58241: 32314,
		58242: 32359,
		58243: 32349,
		58244: 32342,
		58245: 32350,
		58246: 32345,
		58247: 32346,
		58248: 32377,
		58249: 32362,
		58250: 32361,
		58251: 32380,
		58252: 32379,
		58253: 32387,
		58254: 32213,
		58255: 32381,
		58256: 36782,
		58257: 32383,
		58258: 32392,
		58259: 32393,
		58260: 32396,
		58261: 32402,
		58262: 32400,
		58263: 32403,
		58264: 32404,
		58265: 32406,
		58266: 32398,
		58267: 32411,
		58268: 32412,
		58269: 32568,
		58270: 32570,
		58271: 32581,
		58272: 32588,
		58273: 32589,
		58274: 32590,
		58275: 32592,
		58276: 32593,
		58277: 32597,
		58278: 32596,
		58279: 32600,
		58280: 32607,
		58281: 32608,
		58282: 32616,
		58283: 32617,
		58284: 32615,
		58285: 32632,
		58286: 32642,
		58287: 32646,
		58288: 32643,
		58289: 32648,
		58290: 32647,
		58291: 32652,
		58292: 32660,
		58293: 32670,
		58294: 32669,
		58295: 32666,
		58296: 32675,
		58297: 32687,
		58298: 32690,
		58299: 32697,
		58300: 32686,
		58301: 32694,
		58302: 32696,
		58303: 35697,
		58304: 32709,
		58305: 32710,
		58306: 32714,
		58307: 32725,
		58308: 32724,
		58309: 32737,
		58310: 32742,
		58311: 32745,
		58312: 32755,
		58313: 32761,
		58314: 39132,
		58315: 32774,
		58316: 32772,
		58317: 32779,
		58318: 32786,
		58319: 32792,
		58320: 32793,
		58321: 32796,
		58322: 32801,
		58323: 32808,
		58324: 32831,
		58325: 32827,
		58326: 32842,
		58327: 32838,
		58328: 32850,
		58329: 32856,
		58330: 32858,
		58331: 32863,
		58332: 32866,
		58333: 32872,
		58334: 32883,
		58335: 32882,
		58336: 32880,
		58337: 32886,
		58338: 32889,
		58339: 32893,
		58340: 32895,
		58341: 32900,
		58342: 32902,
		58343: 32901,
		58344: 32923,
		58345: 32915,
		58346: 32922,
		58347: 32941,
		58348: 20880,
		58349: 32940,
		58350: 32987,
		58351: 32997,
		58352: 32985,
		58353: 32989,
		58354: 32964,
		58355: 32986,
		58356: 32982,
		58357: 33033,
		58358: 33007,
		58359: 33009,
		58360: 33051,
		58361: 33065,
		58362: 33059,
		58363: 33071,
		58364: 33099,
		58432: 38539,
		58433: 33094,
		58434: 33086,
		58435: 33107,
		58436: 33105,
		58437: 33020,
		58438: 33137,
		58439: 33134,
		58440: 33125,
		58441: 33126,
		58442: 33140,
		58443: 33155,
		58444: 33160,
		58445: 33162,
		58446: 33152,
		58447: 33154,
		58448: 33184,
		58449: 33173,
		58450: 33188,
		58451: 33187,
		58452: 33119,
		58453: 33171,
		58454: 33193,
		58455: 33200,
		58456: 33205,
		58457: 33214,
		58458: 33208,
		58459: 33213,
		58460: 33216,
		58461: 33218,
		58462: 33210,
		58463: 33225,
		58464: 33229,
		58465: 33233,
		58466: 33241,
		58467: 33240,
		58468: 33224,
		58469: 33242,
		58470: 33247,
		58471: 33248,
		58472: 33255,
		58473: 33274,
		58474: 33275,
		58475: 33278,
		58476: 33281,
		58477: 33282,
		58478: 33285,
		58479: 33287,
		58480: 33290,
		58481: 33293,
		58482: 33296,
		58483: 33302,
		58484: 33321,
		58485: 33323,
		58486: 33336,
		58487: 33331,
		58488: 33344,
		58489: 33369,
		58490: 33368,
		58491: 33373,
		58492: 33370,
		58493: 33375,
		58494: 33380,
		58496: 33378,
		58497: 33384,
		58498: 33386,
		58499: 33387,
		58500: 33326,
		58501: 33393,
		58502: 33399,
		58503: 33400,
		58504: 33406,
		58505: 33421,
		58506: 33426,
		58507: 33451,
		58508: 33439,
		58509: 33467,
		58510: 33452,
		58511: 33505,
		58512: 33507,
		58513: 33503,
		58514: 33490,
		58515: 33524,
		58516: 33523,
		58517: 33530,
		58518: 33683,
		58519: 33539,
		58520: 33531,
		58521: 33529,
		58522: 33502,
		58523: 33542,
		58524: 33500,
		58525: 33545,
		58526: 33497,
		58527: 33589,
		58528: 33588,
		58529: 33558,
		58530: 33586,
		58531: 33585,
		58532: 33600,
		58533: 33593,
		58534: 33616,
		58535: 33605,
		58536: 33583,
		58537: 33579,
		58538: 33559,
		58539: 33560,
		58540: 33669,
		58541: 33690,
		58542: 33706,
		58543: 33695,
		58544: 33698,
		58545: 33686,
		58546: 33571,
		58547: 33678,
		58548: 33671,
		58549: 33674,
		58550: 33660,
		58551: 33717,
		58552: 33651,
		58553: 33653,
		58554: 33696,
		58555: 33673,
		58556: 33704,
		58557: 33780,
		58558: 33811,
		58559: 33771,
		58560: 33742,
		58561: 33789,
		58562: 33795,
		58563: 33752,
		58564: 33803,
		58565: 33729,
		58566: 33783,
		58567: 33799,
		58568: 33760,
		58569: 33778,
		58570: 33805,
		58571: 33826,
		58572: 33824,
		58573: 33725,
		58574: 33848,
		58575: 34054,
		58576: 33787,
		58577: 33901,
		58578: 33834,
		58579: 33852,
		58580: 34138,
		58581: 33924,
		58582: 33911,
		58583: 33899,
		58584: 33965,
		58585: 33902,
		58586: 33922,
		58587: 33897,
		58588: 33862,
		58589: 33836,
		58590: 33903,
		58591: 33913,
		58592: 33845,
		58593: 33994,
		58594: 33890,
		58595: 33977,
		58596: 33983,
		58597: 33951,
		58598: 34009,
		58599: 33997,
		58600: 33979,
		58601: 34010,
		58602: 34000,
		58603: 33985,
		58604: 33990,
		58605: 34006,
		58606: 33953,
		58607: 34081,
		58608: 34047,
		58609: 34036,
		58610: 34071,
		58611: 34072,
		58612: 34092,
		58613: 34079,
		58614: 34069,
		58615: 34068,
		58616: 34044,
		58617: 34112,
		58618: 34147,
		58619: 34136,
		58620: 34120,
		58688: 34113,
		58689: 34306,
		58690: 34123,
		58691: 34133,
		58692: 34176,
		58693: 34212,
		58694: 34184,
		58695: 34193,
		58696: 34186,
		58697: 34216,
		58698: 34157,
		58699: 34196,
		58700: 34203,
		58701: 34282,
		58702: 34183,
		58703: 34204,
		58704: 34167,
		58705: 34174,
		58706: 34192,
		58707: 34249,
		58708: 34234,
		58709: 34255,
		58710: 34233,
		58711: 34256,
		58712: 34261,
		58713: 34269,
		58714: 34277,
		58715: 34268,
		58716: 34297,
		58717: 34314,
		58718: 34323,
		58719: 34315,
		58720: 34302,
		58721: 34298,
		58722: 34310,
		58723: 34338,
		58724: 34330,
		58725: 34352,
		58726: 34367,
		58727: 34381,
		58728: 20053,
		58729: 34388,
		58730: 34399,
		58731: 34407,
		58732: 34417,
		58733: 34451,
		58734: 34467,
		58735: 34473,
		58736: 34474,
		58737: 34443,
		58738: 34444,
		58739: 34486,
		58740: 34479,
		58741: 34500,
		58742: 34502,
		58743: 34480,
		58744: 34505,
		58745: 34851,
		58746: 34475,
		58747: 34516,
		58748: 34526,
		58749: 34537,
		58750: 34540,
		58752: 34527,
		58753: 34523,
		58754: 34543,
		58755: 34578,
		58756: 34566,
		58757: 34568,
		58758: 34560,
		58759: 34563,
		58760: 34555,
		58761: 34577,
		58762: 34569,
		58763: 34573,
		58764: 34553,
		58765: 34570,
		58766: 34612,
		58767: 34623,
		58768: 34615,
		58769: 34619,
		58770: 34597,
		58771: 34601,
		58772: 34586,
		58773: 34656,
		58774: 34655,
		58775: 34680,
		58776: 34636,
		58777: 34638,
		58778: 34676,
		58779: 34647,
		58780: 34664,
		58781: 34670,
		58782: 34649,
		58783: 34643,
		58784: 34659,
		58785: 34666,
		58786: 34821,
		58787: 34722,
		58788: 34719,
		58789: 34690,
		58790: 34735,
		58791: 34763,
		58792: 34749,
		58793: 34752,
		58794: 34768,
		58795: 38614,
		58796: 34731,
		58797: 34756,
		58798: 34739,
		58799: 34759,
		58800: 34758,
		58801: 34747,
		58802: 34799,
		58803: 34802,
		58804: 34784,
		58805: 34831,
		58806: 34829,
		58807: 34814,
		58808: 34806,
		58809: 34807,
		58810: 34830,
		58811: 34770,
		58812: 34833,
		58813: 34838,
		58814: 34837,
		58815: 34850,
		58816: 34849,
		58817: 34865,
		58818: 34870,
		58819: 34873,
		58820: 34855,
		58821: 34875,
		58822: 34884,
		58823: 34882,
		58824: 34898,
		58825: 34905,
		58826: 34910,
		58827: 34914,
		58828: 34923,
		58829: 34945,
		58830: 34942,
		58831: 34974,
		58832: 34933,
		58833: 34941,
		58834: 34997,
		58835: 34930,
		58836: 34946,
		58837: 34967,
		58838: 34962,
		58839: 34990,
		58840: 34969,
		58841: 34978,
		58842: 34957,
		58843: 34980,
		58844: 34992,
		58845: 35007,
		58846: 34993,
		58847: 35011,
		58848: 35012,
		58849: 35028,
		58850: 35032,
		58851: 35033,
		58852: 35037,
		58853: 35065,
		58854: 35074,
		58855: 35068,
		58856: 35060,
		58857: 35048,
		58858: 35058,
		58859: 35076,
		58860: 35084,
		58861: 35082,
		58862: 35091,
		58863: 35139,
		58864: 35102,
		58865: 35109,
		58866: 35114,
		58867: 35115,
		58868: 35137,
		58869: 35140,
		58870: 35131,
		58871: 35126,
		58872: 35128,
		58873: 35148,
		58874: 35101,
		58875: 35168,
		58876: 35166,
		58944: 35174,
		58945: 35172,
		58946: 35181,
		58947: 35178,
		58948: 35183,
		58949: 35188,
		58950: 35191,
		58951: 35198,
		58952: 35203,
		58953: 35208,
		58954: 35210,
		58955: 35219,
		58956: 35224,
		58957: 35233,
		58958: 35241,
		58959: 35238,
		58960: 35244,
		58961: 35247,
		58962: 35250,
		58963: 35258,
		58964: 35261,
		58965: 35263,
		58966: 35264,
		58967: 35290,
		58968: 35292,
		58969: 35293,
		58970: 35303,
		58971: 35316,
		58972: 35320,
		58973: 35331,
		58974: 35350,
		58975: 35344,
		58976: 35340,
		58977: 35355,
		58978: 35357,
		58979: 35365,
		58980: 35382,
		58981: 35393,
		58982: 35419,
		58983: 35410,
		58984: 35398,
		58985: 35400,
		58986: 35452,
		58987: 35437,
		58988: 35436,
		58989: 35426,
		58990: 35461,
		58991: 35458,
		58992: 35460,
		58993: 35496,
		58994: 35489,
		58995: 35473,
		58996: 35493,
		58997: 35494,
		58998: 35482,
		58999: 35491,
		59000: 35524,
		59001: 35533,
		59002: 35522,
		59003: 35546,
		59004: 35563,
		59005: 35571,
		59006: 35559,
		59008: 35556,
		59009: 35569,
		59010: 35604,
		59011: 35552,
		59012: 35554,
		59013: 35575,
		59014: 35550,
		59015: 35547,
		59016: 35596,
		59017: 35591,
		59018: 35610,
		59019: 35553,
		59020: 35606,
		59021: 35600,
		59022: 35607,
		59023: 35616,
		59024: 35635,
		59025: 38827,
		59026: 35622,
		59027: 35627,
		59028: 35646,
		59029: 35624,
		59030: 35649,
		59031: 35660,
		59032: 35663,
		59033: 35662,
		59034: 35657,
		59035: 35670,
		59036: 35675,
		59037: 35674,
		59038: 35691,
		59039: 35679,
		59040: 35692,
		59041: 35695,
		59042: 35700,
		59043: 35709,
		59044: 35712,
		59045: 35724,
		59046: 35726,
		59047: 35730,
		59048: 35731,
		59049: 35734,
		59050: 35737,
		59051: 35738,
		59052: 35898,
		59053: 35905,
		59054: 35903,
		59055: 35912,
		59056: 35916,
		59057: 35918,
		59058: 35920,
		59059: 35925,
		59060: 35938,
		59061: 35948,
		59062: 35960,
		59063: 35962,
		59064: 35970,
		59065: 35977,
		59066: 35973,
		59067: 35978,
		59068: 35981,
		59069: 35982,
		59070: 35988,
		59071: 35964,
		59072: 35992,
		59073: 25117,
		59074: 36013,
		59075: 36010,
		59076: 36029,
		59077: 36018,
		59078: 36019,
		59079: 36014,
		59080: 36022,
		59081: 36040,
		59082: 36033,
		59083: 36068,
		59084: 36067,
		59085: 36058,
		59086: 36093,
		59087: 36090,
		59088: 36091,
		59089: 36100,
		59090: 36101,
		59091: 36106,
		59092: 36103,
		59093: 36111,
		59094: 36109,
		59095: 36112,
		59096: 40782,
		59097: 36115,
		59098: 36045,
		59099: 36116,
		59100: 36118,
		59101: 36199,
		59102: 36205,
		59103: 36209,
		59104: 36211,
		59105: 36225,
		59106: 36249,
		59107: 36290,
		59108: 36286,
		59109: 36282,
		59110: 36303,
		59111: 36314,
		59112: 36310,
		59113: 36300,
		59114: 36315,
		59115: 36299,
		59116: 36330,
		59117: 36331,
		59118: 36319,
		59119: 36323,
		59120: 36348,
		59121: 36360,
		59122: 36361,
		59123: 36351,
		59124: 36381,
		59125: 36382,
		59126: 36368,
		59127: 36383,
		59128: 36418,
		59129: 36405,
		59130: 36400,
		59131: 36404,
		59132: 36426,
		59200: 36423,
		59201: 36425,
		59202: 36428,
		59203: 36432,
		59204: 36424,
		59205: 36441,
		59206: 36452,
		59207: 36448,
		59208: 36394,
		59209: 36451,
		59210: 36437,
		59211: 36470,
		59212: 36466,
		59213: 36476,
		59214: 36481,
		59215: 36487,
		59216: 36485,
		59217: 36484,
		59218: 36491,
		59219: 36490,
		59220: 36499,
		59221: 36497,
		59222: 36500,
		59223: 36505,
		59224: 36522,
		59225: 36513,
		59226: 36524,
		59227: 36528,
		59228: 36550,
		59229: 36529,
		59230: 36542,
		59231: 36549,
		59232: 36552,
		59233: 36555,
		59234: 36571,
		59235: 36579,
		59236: 36604,
		59237: 36603,
		59238: 36587,
		59239: 36606,
		59240: 36618,
		59241: 36613,
		59242: 36629,
		59243: 36626,
		59244: 36633,
		59245: 36627,
		59246: 36636,
		59247: 36639,
		59248: 36635,
		59249: 36620,
		59250: 36646,
		59251: 36659,
		59252: 36667,
		59253: 36665,
		59254: 36677,
		59255: 36674,
		59256: 36670,
		59257: 36684,
		59258: 36681,
		59259: 36678,
		59260: 36686,
		59261: 36695,
		59262: 36700,
		59264: 36706,
		59265: 36707,
		59266: 36708,
		59267: 36764,
		59268: 36767,
		59269: 36771,
		59270: 36781,
		59271: 36783,
		59272: 36791,
		59273: 36826,
		59274: 36837,
		59275: 36834,
		59276: 36842,
		59277: 36847,
		59278: 36999,
		59279: 36852,
		59280: 36869,
		59281: 36857,
		59282: 36858,
		59283: 36881,
		59284: 36885,
		59285: 36897,
		59286: 36877,
		59287: 36894,
		59288: 36886,
		59289: 36875,
		59290: 36903,
		59291: 36918,
		59292: 36917,
		59293: 36921,
		59294: 36856,
		59295: 36943,
		59296: 36944,
		59297: 36945,
		59298: 36946,
		59299: 36878,
		59300: 36937,
		59301: 36926,
		59302: 36950,
		59303: 36952,
		59304: 36958,
		59305: 36968,
		59306: 36975,
		59307: 36982,
		59308: 38568,
		59309: 36978,
		59310: 36994,
		59311: 36989,
		59312: 36993,
		59313: 36992,
		59314: 37002,
		59315: 37001,
		59316: 37007,
		59317: 37032,
		59318: 37039,
		59319: 37041,
		59320: 37045,
		59321: 37090,
		59322: 37092,
		59323: 25160,
		59324: 37083,
		59325: 37122,
		59326: 37138,
		59327: 37145,
		59328: 37170,
		59329: 37168,
		59330: 37194,
		59331: 37206,
		59332: 37208,
		59333: 37219,
		59334: 37221,
		59335: 37225,
		59336: 37235,
		59337: 37234,
		59338: 37259,
		59339: 37257,
		59340: 37250,
		59341: 37282,
		59342: 37291,
		59343: 37295,
		59344: 37290,
		59345: 37301,
		59346: 37300,
		59347: 37306,
		59348: 37312,
		59349: 37313,
		59350: 37321,
		59351: 37323,
		59352: 37328,
		59353: 37334,
		59354: 37343,
		59355: 37345,
		59356: 37339,
		59357: 37372,
		59358: 37365,
		59359: 37366,
		59360: 37406,
		59361: 37375,
		59362: 37396,
		59363: 37420,
		59364: 37397,
		59365: 37393,
		59366: 37470,
		59367: 37463,
		59368: 37445,
		59369: 37449,
		59370: 37476,
		59371: 37448,
		59372: 37525,
		59373: 37439,
		59374: 37451,
		59375: 37456,
		59376: 37532,
		59377: 37526,
		59378: 37523,
		59379: 37531,
		59380: 37466,
		59381: 37583,
		59382: 37561,
		59383: 37559,
		59384: 37609,
		59385: 37647,
		59386: 37626,
		59387: 37700,
		59388: 37678,
		59456: 37657,
		59457: 37666,
		59458: 37658,
		59459: 37667,
		59460: 37690,
		59461: 37685,
		59462: 37691,
		59463: 37724,
		59464: 37728,
		59465: 37756,
		59466: 37742,
		59467: 37718,
		59468: 37808,
		59469: 37804,
		59470: 37805,
		59471: 37780,
		59472: 37817,
		59473: 37846,
		59474: 37847,
		59475: 37864,
		59476: 37861,
		59477: 37848,
		59478: 37827,
		59479: 37853,
		59480: 37840,
		59481: 37832,
		59482: 37860,
		59483: 37914,
		59484: 37908,
		59485: 37907,
		59486: 37891,
		59487: 37895,
		59488: 37904,
		59489: 37942,
		59490: 37931,
		59491: 37941,
		59492: 37921,
		59493: 37946,
		59494: 37953,
		59495: 37970,
		59496: 37956,
		59497: 37979,
		59498: 37984,
		59499: 37986,
		59500: 37982,
		59501: 37994,
		59502: 37417,
		59503: 38000,
		59504: 38005,
		59505: 38007,
		59506: 38013,
		59507: 37978,
		59508: 38012,
		59509: 38014,
		59510: 38017,
		59511: 38015,
		59512: 38274,
		59513: 38279,
		59514: 38282,
		59515: 38292,
		59516: 38294,
		59517: 38296,
		59518: 38297,
		59520: 38304,
		59521: 38312,
		59522: 38311,
		59523: 38317,
		59524: 38332,
		59525: 38331,
		59526: 38329,
		59527: 38334,
		59528: 38346,
		59529: 28662,
		59530: 38339,
		59531: 38349,
		59532: 38348,
		59533: 38357,
		59534: 38356,
		59535: 38358,
		59536: 38364,
		59537: 38369,
		59538: 38373,
		59539: 38370,
		59540: 38433,
		59541: 38440,
		59542: 38446,
		59543: 38447,
		59544: 38466,
		59545: 38476,
		59546: 38479,
		59547: 38475,
		59548: 38519,
		59549: 38492,
		59550: 38494,
		59551: 38493,
		59552: 38495,
		59553: 38502,
		59554: 38514,
		59555: 38508,
		59556: 38541,
		59557: 38552,
		59558: 38549,
		59559: 38551,
		59560: 38570,
		59561: 38567,
		59562: 38577,
		59563: 38578,
		59564: 38576,
		59565: 38580,
		59566: 38582,
		59567: 38584,
		59568: 38585,
		59569: 38606,
		59570: 38603,
		59571: 38601,
		59572: 38605,
		59573: 35149,
		59574: 38620,
		59575: 38669,
		59576: 38613,
		59577: 38649,
		59578: 38660,
		59579: 38662,
		59580: 38664,
		59581: 38675,
		59582: 38670,
		59583: 38673,
		59584: 38671,
		59585: 38678,
		59586: 38681,
		59587: 38692,
		59588: 38698,
		59589: 38704,
		59590: 38713,
		59591: 38717,
		59592: 38718,
		59593: 38724,
		59594: 38726,
		59595: 38728,
		59596: 38722,
		59597: 38729,
		59598: 38748,
		59599: 38752,
		59600: 38756,
		59601: 38758,
		59602: 38760,
		59603: 21202,
		59604: 38763,
		59605: 38769,
		59606: 38777,
		59607: 38789,
		59608: 38780,
		59609: 38785,
		59610: 38778,
		59611: 38790,
		59612: 38795,
		59613: 38799,
		59614: 38800,
		59615: 38812,
		59616: 38824,
		59617: 38822,
		59618: 38819,
		59619: 38835,
		59620: 38836,
		59621: 38851,
		59622: 38854,
		59623: 38856,
		59624: 38859,
		59625: 38876,
		59626: 38893,
		59627: 40783,
		59628: 38898,
		59629: 31455,
		59630: 38902,
		59631: 38901,
		59632: 38927,
		59633: 38924,
		59634: 38968,
		59635: 38948,
		59636: 38945,
		59637: 38967,
		59638: 38973,
		59639: 38982,
		59640: 38991,
		59641: 38987,
		59642: 39019,
		59643: 39023,
		59644: 39024,
		59712: 39025,
		59713: 39028,
		59714: 39027,
		59715: 39082,
		59716: 39087,
		59717: 39089,
		59718: 39094,
		59719: 39108,
		59720: 39107,
		59721: 39110,
		59722: 39145,
		59723: 39147,
		59724: 39171,
		59725: 39177,
		59726: 39186,
		59727: 39188,
		59728: 39192,
		59729: 39201,
		59730: 39197,
		59731: 39198,
		59732: 39204,
		59733: 39200,
		59734: 39212,
		59735: 39214,
		59736: 39229,
		59737: 39230,
		59738: 39234,
		59739: 39241,
		59740: 39237,
		59741: 39248,
		59742: 39243,
		59743: 39249,
		59744: 39250,
		59745: 39244,
		59746: 39253,
		59747: 39319,
		59748: 39320,
		59749: 39333,
		59750: 39341,
		59751: 39342,
		59752: 39356,
		59753: 39391,
		59754: 39387,
		59755: 39389,
		59756: 39384,
		59757: 39377,
		59758: 39405,
		59759: 39406,
		59760: 39409,
		59761: 39410,
		59762: 39419,
		59763: 39416,
		59764: 39425,
		59765: 39439,
		59766: 39429,
		59767: 39394,
		59768: 39449,
		59769: 39467,
		59770: 39479,
		59771: 39493,
		59772: 39490,
		59773: 39488,
		59774: 39491,
		59776: 39486,
		59777: 39509,
		59778: 39501,
		59779: 39515,
		59780: 39511,
		59781: 39519,
		59782: 39522,
		59783: 39525,
		59784: 39524,
		59785: 39529,
		59786: 39531,
		59787: 39530,
		59788: 39597,
		59789: 39600,
		59790: 39612,
		59791: 39616,
		59792: 39631,
		59793: 39633,
		59794: 39635,
		59795: 39636,
		59796: 39646,
		59797: 39647,
		59798: 39650,
		59799: 39651,
		59800: 39654,
		59801: 39663,
		59802: 39659,
		59803: 39662,
		59804: 39668,
		59805: 39665,
		59806: 39671,
		59807: 39675,
		59808: 39686,
		59809: 39704,
		59810: 39706,
		59811: 39711,
		59812: 39714,
		59813: 39715,
		59814: 39717,
		59815: 39719,
		59816: 39720,
		59817: 39721,
		59818: 39722,
		59819: 39726,
		59820: 39727,
		59821: 39730,
		59822: 39748,
		59823: 39747,
		59824: 39759,
		59825: 39757,
		59826: 39758,
		59827: 39761,
		59828: 39768,
		59829: 39796,
		59830: 39827,
		59831: 39811,
		59832: 39825,
		59833: 39830,
		59834: 39831,
		59835: 39839,
		59836: 39840,
		59837: 39848,
		59838: 39860,
		59839: 39872,
		59840: 39882,
		59841: 39865,
		59842: 39878,
		59843: 39887,
		59844: 39889,
		59845: 39890,
		59846: 39907,
		59847: 39906,
		59848: 39908,
		59849: 39892,
		59850: 39905,
		59851: 39994,
		59852: 39922,
		59853: 39921,
		59854: 39920,
		59855: 39957,
		59856: 39956,
		59857: 39945,
		59858: 39955,
		59859: 39948,
		59860: 39942,
		59861: 39944,
		59862: 39954,
		59863: 39946,
		59864: 39940,
		59865: 39982,
		59866: 39963,
		59867: 39973,
		59868: 39972,
		59869: 39969,
		59870: 39984,
		59871: 40007,
		59872: 39986,
		59873: 40006,
		59874: 39998,
		59875: 40026,
		59876: 40032,
		59877: 40039,
		59878: 40054,
		59879: 40056,
		59880: 40167,
		59881: 40172,
		59882: 40176,
		59883: 40201,
		59884: 40200,
		59885: 40171,
		59886: 40195,
		59887: 40198,
		59888: 40234,
		59889: 40230,
		59890: 40367,
		59891: 40227,
		59892: 40223,
		59893: 40260,
		59894: 40213,
		59895: 40210,
		59896: 40257,
		59897: 40255,
		59898: 40254,
		59899: 40262,
		59900: 40264,
		59968: 40285,
		59969: 40286,
		59970: 40292,
		59971: 40273,
		59972: 40272,
		59973: 40281,
		59974: 40306,
		59975: 40329,
		59976: 40327,
		59977: 40363,
		59978: 40303,
		59979: 40314,
		59980: 40346,
		59981: 40356,
		59982: 40361,
		59983: 40370,
		59984: 40388,
		59985: 40385,
		59986: 40379,
		59987: 40376,
		59988: 40378,
		59989: 40390,
		59990: 40399,
		59991: 40386,
		59992: 40409,
		59993: 40403,
		59994: 40440,
		59995: 40422,
		59996: 40429,
		59997: 40431,
		59998: 40445,
		59999: 40474,
		60000: 40475,
		60001: 40478,
		60002: 40565,
		60003: 40569,
		60004: 40573,
		60005: 40577,
		60006: 40584,
		60007: 40587,
		60008: 40588,
		60009: 40594,
		60010: 40597,
		60011: 40593,
		60012: 40605,
		60013: 40613,
		60014: 40617,
		60015: 40632,
		60016: 40618,
		60017: 40621,
		60018: 38753,
		60019: 40652,
		60020: 40654,
		60021: 40655,
		60022: 40656,
		60023: 40660,
		60024: 40668,
		60025: 40670,
		60026: 40669,
		60027: 40672,
		60028: 40677,
		60029: 40680,
		60030: 40687,
		60032: 40692,
		60033: 40694,
		60034: 40695,
		60035: 40697,
		60036: 40699,
		60037: 40700,
		60038: 40701,
		60039: 40711,
		60040: 40712,
		60041: 30391,
		60042: 40725,
		60043: 40737,
		60044: 40748,
		60045: 40766,
		60046: 40778,
		60047: 40786,
		60048: 40788,
		60049: 40803,
		60050: 40799,
		60051: 40800,
		60052: 40801,
		60053: 40806,
		60054: 40807,
		60055: 40812,
		60056: 40810,
		60057: 40823,
		60058: 40818,
		60059: 40822,
		60060: 40853,
		60061: 40860,
		60062: 40864,
		60063: 22575,
		60064: 27079,
		60065: 36953,
		60066: 29796,
		60067: 20956,
		60068: 29081,
		60736: 32394,
		60737: 35100,
		60738: 37704,
		60739: 37512,
		60740: 34012,
		60741: 20425,
		60742: 28859,
		60743: 26161,
		60744: 26824,
		60745: 37625,
		60746: 26363,
		60747: 24389,
		60748: 20008,
		60749: 20193,
		60750: 20220,
		60751: 20224,
		60752: 20227,
		60753: 20281,
		60754: 20310,
		60755: 20370,
		60756: 20362,
		60757: 20378,
		60758: 20372,
		60759: 20429,
		60760: 20544,
		60761: 20514,
		60762: 20479,
		60763: 20510,
		60764: 20550,
		60765: 20592,
		60766: 20546,
		60767: 20628,
		60768: 20724,
		60769: 20696,
		60770: 20810,
		60771: 20836,
		60772: 20893,
		60773: 20926,
		60774: 20972,
		60775: 21013,
		60776: 21148,
		60777: 21158,
		60778: 21184,
		60779: 21211,
		60780: 21248,
		60781: 21255,
		60782: 21284,
		60783: 21362,
		60784: 21395,
		60785: 21426,
		60786: 21469,
		60787: 64014,
		60788: 21660,
		60789: 21642,
		60790: 21673,
		60791: 21759,
		60792: 21894,
		60793: 22361,
		60794: 22373,
		60795: 22444,
		60796: 22472,
		60797: 22471,
		60798: 64015,
		60800: 64016,
		60801: 22686,
		60802: 22706,
		60803: 22795,
		60804: 22867,
		60805: 22875,
		60806: 22877,
		60807: 22883,
		60808: 22948,
		60809: 22970,
		60810: 23382,
		60811: 23488,
		60812: 29999,
		60813: 23512,
		60814: 23532,
		60815: 23582,
		60816: 23718,
		60817: 23738,
		60818: 23797,
		60819: 23847,
		60820: 23891,
		60821: 64017,
		60822: 23874,
		60823: 23917,
		60824: 23992,
		60825: 23993,
		60826: 24016,
		60827: 24353,
		60828: 24372,
		60829: 24423,
		60830: 24503,
		60831: 24542,
		60832: 24669,
		60833: 24709,
		60834: 24714,
		60835: 24798,
		60836: 24789,
		60837: 24864,
		60838: 24818,
		60839: 24849,
		60840: 24887,
		60841: 24880,
		60842: 24984,
		60843: 25107,
		60844: 25254,
		60845: 25589,
		60846: 25696,
		60847: 25757,
		60848: 25806,
		60849: 25934,
		60850: 26112,
		60851: 26133,
		60852: 26171,
		60853: 26121,
		60854: 26158,
		60855: 26142,
		60856: 26148,
		60857: 26213,
		60858: 26199,
		60859: 26201,
		60860: 64018,
		60861: 26227,
		60862: 26265,
		60863: 26272,
		60864: 26290,
		60865: 26303,
		60866: 26362,
		60867: 26382,
		60868: 63785,
		60869: 26470,
		60870: 26555,
		60871: 26706,
		60872: 26560,
		60873: 26625,
		60874: 26692,
		60875: 26831,
		60876: 64019,
		60877: 26984,
		60878: 64020,
		60879: 27032,
		60880: 27106,
		60881: 27184,
		60882: 27243,
		60883: 27206,
		60884: 27251,
		60885: 27262,
		60886: 27362,
		60887: 27364,
		60888: 27606,
		60889: 27711,
		60890: 27740,
		60891: 27782,
		60892: 27759,
		60893: 27866,
		60894: 27908,
		60895: 28039,
		60896: 28015,
		60897: 28054,
		60898: 28076,
		60899: 28111,
		60900: 28152,
		60901: 28146,
		60902: 28156,
		60903: 28217,
		60904: 28252,
		60905: 28199,
		60906: 28220,
		60907: 28351,
		60908: 28552,
		60909: 28597,
		60910: 28661,
		60911: 28677,
		60912: 28679,
		60913: 28712,
		60914: 28805,
		60915: 28843,
		60916: 28943,
		60917: 28932,
		60918: 29020,
		60919: 28998,
		60920: 28999,
		60921: 64021,
		60922: 29121,
		60923: 29182,
		60924: 29361,
		60992: 29374,
		60993: 29476,
		60994: 64022,
		60995: 29559,
		60996: 29629,
		60997: 29641,
		60998: 29654,
		60999: 29667,
		61000: 29650,
		61001: 29703,
		61002: 29685,
		61003: 29734,
		61004: 29738,
		61005: 29737,
		61006: 29742,
		61007: 29794,
		61008: 29833,
		61009: 29855,
		61010: 29953,
		61011: 30063,
		61012: 30338,
		61013: 30364,
		61014: 30366,
		61015: 30363,
		61016: 30374,
		61017: 64023,
		61018: 30534,
		61019: 21167,
		61020: 30753,
		61021: 30798,
		61022: 30820,
		61023: 30842,
		61024: 31024,
		61025: 64024,
		61026: 64025,
		61027: 64026,
		61028: 31124,
		61029: 64027,
		61030: 31131,
		61031: 31441,
		61032: 31463,
		61033: 64028,
		61034: 31467,
		61035: 31646,
		61036: 64029,
		61037: 32072,
		61038: 32092,
		61039: 32183,
		61040: 32160,
		61041: 32214,
		61042: 32338,
		61043: 32583,
		61044: 32673,
		61045: 64030,
		61046: 33537,
		61047: 33634,
		61048: 33663,
		61049: 33735,
		61050: 33782,
		61051: 33864,
		61052: 33972,
		61053: 34131,
		61054: 34137,
		61056: 34155,
		61057: 64031,
		61058: 34224,
		61059: 64032,
		61060: 64033,
		61061: 34823,
		61062: 35061,
		61063: 35346,
		61064: 35383,
		61065: 35449,
		61066: 35495,
		61067: 35518,
		61068: 35551,
		61069: 64034,
		61070: 35574,
		61071: 35667,
		61072: 35711,
		61073: 36080,
		61074: 36084,
		61075: 36114,
		61076: 36214,
		61077: 64035,
		61078: 36559,
		61079: 64036,
		61080: 64037,
		61081: 36967,
		61082: 37086,
		61083: 64038,
		61084: 37141,
		61085: 37159,
		61086: 37338,
		61087: 37335,
		61088: 37342,
		61089: 37357,
		61090: 37358,
		61091: 37348,
		61092: 37349,
		61093: 37382,
		61094: 37392,
		61095: 37386,
		61096: 37434,
		61097: 37440,
		61098: 37436,
		61099: 37454,
		61100: 37465,
		61101: 37457,
		61102: 37433,
		61103: 37479,
		61104: 37543,
		61105: 37495,
		61106: 37496,
		61107: 37607,
		61108: 37591,
		61109: 37593,
		61110: 37584,
		61111: 64039,
		61112: 37589,
		61113: 37600,
		61114: 37587,
		61115: 37669,
		61116: 37665,
		61117: 37627,
		61118: 64040,
		61119: 37662,
		61120: 37631,
		61121: 37661,
		61122: 37634,
		61123: 37744,
		61124: 37719,
		61125: 37796,
		61126: 37830,
		61127: 37854,
		61128: 37880,
		61129: 37937,
		61130: 37957,
		61131: 37960,
		61132: 38290,
		61133: 63964,
		61134: 64041,
		61135: 38557,
		61136: 38575,
		61137: 38707,
		61138: 38715,
		61139: 38723,
		61140: 38733,
		61141: 38735,
		61142: 38737,
		61143: 38741,
		61144: 38999,
		61145: 39013,
		61146: 64042,
		61147: 64043,
		61148: 39207,
		61149: 64044,
		61150: 39326,
		61151: 39502,
		61152: 39641,
		61153: 39644,
		61154: 39797,
		61155: 39794,
		61156: 39823,
		61157: 39857,
		61158: 39867,
		61159: 39936,
		61160: 40304,
		61161: 40299,
		61162: 64045,
		61163: 40473,
		61164: 40657,
		61167: 8560,
		61168: 8561,
		61169: 8562,
		61170: 8563,
		61171: 8564,
		61172: 8565,
		61173: 8566,
		61174: 8567,
		61175: 8568,
		61176: 8569,
		61177: 65506,
		61178: 65508,
		61179: 65287,
		61180: 65282,
		61504: 57344,
		61505: 57345,
		61506: 57346,
		61507: 57347,
		61508: 57348,
		61509: 57349,
		61510: 57350,
		61511: 57351,
		61512: 57352,
		61513: 57353,
		61514: 57354,
		61515: 57355,
		61516: 57356,
		61517: 57357,
		61518: 57358,
		61519: 57359,
		61520: 57360,
		61521: 57361,
		61522: 57362,
		61523: 57363,
		61524: 57364,
		61525: 57365,
		61526: 57366,
		61527: 57367,
		61528: 57368,
		61529: 57369,
		61530: 57370,
		61531: 57371,
		61532: 57372,
		61533: 57373,
		61534: 57374,
		61535: 57375,
		61536: 57376,
		61537: 57377,
		61538: 57378,
		61539: 57379,
		61540: 57380,
		61541: 57381,
		61542: 57382,
		61543: 57383,
		61544: 57384,
		61545: 57385,
		61546: 57386,
		61547: 57387,
		61548: 57388,
		61549: 57389,
		61550: 57390,
		61551: 57391,
		61552: 57392,
		61553: 57393,
		61554: 57394,
		61555: 57395,
		61556: 57396,
		61557: 57397,
		61558: 57398,
		61559: 57399,
		61560: 57400,
		61561: 57401,
		61562: 57402,
		61563: 57403,
		61564: 57404,
		61565: 57405,
		61566: 57406,
		61568: 57407,
		61569: 57408,
		61570: 57409,
		61571: 57410,
		61572: 57411,
		61573: 57412,
		61574: 57413,
		61575: 57414,
		61576: 57415,
		61577: 57416,
		61578: 57417,
		61579: 57418,
		61580: 57419,
		61581: 57420,
		61582: 57421,
		61583: 57422,
		61584: 57423,
		61585: 57424,
		61586: 57425,
		61587: 57426,
		61588: 57427,
		61589: 57428,
		61590: 57429,
		61591: 57430,
		61592: 57431,
		61593: 57432,
		61594: 57433,
		61595: 57434,
		61596: 57435,
		61597: 57436,
		61598: 57437,
		61599: 57438,
		61600: 57439,
		61601: 57440,
		61602: 57441,
		61603: 57442,
		61604: 57443,
		61605: 57444,
		61606: 57445,
		61607: 57446,
		61608: 57447,
		61609: 57448,
		61610: 57449,
		61611: 57450,
		61612: 57451,
		61613: 57452,
		61614: 57453,
		61615: 57454,
		61616: 57455,
		61617: 57456,
		61618: 57457,
		61619: 57458,
		61620: 57459,
		61621: 57460,
		61622: 57461,
		61623: 57462,
		61624: 57463,
		61625: 57464,
		61626: 57465,
		61627: 57466,
		61628: 57467,
		61629: 57468,
		61630: 57469,
		61631: 57470,
		61632: 57471,
		61633: 57472,
		61634: 57473,
		61635: 57474,
		61636: 57475,
		61637: 57476,
		61638: 57477,
		61639: 57478,
		61640: 57479,
		61641: 57480,
		61642: 57481,
		61643: 57482,
		61644: 57483,
		61645: 57484,
		61646: 57485,
		61647: 57486,
		61648: 57487,
		61649: 57488,
		61650: 57489,
		61651: 57490,
		61652: 57491,
		61653: 57492,
		61654: 57493,
		61655: 57494,
		61656: 57495,
		61657: 57496,
		61658: 57497,
		61659: 57498,
		61660: 57499,
		61661: 57500,
		61662: 57501,
		61663: 57502,
		61664: 57503,
		61665: 57504,
		61666: 57505,
		61667: 57506,
		61668: 57507,
		61669: 57508,
		61670: 57509,
		61671: 57510,
		61672: 57511,
		61673: 57512,
		61674: 57513,
		61675: 57514,
		61676: 57515,
		61677: 57516,
		61678: 57517,
		61679: 57518,
		61680: 57519,
		61681: 57520,
		61682: 57521,
		61683: 57522,
		61684: 57523,
		61685: 57524,
		61686: 57525,
		61687: 57526,
		61688: 57527,
		61689: 57528,
		61690: 57529,
		61691: 57530,
		61692: 57531,
		61760: 57532,
		61761: 57533,
		61762: 57534,
		61763: 57535,
		61764: 57536,
		61765: 57537,
		61766: 57538,
		61767: 57539,
		61768: 57540,
		61769: 57541,
		61770: 57542,
		61771: 57543,
		61772: 57544,
		61773: 57545,
		61774: 57546,
		61775: 57547,
		61776: 57548,
		61777: 57549,
		61778: 57550,
		61779: 57551,
		61780: 57552,
		61781: 57553,
		61782: 57554,
		61783: 57555,
		61784: 57556,
		61785: 57557,
		61786: 57558,
		61787: 57559,
		61788: 57560,
		61789: 57561,
		61790: 57562,
		61791: 57563,
		61792: 57564,
		61793: 57565,
		61794: 57566,
		61795: 57567,
		61796: 57568,
		61797: 57569,
		61798: 57570,
		61799: 57571,
		61800: 57572,
		61801: 57573,
		61802: 57574,
		61803: 57575,
		61804: 57576,
		61805: 57577,
		61806: 57578,
		61807: 57579,
		61808: 57580,
		61809: 57581,
		61810: 57582,
		61811: 57583,
		61812: 57584,
		61813: 57585,
		61814: 57586,
		61815: 57587,
		61816: 57588,
		61817: 57589,
		61818: 57590,
		61819: 57591,
		61820: 57592,
		61821: 57593,
		61822: 57594,
		61824: 57595,
		61825: 57596,
		61826: 57597,
		61827: 57598,
		61828: 57599,
		61829: 57600,
		61830: 57601,
		61831: 57602,
		61832: 57603,
		61833: 57604,
		61834: 57605,
		61835: 57606,
		61836: 57607,
		61837: 57608,
		61838: 57609,
		61839: 57610,
		61840: 57611,
		61841: 57612,
		61842: 57613,
		61843: 57614,
		61844: 57615,
		61845: 57616,
		61846: 57617,
		61847: 57618,
		61848: 57619,
		61849: 57620,
		61850: 57621,
		61851: 57622,
		61852: 57623,
		61853: 57624,
		61854: 57625,
		61855: 57626,
		61856: 57627,
		61857: 57628,
		61858: 57629,
		61859: 57630,
		61860: 57631,
		61861: 57632,
		61862: 57633,
		61863: 57634,
		61864: 57635,
		61865: 57636,
		61866: 57637,
		61867: 57638,
		61868: 57639,
		61869: 57640,
		61870: 57641,
		61871: 57642,
		61872: 57643,
		61873: 57644,
		61874: 57645,
		61875: 57646,
		61876: 57647,
		61877: 57648,
		61878: 57649,
		61879: 57650,
		61880: 57651,
		61881: 57652,
		61882: 57653,
		61883: 57654,
		61884: 57655,
		61885: 57656,
		61886: 57657,
		61887: 57658,
		61888: 57659,
		61889: 57660,
		61890: 57661,
		61891: 57662,
		61892: 57663,
		61893: 57664,
		61894: 57665,
		61895: 57666,
		61896: 57667,
		61897: 57668,
		61898: 57669,
		61899: 57670,
		61900: 57671,
		61901: 57672,
		61902: 57673,
		61903: 57674,
		61904: 57675,
		61905: 57676,
		61906: 57677,
		61907: 57678,
		61908: 57679,
		61909: 57680,
		61910: 57681,
		61911: 57682,
		61912: 57683,
		61913: 57684,
		61914: 57685,
		61915: 57686,
		61916: 57687,
		61917: 57688,
		61918: 57689,
		61919: 57690,
		61920: 57691,
		61921: 57692,
		61922: 57693,
		61923: 57694,
		61924: 57695,
		61925: 57696,
		61926: 57697,
		61927: 57698,
		61928: 57699,
		61929: 57700,
		61930: 57701,
		61931: 57702,
		61932: 57703,
		61933: 57704,
		61934: 57705,
		61935: 57706,
		61936: 57707,
		61937: 57708,
		61938: 57709,
		61939: 57710,
		61940: 57711,
		61941: 57712,
		61942: 57713,
		61943: 57714,
		61944: 57715,
		61945: 57716,
		61946: 57717,
		61947: 57718,
		61948: 57719,
		62016: 57720,
		62017: 57721,
		62018: 57722,
		62019: 57723,
		62020: 57724,
		62021: 57725,
		62022: 57726,
		62023: 57727,
		62024: 57728,
		62025: 57729,
		62026: 57730,
		62027: 57731,
		62028: 57732,
		62029: 57733,
		62030: 57734,
		62031: 57735,
		62032: 57736,
		62033: 57737,
		62034: 57738,
		62035: 57739,
		62036: 57740,
		62037: 57741,
		62038: 57742,
		62039: 57743,
		62040: 57744,
		62041: 57745,
		62042: 57746,
		62043: 57747,
		62044: 57748,
		62045: 57749,
		62046: 57750,
		62047: 57751,
		62048: 57752,
		62049: 57753,
		62050: 57754,
		62051: 57755,
		62052: 57756,
		62053: 57757,
		62054: 57758,
		62055: 57759,
		62056: 57760,
		62057: 57761,
		62058: 57762,
		62059: 57763,
		62060: 57764,
		62061: 57765,
		62062: 57766,
		62063: 57767,
		62064: 57768,
		62065: 57769,
		62066: 57770,
		62067: 57771,
		62068: 57772,
		62069: 57773,
		62070: 57774,
		62071: 57775,
		62072: 57776,
		62073: 57777,
		62074: 57778,
		62075: 57779,
		62076: 57780,
		62077: 57781,
		62078: 57782,
		62080: 57783,
		62081: 57784,
		62082: 57785,
		62083: 57786,
		62084: 57787,
		62085: 57788,
		62086: 57789,
		62087: 57790,
		62088: 57791,
		62089: 57792,
		62090: 57793,
		62091: 57794,
		62092: 57795,
		62093: 57796,
		62094: 57797,
		62095: 57798,
		62096: 57799,
		62097: 57800,
		62098: 57801,
		62099: 57802,
		62100: 57803,
		62101: 57804,
		62102: 57805,
		62103: 57806,
		62104: 57807,
		62105: 57808,
		62106: 57809,
		62107: 57810,
		62108: 57811,
		62109: 57812,
		62110: 57813,
		62111: 57814,
		62112: 57815,
		62113: 57816,
		62114: 57817,
		62115: 57818,
		62116: 57819,
		62117: 57820,
		62118: 57821,
		62119: 57822,
		62120: 57823,
		62121: 57824,
		62122: 57825,
		62123: 57826,
		62124: 57827,
		62125: 57828,
		62126: 57829,
		62127: 57830,
		62128: 57831,
		62129: 57832,
		62130: 57833,
		62131: 57834,
		62132: 57835,
		62133: 57836,
		62134: 57837,
		62135: 57838,
		62136: 57839,
		62137: 57840,
		62138: 57841,
		62139: 57842,
		62140: 57843,
		62141: 57844,
		62142: 57845,
		62143: 57846,
		62144: 57847,
		62145: 57848,
		62146: 57849,
		62147: 57850,
		62148: 57851,
		62149: 57852,
		62150: 57853,
		62151: 57854,
		62152: 57855,
		62153: 57856,
		62154: 57857,
		62155: 57858,
		62156: 57859,
		62157: 57860,
		62158: 57861,
		62159: 57862,
		62160: 57863,
		62161: 57864,
		62162: 57865,
		62163: 57866,
		62164: 57867,
		62165: 57868,
		62166: 57869,
		62167: 57870,
		62168: 57871,
		62169: 57872,
		62170: 57873,
		62171: 57874,
		62172: 57875,
		62173: 57876,
		62174: 57877,
		62175: 57878,
		62176: 57879,
		62177: 57880,
		62178: 57881,
		62179: 57882,
		62180: 57883,
		62181: 57884,
		62182: 57885,
		62183: 57886,
		62184: 57887,
		62185: 57888,
		62186: 57889,
		62187: 57890,
		62188: 57891,
		62189: 57892,
		62190: 57893,
		62191: 57894,
		62192: 57895,
		62193: 57896,
		62194: 57897,
		62195: 57898,
		62196: 57899,
		62197: 57900,
		62198: 57901,
		62199: 57902,
		62200: 57903,
		62201: 57904,
		62202: 57905,
		62203: 57906,
		62204: 57907,
		62272: 57908,
		62273: 57909,
		62274: 57910,
		62275: 57911,
		62276: 57912,
		62277: 57913,
		62278: 57914,
		62279: 57915,
		62280: 57916,
		62281: 57917,
		62282: 57918,
		62283: 57919,
		62284: 57920,
		62285: 57921,
		62286: 57922,
		62287: 57923,
		62288: 57924,
		62289: 57925,
		62290: 57926,
		62291: 57927,
		62292: 57928,
		62293: 57929,
		62294: 57930,
		62295: 57931,
		62296: 57932,
		62297: 57933,
		62298: 57934,
		62299: 57935,
		62300: 57936,
		62301: 57937,
		62302: 57938,
		62303: 57939,
		62304: 57940,
		62305: 57941,
		62306: 57942,
		62307: 57943,
		62308: 57944,
		62309: 57945,
		62310: 57946,
		62311: 57947,
		62312: 57948,
		62313: 57949,
		62314: 57950,
		62315: 57951,
		62316: 57952,
		62317: 57953,
		62318: 57954,
		62319: 57955,
		62320: 57956,
		62321: 57957,
		62322: 57958,
		62323: 57959,
		62324: 57960,
		62325: 57961,
		62326: 57962,
		62327: 57963,
		62328: 57964,
		62329: 57965,
		62330: 57966,
		62331: 57967,
		62332: 57968,
		62333: 57969,
		62334: 57970,
		62336: 57971,
		62337: 57972,
		62338: 57973,
		62339: 57974,
		62340: 57975,
		62341: 57976,
		62342: 57977,
		62343: 57978,
		62344: 57979,
		62345: 57980,
		62346: 57981,
		62347: 57982,
		62348: 57983,
		62349: 57984,
		62350: 57985,
		62351: 57986,
		62352: 57987,
		62353: 57988,
		62354: 57989,
		62355: 57990,
		62356: 57991,
		62357: 57992,
		62358: 57993,
		62359: 57994,
		62360: 57995,
		62361: 57996,
		62362: 57997,
		62363: 57998,
		62364: 57999,
		62365: 58000,
		62366: 58001,
		62367: 58002,
		62368: 58003,
		62369: 58004,
		62370: 58005,
		62371: 58006,
		62372: 58007,
		62373: 58008,
		62374: 58009,
		62375: 58010,
		62376: 58011,
		62377: 58012,
		62378: 58013,
		62379: 58014,
		62380: 58015,
		62381: 58016,
		62382: 58017,
		62383: 58018,
		62384: 58019,
		62385: 58020,
		62386: 58021,
		62387: 58022,
		62388: 58023,
		62389: 58024,
		62390: 58025,
		62391: 58026,
		62392: 58027,
		62393: 58028,
		62394: 58029,
		62395: 58030,
		62396: 58031,
		62397: 58032,
		62398: 58033,
		62399: 58034,
		62400: 58035,
		62401: 58036,
		62402: 58037,
		62403: 58038,
		62404: 58039,
		62405: 58040,
		62406: 58041,
		62407: 58042,
		62408: 58043,
		62409: 58044,
		62410: 58045,
		62411: 58046,
		62412: 58047,
		62413: 58048,
		62414: 58049,
		62415: 58050,
		62416: 58051,
		62417: 58052,
		62418: 58053,
		62419: 58054,
		62420: 58055,
		62421: 58056,
		62422: 58057,
		62423: 58058,
		62424: 58059,
		62425: 58060,
		62426: 58061,
		62427: 58062,
		62428: 58063,
		62429: 58064,
		62430: 58065,
		62431: 58066,
		62432: 58067,
		62433: 58068,
		62434: 58069,
		62435: 58070,
		62436: 58071,
		62437: 58072,
		62438: 58073,
		62439: 58074,
		62440: 58075,
		62441: 58076,
		62442: 58077,
		62443: 58078,
		62444: 58079,
		62445: 58080,
		62446: 58081,
		62447: 58082,
		62448: 58083,
		62449: 58084,
		62450: 58085,
		62451: 58086,
		62452: 58087,
		62453: 58088,
		62454: 58089,
		62455: 58090,
		62456: 58091,
		62457: 58092,
		62458: 58093,
		62459: 58094,
		62460: 58095,
		62528: 58096,
		62529: 58097,
		62530: 58098,
		62531: 58099,
		62532: 58100,
		62533: 58101,
		62534: 58102,
		62535: 58103,
		62536: 58104,
		62537: 58105,
		62538: 58106,
		62539: 58107,
		62540: 58108,
		62541: 58109,
		62542: 58110,
		62543: 58111,
		62544: 58112,
		62545: 58113,
		62546: 58114,
		62547: 58115,
		62548: 58116,
		62549: 58117,
		62550: 58118,
		62551: 58119,
		62552: 58120,
		62553: 58121,
		62554: 58122,
		62555: 58123,
		62556: 58124,
		62557: 58125,
		62558: 58126,
		62559: 58127,
		62560: 58128,
		62561: 58129,
		62562: 58130,
		62563: 58131,
		62564: 58132,
		62565: 58133,
		62566: 58134,
		62567: 58135,
		62568: 58136,
		62569: 58137,
		62570: 58138,
		62571: 58139,
		62572: 58140,
		62573: 58141,
		62574: 58142,
		62575: 58143,
		62576: 58144,
		62577: 58145,
		62578: 58146,
		62579: 58147,
		62580: 58148,
		62581: 58149,
		62582: 58150,
		62583: 58151,
		62584: 58152,
		62585: 58153,
		62586: 58154,
		62587: 58155,
		62588: 58156,
		62589: 58157,
		62590: 58158,
		62592: 58159,
		62593: 58160,
		62594: 58161,
		62595: 58162,
		62596: 58163,
		62597: 58164,
		62598: 58165,
		62599: 58166,
		62600: 58167,
		62601: 58168,
		62602: 58169,
		62603: 58170,
		62604: 58171,
		62605: 58172,
		62606: 58173,
		62607: 58174,
		62608: 58175,
		62609: 58176,
		62610: 58177,
		62611: 58178,
		62612: 58179,
		62613: 58180,
		62614: 58181,
		62615: 58182,
		62616: 58183,
		62617: 58184,
		62618: 58185,
		62619: 58186,
		62620: 58187,
		62621: 58188,
		62622: 58189,
		62623: 58190,
		62624: 58191,
		62625: 58192,
		62626: 58193,
		62627: 58194,
		62628: 58195,
		62629: 58196,
		62630: 58197,
		62631: 58198,
		62632: 58199,
		62633: 58200,
		62634: 58201,
		62635: 58202,
		62636: 58203,
		62637: 58204,
		62638: 58205,
		62639: 58206,
		62640: 58207,
		62641: 58208,
		62642: 58209,
		62643: 58210,
		62644: 58211,
		62645: 58212,
		62646: 58213,
		62647: 58214,
		62648: 58215,
		62649: 58216,
		62650: 58217,
		62651: 58218,
		62652: 58219,
		62653: 58220,
		62654: 58221,
		62655: 58222,
		62656: 58223,
		62657: 58224,
		62658: 58225,
		62659: 58226,
		62660: 58227,
		62661: 58228,
		62662: 58229,
		62663: 58230,
		62664: 58231,
		62665: 58232,
		62666: 58233,
		62667: 58234,
		62668: 58235,
		62669: 58236,
		62670: 58237,
		62671: 58238,
		62672: 58239,
		62673: 58240,
		62674: 58241,
		62675: 58242,
		62676: 58243,
		62677: 58244,
		62678: 58245,
		62679: 58246,
		62680: 58247,
		62681: 58248,
		62682: 58249,
		62683: 58250,
		62684: 58251,
		62685: 58252,
		62686: 58253,
		62687: 58254,
		62688: 58255,
		62689: 58256,
		62690: 58257,
		62691: 58258,
		62692: 58259,
		62693: 58260,
		62694: 58261,
		62695: 58262,
		62696: 58263,
		62697: 58264,
		62698: 58265,
		62699: 58266,
		62700: 58267,
		62701: 58268,
		62702: 58269,
		62703: 58270,
		62704: 58271,
		62705: 58272,
		62706: 58273,
		62707: 58274,
		62708: 58275,
		62709: 58276,
		62710: 58277,
		62711: 58278,
		62712: 58279,
		62713: 58280,
		62714: 58281,
		62715: 58282,
		62716: 58283,
		62784: 58284,
		62785: 58285,
		62786: 58286,
		62787: 58287,
		62788: 58288,
		62789: 58289,
		62790: 58290,
		62791: 58291,
		62792: 58292,
		62793: 58293,
		62794: 58294,
		62795: 58295,
		62796: 58296,
		62797: 58297,
		62798: 58298,
		62799: 58299,
		62800: 58300,
		62801: 58301,
		62802: 58302,
		62803: 58303,
		62804: 58304,
		62805: 58305,
		62806: 58306,
		62807: 58307,
		62808: 58308,
		62809: 58309,
		62810: 58310,
		62811: 58311,
		62812: 58312,
		62813: 58313,
		62814: 58314,
		62815: 58315,
		62816: 58316,
		62817: 58317,
		62818: 58318,
		62819: 58319,
		62820: 58320,
		62821: 58321,
		62822: 58322,
		62823: 58323,
		62824: 58324,
		62825: 58325,
		62826: 58326,
		62827: 58327,
		62828: 58328,
		62829: 58329,
		62830: 58330,
		62831: 58331,
		62832: 58332,
		62833: 58333,
		62834: 58334,
		62835: 58335,
		62836: 58336,
		62837: 58337,
		62838: 58338,
		62839: 58339,
		62840: 58340,
		62841: 58341,
		62842: 58342,
		62843: 58343,
		62844: 58344,
		62845: 58345,
		62846: 58346,
		62848: 58347,
		62849: 58348,
		62850: 58349,
		62851: 58350,
		62852: 58351,
		62853: 58352,
		62854: 58353,
		62855: 58354,
		62856: 58355,
		62857: 58356,
		62858: 58357,
		62859: 58358,
		62860: 58359,
		62861: 58360,
		62862: 58361,
		62863: 58362,
		62864: 58363,
		62865: 58364,
		62866: 58365,
		62867: 58366,
		62868: 58367,
		62869: 58368,
		62870: 58369,
		62871: 58370,
		62872: 58371,
		62873: 58372,
		62874: 58373,
		62875: 58374,
		62876: 58375,
		62877: 58376,
		62878: 58377,
		62879: 58378,
		62880: 58379,
		62881: 58380,
		62882: 58381,
		62883: 58382,
		62884: 58383,
		62885: 58384,
		62886: 58385,
		62887: 58386,
		62888: 58387,
		62889: 58388,
		62890: 58389,
		62891: 58390,
		62892: 58391,
		62893: 58392,
		62894: 58393,
		62895: 58394,
		62896: 58395,
		62897: 58396,
		62898: 58397,
		62899: 58398,
		62900: 58399,
		62901: 58400,
		62902: 58401,
		62903: 58402,
		62904: 58403,
		62905: 58404,
		62906: 58405,
		62907: 58406,
		62908: 58407,
		62909: 58408,
		62910: 58409,
		62911: 58410,
		62912: 58411,
		62913: 58412,
		62914: 58413,
		62915: 58414,
		62916: 58415,
		62917: 58416,
		62918: 58417,
		62919: 58418,
		62920: 58419,
		62921: 58420,
		62922: 58421,
		62923: 58422,
		62924: 58423,
		62925: 58424,
		62926: 58425,
		62927: 58426,
		62928: 58427,
		62929: 58428,
		62930: 58429,
		62931: 58430,
		62932: 58431,
		62933: 58432,
		62934: 58433,
		62935: 58434,
		62936: 58435,
		62937: 58436,
		62938: 58437,
		62939: 58438,
		62940: 58439,
		62941: 58440,
		62942: 58441,
		62943: 58442,
		62944: 58443,
		62945: 58444,
		62946: 58445,
		62947: 58446,
		62948: 58447,
		62949: 58448,
		62950: 58449,
		62951: 58450,
		62952: 58451,
		62953: 58452,
		62954: 58453,
		62955: 58454,
		62956: 58455,
		62957: 58456,
		62958: 58457,
		62959: 58458,
		62960: 58459,
		62961: 58460,
		62962: 58461,
		62963: 58462,
		62964: 58463,
		62965: 58464,
		62966: 58465,
		62967: 58466,
		62968: 58467,
		62969: 58468,
		62970: 58469,
		62971: 58470,
		62972: 58471,
		63040: 58472,
		63041: 58473,
		63042: 58474,
		63043: 58475,
		63044: 58476,
		63045: 58477,
		63046: 58478,
		63047: 58479,
		63048: 58480,
		63049: 58481,
		63050: 58482,
		63051: 58483,
		63052: 58484,
		63053: 58485,
		63054: 58486,
		63055: 58487,
		63056: 58488,
		63057: 58489,
		63058: 58490,
		63059: 58491,
		63060: 58492,
		63061: 58493,
		63062: 58494,
		63063: 58495,
		63064: 58496,
		63065: 58497,
		63066: 58498,
		63067: 58499,
		63068: 58500,
		63069: 58501,
		63070: 58502,
		63071: 58503,
		63072: 58504,
		63073: 58505,
		63074: 58506,
		63075: 58507,
		63076: 58508,
		63077: 58509,
		63078: 58510,
		63079: 58511,
		63080: 58512,
		63081: 58513,
		63082: 58514,
		63083: 58515,
		63084: 58516,
		63085: 58517,
		63086: 58518,
		63087: 58519,
		63088: 58520,
		63089: 58521,
		63090: 58522,
		63091: 58523,
		63092: 58524,
		63093: 58525,
		63094: 58526,
		63095: 58527,
		63096: 58528,
		63097: 58529,
		63098: 58530,
		63099: 58531,
		63100: 58532,
		63101: 58533,
		63102: 58534,
		63104: 58535,
		63105: 58536,
		63106: 58537,
		63107: 58538,
		63108: 58539,
		63109: 58540,
		63110: 58541,
		63111: 58542,
		63112: 58543,
		63113: 58544,
		63114: 58545,
		63115: 58546,
		63116: 58547,
		63117: 58548,
		63118: 58549,
		63119: 58550,
		63120: 58551,
		63121: 58552,
		63122: 58553,
		63123: 58554,
		63124: 58555,
		63125: 58556,
		63126: 58557,
		63127: 58558,
		63128: 58559,
		63129: 58560,
		63130: 58561,
		63131: 58562,
		63132: 58563,
		63133: 58564,
		63134: 58565,
		63135: 58566,
		63136: 58567,
		63137: 58568,
		63138: 58569,
		63139: 58570,
		63140: 58571,
		63141: 58572,
		63142: 58573,
		63143: 58574,
		63144: 58575,
		63145: 58576,
		63146: 58577,
		63147: 58578,
		63148: 58579,
		63149: 58580,
		63150: 58581,
		63151: 58582,
		63152: 58583,
		63153: 58584,
		63154: 58585,
		63155: 58586,
		63156: 58587,
		63157: 58588,
		63158: 58589,
		63159: 58590,
		63160: 58591,
		63161: 58592,
		63162: 58593,
		63163: 58594,
		63164: 58595,
		63165: 58596,
		63166: 58597,
		63167: 58598,
		63168: 58599,
		63169: 58600,
		63170: 58601,
		63171: 58602,
		63172: 58603,
		63173: 58604,
		63174: 58605,
		63175: 58606,
		63176: 58607,
		63177: 58608,
		63178: 58609,
		63179: 58610,
		63180: 58611,
		63181: 58612,
		63182: 58613,
		63183: 58614,
		63184: 58615,
		63185: 58616,
		63186: 58617,
		63187: 58618,
		63188: 58619,
		63189: 58620,
		63190: 58621,
		63191: 58622,
		63192: 58623,
		63193: 58624,
		63194: 58625,
		63195: 58626,
		63196: 58627,
		63197: 58628,
		63198: 58629,
		63199: 58630,
		63200: 58631,
		63201: 58632,
		63202: 58633,
		63203: 58634,
		63204: 58635,
		63205: 58636,
		63206: 58637,
		63207: 58638,
		63208: 58639,
		63209: 58640,
		63210: 58641,
		63211: 58642,
		63212: 58643,
		63213: 58644,
		63214: 58645,
		63215: 58646,
		63216: 58647,
		63217: 58648,
		63218: 58649,
		63219: 58650,
		63220: 58651,
		63221: 58652,
		63222: 58653,
		63223: 58654,
		63224: 58655,
		63225: 58656,
		63226: 58657,
		63227: 58658,
		63228: 58659,
		63296: 58660,
		63297: 58661,
		63298: 58662,
		63299: 58663,
		63300: 58664,
		63301: 58665,
		63302: 58666,
		63303: 58667,
		63304: 58668,
		63305: 58669,
		63306: 58670,
		63307: 58671,
		63308: 58672,
		63309: 58673,
		63310: 58674,
		63311: 58675,
		63312: 58676,
		63313: 58677,
		63314: 58678,
		63315: 58679,
		63316: 58680,
		63317: 58681,
		63318: 58682,
		63319: 58683,
		63320: 58684,
		63321: 58685,
		63322: 58686,
		63323: 58687,
		63324: 58688,
		63325: 58689,
		63326: 58690,
		63327: 58691,
		63328: 58692,
		63329: 58693,
		63330: 58694,
		63331: 58695,
		63332: 58696,
		63333: 58697,
		63334: 58698,
		63335: 58699,
		63336: 58700,
		63337: 58701,
		63338: 58702,
		63339: 58703,
		63340: 58704,
		63341: 58705,
		63342: 58706,
		63343: 58707,
		63344: 58708,
		63345: 58709,
		63346: 58710,
		63347: 58711,
		63348: 58712,
		63349: 58713,
		63350: 58714,
		63351: 58715,
		63352: 58716,
		63353: 58717,
		63354: 58718,
		63355: 58719,
		63356: 58720,
		63357: 58721,
		63358: 58722,
		63360: 58723,
		63361: 58724,
		63362: 58725,
		63363: 58726,
		63364: 58727,
		63365: 58728,
		63366: 58729,
		63367: 58730,
		63368: 58731,
		63369: 58732,
		63370: 58733,
		63371: 58734,
		63372: 58735,
		63373: 58736,
		63374: 58737,
		63375: 58738,
		63376: 58739,
		63377: 58740,
		63378: 58741,
		63379: 58742,
		63380: 58743,
		63381: 58744,
		63382: 58745,
		63383: 58746,
		63384: 58747,
		63385: 58748,
		63386: 58749,
		63387: 58750,
		63388: 58751,
		63389: 58752,
		63390: 58753,
		63391: 58754,
		63392: 58755,
		63393: 58756,
		63394: 58757,
		63395: 58758,
		63396: 58759,
		63397: 58760,
		63398: 58761,
		63399: 58762,
		63400: 58763,
		63401: 58764,
		63402: 58765,
		63403: 58766,
		63404: 58767,
		63405: 58768,
		63406: 58769,
		63407: 58770,
		63408: 58771,
		63409: 58772,
		63410: 58773,
		63411: 58774,
		63412: 58775,
		63413: 58776,
		63414: 58777,
		63415: 58778,
		63416: 58779,
		63417: 58780,
		63418: 58781,
		63419: 58782,
		63420: 58783,
		63421: 58784,
		63422: 58785,
		63423: 58786,
		63424: 58787,
		63425: 58788,
		63426: 58789,
		63427: 58790,
		63428: 58791,
		63429: 58792,
		63430: 58793,
		63431: 58794,
		63432: 58795,
		63433: 58796,
		63434: 58797,
		63435: 58798,
		63436: 58799,
		63437: 58800,
		63438: 58801,
		63439: 58802,
		63440: 58803,
		63441: 58804,
		63442: 58805,
		63443: 58806,
		63444: 58807,
		63445: 58808,
		63446: 58809,
		63447: 58810,
		63448: 58811,
		63449: 58812,
		63450: 58813,
		63451: 58814,
		63452: 58815,
		63453: 58816,
		63454: 58817,
		63455: 58818,
		63456: 58819,
		63457: 58820,
		63458: 58821,
		63459: 58822,
		63460: 58823,
		63461: 58824,
		63462: 58825,
		63463: 58826,
		63464: 58827,
		63465: 58828,
		63466: 58829,
		63467: 58830,
		63468: 58831,
		63469: 58832,
		63470: 58833,
		63471: 58834,
		63472: 58835,
		63473: 58836,
		63474: 58837,
		63475: 58838,
		63476: 58839,
		63477: 58840,
		63478: 58841,
		63479: 58842,
		63480: 58843,
		63481: 58844,
		63482: 58845,
		63483: 58846,
		63484: 58847,
		63552: 58848,
		63553: 58849,
		63554: 58850,
		63555: 58851,
		63556: 58852,
		63557: 58853,
		63558: 58854,
		63559: 58855,
		63560: 58856,
		63561: 58857,
		63562: 58858,
		63563: 58859,
		63564: 58860,
		63565: 58861,
		63566: 58862,
		63567: 58863,
		63568: 58864,
		63569: 58865,
		63570: 58866,
		63571: 58867,
		63572: 58868,
		63573: 58869,
		63574: 58870,
		63575: 58871,
		63576: 58872,
		63577: 58873,
		63578: 58874,
		63579: 58875,
		63580: 58876,
		63581: 58877,
		63582: 58878,
		63583: 58879,
		63584: 58880,
		63585: 58881,
		63586: 58882,
		63587: 58883,
		63588: 58884,
		63589: 58885,
		63590: 58886,
		63591: 58887,
		63592: 58888,
		63593: 58889,
		63594: 58890,
		63595: 58891,
		63596: 58892,
		63597: 58893,
		63598: 58894,
		63599: 58895,
		63600: 58896,
		63601: 58897,
		63602: 58898,
		63603: 58899,
		63604: 58900,
		63605: 58901,
		63606: 58902,
		63607: 58903,
		63608: 58904,
		63609: 58905,
		63610: 58906,
		63611: 58907,
		63612: 58908,
		63613: 58909,
		63614: 58910,
		63616: 58911,
		63617: 58912,
		63618: 58913,
		63619: 58914,
		63620: 58915,
		63621: 58916,
		63622: 58917,
		63623: 58918,
		63624: 58919,
		63625: 58920,
		63626: 58921,
		63627: 58922,
		63628: 58923,
		63629: 58924,
		63630: 58925,
		63631: 58926,
		63632: 58927,
		63633: 58928,
		63634: 58929,
		63635: 58930,
		63636: 58931,
		63637: 58932,
		63638: 58933,
		63639: 58934,
		63640: 58935,
		63641: 58936,
		63642: 58937,
		63643: 58938,
		63644: 58939,
		63645: 58940,
		63646: 58941,
		63647: 58942,
		63648: 58943,
		63649: 58944,
		63650: 58945,
		63651: 58946,
		63652: 58947,
		63653: 58948,
		63654: 58949,
		63655: 58950,
		63656: 58951,
		63657: 58952,
		63658: 58953,
		63659: 58954,
		63660: 58955,
		63661: 58956,
		63662: 58957,
		63663: 58958,
		63664: 58959,
		63665: 58960,
		63666: 58961,
		63667: 58962,
		63668: 58963,
		63669: 58964,
		63670: 58965,
		63671: 58966,
		63672: 58967,
		63673: 58968,
		63674: 58969,
		63675: 58970,
		63676: 58971,
		63677: 58972,
		63678: 58973,
		63679: 58974,
		63680: 58975,
		63681: 58976,
		63682: 58977,
		63683: 58978,
		63684: 58979,
		63685: 58980,
		63686: 58981,
		63687: 58982,
		63688: 58983,
		63689: 58984,
		63690: 58985,
		63691: 58986,
		63692: 58987,
		63693: 58988,
		63694: 58989,
		63695: 58990,
		63696: 58991,
		63697: 58992,
		63698: 58993,
		63699: 58994,
		63700: 58995,
		63701: 58996,
		63702: 58997,
		63703: 58998,
		63704: 58999,
		63705: 59000,
		63706: 59001,
		63707: 59002,
		63708: 59003,
		63709: 59004,
		63710: 59005,
		63711: 59006,
		63712: 59007,
		63713: 59008,
		63714: 59009,
		63715: 59010,
		63716: 59011,
		63717: 59012,
		63718: 59013,
		63719: 59014,
		63720: 59015,
		63721: 59016,
		63722: 59017,
		63723: 59018,
		63724: 59019,
		63725: 59020,
		63726: 59021,
		63727: 59022,
		63728: 59023,
		63729: 59024,
		63730: 59025,
		63731: 59026,
		63732: 59027,
		63733: 59028,
		63734: 59029,
		63735: 59030,
		63736: 59031,
		63737: 59032,
		63738: 59033,
		63739: 59034,
		63740: 59035,
		64064: 8560,
		64065: 8561,
		64066: 8562,
		64067: 8563,
		64068: 8564,
		64069: 8565,
		64070: 8566,
		64071: 8567,
		64072: 8568,
		64073: 8569,
		64074: 8544,
		64075: 8545,
		64076: 8546,
		64077: 8547,
		64078: 8548,
		64079: 8549,
		64080: 8550,
		64081: 8551,
		64082: 8552,
		64083: 8553,
		64084: 65506,
		64085: 65508,
		64086: 65287,
		64087: 65282,
		64088: 12849,
		64089: 8470,
		64090: 8481,
		64091: 8757,
		64092: 32394,
		64093: 35100,
		64094: 37704,
		64095: 37512,
		64096: 34012,
		64097: 20425,
		64098: 28859,
		64099: 26161,
		64100: 26824,
		64101: 37625,
		64102: 26363,
		64103: 24389,
		64104: 20008,
		64105: 20193,
		64106: 20220,
		64107: 20224,
		64108: 20227,
		64109: 20281,
		64110: 20310,
		64111: 20370,
		64112: 20362,
		64113: 20378,
		64114: 20372,
		64115: 20429,
		64116: 20544,
		64117: 20514,
		64118: 20479,
		64119: 20510,
		64120: 20550,
		64121: 20592,
		64122: 20546,
		64123: 20628,
		64124: 20724,
		64125: 20696,
		64126: 20810,
		64128: 20836,
		64129: 20893,
		64130: 20926,
		64131: 20972,
		64132: 21013,
		64133: 21148,
		64134: 21158,
		64135: 21184,
		64136: 21211,
		64137: 21248,
		64138: 21255,
		64139: 21284,
		64140: 21362,
		64141: 21395,
		64142: 21426,
		64143: 21469,
		64144: 64014,
		64145: 21660,
		64146: 21642,
		64147: 21673,
		64148: 21759,
		64149: 21894,
		64150: 22361,
		64151: 22373,
		64152: 22444,
		64153: 22472,
		64154: 22471,
		64155: 64015,
		64156: 64016,
		64157: 22686,
		64158: 22706,
		64159: 22795,
		64160: 22867,
		64161: 22875,
		64162: 22877,
		64163: 22883,
		64164: 22948,
		64165: 22970,
		64166: 23382,
		64167: 23488,
		64168: 29999,
		64169: 23512,
		64170: 23532,
		64171: 23582,
		64172: 23718,
		64173: 23738,
		64174: 23797,
		64175: 23847,
		64176: 23891,
		64177: 64017,
		64178: 23874,
		64179: 23917,
		64180: 23992,
		64181: 23993,
		64182: 24016,
		64183: 24353,
		64184: 24372,
		64185: 24423,
		64186: 24503,
		64187: 24542,
		64188: 24669,
		64189: 24709,
		64190: 24714,
		64191: 24798,
		64192: 24789,
		64193: 24864,
		64194: 24818,
		64195: 24849,
		64196: 24887,
		64197: 24880,
		64198: 24984,
		64199: 25107,
		64200: 25254,
		64201: 25589,
		64202: 25696,
		64203: 25757,
		64204: 25806,
		64205: 25934,
		64206: 26112,
		64207: 26133,
		64208: 26171,
		64209: 26121,
		64210: 26158,
		64211: 26142,
		64212: 26148,
		64213: 26213,
		64214: 26199,
		64215: 26201,
		64216: 64018,
		64217: 26227,
		64218: 26265,
		64219: 26272,
		64220: 26290,
		64221: 26303,
		64222: 26362,
		64223: 26382,
		64224: 63785,
		64225: 26470,
		64226: 26555,
		64227: 26706,
		64228: 26560,
		64229: 26625,
		64230: 26692,
		64231: 26831,
		64232: 64019,
		64233: 26984,
		64234: 64020,
		64235: 27032,
		64236: 27106,
		64237: 27184,
		64238: 27243,
		64239: 27206,
		64240: 27251,
		64241: 27262,
		64242: 27362,
		64243: 27364,
		64244: 27606,
		64245: 27711,
		64246: 27740,
		64247: 27782,
		64248: 27759,
		64249: 27866,
		64250: 27908,
		64251: 28039,
		64252: 28015,
		64320: 28054,
		64321: 28076,
		64322: 28111,
		64323: 28152,
		64324: 28146,
		64325: 28156,
		64326: 28217,
		64327: 28252,
		64328: 28199,
		64329: 28220,
		64330: 28351,
		64331: 28552,
		64332: 28597,
		64333: 28661,
		64334: 28677,
		64335: 28679,
		64336: 28712,
		64337: 28805,
		64338: 28843,
		64339: 28943,
		64340: 28932,
		64341: 29020,
		64342: 28998,
		64343: 28999,
		64344: 64021,
		64345: 29121,
		64346: 29182,
		64347: 29361,
		64348: 29374,
		64349: 29476,
		64350: 64022,
		64351: 29559,
		64352: 29629,
		64353: 29641,
		64354: 29654,
		64355: 29667,
		64356: 29650,
		64357: 29703,
		64358: 29685,
		64359: 29734,
		64360: 29738,
		64361: 29737,
		64362: 29742,
		64363: 29794,
		64364: 29833,
		64365: 29855,
		64366: 29953,
		64367: 30063,
		64368: 30338,
		64369: 30364,
		64370: 30366,
		64371: 30363,
		64372: 30374,
		64373: 64023,
		64374: 30534,
		64375: 21167,
		64376: 30753,
		64377: 30798,
		64378: 30820,
		64379: 30842,
		64380: 31024,
		64381: 64024,
		64382: 64025,
		64384: 64026,
		64385: 31124,
		64386: 64027,
		64387: 31131,
		64388: 31441,
		64389: 31463,
		64390: 64028,
		64391: 31467,
		64392: 31646,
		64393: 64029,
		64394: 32072,
		64395: 32092,
		64396: 32183,
		64397: 32160,
		64398: 32214,
		64399: 32338,
		64400: 32583,
		64401: 32673,
		64402: 64030,
		64403: 33537,
		64404: 33634,
		64405: 33663,
		64406: 33735,
		64407: 33782,
		64408: 33864,
		64409: 33972,
		64410: 34131,
		64411: 34137,
		64412: 34155,
		64413: 64031,
		64414: 34224,
		64415: 64032,
		64416: 64033,
		64417: 34823,
		64418: 35061,
		64419: 35346,
		64420: 35383,
		64421: 35449,
		64422: 35495,
		64423: 35518,
		64424: 35551,
		64425: 64034,
		64426: 35574,
		64427: 35667,
		64428: 35711,
		64429: 36080,
		64430: 36084,
		64431: 36114,
		64432: 36214,
		64433: 64035,
		64434: 36559,
		64435: 64036,
		64436: 64037,
		64437: 36967,
		64438: 37086,
		64439: 64038,
		64440: 37141,
		64441: 37159,
		64442: 37338,
		64443: 37335,
		64444: 37342,
		64445: 37357,
		64446: 37358,
		64447: 37348,
		64448: 37349,
		64449: 37382,
		64450: 37392,
		64451: 37386,
		64452: 37434,
		64453: 37440,
		64454: 37436,
		64455: 37454,
		64456: 37465,
		64457: 37457,
		64458: 37433,
		64459: 37479,
		64460: 37543,
		64461: 37495,
		64462: 37496,
		64463: 37607,
		64464: 37591,
		64465: 37593,
		64466: 37584,
		64467: 64039,
		64468: 37589,
		64469: 37600,
		64470: 37587,
		64471: 37669,
		64472: 37665,
		64473: 37627,
		64474: 64040,
		64475: 37662,
		64476: 37631,
		64477: 37661,
		64478: 37634,
		64479: 37744,
		64480: 37719,
		64481: 37796,
		64482: 37830,
		64483: 37854,
		64484: 37880,
		64485: 37937,
		64486: 37957,
		64487: 37960,
		64488: 38290,
		64489: 63964,
		64490: 64041,
		64491: 38557,
		64492: 38575,
		64493: 38707,
		64494: 38715,
		64495: 38723,
		64496: 38733,
		64497: 38735,
		64498: 38737,
		64499: 38741,
		64500: 38999,
		64501: 39013,
		64502: 64042,
		64503: 64043,
		64504: 39207,
		64505: 64044,
		64506: 39326,
		64507: 39502,
		64508: 39641,
		64576: 39644,
		64577: 39797,
		64578: 39794,
		64579: 39823,
		64580: 39857,
		64581: 39867,
		64582: 39936,
		64583: 40304,
		64584: 40299,
		64585: 64045,
		64586: 40473,
		64587: 40657
	};

	/**
	 * @author takahiro / https://github.com/takahirox
	 */

	function DataViewEx( buffer, littleEndian ) {

		this.dv = new DataView( buffer );
		this.offset = 0;
		this.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;
		this.encoder = new CharsetEncoder();

	}

	DataViewEx.prototype = {

		constructor: DataViewEx,

		getInt8: function () {

			var value = this.dv.getInt8( this.offset );
			this.offset += 1;
			return value;

		},

		getInt8Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getInt8() );

			}

			return a;

		},

		getUint8: function () {

			var value = this.dv.getUint8( this.offset );
			this.offset += 1;
			return value;

		},

		getUint8Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getUint8() );

			}

			return a;

		},


		getInt16: function () {

			var value = this.dv.getInt16( this.offset, this.littleEndian );
			this.offset += 2;
			return value;

		},

		getInt16Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getInt16() );

			}

			return a;

		},

		getUint16: function () {

			var value = this.dv.getUint16( this.offset, this.littleEndian );
			this.offset += 2;
			return value;

		},

		getUint16Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getUint16() );

			}

			return a;

		},

		getInt32: function () {

			var value = this.dv.getInt32( this.offset, this.littleEndian );
			this.offset += 4;
			return value;

		},

		getInt32Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getInt32() );

			}

			return a;

		},

		getUint32: function () {

			var value = this.dv.getUint32( this.offset, this.littleEndian );
			this.offset += 4;
			return value;

		},

		getUint32Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getUint32() );

			}

			return a;

		},

		getFloat32: function () {

			var value = this.dv.getFloat32( this.offset, this.littleEndian );
			this.offset += 4;
			return value;

		},

		getFloat32Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getFloat32() );

			}

			return a;

		},

		getFloat64: function () {

			var value = this.dv.getFloat64( this.offset, this.littleEndian );
			this.offset += 8;
			return value;

		},

		getFloat64Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getFloat64() );

			}

			return a;

		},

		getIndex: function ( type, isUnsigned ) {

			switch ( type ) {

				case 1:
					return ( isUnsigned === true ) ? this.getUint8() : this.getInt8();

				case 2:
					return ( isUnsigned === true ) ? this.getUint16() : this.getInt16();

				case 4:
					return this.getInt32(); // No Uint32

				default:
					throw 'unknown number type ' + type + ' exception.';

			}

		},

		getIndexArray: function ( type, size, isUnsigned ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getIndex( type, isUnsigned ) );

			}

			return a;

		},

		getChars: function ( size ) {

			var str = '';

			while ( size > 0 ) {

				var value = this.getUint8();
				size --;

				if ( value === 0 ) {

					break;

				}

				str += String.fromCharCode( value );

			}

			while ( size > 0 ) {

				this.getUint8();
				size --;

			}

			return str;

		},

		getSjisStringsAsUnicode: function ( size ) {

			var a = [];

			while ( size > 0 ) {

				var value = this.getUint8();
				size --;

				if ( value === 0 ) {

					break;

				}

				a.push( value );

			}

			while ( size > 0 ) {

				this.getUint8();
				size --;

			}

			return this.encoder.s2u( new Uint8Array( a ) );

		},

		getUnicodeStrings: function ( size ) {

			var str = '';

			while ( size > 0 ) {

				var value = this.getUint16();
				size -= 2;

				if ( value === 0 ) {

					break;

				}

				str += String.fromCharCode( value );

			}

			while ( size > 0 ) {

				this.getUint8();
				size --;

			}

			return str;

		},

		getTextBuffer: function () {

			var size = this.getUint32();
			return this.getUnicodeStrings( size );

		}

	};

	/**
	 * @author takahiro / https://github.com/takahirox
	 */

	function DataCreationHelper() {
	}

	DataCreationHelper.prototype = {

		constructor: DataCreationHelper,

		leftToRightVector3: function ( v ) {

			v[ 2 ] = - v[ 2 ];

		},

		leftToRightQuaternion: function ( q ) {

			q[ 0 ] = - q[ 0 ];
			q[ 1 ] = - q[ 1 ];

		},

		leftToRightEuler: function ( r ) {

			r[ 0 ] = - r[ 0 ];
			r[ 1 ] = - r[ 1 ];

		},

		leftToRightIndexOrder: function ( p ) {

			var tmp = p[ 2 ];
			p[ 2 ] = p[ 0 ];
			p[ 0 ] = tmp;

		},

		leftToRightVector3Range: function ( v1, v2 ) {

			var tmp = - v2[ 2 ];
			v2[ 2 ] = - v1[ 2 ];
			v1[ 2 ] = tmp;

		},

		leftToRightEulerRange: function ( r1, r2 ) {

			var tmp1 = - r2[ 0 ];
			var tmp2 = - r2[ 1 ];
			r2[ 0 ] = - r1[ 0 ];
			r2[ 1 ] = - r1[ 1 ];
			r1[ 0 ] = tmp1;
			r1[ 1 ] = tmp2;

		}

	};

	/**
	 * @author takahiro / https://github.com/takahirox
	 */

	function Parser() {
	}

	Parser.prototype.parsePmd = function ( buffer, leftToRight ) {

		var pmd = {};
		var dv = new DataViewEx( buffer );

		pmd.metadata = {};
		pmd.metadata.format = 'pmd';
		pmd.metadata.coordinateSystem = 'left';

		var parseHeader = function () {

			var metadata = pmd.metadata;
			metadata.magic = dv.getChars( 3 );

			if ( metadata.magic !== 'Pmd' ) {

				throw 'PMD file magic is not Pmd, but ' + metadata.magic;

			}

			metadata.version = dv.getFloat32();
			metadata.modelName = dv.getSjisStringsAsUnicode( 20 );
			metadata.comment = dv.getSjisStringsAsUnicode( 256 );

		};

		var parseVertices = function () {

			var parseVertex = function () {

				var p = {};
				p.position = dv.getFloat32Array( 3 );
				p.normal = dv.getFloat32Array( 3 );
				p.uv = dv.getFloat32Array( 2 );
				p.skinIndices = dv.getUint16Array( 2 );
				p.skinWeights = [ dv.getUint8() / 100 ];
				p.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );
				p.edgeFlag = dv.getUint8();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.vertexCount = dv.getUint32();

			pmd.vertices = [];

			for ( var i = 0; i < metadata.vertexCount; i ++ ) {

				pmd.vertices.push( parseVertex() );

			}

		};

		var parseFaces = function () {

			var parseFace = function () {

				var p = {};
				p.indices = dv.getUint16Array( 3 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.faceCount = dv.getUint32() / 3;

			pmd.faces = [];

			for ( var i = 0; i < metadata.faceCount; i ++ ) {

				pmd.faces.push( parseFace() );

			}

		};

		var parseMaterials = function () {

			var parseMaterial = function () {

				var p = {};
				p.diffuse = dv.getFloat32Array( 4 );
				p.shininess = dv.getFloat32();
				p.specular = dv.getFloat32Array( 3 );
				p.ambient = dv.getFloat32Array( 3 );
				p.toonIndex = dv.getInt8();
				p.edgeFlag = dv.getUint8();
				p.faceCount = dv.getUint32() / 3;
				p.fileName = dv.getSjisStringsAsUnicode( 20 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.materialCount = dv.getUint32();

			pmd.materials = [];

			for ( var i = 0; i < metadata.materialCount; i ++ ) {

				pmd.materials.push( parseMaterial() );

			}

		};

		var parseBones = function () {

			var parseBone = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.parentIndex = dv.getInt16();
				p.tailIndex = dv.getInt16();
				p.type = dv.getUint8();
				p.ikIndex = dv.getInt16();
				p.position = dv.getFloat32Array( 3 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.boneCount = dv.getUint16();

			pmd.bones = [];

			for ( var i = 0; i < metadata.boneCount; i ++ ) {

				pmd.bones.push( parseBone() );

			}

		};

		var parseIks = function () {

			var parseIk = function () {

				var p = {};
				p.target = dv.getUint16();
				p.effector = dv.getUint16();
				p.linkCount = dv.getUint8();
				p.iteration = dv.getUint16();
				p.maxAngle = dv.getFloat32();

				p.links = [];
				for ( var i = 0; i < p.linkCount; i ++ ) {

					var link = {};
					link.index = dv.getUint16();
					p.links.push( link );

				}

				return p;

			};

			var metadata = pmd.metadata;
			metadata.ikCount = dv.getUint16();

			pmd.iks = [];

			for ( var i = 0; i < metadata.ikCount; i ++ ) {

				pmd.iks.push( parseIk() );

			}

		};

		var parseMorphs = function () {

			var parseMorph = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.elementCount = dv.getUint32();
				p.type = dv.getUint8();

				p.elements = [];
				for ( var i = 0; i < p.elementCount; i ++ ) {

					p.elements.push( {
						index: dv.getUint32(),
						position: dv.getFloat32Array( 3 )
					} );

				}

				return p;

			};

			var metadata = pmd.metadata;
			metadata.morphCount = dv.getUint16();

			pmd.morphs = [];

			for ( var i = 0; i < metadata.morphCount; i ++ ) {

				pmd.morphs.push( parseMorph() );

			}


		};

		var parseMorphFrames = function () {

			var parseMorphFrame = function () {

				var p = {};
				p.index = dv.getUint16();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.morphFrameCount = dv.getUint8();

			pmd.morphFrames = [];

			for ( var i = 0; i < metadata.morphFrameCount; i ++ ) {

				pmd.morphFrames.push( parseMorphFrame() );

			}

		};

		var parseBoneFrameNames = function () {

			var parseBoneFrameName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 50 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.boneFrameNameCount = dv.getUint8();

			pmd.boneFrameNames = [];

			for ( var i = 0; i < metadata.boneFrameNameCount; i ++ ) {

				pmd.boneFrameNames.push( parseBoneFrameName() );

			}

		};

		var parseBoneFrames = function () {

			var parseBoneFrame = function () {

				var p = {};
				p.boneIndex = dv.getInt16();
				p.frameIndex = dv.getUint8();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.boneFrameCount = dv.getUint32();

			pmd.boneFrames = [];

			for ( var i = 0; i < metadata.boneFrameCount; i ++ ) {

				pmd.boneFrames.push( parseBoneFrame() );

			}

		};

		var parseEnglishHeader = function () {

			var metadata = pmd.metadata;
			metadata.englishCompatibility = dv.getUint8();

			if ( metadata.englishCompatibility > 0 ) {

				metadata.englishModelName = dv.getSjisStringsAsUnicode( 20 );
				metadata.englishComment = dv.getSjisStringsAsUnicode( 256 );

			}

		};

		var parseEnglishBoneNames = function () {

			var parseEnglishBoneName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				return p;

			};

			var metadata = pmd.metadata;

			if ( metadata.englishCompatibility === 0 ) {

				return;

			}

			pmd.englishBoneNames = [];

			for ( var i = 0; i < metadata.boneCount; i ++ ) {

				pmd.englishBoneNames.push( parseEnglishBoneName() );

			}

		};

		var parseEnglishMorphNames = function () {

			var parseEnglishMorphName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				return p;

			};

			var metadata = pmd.metadata;

			if ( metadata.englishCompatibility === 0 ) {

				return;

			}

			pmd.englishMorphNames = [];

			for ( var i = 0; i < metadata.morphCount - 1; i ++ ) {

				pmd.englishMorphNames.push( parseEnglishMorphName() );

			}

		};

		var parseEnglishBoneFrameNames = function () {

			var parseEnglishBoneFrameName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 50 );
				return p;

			};

			var metadata = pmd.metadata;

			if ( metadata.englishCompatibility === 0 ) {

				return;

			}

			pmd.englishBoneFrameNames = [];

			for ( var i = 0; i < metadata.boneFrameNameCount; i ++ ) {

				pmd.englishBoneFrameNames.push( parseEnglishBoneFrameName() );

			}

		};

		var parseToonTextures = function () {

			var parseToonTexture = function () {

				var p = {};
				p.fileName = dv.getSjisStringsAsUnicode( 100 );
				return p;

			};

			pmd.toonTextures = [];

			for ( var i = 0; i < 10; i ++ ) {

				pmd.toonTextures.push( parseToonTexture() );

			}

		};

		var parseRigidBodies = function () {

			var parseRigidBody = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.boneIndex = dv.getInt16();
				p.groupIndex = dv.getUint8();
				p.groupTarget = dv.getUint16();
				p.shapeType = dv.getUint8();
				p.width = dv.getFloat32();
				p.height = dv.getFloat32();
				p.depth = dv.getFloat32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.weight = dv.getFloat32();
				p.positionDamping = dv.getFloat32();
				p.rotationDamping = dv.getFloat32();
				p.restitution = dv.getFloat32();
				p.friction = dv.getFloat32();
				p.type = dv.getUint8();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.rigidBodyCount = dv.getUint32();

			pmd.rigidBodies = [];

			for ( var i = 0; i < metadata.rigidBodyCount; i ++ ) {

				pmd.rigidBodies.push( parseRigidBody() );

			}

		};

		var parseConstraints = function () {

			var parseConstraint = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.rigidBodyIndex1 = dv.getUint32();
				p.rigidBodyIndex2 = dv.getUint32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.translationLimitation1 = dv.getFloat32Array( 3 );
				p.translationLimitation2 = dv.getFloat32Array( 3 );
				p.rotationLimitation1 = dv.getFloat32Array( 3 );
				p.rotationLimitation2 = dv.getFloat32Array( 3 );
				p.springPosition = dv.getFloat32Array( 3 );
				p.springRotation = dv.getFloat32Array( 3 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.constraintCount = dv.getUint32();

			pmd.constraints = [];

			for ( var i = 0; i < metadata.constraintCount; i ++ ) {

				pmd.constraints.push( parseConstraint() );

			}

		};

		parseHeader();
		parseVertices();
		parseFaces();
		parseMaterials();
		parseBones();
		parseIks();
		parseMorphs();
		parseMorphFrames();
		parseBoneFrameNames();
		parseBoneFrames();
		parseEnglishHeader();
		parseEnglishBoneNames();
		parseEnglishMorphNames();
		parseEnglishBoneFrameNames();
		parseToonTextures();
		parseRigidBodies();
		parseConstraints();

		if ( leftToRight === true ) this.leftToRightModel( pmd );

		// console.log( pmd ); // for console debug

		return pmd;

	};

	Parser.prototype.parsePmx = function ( buffer, leftToRight ) {

		var pmx = {};
		var dv = new DataViewEx( buffer );

		pmx.metadata = {};
		pmx.metadata.format = 'pmx';
		pmx.metadata.coordinateSystem = 'left';

		var parseHeader = function () {

			var metadata = pmx.metadata;
			metadata.magic = dv.getChars( 4 );

			// Note: don't remove the last blank space.
			if ( metadata.magic !== 'PMX ' ) {

				throw 'PMX file magic is not PMX , but ' + metadata.magic;

			}

			metadata.version = dv.getFloat32();

			if ( metadata.version !== 2.0 && metadata.version !== 2.1 ) {

				throw 'PMX version ' + metadata.version + ' is not supported.';

			}

			metadata.headerSize = dv.getUint8();
			metadata.encoding = dv.getUint8();
			metadata.additionalUvNum = dv.getUint8();
			metadata.vertexIndexSize = dv.getUint8();
			metadata.textureIndexSize = dv.getUint8();
			metadata.materialIndexSize = dv.getUint8();
			metadata.boneIndexSize = dv.getUint8();
			metadata.morphIndexSize = dv.getUint8();
			metadata.rigidBodyIndexSize = dv.getUint8();
			metadata.modelName = dv.getTextBuffer();
			metadata.englishModelName = dv.getTextBuffer();
			metadata.comment = dv.getTextBuffer();
			metadata.englishComment = dv.getTextBuffer();

		};

		var parseVertices = function () {

			var parseVertex = function () {

				var p = {};
				p.position = dv.getFloat32Array( 3 );
				p.normal = dv.getFloat32Array( 3 );
				p.uv = dv.getFloat32Array( 2 );

				p.auvs = [];

				for ( var i = 0; i < pmx.metadata.additionalUvNum; i ++ ) {

					p.auvs.push( dv.getFloat32Array( 4 ) );

				}

				p.type = dv.getUint8();

				var indexSize = metadata.boneIndexSize;

				if ( p.type === 0 ) { // BDEF1

					p.skinIndices = dv.getIndexArray( indexSize, 1 );
					p.skinWeights = [ 1.0 ];

				} else if ( p.type === 1 ) { // BDEF2

					p.skinIndices = dv.getIndexArray( indexSize, 2 );
					p.skinWeights = dv.getFloat32Array( 1 );
					p.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );

				} else if ( p.type === 2 ) { // BDEF4

					p.skinIndices = dv.getIndexArray( indexSize, 4 );
					p.skinWeights = dv.getFloat32Array( 4 );

				} else if ( p.type === 3 ) { // SDEF

					p.skinIndices = dv.getIndexArray( indexSize, 2 );
					p.skinWeights = dv.getFloat32Array( 1 );
					p.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );

					p.skinC = dv.getFloat32Array( 3 );
					p.skinR0 = dv.getFloat32Array( 3 );
					p.skinR1 = dv.getFloat32Array( 3 );

					// SDEF is not supported yet and is handled as BDEF2 so far.
					// TODO: SDEF support
					p.type = 1;

				} else {

					throw 'unsupport bone type ' + p.type + ' exception.';

				}

				p.edgeRatio = dv.getFloat32();
				return p;

			};

			var metadata = pmx.metadata;
			metadata.vertexCount = dv.getUint32();

			pmx.vertices = [];

			for ( var i = 0; i < metadata.vertexCount; i ++ ) {

				pmx.vertices.push( parseVertex() );

			}

		};

		var parseFaces = function () {

			var parseFace = function () {

				var p = {};
				p.indices = dv.getIndexArray( metadata.vertexIndexSize, 3, true );
				return p;

			};

			var metadata = pmx.metadata;
			metadata.faceCount = dv.getUint32() / 3;

			pmx.faces = [];

			for ( var i = 0; i < metadata.faceCount; i ++ ) {

				pmx.faces.push( parseFace() );

			}

		};

		var parseTextures = function () {

			var parseTexture = function () {

				return dv.getTextBuffer();

			};

			var metadata = pmx.metadata;
			metadata.textureCount = dv.getUint32();

			pmx.textures = [];

			for ( var i = 0; i < metadata.textureCount; i ++ ) {

				pmx.textures.push( parseTexture() );

			}

		};

		var parseMaterials = function () {

			var parseMaterial = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.diffuse = dv.getFloat32Array( 4 );
				p.specular = dv.getFloat32Array( 3 );
				p.shininess = dv.getFloat32();
				p.ambient = dv.getFloat32Array( 3 );
				p.flag = dv.getUint8();
				p.edgeColor = dv.getFloat32Array( 4 );
				p.edgeSize = dv.getFloat32();
				p.textureIndex = dv.getIndex( pmx.metadata.textureIndexSize );
				p.envTextureIndex = dv.getIndex( pmx.metadata.textureIndexSize );
				p.envFlag = dv.getUint8();
				p.toonFlag = dv.getUint8();

				if ( p.toonFlag === 0 ) {

					p.toonIndex = dv.getIndex( pmx.metadata.textureIndexSize );

				} else if ( p.toonFlag === 1 ) {

					p.toonIndex = dv.getInt8();

				} else {

					throw 'unknown toon flag ' + p.toonFlag + ' exception.';

				}

				p.comment = dv.getTextBuffer();
				p.faceCount = dv.getUint32() / 3;
				return p;

			};

			var metadata = pmx.metadata;
			metadata.materialCount = dv.getUint32();

			pmx.materials = [];

			for ( var i = 0; i < metadata.materialCount; i ++ ) {

				pmx.materials.push( parseMaterial() );

			}

		};

		var parseBones = function () {

			var parseBone = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.position = dv.getFloat32Array( 3 );
				p.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );
				p.transformationClass = dv.getUint32();
				p.flag = dv.getUint16();

				if ( p.flag & 0x1 ) {

					p.connectIndex = dv.getIndex( pmx.metadata.boneIndexSize );

				} else {

					p.offsetPosition = dv.getFloat32Array( 3 );

				}

				if ( p.flag & 0x100 || p.flag & 0x200 ) {

					// Note: I don't think Grant is an appropriate name
					//       but I found that some English translated MMD tools use this term
					//       so I've named it Grant so far.
					//       I'd rename to more appropriate name from Grant later.
					var grant = {};

					grant.isLocal = ( p.flag & 0x80 ) !== 0 ? true : false;
					grant.affectRotation = ( p.flag & 0x100 ) !== 0 ? true : false;
					grant.affectPosition = ( p.flag & 0x200 ) !== 0 ? true : false;
					grant.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );
					grant.ratio = dv.getFloat32();

					p.grant = grant;

				}

				if ( p.flag & 0x400 ) {

					p.fixAxis = dv.getFloat32Array( 3 );

				}

				if ( p.flag & 0x800 ) {

					p.localXVector = dv.getFloat32Array( 3 );
					p.localZVector = dv.getFloat32Array( 3 );

				}

				if ( p.flag & 0x2000 ) {

					p.key = dv.getUint32();

				}

				if ( p.flag & 0x20 ) {

					var ik = {};

					ik.effector = dv.getIndex( pmx.metadata.boneIndexSize );
					ik.target = null;
					ik.iteration = dv.getUint32();
					ik.maxAngle = dv.getFloat32();
					ik.linkCount = dv.getUint32();
					ik.links = [];

					for ( var i = 0; i < ik.linkCount; i ++ ) {

						var link = {};
						link.index = dv.getIndex( pmx.metadata.boneIndexSize );
						link.angleLimitation = dv.getUint8();

						if ( link.angleLimitation === 1 ) {

							link.lowerLimitationAngle = dv.getFloat32Array( 3 );
							link.upperLimitationAngle = dv.getFloat32Array( 3 );

						}

						ik.links.push( link );

					}

					p.ik = ik;

				}

				return p;

			};

			var metadata = pmx.metadata;
			metadata.boneCount = dv.getUint32();

			pmx.bones = [];

			for ( var i = 0; i < metadata.boneCount; i ++ ) {

				pmx.bones.push( parseBone() );

			}

		};

		var parseMorphs = function () {

			var parseMorph = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.panel = dv.getUint8();
				p.type = dv.getUint8();
				p.elementCount = dv.getUint32();
				p.elements = [];

				for ( var i = 0; i < p.elementCount; i ++ ) {

					if ( p.type === 0 ) { // group morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.morphIndexSize );
						m.ratio = dv.getFloat32();
						p.elements.push( m );

					} else if ( p.type === 1 ) { // vertex morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );
						m.position = dv.getFloat32Array( 3 );
						p.elements.push( m );

					} else if ( p.type === 2 ) { // bone morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.boneIndexSize );
						m.position = dv.getFloat32Array( 3 );
						m.rotation = dv.getFloat32Array( 4 );
						p.elements.push( m );

					} else if ( p.type === 3 ) { // uv morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );
						m.uv = dv.getFloat32Array( 4 );
						p.elements.push( m );

					} else if ( p.type === 4 ) { // additional uv1

						// TODO: implement

					} else if ( p.type === 5 ) { // additional uv2

						// TODO: implement

					} else if ( p.type === 6 ) { // additional uv3

						// TODO: implement

					} else if ( p.type === 7 ) { // additional uv4

						// TODO: implement

					} else if ( p.type === 8 ) { // material morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.materialIndexSize );
						m.type = dv.getUint8();
						m.diffuse = dv.getFloat32Array( 4 );
						m.specular = dv.getFloat32Array( 3 );
						m.shininess = dv.getFloat32();
						m.ambient = dv.getFloat32Array( 3 );
						m.edgeColor = dv.getFloat32Array( 4 );
						m.edgeSize = dv.getFloat32();
						m.textureColor = dv.getFloat32Array( 4 );
						m.sphereTextureColor = dv.getFloat32Array( 4 );
						m.toonColor = dv.getFloat32Array( 4 );
						p.elements.push( m );

					}

				}

				return p;

			};

			var metadata = pmx.metadata;
			metadata.morphCount = dv.getUint32();

			pmx.morphs = [];

			for ( var i = 0; i < metadata.morphCount; i ++ ) {

				pmx.morphs.push( parseMorph() );

			}

		};

		var parseFrames = function () {

			var parseFrame = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.type = dv.getUint8();
				p.elementCount = dv.getUint32();
				p.elements = [];

				for ( var i = 0; i < p.elementCount; i ++ ) {

					var e = {};
					e.target = dv.getUint8();
					e.index = ( e.target === 0 ) ? dv.getIndex( pmx.metadata.boneIndexSize ) : dv.getIndex( pmx.metadata.morphIndexSize );
					p.elements.push( e );

				}

				return p;

			};

			var metadata = pmx.metadata;
			metadata.frameCount = dv.getUint32();

			pmx.frames = [];

			for ( var i = 0; i < metadata.frameCount; i ++ ) {

				pmx.frames.push( parseFrame() );

			}

		};

		var parseRigidBodies = function () {

			var parseRigidBody = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.boneIndex = dv.getIndex( pmx.metadata.boneIndexSize );
				p.groupIndex = dv.getUint8();
				p.groupTarget = dv.getUint16();
				p.shapeType = dv.getUint8();
				p.width = dv.getFloat32();
				p.height = dv.getFloat32();
				p.depth = dv.getFloat32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.weight = dv.getFloat32();
				p.positionDamping = dv.getFloat32();
				p.rotationDamping = dv.getFloat32();
				p.restitution = dv.getFloat32();
				p.friction = dv.getFloat32();
				p.type = dv.getUint8();
				return p;

			};

			var metadata = pmx.metadata;
			metadata.rigidBodyCount = dv.getUint32();

			pmx.rigidBodies = [];

			for ( var i = 0; i < metadata.rigidBodyCount; i ++ ) {

				pmx.rigidBodies.push( parseRigidBody() );

			}

		};

		var parseConstraints = function () {

			var parseConstraint = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.type = dv.getUint8();
				p.rigidBodyIndex1 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );
				p.rigidBodyIndex2 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.translationLimitation1 = dv.getFloat32Array( 3 );
				p.translationLimitation2 = dv.getFloat32Array( 3 );
				p.rotationLimitation1 = dv.getFloat32Array( 3 );
				p.rotationLimitation2 = dv.getFloat32Array( 3 );
				p.springPosition = dv.getFloat32Array( 3 );
				p.springRotation = dv.getFloat32Array( 3 );
				return p;

			};

			var metadata = pmx.metadata;
			metadata.constraintCount = dv.getUint32();

			pmx.constraints = [];

			for ( var i = 0; i < metadata.constraintCount; i ++ ) {

				pmx.constraints.push( parseConstraint() );

			}

		};

		parseHeader();
		parseVertices();
		parseFaces();
		parseTextures();
		parseMaterials();
		parseBones();
		parseMorphs();
		parseFrames();
		parseRigidBodies();
		parseConstraints();

		if ( leftToRight === true ) this.leftToRightModel( pmx );

		// console.log( pmx ); // for console debug

		return pmx;

	};

	Parser.prototype.parseVmd = function ( buffer, leftToRight ) {

		var vmd = {};
		var dv = new DataViewEx( buffer );

		vmd.metadata = {};
		vmd.metadata.coordinateSystem = 'left';

		var parseHeader = function () {

			var metadata = vmd.metadata;
			metadata.magic = dv.getChars( 30 );

			if ( metadata.magic !== 'Vocaloid Motion Data 0002' ) {

				throw 'VMD file magic is not Vocaloid Motion Data 0002, but ' + metadata.magic;

			}

			metadata.name = dv.getSjisStringsAsUnicode( 20 );

		};

		var parseMotions = function () {

			var parseMotion = function () {

				var p = {};
				p.boneName = dv.getSjisStringsAsUnicode( 15 );
				p.frameNum = dv.getUint32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 4 );
				p.interpolation = dv.getUint8Array( 64 );
				return p;

			};

			var metadata = vmd.metadata;
			metadata.motionCount = dv.getUint32();

			vmd.motions = [];
			for ( var i = 0; i < metadata.motionCount; i ++ ) {

				vmd.motions.push( parseMotion() );

			}

		};

		var parseMorphs = function () {

			var parseMorph = function () {

				var p = {};
				p.morphName = dv.getSjisStringsAsUnicode( 15 );
				p.frameNum = dv.getUint32();
				p.weight = dv.getFloat32();
				return p;

			};

			var metadata = vmd.metadata;
			metadata.morphCount = dv.getUint32();

			vmd.morphs = [];
			for ( var i = 0; i < metadata.morphCount; i ++ ) {

				vmd.morphs.push( parseMorph() );

			}

		};

		var parseCameras = function () {

			var parseCamera = function () {

				var p = {};
				p.frameNum = dv.getUint32();
				p.distance = dv.getFloat32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.interpolation = dv.getUint8Array( 24 );
				p.fov = dv.getUint32();
				p.perspective = dv.getUint8();
				return p;

			};

			var metadata = vmd.metadata;
			metadata.cameraCount = dv.getUint32();

			vmd.cameras = [];
			for ( var i = 0; i < metadata.cameraCount; i ++ ) {

				vmd.cameras.push( parseCamera() );

			}

		};

		parseHeader();
		parseMotions();
		parseMorphs();
		parseCameras();

		if ( leftToRight === true ) this.leftToRightVmd( vmd );

		// console.log( vmd ); // for console debug

		return vmd;

	};

	Parser.prototype.parseVpd = function ( text, leftToRight ) {

		var vpd = {};

		vpd.metadata = {};
		vpd.metadata.coordinateSystem = 'left';

		vpd.bones = [];

		var commentPatternG = /\/\/\w*(\r|\n|\r\n)/g;
		var newlinePattern = /\r|\n|\r\n/;

		var lines = text.replace( commentPatternG, '' ).split( newlinePattern );

		function throwError() {

			throw 'the file seems not vpd file.';

		}

		function checkMagic() {

			if ( lines[ 0 ] !== 'Vocaloid Pose Data file' ) {

				throwError();

			}

		}

		function parseHeader() {

			if ( lines.length < 4 ) {

				throwError();

			}

			vpd.metadata.parentFile = lines[ 2 ];
			vpd.metadata.boneCount = parseInt( lines[ 3 ] );

		}

		function parseBones() {

			var boneHeaderPattern = /^\s*(Bone[0-9]+)\s*\{\s*(.*)$/;
			var boneVectorPattern = /^\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*;/;
			var boneQuaternionPattern = /^\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*;/;
			var boneFooterPattern = /^\s*}/;

			var bones = vpd.bones;
			var n = null;
			var v = null;
			var q = null;

			for ( var i = 4; i < lines.length; i ++ ) {

				var line = lines[ i ];

				var result;

				result = line.match( boneHeaderPattern );

				if ( result !== null ) {

					if ( n !== null ) {

						throwError();

					}

					n = result[ 2 ];

				}

				result = line.match( boneVectorPattern );

				if ( result !== null ) {

					if ( v !== null ) {

						throwError();

					}

					v = [

						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] ),
						parseFloat( result[ 3 ] )

					];

				}

				result = line.match( boneQuaternionPattern );

				if ( result !== null ) {

					if ( q !== null ) {

						throwError();

					}

					q = [

						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] ),
						parseFloat( result[ 3 ] ),
						parseFloat( result[ 4 ] )

					];


				}

				result = line.match( boneFooterPattern );

				if ( result !== null ) {

					if ( n === null || v === null || q === null ) {

						throwError();

					}

					bones.push( {

						name: n,
						translation: v,
						quaternion: q

					} );

					n = null;
					v = null;
					q = null;

				}

			}

			if ( n !== null || v !== null || q !== null ) {

				throwError();

			}

		}

		checkMagic();
		parseHeader();
		parseBones();

		if ( leftToRight === true ) this.leftToRightVpd( vpd );

		// console.log( vpd );  // for console debug

		return vpd;

	};

	Parser.prototype.mergeVmds = function ( vmds ) {

		var v = {};
		v.metadata = {};
		v.metadata.name = vmds[ 0 ].metadata.name;
		v.metadata.coordinateSystem = vmds[ 0 ].metadata.coordinateSystem;
		v.metadata.motionCount = 0;
		v.metadata.morphCount = 0;
		v.metadata.cameraCount = 0;
		v.motions = [];
		v.morphs = [];
		v.cameras = [];

		for ( var i = 0; i < vmds.length; i ++ ) {

			var v2 = vmds[ i ];

			v.metadata.motionCount += v2.metadata.motionCount;
			v.metadata.morphCount += v2.metadata.morphCount;
			v.metadata.cameraCount += v2.metadata.cameraCount;

			for ( var j = 0; j < v2.metadata.motionCount; j ++ ) {

				v.motions.push( v2.motions[ j ] );

			}

			for ( var j = 0; j < v2.metadata.morphCount; j ++ ) {

				v.morphs.push( v2.morphs[ j ] );

			}

			for ( var j = 0; j < v2.metadata.cameraCount; j ++ ) {

				v.cameras.push( v2.cameras[ j ] );

			}

		}

		return v;

	};

	Parser.prototype.leftToRightModel = function ( model ) {

		if ( model.metadata.coordinateSystem === 'right' ) {

			return;

		}

		model.metadata.coordinateSystem = 'right';

		var helper = new DataCreationHelper();

		for ( var i = 0; i < model.metadata.vertexCount; i ++ ) {

			helper.leftToRightVector3( model.vertices[ i ].position );
			helper.leftToRightVector3( model.vertices[ i ].normal );

		}

		for ( var i = 0; i < model.metadata.faceCount; i ++ ) {

			helper.leftToRightIndexOrder( model.faces[ i ].indices );

		}

		for ( var i = 0; i < model.metadata.boneCount; i ++ ) {

			helper.leftToRightVector3( model.bones[ i ].position );

		}

		// TODO: support other morph for PMX
		for ( var i = 0; i < model.metadata.morphCount; i ++ ) {

			var m = model.morphs[ i ];

			if ( model.metadata.format === 'pmx' && m.type !== 1 ) {

				// TODO: implement
				continue;

			}

			for ( var j = 0; j < m.elements.length; j ++ ) {

				helper.leftToRightVector3( m.elements[ j ].position );

			}

		}

		for ( var i = 0; i < model.metadata.rigidBodyCount; i ++ ) {

			helper.leftToRightVector3( model.rigidBodies[ i ].position );
			helper.leftToRightEuler( model.rigidBodies[ i ].rotation );

		}

		for ( var i = 0; i < model.metadata.constraintCount; i ++ ) {

			helper.leftToRightVector3( model.constraints[ i ].position );
			helper.leftToRightEuler( model.constraints[ i ].rotation );
			helper.leftToRightVector3Range( model.constraints[ i ].translationLimitation1, model.constraints[ i ].translationLimitation2 );
			helper.leftToRightEulerRange( model.constraints[ i ].rotationLimitation1, model.constraints[ i ].rotationLimitation2 );

		}

	};

	Parser.prototype.leftToRightVmd = function ( vmd ) {

		if ( vmd.metadata.coordinateSystem === 'right' ) {

			return;

		}

		vmd.metadata.coordinateSystem = 'right';

		var helper = new DataCreationHelper();

		for ( var i = 0; i < vmd.metadata.motionCount; i ++ ) {

			helper.leftToRightVector3( vmd.motions[ i ].position );
			helper.leftToRightQuaternion( vmd.motions[ i ].rotation );

		}

		for ( var i = 0; i < vmd.metadata.cameraCount; i ++ ) {

			helper.leftToRightVector3( vmd.cameras[ i ].position );
			helper.leftToRightEuler( vmd.cameras[ i ].rotation );

		}

	};

	Parser.prototype.leftToRightVpd = function ( vpd ) {

		if ( vpd.metadata.coordinateSystem === 'right' ) {

			return;

		}

		vpd.metadata.coordinateSystem = 'right';

		var helper = new DataCreationHelper();

		for ( var i = 0; i < vpd.bones.length; i ++ ) {

			helper.leftToRightVector3( vpd.bones[ i ].translation );
			helper.leftToRightQuaternion( vpd.bones[ i ].quaternion );

		}

	};

	var MMDParser = { CharsetEncoder, Parser };

	return MMDParser;

});
define('skylark-threejs-ex/exporters/MMDExporter',[
    "skylark-threejs",
    '../utils/mmdparser'
], function (THREE, MMDParser) {
    'use strict';
    var MMDExporter = function () {
        var u2sTable;
        function unicodeToShiftjis(str) {
            if (u2sTable === undefined) {
                var encoder = new MMDParser.CharsetEncoder();
                var table = encoder.s2uTable;
                u2sTable = {};
                var keys = Object.keys(table);
                for (var i = 0, il = keys.length; i < il; i++) {
                    var key = keys[i];
                    var value = table[key];
                    key = parseInt(key);
                    u2sTable[value] = key;
                }
            }
            var array = [];
            for (var i = 0, il = str.length; i < il; i++) {
                var code = str.charCodeAt(i);
                var value = u2sTable[code];
                if (value === undefined) {
                    throw 'cannot convert charcode 0x' + code.toString(16);
                } else if (value > 255) {
                    array.push(value >> 8 & 255);
                    array.push(value & 255);
                } else {
                    array.push(value & 255);
                }
            }
            return new Uint8Array(array);
        }
        function getBindBones(skin) {
            var poseSkin = skin.clone();
            poseSkin.pose();
            return poseSkin.skeleton.bones;
        }
        this.parseVpd = function (skin, outputShiftJis, useOriginalBones) {
            if (skin.isSkinnedMesh !== true) {
                console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');
                return null;
            }
            function toStringsFromNumber(num) {
                if (Math.abs(num) < 0.000001)
                    num = 0;
                var a = num.toString();
                if (a.indexOf('.') === -1) {
                    a += '.';
                }
                a += '000000';
                var index = a.indexOf('.');
                var d = a.slice(0, index);
                var p = a.slice(index + 1, index + 7);
                return d + '.' + p;
            }
            function toStringsFromArray(array) {
                var a = [];
                for (var i = 0, il = array.length; i < il; i++) {
                    a.push(toStringsFromNumber(array[i]));
                }
                return a.join(',');
            }
            skin.updateMatrixWorld(true);
            var bones = skin.skeleton.bones;
            var bones2 = getBindBones(skin);
            var position = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            var quaternion2 = new THREE.Quaternion();
            var matrix = new THREE.Matrix4();
            var array = [];
            array.push('Vocaloid Pose Data file');
            array.push('');
            array.push((skin.name !== '' ? skin.name.replace(/\s/g, '_') : 'skin') + '.osm;');
            array.push(bones.length + ';');
            array.push('');
            for (var i = 0, il = bones.length; i < il; i++) {
                var bone = bones[i];
                var bone2 = bones2[i];
                if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {
                    matrix.fromArray(bone.userData.ik.originalMatrix);
                } else {
                    matrix.copy(bone.matrix);
                }
                position.setFromMatrixPosition(matrix);
                quaternion.setFromRotationMatrix(matrix);
                var pArray = position.sub(bone2.position).toArray();
                var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();
                pArray[2] = -pArray[2];
                qArray[0] = -qArray[0];
                qArray[1] = -qArray[1];
                array.push('Bone' + i + '{' + bone.name);
                array.push('  ' + toStringsFromArray(pArray) + ';');
                array.push('  ' + toStringsFromArray(qArray) + ';');
                array.push('}');
                array.push('');
            }
            array.push('');
            var lines = array.join('\n');
            return outputShiftJis === true ? unicodeToShiftjis(lines) : lines;
        };
    };
    return MMDExporter;
});
define('skylark-threejs-ex/exporters/OBJExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var OBJExporter = function () {
    };
    OBJExporter.prototype = {
        constructor: OBJExporter,
        parse: function (object) {
            var output = '';
            var indexVertex = 0;
            var indexVertexUvs = 0;
            var indexNormals = 0;
            var vertex = new THREE.Vector3();
            var normal = new THREE.Vector3();
            var uv = new THREE.Vector2();
            var i, j, k, l, m, face = [];
            var parseMesh = function (mesh) {
                var nbVertex = 0;
                var nbNormals = 0;
                var nbVertexUvs = 0;
                var geometry = mesh.geometry;
                var normalMatrixWorld = new THREE.Matrix3();
                if (geometry instanceof THREE.Geometry) {
                    geometry = new THREE.BufferGeometry().setFromObject(mesh);
                }
                if (geometry instanceof THREE.BufferGeometry) {
                    var vertices = geometry.getAttribute('position');
                    var normals = geometry.getAttribute('normal');
                    var uvs = geometry.getAttribute('uv');
                    var indices = geometry.getIndex();
                    output += 'o ' + mesh.name + '\n';
                    if (mesh.material && mesh.material.name) {
                        output += 'usemtl ' + mesh.material.name + '\n';
                    }
                    if (vertices !== undefined) {
                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {
                            vertex.x = vertices.getX(i);
                            vertex.y = vertices.getY(i);
                            vertex.z = vertices.getZ(i);
                            vertex.applyMatrix4(mesh.matrixWorld);
                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\n';
                        }
                    }
                    if (uvs !== undefined) {
                        for (i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {
                            uv.x = uvs.getX(i);
                            uv.y = uvs.getY(i);
                            output += 'vt ' + uv.x + ' ' + uv.y + '\n';
                        }
                    }
                    if (normals !== undefined) {
                        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                        for (i = 0, l = normals.count; i < l; i++, nbNormals++) {
                            normal.x = normals.getX(i);
                            normal.y = normals.getY(i);
                            normal.z = normals.getZ(i);
                            normal.applyMatrix3(normalMatrixWorld).normalize();
                            output += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\n';
                        }
                    }
                    if (indices !== null) {
                        for (i = 0, l = indices.count; i < l; i += 3) {
                            for (m = 0; m < 3; m++) {
                                j = indices.getX(i + m) + 1;
                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');
                            }
                            output += 'f ' + face.join(' ') + '\n';
                        }
                    } else {
                        for (i = 0, l = vertices.count; i < l; i += 3) {
                            for (m = 0; m < 3; m++) {
                                j = i + m + 1;
                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');
                            }
                            output += 'f ' + face.join(' ') + '\n';
                        }
                    }
                } else {
                    console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry);
                }
                indexVertex += nbVertex;
                indexVertexUvs += nbVertexUvs;
                indexNormals += nbNormals;
            };
            var parseLine = function (line) {
                var nbVertex = 0;
                var geometry = line.geometry;
                var type = line.type;
                if (geometry instanceof THREE.Geometry) {
                    geometry = new THREE.BufferGeometry().setFromObject(line);
                }
                if (geometry instanceof THREE.BufferGeometry) {
                    var vertices = geometry.getAttribute('position');
                    output += 'o ' + line.name + '\n';
                    if (vertices !== undefined) {
                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {
                            vertex.x = vertices.getX(i);
                            vertex.y = vertices.getY(i);
                            vertex.z = vertices.getZ(i);
                            vertex.applyMatrix4(line.matrixWorld);
                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\n';
                        }
                    }
                    if (type === 'Line') {
                        output += 'l ';
                        for (j = 1, l = vertices.count; j <= l; j++) {
                            output += indexVertex + j + ' ';
                        }
                        output += '\n';
                    }
                    if (type === 'LineSegments') {
                        for (j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {
                            output += 'l ' + (indexVertex + j) + ' ' + (indexVertex + k) + '\n';
                        }
                    }
                } else {
                    console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry);
                }
                indexVertex += nbVertex;
            };
            object.traverse(function (child) {
                if (child instanceof THREE.Mesh) {
                    parseMesh(child);
                }
                if (child instanceof THREE.Line) {
                    parseLine(child);
                }
            });
            return output;
        }
    };

    return OBJExporter;
});
define('skylark-threejs-ex/exporters/PLYExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PLYExporter = function () {
    };
    PLYExporter.prototype = {
        constructor: PLYExporter,
        parse: function (object, onDone, options) {
            if (onDone && typeof onDone === 'object') {
                console.warn('THREE.PLYExporter: The options parameter is now the third argument to the "parse" function. See the documentation for the new API.');
                options = onDone;
                onDone = undefined;
            }
            function traverseMeshes(cb) {
                object.traverse(function (child) {
                    if (child.isMesh === true) {
                        var mesh = child;
                        var geometry = mesh.geometry;
                        if (geometry.isGeometry === true) {
                            geometry = geomToBufferGeom.get(geometry);
                        }
                        if (geometry.isBufferGeometry === true) {
                            if (geometry.getAttribute('position') !== undefined) {
                                cb(mesh, geometry);
                            }
                        }
                    }
                });
            }
            var defaultOptions = {
                binary: false,
                excludeAttributes: [],
                littleEndian: false
            };
            options = Object.assign(defaultOptions, options);
            var excludeAttributes = options.excludeAttributes;
            var geomToBufferGeom = new WeakMap();
            var includeNormals = false;
            var includeColors = false;
            var includeUVs = false;
            var vertexCount = 0;
            var faceCount = 0;
            object.traverse(function (child) {
                if (child.isMesh === true) {
                    var mesh = child;
                    var geometry = mesh.geometry;
                    if (geometry.isGeometry === true) {
                        var bufferGeometry = geomToBufferGeom.get(geometry) || new THREE.BufferGeometry().setFromObject(mesh);
                        geomToBufferGeom.set(geometry, bufferGeometry);
                        geometry = bufferGeometry;
                    }
                    if (geometry.isBufferGeometry === true) {
                        var vertices = geometry.getAttribute('position');
                        var normals = geometry.getAttribute('normal');
                        var uvs = geometry.getAttribute('uv');
                        var colors = geometry.getAttribute('color');
                        var indices = geometry.getIndex();
                        if (vertices === undefined) {
                            return;
                        }
                        vertexCount += vertices.count;
                        faceCount += indices ? indices.count / 3 : vertices.count / 3;
                        if (normals !== undefined)
                            includeNormals = true;
                        if (uvs !== undefined)
                            includeUVs = true;
                        if (colors !== undefined)
                            includeColors = true;
                    }
                }
            });
            var includeIndices = excludeAttributes.indexOf('index') === -1;
            includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;
            includeColors = includeColors && excludeAttributes.indexOf('color') === -1;
            includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;
            if (includeIndices && faceCount !== Math.floor(faceCount)) {
                console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');
                return null;
            }
            var indexByteCount = 4;
            var header = 'ply\n' + `format ${ options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii' } 1.0\n` + `element vertex ${ vertexCount }\n` + 'property float x\n' + 'property float y\n' + 'property float z\n';
            if (includeNormals === true) {
                header += 'property float nx\n' + 'property float ny\n' + 'property float nz\n';
            }
            if (includeUVs === true) {
                header += 'property float s\n' + 'property float t\n';
            }
            if (includeColors === true) {
                header += 'property uchar red\n' + 'property uchar green\n' + 'property uchar blue\n';
            }
            if (includeIndices === true) {
                header += `element face ${ faceCount }\n` + `property list uchar int vertex_index\n`;
            }
            header += 'end_header\n';
            var vertex = new THREE.Vector3();
            var normalMatrixWorld = new THREE.Matrix3();
            var result = null;
            if (options.binary === true) {
                var headerBin = new TextEncoder().encode(header);
                var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));
                var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;
                var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));
                new Uint8Array(output.buffer).set(headerBin, 0);
                var vOffset = headerBin.length;
                var fOffset = headerBin.length + vertexListLength;
                var writtenVertices = 0;
                traverseMeshes(function (mesh, geometry) {
                    var vertices = geometry.getAttribute('position');
                    var normals = geometry.getAttribute('normal');
                    var uvs = geometry.getAttribute('uv');
                    var colors = geometry.getAttribute('color');
                    var indices = geometry.getIndex();
                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                    for (var i = 0, l = vertices.count; i < l; i++) {
                        vertex.x = vertices.getX(i);
                        vertex.y = vertices.getY(i);
                        vertex.z = vertices.getZ(i);
                        vertex.applyMatrix4(mesh.matrixWorld);
                        output.setFloat32(vOffset, vertex.x, options.littleEndian);
                        vOffset += 4;
                        output.setFloat32(vOffset, vertex.y, options.littleEndian);
                        vOffset += 4;
                        output.setFloat32(vOffset, vertex.z, options.littleEndian);
                        vOffset += 4;
                        if (includeNormals === true) {
                            if (normals != null) {
                                vertex.x = normals.getX(i);
                                vertex.y = normals.getY(i);
                                vertex.z = normals.getZ(i);
                                vertex.applyMatrix3(normalMatrixWorld).normalize();
                                output.setFloat32(vOffset, vertex.x, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, vertex.y, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, vertex.z, options.littleEndian);
                                vOffset += 4;
                            } else {
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                            }
                        }
                        if (includeUVs === true) {
                            if (uvs != null) {
                                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);
                                vOffset += 4;
                            } else if (includeUVs !== false) {
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                            }
                        }
                        if (includeColors === true) {
                            if (colors != null) {
                                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));
                                vOffset += 1;
                                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));
                                vOffset += 1;
                                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));
                                vOffset += 1;
                            } else {
                                output.setUint8(vOffset, 255);
                                vOffset += 1;
                                output.setUint8(vOffset, 255);
                                vOffset += 1;
                                output.setUint8(vOffset, 255);
                                vOffset += 1;
                            }
                        }
                    }
                    if (includeIndices === true) {
                        if (indices !== null) {
                            for (var i = 0, l = indices.count; i < l; i += 3) {
                                output.setUint8(fOffset, 3);
                                fOffset += 1;
                                output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);
                                fOffset += indexByteCount;
                            }
                        } else {
                            for (var i = 0, l = vertices.count; i < l; i += 3) {
                                output.setUint8(fOffset, 3);
                                fOffset += 1;
                                output.setUint32(fOffset, writtenVertices + i, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);
                                fOffset += indexByteCount;
                            }
                        }
                    }
                    writtenVertices += vertices.count;
                });
                result = output.buffer;
            } else {
                var writtenVertices = 0;
                var vertexList = '';
                var faceList = '';
                traverseMeshes(function (mesh, geometry) {
                    var vertices = geometry.getAttribute('position');
                    var normals = geometry.getAttribute('normal');
                    var uvs = geometry.getAttribute('uv');
                    var colors = geometry.getAttribute('color');
                    var indices = geometry.getIndex();
                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                    for (var i = 0, l = vertices.count; i < l; i++) {
                        vertex.x = vertices.getX(i);
                        vertex.y = vertices.getY(i);
                        vertex.z = vertices.getZ(i);
                        vertex.applyMatrix4(mesh.matrixWorld);
                        var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z;
                        if (includeNormals === true) {
                            if (normals != null) {
                                vertex.x = normals.getX(i);
                                vertex.y = normals.getY(i);
                                vertex.z = normals.getZ(i);
                                vertex.applyMatrix3(normalMatrixWorld).normalize();
                                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;
                            } else {
                                line += ' 0 0 0';
                            }
                        }
                        if (includeUVs === true) {
                            if (uvs != null) {
                                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);
                            } else if (includeUVs !== false) {
                                line += ' 0 0';
                            }
                        }
                        if (includeColors === true) {
                            if (colors != null) {
                                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);
                            } else {
                                line += ' 255 255 255';
                            }
                        }
                        vertexList += line + '\n';
                    }
                    if (includeIndices === true) {
                        if (indices !== null) {
                            for (var i = 0, l = indices.count; i < l; i += 3) {
                                faceList += `3 ${ indices.getX(i + 0) + writtenVertices }`;
                                faceList += ` ${ indices.getX(i + 1) + writtenVertices }`;
                                faceList += ` ${ indices.getX(i + 2) + writtenVertices }\n`;
                            }
                        } else {
                            for (var i = 0, l = vertices.count; i < l; i += 3) {
                                faceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\n`;
                            }
                        }
                        faceCount += indices ? indices.count / 3 : vertices.count / 3;
                    }
                    writtenVertices += vertices.count;
                });
                result = `${ header }${ vertexList }${ includeIndices ? `${ faceList }\n` : '\n' }`;
            }
            if (typeof onDone === 'function')
                requestAnimationFrame(() => onDone(result));
            return result;
        }
    };
    
    return PLYExporter;
});
define('skylark-threejs-ex/exporters/STLExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var STLExporter = function () {
    };
    STLExporter.prototype = {
        constructor: STLExporter,
        parse: function () {
            var vector = new THREE.Vector3();
            var normalMatrixWorld = new THREE.Matrix3();
            return function parse(scene, options) {
                if (options === undefined)
                    options = {};
                var binary = options.binary !== undefined ? options.binary : false;
                var objects = [];
                var triangles = 0;
                scene.traverse(function (object) {
                    if (object.isMesh) {
                        var geometry = object.geometry;
                        if (geometry.isBufferGeometry) {
                            geometry = new THREE.Geometry().fromBufferGeometry(geometry);
                        }
                        if (geometry.isGeometry) {
                            triangles += geometry.faces.length;
                            objects.push({
                                geometry: geometry,
                                matrixWorld: object.matrixWorld
                            });
                        }
                    }
                });
                if (binary) {
                    var offset = 80;
                    var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;
                    var arrayBuffer = new ArrayBuffer(bufferLength);
                    var output = new DataView(arrayBuffer);
                    output.setUint32(offset, triangles, true);
                    offset += 4;
                    for (var i = 0, il = objects.length; i < il; i++) {
                        var object = objects[i];
                        var vertices = object.geometry.vertices;
                        var faces = object.geometry.faces;
                        var matrixWorld = object.matrixWorld;
                        normalMatrixWorld.getNormalMatrix(matrixWorld);
                        for (var j = 0, jl = faces.length; j < jl; j++) {
                            var face = faces[j];
                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();
                            output.setFloat32(offset, vector.x, true);
                            offset += 4;
                            output.setFloat32(offset, vector.y, true);
                            offset += 4;
                            output.setFloat32(offset, vector.z, true);
                            offset += 4;
                            var indices = [
                                face.a,
                                face.b,
                                face.c
                            ];
                            for (var k = 0; k < 3; k++) {
                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);
                                output.setFloat32(offset, vector.x, true);
                                offset += 4;
                                output.setFloat32(offset, vector.y, true);
                                offset += 4;
                                output.setFloat32(offset, vector.z, true);
                                offset += 4;
                            }
                            output.setUint16(offset, 0, true);
                            offset += 2;
                        }
                    }
                    return output;
                } else {
                    var output = '';
                    output += 'solid exported\n';
                    for (var i = 0, il = objects.length; i < il; i++) {
                        var object = objects[i];
                        var vertices = object.geometry.vertices;
                        var faces = object.geometry.faces;
                        var matrixWorld = object.matrixWorld;
                        normalMatrixWorld.getNormalMatrix(matrixWorld);
                        for (var j = 0, jl = faces.length; j < jl; j++) {
                            var face = faces[j];
                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();
                            output += '\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\n';
                            output += '\t\touter loop\n';
                            var indices = [
                                face.a,
                                face.b,
                                face.c
                            ];
                            for (var k = 0; k < 3; k++) {
                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);
                                output += '\t\t\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\n';
                            }
                            output += '\t\tendloop\n';
                            output += '\tendfacet\n';
                        }
                    }
                    output += 'endsolid exported\n';
                    return output;
                }
            };
        }()
    };
    return STLExporter;
});
define('skylark-threejs-ex/main',[
	"skylark-threejs",

	"./shaders/CopyShader",
	"./shaders/BokehShader",
	"./shaders/SAOShader",
	"./shaders/DepthLimitedBlurShader",
	"./shaders/UnpackDepthRGBAShader",
	"./shaders/ConvolutionShader",
	"./shaders/LuminosityHighPassShader",
	"./shaders/FXAAShader",
	"./shaders/SSAOShader",
	"./shaders/FilmShader",
	"./shaders/DotScreenShader",
	"./shaders/LuminosityShader",
	"./shaders/SobelOperatorShader",
	"./shaders/ColorifyShader",
	"./shaders/ToneMapShader",
	"./shaders/TechnicolorShader",
	"./shaders/HueSaturationShader",

	"./postprocessing/EffectComposer",
	"./postprocessing/RenderPass",
	"./postprocessing/ShaderPass",
	"./postprocessing/MaskPass",

	"./curves/NURBSCurve",
	"./curves/NURBSSurface",
	"./curves/NURBSUtils",

	"./objects/Lensflare",
	"./objects/Reflector",
	"./objects/Refractor",

	"./loaders/TTFLoader",
//	"./loaders/LoaderSupport",
	"./loaders/3MFLoader",
	"./loaders/AMFLoader",
	"./loaders/AssimpJSONLoader",
	"./loaders/AssimpLoader",
	"./loaders/AWDLoader",
	"./loaders/BabylonLoader",
	"./loaders/ColladaLoader",
	"./loaders/DRACOLoader",
	"./loaders/FBXLoader",
	"./loaders/GCodeLoader",
	"./loaders/GLTFLoader",
	"./loaders/MTLLoader",
	"./loaders/OBJLoader",
	"./loaders/OBJLoader2",
	"./loaders/PCDLoader",
	"./loaders/PLYLoader",
	"./loaders/PRWMLoader",
	"./loaders/STLLoader",
	"./loaders/SVGLoader",
	"./loaders/TDSLoader",
	"./loaders/VRMLLoader",
	"./loaders/VTKLoader",
	"./loaders/XLoader",
	"./loaders/DDSLoader",
	"./loaders/PVRLoader",
	"./loaders/TGALoader",
	"./loaders/KTXLoader",

	"./modifiers/SimplifyModifier",
	"./modifiers/SubdivisionModifier",

	"./exporters/ColladaExporter",
	"./exporters/DRACOExporter",
	"./exporters/GLTFExporter",
	"./exporters/MMDExporter",
	"./exporters/OBJExporter",
	"./exporters/PLYExporter",
	"./exporters/STLExporter"

],function(THREE){
	return THREE;
});
define('skylark-threejs-ex', ['skylark-threejs-ex/main'], function (main) { return main; });


},this);
//# sourceMappingURL=sourcemaps/skylark-threejs-ex.js.map
