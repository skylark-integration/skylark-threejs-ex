{"version":3,"sources":["skylark-threejs-ex.js"],"names":[],"mappingsfile":"../skylark-threejs-ex.js","sourcesContent":["define('skylark-threejs-ex/shaders/CopyShader',[],function () {\n    'use strict';\n    var CopyShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float opacity;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tgl_FragColor = opacity * texel;',\n            '}'\n        ].join('\\n')\n    };\n    return CopyShader;\n});\ndefine('skylark-threejs-ex/shaders/BokehShader',[],function () {\n    'use strict';\n    var BokehShader = {\n        defines: {\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tColor': { value: null },\n            'tDepth': { value: null },\n            'focus': { value: 1 },\n            'aspect': { value: 1 },\n            'aperture': { value: 0.025 },\n            'maxblur': { value: 1 },\n            'nearClip': { value: 1 },\n            'farClip': { value: 1000 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            'uniform sampler2D tColor;',\n            'uniform sampler2D tDepth;',\n            'uniform float maxblur;',\n            'uniform float aperture;',\n            'uniform float nearClip;',\n            'uniform float farClip;',\n            'uniform float focus;',\n            'uniform float aspect;',\n            '#include <packing>',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, nearClip, farClip );',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tvec2 aspectcorrect = vec2( 1.0, aspect );',\n            '\\tfloat viewZ = getViewZ( getDepth( vUv ) );',\n            '\\tfloat factor = ( focus + viewZ );',\n            '\\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );',\n            '\\tvec2 dofblur9 = dofblur * 0.9;',\n            '\\tvec2 dofblur7 = dofblur * 0.7;',\n            '\\tvec2 dofblur4 = dofblur * 0.4;',\n            '\\tvec4 col = vec4( 0.0 );',\n            '\\tcol += texture2D( tColor, vUv.xy );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );',\n            '\\tgl_FragColor = col / 41.0;',\n            '\\tgl_FragColor.a = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n    return BokehShader;\n});\ndefine('skylark-threejs-ex/shaders/SAOShader',[\n   \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SAOShader = {\n        defines: {\n            'NUM_SAMPLES': 7,\n            'NUM_RINGS': 4,\n            'NORMAL_TEXTURE': 0,\n            'DIFFUSE_TEXTURE': 0,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDepth': { value: null },\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'cameraNear': { value: 1 },\n            'cameraFar': { value: 100 },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'scale': { value: 1 },\n            'intensity': { value: 0.1 },\n            'bias': { value: 0.5 },\n            'minResolution': { value: 0 },\n            'kernelRadius': { value: 100 },\n            'randomSeed': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            '#if DIFFUSE_TEXTURE == 1',\n            'uniform sampler2D tDiffuse;',\n            '#endif',\n            'uniform sampler2D tDepth;',\n            '#if NORMAL_TEXTURE == 1',\n            'uniform sampler2D tNormal;',\n            '#endif',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float scale;',\n            'uniform float intensity;',\n            'uniform float bias;',\n            'uniform float kernelRadius;',\n            'uniform float minResolution;',\n            'uniform vec2 size;',\n            'uniform float randomSeed;',\n            '// RGBA depth',\n            '#include <packing>',\n            'vec4 getDefaultColor( const in vec2 screenPosition ) {',\n            '\\t#if DIFFUSE_TEXTURE == 1',\n            '\\treturn texture2D( tDiffuse, vUv );',\n            '\\t#else',\n            '\\treturn vec4( 1.0 );',\n            '\\t#endif',\n            '}',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',\n            '\\t#if NORMAL_TEXTURE == 1',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '\\t#else',\n            '\\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',\n            '\\t#endif',\n            '}',\n            'float scaleDividedByCameraFar;',\n            'float minResolutionMultipliedByCameraFar;',\n            'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',\n            '\\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',\n            '\\tfloat viewDistance = length( viewDelta );',\n            '\\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',\n            '\\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',\n            '}',\n            '// moving costly divides into consts',\n            'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',\n            'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',\n            'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',\n            '\\t// precompute some variables require in getOcclusion.',\n            '\\tscaleDividedByCameraFar = scale / cameraFar;',\n            '\\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',\n            '\\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',\n            '\\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',\n            '\\tfloat angle = rand( vUv + randomSeed ) * PI2;',\n            '\\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',\n            '\\tvec2 radiusStep = radius;',\n            '\\tfloat occlusionSum = 0.0;',\n            '\\tfloat weightSum = 0.0;',\n            '\\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',\n            '\\t\\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',\n            '\\t\\tradius += radiusStep;',\n            '\\t\\tangle += ANGLE_STEP;',\n            '\\t\\tfloat sampleDepth = getDepth( sampleUv );',\n            '\\t\\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\t\\tcontinue;',\n            '\\t\\t}',\n            '\\t\\tfloat sampleViewZ = getViewZ( sampleDepth );',\n            '\\t\\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',\n            '\\t\\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',\n            '\\t\\tweightSum += 1.0;',\n            '\\t}',\n            '\\tif( weightSum == 0.0 ) discard;',\n            '\\treturn occlusionSum * ( intensity / weightSum );',\n            '}',\n            'void main() {',\n            '\\tfloat centerDepth = getDepth( vUv );',\n            '\\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = getViewZ( centerDepth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',\n            '\\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',\n            '\\tgl_FragColor = getDefaultColor( vUv );',\n            '\\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',\n            '}'\n        ].join('\\n')\n    };\n    return SAOShader;\n});\ndefine('skylark-threejs-ex/shaders/DepthLimitedBlurShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var DepthLimitedBlurShader = {\n        defines: {\n            'KERNEL_RADIUS': 4,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'sampleUvOffsets': { value: [new THREE.Vector2(0, 0)] },\n            'sampleWeights': { value: [1] },\n            'tDepth': { value: null },\n            'cameraNear': { value: 10 },\n            'cameraFar': { value: 1000 },\n            'depthCutoff': { value: 10 }\n        },\n        vertexShader: [\n            '#include <common>',\n            'uniform vec2 size;',\n            'varying vec2 vUv;',\n            'varying vec2 vInvSize;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tvInvSize = 1.0 / size;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            '#include <packing>',\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tDepth;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform float depthCutoff;',\n            'uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];',\n            'uniform float sampleWeights[ KERNEL_RADIUS + 1 ];',\n            'varying vec2 vUv;',\n            'varying vec2 vInvSize;',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getDepth( vUv );',\n            '\\tif( depth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = -getViewZ( depth );',\n            '\\tbool rBreak = false, lBreak = false;',\n            '\\tfloat weightSum = sampleWeights[0];',\n            '\\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;',\n            '\\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {',\n            '\\t\\tfloat sampleWeight = sampleWeights[i];',\n            '\\t\\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;',\n            '\\t\\tvec2 sampleUv = vUv + sampleUvOffset;',\n            '\\t\\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );',\n            '\\t\\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;',\n            '\\t\\tif( ! rBreak ) {',\n            '\\t\\t\\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',\n            '\\t\\t\\tweightSum += sampleWeight;',\n            '\\t\\t}',\n            '\\t\\tsampleUv = vUv - sampleUvOffset;',\n            '\\t\\tviewZ = -getViewZ( getDepth( sampleUv ) );',\n            '\\t\\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;',\n            '\\t\\tif( ! lBreak ) {',\n            '\\t\\t\\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',\n            '\\t\\t\\tweightSum += sampleWeight;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tgl_FragColor = diffuseSum / weightSum;',\n            '}'\n        ].join('\\n')\n    };\n    var BlurShaderUtils = DepthLimitedBlurShader.BlurShaderUtils = {\n        createSampleWeights: function (kernelRadius, stdDev) {\n            var gaussian = function (x, stdDev) {\n                return Math.exp(-(x * x) / (2 * (stdDev * stdDev))) / (Math.sqrt(2 * Math.PI) * stdDev);\n            };\n            var weights = [];\n            for (var i = 0; i <= kernelRadius; i++) {\n                weights.push(gaussian(i, stdDev));\n            }\n            return weights;\n        },\n        createSampleOffsets: function (kernelRadius, uvIncrement) {\n            var offsets = [];\n            for (var i = 0; i <= kernelRadius; i++) {\n                offsets.push(uvIncrement.clone().multiplyScalar(i));\n            }\n            return offsets;\n        },\n        configure: function (material, kernelRadius, stdDev, uvIncrement) {\n            material.defines['KERNEL_RADIUS'] = kernelRadius;\n            material.uniforms['sampleUvOffsets'].value = BlurShaderUtils.createSampleOffsets(kernelRadius, uvIncrement);\n            material.uniforms['sampleWeights'].value = BlurShaderUtils.createSampleWeights(kernelRadius, stdDev);\n            material.needsUpdate = true;\n        }\n    };\n\n    return DepthLimitedBlurShader;\n    \n});\ndefine('skylark-threejs-ex/shaders/UnpackDepthRGBAShader',[],function () {\n    'use strict';\n    var UnpackDepthRGBAShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float opacity;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'void main() {',\n            '\\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );',\n            '\\tgl_FragColor = vec4( vec3( depth ), opacity );',\n            '}'\n        ].join('\\n')\n    };\n    return  UnpackDepthRGBAShader ;\n});\ndefine('skylark-threejs-ex/shaders/ConvolutionShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var ConvolutionShader = {\n        defines: {\n            'KERNEL_SIZE_FLOAT': '25.0',\n            'KERNEL_SIZE_INT': '25'\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'uImageIncrement': { value: new THREE.Vector2(0.001953125, 0) },\n            'cKernel': { value: [] }\n        },\n        vertexShader: [\n            'uniform vec2 uImageIncrement;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float cKernel[ KERNEL_SIZE_INT ];',\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 uImageIncrement;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 imageCoord = vUv;',\n            '\\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );',\n            '\\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {',\n            '\\t\\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];',\n            '\\t\\timageCoord += uImageIncrement;',\n            '\\t}',\n            '\\tgl_FragColor = sum;',\n            '}'\n        ].join('\\n'),\n        buildKernel: function (sigma) {\n            function gauss(x, sigma) {\n                return Math.exp(-(x * x) / (2 * sigma * sigma));\n            }\n            var i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil(sigma * 3) + 1;\n            if (kernelSize > kMaxKernelSize)\n                kernelSize = kMaxKernelSize;\n            halfWidth = (kernelSize - 1) * 0.5;\n            values = new Array(kernelSize);\n            sum = 0;\n            for (i = 0; i < kernelSize; ++i) {\n                values[i] = gauss(i - halfWidth, sigma);\n                sum += values[i];\n            }\n            for (i = 0; i < kernelSize; ++i)\n                values[i] /= sum;\n            return values;\n        }\n    };\n    return ConvolutionShader;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityHighPassShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var LuminosityHighPassShader = {\n        shaderID: 'luminosityHighPass',\n        uniforms: {\n            'tDiffuse': { value: null },\n            'luminosityThreshold': { value: 1 },\n            'smoothWidth': { value: 1 },\n            'defaultColor': { value: new THREE.Color(0) },\n            'defaultOpacity': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec3 defaultColor;',\n            'uniform float defaultOpacity;',\n            'uniform float luminosityThreshold;',\n            'uniform float smoothWidth;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\n            '\\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\n            '\\tgl_FragColor = mix( outputColor, texel, alpha );',\n            '}'\n        ].join('\\n')\n    };\n    return LuminosityHighPassShader;\n});\ndefine('skylark-threejs-ex/shaders/FXAAShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var FXAAShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new  THREE.Vector2(1 / 1024, 1 / 512) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'precision highp float;',\n            '',\n            'uniform sampler2D tDiffuse;',\n            '',\n            'uniform vec2 resolution;',\n            '',\n            'varying vec2 vUv;',\n            '',\n            '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)',\n            '',\n            '//----------------------------------------------------------------------------------',\n            '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag',\n            '// SDK Version: v3.00',\n            '// Email:       gameworks@nvidia.com',\n            '// Site:        http://developer.nvidia.com/',\n            '//',\n            '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.',\n            '//',\n            '// Redistribution and use in source and binary forms, with or without',\n            '// modification, are permitted provided that the following conditions',\n            '// are met:',\n            '//  * Redistributions of source code must retain the above copyright',\n            '//    notice, this list of conditions and the following disclaimer.',\n            '//  * Redistributions in binary form must reproduce the above copyright',\n            '//    notice, this list of conditions and the following disclaimer in the',\n            '//    documentation and/or other materials provided with the distribution.',\n            '//  * Neither the name of NVIDIA CORPORATION nor the names of its',\n            '//    contributors may be used to endorse or promote products derived',\n            '//    from this software without specific prior written permission.',\n            '//',\n            \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\n            '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',\n            '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',\n            '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR',\n            '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,',\n            '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,',\n            '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR',\n            '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY',\n            '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',\n            '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE',\n            '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',\n            '//',\n            '//----------------------------------------------------------------------------------',\n            '',\n            '#define FXAA_PC 1',\n            '#define FXAA_GLSL_100 1',\n            '#define FXAA_QUALITY_PRESET 12',\n            '',\n            '#define FXAA_GREEN_AS_LUMA 1',\n            '',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_PC_CONSOLE',\n            '    //',\n            '    // The console algorithm for PC is included',\n            '    // for developers targeting really low spec machines.',\n            '    // Likely better to just run FXAA_PC, and use a really low preset.',\n            '    //',\n            '    #define FXAA_PC_CONSOLE 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GLSL_120',\n            '    #define FXAA_GLSL_120 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GLSL_130',\n            '    #define FXAA_GLSL_130 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_3',\n            '    #define FXAA_HLSL_3 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_4',\n            '    #define FXAA_HLSL_4 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_5',\n            '    #define FXAA_HLSL_5 0',\n            '#endif',\n            '/*==========================================================================*/',\n            '#ifndef FXAA_GREEN_AS_LUMA',\n            '    //',\n            '    // For those using non-linear color,',\n            '    // and either not able to get luma in alpha, or not wanting to,',\n            '    // this enables FXAA to run using green as a proxy for luma.',\n            '    // So with this enabled, no need to pack luma in alpha.',\n            '    //',\n            '    // This will turn off AA on anything which lacks some amount of green.',\n            '    // Pure red and blue or combination of only R and B, will get no AA.',\n            '    //',\n            '    // Might want to lower the settings for both,',\n            '    //    fxaaConsoleEdgeThresholdMin',\n            '    //    fxaaQualityEdgeThresholdMin',\n            '    // In order to insure AA does not get turned off on colors',\n            '    // which contain a minor amount of green.',\n            '    //',\n            '    // 1 = On.',\n            '    // 0 = Off.',\n            '    //',\n            '    #define FXAA_GREEN_AS_LUMA 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_EARLY_EXIT',\n            '    //',\n            \"    // Controls algorithm's early exit path.\",\n            '    // On PS3 turning this ON adds 2 cycles to the shader.',\n            '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',\n            '    // Turning this off on console will result in a more blurry image.',\n            '    // So this defaults to on.',\n            '    //',\n            '    // 1 = On.',\n            '    // 0 = Off.',\n            '    //',\n            '    #define FXAA_EARLY_EXIT 1',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_DISCARD',\n            '    //',\n            '    // Only valid for PC OpenGL currently.',\n            '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',\n            '    //',\n            \"    // 1 = Use discard on pixels which don't need AA.\",\n            '    //     For APIs which enable concurrent TEX+ROP from same surface.',\n            \"    // 0 = Return unchanged color on pixels which don't need AA.\",\n            '    //',\n            '    #define FXAA_DISCARD 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_FAST_PIXEL_OFFSET',\n            '    //',\n            '    // Used for GLSL 120 only.',\n            '    //',\n            '    // 1 = GL API supports fast pixel offsets',\n            '    // 0 = do not use fast pixel offsets',\n            '    //',\n            '    #ifdef GL_EXT_gpu_shader4',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifdef GL_NV_gpu_shader5',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifdef GL_ARB_gpu_shader5',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifndef FXAA_FAST_PIXEL_OFFSET',\n            '        #define FXAA_FAST_PIXEL_OFFSET 0',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GATHER4_ALPHA',\n            '    //',\n            '    // 1 = API supports gather4 on alpha channel.',\n            '    // 0 = API does not support gather4 on alpha channel.',\n            '    //',\n            '    #if (FXAA_HLSL_5 == 1)',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifdef GL_ARB_gpu_shader5',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifdef GL_NV_gpu_shader5',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifndef FXAA_GATHER4_ALPHA',\n            '        #define FXAA_GATHER4_ALPHA 0',\n            '    #endif',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '                        FXAA QUALITY - TUNING KNOBS',\n            '------------------------------------------------------------------------------',\n            'NOTE the other tuning knobs are now in the shader function inputs!',\n            '============================================================================*/',\n            '#ifndef FXAA_QUALITY_PRESET',\n            '    //',\n            '    // Choose the quality preset.',\n            '    // This needs to be compiled into the shader as it effects code.',\n            '    // Best option to include multiple presets is to',\n            '    // in each shader define the preset, then include this file.',\n            '    //',\n            '    // OPTIONS',\n            '    // -----------------------------------------------------------------------',\n            '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',\n            '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',\n            '    // 39       - no dither, very expensive',\n            '    //',\n            '    // NOTES',\n            '    // -----------------------------------------------------------------------',\n            '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',\n            '    // 13 = about same speed as FXAA 3.9 and better than 12',\n            '    // 23 = closest to FXAA 3.9 visually and performance wise',\n            '    //  _ = the lowest digit is directly related to performance',\n            '    // _  = the highest digit is directly related to style',\n            '    //',\n            '    #define FXAA_QUALITY_PRESET 12',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                           FXAA QUALITY - PRESETS',\n            '',\n            '============================================================================*/',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - MEDIUM DITHER PRESETS',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 10)',\n            '    #define FXAA_QUALITY_PS 3',\n            '    #define FXAA_QUALITY_P0 1.5',\n            '    #define FXAA_QUALITY_P1 3.0',\n            '    #define FXAA_QUALITY_P2 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 11)',\n            '    #define FXAA_QUALITY_PS 4',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 3.0',\n            '    #define FXAA_QUALITY_P3 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 12)',\n            '    #define FXAA_QUALITY_PS 5',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 4.0',\n            '    #define FXAA_QUALITY_P4 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 13)',\n            '    #define FXAA_QUALITY_PS 6',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 4.0',\n            '    #define FXAA_QUALITY_P5 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 14)',\n            '    #define FXAA_QUALITY_PS 7',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 4.0',\n            '    #define FXAA_QUALITY_P6 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 15)',\n            '    #define FXAA_QUALITY_PS 8',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 4.0',\n            '    #define FXAA_QUALITY_P7 12.0',\n            '#endif',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - LOW DITHER PRESETS',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 20)',\n            '    #define FXAA_QUALITY_PS 3',\n            '    #define FXAA_QUALITY_P0 1.5',\n            '    #define FXAA_QUALITY_P1 2.0',\n            '    #define FXAA_QUALITY_P2 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 21)',\n            '    #define FXAA_QUALITY_PS 4',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 22)',\n            '    #define FXAA_QUALITY_PS 5',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 23)',\n            '    #define FXAA_QUALITY_PS 6',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 24)',\n            '    #define FXAA_QUALITY_PS 7',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 3.0',\n            '    #define FXAA_QUALITY_P6 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 25)',\n            '    #define FXAA_QUALITY_PS 8',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 4.0',\n            '    #define FXAA_QUALITY_P7 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 26)',\n            '    #define FXAA_QUALITY_PS 9',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 4.0',\n            '    #define FXAA_QUALITY_P8 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 27)',\n            '    #define FXAA_QUALITY_PS 10',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 4.0',\n            '    #define FXAA_QUALITY_P9 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 28)',\n            '    #define FXAA_QUALITY_PS 11',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 4.0',\n            '    #define FXAA_QUALITY_P10 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 29)',\n            '    #define FXAA_QUALITY_PS 12',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 2.0',\n            '    #define FXAA_QUALITY_P10 4.0',\n            '    #define FXAA_QUALITY_P11 8.0',\n            '#endif',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - EXTREME QUALITY',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 39)',\n            '    #define FXAA_QUALITY_PS 12',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.0',\n            '    #define FXAA_QUALITY_P2 1.0',\n            '    #define FXAA_QUALITY_P3 1.0',\n            '    #define FXAA_QUALITY_P4 1.0',\n            '    #define FXAA_QUALITY_P5 1.5',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 2.0',\n            '    #define FXAA_QUALITY_P10 4.0',\n            '    #define FXAA_QUALITY_P11 8.0',\n            '#endif',\n            '',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                                API PORTING',\n            '',\n            '============================================================================*/',\n            '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',\n            '    #define FxaaBool bool',\n            '    #define FxaaDiscard discard',\n            '    #define FxaaFloat float',\n            '    #define FxaaFloat2 vec2',\n            '    #define FxaaFloat3 vec3',\n            '    #define FxaaFloat4 vec4',\n            '    #define FxaaHalf float',\n            '    #define FxaaHalf2 vec2',\n            '    #define FxaaHalf3 vec3',\n            '    #define FxaaHalf4 vec4',\n            '    #define FxaaInt2 ivec2',\n            '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',\n            '    #define FxaaTex sampler2D',\n            '#else',\n            '    #define FxaaBool bool',\n            '    #define FxaaDiscard clip(-1)',\n            '    #define FxaaFloat float',\n            '    #define FxaaFloat2 float2',\n            '    #define FxaaFloat3 float3',\n            '    #define FxaaFloat4 float4',\n            '    #define FxaaHalf half',\n            '    #define FxaaHalf2 half2',\n            '    #define FxaaHalf3 half3',\n            '    #define FxaaHalf4 half4',\n            '    #define FxaaSat(x) saturate(x)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_100 == 1)',\n            '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',\n            '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_120 == 1)',\n            '    // Requires,',\n            '    //  #version 120',\n            '    // And at least,',\n            '    //  #extension GL_EXT_gpu_shader4 : enable',\n            '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',\n            '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',\n            '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',\n            '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',\n            '    #else',\n            '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',\n            '    #endif',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_130 == 1)',\n            '    // Requires \"#version 130\" or better',\n            '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_3 == 1)',\n            '    #define FxaaInt2 float2',\n            '    #define FxaaTex sampler2D',\n            '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',\n            '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_4 == 1)',\n            '    #define FxaaInt2 int2',\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_5 == 1)',\n            '    #define FxaaInt2 int2',\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n            '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',\n            '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',\n            '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',\n            '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',\n            '============================================================================*/',\n            '#if (FXAA_GREEN_AS_LUMA == 0)',\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',\n            '#else',\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',\n            '#endif',\n            '',\n            '',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                             FXAA3 QUALITY - PC',\n            '',\n            '============================================================================*/',\n            '#if (FXAA_PC == 1)',\n            '/*--------------------------------------------------------------------------*/',\n            'FxaaFloat4 FxaaPixelShader(',\n            '    //',\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\n            '    // {xy} = center of pixel',\n            '    FxaaFloat2 pos,',\n            '    //',\n            '    // Used only for FXAA Console, and not used on the 360 version.',\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\n            '    // {xy_} = upper left of pixel',\n            '    // {_zw} = lower right of pixel',\n            '    FxaaFloat4 fxaaConsolePosPos,',\n            '    //',\n            '    // Input color texture.',\n            '    // {rgb_} = color in linear or perceptual color space',\n            '    // if (FXAA_GREEN_AS_LUMA == 0)',\n            '    //     {__a} = luma in perceptual color space (not linear)',\n            '    FxaaTex tex,',\n            '    //',\n            '    // Only used on the optimized 360 version of FXAA Console.',\n            '    // For everything but 360, just use the same input here as for \"tex\".',\n            '    // For 360, same texture, just alias with a 2nd sampler.',\n            '    // This sampler needs to have an exponent bias of -1.',\n            '    FxaaTex fxaaConsole360TexExpBiasNegOne,',\n            '    //',\n            '    // Only used on the optimized 360 version of FXAA Console.',\n            '    // For everything but 360, just use the same input here as for \"tex\".',\n            '    // For 360, same texture, just alias with a 3nd sampler.',\n            '    // This sampler needs to have an exponent bias of -2.',\n            '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This must be from a constant/uniform.',\n            '    // {x_} = 1.0/screenWidthInPixels',\n            '    // {_y} = 1.0/screenHeightInPixels',\n            '    FxaaFloat2 fxaaQualityRcpFrame,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This must be from a constant/uniform.',\n            '    // This effects sub-pixel AA quality and inversely sharpness.',\n            '    //   Where N ranges between,',\n            '    //     N = 0.50 (default)',\n            '    //     N = 0.33 (sharper)',\n            '    // {x__} = -N/screenWidthInPixels',\n            '    // {_y_} = -N/screenHeightInPixels',\n            '    // {_z_} =  N/screenWidthInPixels',\n            '    // {__w} =  N/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // Not used on 360, but used on PS3 and PC.',\n            '    // This must be from a constant/uniform.',\n            '    // {x__} = -2.0/screenWidthInPixels',\n            '    // {_y_} = -2.0/screenHeightInPixels',\n            '    // {_z_} =  2.0/screenWidthInPixels',\n            '    // {__w} =  2.0/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',\n            '    // This must be from a constant/uniform.',\n            '    // {x__} =  8.0/screenWidthInPixels',\n            '    // {_y_} =  8.0/screenHeightInPixels',\n            '    // {_z_} = -4.0/screenWidthInPixels',\n            '    // {__w} = -4.0/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_SUBPIX define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Choose the amount of sub-pixel aliasing removal.',\n            '    // This can effect sharpness.',\n            '    //   1.00 - upper limit (softer)',\n            '    //   0.75 - default amount of filtering',\n            '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',\n            '    //   0.25 - almost off',\n            '    //   0.00 - completely off',\n            '    FxaaFloat fxaaQualitySubpix,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',\n            '    // It is here now to allow easier tuning.',\n            '    // The minimum amount of local contrast required to apply algorithm.',\n            '    //   0.333 - too little (faster)',\n            '    //   0.250 - low quality',\n            '    //   0.166 - default',\n            '    //   0.125 - high quality',\n            '    //   0.063 - overkill (slower)',\n            '    FxaaFloat fxaaQualityEdgeThreshold,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Trims the algorithm from processing darks.',\n            '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',\n            '    //   0.0625 - high quality (faster)',\n            '    //   0.0312 - visible limit (slower)',\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n            '    //   Likely want to set this to zero.',\n            '    //   As colors that are mostly not-green',\n            '    //   will appear very dark in the green channel!',\n            '    //   Tune by looking at mostly non-green content,',\n            '    //   then start at zero and increase until aliasing is a problem.',\n            '    FxaaFloat fxaaQualityEdgeThresholdMin,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',\n            '    // It is here now to allow easier tuning.',\n            '    // This does not effect PS3, as this needs to be compiled in.',\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',\n            '    //   Due to the PS3 being ALU bound,',\n            '    //   there are only three safe values here: 2 and 4 and 8.',\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n            '    // For all other platforms can be a non-power of two.',\n            '    //   8.0 is sharper (default!!!)',\n            '    //   4.0 is softer',\n            '    //   2.0 is really soft (good only for vector graphics inputs)',\n            '    FxaaFloat fxaaConsoleEdgeSharpness,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',\n            '    // It is here now to allow easier tuning.',\n            '    // This does not effect PS3, as this needs to be compiled in.',\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',\n            '    //   Due to the PS3 being ALU bound,',\n            '    //   there are only two safe values here: 1/4 and 1/8.',\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n            '    // The console setting has a different mapping than the quality setting.',\n            '    // Other platforms can use other values.',\n            '    //   0.125 leaves less aliasing, but is softer (default!!!)',\n            '    //   0.25 leaves more aliasing, and is sharper',\n            '    FxaaFloat fxaaConsoleEdgeThreshold,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Trims the algorithm from processing darks.',\n            '    // The console setting has a different mapping than the quality setting.',\n            '    // This only applies when FXAA_EARLY_EXIT is 1.',\n            '    // This does not apply to PS3,',\n            '    // PS3 was simplified to avoid more shader instructions.',\n            '    //   0.06 - faster but more aliasing in darks',\n            '    //   0.05 - default',\n            '    //   0.04 - slower and less aliasing in darks',\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n            '    //   Likely want to set this to zero.',\n            '    //   As colors that are mostly not-green',\n            '    //   will appear very dark in the green channel!',\n            '    //   Tune by looking at mostly non-green content,',\n            '    //   then start at zero and increase until aliasing is a problem.',\n            '    FxaaFloat fxaaConsoleEdgeThresholdMin,',\n            '    //',\n            '    // Extra constants for 360 FXAA Console only.',\n            '    // Use zeros or anything else for other platforms.',\n            '    // These must be in physical constant registers and NOT immediates.',\n            '    // Immediates will result in compiler un-optimizing.',\n            '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',\n            '    FxaaFloat4 fxaaConsole360ConstDir',\n            ') {',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posM;',\n            '    posM.x = pos.x;',\n            '    posM.y = pos.y;',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        #if (FXAA_DISCARD == 0)',\n            '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n            '            #if (FXAA_GREEN_AS_LUMA == 0)',\n            '                #define lumaM rgbyM.w',\n            '            #else',\n            '                #define lumaM rgbyM.y',\n            '            #endif',\n            '        #endif',\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\n            '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',\n            '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',\n            '        #else',\n            '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',\n            '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',\n            '        #endif',\n            '        #if (FXAA_DISCARD == 1)',\n            '            #define lumaM luma4A.w',\n            '        #endif',\n            '        #define lumaE luma4A.z',\n            '        #define lumaS luma4A.x',\n            '        #define lumaSE luma4A.y',\n            '        #define lumaNW luma4B.w',\n            '        #define lumaN luma4B.z',\n            '        #define lumaW luma4B.x',\n            '    #else',\n            '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\n            '            #define lumaM rgbyM.w',\n            '        #else',\n            '            #define lumaM rgbyM.y',\n            '        #endif',\n            '        #if (FXAA_GLSL_100 == 1)',\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',\n            '        #else',\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',\n            '        #endif',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat maxSM = max(lumaS, lumaM);',\n            '    FxaaFloat minSM = min(lumaS, lumaM);',\n            '    FxaaFloat maxESM = max(lumaE, maxSM);',\n            '    FxaaFloat minESM = min(lumaE, minSM);',\n            '    FxaaFloat maxWN = max(lumaN, lumaW);',\n            '    FxaaFloat minWN = min(lumaN, lumaW);',\n            '    FxaaFloat rangeMax = max(maxWN, maxESM);',\n            '    FxaaFloat rangeMin = min(minWN, minESM);',\n            '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',\n            '    FxaaFloat range = rangeMax - rangeMin;',\n            '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',\n            '    FxaaBool earlyExit = range < rangeMaxClamped;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(earlyExit)',\n            '        #if (FXAA_DISCARD == 1)',\n            '            FxaaDiscard;',\n            '        #else',\n            '            return rgbyM;',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    #if (FXAA_GATHER4_ALPHA == 0)',\n            '        #if (FXAA_GLSL_100 == 1)',\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '        #else',\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n            '        #endif',\n            '    #else',\n            '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',\n            '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNS = lumaN + lumaS;',\n            '    FxaaFloat lumaWE = lumaW + lumaE;',\n            '    FxaaFloat subpixRcpRange = 1.0/range;',\n            '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',\n            '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\n            '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNESE = lumaNE + lumaSE;',\n            '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',\n            '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\n            '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',\n            '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',\n            '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\n            '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\n            '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\n            '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\n            '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',\n            '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',\n            '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',\n            '    FxaaBool horzSpan = edgeHorz >= edgeVert;',\n            '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(!horzSpan) lumaN = lumaW;',\n            '    if(!horzSpan) lumaS = lumaE;',\n            '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',\n            '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat gradientN = lumaN - lumaM;',\n            '    FxaaFloat gradientS = lumaS - lumaM;',\n            '    FxaaFloat lumaNN = lumaN + lumaM;',\n            '    FxaaFloat lumaSS = lumaS + lumaM;',\n            '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',\n            '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',\n            '    if(pairN) lengthSign = -lengthSign;',\n            '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posB;',\n            '    posB.x = posM.x;',\n            '    posB.y = posM.y;',\n            '    FxaaFloat2 offNP;',\n            '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',\n            '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',\n            '    if(!horzSpan) posB.x += lengthSign * 0.5;',\n            '    if( horzSpan) posB.y += lengthSign * 0.5;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posN;',\n            '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\n            '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\n            '    FxaaFloat2 posP;',\n            '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\n            '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\n            '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',\n            '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',\n            '    FxaaFloat subpixE = subpixC * subpixC;',\n            '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(!pairN) lumaNN = lumaSS;',\n            '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',\n            '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',\n            '    FxaaFloat subpixF = subpixD * subpixE;',\n            '    FxaaBool lumaMLTZero = lumaMM < 0.0;',\n            '/*--------------------------------------------------------------------------*/',\n            '    lumaEndN -= lumaNN * 0.5;',\n            '    lumaEndP -= lumaNN * 0.5;',\n            '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',\n            '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',\n            '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\n            '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\n            '    FxaaBool doneNP = (!doneN) || (!doneP);',\n            '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\n            '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(doneNP) {',\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\n            '        doneNP = (!doneN) || (!doneP);',\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\n            '/*--------------------------------------------------------------------------*/',\n            '        #if (FXAA_QUALITY_PS > 3)',\n            '        if(doneNP) {',\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\n            '            doneNP = (!doneN) || (!doneP);',\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\n            '/*--------------------------------------------------------------------------*/',\n            '            #if (FXAA_QUALITY_PS > 4)',\n            '            if(doneNP) {',\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\n            '                doneNP = (!doneN) || (!doneP);',\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\n            '/*--------------------------------------------------------------------------*/',\n            '                #if (FXAA_QUALITY_PS > 5)',\n            '                if(doneNP) {',\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\n            '                    doneNP = (!doneN) || (!doneP);',\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    #if (FXAA_QUALITY_PS > 6)',\n            '                    if(doneNP) {',\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\n            '                        doneNP = (!doneN) || (!doneP);',\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\n            '/*--------------------------------------------------------------------------*/',\n            '                        #if (FXAA_QUALITY_PS > 7)',\n            '                        if(doneNP) {',\n            '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                            doneN = abs(lumaEndN) >= gradientScaled;',\n            '                            doneP = abs(lumaEndP) >= gradientScaled;',\n            '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\n            '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\n            '                            doneNP = (!doneN) || (!doneP);',\n            '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\n            '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\n            '/*--------------------------------------------------------------------------*/',\n            '    #if (FXAA_QUALITY_PS > 8)',\n            '    if(doneNP) {',\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\n            '        doneNP = (!doneN) || (!doneP);',\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\n            '/*--------------------------------------------------------------------------*/',\n            '        #if (FXAA_QUALITY_PS > 9)',\n            '        if(doneNP) {',\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\n            '            doneNP = (!doneN) || (!doneP);',\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\n            '/*--------------------------------------------------------------------------*/',\n            '            #if (FXAA_QUALITY_PS > 10)',\n            '            if(doneNP) {',\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\n            '                doneNP = (!doneN) || (!doneP);',\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\n            '/*--------------------------------------------------------------------------*/',\n            '                #if (FXAA_QUALITY_PS > 11)',\n            '                if(doneNP) {',\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\n            '                    doneNP = (!doneN) || (!doneP);',\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    #if (FXAA_QUALITY_PS > 12)',\n            '                    if(doneNP) {',\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\n            '                        doneNP = (!doneN) || (!doneP);',\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    }',\n            '                    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                }',\n            '                #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '            }',\n            '            #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '        }',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    }',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                        }',\n            '                        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                    }',\n            '                    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                }',\n            '                #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '            }',\n            '            #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '        }',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    }',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat dstN = posM.x - posN.x;',\n            '    FxaaFloat dstP = posP.x - posM.x;',\n            '    if(!horzSpan) dstN = posM.y - posN.y;',\n            '    if(!horzSpan) dstP = posP.y - posM.y;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\n            '    FxaaFloat spanLength = (dstP + dstN);',\n            '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\n            '    FxaaFloat spanLengthRcp = 1.0/spanLength;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaBool directionN = dstN < dstP;',\n            '    FxaaFloat dst = min(dstN, dstP);',\n            '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',\n            '    FxaaFloat subpixG = subpixF * subpixF;',\n            '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\n            '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\n            '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\n            '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\n            '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\n            '    #if (FXAA_DISCARD == 1)',\n            '        return FxaaTexTop(tex, posM);',\n            '    #else',\n            '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',\n            '    #endif',\n            '}',\n            '/*==========================================================================*/',\n            '#endif',\n            '',\n            'void main() {',\n            '  gl_FragColor = FxaaPixelShader(',\n            '    vUv,',\n            '    vec4(0.0),',\n            '    tDiffuse,',\n            '    tDiffuse,',\n            '    tDiffuse,',\n            '    resolution,',\n            '    vec4(0.0),',\n            '    vec4(0.0),',\n            '    vec4(0.0),',\n            '    0.75,',\n            '    0.166,',\n            '    0.0833,',\n            '    0.0,',\n            '    0.0,',\n            '    0.0,',\n            '    vec4(0.0)',\n            '  );',\n            '',\n            '  // TODO avoid querying texture twice for same texel',\n            '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',\n            '}'\n        ].join('\\n')\n    };\n    return FXAAShader;\n});\ndefine('skylark-threejs-ex/shaders/SSAOShader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SSAOShader = {\n        defines: {\n            'PERSPECTIVE_CAMERA': 1,\n            'KERNEL_SIZE': 32\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'tDepth': { value: null },\n            'tNoise': { value: null },\n            'kernel': { value: null },\n            'cameraNear': { value: null },\n            'cameraFar': { value: null },\n            'resolution': { value: new THREE.Vector2() },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'kernelRadius': { value: 8 },\n            'minDistance': { value: 0.005 },\n            'maxDistance': { value: 0.05 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tNormal;',\n            'uniform sampler2D tDepth;',\n            'uniform sampler2D tNoise;',\n            'uniform vec3 kernel[ KERNEL_SIZE ];',\n            'uniform vec2 resolution;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float kernelRadius;',\n            'uniform float minDistance;',\n            'uniform float maxDistance;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '}',\n            'float getLinearDepth( const in vec2 screenPosition ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec2 screenPosition ) {',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getDepth( vUv );',\n            '\\tfloat viewZ = getViewZ( depth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );',\n            '\\tvec3 viewNormal = getViewNormal( vUv );',\n            ' vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );',\n            '\\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;',\n            '\\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );',\n            '\\tvec3 bitangent = cross( viewNormal, tangent );',\n            '\\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );',\n            ' float occlusion = 0.0;',\n            ' for ( int i = 0; i < KERNEL_SIZE; i ++ ) {',\n            '\\t\\tvec3 sampleVector = kernelMatrix * kernel[ i ];',\n            '\\t\\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );',\n            '\\t\\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );',\n            '\\t\\tsamplePointNDC /= samplePointNDC.w;',\n            '\\t\\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;',\n            '\\t\\tfloat realDepth = getLinearDepth( samplePointUv );',\n            '\\t\\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );',\n            '\\t\\tfloat delta = sampleDepth - realDepth;',\n            '\\t\\tif ( delta > minDistance && delta < maxDistance ) {',\n            '\\t\\t\\tocclusion += 1.0;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );',\n            '\\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    var SSAODepthShader = {\n        defines: { 'PERSPECTIVE_CAMERA': 1 },\n        uniforms: {\n            'tDepth': { value: null },\n            'cameraNear': { value: null },\n            'cameraFar': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDepth;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'float getLinearDepth( const in vec2 screenPosition ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getLinearDepth( vUv );',\n            '\\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    var SSAOBlurShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new THREE.Vector2() }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 resolution;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 texelSize = ( 1.0 / resolution );',\n            '\\tfloat result = 0.0;',\n            '\\tfor ( int i = - 2; i <= 2; i ++ ) {',\n            '\\t\\tfor ( int j = - 2; j <= 2; j ++ ) {',\n            '\\t\\t\\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;',\n            '\\t\\t\\tresult += texture2D( tDiffuse, vUv + offset ).r;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return {\n        SSAOShader,\n        SSAODepthShader,\n        SSAOBlurShader\n    };\n});\ndefine('skylark-threejs-ex/shaders/FilmShader',[],function () {\n    'use strict';\n    var FilmShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'time': { value: 0 },\n            'nIntensity': { value: 0.5 },\n            'sIntensity': { value: 0.05 },\n            'sCount': { value: 4096 },\n            'grayscale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform float time;',\n            'uniform bool grayscale;',\n            'uniform float nIntensity;',\n            'uniform float sIntensity;',\n            'uniform float sCount;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );',\n            '\\tfloat dx = rand( vUv + time );',\n            '\\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );',\n            '\\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );',\n            '\\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;',\n            '\\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );',\n            '\\tif( grayscale ) {',\n            '\\t\\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );',\n            '\\t}',\n            '\\tgl_FragColor =  vec4( cResult, cTextureScreen.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  FilmShader ;\n});\ndefine('skylark-threejs-ex/shaders/DotScreenShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var DotScreenShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tSize': { value: new THREE.Vector2(256, 256) },\n            'center': { value: new THREE.Vector2(0.5, 0.5) },\n            'angle': { value: 1.57 },\n            'scale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec2 center;',\n            'uniform float angle;',\n            'uniform float scale;',\n            'uniform vec2 tSize;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'float pattern() {',\n            '\\tfloat s = sin( angle ), c = cos( angle );',\n            '\\tvec2 tex = vUv * tSize - center;',\n            '\\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',\n            '\\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',\n            '}',\n            'void main() {',\n            '\\tvec4 color = texture2D( tDiffuse, vUv );',\n            '\\tfloat average = ( color.r + color.g + color.b ) / 3.0;',\n            '\\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  DotScreenShader ;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityShader',[],function () {\n    'use strict';\n    var LuminosityShader = {\n        uniforms: { 'tDiffuse': { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tfloat l = linearToRelativeLuminance( texel.rgb );',\n            '\\tgl_FragColor = vec4( l, l, l, texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return  LuminosityShader ;\n});\ndefine('skylark-threejs-ex/shaders/SobelOperatorShader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SobelOperatorShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new THREE.Vector2() }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 resolution;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );',\n            '\\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );',\n            '\\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );',\n            '\\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;',\n            '\\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;',\n            '\\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;',\n            '\\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;',\n            '\\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;',\n            '\\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;',\n            '\\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;',\n            '\\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;',\n            '\\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;',\n            '\\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + ',\n            '\\t\\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + ',\n            '\\t\\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; ',\n            '\\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + ',\n            '\\t\\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + ',\n            '\\t\\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; ',\n            '\\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );',\n            '\\tgl_FragColor = vec4( vec3( G ), 1 );',\n            '}'\n        ].join('\\n')\n    };\n    return  SobelOperatorShader ;\n});\ndefine('skylark-threejs-ex/shaders/ColorifyShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var ColorifyShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'color': { value: new THREE.Color(16777215) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tgl_FragColor = vec4( v * color, texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return ColorifyShader;\n});\ndefine('skylark-threejs-ex/shaders/ToneMapShader',[],function () {\n    'use strict';\n    var ToneMapShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'averageLuminance': { value: 1 },\n            'luminanceMap': { value: null },\n            'maxLuminance': { value: 16 },\n            'minLuminance': { value: 0.01 },\n            'middleGrey': { value: 0.6 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'uniform float middleGrey;',\n            'uniform float minLuminance;',\n            'uniform float maxLuminance;',\n            '#ifdef ADAPTED_LUMINANCE',\n            '\\tuniform sampler2D luminanceMap;',\n            '#else',\n            '\\tuniform float averageLuminance;',\n            '#endif',\n            'vec3 ToneMap( vec3 vColor ) {',\n            '\\t#ifdef ADAPTED_LUMINANCE',\n            '\\t\\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;',\n            '\\t#else',\n            '\\t\\tfloat fLumAvg = averageLuminance;',\n            '\\t#endif',\n            '\\tfloat fLumPixel = linearToRelativeLuminance( vColor );',\n            '\\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );',\n            '\\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);',\n            '\\treturn fLumCompressed * vColor;',\n            '}',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return  ToneMapShader ;\n});\ndefine('skylark-threejs-ex/shaders/TechnicolorShader',[],function () {\n    'use strict';\n    var TechnicolorShader = {\n        uniforms: { 'tDiffuse': { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );',\n            '\\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);',\n            '\\tgl_FragColor = newTex;',\n            '}'\n        ].join('\\n')\n    };\n    return  TechnicolorShader ;\n});\ndefine('skylark-threejs-ex/shaders/HueSaturationShader',[],function () {\n    'use strict';\n    var HueSaturationShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'hue': { value: 0 },\n            'saturation': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float hue;',\n            'uniform float saturation;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tgl_FragColor = texture2D( tDiffuse, vUv );',\n            '\\tfloat angle = hue * 3.14159265;',\n            '\\tfloat s = sin(angle), c = cos(angle);',\n            '\\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',\n            '\\tfloat len = length(gl_FragColor.rgb);',\n            '\\tgl_FragColor.rgb = vec3(',\n            '\\t\\tdot(gl_FragColor.rgb, weights.xyz),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.zxy),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.yzx)',\n            '\\t);',\n            '\\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',\n            '\\tif (saturation > 0.0) {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',\n            '\\t} else {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',\n            '\\t}',\n            '}'\n        ].join('\\n')\n    };\n    return  HueSaturationShader ;\n});\ndefine('skylark-threejs-ex/postprocessing/Pass',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    function Pass() {\n        this.enabled = true;\n        this.needsSwap = true;\n        this.clear = false;\n        this.renderToScreen = false;\n    }\n    Object.assign(Pass.prototype, {\n        setSize: function () {\n        },\n        render: function () {\n            console.error('THREE.Pass: .render() must be implemented in derived pass.');\n        }\n    });\n    Pass.FullScreenQuad = function () {\n        var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        var geometry = new THREE.PlaneBufferGeometry(2, 2);\n        var FullScreenQuad = function (material) {\n            this._mesh = new THREE.Mesh(geometry, material);\n        };\n        Object.defineProperty(FullScreenQuad.prototype, 'material', {\n            get: function () {\n                return this._mesh.material;\n            },\n            set: function (value) {\n                this._mesh.material = value;\n            }\n        });\n        Object.assign(FullScreenQuad.prototype, {\n            dispose: function () {\n                this._mesh.geometry.dispose();\n            },\n            render: function (renderer) {\n                renderer.render(this._mesh, camera);\n            }\n        });\n        return FullScreenQuad;\n    }();\n    return Pass;\n});\ndefine('skylark-threejs-ex/postprocessing/ShaderPass',[\n    \"skylark-threejs\",\n    './Pass'\n], function (\n    THREE, \n    Pass\n) {\n    'use strict';\n    var ShaderPass = function (shader, textureID) {\n        Pass.call(this);\n        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else if (shader) {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: Object.assign({}, shader.defines),\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: ShaderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            if (this.uniforms[this.textureID]) {\n                this.uniforms[this.textureID].value = readBuffer.texture;\n            }\n            this.fsQuad.material = this.material;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n                this.fsQuad.render(renderer);\n            }\n        }\n    });\n    return ShaderPass;\n});\ndefine('skylark-threejs-ex/postprocessing/MaskPass',[\n    './Pass'\n], function (Pass) {\n    'use strict';\n    var MaskPass = function (scene, camera) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.clear = true;\n        this.needsSwap = false;\n        this.inverse = false;\n    };\n    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: MaskPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var context = renderer.getContext();\n            var state = renderer.state;\n            state.buffers.color.setMask(false);\n            state.buffers.depth.setMask(false);\n            state.buffers.color.setLocked(true);\n            state.buffers.depth.setLocked(true);\n            var writeValue, clearValue;\n            if (this.inverse) {\n                writeValue = 0;\n                clearValue = 1;\n            } else {\n                writeValue = 1;\n                clearValue = 0;\n            }\n            state.buffers.stencil.setTest(true);\n            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);\n            state.buffers.stencil.setClear(clearValue);\n            state.buffers.stencil.setLocked(true);\n            renderer.setRenderTarget(readBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            state.buffers.color.setLocked(false);\n            state.buffers.depth.setLocked(false);\n            state.buffers.stencil.setLocked(false);\n            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);\n            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n            state.buffers.stencil.setLocked(true);\n        }\n    });\n    return  MaskPass;\n});\ndefine('skylark-threejs-ex/postprocessing/EffectComposer',[\n    \"skylark-threejs\",\n    '../shaders/CopyShader',\n    '../postprocessing/ShaderPass',\n    '../postprocessing/MaskPass'\n], function (\n    THREE, \n    CopyShader, \n    ShaderPass, \n    MaskPass\n) {\n    'use strict';\n    var EffectComposer = function (renderer, renderTarget) {\n        this.renderer = renderer;\n        if (renderTarget === undefined) {\n            var parameters = {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat,\n                stencilBuffer: false\n            };\n            var size = renderer.getSize(new THREE.Vector2());\n            this._pixelRatio = renderer.getPixelRatio();\n            this._width = size.width;\n            this._height = size.height;\n            renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n            renderTarget.texture.name = 'EffectComposer.rt1';\n        } else {\n            this._pixelRatio = 1;\n            this._width = renderTarget.width;\n            this._height = renderTarget.height;\n        }\n        this.renderTarget1 = renderTarget;\n        this.renderTarget2 = renderTarget.clone();\n        this.renderTarget2.texture.name = 'EffectComposer.rt2';\n        this.writeBuffer = this.renderTarget1;\n        this.readBuffer = this.renderTarget2;\n        this.renderToScreen = true;\n        this.passes = [];\n        if (CopyShader === undefined) {\n            console.error('THREE.EffectComposer relies on CopyShader');\n        }\n        if (ShaderPass === undefined) {\n            console.error('THREE.EffectComposer relies on ShaderPass');\n        }\n        this.copyPass = new ShaderPass(CopyShader);\n        this.clock = new THREE.Clock();\n    };\n    Object.assign(EffectComposer.prototype, {\n        swapBuffers: function () {\n            var tmp = this.readBuffer;\n            this.readBuffer = this.writeBuffer;\n            this.writeBuffer = tmp;\n        },\n        addPass: function (pass) {\n            this.passes.push(pass);\n            pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n        },\n        insertPass: function (pass, index) {\n            this.passes.splice(index, 0, pass);\n        },\n        isLastEnabledPass: function (passIndex) {\n            for (var i = passIndex + 1; i < this.passes.length; i++) {\n                if (this.passes[i].enabled) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        render: function (deltaTime) {\n            if (deltaTime === undefined) {\n                deltaTime = this.clock.getDelta();\n            }\n            var currentRenderTarget = this.renderer.getRenderTarget();\n            var maskActive = false;\n            var pass, i, il = this.passes.length;\n            for (i = 0; i < il; i++) {\n                pass = this.passes[i];\n                if (pass.enabled === false)\n                    continue;\n                pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n                pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n                if (pass.needsSwap) {\n                    if (maskActive) {\n                        var context = this.renderer.getContext();\n                        var stencil = this.renderer.state.buffers.stencil;\n                        stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n                        this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n                        stencil.setFunc(context.EQUAL, 1, 4294967295);\n                    }\n                    this.swapBuffers();\n                }\n                if (MaskPass !== undefined) {\n                    if (pass instanceof MaskPass) {\n                        maskActive = true;\n                    } else if (pass instanceof ClearMaskPass) {\n                        maskActive = false;\n                    }\n                }\n            }\n            this.renderer.setRenderTarget(currentRenderTarget);\n        },\n        reset: function (renderTarget) {\n            if (renderTarget === undefined) {\n                var size = this.renderer.getSize(new THREE.Vector2());\n                this._pixelRatio = this.renderer.getPixelRatio();\n                this._width = size.width;\n                this._height = size.height;\n                renderTarget = this.renderTarget1.clone();\n                renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n            }\n            this.renderTarget1.dispose();\n            this.renderTarget2.dispose();\n            this.renderTarget1 = renderTarget;\n            this.renderTarget2 = renderTarget.clone();\n            this.writeBuffer = this.renderTarget1;\n            this.readBuffer = this.renderTarget2;\n        },\n        setSize: function (width, height) {\n            this._width = width;\n            this._height = height;\n            var effectiveWidth = this._width * this._pixelRatio;\n            var effectiveHeight = this._height * this._pixelRatio;\n            this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n            this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n            for (var i = 0; i < this.passes.length; i++) {\n                this.passes[i].setSize(effectiveWidth, effectiveHeight);\n            }\n        },\n        setPixelRatio: function (pixelRatio) {\n            this._pixelRatio = pixelRatio;\n            this.setSize(this._width, this._height);\n        }\n    });\n\n    return  EffectComposer;\n});\ndefine('skylark-threejs-ex/postprocessing/RenderPass',['./Pass'], function (Pass) {\n    'use strict';\n    var RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = overrideMaterial;\n        this.clearColor = clearColor;\n        this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n        this.clear = true;\n        this.clearDepth = false;\n        this.needsSwap = false;\n    };\n    RenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: RenderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            var oldClearColor, oldClearAlpha, oldOverrideMaterial;\n            if (this.overrideMaterial !== undefined) {\n                oldOverrideMaterial = this.scene.overrideMaterial;\n                this.scene.overrideMaterial = this.overrideMaterial;\n            }\n            if (this.clearColor) {\n                oldClearColor = renderer.getClearColor().getHex();\n                oldClearAlpha = renderer.getClearAlpha();\n                renderer.setClearColor(this.clearColor, this.clearAlpha);\n            }\n            if (this.clearDepth) {\n                renderer.clearDepth();\n            }\n            renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n            if (this.clear)\n                renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n            renderer.render(this.scene, this.camera);\n            if (this.clearColor) {\n                renderer.setClearColor(oldClearColor, oldClearAlpha);\n            }\n            if (this.overrideMaterial !== undefined) {\n                this.scene.overrideMaterial = oldOverrideMaterial;\n            }\n            renderer.autoClear = oldAutoClear;\n        }\n    });\n    return RenderPass;\n});\ndefine('skylark-threejs-ex/curves/NURBSUtils',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var NURBSUtils = {\n        findSpan: function (p, u, U) {\n            var n = U.length - p - 1;\n            if (u >= U[n]) {\n                return n - 1;\n            }\n            if (u <= U[p]) {\n                return p;\n            }\n            var low = p;\n            var high = n;\n            var mid = Math.floor((low + high) / 2);\n            while (u < U[mid] || u >= U[mid + 1]) {\n                if (u < U[mid]) {\n                    high = mid;\n                } else {\n                    low = mid;\n                }\n                mid = Math.floor((low + high) / 2);\n            }\n            return mid;\n        },\n        calcBasisFunctions: function (span, u, p, U) {\n            var N = [];\n            var left = [];\n            var right = [];\n            N[0] = 1;\n            for (var j = 1; j <= p; ++j) {\n                left[j] = u - U[span + 1 - j];\n                right[j] = U[span + j] - u;\n                var saved = 0;\n                for (var r = 0; r < j; ++r) {\n                    var rv = right[r + 1];\n                    var lv = left[j - r];\n                    var temp = N[r] / (rv + lv);\n                    N[r] = saved + rv * temp;\n                    saved = lv * temp;\n                }\n                N[j] = saved;\n            }\n            return N;\n        },\n        calcBSplinePoint: function (p, U, P, u) {\n            var span = this.findSpan(p, u, U);\n            var N = this.calcBasisFunctions(span, u, p, U);\n            var C = new THREE.Vector4(0, 0, 0, 0);\n            for (var j = 0; j <= p; ++j) {\n                var point = P[span - p + j];\n                var Nj = N[j];\n                var wNj = point.w * Nj;\n                C.x += point.x * wNj;\n                C.y += point.y * wNj;\n                C.z += point.z * wNj;\n                C.w += point.w * Nj;\n            }\n            return C;\n        },\n        calcBasisFunctionDerivatives: function (span, u, p, n, U) {\n            var zeroArr = [];\n            for (var i = 0; i <= p; ++i)\n                zeroArr[i] = 0;\n            var ders = [];\n            for (var i = 0; i <= n; ++i)\n                ders[i] = zeroArr.slice(0);\n            var ndu = [];\n            for (var i = 0; i <= p; ++i)\n                ndu[i] = zeroArr.slice(0);\n            ndu[0][0] = 1;\n            var left = zeroArr.slice(0);\n            var right = zeroArr.slice(0);\n            for (var j = 1; j <= p; ++j) {\n                left[j] = u - U[span + 1 - j];\n                right[j] = U[span + j] - u;\n                var saved = 0;\n                for (var r = 0; r < j; ++r) {\n                    var rv = right[r + 1];\n                    var lv = left[j - r];\n                    ndu[j][r] = rv + lv;\n                    var temp = ndu[r][j - 1] / ndu[j][r];\n                    ndu[r][j] = saved + rv * temp;\n                    saved = lv * temp;\n                }\n                ndu[j][j] = saved;\n            }\n            for (var j = 0; j <= p; ++j) {\n                ders[0][j] = ndu[j][p];\n            }\n            for (var r = 0; r <= p; ++r) {\n                var s1 = 0;\n                var s2 = 1;\n                var a = [];\n                for (var i = 0; i <= p; ++i) {\n                    a[i] = zeroArr.slice(0);\n                }\n                a[0][0] = 1;\n                for (var k = 1; k <= n; ++k) {\n                    var d = 0;\n                    var rk = r - k;\n                    var pk = p - k;\n                    if (r >= k) {\n                        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n                        d = a[s2][0] * ndu[rk][pk];\n                    }\n                    var j1 = rk >= -1 ? 1 : -rk;\n                    var j2 = r - 1 <= pk ? k - 1 : p - r;\n                    for (var j = j1; j <= j2; ++j) {\n                        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n                        d += a[s2][j] * ndu[rk + j][pk];\n                    }\n                    if (r <= pk) {\n                        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n                        d += a[s2][k] * ndu[r][pk];\n                    }\n                    ders[k][r] = d;\n                    var j = s1;\n                    s1 = s2;\n                    s2 = j;\n                }\n            }\n            var r = p;\n            for (var k = 1; k <= n; ++k) {\n                for (var j = 0; j <= p; ++j) {\n                    ders[k][j] *= r;\n                }\n                r *= p - k;\n            }\n            return ders;\n        },\n        calcBSplineDerivatives: function (p, U, P, u, nd) {\n            var du = nd < p ? nd : p;\n            var CK = [];\n            var span = this.findSpan(p, u, U);\n            var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n            var Pw = [];\n            for (var i = 0; i < P.length; ++i) {\n                var point = P[i].clone();\n                var w = point.w;\n                point.x *= w;\n                point.y *= w;\n                point.z *= w;\n                Pw[i] = point;\n            }\n            for (var k = 0; k <= du; ++k) {\n                var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n                for (var j = 1; j <= p; ++j) {\n                    point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n                }\n                CK[k] = point;\n            }\n            for (var k = du + 1; k <= nd + 1; ++k) {\n                CK[k] = new THREE.Vector4(0, 0, 0);\n            }\n            return CK;\n        },\n        calcKoverI: function (k, i) {\n            var nom = 1;\n            for (var j = 2; j <= k; ++j) {\n                nom *= j;\n            }\n            var denom = 1;\n            for (var j = 2; j <= i; ++j) {\n                denom *= j;\n            }\n            for (var j = 2; j <= k - i; ++j) {\n                denom *= j;\n            }\n            return nom / denom;\n        },\n        calcRationalCurveDerivatives: function (Pders) {\n            var nd = Pders.length;\n            var Aders = [];\n            var wders = [];\n            for (var i = 0; i < nd; ++i) {\n                var point = Pders[i];\n                Aders[i] = new THREE.Vector3(point.x, point.y, point.z);\n                wders[i] = point.w;\n            }\n            var CK = [];\n            for (var k = 0; k < nd; ++k) {\n                var v = Aders[k].clone();\n                for (var i = 1; i <= k; ++i) {\n                    v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n                }\n                CK[k] = v.divideScalar(wders[0]);\n            }\n            return CK;\n        },\n        calcNURBSDerivatives: function (p, U, P, u, nd) {\n            var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n            return this.calcRationalCurveDerivatives(Pders);\n        },\n        calcSurfacePoint: function (p, q, U, V, P, u, v, target) {\n            var uspan = this.findSpan(p, u, U);\n            var vspan = this.findSpan(q, v, V);\n            var Nu = this.calcBasisFunctions(uspan, u, p, U);\n            var Nv = this.calcBasisFunctions(vspan, v, q, V);\n            var temp = [];\n            for (var l = 0; l <= q; ++l) {\n                temp[l] = new THREE.Vector4(0, 0, 0, 0);\n                for (var k = 0; k <= p; ++k) {\n                    var point = P[uspan - p + k][vspan - q + l].clone();\n                    var w = point.w;\n                    point.x *= w;\n                    point.y *= w;\n                    point.z *= w;\n                    temp[l].add(point.multiplyScalar(Nu[k]));\n                }\n            }\n            var Sw = new THREE.Vector4(0, 0, 0, 0);\n            for (var l = 0; l <= q; ++l) {\n                Sw.add(temp[l].multiplyScalar(Nv[l]));\n            }\n            Sw.divideScalar(Sw.w);\n            target.set(Sw.x, Sw.y, Sw.z);\n        }\n    };\n    \n    return NURBSUtils;\n});\ndefine('skylark-threejs-ex/curves/NURBSCurve',[\n    \"skylark-threejs\",\n    './NURBSUtils'\n], function (THREE, NURBSUtils) {\n    'use strict';\n    var NURBSCurve = function (degree, knots, controlPoints, startKnot, endKnot) {\n        THREE.Curve.call(this);\n        this.degree = degree;\n        this.knots = knots;\n        this.controlPoints = [];\n        this.startKnot = startKnot || 0;\n        this.endKnot = endKnot || this.knots.length - 1;\n        for (var i = 0; i < controlPoints.length; ++i) {\n            var point = controlPoints[i];\n            this.controlPoints[i] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n        }\n    };\n    NURBSCurve.prototype = Object.create(THREE.Curve.prototype);\n    NURBSCurve.prototype.constructor = NURBSCurve;\n    NURBSCurve.prototype.getPoint = function (t) {\n        var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);\n        var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n        if (hpoint.w != 1) {\n            hpoint.divideScalar(hpoint.w);\n        }\n        return new THREE.Vector3(hpoint.x, hpoint.y, hpoint.z);\n    };\n    NURBSCurve.prototype.getTangent = function (t) {\n        var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n        var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n        var tangent = ders[1].clone();\n        tangent.normalize();\n        return tangent;\n    };\n    \n    return NURBSCurve;\n});\ndefine('skylark-threejs-ex/curves/NURBSSurface',[\n    \"skylark-threejs\",\n    './NURBSUtils'\n], function (THREE, NURBSUtils) {\n    'use strict';\n    var NURBSSurface = function (degree1, degree2, knots1, knots2, controlPoints) {\n        this.degree1 = degree1;\n        this.degree2 = degree2;\n        this.knots1 = knots1;\n        this.knots2 = knots2;\n        this.controlPoints = [];\n        var len1 = knots1.length - degree1 - 1;\n        var len2 = knots2.length - degree2 - 1;\n        for (var i = 0; i < len1; ++i) {\n            this.controlPoints[i] = [];\n            for (var j = 0; j < len2; ++j) {\n                var point = controlPoints[i][j];\n                this.controlPoints[i][j] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n            }\n        }\n    };\n    NURBSSurface.prototype = {\n        constructor: NURBSSurface,\n        getPoint: function (t1, t2, target) {\n            var u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);\n            var v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);\n            NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n        }\n    };\n    return NURBSSurface;\n});\ndefine('skylark-threejs-ex/objects/Lensflare',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Lensflare = function () {\n        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({\n            opacity: 0,\n            transparent: true\n        }));\n        this.type = 'Lensflare';\n        this.frustumCulled = false;\n        this.renderOrder = Infinity;\n        var positionScreen = new THREE.Vector3();\n        var positionView = new THREE.Vector3();\n        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        tempMap.minFilter = THREE.NearestFilter;\n        tempMap.magFilter = THREE.NearestFilter;\n        tempMap.wrapS = THREE.ClampToEdgeWrapping;\n        tempMap.wrapT = THREE.ClampToEdgeWrapping;\n        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        occlusionMap.minFilter = THREE.NearestFilter;\n        occlusionMap.magFilter = THREE.NearestFilter;\n        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;\n        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;\n        var geometry = Lensflare.Geometry;\n        var material1a = new THREE.RawShaderMaterial({\n            uniforms: {\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'void main() {',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'void main() {',\n                '\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\n                '}'\n            ].join('\\n'),\n            depthTest: true,\n            depthWrite: false,\n            transparent: false\n        });\n        var material1b = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: tempMap },\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'attribute vec2 uv;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tvUV = uv;',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'uniform sampler2D map;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tgl_FragColor = texture2D( map, vUV );',\n                '}'\n            ].join('\\n'),\n            depthTest: false,\n            depthWrite: false,\n            transparent: false\n        });\n        var mesh1 = new THREE.Mesh(geometry, material1a);\n        var elements = [];\n        var shader = LensflareElement.Shader;\n        var material2 = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: null },\n                'occlusionMap': { value: occlusionMap },\n                'color': { value: new THREE.Color(16777215) },\n                'scale': { value: new THREE.Vector2() },\n                'screenPosition': { value: new THREE.Vector3() }\n            },\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false\n        });\n        var mesh2 = new THREE.Mesh(geometry, material2);\n        this.addElement = function (element) {\n            elements.push(element);\n        };\n        var scale = new THREE.Vector2();\n        var screenPositionPixels = new THREE.Vector2();\n        var validArea = new THREE.Box2();\n        var viewport = new THREE.Vector4();\n        this.onBeforeRender = function (renderer, scene, camera) {\n            renderer.getCurrentViewport(viewport);\n            var invAspect = viewport.w / viewport.z;\n            var halfViewportWidth = viewport.z / 2;\n            var halfViewportHeight = viewport.w / 2;\n            var size = 16 / viewport.w;\n            scale.set(size * invAspect, size);\n            validArea.min.set(viewport.x, viewport.y);\n            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n            positionView.setFromMatrixPosition(this.matrixWorld);\n            positionView.applyMatrix4(camera.matrixWorldInverse);\n            if (positionView.z > 0)\n                return;\n            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n            if (validArea.containsPoint(screenPositionPixels)) {\n                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n                var uniforms = material1a.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\n                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n                var uniforms = material1b.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\n                var vecX = -positionScreen.x * 2;\n                var vecY = -positionScreen.y * 2;\n                for (var i = 0, l = elements.length; i < l; i++) {\n                    var element = elements[i];\n                    var uniforms = material2.uniforms;\n                    uniforms['color'].value.copy(element.color);\n                    uniforms['map'].value = element.texture;\n                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n                    var size = element.size / viewport.w;\n                    var invAspect = viewport.w / viewport.z;\n                    uniforms['scale'].value.set(size * invAspect, size);\n                    material2.uniformsNeedUpdate = true;\n                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n                }\n            }\n        };\n        this.dispose = function () {\n            material1a.dispose();\n            material1b.dispose();\n            material2.dispose();\n            tempMap.dispose();\n            occlusionMap.dispose();\n            for (var i = 0, l = elements.length; i < l; i++) {\n                elements[i].texture.dispose();\n            }\n        };\n    };\n    Lensflare.prototype = Object.create(THREE.Mesh.prototype);\n    Lensflare.prototype.constructor = Lensflare;\n    Lensflare.prototype.isLensflare = true;\n    return Lensflare;\n});\ndefine('skylark-threejs-ex/objects/Reflector',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Reflector = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Reflector';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var shader = options.shader || Reflector.ReflectorShader;\n        var recursion = options.recursion !== undefined ? options.recursion : 0;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var reflectorPlane = new THREE.Plane();\n        var normal = new THREE.Vector3();\n        var reflectorWorldPosition = new THREE.Vector3();\n        var cameraWorldPosition = new THREE.Vector3();\n        var rotationMatrix = new THREE.Matrix4();\n        var lookAtPosition = new THREE.Vector3(0, 0, -1);\n        var clipPlane = new THREE.Vector4();\n        var view = new THREE.Vector3();\n        var target = new THREE.Vector3();\n        var q = new THREE.Vector4();\n        var textureMatrix = new THREE.Matrix4();\n        var virtualCamera = new THREE.PerspectiveCamera();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false,\n            encoding: encoding\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        var material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            fragmentShader: shader.fragmentShader,\n            vertexShader: shader.vertexShader\n        });\n        material.uniforms['tDiffuse'].value = renderTarget.texture;\n        material.uniforms['color'].value = color;\n        material.uniforms['textureMatrix'].value = textureMatrix;\n        this.material = material;\n        this.onBeforeRender = function (renderer, scene, camera) {\n            if ('recursion' in camera.userData) {\n                if (camera.userData.recursion === recursion)\n                    return;\n                camera.userData.recursion++;\n            }\n            reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n            rotationMatrix.extractRotation(scope.matrixWorld);\n            normal.set(0, 0, 1);\n            normal.applyMatrix4(rotationMatrix);\n            view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n            if (view.dot(normal) > 0)\n                return;\n            view.reflect(normal).negate();\n            view.add(reflectorWorldPosition);\n            rotationMatrix.extractRotation(camera.matrixWorld);\n            lookAtPosition.set(0, 0, -1);\n            lookAtPosition.applyMatrix4(rotationMatrix);\n            lookAtPosition.add(cameraWorldPosition);\n            target.subVectors(reflectorWorldPosition, lookAtPosition);\n            target.reflect(normal).negate();\n            target.add(reflectorWorldPosition);\n            virtualCamera.position.copy(view);\n            virtualCamera.up.set(0, 1, 0);\n            virtualCamera.up.applyMatrix4(rotationMatrix);\n            virtualCamera.up.reflect(normal);\n            virtualCamera.lookAt(target);\n            virtualCamera.far = camera.far;\n            virtualCamera.updateMatrixWorld();\n            virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n            virtualCamera.userData.recursion = 0;\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(virtualCamera.projectionMatrix);\n            textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n            reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n            reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n            clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n            var projectionMatrix = virtualCamera.projectionMatrix;\n            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n            q.z = -1;\n            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n            clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n            projectionMatrix.elements[2] = clipPlane.x;\n            projectionMatrix.elements[6] = clipPlane.y;\n            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n            projectionMatrix.elements[14] = clipPlane.w;\n            scope.visible = false;\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, virtualCamera);\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n            scope.visible = true;\n        };\n        this.getRenderTarget = function () {\n            return renderTarget;\n        };\n    };\n    Reflector.prototype = Object.create(THREE.Mesh.prototype);\n    Reflector.prototype.constructor = Reflector;\n    Reflector.ReflectorShader = {\n        uniforms: {\n            'color': { value: null },\n            'tDiffuse': { value: null },\n            'textureMatrix': { value: null }\n        },\n        vertexShader: [\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vUv;',\n            'void main() {',\n            '\\tvUv = textureMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec4 vUv;',\n            'float blendOverlay( float base, float blend ) {',\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n            '}',\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n            '}',\n            'void main() {',\n            '\\tvec4 base = texture2DProj( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n\n    return Reflector;\n});\ndefine('skylark-threejs-ex/objects/Refractor',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Refractor = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Refractor';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var shader = options.shader || Refractor.RefractorShader;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var virtualCamera = new THREE.PerspectiveCamera();\n        virtualCamera.matrixAutoUpdate = false;\n        virtualCamera.userData.refractor = true;\n        var refractorPlane = new THREE.Plane();\n        var textureMatrix = new THREE.Matrix4();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false,\n            encoding: encoding\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        this.material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: true\n        });\n        this.material.uniforms['color'].value = color;\n        this.material.uniforms['tDiffuse'].value = renderTarget.texture;\n        this.material.uniforms['textureMatrix'].value = textureMatrix;\n        var visible = function () {\n            var refractorWorldPosition = new THREE.Vector3();\n            var cameraWorldPosition = new THREE.Vector3();\n            var rotationMatrix = new THREE.Matrix4();\n            var view = new THREE.Vector3();\n            var normal = new THREE.Vector3();\n            return function visible(camera) {\n                refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n                cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n                view.subVectors(refractorWorldPosition, cameraWorldPosition);\n                rotationMatrix.extractRotation(scope.matrixWorld);\n                normal.set(0, 0, 1);\n                normal.applyMatrix4(rotationMatrix);\n                return view.dot(normal) < 0;\n            };\n        }();\n        var updateRefractorPlane = function () {\n            var normal = new THREE.Vector3();\n            var position = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            var scale = new THREE.Vector3();\n            return function updateRefractorPlane() {\n                scope.matrixWorld.decompose(position, quaternion, scale);\n                normal.set(0, 0, 1).applyQuaternion(quaternion).normalize();\n                normal.negate();\n                refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\n            };\n        }();\n        var updateVirtualCamera = function () {\n            var clipPlane = new THREE.Plane();\n            var clipVector = new THREE.Vector4();\n            var q = new THREE.Vector4();\n            return function updateVirtualCamera(camera) {\n                virtualCamera.matrixWorld.copy(camera.matrixWorld);\n                virtualCamera.matrixWorldInverse.getInverse(virtualCamera.matrixWorld);\n                virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n                virtualCamera.far = camera.far;\n                clipPlane.copy(refractorPlane);\n                clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n                clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);\n                var projectionMatrix = virtualCamera.projectionMatrix;\n                q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n                q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n                q.z = -1;\n                q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n                clipVector.multiplyScalar(2 / clipVector.dot(q));\n                projectionMatrix.elements[2] = clipVector.x;\n                projectionMatrix.elements[6] = clipVector.y;\n                projectionMatrix.elements[10] = clipVector.z + 1 - clipBias;\n                projectionMatrix.elements[14] = clipVector.w;\n            };\n        }();\n        function updateTextureMatrix(camera) {\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(camera.projectionMatrix);\n            textureMatrix.multiply(camera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n        }\n        function render(renderer, scene, camera) {\n            scope.visible = false;\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, virtualCamera);\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n            scope.visible = true;\n        }\n        this.onBeforeRender = function (renderer, scene, camera) {\n            if (camera.userData.refractor === true)\n                return;\n            if (!visible(camera) === true)\n                return;\n            updateRefractorPlane();\n            updateTextureMatrix(camera);\n            updateVirtualCamera(camera);\n            render(renderer, scene, camera);\n        };\n        this.getRenderTarget = function () {\n            return renderTarget;\n        };\n    };\n    Refractor.prototype = Object.create(THREE.Mesh.prototype);\n    Refractor.prototype.constructor = Refractor;\n    Refractor.RefractorShader = {\n        uniforms: {\n            'color': { value: null },\n            'tDiffuse': { value: null },\n            'textureMatrix': { value: null }\n        },\n        vertexShader: [\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vUv;',\n            'void main() {',\n            '\\tvUv = textureMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec4 vUv;',\n            'float blendOverlay( float base, float blend ) {',\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n            '}',\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n            '}',\n            'void main() {',\n            '\\tvec4 base = texture2DProj( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return Refractor;\n});\ndefine('skylark-threejs-ex/loaders/TTFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TTFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.reversed = false;\n    };\n    TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TTFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer) {\n            function convert(font, reversed) {\n                var round = Math.round;\n                var glyphs = {};\n                var scale = 100000 / ((font.unitsPerEm || 2048) * 72);\n                var glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n                var unicodes = Object.keys(glyphIndexMap);\n                for (var i = 0; i < unicodes.length; i++) {\n                    var unicode = unicodes[i];\n                    var glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\n                    if (unicode !== undefined) {\n                        var token = {\n                            ha: round(glyph.advanceWidth * scale),\n                            x_min: round(glyph.xMin * scale),\n                            x_max: round(glyph.xMax * scale),\n                            o: ''\n                        };\n                        if (reversed) {\n                            glyph.path.commands = reverseCommands(glyph.path.commands);\n                        }\n                        glyph.path.commands.forEach(function (command) {\n                            if (command.type.toLowerCase() === 'c') {\n                                command.type = 'b';\n                            }\n                            token.o += command.type.toLowerCase() + ' ';\n                            if (command.x !== undefined && command.y !== undefined) {\n                                token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';\n                            }\n                            if (command.x1 !== undefined && command.y1 !== undefined) {\n                                token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';\n                            }\n                            if (command.x2 !== undefined && command.y2 !== undefined) {\n                                token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';\n                            }\n                        });\n                        glyphs[String.fromCodePoint(glyph.unicode)] = token;\n                    }\n                }\n                return {\n                    glyphs: glyphs,\n                    familyName: font.getEnglishName('fullName'),\n                    ascender: round(font.ascender * scale),\n                    descender: round(font.descender * scale),\n                    underlinePosition: font.tables.post.underlinePosition,\n                    underlineThickness: font.tables.post.underlineThickness,\n                    boundingBox: {\n                        xMin: font.tables.head.xMin,\n                        xMax: font.tables.head.xMax,\n                        yMin: font.tables.head.yMin,\n                        yMax: font.tables.head.yMax\n                    },\n                    resolution: 1000,\n                    original_font_information: font.tables.name\n                };\n            }\n            function reverseCommands(commands) {\n                var paths = [];\n                var path;\n                commands.forEach(function (c) {\n                    if (c.type.toLowerCase() === 'm') {\n                        path = [c];\n                        paths.push(path);\n                    } else if (c.type.toLowerCase() !== 'z') {\n                        path.push(c);\n                    }\n                });\n                var reversed = [];\n                paths.forEach(function (p) {\n                    var result = {\n                        type: 'm',\n                        x: p[p.length - 1].x,\n                        y: p[p.length - 1].y\n                    };\n                    reversed.push(result);\n                    for (var i = p.length - 1; i > 0; i--) {\n                        var command = p[i];\n                        var result = { type: command.type };\n                        if (command.x2 !== undefined && command.y2 !== undefined) {\n                            result.x1 = command.x2;\n                            result.y1 = command.y2;\n                            result.x2 = command.x1;\n                            result.y2 = command.y1;\n                        } else if (command.x1 !== undefined && command.y1 !== undefined) {\n                            result.x1 = command.x1;\n                            result.y1 = command.y1;\n                        }\n                        result.x = p[i - 1].x;\n                        result.y = p[i - 1].y;\n                        reversed.push(result);\n                    }\n                });\n                return reversed;\n            }\n            if (typeof opentype === 'undefined') {\n                console.warn(\"THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader.\");\n                return null;\n            }\n            return convert(opentype.parse(arraybuffer), this.reversed);\n        }\n    });\n    return TTFLoader;\n});\ndefine('skylark-threejs-ex/loaders/3MFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var ThreeMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.availableExtensions = [];\n    };\n    ThreeMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ThreeMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var scope = this;\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            function loadDocument(data) {\n                var zip = null;\n                var file = null;\n                var relsName;\n                var modelRelsName;\n                var modelPartNames = [];\n                var printTicketPartNames = [];\n                var texturesPartNames = [];\n                var otherPartNames = [];\n                var rels;\n                var modelRels;\n                var modelParts = {};\n                var printTicketParts = {};\n                var texturesParts = {};\n                var otherParts = {};\n                try {\n                    zip = new JSZip(data);\n                } catch (e) {\n                    if (e instanceof ReferenceError) {\n                        console.error('THREE.3MFLoader: jszip missing and file is compressed.');\n                        return null;\n                    }\n                }\n                for (file in zip.files) {\n                    if (file.match(/\\_rels\\/.rels$/)) {\n                        relsName = file;\n                    } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n                        modelRelsName = file;\n                    } else if (file.match(/^3D\\/.*\\.model$/)) {\n                        modelPartNames.push(file);\n                    } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n                        printTicketPartNames.push(file);\n                    } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n                        texturesPartNames.push(file);\n                    } else if (file.match(/^3D\\/Other\\/.*/)) {\n                        otherPartNames.push(file);\n                    }\n                }\n                var relsView = new Uint8Array(zip.file(relsName).asArrayBuffer());\n                var relsFileText = THREE.LoaderUtils.decodeText(relsView);\n                rels = parseRelsXml(relsFileText);\n                if (modelRelsName) {\n                    var relsView = new Uint8Array(zip.file(modelRelsName).asArrayBuffer());\n                    var relsFileText = THREE.LoaderUtils.decodeText(relsView);\n                    modelRels = parseRelsXml(relsFileText);\n                }\n                for (var i = 0; i < modelPartNames.length; i++) {\n                    var modelPart = modelPartNames[i];\n                    var view = new Uint8Array(zip.file(modelPart).asArrayBuffer());\n                    var fileText = THREE.LoaderUtils.decodeText(view);\n                    var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                    if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n                        console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n                    }\n                    var modelNode = xmlData.querySelector('model');\n                    var extensions = {};\n                    for (var i = 0; i < modelNode.attributes.length; i++) {\n                        var attr = modelNode.attributes[i];\n                        if (attr.name.match(/^xmlns:(.+)$/)) {\n                            extensions[attr.value] = RegExp.$1;\n                        }\n                    }\n                    var modelData = parseModelNode(modelNode);\n                    modelData['xml'] = modelNode;\n                    if (0 < Object.keys(extensions).length) {\n                        modelData['extensions'] = extensions;\n                    }\n                    modelParts[modelPart] = modelData;\n                }\n                for (var i = 0; i < texturesPartNames.length; i++) {\n                    var texturesPartName = texturesPartNames[i];\n                    texturesParts[texturesPartName] = zip.file(texturesPartName).asArrayBuffer();\n                }\n                return {\n                    rels: rels,\n                    modelRels: modelRels,\n                    model: modelParts,\n                    printTicket: printTicketParts,\n                    texture: texturesParts,\n                    other: otherParts\n                };\n            }\n            function parseRelsXml(relsFileText) {\n                var relationships = [];\n                var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n                var relsNodes = relsXmlData.querySelectorAll('Relationship');\n                for (var i = 0; i < relsNodes.length; i++) {\n                    var relsNode = relsNodes[i];\n                    var relationship = {\n                        target: relsNode.getAttribute('Target'),\n                        id: relsNode.getAttribute('Id'),\n                        type: relsNode.getAttribute('Type')\n                    };\n                    relationships.push(relationship);\n                }\n                return relationships;\n            }\n            function parseMetadataNodes(metadataNodes) {\n                var metadataData = {};\n                for (var i = 0; i < metadataNodes.length; i++) {\n                    var metadataNode = metadataNodes[i];\n                    var name = metadataNode.getAttribute('name');\n                    var validNames = [\n                        'Title',\n                        'Designer',\n                        'Description',\n                        'Copyright',\n                        'LicenseTerms',\n                        'Rating',\n                        'CreationDate',\n                        'ModificationDate'\n                    ];\n                    if (0 <= validNames.indexOf(name)) {\n                        metadataData[name] = metadataNode.textContent;\n                    }\n                }\n                return metadataData;\n            }\n            function parseBasematerialsNode(basematerialsNode) {\n                var basematerialsData = {\n                    id: basematerialsNode.getAttribute('id'),\n                    basematerials: []\n                };\n                var basematerialNodes = basematerialsNode.querySelectorAll('base');\n                for (var i = 0; i < basematerialNodes.length; i++) {\n                    var basematerialNode = basematerialNodes[i];\n                    var basematerialData = parseBasematerialNode(basematerialNode);\n                    basematerialData.index = i;\n                    basematerialsData.basematerials.push(basematerialData);\n                }\n                return basematerialsData;\n            }\n            function parseTexture2DNode(texture2DNode) {\n                var texture2dData = {\n                    id: texture2DNode.getAttribute('id'),\n                    path: texture2DNode.getAttribute('path'),\n                    contenttype: texture2DNode.getAttribute('contenttype'),\n                    tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n                    tilestylev: texture2DNode.getAttribute('tilestylev'),\n                    filter: texture2DNode.getAttribute('filter')\n                };\n                return texture2dData;\n            }\n            function parseTextures2DGroupNode(texture2DGroupNode) {\n                var texture2DGroupData = {\n                    id: texture2DGroupNode.getAttribute('id'),\n                    texid: texture2DGroupNode.getAttribute('texid'),\n                    displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n                };\n                var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n                var uvs = [];\n                for (var i = 0; i < tex2coordNodes.length; i++) {\n                    var tex2coordNode = tex2coordNodes[i];\n                    var u = tex2coordNode.getAttribute('u');\n                    var v = tex2coordNode.getAttribute('v');\n                    uvs.push(parseFloat(u), parseFloat(v));\n                }\n                texture2DGroupData['uvs'] = new Float32Array(uvs);\n                return texture2DGroupData;\n            }\n            function parseColorGroupNode(colorGroupNode) {\n                var colorGroupData = {\n                    id: colorGroupNode.getAttribute('id'),\n                    displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n                };\n                var colorNodes = colorGroupNode.querySelectorAll('color');\n                var colors = [];\n                var colorObject = new THREE.Color();\n                for (var i = 0; i < colorNodes.length; i++) {\n                    var colorNode = colorNodes[i];\n                    var color = colorNode.getAttribute('color');\n                    colorObject.setStyle(color.substring(0, 7));\n                    colorObject.convertSRGBToLinear();\n                    colors.push(colorObject.r, colorObject.g, colorObject.b);\n                }\n                colorGroupData['colors'] = new Float32Array(colors);\n                return colorGroupData;\n            }\n            function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n                var metallicDisplaypropertiesData = { id: metallicDisplaypropetiesNode.getAttribute('id') };\n                var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n                var metallicData = [];\n                for (var i = 0; i < metallicNodes.length; i++) {\n                    var metallicNode = metallicNodes[i];\n                    metallicData.push({\n                        name: metallicNode.getAttribute('name'),\n                        metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n                        roughness: parseFloat(metallicNode.getAttribute('roughness'))\n                    });\n                }\n                metallicDisplaypropertiesData.data = metallicData;\n                return metallicDisplaypropertiesData;\n            }\n            function parseBasematerialNode(basematerialNode) {\n                var basematerialData = {};\n                basematerialData['name'] = basematerialNode.getAttribute('name');\n                basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor');\n                basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n                return basematerialData;\n            }\n            function parseMeshNode(meshNode) {\n                var meshData = {};\n                var vertices = [];\n                var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n                for (var i = 0; i < vertexNodes.length; i++) {\n                    var vertexNode = vertexNodes[i];\n                    var x = vertexNode.getAttribute('x');\n                    var y = vertexNode.getAttribute('y');\n                    var z = vertexNode.getAttribute('z');\n                    vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n                }\n                meshData['vertices'] = new Float32Array(vertices);\n                var triangleProperties = [];\n                var triangles = [];\n                var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n                for (var i = 0; i < triangleNodes.length; i++) {\n                    var triangleNode = triangleNodes[i];\n                    var v1 = triangleNode.getAttribute('v1');\n                    var v2 = triangleNode.getAttribute('v2');\n                    var v3 = triangleNode.getAttribute('v3');\n                    var p1 = triangleNode.getAttribute('p1');\n                    var p2 = triangleNode.getAttribute('p2');\n                    var p3 = triangleNode.getAttribute('p3');\n                    var pid = triangleNode.getAttribute('pid');\n                    var triangleProperty = {};\n                    triangleProperty['v1'] = parseInt(v1, 10);\n                    triangleProperty['v2'] = parseInt(v2, 10);\n                    triangleProperty['v3'] = parseInt(v3, 10);\n                    triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);\n                    if (p1) {\n                        triangleProperty['p1'] = parseInt(p1, 10);\n                    }\n                    if (p2) {\n                        triangleProperty['p2'] = parseInt(p2, 10);\n                    }\n                    if (p3) {\n                        triangleProperty['p3'] = parseInt(p3, 10);\n                    }\n                    if (pid) {\n                        triangleProperty['pid'] = pid;\n                    }\n                    if (0 < Object.keys(triangleProperty).length) {\n                        triangleProperties.push(triangleProperty);\n                    }\n                }\n                meshData['triangleProperties'] = triangleProperties;\n                meshData['triangles'] = new Uint32Array(triangles);\n                return meshData;\n            }\n            function parseComponentsNode(componentsNode) {\n                var components = [];\n                var componentNodes = componentsNode.querySelectorAll('component');\n                for (var i = 0; i < componentNodes.length; i++) {\n                    var componentNode = componentNodes[i];\n                    var componentData = parseComponentNode(componentNode);\n                    components.push(componentData);\n                }\n                return components;\n            }\n            function parseComponentNode(componentNode) {\n                var componentData = {};\n                componentData['objectId'] = componentNode.getAttribute('objectid');\n                var transform = componentNode.getAttribute('transform');\n                if (transform) {\n                    componentData['transform'] = parseTransform(transform);\n                }\n                return componentData;\n            }\n            function parseTransform(transform) {\n                var t = [];\n                transform.split(' ').forEach(function (s) {\n                    t.push(parseFloat(s));\n                });\n                var matrix = new THREE.Matrix4();\n                matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n                return matrix;\n            }\n            function parseObjectNode(objectNode) {\n                var objectData = { type: objectNode.getAttribute('type') };\n                var id = objectNode.getAttribute('id');\n                if (id) {\n                    objectData['id'] = id;\n                }\n                var pid = objectNode.getAttribute('pid');\n                if (pid) {\n                    objectData['pid'] = pid;\n                }\n                var pindex = objectNode.getAttribute('pindex');\n                if (pindex) {\n                    objectData['pindex'] = pindex;\n                }\n                var thumbnail = objectNode.getAttribute('thumbnail');\n                if (thumbnail) {\n                    objectData['thumbnail'] = thumbnail;\n                }\n                var partnumber = objectNode.getAttribute('partnumber');\n                if (partnumber) {\n                    objectData['partnumber'] = partnumber;\n                }\n                var name = objectNode.getAttribute('name');\n                if (name) {\n                    objectData['name'] = name;\n                }\n                var meshNode = objectNode.querySelector('mesh');\n                if (meshNode) {\n                    objectData['mesh'] = parseMeshNode(meshNode);\n                }\n                var componentsNode = objectNode.querySelector('components');\n                if (componentsNode) {\n                    objectData['components'] = parseComponentsNode(componentsNode);\n                }\n                return objectData;\n            }\n            function parseResourcesNode(resourcesNode) {\n                var resourcesData = {};\n                resourcesData['basematerials'] = {};\n                var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n                for (var i = 0; i < basematerialsNodes.length; i++) {\n                    var basematerialsNode = basematerialsNodes[i];\n                    var basematerialsData = parseBasematerialsNode(basematerialsNode);\n                    resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n                }\n                resourcesData['texture2d'] = {};\n                var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n                for (var i = 0; i < textures2DNodes.length; i++) {\n                    var textures2DNode = textures2DNodes[i];\n                    var texture2DData = parseTexture2DNode(textures2DNode);\n                    resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n                }\n                resourcesData['colorgroup'] = {};\n                var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n                for (var i = 0; i < colorGroupNodes.length; i++) {\n                    var colorGroupNode = colorGroupNodes[i];\n                    var colorGroupData = parseColorGroupNode(colorGroupNode);\n                    resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n                }\n                resourcesData['pbmetallicdisplayproperties'] = {};\n                var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n                for (var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n                    var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n                    var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n                    resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n                }\n                resourcesData['texture2dgroup'] = {};\n                var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n                for (var i = 0; i < textures2DGroupNodes.length; i++) {\n                    var textures2DGroupNode = textures2DGroupNodes[i];\n                    var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n                    resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n                }\n                resourcesData['object'] = {};\n                var objectNodes = resourcesNode.querySelectorAll('object');\n                for (var i = 0; i < objectNodes.length; i++) {\n                    var objectNode = objectNodes[i];\n                    var objectData = parseObjectNode(objectNode);\n                    resourcesData['object'][objectData['id']] = objectData;\n                }\n                return resourcesData;\n            }\n            function parseBuildNode(buildNode) {\n                var buildData = [];\n                var itemNodes = buildNode.querySelectorAll('item');\n                for (var i = 0; i < itemNodes.length; i++) {\n                    var itemNode = itemNodes[i];\n                    var buildItem = { objectId: itemNode.getAttribute('objectid') };\n                    var transform = itemNode.getAttribute('transform');\n                    if (transform) {\n                        buildItem['transform'] = parseTransform(transform);\n                    }\n                    buildData.push(buildItem);\n                }\n                return buildData;\n            }\n            function parseModelNode(modelNode) {\n                var modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' };\n                var metadataNodes = modelNode.querySelectorAll('metadata');\n                if (metadataNodes) {\n                    modelData['metadata'] = parseMetadataNodes(metadataNodes);\n                }\n                var resourcesNode = modelNode.querySelector('resources');\n                if (resourcesNode) {\n                    modelData['resources'] = parseResourcesNode(resourcesNode);\n                }\n                var buildNode = modelNode.querySelector('build');\n                if (buildNode) {\n                    modelData['build'] = parseBuildNode(buildNode);\n                }\n                return modelData;\n            }\n            function buildTexture(texture2dgroup, objects, modelData, textureData) {\n                var texid = texture2dgroup.texid;\n                var texture2ds = modelData.resources.texture2d;\n                var texture2d = texture2ds[texid];\n                if (texture2d) {\n                    var data = textureData[texture2d.path];\n                    var type = texture2d.contenttype;\n                    var blob = new Blob([data], { type: type });\n                    var sourceURI = URL.createObjectURL(blob);\n                    var texture = textureLoader.load(sourceURI, function () {\n                        URL.revokeObjectURL(sourceURI);\n                    });\n                    texture.encoding = THREE.sRGBEncoding;\n                    switch (texture2d.tilestyleu) {\n                    case 'wrap':\n                        texture.wrapS = THREE.RepeatWrapping;\n                        break;\n                    case 'mirror':\n                        texture.wrapS = THREE.MirroredRepeatWrapping;\n                        break;\n                    case 'none':\n                    case 'clamp':\n                        texture.wrapS = THREE.ClampToEdgeWrapping;\n                        break;\n                    default:\n                        texture.wrapS = THREE.RepeatWrapping;\n                    }\n                    switch (texture2d.tilestylev) {\n                    case 'wrap':\n                        texture.wrapT = THREE.RepeatWrapping;\n                        break;\n                    case 'mirror':\n                        texture.wrapT = THREE.MirroredRepeatWrapping;\n                        break;\n                    case 'none':\n                    case 'clamp':\n                        texture.wrapT = THREE.ClampToEdgeWrapping;\n                        break;\n                    default:\n                        texture.wrapT = THREE.RepeatWrapping;\n                    }\n                    switch (texture2d.filter) {\n                    case 'auto':\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\n                        break;\n                    case 'linear':\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearFilter;\n                        break;\n                    case 'nearest':\n                        texture.magFilter = THREE.NearestFilter;\n                        texture.minFilter = THREE.NearestFilter;\n                        break;\n                    default:\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\n                    }\n                    return texture;\n                } else {\n                    return null;\n                }\n            }\n            function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n                var objectPindex = objectData.pindex;\n                var materialMap = {};\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n                    if (materialMap[pindex] === undefined)\n                        materialMap[pindex] = [];\n                    materialMap[pindex].push(triangleProperty);\n                }\n                var keys = Object.keys(materialMap);\n                var meshes = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var materialIndex = keys[i];\n                    var trianglePropertiesProps = materialMap[materialIndex];\n                    var basematerialData = basematerials.basematerials[materialIndex];\n                    var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);\n                    var geometry = new THREE.BufferGeometry();\n                    var positionData = [];\n                    var vertices = meshData.vertices;\n                    for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n                        var triangleProperty = trianglePropertiesProps[j];\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                    var mesh = new THREE.Mesh(geometry, material);\n                    meshes.push(mesh);\n                }\n                return meshes;\n            }\n            function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n                var geometry = new THREE.BufferGeometry();\n                var positionData = [];\n                var uvData = [];\n                var vertices = meshData.vertices;\n                var uvs = texture2dgroup.uvs;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvData, 2));\n                var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n                var material = new THREE.MeshPhongMaterial({\n                    map: texture,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData) {\n                var geometry = new THREE.BufferGeometry();\n                var positionData = [];\n                var colorData = [];\n                var vertices = meshData.vertices;\n                var colors = colorgroup.colors;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var v1 = triangleProperty.v1;\n                    var v2 = triangleProperty.v2;\n                    var v3 = triangleProperty.v3;\n                    positionData.push(vertices[v1 * 3 + 0]);\n                    positionData.push(vertices[v1 * 3 + 1]);\n                    positionData.push(vertices[v1 * 3 + 2]);\n                    positionData.push(vertices[v2 * 3 + 0]);\n                    positionData.push(vertices[v2 * 3 + 1]);\n                    positionData.push(vertices[v2 * 3 + 2]);\n                    positionData.push(vertices[v3 * 3 + 0]);\n                    positionData.push(vertices[v3 * 3 + 1]);\n                    positionData.push(vertices[v3 * 3 + 2]);\n                    var p1 = triangleProperty.p1;\n                    var p2 = triangleProperty.p2;\n                    var p3 = triangleProperty.p3;\n                    colorData.push(colors[p1 * 3 + 0]);\n                    colorData.push(colors[p1 * 3 + 1]);\n                    colorData.push(colors[p1 * 3 + 2]);\n                    colorData.push(colors[(p2 || p1) * 3 + 0]);\n                    colorData.push(colors[(p2 || p1) * 3 + 1]);\n                    colorData.push(colors[(p2 || p1) * 3 + 2]);\n                    colorData.push(colors[(p3 || p1) * 3 + 0]);\n                    colorData.push(colors[(p3 || p1) * 3 + 1]);\n                    colorData.push(colors[(p3 || p1) * 3 + 2]);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorData, 3));\n                var material = new THREE.MeshPhongMaterial({\n                    vertexColors: true,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildDefaultMesh(meshData) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(new THREE.BufferAttribute(meshData['triangles'], 1));\n                geometry.setAttribute('position', new THREE.BufferAttribute(meshData['vertices'], 3));\n                var material = new THREE.MeshPhongMaterial({\n                    color: 11184895,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n                var keys = Object.keys(resourceMap);\n                var meshes = [];\n                for (var i = 0, il = keys.length; i < il; i++) {\n                    var resourceId = keys[i];\n                    var triangleProperties = resourceMap[resourceId];\n                    var resourceType = getResourceType(resourceId, modelData);\n                    switch (resourceType) {\n                    case 'material':\n                        var basematerials = modelData.resources.basematerials[resourceId];\n                        var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n                        for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                            meshes.push(newMeshes[j]);\n                        }\n                        break;\n                    case 'texture':\n                        var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n                        meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n                        break;\n                    case 'vertexColors':\n                        var colorgroup = modelData.resources.colorgroup[resourceId];\n                        meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData));\n                        break;\n                    case 'default':\n                        meshes.push(buildDefaultMesh(meshData));\n                        break;\n                    default:\n                        console.error('THREE.3MFLoader: Unsupported resource type.');\n                    }\n                }\n                return meshes;\n            }\n            function getResourceType(pid, modelData) {\n                if (modelData.resources.texture2dgroup[pid] !== undefined) {\n                    return 'texture';\n                } else if (modelData.resources.basematerials[pid] !== undefined) {\n                    return 'material';\n                } else if (modelData.resources.colorgroup[pid] !== undefined) {\n                    return 'vertexColors';\n                } else if (pid === 'default') {\n                    return 'default';\n                } else {\n                    return undefined;\n                }\n            }\n            function analyzeObject(modelData, meshData, objectData) {\n                var resourceMap = {};\n                var triangleProperties = meshData['triangleProperties'];\n                var objectPid = objectData.pid;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n                    if (pid === undefined)\n                        pid = 'default';\n                    if (resourceMap[pid] === undefined)\n                        resourceMap[pid] = [];\n                    resourceMap[pid].push(triangleProperty);\n                }\n                return resourceMap;\n            }\n            function buildGroup(meshData, objects, modelData, textureData, objectData) {\n                var group = new THREE.Group();\n                var resourceMap = analyzeObject(modelData, meshData, objectData);\n                var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n                for (var i = 0, l = meshes.length; i < l; i++) {\n                    group.add(meshes[i]);\n                }\n                return group;\n            }\n            function applyExtensions(extensions, meshData, modelXml) {\n                if (!extensions) {\n                    return;\n                }\n                var availableExtensions = [];\n                var keys = Object.keys(extensions);\n                for (var i = 0; i < keys.length; i++) {\n                    var ns = keys[i];\n                    for (var j = 0; j < scope.availableExtensions.length; j++) {\n                        var extension = scope.availableExtensions[j];\n                        if (extension.ns === ns) {\n                            availableExtensions.push(extension);\n                        }\n                    }\n                }\n                for (var i = 0; i < availableExtensions.length; i++) {\n                    var extension = availableExtensions[i];\n                    extension.apply(modelXml, extensions[extension['ns']], meshData);\n                }\n            }\n            function getBuild(data, objects, modelData, textureData, objectData, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data, objects, modelData, textureData, objectData);\n                return data.build;\n            }\n            function buildBasematerial(materialData, objects, modelData) {\n                var material;\n                var displaypropertiesid = materialData.displaypropertiesid;\n                var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n                if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n                    var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n                    var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n                    material = new THREE.MeshStandardMaterial({\n                        flatShading: true,\n                        roughness: metallicData.roughness,\n                        metalness: metallicData.metallicness\n                    });\n                } else {\n                    material = new THREE.MeshPhongMaterial({ flatShading: true });\n                }\n                material.name = materialData.name;\n                var displaycolor = materialData.displaycolor;\n                var color = displaycolor.substring(0, 7);\n                material.color.setStyle(color);\n                material.color.convertSRGBToLinear();\n                if (displaycolor.length === 9) {\n                    material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n                }\n                return material;\n            }\n            function buildComposite(compositeData, objects, modelData, textureData) {\n                var composite = new THREE.Group();\n                for (var j = 0; j < compositeData.length; j++) {\n                    var component = compositeData[j];\n                    var build = objects[component.objectId];\n                    if (build === undefined) {\n                        buildObject(component.objectId, objects, modelData, textureData);\n                        build = objects[component.objectId];\n                    }\n                    var object3D = build.clone();\n                    var transform = component.transform;\n                    if (transform) {\n                        object3D.applyMatrix4(transform);\n                    }\n                    composite.add(object3D);\n                }\n                return composite;\n            }\n            function buildObject(objectId, objects, modelData, textureData) {\n                var objectData = modelData['resources']['object'][objectId];\n                if (objectData['mesh']) {\n                    var meshData = objectData['mesh'];\n                    var extensions = modelData['extensions'];\n                    var modelXml = modelData['xml'];\n                    applyExtensions(extensions, meshData, modelXml);\n                    objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n                } else {\n                    var compositeData = objectData['components'];\n                    objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n                }\n            }\n            function buildObjects(data3mf) {\n                var modelsData = data3mf.model;\n                var modelRels = data3mf.modelRels;\n                var objects = {};\n                var modelsKeys = Object.keys(modelsData);\n                var textureData = {};\n                if (modelRels) {\n                    for (var i = 0, l = modelRels.length; i < l; i++) {\n                        var modelRel = modelRels[i];\n                        var textureKey = modelRel.target.substring(1);\n                        if (data3mf.texture[textureKey]) {\n                            textureData[modelRel.target] = data3mf.texture[textureKey];\n                        }\n                    }\n                }\n                for (var i = 0; i < modelsKeys.length; i++) {\n                    var modelsKey = modelsKeys[i];\n                    var modelData = modelsData[modelsKey];\n                    var objectIds = Object.keys(modelData['resources']['object']);\n                    for (var j = 0; j < objectIds.length; j++) {\n                        var objectId = objectIds[j];\n                        buildObject(objectId, objects, modelData, textureData);\n                    }\n                }\n                return objects;\n            }\n            function build(objects, data3mf) {\n                var group = new THREE.Group();\n                var relationship = data3mf['rels'][0];\n                var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n                for (var i = 0; i < buildData.length; i++) {\n                    var buildItem = buildData[i];\n                    var object3D = objects[buildItem['objectId']];\n                    var transform = buildItem['transform'];\n                    if (transform) {\n                        object3D.applyMatrix4(transform);\n                    }\n                    group.add(object3D);\n                }\n                return group;\n            }\n            var data3mf = loadDocument(data);\n            var objects = buildObjects(data3mf);\n            return build(objects, data3mf);\n        },\n        addExtension: function (extension) {\n            this.availableExtensions.push(extension);\n        }\n    });\n    return ThreeMFLoader;\n});\ndefine('skylark-threejs-ex/loaders/AMFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function loadDocument(data) {\n                var view = new DataView(data);\n                var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n                if (magic === 'PK') {\n                    var zip = null;\n                    var file = null;\n                    console.log('THREE.AMFLoader: Loading Zip');\n                    try {\n                        zip = new JSZip(data);\n                    } catch (e) {\n                        if (e instanceof ReferenceError) {\n                            console.log('THREE.AMFLoader: jszip missing and file is compressed.');\n                            return null;\n                        }\n                    }\n                    for (file in zip.files) {\n                        if (file.toLowerCase().substr(-4) === '.amf') {\n                            break;\n                        }\n                    }\n                    console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n                    view = new DataView(zip.file(file).asArrayBuffer());\n                }\n                var fileText = THREE.LoaderUtils.decodeText(view);\n                var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n                    console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n                    return null;\n                }\n                return xmlData;\n            }\n            function loadDocumentScale(node) {\n                var scale = 1;\n                var unit = 'millimeter';\n                if (node.documentElement.attributes.unit !== undefined) {\n                    unit = node.documentElement.attributes.unit.value.toLowerCase();\n                }\n                var scaleUnits = {\n                    millimeter: 1,\n                    inch: 25.4,\n                    feet: 304.8,\n                    meter: 1000,\n                    micron: 0.001\n                };\n                if (scaleUnits[unit] !== undefined) {\n                    scale = scaleUnits[unit];\n                }\n                console.log('THREE.AMFLoader: Unit scale: ' + scale);\n                return scale;\n            }\n            function loadMaterials(node) {\n                var matName = 'AMF Material';\n                var matId = node.attributes.id.textContent;\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                var loadedMaterial = null;\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matChildEl = node.childNodes[i];\n                    if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n                        if (matChildEl.attributes.type.value === 'name') {\n                            matName = matChildEl.textContent;\n                        }\n                    } else if (matChildEl.nodeName === 'color') {\n                        color = loadColor(matChildEl);\n                    }\n                }\n                loadedMaterial = new THREE.MeshPhongMaterial({\n                    flatShading: true,\n                    color: new THREE.Color(color.r, color.g, color.b),\n                    name: matName\n                });\n                if (color.a !== 1) {\n                    loadedMaterial.transparent = true;\n                    loadedMaterial.opacity = color.a;\n                }\n                return {\n                    id: matId,\n                    material: loadedMaterial\n                };\n            }\n            function loadColor(node) {\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matColor = node.childNodes[i];\n                    if (matColor.nodeName === 'r') {\n                        color.r = matColor.textContent;\n                    } else if (matColor.nodeName === 'g') {\n                        color.g = matColor.textContent;\n                    } else if (matColor.nodeName === 'b') {\n                        color.b = matColor.textContent;\n                    } else if (matColor.nodeName === 'a') {\n                        color.a = matColor.textContent;\n                    }\n                }\n                return color;\n            }\n            function loadMeshVolume(node) {\n                var volume = {\n                    name: '',\n                    triangles: [],\n                    materialid: null\n                };\n                var currVolumeNode = node.firstElementChild;\n                if (node.attributes.materialid !== undefined) {\n                    volume.materialId = node.attributes.materialid.nodeValue;\n                }\n                while (currVolumeNode) {\n                    if (currVolumeNode.nodeName === 'metadata') {\n                        if (currVolumeNode.attributes.type !== undefined) {\n                            if (currVolumeNode.attributes.type.value === 'name') {\n                                volume.name = currVolumeNode.textContent;\n                            }\n                        }\n                    } else if (currVolumeNode.nodeName === 'triangle') {\n                        var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n                        var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n                        var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n                        volume.triangles.push(v1, v2, v3);\n                    }\n                    currVolumeNode = currVolumeNode.nextElementSibling;\n                }\n                return volume;\n            }\n            function loadMeshVertices(node) {\n                var vertArray = [];\n                var normalArray = [];\n                var currVerticesNode = node.firstElementChild;\n                while (currVerticesNode) {\n                    if (currVerticesNode.nodeName === 'vertex') {\n                        var vNode = currVerticesNode.firstElementChild;\n                        while (vNode) {\n                            if (vNode.nodeName === 'coordinates') {\n                                var x = vNode.getElementsByTagName('x')[0].textContent;\n                                var y = vNode.getElementsByTagName('y')[0].textContent;\n                                var z = vNode.getElementsByTagName('z')[0].textContent;\n                                vertArray.push(x, y, z);\n                            } else if (vNode.nodeName === 'normal') {\n                                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                                normalArray.push(nx, ny, nz);\n                            }\n                            vNode = vNode.nextElementSibling;\n                        }\n                    }\n                    currVerticesNode = currVerticesNode.nextElementSibling;\n                }\n                return {\n                    'vertices': vertArray,\n                    'normals': normalArray\n                };\n            }\n            function loadObject(node) {\n                var objId = node.attributes.id.textContent;\n                var loadedObject = {\n                    name: 'amfobject',\n                    meshes: []\n                };\n                var currColor = null;\n                var currObjNode = node.firstElementChild;\n                while (currObjNode) {\n                    if (currObjNode.nodeName === 'metadata') {\n                        if (currObjNode.attributes.type !== undefined) {\n                            if (currObjNode.attributes.type.value === 'name') {\n                                loadedObject.name = currObjNode.textContent;\n                            }\n                        }\n                    } else if (currObjNode.nodeName === 'color') {\n                        currColor = loadColor(currObjNode);\n                    } else if (currObjNode.nodeName === 'mesh') {\n                        var currMeshNode = currObjNode.firstElementChild;\n                        var mesh = {\n                            vertices: [],\n                            normals: [],\n                            volumes: [],\n                            color: currColor\n                        };\n                        while (currMeshNode) {\n                            if (currMeshNode.nodeName === 'vertices') {\n                                var loadedVertices = loadMeshVertices(currMeshNode);\n                                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n                            } else if (currMeshNode.nodeName === 'volume') {\n                                mesh.volumes.push(loadMeshVolume(currMeshNode));\n                            }\n                            currMeshNode = currMeshNode.nextElementSibling;\n                        }\n                        loadedObject.meshes.push(mesh);\n                    }\n                    currObjNode = currObjNode.nextElementSibling;\n                }\n                return {\n                    'id': objId,\n                    'obj': loadedObject\n                };\n            }\n            var xmlData = loadDocument(data);\n            var amfName = '';\n            var amfAuthor = '';\n            var amfScale = loadDocumentScale(xmlData);\n            var amfMaterials = {};\n            var amfObjects = {};\n            var childNodes = xmlData.documentElement.childNodes;\n            var i, j;\n            for (i = 0; i < childNodes.length; i++) {\n                var child = childNodes[i];\n                if (child.nodeName === 'metadata') {\n                    if (child.attributes.type !== undefined) {\n                        if (child.attributes.type.value === 'name') {\n                            amfName = child.textContent;\n                        } else if (child.attributes.type.value === 'author') {\n                            amfAuthor = child.textContent;\n                        }\n                    }\n                } else if (child.nodeName === 'material') {\n                    var loadedMaterial = loadMaterials(child);\n                    amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n                } else if (child.nodeName === 'object') {\n                    var loadedObject = loadObject(child);\n                    amfObjects[loadedObject.id] = loadedObject.obj;\n                }\n            }\n            var sceneObject = new THREE.Group();\n            var defaultMaterial = new THREE.MeshPhongMaterial({\n                color: 11184895,\n                flatShading: true\n            });\n            sceneObject.name = amfName;\n            sceneObject.userData.author = amfAuthor;\n            sceneObject.userData.loader = 'AMF';\n            for (var id in amfObjects) {\n                var part = amfObjects[id];\n                var meshes = part.meshes;\n                var newObject = new THREE.Group();\n                newObject.name = part.name || '';\n                for (i = 0; i < meshes.length; i++) {\n                    var objDefaultMaterial = defaultMaterial;\n                    var mesh = meshes[i];\n                    var vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);\n                    var normals = null;\n                    if (mesh.normals.length) {\n                        normals = new THREE.Float32BufferAttribute(mesh.normals, 3);\n                    }\n                    if (mesh.color) {\n                        var color = mesh.color;\n                        objDefaultMaterial = defaultMaterial.clone();\n                        objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);\n                        if (color.a !== 1) {\n                            objDefaultMaterial.transparent = true;\n                            objDefaultMaterial.opacity = color.a;\n                        }\n                    }\n                    var volumes = mesh.volumes;\n                    for (j = 0; j < volumes.length; j++) {\n                        var volume = volumes[j];\n                        var newGeometry = new THREE.BufferGeometry();\n                        var material = objDefaultMaterial;\n                        newGeometry.setIndex(volume.triangles);\n                        newGeometry.setAttribute('position', vertices.clone());\n                        if (normals) {\n                            newGeometry.setAttribute('normal', normals.clone());\n                        }\n                        if (amfMaterials[volume.materialId] !== undefined) {\n                            material = amfMaterials[volume.materialId];\n                        }\n                        newGeometry.scale(amfScale, amfScale, amfScale);\n                        newObject.add(new THREE.Mesh(newGeometry, material.clone()));\n                    }\n                }\n                sceneObject.add(newObject);\n            }\n            return sceneObject;\n        }\n    });\n\n    return AMFLoader;\n});\ndefine('skylark-threejs-ex/loaders/AssimpLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AssimpLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AssimpLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AssimpLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer, path));\n            }, onProgress, onError);\n        },\n        parse: function (buffer, path) {\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var Virtulous = {};\n            Virtulous.KeyFrame = function (time, matrix) {\n                this.time = time;\n                this.matrix = matrix.clone();\n                this.position = new THREE.Vector3();\n                this.quaternion = new THREE.Quaternion();\n                this.scale = new THREE.Vector3(1, 1, 1);\n                this.matrix.decompose(this.position, this.quaternion, this.scale);\n                this.clone = function () {\n                    var n = new Virtulous.KeyFrame(this.time, this.matrix);\n                    return n;\n                };\n                this.lerp = function (nextKey, time) {\n                    time -= this.time;\n                    var dist = nextKey.time - this.time;\n                    var l = time / dist;\n                    var l2 = 1 - l;\n                    var keypos = this.position;\n                    var keyrot = this.quaternion;\n                    var key2pos = nextKey.position;\n                    var key2rot = nextKey.quaternion;\n                    Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n                    Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n                    Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n                    Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n                    Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n                    return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n                };\n            };\n            Virtulous.KeyFrame.tempAniPos = new THREE.Vector3();\n            Virtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();\n            Virtulous.KeyFrame.tempAniScale = new THREE.Vector3(1, 1, 1);\n            Virtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();\n            Virtulous.KeyFrameTrack = function () {\n                this.keys = [];\n                this.target = null;\n                this.time = 0;\n                this.length = 0;\n                this._accelTable = {};\n                this.fps = 20;\n                this.addKey = function (key) {\n                    this.keys.push(key);\n                };\n                this.init = function () {\n                    this.sortKeys();\n                    if (this.keys.length > 0)\n                        this.length = this.keys[this.keys.length - 1].time;\n                    else\n                        this.length = 0;\n                    if (!this.fps)\n                        return;\n                    for (var j = 0; j < this.length * this.fps; j++) {\n                        for (var i = 0; i < this.keys.length; i++) {\n                            if (this.keys[i].time == j) {\n                                this._accelTable[j] = i;\n                                break;\n                            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n                                this._accelTable[j] = i;\n                                break;\n                            }\n                        }\n                    }\n                };\n                this.parseFromThree = function (data) {\n                    var fps = data.fps;\n                    this.target = data.node;\n                    var track = data.hierarchy[0].keys;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n                    }\n                    this.init();\n                };\n                this.parseFromCollada = function (data) {\n                    var track = data.keys;\n                    var fps = this.fps;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n                    }\n                    this.init();\n                };\n                this.sortKeys = function () {\n                    this.keys.sort(this.keySortFunc);\n                };\n                this.keySortFunc = function (a, b) {\n                    return a.time - b.time;\n                };\n                this.clone = function () {\n                    var t = new Virtulous.KeyFrameTrack();\n                    t.target = this.target;\n                    t.time = this.time;\n                    t.length = this.length;\n                    for (var i = 0; i < this.keys.length; i++) {\n                        t.addKey(this.keys[i].clone());\n                    }\n                    t.init();\n                    return t;\n                };\n                this.reTarget = function (root, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    this.target = compareitor(root, this.target);\n                };\n                this.keySearchAccel = function (time) {\n                    time *= this.fps;\n                    time = Math.floor(time);\n                    return this._accelTable[time] || 0;\n                };\n                this.setTime = function (time) {\n                    time = Math.abs(time);\n                    if (this.length)\n                        time = time % this.length + 0.05;\n                    var key0 = null;\n                    var key1 = null;\n                    for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {\n                        if (this.keys[i].time == time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i];\n                            break;\n                        } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i + 1];\n                            break;\n                        } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[0].clone();\n                            key1.time += this.length + 0.05;\n                            break;\n                        }\n                    }\n                    if (key0 && key1 && key0 !== key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.lerp(key1, time));\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                    if (key0 && key1 && key0 == key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.matrix);\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                };\n            };\n            Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n                function find(node, name) {\n                    if (node.name == name)\n                        return node;\n                    for (var i = 0; i < node.children.length; i++) {\n                        var r = find(node.children[i], name);\n                        if (r)\n                            return r;\n                    }\n                    return null;\n                }\n                return find(root, target.name);\n            };\n            Virtulous.Animation = function () {\n                this.tracks = [];\n                this.length = 0;\n                this.addTrack = function (track) {\n                    this.tracks.push(track);\n                    this.length = Math.max(track.length, this.length);\n                };\n                this.setTime = function (time) {\n                    this.time = time;\n                    for (var i = 0; i < this.tracks.length; i++)\n                        this.tracks[i].setTime(time);\n                };\n                this.clone = function (target, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    var n = new Virtulous.Animation();\n                    n.target = target;\n                    for (var i = 0; i < this.tracks.length; i++) {\n                        var track = this.tracks[i].clone();\n                        track.reTarget(target, compareitor);\n                        n.addTrack(track);\n                    }\n                    return n;\n                };\n            };\n            var ASSBIN_CHUNK_AICAMERA = 4660;\n            var ASSBIN_CHUNK_AILIGHT = 4661;\n            var ASSBIN_CHUNK_AITEXTURE = 4662;\n            var ASSBIN_CHUNK_AIMESH = 4663;\n            var ASSBIN_CHUNK_AINODEANIM = 4664;\n            var ASSBIN_CHUNK_AISCENE = 4665;\n            var ASSBIN_CHUNK_AIBONE = 4666;\n            var ASSBIN_CHUNK_AIANIMATION = 4667;\n            var ASSBIN_CHUNK_AINODE = 4668;\n            var ASSBIN_CHUNK_AIMATERIAL = 4669;\n            var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n            var ASSBIN_MESH_HAS_POSITIONS = 1;\n            var ASSBIN_MESH_HAS_NORMALS = 2;\n            var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n            var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n            var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n            var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n            var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n            var aiLightSource_DIRECTIONAL = 1;\n            var aiLightSource_SPOT = 3;\n            var aiTextureType_DIFFUSE = 1;\n            var aiTextureType_NORMALS = 6;\n            var aiTextureType_OPACITY = 8;\n            var aiTextureType_LIGHTMAP = 10;\n            var BONESPERVERT = 4;\n            function ASSBIN_MESH_HAS_TEXCOORD(n) {\n                return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n            }\n            function ASSBIN_MESH_HAS_COLOR(n) {\n                return ASSBIN_MESH_HAS_COLOR_BASE << n;\n            }\n            function markBones(scene) {\n                for (var i in scene.mMeshes) {\n                    var mesh = scene.mMeshes[i];\n                    for (var k in mesh.mBones) {\n                        var boneNode = scene.findNode(mesh.mBones[k].mName);\n                        if (boneNode)\n                            boneNode.isBone = true;\n                    }\n                }\n            }\n            function cloneTreeToBones(root, scene) {\n                var rootBone = new THREE.Bone();\n                rootBone.matrix.copy(root.matrix);\n                rootBone.matrixWorld.copy(root.matrixWorld);\n                rootBone.position.copy(root.position);\n                rootBone.quaternion.copy(root.quaternion);\n                rootBone.scale.copy(root.scale);\n                scene.nodeCount++;\n                rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();\n                if (!scene.nodeToBoneMap[root.name])\n                    scene.nodeToBoneMap[root.name] = [];\n                scene.nodeToBoneMap[root.name].push(rootBone);\n                for (var i in root.children) {\n                    var child = cloneTreeToBones(root.children[i], scene);\n                    rootBone.add(child);\n                }\n                return rootBone;\n            }\n            function sortWeights(indexes, weights) {\n                var pairs = [];\n                for (var i = 0; i < indexes.length; i++) {\n                    pairs.push({\n                        i: indexes[i],\n                        w: weights[i]\n                    });\n                }\n                pairs.sort(function (a, b) {\n                    return b.w - a.w;\n                });\n                while (pairs.length < 4) {\n                    pairs.push({\n                        i: 0,\n                        w: 0\n                    });\n                }\n                if (pairs.length > 4)\n                    pairs.length = 4;\n                var sum = 0;\n                for (var i = 0; i < 4; i++) {\n                    sum += pairs[i].w * pairs[i].w;\n                }\n                sum = Math.sqrt(sum);\n                for (var i = 0; i < 4; i++) {\n                    pairs[i].w = pairs[i].w / sum;\n                    indexes[i] = pairs[i].i;\n                    weights[i] = pairs[i].w;\n                }\n            }\n            function findMatchingBone(root, name) {\n                if (root.name.indexOf('bone_' + name) == 0)\n                    return root;\n                for (var i in root.children) {\n                    var ret = findMatchingBone(root.children[i], name);\n                    if (ret)\n                        return ret;\n                }\n                return undefined;\n            }\n            function aiMesh() {\n                this.mPrimitiveTypes = 0;\n                this.mNumVertices = 0;\n                this.mNumFaces = 0;\n                this.mNumBones = 0;\n                this.mMaterialIndex = 0;\n                this.mVertices = [];\n                this.mNormals = [];\n                this.mTangents = [];\n                this.mBitangents = [];\n                this.mColors = [[]];\n                this.mTextureCoords = [[]];\n                this.mFaces = [];\n                this.mBones = [];\n                this.hookupSkeletons = function (scene) {\n                    if (this.mBones.length == 0)\n                        return;\n                    var allBones = [];\n                    var offsetMatrix = [];\n                    var skeletonRoot = scene.findNode(this.mBones[0].mName);\n                    while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n                        skeletonRoot = skeletonRoot.mParent;\n                    }\n                    var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                    var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                    this.threeNode.add(threeSkeletonRootBone);\n                    for (var i = 0; i < this.mBones.length; i++) {\n                        var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                        if (bone) {\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        } else {\n                            var skeletonRoot = scene.findNode(this.mBones[i].mName);\n                            if (!skeletonRoot)\n                                return;\n                            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                            this.threeNode.add(threeSkeletonRootBone);\n                            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        }\n                    }\n                    var skeleton = new THREE.Skeleton(allBones, offsetMatrix);\n                    this.threeNode.bind(skeleton, new THREE.Matrix4());\n                    this.threeNode.material.skinning = true;\n                };\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var geometry = new THREE.BufferGeometry();\n                    var mat;\n                    if (scene.mMaterials[this.mMaterialIndex])\n                        mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);\n                    else\n                        mat = new THREE.MeshLambertMaterial();\n                    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(this.mVertexBuffer, 3));\n                    if (this.mNormalBuffer && this.mNormalBuffer.length > 0)\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(this.mNormalBuffer, 3));\n                    if (this.mColorBuffer && this.mColorBuffer.length > 0)\n                        geometry.setAttribute('color', new THREE.BufferAttribute(this.mColorBuffer, 4));\n                    if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0)\n                        geometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n                    if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0)\n                        geometry.setAttribute('uv1', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n                    if (this.mTangentBuffer && this.mTangentBuffer.length > 0)\n                        geometry.setAttribute('tangents', new THREE.BufferAttribute(this.mTangentBuffer, 3));\n                    if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0)\n                        geometry.setAttribute('bitangents', new THREE.BufferAttribute(this.mBitangentBuffer, 3));\n                    if (this.mBones.length > 0) {\n                        var weights = [];\n                        var bones = [];\n                        for (var i = 0; i < this.mBones.length; i++) {\n                            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {\n                                var weight = this.mBones[i].mWeights[j];\n                                if (weight) {\n                                    if (!weights[weight.mVertexId])\n                                        weights[weight.mVertexId] = [];\n                                    if (!bones[weight.mVertexId])\n                                        bones[weight.mVertexId] = [];\n                                    weights[weight.mVertexId].push(weight.mWeight);\n                                    bones[weight.mVertexId].push(parseInt(i));\n                                }\n                            }\n                        }\n                        for (var i in bones) {\n                            sortWeights(bones[i], weights[i]);\n                        }\n                        var _weights = [];\n                        var _bones = [];\n                        for (var i = 0; i < weights.length; i++) {\n                            for (var j = 0; j < 4; j++) {\n                                if (weights[i] && bones[i]) {\n                                    _weights.push(weights[i][j]);\n                                    _bones.push(bones[i][j]);\n                                } else {\n                                    _weights.push(0);\n                                    _bones.push(0);\n                                }\n                            }\n                        }\n                        geometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n                        geometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n                    }\n                    var mesh;\n                    if (this.mBones.length == 0)\n                        mesh = new THREE.Mesh(geometry, mat);\n                    if (this.mBones.length > 0) {\n                        mesh = new THREE.SkinnedMesh(geometry, mat);\n                        mesh.normalizeSkinWeights();\n                    }\n                    this.threeNode = mesh;\n                    return mesh;\n                };\n            }\n            function aiFace() {\n                this.mNumIndices = 0;\n                this.mIndices = [];\n            }\n            function aiVector3D() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.toTHREE = function () {\n                    return new THREE.Vector3(this.x, this.y, this.z);\n                };\n            }\n            function aiColor3D() {\n                this.r = 0;\n                this.g = 0;\n                this.b = 0;\n                this.a = 0;\n                this.toTHREE = function () {\n                    return new THREE.Color(this.r, this.g, this.b);\n                };\n            }\n            function aiQuaternion() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.w = 0;\n                this.toTHREE = function () {\n                    return new THREE.Quaternion(this.x, this.y, this.z, this.w);\n                };\n            }\n            function aiVertexWeight() {\n                this.mVertexId = 0;\n                this.mWeight = 0;\n            }\n            function aiString() {\n                this.data = [];\n                this.toString = function () {\n                    var str = '';\n                    this.data.forEach(function (i) {\n                        str += String.fromCharCode(i);\n                    });\n                    return str.replace(/[^\\x20-\\x7E]+/g, '');\n                };\n            }\n            function aiVectorKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiQuatKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiNode() {\n                this.mName = '';\n                this.mTransformation = [];\n                this.mNumChildren = 0;\n                this.mNumMeshes = 0;\n                this.mMeshes = [];\n                this.mChildren = [];\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var o = new THREE.Object3D();\n                    o.name = this.mName;\n                    o.matrix = this.mTransformation.toTHREE();\n                    for (var i = 0; i < this.mChildren.length; i++) {\n                        o.add(this.mChildren[i].toTHREE(scene));\n                    }\n                    for (var i = 0; i < this.mMeshes.length; i++) {\n                        o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n                    }\n                    this.threeNode = o;\n                    o.matrix.decompose(o.position, o.quaternion, o.scale);\n                    return o;\n                };\n            }\n            function aiBone() {\n                this.mName = '';\n                this.mNumWeights = 0;\n                this.mOffsetMatrix = 0;\n            }\n            function aiMaterialProperty() {\n                this.mKey = '';\n                this.mSemantic = 0;\n                this.mIndex = 0;\n                this.mData = [];\n                this.mDataLength = 0;\n                this.mType = 0;\n                this.dataAsColor = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    var g = reader.getFloat32(4, true);\n                    var b = reader.getFloat32(8, true);\n                    return new THREE.Color(r, g, b);\n                };\n                this.dataAsFloat = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return r;\n                };\n                this.dataAsBool = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return !!r;\n                };\n                this.dataAsString = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    return s.toString();\n                };\n                this.dataAsMap = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    var path = s.toString();\n                    path = path.replace(/\\\\/g, '/');\n                    if (path.indexOf('/') != -1) {\n                        path = path.substr(path.lastIndexOf('/') + 1);\n                    }\n                    return textureLoader.load(path);\n                };\n            }\n            var namePropMapping = {\n                '?mat.name': 'name',\n                '$mat.shadingm': 'shading',\n                '$mat.twosided': 'twoSided',\n                '$mat.wireframe': 'wireframe',\n                '$clr.ambient': 'ambient',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'specular',\n                '$clr.emissive': 'emissive',\n                '$clr.transparent': 'transparent',\n                '$clr.reflective': 'reflect',\n                '$mat.shininess': 'shininess',\n                '$mat.reflectivity': 'reflectivity',\n                '$mat.refracti': 'refraction',\n                '$tex.file': 'map'\n            };\n            var nameTypeMapping = {\n                '?mat.name': 'string',\n                '$mat.shadingm': 'bool',\n                '$mat.twosided': 'bool',\n                '$mat.wireframe': 'bool',\n                '$clr.ambient': 'color',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'color',\n                '$clr.emissive': 'color',\n                '$clr.transparent': 'color',\n                '$clr.reflective': 'color',\n                '$mat.shininess': 'float',\n                '$mat.reflectivity': 'float',\n                '$mat.refracti': 'float',\n                '$tex.file': 'map'\n            };\n            function aiMaterial() {\n                this.mNumAllocated = 0;\n                this.mNumProperties = 0;\n                this.mProperties = [];\n                this.toTHREE = function () {\n                    var mat = new THREE.MeshPhongMaterial();\n                    for (var i = 0; i < this.mProperties.length; i++) {\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'float')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'color')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'bool')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'string')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {\n                            var prop = this.mProperties[i];\n                            if (prop.mSemantic == aiTextureType_DIFFUSE)\n                                mat.map = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_NORMALS)\n                                mat.normalMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_LIGHTMAP)\n                                mat.lightMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_OPACITY)\n                                mat.alphaMap = this.mProperties[i].dataAsMap();\n                        }\n                    }\n                    mat.ambient.r = 0.53;\n                    mat.ambient.g = 0.53;\n                    mat.ambient.b = 0.53;\n                    mat.color.r = 1;\n                    mat.color.g = 1;\n                    mat.color.b = 1;\n                    return mat;\n                };\n            }\n            function veclerp(v1, v2, l) {\n                var v = new THREE.Vector3();\n                var lm1 = 1 - l;\n                v.x = v1.x * l + v2.x * lm1;\n                v.y = v1.y * l + v2.y * lm1;\n                v.z = v1.z * l + v2.z * lm1;\n                return v;\n            }\n            function quatlerp(q1, q2, l) {\n                return q1.clone().slerp(q2, 1 - l);\n            }\n            function sampleTrack(keys, time, lne, lerp) {\n                if (keys.length == 1)\n                    return keys[0].mValue.toTHREE();\n                var dist = Infinity;\n                var key = null;\n                var nextKey = null;\n                for (var i = 0; i < keys.length; i++) {\n                    var timeDist = Math.abs(keys[i].mTime - time);\n                    if (timeDist < dist && keys[i].mTime <= time) {\n                        dist = timeDist;\n                        key = keys[i];\n                        nextKey = keys[i + 1];\n                    }\n                }\n                if (!key) {\n                    return null;\n                } else if (nextKey) {\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                } else {\n                    nextKey = keys[0].clone();\n                    nextKey.mTime += lne;\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                }\n            }\n            function aiNodeAnim() {\n                this.mNodeName = '';\n                this.mNumPositionKeys = 0;\n                this.mNumRotationKeys = 0;\n                this.mNumScalingKeys = 0;\n                this.mPositionKeys = [];\n                this.mRotationKeys = [];\n                this.mScalingKeys = [];\n                this.mPreState = '';\n                this.mPostState = '';\n                this.init = function (tps) {\n                    if (!tps)\n                        tps = 1;\n                    function t(t) {\n                        t.mTime /= tps;\n                    }\n                    this.mPositionKeys.forEach(t);\n                    this.mRotationKeys.forEach(t);\n                    this.mScalingKeys.forEach(t);\n                };\n                this.sortKeys = function () {\n                    function comp(a, b) {\n                        return a.mTime - b.mTime;\n                    }\n                    this.mPositionKeys.sort(comp);\n                    this.mRotationKeys.sort(comp);\n                    this.mScalingKeys.sort(comp);\n                };\n                this.getLength = function () {\n                    return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n                        return a.mTime;\n                    })));\n                };\n                this.toTHREE = function (o) {\n                    this.sortKeys();\n                    var length = this.getLength();\n                    var track = new Virtulous.KeyFrameTrack();\n                    for (var i = 0; i < length; i += 0.05) {\n                        var matrix = new THREE.Matrix4();\n                        var time = i;\n                        var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n                        var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n                        var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n                        matrix.compose(pos, rotation, scale);\n                        var key = new Virtulous.KeyFrame(time, matrix);\n                        track.addKey(key);\n                    }\n                    track.target = o.findNode(this.mNodeName).toTHREE();\n                    var tracks = [track];\n                    if (o.nodeToBoneMap[this.mNodeName]) {\n                        for (var i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n                            var t2 = track.clone();\n                            t2.target = o.nodeToBoneMap[this.mNodeName][i];\n                            tracks.push(t2);\n                        }\n                    }\n                    return tracks;\n                };\n            }\n            function aiAnimation() {\n                this.mName = '';\n                this.mDuration = 0;\n                this.mTicksPerSecond = 0;\n                this.mNumChannels = 0;\n                this.mChannels = [];\n                this.toTHREE = function (root) {\n                    var animationHandle = new Virtulous.Animation();\n                    for (var i in this.mChannels) {\n                        this.mChannels[i].init(this.mTicksPerSecond);\n                        var tracks = this.mChannels[i].toTHREE(root);\n                        for (var j in tracks) {\n                            tracks[j].init();\n                            animationHandle.addTrack(tracks[j]);\n                        }\n                    }\n                    animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n                        return e.length;\n                    }));\n                    return animationHandle;\n                };\n            }\n            function aiTexture() {\n                this.mWidth = 0;\n                this.mHeight = 0;\n                this.texAchFormatHint = [];\n                this.pcData = [];\n            }\n            function aiLight() {\n                this.mName = '';\n                this.mType = 0;\n                this.mAttenuationConstant = 0;\n                this.mAttenuationLinear = 0;\n                this.mAttenuationQuadratic = 0;\n                this.mAngleInnerCone = 0;\n                this.mAngleOuterCone = 0;\n                this.mColorDiffuse = null;\n                this.mColorSpecular = null;\n                this.mColorAmbient = null;\n            }\n            function aiCamera() {\n                this.mName = '';\n                this.mPosition = null;\n                this.mLookAt = null;\n                this.mUp = null;\n                this.mHorizontalFOV = 0;\n                this.mClipPlaneNear = 0;\n                this.mClipPlaneFar = 0;\n                this.mAspect = 0;\n            }\n            function aiScene() {\n                this.versionMajor = 0;\n                this.versionMinor = 0;\n                this.versionRevision = 0;\n                this.compileFlags = 0;\n                this.mFlags = 0;\n                this.mNumMeshes = 0;\n                this.mNumMaterials = 0;\n                this.mNumAnimations = 0;\n                this.mNumTextures = 0;\n                this.mNumLights = 0;\n                this.mNumCameras = 0;\n                this.mRootNode = null;\n                this.mMeshes = [];\n                this.mMaterials = [];\n                this.mAnimations = [];\n                this.mLights = [];\n                this.mCameras = [];\n                this.nodeToBoneMap = {};\n                this.findNode = function (name, root) {\n                    if (!root) {\n                        root = this.mRootNode;\n                    }\n                    if (root.mName == name) {\n                        return root;\n                    }\n                    for (var i = 0; i < root.mChildren.length; i++) {\n                        var ret = this.findNode(name, root.mChildren[i]);\n                        if (ret)\n                            return ret;\n                    }\n                    return null;\n                };\n                this.toTHREE = function () {\n                    this.nodeCount = 0;\n                    markBones(this);\n                    var o = this.mRootNode.toTHREE(this);\n                    for (var i in this.mMeshes)\n                        this.mMeshes[i].hookupSkeletons(this);\n                    if (this.mAnimations.length > 0) {\n                        var a = this.mAnimations[0].toTHREE(this);\n                    }\n                    return {\n                        object: o,\n                        animation: a\n                    };\n                };\n            }\n            function aiMatrix4() {\n                this.elements = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                this.toTHREE = function () {\n                    var m = new THREE.Matrix4();\n                    for (var i = 0; i < 4; ++i) {\n                        for (var i2 = 0; i2 < 4; ++i2) {\n                            m.elements[i * 4 + i2] = this.elements[i2][i];\n                        }\n                    }\n                    return m;\n                };\n            }\n            var littleEndian = true;\n            function readFloat(dataview) {\n                var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_double(dataview) {\n                var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n                dataview.readOffset += 8;\n                return val;\n            }\n            function Read_uint8_t(dataview) {\n                var val = dataview.getUint8(dataview.readOffset);\n                dataview.readOffset += 1;\n                return val;\n            }\n            function Read_uint16_t(dataview) {\n                var val = dataview.getUint16(dataview.readOffset, littleEndian);\n                dataview.readOffset += 2;\n                return val;\n            }\n            function Read_unsigned_int(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_uint32_t(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_aiVector3D(stream) {\n                var v = new aiVector3D();\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiColor3D(stream) {\n                var c = new aiColor3D();\n                c.r = readFloat(stream);\n                c.g = readFloat(stream);\n                c.b = readFloat(stream);\n                return c;\n            }\n            function Read_aiQuaternion(stream) {\n                var v = new aiQuaternion();\n                v.w = readFloat(stream);\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiString(stream) {\n                var s = new aiString();\n                var stringlengthbytes = Read_unsigned_int(stream);\n                stream.ReadBytes(s.data, 1, stringlengthbytes);\n                return s.toString();\n            }\n            function Read_aiVertexWeight(stream) {\n                var w = new aiVertexWeight();\n                w.mVertexId = Read_unsigned_int(stream);\n                w.mWeight = readFloat(stream);\n                return w;\n            }\n            function Read_aiMatrix4x4(stream) {\n                var m = new aiMatrix4();\n                for (var i = 0; i < 4; ++i) {\n                    for (var i2 = 0; i2 < 4; ++i2) {\n                        m.elements[i][i2] = readFloat(stream);\n                    }\n                }\n                return m;\n            }\n            function Read_aiVectorKey(stream) {\n                var v = new aiVectorKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiVector3D(stream);\n                return v;\n            }\n            function Read_aiQuatKey(stream) {\n                var v = new aiQuatKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiQuaternion(stream);\n                return v;\n            }\n            function ReadArray_aiVertexWeight(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVertexWeight(stream);\n            }\n            function ReadArray_aiVectorKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVectorKey(stream);\n            }\n            function ReadArray_aiQuatKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiQuatKey(stream);\n            }\n            function ReadBounds(stream, T, n) {\n                return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n            }\n            function ai_assert(bool) {\n                if (!bool)\n                    throw 'asset failed';\n            }\n            function ReadBinaryNode(stream, parent, depth) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n                Read_uint32_t(stream);\n                var node = new aiNode();\n                node.mParent = parent;\n                node.mDepth = depth;\n                node.mName = Read_aiString(stream);\n                node.mTransformation = Read_aiMatrix4x4(stream);\n                node.mNumChildren = Read_unsigned_int(stream);\n                node.mNumMeshes = Read_unsigned_int(stream);\n                if (node.mNumMeshes) {\n                    node.mMeshes = [];\n                    for (var i = 0; i < node.mNumMeshes; ++i) {\n                        node.mMeshes[i] = Read_unsigned_int(stream);\n                    }\n                }\n                if (node.mNumChildren) {\n                    node.mChildren = [];\n                    for (var i = 0; i < node.mNumChildren; ++i) {\n                        var node2 = ReadBinaryNode(stream, node, depth++);\n                        node.mChildren[i] = node2;\n                    }\n                }\n                return node;\n            }\n            function ReadBinaryBone(stream, b) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n                Read_uint32_t(stream);\n                b.mName = Read_aiString(stream);\n                b.mNumWeights = Read_unsigned_int(stream);\n                b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n                if (shortened) {\n                    ReadBounds(stream, b.mWeights, b.mNumWeights);\n                } else {\n                    b.mWeights = [];\n                    ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n                }\n                return b;\n            }\n            function ReadBinaryMesh(stream, mesh) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n                Read_uint32_t(stream);\n                mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n                mesh.mNumVertices = Read_unsigned_int(stream);\n                mesh.mNumFaces = Read_unsigned_int(stream);\n                mesh.mNumBones = Read_unsigned_int(stream);\n                mesh.mMaterialIndex = Read_unsigned_int(stream);\n                mesh.mNumUVComponents = [];\n                var c = Read_unsigned_int(stream);\n                if (c & ASSBIN_MESH_HAS_POSITIONS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n                    } else {\n                        mesh.mVertices = [];\n                        mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_NORMALS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n                    } else {\n                        mesh.mNormals = [];\n                        mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n                        ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n                    } else {\n                        mesh.mTangents = [];\n                        mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                        mesh.mBitangents = [];\n                        mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_COLOR(n)))\n                        break;\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mColors[n] = [];\n                        mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n                        stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n                    }\n                }\n                mesh.mTexCoordsBuffers = [];\n                for (var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))\n                        break;\n                    mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mTextureCoords[n] = [];\n                        mesh.mTexCoordsBuffers[n] = [];\n                        for (var uv = 0; uv < mesh.mNumVertices; uv++) {\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            readFloat(stream);\n                        }\n                    }\n                }\n                if (shortened) {\n                    Read_unsigned_int(stream);\n                } else {\n                    mesh.mFaces = [];\n                    mesh.mIndexArray = [];\n                    for (var i = 0; i < mesh.mNumFaces; ++i) {\n                        var f = mesh.mFaces[i] = new aiFace();\n                        f.mNumIndices = Read_uint16_t(stream);\n                        f.mIndices = [];\n                        for (var a = 0; a < f.mNumIndices; ++a) {\n                            if (mesh.mNumVertices < 1 << 16) {\n                                f.mIndices[a] = Read_uint16_t(stream);\n                            } else {\n                                f.mIndices[a] = Read_unsigned_int(stream);\n                            }\n                        }\n                        if (f.mNumIndices === 3) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                        } else if (f.mNumIndices === 4) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[3]);\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                        } else {\n                            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n                        }\n                    }\n                }\n                if (mesh.mNumBones) {\n                    mesh.mBones = [];\n                    for (var a = 0; a < mesh.mNumBones; ++a) {\n                        mesh.mBones[a] = new aiBone();\n                        ReadBinaryBone(stream, mesh.mBones[a]);\n                    }\n                }\n            }\n            function ReadBinaryMaterialProperty(stream, prop) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n                Read_uint32_t(stream);\n                prop.mKey = Read_aiString(stream);\n                prop.mSemantic = Read_unsigned_int(stream);\n                prop.mIndex = Read_unsigned_int(stream);\n                prop.mDataLength = Read_unsigned_int(stream);\n                prop.mType = Read_unsigned_int(stream);\n                prop.mData = [];\n                stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n            }\n            function ReadBinaryMaterial(stream, mat) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n                Read_uint32_t(stream);\n                mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n                if (mat.mNumProperties) {\n                    if (mat.mProperties) {\n                        delete mat.mProperties;\n                    }\n                    mat.mProperties = [];\n                    for (var i = 0; i < mat.mNumProperties; ++i) {\n                        mat.mProperties[i] = new aiMaterialProperty();\n                        ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n                    }\n                }\n            }\n            function ReadBinaryNodeAnim(stream, nd) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n                Read_uint32_t(stream);\n                nd.mNodeName = Read_aiString(stream);\n                nd.mNumPositionKeys = Read_unsigned_int(stream);\n                nd.mNumRotationKeys = Read_unsigned_int(stream);\n                nd.mNumScalingKeys = Read_unsigned_int(stream);\n                nd.mPreState = Read_unsigned_int(stream);\n                nd.mPostState = Read_unsigned_int(stream);\n                if (nd.mNumPositionKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    } else {\n                        nd.mPositionKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    }\n                }\n                if (nd.mNumRotationKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    } else {\n                        nd.mRotationKeys = [];\n                        ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    }\n                }\n                if (nd.mNumScalingKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    } else {\n                        nd.mScalingKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    }\n                }\n            }\n            function ReadBinaryAnim(stream, anim) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n                Read_uint32_t(stream);\n                anim.mName = Read_aiString(stream);\n                anim.mDuration = Read_double(stream);\n                anim.mTicksPerSecond = Read_double(stream);\n                anim.mNumChannels = Read_unsigned_int(stream);\n                if (anim.mNumChannels) {\n                    anim.mChannels = [];\n                    for (var a = 0; a < anim.mNumChannels; ++a) {\n                        anim.mChannels[a] = new aiNodeAnim();\n                        ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n                    }\n                }\n            }\n            function ReadBinaryTexture(stream, tex) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n                Read_uint32_t(stream);\n                tex.mWidth = Read_unsigned_int(stream);\n                tex.mHeight = Read_unsigned_int(stream);\n                stream.ReadBytes(tex.achFormatHint, 1, 4);\n                if (!shortened) {\n                    if (!tex.mHeight) {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n                    } else {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n                    }\n                }\n            }\n            function ReadBinaryLight(stream, l) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n                Read_uint32_t(stream);\n                l.mName = Read_aiString(stream);\n                l.mType = Read_unsigned_int(stream);\n                if (l.mType != aiLightSource_DIRECTIONAL) {\n                    l.mAttenuationConstant = readFloat(stream);\n                    l.mAttenuationLinear = readFloat(stream);\n                    l.mAttenuationQuadratic = readFloat(stream);\n                }\n                l.mColorDiffuse = Read_aiColor3D(stream);\n                l.mColorSpecular = Read_aiColor3D(stream);\n                l.mColorAmbient = Read_aiColor3D(stream);\n                if (l.mType == aiLightSource_SPOT) {\n                    l.mAngleInnerCone = readFloat(stream);\n                    l.mAngleOuterCone = readFloat(stream);\n                }\n            }\n            function ReadBinaryCamera(stream, cam) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n                Read_uint32_t(stream);\n                cam.mName = Read_aiString(stream);\n                cam.mPosition = Read_aiVector3D(stream);\n                cam.mLookAt = Read_aiVector3D(stream);\n                cam.mUp = Read_aiVector3D(stream);\n                cam.mHorizontalFOV = readFloat(stream);\n                cam.mClipPlaneNear = readFloat(stream);\n                cam.mClipPlaneFar = readFloat(stream);\n                cam.mAspect = readFloat(stream);\n            }\n            function ReadBinaryScene(stream, scene) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n                Read_uint32_t(stream);\n                scene.mFlags = Read_unsigned_int(stream);\n                scene.mNumMeshes = Read_unsigned_int(stream);\n                scene.mNumMaterials = Read_unsigned_int(stream);\n                scene.mNumAnimations = Read_unsigned_int(stream);\n                scene.mNumTextures = Read_unsigned_int(stream);\n                scene.mNumLights = Read_unsigned_int(stream);\n                scene.mNumCameras = Read_unsigned_int(stream);\n                scene.mRootNode = new aiNode();\n                scene.mRootNode = ReadBinaryNode(stream, null, 0);\n                if (scene.mNumMeshes) {\n                    scene.mMeshes = [];\n                    for (var i = 0; i < scene.mNumMeshes; ++i) {\n                        scene.mMeshes[i] = new aiMesh();\n                        ReadBinaryMesh(stream, scene.mMeshes[i]);\n                    }\n                }\n                if (scene.mNumMaterials) {\n                    scene.mMaterials = [];\n                    for (var i = 0; i < scene.mNumMaterials; ++i) {\n                        scene.mMaterials[i] = new aiMaterial();\n                        ReadBinaryMaterial(stream, scene.mMaterials[i]);\n                    }\n                }\n                if (scene.mNumAnimations) {\n                    scene.mAnimations = [];\n                    for (var i = 0; i < scene.mNumAnimations; ++i) {\n                        scene.mAnimations[i] = new aiAnimation();\n                        ReadBinaryAnim(stream, scene.mAnimations[i]);\n                    }\n                }\n                if (scene.mNumTextures) {\n                    scene.mTextures = [];\n                    for (var i = 0; i < scene.mNumTextures; ++i) {\n                        scene.mTextures[i] = new aiTexture();\n                        ReadBinaryTexture(stream, scene.mTextures[i]);\n                    }\n                }\n                if (scene.mNumLights) {\n                    scene.mLights = [];\n                    for (var i = 0; i < scene.mNumLights; ++i) {\n                        scene.mLights[i] = new aiLight();\n                        ReadBinaryLight(stream, scene.mLights[i]);\n                    }\n                }\n                if (scene.mNumCameras) {\n                    scene.mCameras = [];\n                    for (var i = 0; i < scene.mNumCameras; ++i) {\n                        scene.mCameras[i] = new aiCamera();\n                        ReadBinaryCamera(stream, scene.mCameras[i]);\n                    }\n                }\n            }\n            var aiOrigin_CUR = 0;\n            var aiOrigin_BEG = 1;\n            function extendStream(stream) {\n                stream.readOffset = 0;\n                stream.Seek = function (off, ori) {\n                    if (ori == aiOrigin_CUR) {\n                        stream.readOffset += off;\n                    }\n                    if (ori == aiOrigin_BEG) {\n                        stream.readOffset = off;\n                    }\n                };\n                stream.ReadBytes = function (buff, size, n) {\n                    var bytes = size * n;\n                    for (var i = 0; i < bytes; i++)\n                        buff[i] = Read_uint8_t(this);\n                };\n                stream.subArray32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Float32Array(newbuff);\n                };\n                stream.subArrayUint16 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint16Array(newbuff);\n                };\n                stream.subArrayUint8 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint8Array(newbuff);\n                };\n                stream.subArrayUint32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint32Array(newbuff);\n                };\n            }\n            var shortened, compressed;\n            function InternReadFile(pFiledata) {\n                var pScene = new aiScene();\n                var stream = new DataView(pFiledata);\n                extendStream(stream);\n                stream.Seek(44, aiOrigin_CUR);\n                pScene.versionMajor = Read_unsigned_int(stream);\n                pScene.versionMinor = Read_unsigned_int(stream);\n                pScene.versionRevision = Read_unsigned_int(stream);\n                pScene.compileFlags = Read_unsigned_int(stream);\n                shortened = Read_uint16_t(stream) > 0;\n                compressed = Read_uint16_t(stream) > 0;\n                if (shortened)\n                    throw 'Shortened binaries are not supported!';\n                stream.Seek(256, aiOrigin_CUR);\n                stream.Seek(128, aiOrigin_CUR);\n                stream.Seek(64, aiOrigin_CUR);\n                if (compressed) {\n                    var uncompressedSize = Read_uint32_t(stream);\n                    var compressedSize = stream.FileSize() - stream.Tell();\n                    var compressedData = [];\n                    stream.Read(compressedData, 1, compressedSize);\n                    var uncompressedData = [];\n                    uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n                    var buff = new ArrayBuffer(uncompressedData);\n                    ReadBinaryScene(buff, pScene);\n                } else {\n                    ReadBinaryScene(stream, pScene);\n                }\n                return pScene.toTHREE();\n            }\n            return InternReadFile(buffer);\n        }\n    });\n    return AssimpLoader;\n});\ndefine('skylark-threejs-ex/loaders/TGALoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TGALoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    TGALoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TGALoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var texture = new THREE.Texture();\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setResponseType('arraybuffer');\n            loader.setPath(this.path);\n            loader.load(url, function (buffer) {\n                texture.image = scope.parse(buffer);\n                texture.needsUpdate = true;\n                if (onLoad !== undefined) {\n                    onLoad(texture);\n                }\n            }, onProgress, onError);\n            return texture;\n        },\n        parse: function (buffer) {\n            function tgaCheckHeader(header) {\n                switch (header.image_type) {\n                case TGA_TYPE_INDEXED:\n                case TGA_TYPE_RLE_INDEXED:\n                    if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n                    }\n                    break;\n                case TGA_TYPE_RGB:\n                case TGA_TYPE_GREY:\n                case TGA_TYPE_RLE_RGB:\n                case TGA_TYPE_RLE_GREY:\n                    if (header.colormap_type) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n                    }\n                    break;\n                case TGA_TYPE_NO_DATA:\n                    console.error('THREE.TGALoader: No data.');\n                default:\n                    console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n                }\n                if (header.width <= 0 || header.height <= 0) {\n                    console.error('THREE.TGALoader: Invalid image size.');\n                }\n                if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n                    console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n                }\n            }\n            function tgaParse(use_rle, use_pal, header, offset, data) {\n                var pixel_data, pixel_size, pixel_total, palettes;\n                pixel_size = header.pixel_size >> 3;\n                pixel_total = header.width * header.height * pixel_size;\n                if (use_pal) {\n                    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n                }\n                if (use_rle) {\n                    pixel_data = new Uint8Array(pixel_total);\n                    var c, count, i;\n                    var shift = 0;\n                    var pixels = new Uint8Array(pixel_size);\n                    while (shift < pixel_total) {\n                        c = data[offset++];\n                        count = (c & 127) + 1;\n                        if (c & 128) {\n                            for (i = 0; i < pixel_size; ++i) {\n                                pixels[i] = data[offset++];\n                            }\n                            for (i = 0; i < count; ++i) {\n                                pixel_data.set(pixels, shift + i * pixel_size);\n                            }\n                            shift += pixel_size * count;\n                        } else {\n                            count *= pixel_size;\n                            for (i = 0; i < count; ++i) {\n                                pixel_data[shift + i] = data[offset++];\n                            }\n                            shift += count;\n                        }\n                    }\n                } else {\n                    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n                }\n                return {\n                    pixel_data: pixel_data,\n                    palettes: palettes\n                };\n            }\n            function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n                var colormap = palettes;\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n                        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n                        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        color = image[i + 0] + (image[i + 1] << 8);\n                        imageData[(x + width * y) * 4 + 0] = (color & 31744) >> 7;\n                        imageData[(x + width * y) * 4 + 1] = (color & 992) >> 2;\n                        imageData[(x + width * y) * 4 + 2] = (color & 31) >> 3;\n                        imageData[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 3) {\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 4) {\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 3];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 0] = color;\n                        imageData[(x + width * y) * 4 + 1] = color;\n                        imageData[(x + width * y) * 4 + 2] = color;\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        imageData[(x + width * y) * 4 + 0] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 1];\n                    }\n                }\n                return imageData;\n            }\n            function getTgaRGBA(data, width, height, image, palette) {\n                var x_start, y_start, x_step, y_step, x_end, y_end;\n                switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n                default:\n                case TGA_ORIGIN_UL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                case TGA_ORIGIN_UR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                }\n                if (use_grey) {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 16:\n                        tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                } else {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n                        break;\n                    case 16:\n                        tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 24:\n                        tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 32:\n                        tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                }\n                return data;\n            }\n            var TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;\n            if (buffer.length < 19)\n                console.error('THREE.TGALoader: Not enough data to contain header.');\n            var content = new Uint8Array(buffer), offset = 0, header = {\n                    id_length: content[offset++],\n                    colormap_type: content[offset++],\n                    image_type: content[offset++],\n                    colormap_index: content[offset++] | content[offset++] << 8,\n                    colormap_length: content[offset++] | content[offset++] << 8,\n                    colormap_size: content[offset++],\n                    origin: [\n                        content[offset++] | content[offset++] << 8,\n                        content[offset++] | content[offset++] << 8\n                    ],\n                    width: content[offset++] | content[offset++] << 8,\n                    height: content[offset++] | content[offset++] << 8,\n                    pixel_size: content[offset++],\n                    flags: content[offset++]\n                };\n            tgaCheckHeader(header);\n            if (header.id_length + offset > buffer.length) {\n                console.error('THREE.TGALoader: No data.');\n            }\n            offset += header.id_length;\n            var use_rle = false, use_pal = false, use_grey = false;\n            switch (header.image_type) {\n            case TGA_TYPE_RLE_INDEXED:\n                use_rle = true;\n                use_pal = true;\n                break;\n            case TGA_TYPE_INDEXED:\n                use_pal = true;\n                break;\n            case TGA_TYPE_RLE_RGB:\n                use_rle = true;\n                break;\n            case TGA_TYPE_RGB:\n                break;\n            case TGA_TYPE_RLE_GREY:\n                use_rle = true;\n                use_grey = true;\n                break;\n            case TGA_TYPE_GREY:\n                use_grey = true;\n                break;\n            }\n            var useOffscreen = typeof OffscreenCanvas !== 'undefined';\n            var canvas = useOffscreen ? new OffscreenCanvas(header.width, header.height) : document.createElement('canvas');\n            canvas.width = header.width;\n            canvas.height = header.height;\n            var context = canvas.getContext('2d');\n            var imageData = context.createImageData(header.width, header.height);\n            var result = tgaParse(use_rle, use_pal, header, offset, content);\n            var rgbaData = getTgaRGBA(imageData.data, header.width, header.height, result.pixel_data, result.palettes);\n            context.putImageData(imageData, 0, 0);\n            return useOffscreen ? canvas.transferToImageBitmap() : canvas;\n        }\n    });\n    return  TGALoader;\n});\ndefine('skylark-threejs-ex/loaders/ColladaLoader',[\n    \"skylark-threejs\",\n    '../loaders/TGALoader'\n], function (THREE, TGALoader) {\n    'use strict';\n    var ColladaLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    ColladaLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ColladaLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        options: {\n            set convertUpAxis(value) {\n                console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n            }\n        },\n        parse: function (text, path) {\n            function getElementsByTagName(xml, name) {\n                var array = [];\n                var childNodes = xml.childNodes;\n                for (var i = 0, l = childNodes.length; i < l; i++) {\n                    var child = childNodes[i];\n                    if (child.nodeName === name) {\n                        array.push(child);\n                    }\n                }\n                return array;\n            }\n            function parseStrings(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parts[i];\n                }\n                return array;\n            }\n            function parseFloats(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseFloat(parts[i]);\n                }\n                return array;\n            }\n            function parseInts(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseInt(parts[i]);\n                }\n                return array;\n            }\n            function parseId(text) {\n                return text.substring(1);\n            }\n            function generateId() {\n                return 'three_default_' + count++;\n            }\n            function isEmpty(object) {\n                return Object.keys(object).length === 0;\n            }\n            function parseAsset(xml) {\n                return {\n                    unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n                    upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n                };\n            }\n            function parseAssetUnit(xml) {\n                if (xml !== undefined && xml.hasAttribute('meter') === true) {\n                    return parseFloat(xml.getAttribute('meter'));\n                } else {\n                    return 1;\n                }\n            }\n            function parseAssetUpAxis(xml) {\n                return xml !== undefined ? xml.textContent : 'Y_UP';\n            }\n            function parseLibrary(xml, libraryName, nodeName, parser) {\n                var library = getElementsByTagName(xml, libraryName)[0];\n                if (library !== undefined) {\n                    var elements = getElementsByTagName(library, nodeName);\n                    for (var i = 0; i < elements.length; i++) {\n                        parser(elements[i]);\n                    }\n                }\n            }\n            function buildLibrary(data, builder) {\n                for (var name in data) {\n                    var object = data[name];\n                    object.build = builder(data[name]);\n                }\n            }\n            function getBuild(data, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data);\n                return data.build;\n            }\n            function parseAnimation(xml) {\n                var data = {\n                    sources: {},\n                    samplers: {},\n                    channels: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id;\n                    switch (child.nodeName) {\n                    case 'source':\n                        id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'sampler':\n                        id = child.getAttribute('id');\n                        data.samplers[id] = parseAnimationSampler(child);\n                        break;\n                    case 'channel':\n                        id = child.getAttribute('target');\n                        data.channels[id] = parseAnimationChannel(child);\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.animations[xml.getAttribute('id')] = data;\n            }\n            function parseAnimationSampler(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseAnimationChannel(xml) {\n                var data = {};\n                var target = xml.getAttribute('target');\n                var parts = target.split('/');\n                var id = parts.shift();\n                var sid = parts.shift();\n                var arraySyntax = sid.indexOf('(') !== -1;\n                var memberSyntax = sid.indexOf('.') !== -1;\n                if (memberSyntax) {\n                    parts = sid.split('.');\n                    sid = parts.shift();\n                    data.member = parts.shift();\n                } else if (arraySyntax) {\n                    var indices = sid.split('(');\n                    sid = indices.shift();\n                    for (var i = 0; i < indices.length; i++) {\n                        indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n                    }\n                    data.indices = indices;\n                }\n                data.id = id;\n                data.sid = sid;\n                data.arraySyntax = arraySyntax;\n                data.memberSyntax = memberSyntax;\n                data.sampler = parseId(xml.getAttribute('source'));\n                return data;\n            }\n            function buildAnimation(data) {\n                var tracks = [];\n                var channels = data.channels;\n                var samplers = data.samplers;\n                var sources = data.sources;\n                for (var target in channels) {\n                    if (channels.hasOwnProperty(target)) {\n                        var channel = channels[target];\n                        var sampler = samplers[channel.sampler];\n                        var inputId = sampler.inputs.INPUT;\n                        var outputId = sampler.inputs.OUTPUT;\n                        var inputSource = sources[inputId];\n                        var outputSource = sources[outputId];\n                        var animation = buildAnimationChannel(channel, inputSource, outputSource);\n                        createKeyframeTracks(animation, tracks);\n                    }\n                }\n                return tracks;\n            }\n            function getAnimation(id) {\n                return getBuild(library.animations[id], buildAnimation);\n            }\n            function buildAnimationChannel(channel, inputSource, outputSource) {\n                var node = library.nodes[channel.id];\n                var object3D = getNode(node.id);\n                var transform = node.transforms[channel.sid];\n                var defaultMatrix = node.matrix.clone().transpose();\n                var time, stride;\n                var i, il, j, jl;\n                var data = {};\n                switch (transform) {\n                case 'matrix':\n                    for (i = 0, il = inputSource.array.length; i < il; i++) {\n                        time = inputSource.array[i];\n                        stride = i * outputSource.stride;\n                        if (data[time] === undefined)\n                            data[time] = {};\n                        if (channel.arraySyntax === true) {\n                            var value = outputSource.array[stride];\n                            var index = channel.indices[0] + 4 * channel.indices[1];\n                            data[time][index] = value;\n                        } else {\n                            for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                                data[time][j] = outputSource.array[stride + j];\n                            }\n                        }\n                    }\n                    break;\n                case 'translate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'rotate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'scale':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                }\n                var keyframes = prepareAnimationData(data, defaultMatrix);\n                var animation = {\n                    name: object3D.uuid,\n                    keyframes: keyframes\n                };\n                return animation;\n            }\n            function prepareAnimationData(data, defaultMatrix) {\n                var keyframes = [];\n                for (var time in data) {\n                    keyframes.push({\n                        time: parseFloat(time),\n                        value: data[time]\n                    });\n                }\n                keyframes.sort(ascending);\n                for (var i = 0; i < 16; i++) {\n                    transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n                }\n                return keyframes;\n                function ascending(a, b) {\n                    return a.time - b.time;\n                }\n            }\n            var position = new THREE.Vector3();\n            var scale = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            function createKeyframeTracks(animation, tracks) {\n                var keyframes = animation.keyframes;\n                var name = animation.name;\n                var times = [];\n                var positionData = [];\n                var quaternionData = [];\n                var scaleData = [];\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    var time = keyframe.time;\n                    var value = keyframe.value;\n                    matrix.fromArray(value).transpose();\n                    matrix.decompose(position, quaternion, scale);\n                    times.push(time);\n                    positionData.push(position.x, position.y, position.z);\n                    quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n                    scaleData.push(scale.x, scale.y, scale.z);\n                }\n                if (positionData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));\n                if (quaternionData.length > 0)\n                    tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n                if (scaleData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));\n                return tracks;\n            }\n            function transformAnimationData(keyframes, property, defaultValue) {\n                var keyframe;\n                var empty = true;\n                var i, l;\n                for (i = 0, l = keyframes.length; i < l; i++) {\n                    keyframe = keyframes[i];\n                    if (keyframe.value[property] === undefined) {\n                        keyframe.value[property] = null;\n                    } else {\n                        empty = false;\n                    }\n                }\n                if (empty === true) {\n                    for (i = 0, l = keyframes.length; i < l; i++) {\n                        keyframe = keyframes[i];\n                        keyframe.value[property] = defaultValue;\n                    }\n                } else {\n                    createMissingKeyframes(keyframes, property);\n                }\n            }\n            function createMissingKeyframes(keyframes, property) {\n                var prev, next;\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] === null) {\n                        prev = getPrev(keyframes, i, property);\n                        next = getNext(keyframes, i, property);\n                        if (prev === null) {\n                            keyframe.value[property] = next.value[property];\n                            continue;\n                        }\n                        if (next === null) {\n                            keyframe.value[property] = prev.value[property];\n                            continue;\n                        }\n                        interpolate(keyframe, prev, next, property);\n                    }\n                }\n            }\n            function getPrev(keyframes, i, property) {\n                while (i >= 0) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i--;\n                }\n                return null;\n            }\n            function getNext(keyframes, i, property) {\n                while (i < keyframes.length) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i++;\n                }\n                return null;\n            }\n            function interpolate(key, prev, next, property) {\n                if (next.time - prev.time === 0) {\n                    key.value[property] = prev.value[property];\n                    return;\n                }\n                key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n            }\n            function parseAnimationClip(xml) {\n                var data = {\n                    name: xml.getAttribute('id') || 'default',\n                    start: parseFloat(xml.getAttribute('start') || 0),\n                    end: parseFloat(xml.getAttribute('end') || 0),\n                    animations: []\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_animation':\n                        data.animations.push(parseId(child.getAttribute('url')));\n                        break;\n                    }\n                }\n                library.clips[xml.getAttribute('id')] = data;\n            }\n            function buildAnimationClip(data) {\n                var tracks = [];\n                var name = data.name;\n                var duration = data.end - data.start || -1;\n                var animations = data.animations;\n                for (var i = 0, il = animations.length; i < il; i++) {\n                    var animationTracks = getAnimation(animations[i]);\n                    for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n                        tracks.push(animationTracks[j]);\n                    }\n                }\n                return new THREE.AnimationClip(name, duration, tracks);\n            }\n            function getAnimationClip(id) {\n                return getBuild(library.clips[id], buildAnimationClip);\n            }\n            function parseController(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'skin':\n                        data.id = parseId(child.getAttribute('source'));\n                        data.skin = parseSkin(child);\n                        break;\n                    case 'morph':\n                        data.id = parseId(child.getAttribute('source'));\n                        console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n                        break;\n                    }\n                }\n                library.controllers[xml.getAttribute('id')] = data;\n            }\n            function parseSkin(xml) {\n                var data = { sources: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_shape_matrix':\n                        data.bindShapeMatrix = parseFloats(child.textContent);\n                        break;\n                    case 'source':\n                        var id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'joints':\n                        data.joints = parseJoints(child);\n                        break;\n                    case 'vertex_weights':\n                        data.vertexWeights = parseVertexWeights(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseJoints(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseVertexWeights(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        var offset = parseInt(child.getAttribute('offset'));\n                        data.inputs[semantic] = {\n                            id: id,\n                            offset: offset\n                        };\n                        break;\n                    case 'vcount':\n                        data.vcount = parseInts(child.textContent);\n                        break;\n                    case 'v':\n                        data.v = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildController(data) {\n                var build = { id: data.id };\n                var geometry = library.geometries[build.id];\n                if (data.skin !== undefined) {\n                    build.skin = buildSkin(data.skin);\n                    geometry.sources.skinIndices = build.skin.indices;\n                    geometry.sources.skinWeights = build.skin.weights;\n                }\n                return build;\n            }\n            function buildSkin(data) {\n                var BONE_LIMIT = 4;\n                var build = {\n                    joints: [],\n                    indices: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    },\n                    weights: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    }\n                };\n                var sources = data.sources;\n                var vertexWeights = data.vertexWeights;\n                var vcount = vertexWeights.vcount;\n                var v = vertexWeights.v;\n                var jointOffset = vertexWeights.inputs.JOINT.offset;\n                var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n                var jointSource = data.sources[data.joints.inputs.JOINT];\n                var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n                var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n                var stride = 0;\n                var i, j, l;\n                for (i = 0, l = vcount.length; i < l; i++) {\n                    var jointCount = vcount[i];\n                    var vertexSkinData = [];\n                    for (j = 0; j < jointCount; j++) {\n                        var skinIndex = v[stride + jointOffset];\n                        var weightId = v[stride + weightOffset];\n                        var skinWeight = weights[weightId];\n                        vertexSkinData.push({\n                            index: skinIndex,\n                            weight: skinWeight\n                        });\n                        stride += 2;\n                    }\n                    vertexSkinData.sort(descending);\n                    for (j = 0; j < BONE_LIMIT; j++) {\n                        var d = vertexSkinData[j];\n                        if (d !== undefined) {\n                            build.indices.array.push(d.index);\n                            build.weights.array.push(d.weight);\n                        } else {\n                            build.indices.array.push(0);\n                            build.weights.array.push(0);\n                        }\n                    }\n                }\n                if (data.bindShapeMatrix) {\n                    build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();\n                } else {\n                    build.bindMatrix = new THREE.Matrix4().identity();\n                }\n                for (i = 0, l = jointSource.array.length; i < l; i++) {\n                    var name = jointSource.array[i];\n                    var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n                    build.joints.push({\n                        name: name,\n                        boneInverse: boneInverse\n                    });\n                }\n                return build;\n                function descending(a, b) {\n                    return b.weight - a.weight;\n                }\n            }\n            function getController(id) {\n                return getBuild(library.controllers[id], buildController);\n            }\n            function parseImage(xml) {\n                var data = { init_from: getElementsByTagName(xml, 'init_from')[0].textContent };\n                library.images[xml.getAttribute('id')] = data;\n            }\n            function buildImage(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data.init_from;\n            }\n            function getImage(id) {\n                var data = library.images[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildImage);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n                return null;\n            }\n            function parseEffect(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'profile_COMMON':\n                        data.profile = parseEffectProfileCOMMON(child);\n                        break;\n                    }\n                }\n                library.effects[xml.getAttribute('id')] = data;\n            }\n            function parseEffectProfileCOMMON(xml) {\n                var data = {\n                    surfaces: {},\n                    samplers: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'newparam':\n                        parseEffectNewparam(child, data);\n                        break;\n                    case 'technique':\n                        data.technique = parseEffectTechnique(child);\n                        break;\n                    case 'extra':\n                        data.extra = parseEffectExtra(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectNewparam(xml, data) {\n                var sid = xml.getAttribute('sid');\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'surface':\n                        data.surfaces[sid] = parseEffectSurface(child);\n                        break;\n                    case 'sampler2D':\n                        data.samplers[sid] = parseEffectSampler(child);\n                        break;\n                    }\n                }\n            }\n            function parseEffectSurface(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'init_from':\n                        data.init_from = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectSampler(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.source = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'constant':\n                    case 'lambert':\n                    case 'blinn':\n                    case 'phong':\n                        data.type = child.nodeName;\n                        data.parameters = parseEffectParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'emission':\n                    case 'diffuse':\n                    case 'specular':\n                    case 'bump':\n                    case 'ambient':\n                    case 'shininess':\n                    case 'transparency':\n                        data[child.nodeName] = parseEffectParameter(child);\n                        break;\n                    case 'transparent':\n                        data[child.nodeName] = {\n                            opaque: child.getAttribute('opaque'),\n                            data: parseEffectParameter(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameter(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        data[child.nodeName] = parseFloats(child.textContent);\n                        break;\n                    case 'float':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'texture':\n                        data[child.nodeName] = {\n                            id: child.getAttribute('texture'),\n                            extra: parseEffectParameterTexture(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTexture(xml) {\n                var data = { technique: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'extra':\n                        parseEffectParameterTextureExtra(child, data);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTextureExtra(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        parseEffectParameterTextureExtraTechnique(child, data);\n                        break;\n                    }\n                }\n            }\n            function parseEffectParameterTextureExtraTechnique(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'repeatU':\n                    case 'repeatV':\n                    case 'offsetU':\n                    case 'offsetV':\n                        data.technique[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'wrapU':\n                    case 'wrapV':\n                        if (child.textContent.toUpperCase() === 'TRUE') {\n                            data.technique[child.nodeName] = 1;\n                        } else if (child.textContent.toUpperCase() === 'FALSE') {\n                            data.technique[child.nodeName] = 0;\n                        } else {\n                            data.technique[child.nodeName] = parseInt(child.textContent);\n                        }\n                        break;\n                    }\n                }\n            }\n            function parseEffectExtra(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        data.technique = parseEffectExtraTechnique(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectExtraTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'double_sided':\n                        data[child.nodeName] = parseInt(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildEffect(data) {\n                return data;\n            }\n            function getEffect(id) {\n                return getBuild(library.effects[id], buildEffect);\n            }\n            function parseMaterial(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_effect':\n                        data.url = parseId(child.getAttribute('url'));\n                        break;\n                    }\n                }\n                library.materials[xml.getAttribute('id')] = data;\n            }\n            function getTextureLoader(image) {\n                var loader;\n                var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2);\n                extension = extension.toLowerCase();\n                switch (extension) {\n                case 'tga':\n                    loader = tgaLoader;\n                    break;\n                default:\n                    loader = textureLoader;\n                }\n                return loader;\n            }\n            function buildMaterial(data) {\n                var effect = getEffect(data.url);\n                var technique = effect.profile.technique;\n                var extra = effect.profile.extra;\n                var material;\n                switch (technique.type) {\n                case 'phong':\n                case 'blinn':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    material = new THREE.MeshBasicMaterial();\n                    break;\n                }\n                material.name = data.name || '';\n                function getTexture(textureObject) {\n                    var sampler = effect.profile.samplers[textureObject.id];\n                    var image = null;\n                    if (sampler !== undefined) {\n                        var surface = effect.profile.surfaces[sampler.source];\n                        image = getImage(surface.init_from);\n                    } else {\n                        console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n                        image = getImage(textureObject.id);\n                    }\n                    if (image !== null) {\n                        var loader = getTextureLoader(image);\n                        if (loader !== undefined) {\n                            var texture = loader.load(image);\n                            var extra = textureObject.extra;\n                            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n                                var technique = extra.technique;\n                                texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n                                texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n                            } else {\n                                texture.wrapS = THREE.RepeatWrapping;\n                                texture.wrapT = THREE.RepeatWrapping;\n                            }\n                            return texture;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n                            return null;\n                        }\n                    } else {\n                        console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n                        return null;\n                    }\n                }\n                var parameters = technique.parameters;\n                for (var key in parameters) {\n                    var parameter = parameters[key];\n                    switch (key) {\n                    case 'diffuse':\n                        if (parameter.color)\n                            material.color.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.map = getTexture(parameter.texture);\n                        break;\n                    case 'specular':\n                        if (parameter.color && material.specular)\n                            material.specular.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.specularMap = getTexture(parameter.texture);\n                        break;\n                    case 'bump':\n                        if (parameter.texture)\n                            material.normalMap = getTexture(parameter.texture);\n                        break;\n                    case 'ambient':\n                        if (parameter.texture)\n                            material.lightMap = getTexture(parameter.texture);\n                        break;\n                    case 'shininess':\n                        if (parameter.float && material.shininess)\n                            material.shininess = parameter.float;\n                        break;\n                    case 'emission':\n                        if (parameter.color && material.emissive)\n                            material.emissive.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.emissiveMap = getTexture(parameter.texture);\n                        break;\n                    }\n                }\n                var transparent = parameters['transparent'];\n                var transparency = parameters['transparency'];\n                if (transparency === undefined && transparent) {\n                    transparency = { float: 1 };\n                }\n                if (transparent === undefined && transparency) {\n                    transparent = {\n                        opaque: 'A_ONE',\n                        data: {\n                            color: [\n                                1,\n                                1,\n                                1,\n                                1\n                            ]\n                        }\n                    };\n                }\n                if (transparent && transparency) {\n                    if (transparent.data.texture) {\n                        material.transparent = true;\n                    } else {\n                        var color = transparent.data.color;\n                        switch (transparent.opaque) {\n                        case 'A_ONE':\n                            material.opacity = color[3] * transparency.float;\n                            break;\n                        case 'RGB_ZERO':\n                            material.opacity = 1 - color[0] * transparency.float;\n                            break;\n                        case 'A_ZERO':\n                            material.opacity = 1 - color[3] * transparency.float;\n                            break;\n                        case 'RGB_ONE':\n                            material.opacity = color[0] * transparency.float;\n                            break;\n                        default:\n                            console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n                        }\n                        if (material.opacity < 1)\n                            material.transparent = true;\n                    }\n                }\n                if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n                    material.side = THREE.DoubleSide;\n                }\n                return material;\n            }\n            function getMaterial(id) {\n                return getBuild(library.materials[id], buildMaterial);\n            }\n            function parseCamera(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'optics':\n                        data.optics = parseCameraOptics(child);\n                        break;\n                    }\n                }\n                library.cameras[xml.getAttribute('id')] = data;\n            }\n            function parseCameraOptics(xml) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        return parseCameraTechnique(child);\n                    }\n                }\n                return {};\n            }\n            function parseCameraTechnique(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'perspective':\n                    case 'orthographic':\n                        data.technique = child.nodeName;\n                        data.parameters = parseCameraParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseCameraParameters(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'xfov':\n                    case 'yfov':\n                    case 'xmag':\n                    case 'ymag':\n                    case 'znear':\n                    case 'zfar':\n                    case 'aspect_ratio':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildCamera(data) {\n                var camera;\n                switch (data.optics.technique) {\n                case 'perspective':\n                    camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                case 'orthographic':\n                    var ymag = data.optics.parameters.ymag;\n                    var xmag = data.optics.parameters.xmag;\n                    var aspectRatio = data.optics.parameters.aspect_ratio;\n                    xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n                    ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n                    xmag *= 0.5;\n                    ymag *= 0.5;\n                    camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                default:\n                    camera = new THREE.PerspectiveCamera();\n                    break;\n                }\n                camera.name = data.name || '';\n                return camera;\n            }\n            function getCamera(id) {\n                var data = library.cameras[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildCamera);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n                return null;\n            }\n            function parseLight(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        data = parseLightTechnique(child);\n                        break;\n                    }\n                }\n                library.lights[xml.getAttribute('id')] = data;\n            }\n            function parseLightTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'directional':\n                    case 'point':\n                    case 'spot':\n                    case 'ambient':\n                        data.technique = child.nodeName;\n                        data.parameters = parseLightParameters(child);\n                    }\n                }\n                return data;\n            }\n            function parseLightParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        var array = parseFloats(child.textContent);\n                        data.color = new THREE.Color().fromArray(array);\n                        break;\n                    case 'falloff_angle':\n                        data.falloffAngle = parseFloat(child.textContent);\n                        break;\n                    case 'quadratic_attenuation':\n                        var f = parseFloat(child.textContent);\n                        data.distance = f ? Math.sqrt(1 / f) : 0;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildLight(data) {\n                var light;\n                switch (data.technique) {\n                case 'directional':\n                    light = new THREE.DirectionalLight();\n                    break;\n                case 'point':\n                    light = new THREE.PointLight();\n                    break;\n                case 'spot':\n                    light = new THREE.SpotLight();\n                    break;\n                case 'ambient':\n                    light = new THREE.AmbientLight();\n                    break;\n                }\n                if (data.parameters.color)\n                    light.color.copy(data.parameters.color);\n                if (data.parameters.distance)\n                    light.distance = data.parameters.distance;\n                return light;\n            }\n            function getLight(id) {\n                var data = library.lights[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildLight);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n                return null;\n            }\n            function parseGeometry(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    sources: {},\n                    vertices: {},\n                    primitives: []\n                };\n                var mesh = getElementsByTagName(xml, 'mesh')[0];\n                if (mesh === undefined)\n                    return;\n                for (var i = 0; i < mesh.childNodes.length; i++) {\n                    var child = mesh.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id = child.getAttribute('id');\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'vertices':\n                        data.vertices = parseGeometryVertices(child);\n                        break;\n                    case 'polygons':\n                        console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n                        break;\n                    case 'lines':\n                    case 'linestrips':\n                    case 'polylist':\n                    case 'triangles':\n                        data.primitives.push(parseGeometryPrimitive(child));\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.geometries[xml.getAttribute('id')] = data;\n            }\n            function parseSource(xml) {\n                var data = {\n                    array: [],\n                    stride: 3\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'float_array':\n                        data.array = parseFloats(child.textContent);\n                        break;\n                    case 'Name_array':\n                        data.array = parseStrings(child.textContent);\n                        break;\n                    case 'technique_common':\n                        var accessor = getElementsByTagName(child, 'accessor')[0];\n                        if (accessor !== undefined) {\n                            data.stride = parseInt(accessor.getAttribute('stride'));\n                        }\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseGeometryVertices(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n                }\n                return data;\n            }\n            function parseGeometryPrimitive(xml) {\n                var primitive = {\n                    type: xml.nodeName,\n                    material: xml.getAttribute('material'),\n                    count: parseInt(xml.getAttribute('count')),\n                    inputs: {},\n                    stride: 0,\n                    hasUV: false\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        var offset = parseInt(child.getAttribute('offset'));\n                        var set = parseInt(child.getAttribute('set'));\n                        var inputname = set > 0 ? semantic + set : semantic;\n                        primitive.inputs[inputname] = {\n                            id: id,\n                            offset: offset\n                        };\n                        primitive.stride = Math.max(primitive.stride, offset + 1);\n                        if (semantic === 'TEXCOORD')\n                            primitive.hasUV = true;\n                        break;\n                    case 'vcount':\n                        primitive.vcount = parseInts(child.textContent);\n                        break;\n                    case 'p':\n                        primitive.p = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return primitive;\n            }\n            function groupPrimitives(primitives) {\n                var build = {};\n                for (var i = 0; i < primitives.length; i++) {\n                    var primitive = primitives[i];\n                    if (build[primitive.type] === undefined)\n                        build[primitive.type] = [];\n                    build[primitive.type].push(primitive);\n                }\n                return build;\n            }\n            function checkUVCoordinates(primitives) {\n                var count = 0;\n                for (var i = 0, l = primitives.length; i < l; i++) {\n                    var primitive = primitives[i];\n                    if (primitive.hasUV === true) {\n                        count++;\n                    }\n                }\n                if (count > 0 && count < primitives.length) {\n                    primitives.uvsNeedsFix = true;\n                }\n            }\n            function buildGeometry(data) {\n                var build = {};\n                var sources = data.sources;\n                var vertices = data.vertices;\n                var primitives = data.primitives;\n                if (primitives.length === 0)\n                    return {};\n                var groupedPrimitives = groupPrimitives(primitives);\n                for (var type in groupedPrimitives) {\n                    var primitiveType = groupedPrimitives[type];\n                    checkUVCoordinates(primitiveType);\n                    build[type] = buildGeometryType(primitiveType, sources, vertices);\n                }\n                return build;\n            }\n            function buildGeometryType(primitives, sources, vertices) {\n                var build = {};\n                var position = {\n                    array: [],\n                    stride: 0\n                };\n                var normal = {\n                    array: [],\n                    stride: 0\n                };\n                var uv = {\n                    array: [],\n                    stride: 0\n                };\n                var uv2 = {\n                    array: [],\n                    stride: 0\n                };\n                var color = {\n                    array: [],\n                    stride: 0\n                };\n                var skinIndex = {\n                    array: [],\n                    stride: 4\n                };\n                var skinWeight = {\n                    array: [],\n                    stride: 4\n                };\n                var geometry = new THREE.BufferGeometry();\n                var materialKeys = [];\n                var start = 0;\n                for (var p = 0; p < primitives.length; p++) {\n                    var primitive = primitives[p];\n                    var inputs = primitive.inputs;\n                    var count = 0;\n                    switch (primitive.type) {\n                    case 'lines':\n                    case 'linestrips':\n                        count = primitive.count * 2;\n                        break;\n                    case 'triangles':\n                        count = primitive.count * 3;\n                        break;\n                    case 'polylist':\n                        for (var g = 0; g < primitive.count; g++) {\n                            var vc = primitive.vcount[g];\n                            switch (vc) {\n                            case 3:\n                                count += 3;\n                                break;\n                            case 4:\n                                count += 6;\n                                break;\n                            default:\n                                count += (vc - 2) * 3;\n                                break;\n                            }\n                        }\n                        break;\n                    default:\n                        console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n                    }\n                    geometry.addGroup(start, count, p);\n                    start += count;\n                    if (primitive.material) {\n                        materialKeys.push(primitive.material);\n                    }\n                    for (var name in inputs) {\n                        var input = inputs[name];\n                        switch (name) {\n                        case 'VERTEX':\n                            for (var key in vertices) {\n                                var id = vertices[key];\n                                switch (key) {\n                                case 'POSITION':\n                                    var prevLength = position.array.length;\n                                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                                    position.stride = sources[id].stride;\n                                    if (sources.skinWeights && sources.skinIndices) {\n                                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                                    }\n                                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                                        var count = (position.array.length - prevLength) / position.stride;\n                                        for (var i = 0; i < count; i++) {\n                                            uv.array.push(0, 0);\n                                        }\n                                    }\n                                    break;\n                                case 'NORMAL':\n                                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                                    normal.stride = sources[id].stride;\n                                    break;\n                                case 'COLOR':\n                                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                                    color.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD1':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                default:\n                                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                                }\n                            }\n                            break;\n                        case 'NORMAL':\n                            buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n                            normal.stride = sources[input.id].stride;\n                            break;\n                        case 'COLOR':\n                            buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n                            color.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n                            uv.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD1':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n                            uv2.stride = sources[input.id].stride;\n                            break;\n                        }\n                    }\n                }\n                if (position.array.length > 0)\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));\n                if (normal.array.length > 0)\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));\n                if (color.array.length > 0)\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));\n                if (uv.array.length > 0)\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));\n                if (uv2.array.length > 0)\n                    geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));\n                if (skinIndex.array.length > 0)\n                    geometry.setAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n                if (skinWeight.array.length > 0)\n                    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n                build.data = geometry;\n                build.type = primitives[0].type;\n                build.materialKeys = materialKeys;\n                return build;\n            }\n            function buildGeometryData(primitive, source, offset, array) {\n                var indices = primitive.p;\n                var stride = primitive.stride;\n                var vcount = primitive.vcount;\n                function pushVector(i) {\n                    var index = indices[i + offset] * sourceStride;\n                    var length = index + sourceStride;\n                    for (; index < length; index++) {\n                        array.push(sourceArray[index]);\n                    }\n                }\n                var sourceArray = source.array;\n                var sourceStride = source.stride;\n                if (primitive.vcount !== undefined) {\n                    var index = 0;\n                    for (var i = 0, l = vcount.length; i < l; i++) {\n                        var count = vcount[i];\n                        if (count === 4) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            var d = index + stride * 3;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(d);\n                            pushVector(b);\n                            pushVector(c);\n                            pushVector(d);\n                        } else if (count === 3) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(c);\n                        } else if (count > 4) {\n                            for (var k = 1, kl = count - 2; k <= kl; k++) {\n                                var a = index + stride * 0;\n                                var b = index + stride * k;\n                                var c = index + stride * (k + 1);\n                                pushVector(a);\n                                pushVector(b);\n                                pushVector(c);\n                            }\n                        }\n                        index += stride * count;\n                    }\n                } else {\n                    for (var i = 0, l = indices.length; i < l; i += stride) {\n                        pushVector(i);\n                    }\n                }\n            }\n            function getGeometry(id) {\n                return getBuild(library.geometries[id], buildGeometry);\n            }\n            function parseKinematicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    joints: {},\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parseKinematicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n                library.kinematicsModels[xml.getAttribute('id')] = data;\n            }\n            function buildKinematicsModel(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsModel(id) {\n                return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n            }\n            function parseKinematicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'joint':\n                        data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n                        break;\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsJoint(xml) {\n                var data;\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'prismatic':\n                    case 'revolute':\n                        data = parseKinematicsJointParameter(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsJointParameter(xml, data) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    axis: new THREE.Vector3(),\n                    limits: {\n                        min: 0,\n                        max: 0\n                    },\n                    type: xml.nodeName,\n                    static: false,\n                    zeroPosition: 0,\n                    middlePosition: 0\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var array = parseFloats(child.textContent);\n                        data.axis.fromArray(array);\n                        break;\n                    case 'limits':\n                        var max = child.getElementsByTagName('max')[0];\n                        var min = child.getElementsByTagName('min')[0];\n                        data.limits.max = parseFloat(max.textContent);\n                        data.limits.min = parseFloat(min.textContent);\n                        break;\n                    }\n                }\n                if (data.limits.min >= data.limits.max) {\n                    data.static = true;\n                }\n                data.middlePosition = (data.limits.min + data.limits.max) / 2;\n                return data;\n            }\n            function parseKinematicsLink(xml) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    attachments: [],\n                    transforms: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'attachment_full':\n                        data.attachments.push(parseKinematicsAttachment(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsAttachment(xml) {\n                var data = {\n                    joint: xml.getAttribute('joint').split('/').pop(),\n                    transforms: [],\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsTransform(xml) {\n                var data = { type: xml.nodeName };\n                var array = parseFloats(xml.textContent);\n                switch (data.type) {\n                case 'matrix':\n                    data.obj = new THREE.Matrix4();\n                    data.obj.fromArray(array).transpose();\n                    break;\n                case 'translate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    break;\n                case 'rotate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    data.angle = THREE.MathUtils.degToRad(array[3]);\n                    break;\n                }\n                return data;\n            }\n            function parsePhysicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    rigidBodies: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'rigid_body':\n                        data.rigidBodies[child.getAttribute('name')] = {};\n                        parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n                        break;\n                    }\n                }\n                library.physicsModels[xml.getAttribute('id')] = data;\n            }\n            function parsePhysicsRigidBody(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parsePhysicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n            }\n            function parsePhysicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'inertia':\n                        data.inertia = parseFloats(child.textContent);\n                        break;\n                    case 'mass':\n                        data.mass = parseFloats(child.textContent)[0];\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsScene(xml) {\n                var data = { bindJointAxis: [] };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_joint_axis':\n                        data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n                        break;\n                    }\n                }\n                library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n            }\n            function parseKinematicsBindJointAxis(xml) {\n                var data = { target: xml.getAttribute('target').split('/').pop() };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var param = child.getElementsByTagName('param')[0];\n                        data.axis = param.textContent;\n                        var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n                        data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildKinematicsScene(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsScene(id) {\n                return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n            }\n            function setupKinematics() {\n                var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n                var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n                var visualSceneId = Object.keys(library.visualScenes)[0];\n                if (kinematicsModelId === undefined || kinematicsSceneId === undefined)\n                    return;\n                var kinematicsModel = getKinematicsModel(kinematicsModelId);\n                var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n                var visualScene = getVisualScene(visualSceneId);\n                var bindJointAxis = kinematicsScene.bindJointAxis;\n                var jointMap = {};\n                for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n                    var axis = bindJointAxis[i];\n                    var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n                    if (targetElement) {\n                        var parentVisualElement = targetElement.parentElement;\n                        connect(axis.jointIndex, parentVisualElement);\n                    }\n                }\n                function connect(jointIndex, visualElement) {\n                    var visualElementName = visualElement.getAttribute('name');\n                    var joint = kinematicsModel.joints[jointIndex];\n                    visualScene.traverse(function (object) {\n                        if (object.name === visualElementName) {\n                            jointMap[jointIndex] = {\n                                object: object,\n                                transforms: buildTransformList(visualElement),\n                                joint: joint,\n                                position: joint.zeroPosition\n                            };\n                        }\n                    });\n                }\n                var m0 = new THREE.Matrix4();\n                kinematics = {\n                    joints: kinematicsModel && kinematicsModel.joints,\n                    getJointValue: function (jointIndex) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            return jointData.position;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n                        }\n                    },\n                    setJointValue: function (jointIndex, value) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            var joint = jointData.joint;\n                            if (value > joint.limits.max || value < joint.limits.min) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n                            } else if (joint.static) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n                            } else {\n                                var object = jointData.object;\n                                var axis = joint.axis;\n                                var transforms = jointData.transforms;\n                                matrix.identity();\n                                for (var i = 0; i < transforms.length; i++) {\n                                    var transform = transforms[i];\n                                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                                        switch (joint.type) {\n                                        case 'revolute':\n                                            matrix.multiply(m0.makeRotationAxis(axis, THREE.MathUtils.degToRad(value)));\n                                            break;\n                                        case 'prismatic':\n                                            matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                                            break;\n                                        default:\n                                            console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                                            break;\n                                        }\n                                    } else {\n                                        switch (transform.type) {\n                                        case 'matrix':\n                                            matrix.multiply(transform.obj);\n                                            break;\n                                        case 'translate':\n                                            matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                                            break;\n                                        case 'scale':\n                                            matrix.scale(transform.obj);\n                                            break;\n                                        case 'rotate':\n                                            matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                                            break;\n                                        }\n                                    }\n                                }\n                                object.matrix.copy(matrix);\n                                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                                jointMap[jointIndex].position = value;\n                            }\n                        } else {\n                            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n                        }\n                    }\n                };\n            }\n            function buildTransformList(node) {\n                var transforms = [];\n                var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        var matrix = new THREE.Matrix4().fromArray(array).transpose();\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: matrix\n                        });\n                        break;\n                    case 'translate':\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector\n                        });\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector,\n                            angle: angle\n                        });\n                        break;\n                    }\n                }\n                return transforms;\n            }\n            function prepareNodes(xml) {\n                var elements = xml.getElementsByTagName('node');\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i];\n                    if (element.hasAttribute('id') === false) {\n                        element.setAttribute('id', generateId());\n                    }\n                }\n            }\n            var matrix = new THREE.Matrix4();\n            var vector = new THREE.Vector3();\n            function parseNode(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    type: xml.getAttribute('type'),\n                    id: xml.getAttribute('id'),\n                    sid: xml.getAttribute('sid'),\n                    matrix: new THREE.Matrix4(),\n                    nodes: [],\n                    instanceCameras: [],\n                    instanceControllers: [],\n                    instanceLights: [],\n                    instanceGeometries: [],\n                    instanceNodes: [],\n                    transforms: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'node':\n                        data.nodes.push(child.getAttribute('id'));\n                        parseNode(child);\n                        break;\n                    case 'instance_camera':\n                        data.instanceCameras.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_controller':\n                        data.instanceControllers.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_light':\n                        data.instanceLights.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_geometry':\n                        data.instanceGeometries.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_node':\n                        data.instanceNodes.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.multiply(matrix.fromArray(array).transpose());\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'translate':\n                        var array = parseFloats(child.textContent);\n                        vector.fromArray(array);\n                        data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.scale(vector.fromArray(array));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'extra':\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                if (hasNode(data.id)) {\n                    console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n                } else {\n                    library.nodes[data.id] = data;\n                }\n                return data;\n            }\n            function parseNodeInstance(xml) {\n                var data = {\n                    id: parseId(xml.getAttribute('url')),\n                    materials: {},\n                    skeletons: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'bind_material':\n                        var instances = child.getElementsByTagName('instance_material');\n                        for (var j = 0; j < instances.length; j++) {\n                            var instance = instances[j];\n                            var symbol = instance.getAttribute('symbol');\n                            var target = instance.getAttribute('target');\n                            data.materials[symbol] = parseId(target);\n                        }\n                        break;\n                    case 'skeleton':\n                        data.skeletons.push(parseId(child.textContent));\n                        break;\n                    default:\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildSkeleton(skeletons, joints) {\n                var boneData = [];\n                var sortedBoneData = [];\n                var i, j, data;\n                for (i = 0; i < skeletons.length; i++) {\n                    var skeleton = skeletons[i];\n                    var root;\n                    if (hasNode(skeleton)) {\n                        root = getNode(skeleton);\n                        buildBoneHierarchy(root, joints, boneData);\n                    } else if (hasVisualScene(skeleton)) {\n                        var visualScene = library.visualScenes[skeleton];\n                        var children = visualScene.children;\n                        for (var j = 0; j < children.length; j++) {\n                            var child = children[j];\n                            if (child.type === 'JOINT') {\n                                var root = getNode(child.id);\n                                buildBoneHierarchy(root, joints, boneData);\n                            }\n                        }\n                    } else {\n                        console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n                    }\n                }\n                for (i = 0; i < joints.length; i++) {\n                    for (j = 0; j < boneData.length; j++) {\n                        data = boneData[j];\n                        if (data.bone.name === joints[i].name) {\n                            sortedBoneData[i] = data;\n                            data.processed = true;\n                            break;\n                        }\n                    }\n                }\n                for (i = 0; i < boneData.length; i++) {\n                    data = boneData[i];\n                    if (data.processed === false) {\n                        sortedBoneData.push(data);\n                        data.processed = true;\n                    }\n                }\n                var bones = [];\n                var boneInverses = [];\n                for (i = 0; i < sortedBoneData.length; i++) {\n                    data = sortedBoneData[i];\n                    bones.push(data.bone);\n                    boneInverses.push(data.boneInverse);\n                }\n                return new THREE.Skeleton(bones, boneInverses);\n            }\n            function buildBoneHierarchy(root, joints, boneData) {\n                root.traverse(function (object) {\n                    if (object.isBone === true) {\n                        var boneInverse;\n                        for (var i = 0; i < joints.length; i++) {\n                            var joint = joints[i];\n                            if (joint.name === object.name) {\n                                boneInverse = joint.boneInverse;\n                                break;\n                            }\n                        }\n                        if (boneInverse === undefined) {\n                            boneInverse = new THREE.Matrix4();\n                        }\n                        boneData.push({\n                            bone: object,\n                            boneInverse: boneInverse,\n                            processed: false\n                        });\n                    }\n                });\n            }\n            function buildNode(data) {\n                var objects = [];\n                var matrix = data.matrix;\n                var nodes = data.nodes;\n                var type = data.type;\n                var instanceCameras = data.instanceCameras;\n                var instanceControllers = data.instanceControllers;\n                var instanceLights = data.instanceLights;\n                var instanceGeometries = data.instanceGeometries;\n                var instanceNodes = data.instanceNodes;\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                    objects.push(getNode(nodes[i]));\n                }\n                for (var i = 0, l = instanceCameras.length; i < l; i++) {\n                    var instanceCamera = getCamera(instanceCameras[i]);\n                    if (instanceCamera !== null) {\n                        objects.push(instanceCamera.clone());\n                    }\n                }\n                for (var i = 0, l = instanceControllers.length; i < l; i++) {\n                    var instance = instanceControllers[i];\n                    var controller = getController(instance.id);\n                    var geometries = getGeometry(controller.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    var skeletons = instance.skeletons;\n                    var joints = controller.skin.joints;\n                    var skeleton = buildSkeleton(skeletons, joints);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        var object = newObjects[j];\n                        if (object.isSkinnedMesh) {\n                            object.bind(skeleton, controller.skin.bindMatrix);\n                            object.normalizeSkinWeights();\n                        }\n                        objects.push(object);\n                    }\n                }\n                for (var i = 0, l = instanceLights.length; i < l; i++) {\n                    var instanceLight = getLight(instanceLights[i]);\n                    if (instanceLight !== null) {\n                        objects.push(instanceLight.clone());\n                    }\n                }\n                for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n                    var instance = instanceGeometries[i];\n                    var geometries = getGeometry(instance.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        objects.push(newObjects[j]);\n                    }\n                }\n                for (var i = 0, l = instanceNodes.length; i < l; i++) {\n                    objects.push(getNode(instanceNodes[i]).clone());\n                }\n                var object;\n                if (nodes.length === 0 && objects.length === 1) {\n                    object = objects[0];\n                } else {\n                    object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();\n                    for (var i = 0; i < objects.length; i++) {\n                        object.add(objects[i]);\n                    }\n                }\n                if (object.name === '') {\n                    object.name = type === 'JOINT' ? data.sid : data.name;\n                }\n                object.matrix.copy(matrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                return object;\n            }\n            var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });\n            function resolveMaterialBinding(keys, instanceMaterials) {\n                var materials = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var id = instanceMaterials[keys[i]];\n                    if (id === undefined) {\n                        console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n                        materials.push(fallbackMaterial);\n                    } else {\n                        materials.push(getMaterial(id));\n                    }\n                }\n                return materials;\n            }\n            function buildObjects(geometries, instanceMaterials) {\n                var objects = [];\n                for (var type in geometries) {\n                    var geometry = geometries[type];\n                    var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);\n                    if (materials.length === 0) {\n                        if (type === 'lines' || type === 'linestrips') {\n                            materials.push(new THREE.LineBasicMaterial());\n                        } else {\n                            materials.push(new THREE.MeshPhongMaterial());\n                        }\n                    }\n                    var skinning = geometry.data.attributes.skinIndex !== undefined;\n                    if (skinning) {\n                        for (var i = 0, l = materials.length; i < l; i++) {\n                            materials[i].skinning = true;\n                        }\n                    }\n                    var material = materials.length === 1 ? materials[0] : materials;\n                    var object;\n                    switch (type) {\n                    case 'lines':\n                        object = new THREE.LineSegments(geometry.data, material);\n                        break;\n                    case 'linestrips':\n                        object = new THREE.Line(geometry.data, material);\n                        break;\n                    case 'triangles':\n                    case 'polylist':\n                        if (skinning) {\n                            object = new THREE.SkinnedMesh(geometry.data, material);\n                        } else {\n                            object = new THREE.Mesh(geometry.data, material);\n                        }\n                        break;\n                    }\n                    objects.push(object);\n                }\n                return objects;\n            }\n            function hasNode(id) {\n                return library.nodes[id] !== undefined;\n            }\n            function getNode(id) {\n                return getBuild(library.nodes[id], buildNode);\n            }\n            function parseVisualScene(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    children: []\n                };\n                prepareNodes(xml);\n                var elements = getElementsByTagName(xml, 'node');\n                for (var i = 0; i < elements.length; i++) {\n                    data.children.push(parseNode(elements[i]));\n                }\n                library.visualScenes[xml.getAttribute('id')] = data;\n            }\n            function buildVisualScene(data) {\n                var group = new THREE.Group();\n                group.name = data.name;\n                var children = data.children;\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n                    group.add(getNode(child.id));\n                }\n                return group;\n            }\n            function hasVisualScene(id) {\n                return library.visualScenes[id] !== undefined;\n            }\n            function getVisualScene(id) {\n                return getBuild(library.visualScenes[id], buildVisualScene);\n            }\n            function parseScene(xml) {\n                var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n                return getVisualScene(parseId(instance.getAttribute('url')));\n            }\n            function setupAnimations() {\n                var clips = library.clips;\n                if (isEmpty(clips) === true) {\n                    if (isEmpty(library.animations) === false) {\n                        var tracks = [];\n                        for (var id in library.animations) {\n                            var animationTracks = getAnimation(id);\n                            for (var i = 0, l = animationTracks.length; i < l; i++) {\n                                tracks.push(animationTracks[i]);\n                            }\n                        }\n                        animations.push(new THREE.AnimationClip('default', -1, tracks));\n                    }\n                } else {\n                    for (var id in clips) {\n                        animations.push(getAnimationClip(id));\n                    }\n                }\n            }\n            function parserErrorToText(parserError) {\n                var result = '';\n                var stack = [parserError];\n                while (stack.length) {\n                    var node = stack.shift();\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        result += node.textContent;\n                    } else {\n                        result += '\\n';\n                        stack.push.apply(stack, node.childNodes);\n                    }\n                }\n                return result.trim();\n            }\n            if (text.length === 0) {\n                return { scene: new THREE.Scene() };\n            }\n            var xml = new DOMParser().parseFromString(text, 'application/xml');\n            var collada = getElementsByTagName(xml, 'COLLADA')[0];\n            var parserError = xml.getElementsByTagName('parsererror')[0];\n            if (parserError !== undefined) {\n                var errorElement = getElementsByTagName(parserError, 'div')[0];\n                var errorText;\n                if (errorElement) {\n                    errorText = errorElement.textContent;\n                } else {\n                    errorText = parserErrorToText(parserError);\n                }\n                console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n                return null;\n            }\n            var version = collada.getAttribute('version');\n            console.log('THREE.ColladaLoader: File version', version);\n            var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var tgaLoader;\n            if (TGALoader) {\n                tgaLoader = new TGALoader(this.manager);\n                tgaLoader.setPath(this.resourcePath || path);\n            }\n            var animations = [];\n            var kinematics = {};\n            var count = 0;\n            var library = {\n                animations: {},\n                clips: {},\n                controllers: {},\n                images: {},\n                effects: {},\n                materials: {},\n                cameras: {},\n                lights: {},\n                geometries: {},\n                nodes: {},\n                visualScenes: {},\n                kinematicsModels: {},\n                physicsModels: {},\n                kinematicsScenes: {}\n            };\n            parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n            parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n            parseLibrary(collada, 'library_controllers', 'controller', parseController);\n            parseLibrary(collada, 'library_images', 'image', parseImage);\n            parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n            parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n            parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n            parseLibrary(collada, 'library_lights', 'light', parseLight);\n            parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n            parseLibrary(collada, 'library_nodes', 'node', parseNode);\n            parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n            parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n            parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n            parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n            buildLibrary(library.animations, buildAnimation);\n            buildLibrary(library.clips, buildAnimationClip);\n            buildLibrary(library.controllers, buildController);\n            buildLibrary(library.images, buildImage);\n            buildLibrary(library.effects, buildEffect);\n            buildLibrary(library.materials, buildMaterial);\n            buildLibrary(library.cameras, buildCamera);\n            buildLibrary(library.lights, buildLight);\n            buildLibrary(library.geometries, buildGeometry);\n            buildLibrary(library.visualScenes, buildVisualScene);\n            setupAnimations();\n            setupKinematics();\n            var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n            if (asset.upAxis === 'Z_UP') {\n                scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            }\n            scene.scale.multiplyScalar(asset.unit);\n            return {\n                animations: animations,\n                kinematics: kinematics,\n                library: library,\n                scene: scene\n            };\n        }\n    });\n    return ColladaLoader;\n});\ndefine('skylark-threejs-ex/loaders/DRACOLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DRACOLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.decoderPath = '';\n        this.decoderConfig = {};\n        this.decoderBinary = null;\n        this.decoderPending = null;\n        this.workerLimit = 4;\n        this.workerPool = [];\n        this.workerNextTaskID = 1;\n        this.workerSourceURL = '';\n        this.defaultAttributeIDs = {\n            position: 'POSITION',\n            normal: 'NORMAL',\n            color: 'COLOR',\n            uv: 'TEX_COORD'\n        };\n        this.defaultAttributeTypes = {\n            position: 'Float32Array',\n            normal: 'Float32Array',\n            color: 'Float32Array',\n            uv: 'Float32Array'\n        };\n    };\n    DRACOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: DRACOLoader,\n        setDecoderPath: function (path) {\n            this.decoderPath = path;\n            return this;\n        },\n        setDecoderConfig: function (config) {\n            this.decoderConfig = config;\n            return this;\n        },\n        setWorkerLimit: function (workerLimit) {\n            this.workerLimit = workerLimit;\n            return this;\n        },\n        setVerbosity: function () {\n            console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n        },\n        setDrawMode: function () {\n            console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n        },\n        setSkipDequantization: function () {\n            console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n        },\n        load: function (url, onLoad, onProgress, onError) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            if (this.crossOrigin === 'use-credentials') {\n                loader.setWithCredentials(true);\n            }\n            loader.load(url, buffer => {\n                var taskConfig = {\n                    attributeIDs: this.defaultAttributeIDs,\n                    attributeTypes: this.defaultAttributeTypes,\n                    useUniqueIDs: false\n                };\n                this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n            }, onProgress, onError);\n        },\n        decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {\n            var taskConfig = {\n                attributeIDs: attributeIDs || this.defaultAttributeIDs,\n                attributeTypes: attributeTypes || this.defaultAttributeTypes,\n                useUniqueIDs: !!attributeIDs\n            };\n            this.decodeGeometry(buffer, taskConfig).then(callback);\n        },\n        decodeGeometry: function (buffer, taskConfig) {\n            for (var attribute in taskConfig.attributeTypes) {\n                var type = taskConfig.attributeTypes[attribute];\n                if (type.BYTES_PER_ELEMENT !== undefined) {\n                    taskConfig.attributeTypes[attribute] = type.name;\n                }\n            }\n            var taskKey = JSON.stringify(taskConfig);\n            if (DRACOLoader.taskCache.has(buffer)) {\n                var cachedTask = DRACOLoader.taskCache.get(buffer);\n                if (cachedTask.key === taskKey) {\n                    return cachedTask.promise;\n                } else if (buffer.byteLength === 0) {\n                    throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n                }\n            }\n            var worker;\n            var taskID = this.workerNextTaskID++;\n            var taskCost = buffer.byteLength;\n            var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n                worker = _worker;\n                return new Promise((resolve, reject) => {\n                    worker._callbacks[taskID] = {\n                        resolve,\n                        reject\n                    };\n                    worker.postMessage({\n                        type: 'decode',\n                        id: taskID,\n                        taskConfig,\n                        buffer\n                    }, [buffer]);\n                });\n            }).then(message => this._createGeometry(message.geometry));\n            geometryPending.finally(() => {\n                if (worker && taskID) {\n                    this._releaseTask(worker, taskID);\n                }\n            });\n            DRACOLoader.taskCache.set(buffer, {\n                key: taskKey,\n                promise: geometryPending\n            });\n            return geometryPending;\n        },\n        _createGeometry: function (geometryData) {\n            var geometry = new THREE.BufferGeometry();\n            if (geometryData.index) {\n                geometry.setIndex(new THREE.BufferAttribute(geometryData.index.array, 1));\n            }\n            for (var i = 0; i < geometryData.attributes.length; i++) {\n                var attribute = geometryData.attributes[i];\n                var name = attribute.name;\n                var array = attribute.array;\n                var itemSize = attribute.itemSize;\n                geometry.setAttribute(name, new THREE.BufferAttribute(array, itemSize));\n            }\n            return geometry;\n        },\n        _loadLibrary: function (url, responseType) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.decoderPath);\n            loader.setResponseType(responseType);\n            return new Promise((resolve, reject) => {\n                loader.load(url, resolve, undefined, reject);\n            });\n        },\n        preload: function () {\n            this._initDecoder();\n            return this;\n        },\n        _initDecoder: function () {\n            if (this.decoderPending)\n                return this.decoderPending;\n            var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n            var librariesPending = [];\n            if (useJS) {\n                librariesPending.push(this._loadLibrary('draco_decoder', 'text'));\n            } else {\n                librariesPending.push(this._loadLibrary('draco_wasm_wrapper', 'text'));\n                librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n            }\n            this.decoderPending = Promise.all(librariesPending).then(libraries => {\n                var jsContent = libraries[0];\n                if (!useJS) {\n                    this.decoderConfig.wasmBinary = libraries[1];\n                }\n                var fn = DRACOLoader.DRACOWorker.toString();\n                var body = [\n                    '/* draco decoder */',\n                    jsContent,\n                    '',\n                    '/* worker */',\n                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n                ].join('\\n');\n                this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n            });\n            return this.decoderPending;\n        },\n        _getWorker: function (taskID, taskCost) {\n            return this._initDecoder().then(() => {\n                if (this.workerPool.length < this.workerLimit) {\n                    var worker = new Worker(this.workerSourceURL);\n                    worker._callbacks = {};\n                    worker._taskCosts = {};\n                    worker._taskLoad = 0;\n                    worker.postMessage({\n                        type: 'init',\n                        decoderConfig: this.decoderConfig\n                    });\n                    worker.onmessage = function (e) {\n                        var message = e.data;\n                        switch (message.type) {\n                        case 'decode':\n                            worker._callbacks[message.id].resolve(message);\n                            break;\n                        case 'error':\n                            worker._callbacks[message.id].reject(message);\n                            break;\n                        default:\n                            console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n                        }\n                    };\n                    this.workerPool.push(worker);\n                } else {\n                    this.workerPool.sort(function (a, b) {\n                        return a._taskLoad > b._taskLoad ? -1 : 1;\n                    });\n                }\n                var worker = this.workerPool[this.workerPool.length - 1];\n                worker._taskCosts[taskID] = taskCost;\n                worker._taskLoad += taskCost;\n                return worker;\n            });\n        },\n        _releaseTask: function (worker, taskID) {\n            worker._taskLoad -= worker._taskCosts[taskID];\n            delete worker._callbacks[taskID];\n            delete worker._taskCosts[taskID];\n        },\n        debug: function () {\n            console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n        },\n        dispose: function () {\n            for (var i = 0; i < this.workerPool.length; ++i) {\n                this.workerPool[i].terminate();\n            }\n            this.workerPool.length = 0;\n            return this;\n        }\n    });\n    DRACOLoader.DRACOWorker = function () {\n        var decoderConfig;\n        var decoderPending;\n        onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n            case 'init':\n                decoderConfig = message.decoderConfig;\n                decoderPending = new Promise(function (resolve) {\n                    decoderConfig.onModuleLoaded = function (draco) {\n                        resolve({ draco: draco });\n                    };\n                    DracoDecoderModule(decoderConfig);\n                });\n                break;\n            case 'decode':\n                var buffer = message.buffer;\n                var taskConfig = message.taskConfig;\n                decoderPending.then(module => {\n                    var draco = module.draco;\n                    var decoder = new draco.Decoder();\n                    var decoderBuffer = new draco.DecoderBuffer();\n                    decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n                    try {\n                        var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n                        var buffers = geometry.attributes.map(attr => attr.array.buffer);\n                        if (geometry.index)\n                            buffers.push(geometry.index.array.buffer);\n                        self.postMessage({\n                            type: 'decode',\n                            id: message.id,\n                            geometry\n                        }, buffers);\n                    } catch (error) {\n                        console.error(error);\n                        self.postMessage({\n                            type: 'error',\n                            id: message.id,\n                            error: error.message\n                        });\n                    } finally {\n                        draco.destroy(decoderBuffer);\n                        draco.destroy(decoder);\n                    }\n                });\n                break;\n            }\n        };\n        function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n            var attributeIDs = taskConfig.attributeIDs;\n            var attributeTypes = taskConfig.attributeTypes;\n            var dracoGeometry;\n            var decodingStatus;\n            var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n            if (geometryType === draco.TRIANGULAR_MESH) {\n                dracoGeometry = new draco.Mesh();\n                decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n            } else if (geometryType === draco.POINT_CLOUD) {\n                dracoGeometry = new draco.PointCloud();\n                decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n            } else {\n                throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n            }\n            if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n                throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n            }\n            var geometry = {\n                index: null,\n                attributes: []\n            };\n            for (var attributeName in attributeIDs) {\n                var attributeType = self[attributeTypes[attributeName]];\n                var attribute;\n                var attributeID;\n                if (taskConfig.useUniqueIDs) {\n                    attributeID = attributeIDs[attributeName];\n                    attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n                } else {\n                    attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n                    if (attributeID === -1)\n                        continue;\n                    attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n                }\n                geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n            }\n            if (geometryType === draco.TRIANGULAR_MESH) {\n                var numFaces = dracoGeometry.num_faces();\n                var numIndices = numFaces * 3;\n                var index = new Uint32Array(numIndices);\n                var indexArray = new draco.DracoInt32Array();\n                for (var i = 0; i < numFaces; ++i) {\n                    decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);\n                    for (var j = 0; j < 3; ++j) {\n                        index[i * 3 + j] = indexArray.GetValue(j);\n                    }\n                }\n                geometry.index = {\n                    array: index,\n                    itemSize: 1\n                };\n                draco.destroy(indexArray);\n            }\n            draco.destroy(dracoGeometry);\n            return geometry;\n        }\n        function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n            var numComponents = attribute.num_components();\n            var numPoints = dracoGeometry.num_points();\n            var numValues = numPoints * numComponents;\n            var dracoArray;\n            var array;\n            switch (attributeType) {\n            case Float32Array:\n                dracoArray = new draco.DracoFloat32Array();\n                decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Float32Array(numValues);\n                break;\n            case Int8Array:\n                dracoArray = new draco.DracoInt8Array();\n                decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int8Array(numValues);\n                break;\n            case Int16Array:\n                dracoArray = new draco.DracoInt16Array();\n                decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int16Array(numValues);\n                break;\n            case Int32Array:\n                dracoArray = new draco.DracoInt32Array();\n                decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int32Array(numValues);\n                break;\n            case Uint8Array:\n                dracoArray = new draco.DracoUInt8Array();\n                decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint8Array(numValues);\n                break;\n            case Uint16Array:\n                dracoArray = new draco.DracoUInt16Array();\n                decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint16Array(numValues);\n                break;\n            case Uint32Array:\n                dracoArray = new draco.DracoUInt32Array();\n                decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint32Array(numValues);\n                break;\n            default:\n                throw new Error('THREE.DRACOLoader: Unexpected attribute type.');\n            }\n            for (var i = 0; i < numValues; i++) {\n                array[i] = dracoArray.GetValue(i);\n            }\n            draco.destroy(dracoArray);\n            return {\n                name: attributeName,\n                array: array,\n                itemSize: numComponents\n            };\n        }\n    };\n    DRACOLoader.taskCache = new WeakMap();\n    DRACOLoader.setDecoderPath = function () {\n        console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.setDecoderConfig = function () {\n        console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.releaseDecoderModule = function () {\n        console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.getDecoderModule = function () {\n        console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n    };\n    return DRACOLoader;\n});\ndefine('skylark-threejs-ex/loaders/FBXLoader',[\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate',\n    '../curves/NURBSCurve'\n], function (\n    THREE, \n    Inflate, \n    NURBSCurve\n) {\n    'use strict';\n    var FBXLoader = function () {\n        var fbxTree;\n        var connections;\n        var sceneGraph;\n        function FBXLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: FBXLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var self = this;\n                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(self.path);\n                loader.setResponseType('arraybuffer');\n                loader.load(url, function (buffer) {\n                    try {\n                        onLoad(self.parse(buffer, path));\n                    } catch (error) {\n                        setTimeout(function () {\n                            if (onError)\n                                onError(error);\n                            self.manager.itemError(url);\n                        }, 0);\n                    }\n                }, onProgress, onError);\n            },\n            parse: function (FBXBuffer, path) {\n                if (isFbxFormatBinary(FBXBuffer)) {\n                    fbxTree = new BinaryParser().parse(FBXBuffer);\n                } else {\n                    var FBXText = convertArrayBufferToString(FBXBuffer);\n                    if (!isFbxFormatASCII(FBXText)) {\n                        throw new Error('THREE.FBXLoader: Unknown format.');\n                    }\n                    if (getFbxVersion(FBXText) < 7000) {\n                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n                    }\n                    fbxTree = new TextParser().parse(FBXText);\n                }\n                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n            }\n        });\n        function FBXTreeParser(textureLoader, manager) {\n            this.textureLoader = textureLoader;\n            this.manager = manager;\n        }\n        FBXTreeParser.prototype = {\n            constructor: FBXTreeParser,\n            parse: function () {\n                connections = this.parseConnections();\n                var images = this.parseImages();\n                var textures = this.parseTextures(images);\n                var materials = this.parseMaterials(textures);\n                var deformers = this.parseDeformers();\n                var geometryMap = new GeometryParser().parse(deformers);\n                this.parseScene(deformers, geometryMap, materials);\n                return sceneGraph;\n            },\n            parseConnections: function () {\n                var connectionMap = new Map();\n                if ('Connections' in fbxTree) {\n                    var rawConnections = fbxTree.Connections.connections;\n                    rawConnections.forEach(function (rawConnection) {\n                        var fromID = rawConnection[0];\n                        var toID = rawConnection[1];\n                        var relationship = rawConnection[2];\n                        if (!connectionMap.has(fromID)) {\n                            connectionMap.set(fromID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var parentRelationship = {\n                            ID: toID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(fromID).parents.push(parentRelationship);\n                        if (!connectionMap.has(toID)) {\n                            connectionMap.set(toID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var childRelationship = {\n                            ID: fromID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(toID).children.push(childRelationship);\n                    });\n                }\n                return connectionMap;\n            },\n            parseImages: function () {\n                var images = {};\n                var blobs = {};\n                if ('Video' in fbxTree.Objects) {\n                    var videoNodes = fbxTree.Objects.Video;\n                    for (var nodeID in videoNodes) {\n                        var videoNode = videoNodes[nodeID];\n                        var id = parseInt(nodeID);\n                        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n                        if ('Content' in videoNode) {\n                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n                            if (arrayBufferContent || base64Content) {\n                                var image = this.parseImage(videoNodes[nodeID]);\n                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n                            }\n                        }\n                    }\n                }\n                for (var id in images) {\n                    var filename = images[id];\n                    if (blobs[filename] !== undefined)\n                        images[id] = blobs[filename];\n                    else\n                        images[id] = images[id].split('\\\\').pop();\n                }\n                return images;\n            },\n            parseImage: function (videoNode) {\n                var content = videoNode.Content;\n                var fileName = videoNode.RelativeFilename || videoNode.Filename;\n                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n                var type;\n                switch (extension) {\n                case 'bmp':\n                    type = 'image/bmp';\n                    break;\n                case 'jpg':\n                case 'jpeg':\n                    type = 'image/jpeg';\n                    break;\n                case 'png':\n                    type = 'image/png';\n                    break;\n                case 'tif':\n                    type = 'image/tiff';\n                    break;\n                case 'tga':\n                    if (this.manager.getHandler('.tga') === null) {\n                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n                    }\n                    type = 'image/tga';\n                    break;\n                default:\n                    console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n                    return;\n                }\n                if (typeof content === 'string') {\n                    return 'data:' + type + ';base64,' + content;\n                } else {\n                    var array = new Uint8Array(content);\n                    return window.URL.createObjectURL(new Blob([array], { type: type }));\n                }\n            },\n            parseTextures: function (images) {\n                var textureMap = new Map();\n                if ('Texture' in fbxTree.Objects) {\n                    var textureNodes = fbxTree.Objects.undefined;\n                    for (var nodeID in textureNodes) {\n                        var texture = this.parseTexture(textureNodes[nodeID], images);\n                        textureMap.set(parseInt(nodeID), texture);\n                    }\n                }\n                return textureMap;\n            },\n            parseTexture: function (textureNode, images) {\n                var texture = this.loadTexture(textureNode, images);\n                texture.ID = textureNode.id;\n                texture.name = textureNode.attrName;\n                var wrapModeU = textureNode.WrapModeU;\n                var wrapModeV = textureNode.WrapModeV;\n                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                if ('Scaling' in textureNode) {\n                    var values = textureNode.Scaling.value;\n                    texture.repeat.x = values[0];\n                    texture.repeat.y = values[1];\n                }\n                return texture;\n            },\n            loadTexture: function (textureNode, images) {\n                var fileName;\n                var currentPath = this.textureLoader.path;\n                var children = connections.get(textureNode.id).children;\n                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n                    fileName = images[children[0].ID];\n                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n                        this.textureLoader.setPath(undefined);\n                    }\n                }\n                var texture;\n                var extension = textureNode.FileName.slice(-3).toLowerCase();\n                if (extension === 'tga') {\n                    var loader = this.manager.getHandler('.tga');\n                    if (loader === null) {\n                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n                        texture = new THREE.Texture();\n                    } else {\n                        texture = loader.load(fileName);\n                    }\n                } else if (extension === 'psd') {\n                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n                    texture = new THREE.Texture();\n                } else {\n                    texture = this.textureLoader.load(fileName);\n                }\n                this.textureLoader.setPath(currentPath);\n                return texture;\n            },\n            parseMaterials: function (textureMap) {\n                var materialMap = new Map();\n                if ('Material' in fbxTree.Objects) {\n                    var materialNodes = fbxTree.Objects.Material;\n                    for (var nodeID in materialNodes) {\n                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n                        if (material !== null)\n                            materialMap.set(parseInt(nodeID), material);\n                    }\n                }\n                return materialMap;\n            },\n            parseMaterial: function (materialNode, textureMap) {\n                var ID = materialNode.id;\n                var name = materialNode.attrName;\n                var type = materialNode.ShadingModel;\n                if (typeof type === 'object') {\n                    type = type.value;\n                }\n                if (!connections.has(ID))\n                    return null;\n                var parameters = this.parseParameters(materialNode, textureMap, ID);\n                var material;\n                switch (type.toLowerCase()) {\n                case 'phong':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                }\n                material.setValues(parameters);\n                material.name = name;\n                return material;\n            },\n            parseParameters: function (materialNode, textureMap, ID) {\n                var parameters = {};\n                if (materialNode.BumpFactor) {\n                    parameters.bumpScale = materialNode.BumpFactor.value;\n                }\n                if (materialNode.Diffuse) {\n                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n                }\n                if (materialNode.DisplacementFactor) {\n                    parameters.displacementScale = materialNode.DisplacementFactor.value;\n                }\n                if (materialNode.Emissive) {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n                }\n                if (materialNode.EmissiveFactor) {\n                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n                }\n                if (materialNode.Opacity) {\n                    parameters.opacity = parseFloat(materialNode.Opacity.value);\n                }\n                if (parameters.opacity < 1) {\n                    parameters.transparent = true;\n                }\n                if (materialNode.ReflectionFactor) {\n                    parameters.reflectivity = materialNode.ReflectionFactor.value;\n                }\n                if (materialNode.Shininess) {\n                    parameters.shininess = materialNode.Shininess.value;\n                }\n                if (materialNode.Specular) {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n                }\n                var self = this;\n                connections.get(ID).children.forEach(function (child) {\n                    var type = child.relationship;\n                    switch (type) {\n                    case 'Bump':\n                        parameters.bumpMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'Maya|TEX_ao_map':\n                        parameters.aoMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'DiffuseColor':\n                    case 'Maya|TEX_color_map':\n                        parameters.map = self.getTexture(textureMap, child.ID);\n                        parameters.map.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'DisplacementColor':\n                        parameters.displacementMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'EmissiveColor':\n                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'NormalMap':\n                    case 'Maya|TEX_normal_map':\n                        parameters.normalMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'ReflectionColor':\n                        parameters.envMap = self.getTexture(textureMap, child.ID);\n                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n                        parameters.envMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'SpecularColor':\n                        parameters.specularMap = self.getTexture(textureMap, child.ID);\n                        parameters.specularMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'TransparentColor':\n                        parameters.alphaMap = self.getTexture(textureMap, child.ID);\n                        parameters.transparent = true;\n                        break;\n                    case 'AmbientColor':\n                    case 'ShininessExponent':\n                    case 'SpecularFactor':\n                    case 'VectorDisplacementColor':\n                    default:\n                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n                        break;\n                    }\n                });\n                return parameters;\n            },\n            getTexture: function (textureMap, id) {\n                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n                    id = connections.get(id).children[0].ID;\n                }\n                return textureMap.get(id);\n            },\n            parseDeformers: function () {\n                var skeletons = {};\n                var morphTargets = {};\n                if ('Deformer' in fbxTree.Objects) {\n                    var DeformerNodes = fbxTree.Objects.Deformer;\n                    for (var nodeID in DeformerNodes) {\n                        var deformerNode = DeformerNodes[nodeID];\n                        var relationships = connections.get(parseInt(nodeID));\n                        if (deformerNode.attrType === 'Skin') {\n                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n                            skeleton.ID = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n                            skeleton.geometryID = relationships.parents[0].ID;\n                            skeletons[nodeID] = skeleton;\n                        } else if (deformerNode.attrType === 'BlendShape') {\n                            var morphTarget = { id: nodeID };\n                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n                            morphTarget.id = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n                            morphTargets[nodeID] = morphTarget;\n                        }\n                    }\n                }\n                return {\n                    skeletons: skeletons,\n                    morphTargets: morphTargets\n                };\n            },\n            parseSkeleton: function (relationships, deformerNodes) {\n                var rawBones = [];\n                relationships.children.forEach(function (child) {\n                    var boneNode = deformerNodes[child.ID];\n                    if (boneNode.attrType !== 'Cluster')\n                        return;\n                    var rawBone = {\n                        ID: child.ID,\n                        indices: [],\n                        weights: [],\n                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)\n                    };\n                    if ('Indexes' in boneNode) {\n                        rawBone.indices = boneNode.Indexes.a;\n                        rawBone.weights = boneNode.Weights.a;\n                    }\n                    rawBones.push(rawBone);\n                });\n                return {\n                    rawBones: rawBones,\n                    bones: []\n                };\n            },\n            parseMorphTargets: function (relationships, deformerNodes) {\n                var rawMorphTargets = [];\n                for (var i = 0; i < relationships.children.length; i++) {\n                    var child = relationships.children[i];\n                    var morphTargetNode = deformerNodes[child.ID];\n                    var rawMorphTarget = {\n                        name: morphTargetNode.attrName,\n                        initialWeight: morphTargetNode.DeformPercent,\n                        id: morphTargetNode.id,\n                        fullWeights: morphTargetNode.FullWeights.a\n                    };\n                    if (morphTargetNode.attrType !== 'BlendShapeChannel')\n                        return;\n                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n                        return child.relationship === undefined;\n                    })[0].ID;\n                    rawMorphTargets.push(rawMorphTarget);\n                }\n                return rawMorphTargets;\n            },\n            parseScene: function (deformers, geometryMap, materialMap) {\n                sceneGraph = new THREE.Group();\n                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n                var modelNodes = fbxTree.Objects.Model;\n                var self = this;\n                modelMap.forEach(function (model) {\n                    var modelNode = modelNodes[model.ID];\n                    self.setLookAtProperties(model, modelNode);\n                    var parentConnections = connections.get(model.ID).parents;\n                    parentConnections.forEach(function (connection) {\n                        var parent = modelMap.get(connection.ID);\n                        if (parent !== undefined)\n                            parent.add(model);\n                    });\n                    if (model.parent === null) {\n                        sceneGraph.add(model);\n                    }\n                });\n                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n                this.createAmbientLight();\n                this.setupMorphMaterials();\n                sceneGraph.traverse(function (node) {\n                    if (node.userData.transformData) {\n                        if (node.parent)\n                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n                        var transform = generateTransform(node.userData.transformData);\n                        node.applyMatrix4(transform);\n                    }\n                });\n                var animations = new AnimationParser().parse();\n                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n                    sceneGraph.children[0].animations = animations;\n                    sceneGraph = sceneGraph.children[0];\n                }\n                sceneGraph.animations = animations;\n            },\n            parseModels: function (skeletons, geometryMap, materialMap) {\n                var modelMap = new Map();\n                var modelNodes = fbxTree.Objects.Model;\n                for (var nodeID in modelNodes) {\n                    var id = parseInt(nodeID);\n                    var node = modelNodes[nodeID];\n                    var relationships = connections.get(id);\n                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n                    if (!model) {\n                        switch (node.attrType) {\n                        case 'Camera':\n                            model = this.createCamera(relationships);\n                            break;\n                        case 'Light':\n                            model = this.createLight(relationships);\n                            break;\n                        case 'Mesh':\n                            model = this.createMesh(relationships, geometryMap, materialMap);\n                            break;\n                        case 'NurbsCurve':\n                            model = this.createCurve(relationships, geometryMap);\n                            break;\n                        case 'LimbNode':\n                        case 'Root':\n                            model = new THREE.Bone();\n                            break;\n                        case 'Null':\n                        default:\n                            model = new THREE.Group();\n                            break;\n                        }\n                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\n                        model.ID = id;\n                    }\n                    this.getTransformData(model, node);\n                    modelMap.set(id, model);\n                }\n                return modelMap;\n            },\n            buildSkeleton: function (relationships, skeletons, id, name) {\n                var bone = null;\n                relationships.parents.forEach(function (parent) {\n                    for (var ID in skeletons) {\n                        var skeleton = skeletons[ID];\n                        skeleton.rawBones.forEach(function (rawBone, i) {\n                            if (rawBone.ID === parent.ID) {\n                                var subBone = bone;\n                                bone = new THREE.Bone();\n                                bone.matrixWorld.copy(rawBone.transformLink);\n                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\n                                bone.ID = id;\n                                skeleton.bones[i] = bone;\n                                if (subBone !== null) {\n                                    bone.add(subBone);\n                                }\n                            }\n                        });\n                    }\n                });\n                return bone;\n            },\n            createCamera: function (relationships) {\n                var model;\n                var cameraAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        cameraAttribute = attr;\n                    }\n                });\n                if (cameraAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type = 0;\n                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n                        type = 1;\n                    }\n                    var nearClippingPlane = 1;\n                    if (cameraAttribute.NearPlane !== undefined) {\n                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n                    }\n                    var farClippingPlane = 1000;\n                    if (cameraAttribute.FarPlane !== undefined) {\n                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n                    }\n                    var width = window.innerWidth;\n                    var height = window.innerHeight;\n                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n                        width = cameraAttribute.AspectWidth.value;\n                        height = cameraAttribute.AspectHeight.value;\n                    }\n                    var aspect = width / height;\n                    var fov = 45;\n                    if (cameraAttribute.FieldOfView !== undefined) {\n                        fov = cameraAttribute.FieldOfView.value;\n                    }\n                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n                        if (focalLength !== null)\n                            model.setFocalLength(focalLength);\n                        break;\n                    case 1:\n                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n                        model = new THREE.Object3D();\n                        break;\n                    }\n                }\n                return model;\n            },\n            createLight: function (relationships) {\n                var model;\n                var lightAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        lightAttribute = attr;\n                    }\n                });\n                if (lightAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type;\n                    if (lightAttribute.LightType === undefined) {\n                        type = 0;\n                    } else {\n                        type = lightAttribute.LightType.value;\n                    }\n                    var color = 16777215;\n                    if (lightAttribute.undefined !== undefined) {\n                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);\n                    }\n                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n                        intensity = 0;\n                    }\n                    var distance = 0;\n                    if (lightAttribute.FarAttenuationEnd !== undefined) {\n                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n                            distance = 0;\n                        } else {\n                            distance = lightAttribute.FarAttenuationEnd.value;\n                        }\n                    }\n                    var decay = 1;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PointLight(color, intensity, distance, decay);\n                        break;\n                    case 1:\n                        model = new THREE.DirectionalLight(color, intensity);\n                        break;\n                    case 2:\n                        var angle = Math.PI / 3;\n                        if (lightAttribute.InnerAngle !== undefined) {\n                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\n                        }\n                        var penumbra = 0;\n                        if (lightAttribute.OuterAngle !== undefined) {\n                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\n                            penumbra = Math.max(penumbra, 1);\n                        }\n                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n                        model = new THREE.PointLight(color, intensity);\n                        break;\n                    }\n                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n                        model.castShadow = true;\n                    }\n                }\n                return model;\n            },\n            createMesh: function (relationships, geometryMap, materialMap) {\n                var model;\n                var geometry = null;\n                var material = null;\n                var materials = [];\n                relationships.children.forEach(function (child) {\n                    if (geometryMap.has(child.ID)) {\n                        geometry = geometryMap.get(child.ID);\n                    }\n                    if (materialMap.has(child.ID)) {\n                        materials.push(materialMap.get(child.ID));\n                    }\n                });\n                if (materials.length > 1) {\n                    material = materials;\n                } else if (materials.length > 0) {\n                    material = materials[0];\n                } else {\n                    material = new THREE.MeshPhongMaterial({ color: 13421772 });\n                    materials.push(material);\n                }\n                if ('color' in geometry.attributes) {\n                    materials.forEach(function (material) {\n                        material.vertexColors = true;\n                    });\n                }\n                if (geometry.FBX_Deformer) {\n                    materials.forEach(function (material) {\n                        material.skinning = true;\n                    });\n                    model = new THREE.SkinnedMesh(geometry, material);\n                    model.normalizeSkinWeights();\n                } else {\n                    model = new THREE.Mesh(geometry, material);\n                }\n                return model;\n            },\n            createCurve: function (relationships, geometryMap) {\n                var geometry = relationships.children.reduce(function (geo, child) {\n                    if (geometryMap.has(child.ID))\n                        geo = geometryMap.get(child.ID);\n                    return geo;\n                }, null);\n                var material = new THREE.LineBasicMaterial({\n                    color: 3342591,\n                    linewidth: 1\n                });\n                return new THREE.Line(geometry, material);\n            },\n            getTransformData: function (model, modelNode) {\n                var transformData = {};\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                else\n                    transformData.eulerOrder = 'ZYX';\n                if ('Lcl_Translation' in modelNode)\n                    transformData.translation = modelNode.Lcl_Translation.value;\n                if ('PreRotation' in modelNode)\n                    transformData.preRotation = modelNode.PreRotation.value;\n                if ('Lcl_Rotation' in modelNode)\n                    transformData.rotation = modelNode.Lcl_Rotation.value;\n                if ('PostRotation' in modelNode)\n                    transformData.postRotation = modelNode.PostRotation.value;\n                if ('Lcl_Scaling' in modelNode)\n                    transformData.scale = modelNode.Lcl_Scaling.value;\n                if ('ScalingOffset' in modelNode)\n                    transformData.scalingOffset = modelNode.ScalingOffset.value;\n                if ('ScalingPivot' in modelNode)\n                    transformData.scalingPivot = modelNode.ScalingPivot.value;\n                if ('RotationOffset' in modelNode)\n                    transformData.rotationOffset = modelNode.RotationOffset.value;\n                if ('RotationPivot' in modelNode)\n                    transformData.rotationPivot = modelNode.RotationPivot.value;\n                model.userData.transformData = transformData;\n            },\n            setLookAtProperties: function (model, modelNode) {\n                if ('LookAtProperty' in modelNode) {\n                    var children = connections.get(model.ID).children;\n                    children.forEach(function (child) {\n                        if (child.relationship === 'LookAtProperty') {\n                            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n                            if ('Lcl_Translation' in lookAtTarget) {\n                                var pos = lookAtTarget.Lcl_Translation.value;\n                                if (model.target !== undefined) {\n                                    model.target.position.fromArray(pos);\n                                    sceneGraph.add(model.target);\n                                } else {\n                                    model.lookAt(new THREE.Vector3().fromArray(pos));\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            bindSkeleton: function (skeletons, geometryMap, modelMap) {\n                var bindMatrices = this.parsePoseNodes();\n                for (var ID in skeletons) {\n                    var skeleton = skeletons[ID];\n                    var parents = connections.get(parseInt(skeleton.ID)).parents;\n                    parents.forEach(function (parent) {\n                        if (geometryMap.has(parent.ID)) {\n                            var geoID = parent.ID;\n                            var geoRelationships = connections.get(geoID);\n                            geoRelationships.parents.forEach(function (geoConnParent) {\n                                if (modelMap.has(geoConnParent.ID)) {\n                                    var model = modelMap.get(geoConnParent.ID);\n                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            parsePoseNodes: function () {\n                var bindMatrices = {};\n                if ('Pose' in fbxTree.Objects) {\n                    var BindPoseNode = fbxTree.Objects.Pose;\n                    for (var nodeID in BindPoseNode) {\n                        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n                            var poseNodes = BindPoseNode[nodeID].PoseNode;\n                            if (Array.isArray(poseNodes)) {\n                                poseNodes.forEach(function (poseNode) {\n                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n                                });\n                            } else {\n                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n                            }\n                        }\n                    }\n                }\n                return bindMatrices;\n            },\n            createAmbientLight: function () {\n                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n                    var r = ambientColor[0];\n                    var g = ambientColor[1];\n                    var b = ambientColor[2];\n                    if (r !== 0 || g !== 0 || b !== 0) {\n                        var color = new THREE.Color(r, g, b);\n                        sceneGraph.add(new THREE.AmbientLight(color, 1));\n                    }\n                }\n            },\n            setupMorphMaterials: function () {\n                var self = this;\n                sceneGraph.traverse(function (child) {\n                    if (child.isMesh) {\n                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n                            if (Array.isArray(child.material)) {\n                                child.material.forEach(function (material, i) {\n                                    self.setupMorphMaterial(child, material, i);\n                                });\n                            } else {\n                                self.setupMorphMaterial(child, child.material);\n                            }\n                        }\n                    }\n                });\n            },\n            setupMorphMaterial: function (child, material, index) {\n                var uuid = child.uuid;\n                var matUuid = material.uuid;\n                var sharedMat = false;\n                sceneGraph.traverse(function (node) {\n                    if (node.isMesh) {\n                        if (Array.isArray(node.material)) {\n                            node.material.forEach(function (mat) {\n                                if (mat.uuid === matUuid && node.uuid !== uuid)\n                                    sharedMat = true;\n                            });\n                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)\n                            sharedMat = true;\n                    }\n                });\n                if (sharedMat === true) {\n                    var clonedMat = material.clone();\n                    clonedMat.morphTargets = true;\n                    if (index === undefined)\n                        child.material = clonedMat;\n                    else\n                        child.material[index] = clonedMat;\n                } else\n                    material.morphTargets = true;\n            }\n        };\n        function GeometryParser() {\n        }\n        GeometryParser.prototype = {\n            constructor: GeometryParser,\n            parse: function (deformers) {\n                var geometryMap = new Map();\n                if ('Geometry' in fbxTree.Objects) {\n                    var geoNodes = fbxTree.Objects.Geometry;\n                    for (var nodeID in geoNodes) {\n                        var relationships = connections.get(parseInt(nodeID));\n                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n                        geometryMap.set(parseInt(nodeID), geo);\n                    }\n                }\n                return geometryMap;\n            },\n            parseGeometry: function (relationships, geoNode, deformers) {\n                switch (geoNode.attrType) {\n                case 'Mesh':\n                    return this.parseMeshGeometry(relationships, geoNode, deformers);\n                    break;\n                case 'NurbsCurve':\n                    return this.parseNurbsGeometry(geoNode);\n                    break;\n                }\n            },\n            parseMeshGeometry: function (relationships, geoNode, deformers) {\n                var skeletons = deformers.skeletons;\n                var morphTargets = [];\n                var modelNodes = relationships.parents.map(function (parent) {\n                    return fbxTree.Objects.Model[parent.ID];\n                });\n                if (modelNodes.length === 0)\n                    return;\n                var skeleton = relationships.children.reduce(function (skeleton, child) {\n                    if (skeletons[child.ID] !== undefined)\n                        skeleton = skeletons[child.ID];\n                    return skeleton;\n                }, null);\n                relationships.children.forEach(function (child) {\n                    if (deformers.morphTargets[child.ID] !== undefined) {\n                        morphTargets.push(deformers.morphTargets[child.ID]);\n                    }\n                });\n                var modelNode = modelNodes[0];\n                var transformData = {};\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('GeometricTranslation' in modelNode)\n                    transformData.translation = modelNode.GeometricTranslation.value;\n                if ('GeometricRotation' in modelNode)\n                    transformData.rotation = modelNode.GeometricRotation.value;\n                if ('GeometricScaling' in modelNode)\n                    transformData.scale = modelNode.GeometricScaling.value;\n                var transform = generateTransform(transformData);\n                return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n            },\n            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n                var geo = new THREE.BufferGeometry();\n                if (geoNode.attrName)\n                    geo.name = geoNode.attrName;\n                var geoInfo = this.parseGeoNode(geoNode, skeleton);\n                var buffers = this.genBuffers(geoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n                positionAttribute.applyMatrix4(preTransform);\n                geo.setAttribute('position', positionAttribute);\n                if (buffers.colors.length > 0) {\n                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n                }\n                if (skeleton) {\n                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));\n                    geo.FBX_Deformer = skeleton;\n                }\n                if (buffers.normal.length > 0) {\n                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n                    normalAttribute.applyNormalMatrix(normalMatrix);\n                    geo.setAttribute('normal', normalAttribute);\n                }\n                buffers.uvs.forEach(function (uvBuffer, i) {\n                    var name = 'uv' + (i + 1).toString();\n                    if (i === 0) {\n                        name = 'uv';\n                    }\n                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n                });\n                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                    var prevMaterialIndex = buffers.materialIndex[0];\n                    var startIndex = 0;\n                    buffers.materialIndex.forEach(function (currentIndex, i) {\n                        if (currentIndex !== prevMaterialIndex) {\n                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n                            prevMaterialIndex = currentIndex;\n                            startIndex = i;\n                        }\n                    });\n                    if (geo.groups.length > 0) {\n                        var lastGroup = geo.groups[geo.groups.length - 1];\n                        var lastIndex = lastGroup.start + lastGroup.count;\n                        if (lastIndex !== buffers.materialIndex.length) {\n                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n                        }\n                    }\n                    if (geo.groups.length === 0) {\n                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n                    }\n                }\n                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n                return geo;\n            },\n            parseGeoNode: function (geoNode, skeleton) {\n                var geoInfo = {};\n                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n                if (geoNode.LayerElementColor) {\n                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n                }\n                if (geoNode.LayerElementMaterial) {\n                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n                }\n                if (geoNode.LayerElementNormal) {\n                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n                }\n                if (geoNode.LayerElementUV) {\n                    geoInfo.uv = [];\n                    var i = 0;\n                    while (geoNode.LayerElementUV[i]) {\n                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n                        i++;\n                    }\n                }\n                geoInfo.weightTable = {};\n                if (skeleton !== null) {\n                    geoInfo.skeleton = skeleton;\n                    skeleton.rawBones.forEach(function (rawBone, i) {\n                        rawBone.indices.forEach(function (index, j) {\n                            if (geoInfo.weightTable[index] === undefined)\n                                geoInfo.weightTable[index] = [];\n                            geoInfo.weightTable[index].push({\n                                id: i,\n                                weight: rawBone.weights[j]\n                            });\n                        });\n                    });\n                }\n                return geoInfo;\n            },\n            genBuffers: function (geoInfo) {\n                var buffers = {\n                    vertex: [],\n                    normal: [],\n                    colors: [],\n                    uvs: [],\n                    materialIndex: [],\n                    vertexWeights: [],\n                    weightsIndices: []\n                };\n                var polygonIndex = 0;\n                var faceLength = 0;\n                var displayedWeightsWarning = false;\n                var facePositionIndexes = [];\n                var faceNormals = [];\n                var faceColors = [];\n                var faceUVs = [];\n                var faceWeights = [];\n                var faceWeightIndices = [];\n                var self = this;\n                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n                    var endOfFace = false;\n                    if (vertexIndex < 0) {\n                        vertexIndex = vertexIndex ^ -1;\n                        endOfFace = true;\n                    }\n                    var weightIndices = [];\n                    var weights = [];\n                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n                    if (geoInfo.color) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n                        faceColors.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.skeleton) {\n                        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n                                weights.push(wt.weight);\n                                weightIndices.push(wt.id);\n                            });\n                        }\n                        if (weights.length > 4) {\n                            if (!displayedWeightsWarning) {\n                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n                                displayedWeightsWarning = true;\n                            }\n                            var wIndex = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            var Weight = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            weights.forEach(function (weight, weightIndex) {\n                                var currentWeight = weight;\n                                var currentIndex = weightIndices[weightIndex];\n                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                                    if (currentWeight > comparedWeight) {\n                                        comparedWeightArray[comparedWeightIndex] = currentWeight;\n                                        currentWeight = comparedWeight;\n                                        var tmp = wIndex[comparedWeightIndex];\n                                        wIndex[comparedWeightIndex] = currentIndex;\n                                        currentIndex = tmp;\n                                    }\n                                });\n                            });\n                            weightIndices = wIndex;\n                            weights = Weight;\n                        }\n                        while (weights.length < 4) {\n                            weights.push(0);\n                            weightIndices.push(0);\n                        }\n                        for (var i = 0; i < 4; ++i) {\n                            faceWeights.push(weights[i]);\n                            faceWeightIndices.push(weightIndices[i]);\n                        }\n                    }\n                    if (geoInfo.normal) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n                        faceNormals.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, i) {\n                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n                            if (faceUVs[i] === undefined) {\n                                faceUVs[i] = [];\n                            }\n                            faceUVs[i].push(data[0]);\n                            faceUVs[i].push(data[1]);\n                        });\n                    }\n                    faceLength++;\n                    if (endOfFace) {\n                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n                        polygonIndex++;\n                        faceLength = 0;\n                        facePositionIndexes = [];\n                        faceNormals = [];\n                        faceColors = [];\n                        faceUVs = [];\n                        faceWeights = [];\n                        faceWeightIndices = [];\n                    }\n                });\n                return buffers;\n            },\n            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n                for (var i = 2; i < faceLength; i++) {\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n                    if (geoInfo.skeleton) {\n                        buffers.vertexWeights.push(faceWeights[0]);\n                        buffers.vertexWeights.push(faceWeights[1]);\n                        buffers.vertexWeights.push(faceWeights[2]);\n                        buffers.vertexWeights.push(faceWeights[3]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n                        buffers.vertexWeights.push(faceWeights[i * 4]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[0]);\n                        buffers.weightsIndices.push(faceWeightIndices[1]);\n                        buffers.weightsIndices.push(faceWeightIndices[2]);\n                        buffers.weightsIndices.push(faceWeightIndices[3]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n                    }\n                    if (geoInfo.color) {\n                        buffers.colors.push(faceColors[0]);\n                        buffers.colors.push(faceColors[1]);\n                        buffers.colors.push(faceColors[2]);\n                        buffers.colors.push(faceColors[(i - 1) * 3]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n                        buffers.colors.push(faceColors[i * 3]);\n                        buffers.colors.push(faceColors[i * 3 + 1]);\n                        buffers.colors.push(faceColors[i * 3 + 2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                    }\n                    if (geoInfo.normal) {\n                        buffers.normal.push(faceNormals[0]);\n                        buffers.normal.push(faceNormals[1]);\n                        buffers.normal.push(faceNormals[2]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n                        buffers.normal.push(faceNormals[i * 3]);\n                        buffers.normal.push(faceNormals[i * 3 + 1]);\n                        buffers.normal.push(faceNormals[i * 3 + 2]);\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, j) {\n                            if (buffers.uvs[j] === undefined)\n                                buffers.uvs[j] = [];\n                            buffers.uvs[j].push(faceUVs[j][0]);\n                            buffers.uvs[j].push(faceUVs[j][1]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n                        });\n                    }\n                }\n            },\n            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n                if (morphTargets.length === 0)\n                    return;\n                parentGeo.morphTargetsRelative = true;\n                parentGeo.morphAttributes.position = [];\n                var self = this;\n                morphTargets.forEach(function (morphTarget) {\n                    morphTarget.rawTargets.forEach(function (rawTarget) {\n                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n                        if (morphGeoNode !== undefined) {\n                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n                        }\n                    });\n                });\n            },\n            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n                var length = parentGeo.attributes.position.count * 3;\n                var morphPositions = new Float32Array(length);\n                for (var i = 0; i < indices.length; i++) {\n                    var morphIndex = indices[i] * 3;\n                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n                }\n                var morphGeoInfo = {\n                    vertexIndices: vertexIndices,\n                    vertexPositions: morphPositions\n                };\n                var morphBuffers = this.genBuffers(morphGeoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n                positionAttribute.name = name || morphGeoNode.attrName;\n                positionAttribute.applyMatrix4(preTransform);\n                parentGeo.morphAttributes.position.push(positionAttribute);\n            },\n            parseNormals: function (NormalNode) {\n                var mappingType = NormalNode.MappingInformationType;\n                var referenceType = NormalNode.ReferenceInformationType;\n                var buffer = NormalNode.Normals.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    if ('NormalIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalIndex.a;\n                    } else if ('NormalsIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalsIndex.a;\n                    }\n                }\n                return {\n                    dataSize: 3,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseUVs: function (UVNode) {\n                var mappingType = UVNode.MappingInformationType;\n                var referenceType = UVNode.ReferenceInformationType;\n                var buffer = UVNode.UV.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = UVNode.UVIndex.a;\n                }\n                return {\n                    dataSize: 2,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseVertexColors: function (ColorNode) {\n                var mappingType = ColorNode.MappingInformationType;\n                var referenceType = ColorNode.ReferenceInformationType;\n                var buffer = ColorNode.Colors.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = ColorNode.ColorIndex.a;\n                }\n                return {\n                    dataSize: 4,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseMaterialIndices: function (MaterialNode) {\n                var mappingType = MaterialNode.MappingInformationType;\n                var referenceType = MaterialNode.ReferenceInformationType;\n                if (mappingType === 'NoMappingInformation') {\n                    return {\n                        dataSize: 1,\n                        buffer: [0],\n                        indices: [0],\n                        mappingType: 'AllSame',\n                        referenceType: referenceType\n                    };\n                }\n                var materialIndexBuffer = MaterialNode.Materials.a;\n                var materialIndices = [];\n                for (var i = 0; i < materialIndexBuffer.length; ++i) {\n                    materialIndices.push(i);\n                }\n                return {\n                    dataSize: 1,\n                    buffer: materialIndexBuffer,\n                    indices: materialIndices,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseNurbsGeometry: function (geoNode) {\n                if (c.NURBSCurve === undefined) {\n                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n                    return new THREE.BufferGeometry();\n                }\n                var order = parseInt(geoNode.Order);\n                if (isNaN(order)) {\n                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n                    return new THREE.BufferGeometry();\n                }\n                var degree = order - 1;\n                var knots = geoNode.KnotVector.a;\n                var controlPoints = [];\n                var pointsValues = geoNode.Points.a;\n                for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n                }\n                var startKnot, endKnot;\n                if (geoNode.Form === 'Closed') {\n                    controlPoints.push(controlPoints[0]);\n                } else if (geoNode.Form === 'Periodic') {\n                    startKnot = degree;\n                    endKnot = knots.length - 1 - startKnot;\n                    for (var i = 0; i < degree; ++i) {\n                        controlPoints.push(controlPoints[i]);\n                    }\n                }\n                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n                var vertices = curve.getPoints(controlPoints.length * 7);\n                var positions = new Float32Array(vertices.length * 3);\n                vertices.forEach(function (vertex, i) {\n                    vertex.toArray(positions, i * 3);\n                });\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n                return geometry;\n            }\n        };\n        function AnimationParser() {\n        }\n        AnimationParser.prototype = {\n            constructor: AnimationParser,\n            parse: function () {\n                var animationClips = [];\n                var rawClips = this.parseClips();\n                if (rawClips !== undefined) {\n                    for (var key in rawClips) {\n                        var rawClip = rawClips[key];\n                        var clip = this.addClip(rawClip);\n                        animationClips.push(clip);\n                    }\n                }\n                return animationClips;\n            },\n            parseClips: function () {\n                if (fbxTree.Objects.AnimationCurve === undefined)\n                    return undefined;\n                var curveNodesMap = this.parseAnimationCurveNodes();\n                this.parseAnimationCurves(curveNodesMap);\n                var layersMap = this.parseAnimationLayers(curveNodesMap);\n                var rawClips = this.parseAnimStacks(layersMap);\n                return rawClips;\n            },\n            parseAnimationCurveNodes: function () {\n                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n                var curveNodesMap = new Map();\n                for (var nodeID in rawCurveNodes) {\n                    var rawCurveNode = rawCurveNodes[nodeID];\n                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n                        var curveNode = {\n                            id: rawCurveNode.id,\n                            attr: rawCurveNode.attrName,\n                            curves: {}\n                        };\n                        curveNodesMap.set(curveNode.id, curveNode);\n                    }\n                }\n                return curveNodesMap;\n            },\n            parseAnimationCurves: function (curveNodesMap) {\n                var rawCurves = fbxTree.Objects.AnimationCurve;\n                for (var nodeID in rawCurves) {\n                    var animationCurve = {\n                        id: rawCurves[nodeID].id,\n                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n                        values: rawCurves[nodeID].KeyValueFloat.a\n                    };\n                    var relationships = connections.get(animationCurve.id);\n                    if (relationships !== undefined) {\n                        var animationCurveID = relationships.parents[0].ID;\n                        var animationCurveRelationship = relationships.parents[0].relationship;\n                        if (animationCurveRelationship.match(/X/)) {\n                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Y/)) {\n                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Z/)) {\n                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n                        }\n                    }\n                }\n            },\n            parseAnimationLayers: function (curveNodesMap) {\n                var rawLayers = fbxTree.Objects.AnimationLayer;\n                var layersMap = new Map();\n                for (var nodeID in rawLayers) {\n                    var layerCurveNodes = [];\n                    var connection = connections.get(parseInt(nodeID));\n                    if (connection !== undefined) {\n                        var children = connection.children;\n                        children.forEach(function (child, i) {\n                            if (curveNodesMap.has(child.ID)) {\n                                var curveNode = curveNodesMap.get(child.ID);\n                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        if (modelID !== undefined) {\n                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                                            var node = {\n                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                                ID: rawModel.id,\n                                                initialPosition: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialRotation: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialScale: [\n                                                    1,\n                                                    1,\n                                                    1\n                                                ]\n                                            };\n                                            sceneGraph.traverse(function (child) {\n                                                if (child.ID === rawModel.id) {\n                                                    node.transform = child.matrix;\n                                                    if (child.userData.transformData)\n                                                        node.eulerOrder = child.userData.transformData.eulerOrder;\n                                                }\n                                            });\n                                            if (!node.transform)\n                                                node.transform = new THREE.Matrix4();\n                                            if ('PreRotation' in rawModel)\n                                                node.preRotation = rawModel.PreRotation.value;\n                                            if ('PostRotation' in rawModel)\n                                                node.postRotation = rawModel.PostRotation.value;\n                                            layerCurveNodes[i] = node;\n                                        }\n                                    }\n                                    if (layerCurveNodes[i])\n                                        layerCurveNodes[i][curveNode.attr] = curveNode;\n                                } else if (curveNode.curves.morph !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        var morpherID = connections.get(deformerID).parents[0].ID;\n                                        var geoID = connections.get(morpherID).parents[0].ID;\n                                        var modelID = connections.get(geoID).parents[0].ID;\n                                        var rawModel = fbxTree.Objects.Model[modelID];\n                                        var node = {\n                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                                        };\n                                        layerCurveNodes[i] = node;\n                                    }\n                                    layerCurveNodes[i][curveNode.attr] = curveNode;\n                                }\n                            }\n                        });\n                        layersMap.set(parseInt(nodeID), layerCurveNodes);\n                    }\n                }\n                return layersMap;\n            },\n            parseAnimStacks: function (layersMap) {\n                var rawStacks = fbxTree.Objects.AnimationStack;\n                var rawClips = {};\n                for (var nodeID in rawStacks) {\n                    var children = connections.get(parseInt(nodeID)).children;\n                    if (children.length > 1) {\n                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n                    }\n                    var layer = layersMap.get(children[0].ID);\n                    rawClips[nodeID] = {\n                        name: rawStacks[nodeID].attrName,\n                        layer: layer\n                    };\n                }\n                return rawClips;\n            },\n            addClip: function (rawClip) {\n                var tracks = [];\n                var self = this;\n                rawClip.layer.forEach(function (rawTracks) {\n                    tracks = tracks.concat(self.generateTracks(rawTracks));\n                });\n                return new THREE.AnimationClip(rawClip.name, -1, tracks);\n            },\n            generateTracks: function (rawTracks) {\n                var tracks = [];\n                var initialPosition = new THREE.Vector3();\n                var initialRotation = new THREE.Quaternion();\n                var initialScale = new THREE.Vector3();\n                if (rawTracks.transform)\n                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n                initialPosition = initialPosition.toArray();\n                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n                initialScale = initialScale.toArray();\n                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n                    if (positionTrack !== undefined)\n                        tracks.push(positionTrack);\n                }\n                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n                    if (rotationTrack !== undefined)\n                        tracks.push(rotationTrack);\n                }\n                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n                    if (scaleTrack !== undefined)\n                        tracks.push(scaleTrack);\n                }\n                if (rawTracks.DeformPercent !== undefined) {\n                    var morphTrack = this.generateMorphTrack(rawTracks);\n                    if (morphTrack !== undefined)\n                        tracks.push(morphTrack);\n                }\n                return tracks;\n            },\n            generateVectorTrack: function (modelName, curves, initialValue, type) {\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n            },\n            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n                if (curves.x !== undefined) {\n                    this.interpolateRotations(curves.x);\n                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.y !== undefined) {\n                    this.interpolateRotations(curves.y);\n                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.z !== undefined) {\n                    this.interpolateRotations(curves.z);\n                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\n                }\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                if (preRotation !== undefined) {\n                    preRotation = preRotation.map(THREE.MathUtils.degToRad);\n                    preRotation.push(eulerOrder);\n                    preRotation = new THREE.Euler().fromArray(preRotation);\n                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);\n                }\n                if (postRotation !== undefined) {\n                    postRotation = postRotation.map(THREE.MathUtils.degToRad);\n                    postRotation.push(eulerOrder);\n                    postRotation = new THREE.Euler().fromArray(postRotation);\n                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();\n                }\n                var quaternion = new THREE.Quaternion();\n                var euler = new THREE.Euler();\n                var quaternionValues = [];\n                for (var i = 0; i < values.length; i += 3) {\n                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n                    quaternion.setFromEuler(euler);\n                    if (preRotation !== undefined)\n                        quaternion.premultiply(preRotation);\n                    if (postRotation !== undefined)\n                        quaternion.multiply(postRotation);\n                    quaternion.toArray(quaternionValues, i / 3 * 4);\n                }\n                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n            },\n            generateMorphTrack: function (rawTracks) {\n                var curves = rawTracks.DeformPercent.curves.morph;\n                var values = curves.values.map(function (val) {\n                    return val / 100;\n                });\n                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n            },\n            getTimesForAllAxes: function (curves) {\n                var times = [];\n                if (curves.x !== undefined)\n                    times = times.concat(curves.x.times);\n                if (curves.y !== undefined)\n                    times = times.concat(curves.y.times);\n                if (curves.z !== undefined)\n                    times = times.concat(curves.z.times);\n                times = times.sort(function (a, b) {\n                    return a - b;\n                }).filter(function (elem, index, array) {\n                    return array.indexOf(elem) == index;\n                });\n                return times;\n            },\n            getKeyframeTrackValues: function (times, curves, initialValue) {\n                var prevValue = initialValue;\n                var values = [];\n                var xIndex = -1;\n                var yIndex = -1;\n                var zIndex = -1;\n                times.forEach(function (time) {\n                    if (curves.x)\n                        xIndex = curves.x.times.indexOf(time);\n                    if (curves.y)\n                        yIndex = curves.y.times.indexOf(time);\n                    if (curves.z)\n                        zIndex = curves.z.times.indexOf(time);\n                    if (xIndex !== -1) {\n                        var xValue = curves.x.values[xIndex];\n                        values.push(xValue);\n                        prevValue[0] = xValue;\n                    } else {\n                        values.push(prevValue[0]);\n                    }\n                    if (yIndex !== -1) {\n                        var yValue = curves.y.values[yIndex];\n                        values.push(yValue);\n                        prevValue[1] = yValue;\n                    } else {\n                        values.push(prevValue[1]);\n                    }\n                    if (zIndex !== -1) {\n                        var zValue = curves.z.values[zIndex];\n                        values.push(zValue);\n                        prevValue[2] = zValue;\n                    } else {\n                        values.push(prevValue[2]);\n                    }\n                });\n                return values;\n            },\n            interpolateRotations: function (curve) {\n                for (var i = 1; i < curve.values.length; i++) {\n                    var initialValue = curve.values[i - 1];\n                    var valuesSpan = curve.values[i] - initialValue;\n                    var absoluteSpan = Math.abs(valuesSpan);\n                    if (absoluteSpan >= 180) {\n                        var numSubIntervals = absoluteSpan / 180;\n                        var step = valuesSpan / numSubIntervals;\n                        var nextValue = initialValue + step;\n                        var initialTime = curve.times[i - 1];\n                        var timeSpan = curve.times[i] - initialTime;\n                        var interval = timeSpan / numSubIntervals;\n                        var nextTime = initialTime + interval;\n                        var interpolatedTimes = [];\n                        var interpolatedValues = [];\n                        while (nextTime < curve.times[i]) {\n                            interpolatedTimes.push(nextTime);\n                            nextTime += interval;\n                            interpolatedValues.push(nextValue);\n                            nextValue += step;\n                        }\n                        curve.times = inject(curve.times, i, interpolatedTimes);\n                        curve.values = inject(curve.values, i, interpolatedValues);\n                    }\n                }\n            }\n        };\n        function TextParser() {\n        }\n        TextParser.prototype = {\n            constructor: TextParser,\n            getPrevNode: function () {\n                return this.nodeStack[this.currentIndent - 2];\n            },\n            getCurrentNode: function () {\n                return this.nodeStack[this.currentIndent - 1];\n            },\n            getCurrentProp: function () {\n                return this.currentProp;\n            },\n            pushStack: function (node) {\n                this.nodeStack.push(node);\n                this.currentIndent += 1;\n            },\n            popStack: function () {\n                this.nodeStack.pop();\n                this.currentIndent -= 1;\n            },\n            setCurrentProp: function (val, name) {\n                this.currentProp = val;\n                this.currentPropName = name;\n            },\n            parse: function (text) {\n                this.currentIndent = 0;\n                this.allNodes = new FBXTree();\n                this.nodeStack = [];\n                this.currentProp = [];\n                this.currentPropName = '';\n                var self = this;\n                var split = text.split(/[\\r\\n]+/);\n                split.forEach(function (line, i) {\n                    var matchComment = line.match(/^[\\s\\t]*;/);\n                    var matchEmpty = line.match(/^[\\s\\t]*$/);\n                    if (matchComment || matchEmpty)\n                        return;\n                    var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n                    var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n                    var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n                    if (matchBeginning) {\n                        self.parseNodeBegin(line, matchBeginning);\n                    } else if (matchProperty) {\n                        self.parseNodeProperty(line, matchProperty, split[++i]);\n                    } else if (matchEnd) {\n                        self.popStack();\n                    } else if (line.match(/^[^\\s\\t}]/)) {\n                        self.parseNodePropertyContinued(line);\n                    }\n                });\n                return this.allNodes;\n            },\n            parseNodeBegin: function (line, property) {\n                var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n                var nodeAttrs = property[2].split(',').map(function (attr) {\n                    return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n                });\n                var node = { name: nodeName };\n                var attrs = this.parseNodeAttr(nodeAttrs);\n                var currentNode = this.getCurrentNode();\n                if (this.currentIndent === 0) {\n                    this.allNodes.add(nodeName, node);\n                } else {\n                    if (nodeName in currentNode) {\n                        if (nodeName === 'PoseNode') {\n                            currentNode.PoseNode.push(node);\n                        } else if (currentNode[nodeName].id !== undefined) {\n                            currentNode[nodeName] = {};\n                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n                        }\n                        if (attrs.id !== '')\n                            currentNode[nodeName][attrs.id] = node;\n                    } else if (typeof attrs.id === 'number') {\n                        currentNode[nodeName] = {};\n                        currentNode[nodeName][attrs.id] = node;\n                    } else if (nodeName !== 'Properties70') {\n                        if (nodeName === 'PoseNode')\n                            currentNode[nodeName] = [node];\n                        else\n                            currentNode[nodeName] = node;\n                    }\n                }\n                if (typeof attrs.id === 'number')\n                    node.id = attrs.id;\n                if (attrs.name !== '')\n                    node.attrName = attrs.name;\n                if (attrs.type !== '')\n                    node.attrType = attrs.type;\n                this.pushStack(node);\n            },\n            parseNodeAttr: function (attrs) {\n                var id = attrs[0];\n                if (attrs[0] !== '') {\n                    id = parseInt(attrs[0]);\n                    if (isNaN(id)) {\n                        id = attrs[0];\n                    }\n                }\n                var name = '', type = '';\n                if (attrs.length > 1) {\n                    name = attrs[1].replace(/^(\\w+)::/, '');\n                    type = attrs[2];\n                }\n                return {\n                    id: id,\n                    name: name,\n                    type: type\n                };\n            },\n            parseNodeProperty: function (line, property, contentLine) {\n                var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n                var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n                if (propName === 'Content' && propValue === ',') {\n                    propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n                }\n                var currentNode = this.getCurrentNode();\n                var parentName = currentNode.name;\n                if (parentName === 'Properties70') {\n                    this.parseNodeSpecialProperty(line, propName, propValue);\n                    return;\n                }\n                if (propName === 'C') {\n                    var connProps = propValue.split(',').slice(1);\n                    var from = parseInt(connProps[0]);\n                    var to = parseInt(connProps[1]);\n                    var rest = propValue.split(',').slice(3);\n                    rest = rest.map(function (elem) {\n                        return elem.trim().replace(/^\"/, '');\n                    });\n                    propName = 'connections';\n                    propValue = [\n                        from,\n                        to\n                    ];\n                    append(propValue, rest);\n                    if (currentNode[propName] === undefined) {\n                        currentNode[propName] = [];\n                    }\n                }\n                if (propName === 'Node')\n                    currentNode.id = propValue;\n                if (propName in currentNode && Array.isArray(currentNode[propName])) {\n                    currentNode[propName].push(propValue);\n                } else {\n                    if (propName !== 'a')\n                        currentNode[propName] = propValue;\n                    else\n                        currentNode.a = propValue;\n                }\n                this.setCurrentProp(currentNode, propName);\n                if (propName === 'a' && propValue.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(propValue);\n                }\n            },\n            parseNodePropertyContinued: function (line) {\n                var currentNode = this.getCurrentNode();\n                currentNode.a += line;\n                if (line.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(currentNode.a);\n                }\n            },\n            parseNodeSpecialProperty: function (line, propName, propValue) {\n                var props = propValue.split('\",').map(function (prop) {\n                    return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n                });\n                var innerPropName = props[0];\n                var innerPropType1 = props[1];\n                var innerPropType2 = props[2];\n                var innerPropFlag = props[3];\n                var innerPropValue = props[4];\n                switch (innerPropType1) {\n                case 'int':\n                case 'enum':\n                case 'bool':\n                case 'ULongLong':\n                case 'double':\n                case 'Number':\n                case 'FieldOfView':\n                    innerPropValue = parseFloat(innerPropValue);\n                    break;\n                case 'Color':\n                case 'ColorRGB':\n                case 'Vector3D':\n                case 'Lcl_Translation':\n                case 'Lcl_Rotation':\n                case 'Lcl_Scaling':\n                    innerPropValue = parseNumberArray(innerPropValue);\n                    break;\n                }\n                this.getPrevNode()[innerPropName] = {\n                    'type': innerPropType1,\n                    'type2': innerPropType2,\n                    'flag': innerPropFlag,\n                    'value': innerPropValue\n                };\n                this.setCurrentProp(this.getPrevNode(), innerPropName);\n            }\n        };\n        function BinaryParser() {\n        }\n        BinaryParser.prototype = {\n            constructor: BinaryParser,\n            parse: function (buffer) {\n                var reader = new BinaryReader(buffer);\n                reader.skip(23);\n                var version = reader.getUint32();\n                console.log('THREE.FBXLoader: FBX binary version: ' + version);\n                var allNodes = new FBXTree();\n                while (!this.endOfContent(reader)) {\n                    var node = this.parseNode(reader, version);\n                    if (node !== null)\n                        allNodes.add(node.name, node);\n                }\n                return allNodes;\n            },\n            endOfContent: function (reader) {\n                if (reader.size() % 16 === 0) {\n                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n                } else {\n                    return reader.getOffset() + 160 + 16 >= reader.size();\n                }\n            },\n            parseNode: function (reader, version) {\n                var node = {};\n                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var nameLen = reader.getUint8();\n                var name = reader.getString(nameLen);\n                if (endOffset === 0)\n                    return null;\n                var propertyList = [];\n                for (var i = 0; i < numProperties; i++) {\n                    propertyList.push(this.parseProperty(reader));\n                }\n                var id = propertyList.length > 0 ? propertyList[0] : '';\n                var attrName = propertyList.length > 1 ? propertyList[1] : '';\n                var attrType = propertyList.length > 2 ? propertyList[2] : '';\n                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n                while (endOffset > reader.getOffset()) {\n                    var subNode = this.parseNode(reader, version);\n                    if (subNode !== null)\n                        this.parseSubNode(name, node, subNode);\n                }\n                node.propertyList = propertyList;\n                if (typeof id === 'number')\n                    node.id = id;\n                if (attrName !== '')\n                    node.attrName = attrName;\n                if (attrType !== '')\n                    node.attrType = attrType;\n                if (name !== '')\n                    node.name = name;\n                return node;\n            },\n            parseSubNode: function (name, node, subNode) {\n                if (subNode.singleProperty === true) {\n                    var value = subNode.propertyList[0];\n                    if (Array.isArray(value)) {\n                        node[subNode.name] = subNode;\n                        subNode.a = value;\n                    } else {\n                        node[subNode.name] = value;\n                    }\n                } else if (name === 'Connections' && subNode.name === 'C') {\n                    var array = [];\n                    subNode.propertyList.forEach(function (property, i) {\n                        if (i !== 0)\n                            array.push(property);\n                    });\n                    if (node.connections === undefined) {\n                        node.connections = [];\n                    }\n                    node.connections.push(array);\n                } else if (subNode.name === 'Properties70') {\n                    var keys = Object.keys(subNode);\n                    keys.forEach(function (key) {\n                        node[key] = subNode[key];\n                    });\n                } else if (name === 'Properties70' && subNode.name === 'P') {\n                    var innerPropName = subNode.propertyList[0];\n                    var innerPropType1 = subNode.propertyList[1];\n                    var innerPropType2 = subNode.propertyList[2];\n                    var innerPropFlag = subNode.propertyList[3];\n                    var innerPropValue;\n                    if (innerPropName.indexOf('Lcl ') === 0)\n                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1.indexOf('Lcl ') === 0)\n                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n                        innerPropValue = [\n                            subNode.propertyList[4],\n                            subNode.propertyList[5],\n                            subNode.propertyList[6]\n                        ];\n                    } else {\n                        innerPropValue = subNode.propertyList[4];\n                    }\n                    node[innerPropName] = {\n                        'type': innerPropType1,\n                        'type2': innerPropType2,\n                        'flag': innerPropFlag,\n                        'value': innerPropValue\n                    };\n                } else if (node[subNode.name] === undefined) {\n                    if (typeof subNode.id === 'number') {\n                        node[subNode.name] = {};\n                        node[subNode.name][subNode.id] = subNode;\n                    } else {\n                        node[subNode.name] = subNode;\n                    }\n                } else {\n                    if (subNode.name === 'PoseNode') {\n                        if (!Array.isArray(node[subNode.name])) {\n                            node[subNode.name] = [node[subNode.name]];\n                        }\n                        node[subNode.name].push(subNode);\n                    } else if (node[subNode.name][subNode.id] === undefined) {\n                        node[subNode.name][subNode.id] = subNode;\n                    }\n                }\n            },\n            parseProperty: function (reader) {\n                var type = reader.getString(1);\n                switch (type) {\n                case 'C':\n                    return reader.getBoolean();\n                case 'D':\n                    return reader.getFloat64();\n                case 'F':\n                    return reader.getFloat32();\n                case 'I':\n                    return reader.getInt32();\n                case 'L':\n                    return reader.getInt64();\n                case 'R':\n                    var length = reader.getUint32();\n                    return reader.getArrayBuffer(length);\n                case 'S':\n                    var length = reader.getUint32();\n                    return reader.getString(length);\n                case 'Y':\n                    return reader.getInt16();\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'f':\n                case 'i':\n                case 'l':\n                    var arrayLength = reader.getUint32();\n                    var encoding = reader.getUint32();\n                    var compressedLength = reader.getUint32();\n                    if (encoding === 0) {\n                        switch (type) {\n                        case 'b':\n                        case 'c':\n                            return reader.getBooleanArray(arrayLength);\n                        case 'd':\n                            return reader.getFloat64Array(arrayLength);\n                        case 'f':\n                            return reader.getFloat32Array(arrayLength);\n                        case 'i':\n                            return reader.getInt32Array(arrayLength);\n                        case 'l':\n                            return reader.getInt64Array(arrayLength);\n                        }\n                    }\n                    //if (typeof b.Zlib === 'undefined') {\n                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');\n                    //}\n                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n                    var reader2 = new BinaryReader(inflate.decompress().buffer);\n                    switch (type) {\n                    case 'b':\n                    case 'c':\n                        return reader2.getBooleanArray(arrayLength);\n                    case 'd':\n                        return reader2.getFloat64Array(arrayLength);\n                    case 'f':\n                        return reader2.getFloat32Array(arrayLength);\n                    case 'i':\n                        return reader2.getInt32Array(arrayLength);\n                    case 'l':\n                        return reader2.getInt64Array(arrayLength);\n                    }\n                default:\n                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n                }\n            }\n        };\n        function BinaryReader(buffer, littleEndian) {\n            this.dv = new DataView(buffer);\n            this.offset = 0;\n            this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n        }\n        BinaryReader.prototype = {\n            constructor: BinaryReader,\n            getOffset: function () {\n                return this.offset;\n            },\n            size: function () {\n                return this.dv.buffer.byteLength;\n            },\n            skip: function (length) {\n                this.offset += length;\n            },\n            getBoolean: function () {\n                return (this.getUint8() & 1) === 1;\n            },\n            getBooleanArray: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getBoolean());\n                }\n                return a;\n            },\n            getUint8: function () {\n                var value = this.dv.getUint8(this.offset);\n                this.offset += 1;\n                return value;\n            },\n            getInt16: function () {\n                var value = this.dv.getInt16(this.offset, this.littleEndian);\n                this.offset += 2;\n                return value;\n            },\n            getInt32: function () {\n                var value = this.dv.getInt32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt32());\n                }\n                return a;\n            },\n            getUint32: function () {\n                var value = this.dv.getUint32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                if (high & 2147483648) {\n                    high = ~high & 4294967295;\n                    low = ~low & 4294967295;\n                    if (low === 4294967295)\n                        high = high + 1 & 4294967295;\n                    low = low + 1 & 4294967295;\n                    return -(high * 4294967296 + low);\n                }\n                return high * 4294967296 + low;\n            },\n            getInt64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt64());\n                }\n                return a;\n            },\n            getUint64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                return high * 4294967296 + low;\n            },\n            getFloat32: function () {\n                var value = this.dv.getFloat32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getFloat32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat32());\n                }\n                return a;\n            },\n            getFloat64: function () {\n                var value = this.dv.getFloat64(this.offset, this.littleEndian);\n                this.offset += 8;\n                return value;\n            },\n            getFloat64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat64());\n                }\n                return a;\n            },\n            getArrayBuffer: function (size) {\n                var value = this.dv.buffer.slice(this.offset, this.offset + size);\n                this.offset += size;\n                return value;\n            },\n            getString: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a[i] = this.getUint8();\n                }\n                var nullByte = a.indexOf(0);\n                if (nullByte >= 0)\n                    a = a.slice(0, nullByte);\n                return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n            }\n        };\n        function FBXTree() {\n        }\n        FBXTree.prototype = {\n            constructor: FBXTree,\n            add: function (key, val) {\n                this[key] = val;\n            }\n        };\n        function isFbxFormatBinary(buffer) {\n            var CORRECT = 'Kaydara FBX Binary  \\0';\n            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n        }\n        function isFbxFormatASCII(text) {\n            var CORRECT = [\n                'K',\n                'a',\n                'y',\n                'd',\n                'a',\n                'r',\n                'a',\n                '\\\\',\n                'F',\n                'B',\n                'X',\n                '\\\\',\n                'B',\n                'i',\n                'n',\n                'a',\n                'r',\n                'y',\n                '\\\\',\n                '\\\\'\n            ];\n            var cursor = 0;\n            function read(offset) {\n                var result = text[offset - 1];\n                text = text.slice(cursor + offset);\n                cursor++;\n                return result;\n            }\n            for (var i = 0; i < CORRECT.length; ++i) {\n                var num = read(1);\n                if (num === CORRECT[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function getFbxVersion(text) {\n            var versionRegExp = /FBXVersion: (\\d+)/;\n            var match = text.match(versionRegExp);\n            if (match) {\n                var version = parseInt(match[1]);\n                return version;\n            }\n            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n        }\n        function convertFBXTimeToSeconds(time) {\n            return time / 46186158000;\n        }\n        var dataArray = [];\n        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n            var index;\n            switch (infoObject.mappingType) {\n            case 'ByPolygonVertex':\n                index = polygonVertexIndex;\n                break;\n            case 'ByPolygon':\n                index = polygonIndex;\n                break;\n            case 'ByVertice':\n                index = vertexIndex;\n                break;\n            case 'AllSame':\n                index = infoObject.indices[0];\n                break;\n            default:\n                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n            }\n            if (infoObject.referenceType === 'IndexToDirect')\n                index = infoObject.indices[index];\n            var from = index * infoObject.dataSize;\n            var to = from + infoObject.dataSize;\n            return slice(dataArray, infoObject.buffer, from, to);\n        }\n        var tempEuler = new THREE.Euler();\n        var tempVec = new THREE.Vector3();\n        function generateTransform(transformData) {\n            var lTranslationM = new THREE.Matrix4();\n            var lPreRotationM = new THREE.Matrix4();\n            var lRotationM = new THREE.Matrix4();\n            var lPostRotationM = new THREE.Matrix4();\n            var lScalingM = new THREE.Matrix4();\n            var lScalingPivotM = new THREE.Matrix4();\n            var lScalingOffsetM = new THREE.Matrix4();\n            var lRotationOffsetM = new THREE.Matrix4();\n            var lRotationPivotM = new THREE.Matrix4();\n            var lParentGX = new THREE.Matrix4();\n            var lGlobalT = new THREE.Matrix4();\n            var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n            if (transformData.translation)\n                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n            if (transformData.preRotation) {\n                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.rotation) {\n                var array = transformData.rotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.postRotation) {\n                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.scale)\n                lScalingM.scale(tempVec.fromArray(transformData.scale));\n            if (transformData.scalingOffset)\n                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n            if (transformData.scalingPivot)\n                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n            if (transformData.rotationOffset)\n                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n            if (transformData.rotationPivot)\n                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n            if (transformData.parentMatrixWorld)\n                lParentGX = transformData.parentMatrixWorld;\n            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\n            var lParentGRM = new THREE.Matrix4();\n            lParentGX.extractRotation(lParentGRM);\n            var lParentTM = new THREE.Matrix4();\n            var lLSM;\n            var lParentGSM;\n            var lParentGRSM;\n            lParentTM.copyPosition(lParentGX);\n            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\n            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\n            lLSM = lScalingM;\n            var lGlobalRS;\n            if (inheritType === 0) {\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n            } else if (inheritType === 1) {\n                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n            } else {\n                var lParentLSM = new THREE.Matrix4().copy(lScalingM);\n                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n            }\n            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));\n            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\n            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);\n            lGlobalT.copyPosition(lGlobalTranslation);\n            lTransform = lGlobalT.multiply(lGlobalRS);\n            return lTransform;\n        }\n        function getEulerOrder(order) {\n            order = order || 0;\n            var enums = [\n                'ZYX',\n                'YZX',\n                'XZY',\n                'ZXY',\n                'YXZ',\n                'XYZ'\n            ];\n            if (order === 6) {\n                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n                return enums[0];\n            }\n            return enums[order];\n        }\n        function parseNumberArray(value) {\n            var array = value.split(',').map(function (val) {\n                return parseFloat(val);\n            });\n            return array;\n        }\n        function convertArrayBufferToString(buffer, from, to) {\n            if (from === undefined)\n                from = 0;\n            if (to === undefined)\n                to = buffer.byteLength;\n            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n        }\n        function append(a, b) {\n            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n                a[j] = b[i];\n            }\n        }\n        function slice(a, b, from, to) {\n            for (var i = from, j = 0; i < to; i++, j++) {\n                a[j] = b[i];\n            }\n            return a;\n        }\n        function inject(a1, index, a2) {\n            return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n        }\n        return FBXLoader;\n    }();\n    return FBXLoader;\n});\ndefine('skylark-threejs-ex/loaders/GCodeLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GCodeLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.splitLayer = false;\n    };\n    GCodeLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: GCodeLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var self = this;\n            var loader = new THREE.FileLoader(self.manager);\n            loader.setPath(self.path);\n            loader.load(url, function (text) {\n                onLoad(self.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var state = {\n                x: 0,\n                y: 0,\n                z: 0,\n                e: 0,\n                f: 0,\n                extruding: false,\n                relative: false\n            };\n            var layers = [];\n            var currentLayer = undefined;\n            var pathMaterial = new THREE.LineBasicMaterial({ color: 16711680 });\n            pathMaterial.name = 'path';\n            var extrudingMaterial = new THREE.LineBasicMaterial({ color: 65280 });\n            extrudingMaterial.name = 'extruded';\n            function newLayer(line) {\n                currentLayer = {\n                    vertex: [],\n                    pathVertex: [],\n                    z: line.z\n                };\n                layers.push(currentLayer);\n            }\n            function addSegment(p1, p2) {\n                if (currentLayer === undefined) {\n                    newLayer(p1);\n                }\n                if (line.extruding) {\n                    currentLayer.vertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.vertex.push(p2.x, p2.y, p2.z);\n                } else {\n                    currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n                }\n            }\n            function delta(v1, v2) {\n                return state.relative ? v2 : v2 - v1;\n            }\n            function absolute(v1, v2) {\n                return state.relative ? v1 + v2 : v2;\n            }\n            var lines = data.replace(/;.+/g, '').split('\\n');\n            for (var i = 0; i < lines.length; i++) {\n                var tokens = lines[i].split(' ');\n                var cmd = tokens[0].toUpperCase();\n                var args = {};\n                tokens.splice(1).forEach(function (token) {\n                    if (token[0] !== undefined) {\n                        var key = token[0].toLowerCase();\n                        var value = parseFloat(token.substring(1));\n                        args[key] = value;\n                    }\n                });\n                if (cmd === 'G0' || cmd === 'G1') {\n                    var line = {\n                        x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n                        y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n                        z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n                        e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n                        f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n                    };\n                    if (delta(state.e, line.e) > 0) {\n                        line.extruding = delta(state.e, line.e) > 0;\n                        if (currentLayer == undefined || line.z != currentLayer.z) {\n                            newLayer(line);\n                        }\n                    }\n                    addSegment(state, line);\n                    state = line;\n                } else if (cmd === 'G2' || cmd === 'G3') {\n                } else if (cmd === 'G90') {\n                    state.relative = false;\n                } else if (cmd === 'G91') {\n                    state.relative = true;\n                } else if (cmd === 'G92') {\n                    var line = state;\n                    line.x = args.x !== undefined ? args.x : line.x;\n                    line.y = args.y !== undefined ? args.y : line.y;\n                    line.z = args.z !== undefined ? args.z : line.z;\n                    line.e = args.e !== undefined ? args.e : line.e;\n                    state = line;\n                } else {\n                }\n            }\n            function addObject(vertex, extruding) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertex, 3));\n                var segments = new THREE.LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n                segments.name = 'layer' + i;\n                object.add(segments);\n            }\n            var object = new THREE.Group();\n            object.name = 'gcode';\n            if (this.splitLayer) {\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    addObject(layer.vertex, true);\n                    addObject(layer.pathVertex, false);\n                }\n            } else {\n                var vertex = [], pathVertex = [];\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    vertex = vertex.concat(layer.vertex);\n                    pathVertex = pathVertex.concat(layer.pathVertex);\n                }\n                addObject(vertex, true);\n                addObject(pathVertex, false);\n            }\n            object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            return object;\n        }\n    });\n    return GCodeLoader;\n});\ndefine('skylark-threejs-ex/loaders/GLTFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GLTFLoader = function () {\n        function GLTFLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.dracoLoader = null;\n            this.ddsLoader = null;\n        }\n        GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: GLTFLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var resourcePath;\n                if (this.resourcePath !== '') {\n                    resourcePath = this.resourcePath;\n                } else if (this.path !== '') {\n                    resourcePath = this.path;\n                } else {\n                    resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n                }\n                scope.manager.itemStart(url);\n                var _onError = function (e) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        console.error(e);\n                    }\n                    scope.manager.itemError(url);\n                    scope.manager.itemEnd(url);\n                };\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(this.path);\n                loader.setResponseType('arraybuffer');\n                if (scope.crossOrigin === 'use-credentials') {\n                    loader.setWithCredentials(true);\n                }\n                loader.load(url, function (data) {\n                    try {\n                        scope.parse(data, resourcePath, function (gltf) {\n                            onLoad(gltf);\n                            scope.manager.itemEnd(url);\n                        }, _onError);\n                    } catch (e) {\n                        _onError(e);\n                    }\n                }, onProgress, _onError);\n            },\n            setDRACOLoader: function (dracoLoader) {\n                this.dracoLoader = dracoLoader;\n                return this;\n            },\n            setDDSLoader: function (ddsLoader) {\n                this.ddsLoader = ddsLoader;\n                return this;\n            },\n            parse: function (data, path, onLoad, onError) {\n                var content;\n                var extensions = {};\n                if (typeof data === 'string') {\n                    content = data;\n                } else {\n                    var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n                    if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n                        try {\n                            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n                        } catch (error) {\n                            if (onError)\n                                onError(error);\n                            return;\n                        }\n                        content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n                    } else {\n                        content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                    }\n                }\n                var json = JSON.parse(content);\n                if (json.asset === undefined || json.asset.version[0] < 2) {\n                    if (onError)\n                        onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));\n                    return;\n                }\n                if (json.extensionsUsed) {\n                    for (var i = 0; i < json.extensionsUsed.length; ++i) {\n                        var extensionName = json.extensionsUsed[i];\n                        var extensionsRequired = json.extensionsRequired || [];\n                        switch (extensionName) {\n                        case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n                            extensions[extensionName] = new GLTFLightsExtension(json);\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:\n                            extensions[extensionName] = new GLTFMaterialsClearcoatExtension();\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_UNLIT:\n                            extensions[extensionName] = new GLTFMaterialsUnlitExtension();\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n                            extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n                            break;\n                        case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n                            extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);\n                            break;\n                        case EXTENSIONS.MSFT_TEXTURE_DDS:\n                            extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);\n                            break;\n                        case EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n                            extensions[extensionName] = new GLTFTextureTransformExtension();\n                            break;\n                        case EXTENSIONS.KHR_MESH_QUANTIZATION:\n                            extensions[extensionName] = new GLTFMeshQuantizationExtension();\n                            break;\n                        default:\n                            if (extensionsRequired.indexOf(extensionName) >= 0) {\n                                console.warn('THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".');\n                            }\n                        }\n                    }\n                }\n                var parser = new GLTFParser(json, extensions, {\n                    path: path || this.resourcePath || '',\n                    crossOrigin: this.crossOrigin,\n                    manager: this.manager\n                });\n                parser.parse(onLoad, onError);\n            }\n        });\n        function GLTFRegistry() {\n            var objects = {};\n            return {\n                get: function (key) {\n                    return objects[key];\n                },\n                add: function (key, object) {\n                    objects[key] = object;\n                },\n                remove: function (key) {\n                    delete objects[key];\n                },\n                removeAll: function () {\n                    objects = {};\n                }\n            };\n        }\n        var EXTENSIONS = {\n            KHR_BINARY_GLTF: 'KHR_binary_glTF',\n            KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n            KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n            KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n            KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n            KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n            KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n            MSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n        };\n        function GLTFTextureDDSExtension(ddsLoader) {\n            if (!ddsLoader) {\n                throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader');\n            }\n            this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n            this.ddsLoader = ddsLoader;\n        }\n        function GLTFLightsExtension(json) {\n            this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n            var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};\n            this.lightDefs = extension.lights || [];\n        }\n        GLTFLightsExtension.prototype.loadLight = function (lightIndex) {\n            var lightDef = this.lightDefs[lightIndex];\n            var lightNode;\n            var color = new THREE.Color(16777215);\n            if (lightDef.color !== undefined)\n                color.fromArray(lightDef.color);\n            var range = lightDef.range !== undefined ? lightDef.range : 0;\n            switch (lightDef.type) {\n            case 'directional':\n                lightNode = new THREE.DirectionalLight(color);\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            case 'point':\n                lightNode = new THREE.PointLight(color);\n                lightNode.distance = range;\n                break;\n            case 'spot':\n                lightNode = new THREE.SpotLight(color);\n                lightNode.distance = range;\n                lightDef.spot = lightDef.spot || {};\n                lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n                lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4;\n                lightNode.angle = lightDef.spot.outerConeAngle;\n                lightNode.penumbra = 1 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            default:\n                throw new Error('THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".');\n            }\n            lightNode.position.set(0, 0, 0);\n            lightNode.decay = 2;\n            if (lightDef.intensity !== undefined)\n                lightNode.intensity = lightDef.intensity;\n            lightNode.name = lightDef.name || 'light_' + lightIndex;\n            return Promise.resolve(lightNode);\n        };\n        function GLTFMaterialsUnlitExtension() {\n            this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n        }\n        GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n            return THREE.MeshBasicMaterial;\n        };\n        GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n            var pending = [];\n            materialParams.color = new THREE.Color(1, 1, 1);\n            materialParams.opacity = 1;\n            var metallicRoughness = materialDef.pbrMetallicRoughness;\n            if (metallicRoughness) {\n                if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                    var array = metallicRoughness.baseColorFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (metallicRoughness.baseColorTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n                }\n            }\n            return Promise.all(pending);\n        };\n        function GLTFMaterialsClearcoatExtension() {\n            this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n        }\n        GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {\n            return THREE.MeshPhysicalMaterial;\n        };\n        GLTFMaterialsClearcoatExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n            var pending = [];\n            var extension = materialDef.extensions[this.name];\n            if (extension.clearcoatFactor !== undefined) {\n                materialParams.clearcoat = extension.clearcoatFactor;\n            }\n            if (extension.clearcoatTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatMap', extension.clearcoatTexture));\n            }\n            if (extension.clearcoatRoughnessFactor !== undefined) {\n                materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n            }\n            if (extension.clearcoatRoughnessTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture));\n            }\n            if (extension.clearcoatNormalTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture));\n                if (extension.clearcoatNormalTexture.scale !== undefined) {\n                    var scale = extension.clearcoatNormalTexture.scale;\n                    materialParams.clearcoatNormalScale = new THREE.Vector2(scale, scale);\n                }\n            }\n            return Promise.all(pending);\n        };\n        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n        var BINARY_EXTENSION_HEADER_LENGTH = 12;\n        var BINARY_EXTENSION_CHUNK_TYPES = {\n            JSON: 1313821514,\n            BIN: 5130562\n        };\n        function GLTFBinaryExtension(data) {\n            this.name = EXTENSIONS.KHR_BINARY_GLTF;\n            this.content = null;\n            this.body = null;\n            var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n            this.header = {\n                magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n                version: headerView.getUint32(4, true),\n                length: headerView.getUint32(8, true)\n            };\n            if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {\n                throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');\n            } else if (this.header.version < 2) {\n                throw new Error('THREE.GLTFLoader: Legacy binary file detected.');\n            }\n            var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n            var chunkIndex = 0;\n            while (chunkIndex < chunkView.byteLength) {\n                var chunkLength = chunkView.getUint32(chunkIndex, true);\n                chunkIndex += 4;\n                var chunkType = chunkView.getUint32(chunkIndex, true);\n                chunkIndex += 4;\n                if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n                    var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);\n                    this.content = THREE.LoaderUtils.decodeText(contentArray);\n                } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n                    this.body = data.slice(byteOffset, byteOffset + chunkLength);\n                }\n                chunkIndex += chunkLength;\n            }\n            if (this.content === null) {\n                throw new Error('THREE.GLTFLoader: JSON content not found.');\n            }\n        }\n        function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n            if (!dracoLoader) {\n                throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');\n            }\n            this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n            this.json = json;\n            this.dracoLoader = dracoLoader;\n            this.dracoLoader.preload();\n        }\n        GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {\n            var json = this.json;\n            var dracoLoader = this.dracoLoader;\n            var bufferViewIndex = primitive.extensions[this.name].bufferView;\n            var gltfAttributeMap = primitive.extensions[this.name].attributes;\n            var threeAttributeMap = {};\n            var attributeNormalizedMap = {};\n            var attributeTypeMap = {};\n            for (var attributeName in gltfAttributeMap) {\n                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n                threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];\n            }\n            for (attributeName in primitive.attributes) {\n                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n                if (gltfAttributeMap[attributeName] !== undefined) {\n                    var accessorDef = json.accessors[primitive.attributes[attributeName]];\n                    var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                    attributeTypeMap[threeAttributeName] = componentType;\n                    attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;\n                }\n            }\n            return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {\n                return new Promise(function (resolve) {\n                    dracoLoader.decodeDracoFile(bufferView, function (geometry) {\n                        for (var attributeName in geometry.attributes) {\n                            var attribute = geometry.attributes[attributeName];\n                            var normalized = attributeNormalizedMap[attributeName];\n                            if (normalized !== undefined)\n                                attribute.normalized = normalized;\n                        }\n                        resolve(geometry);\n                    }, threeAttributeMap, attributeTypeMap);\n                });\n            });\n        };\n        function GLTFTextureTransformExtension() {\n            this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n        }\n        GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {\n            texture = texture.clone();\n            if (transform.offset !== undefined) {\n                texture.offset.fromArray(transform.offset);\n            }\n            if (transform.rotation !== undefined) {\n                texture.rotation = transform.rotation;\n            }\n            if (transform.scale !== undefined) {\n                texture.repeat.fromArray(transform.scale);\n            }\n            if (transform.texCoord !== undefined) {\n                console.warn('THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.');\n            }\n            texture.needsUpdate = true;\n            return texture;\n        };\n        function GLTFMeshStandardSGMaterial(params) {\n            THREE.MeshStandardMaterial.call(this);\n            this.isGLTFSpecularGlossinessMaterial = true;\n            var specularMapParsFragmentChunk = [\n                '#ifdef USE_SPECULARMAP',\n                '\\tuniform sampler2D specularMap;',\n                '#endif'\n            ].join('\\n');\n            var glossinessMapParsFragmentChunk = [\n                '#ifdef USE_GLOSSINESSMAP',\n                '\\tuniform sampler2D glossinessMap;',\n                '#endif'\n            ].join('\\n');\n            var specularMapFragmentChunk = [\n                'vec3 specularFactor = specular;',\n                '#ifdef USE_SPECULARMAP',\n                '\\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n                '\\ttexelSpecular = sRGBToLinear( texelSpecular );',\n                '\\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n                '\\tspecularFactor *= texelSpecular.rgb;',\n                '#endif'\n            ].join('\\n');\n            var glossinessMapFragmentChunk = [\n                'float glossinessFactor = glossiness;',\n                '#ifdef USE_GLOSSINESSMAP',\n                '\\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n                '\\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n                '\\tglossinessFactor *= texelGlossiness.a;',\n                '#endif'\n            ].join('\\n');\n            var lightPhysicalFragmentChunk = [\n                'PhysicalMaterial material;',\n                'material.diffuseColor = diffuseColor.rgb;',\n                'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n                'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n                'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',\n                'material.specularRoughness += geometryRoughness;',\n                'material.specularRoughness = min( material.specularRoughness, 1.0 );',\n                'material.specularColor = specularFactor.rgb;'\n            ].join('\\n');\n            var uniforms = {\n                specular: { value: new THREE.Color().setHex(16777215) },\n                glossiness: { value: 1 },\n                specularMap: { value: null },\n                glossinessMap: { value: null }\n            };\n            this._extraUniforms = uniforms;\n            this.onBeforeCompile = function (shader) {\n                for (var uniformName in uniforms) {\n                    shader.uniforms[uniformName] = uniforms[uniformName];\n                }\n                shader.fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;');\n                shader.fragmentShader = shader.fragmentShader.replace('uniform float metalness;', 'uniform float glossiness;');\n                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_fragment>', specularMapFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\n            };\n            Object.defineProperties(this, {\n                specular: {\n                    get: function () {\n                        return uniforms.specular.value;\n                    },\n                    set: function (v) {\n                        uniforms.specular.value = v;\n                    }\n                },\n                specularMap: {\n                    get: function () {\n                        return uniforms.specularMap.value;\n                    },\n                    set: function (v) {\n                        uniforms.specularMap.value = v;\n                    }\n                },\n                glossiness: {\n                    get: function () {\n                        return uniforms.glossiness.value;\n                    },\n                    set: function (v) {\n                        uniforms.glossiness.value = v;\n                    }\n                },\n                glossinessMap: {\n                    get: function () {\n                        return uniforms.glossinessMap.value;\n                    },\n                    set: function (v) {\n                        uniforms.glossinessMap.value = v;\n                        if (v) {\n                            this.defines.USE_GLOSSINESSMAP = '';\n                            this.defines.USE_ROUGHNESSMAP = '';\n                        } else {\n                            delete this.defines.USE_ROUGHNESSMAP;\n                            delete this.defines.USE_GLOSSINESSMAP;\n                        }\n                    }\n                }\n            });\n            delete this.metalness;\n            delete this.roughness;\n            delete this.metalnessMap;\n            delete this.roughnessMap;\n            this.setValues(params);\n        }\n        GLTFMeshStandardSGMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);\n        GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;\n        GLTFMeshStandardSGMaterial.prototype.copy = function (source) {\n            THREE.MeshStandardMaterial.prototype.copy.call(this, source);\n            this.specularMap = source.specularMap;\n            this.specular.copy(source.specular);\n            this.glossinessMap = source.glossinessMap;\n            this.glossiness = source.glossiness;\n            delete this.metalness;\n            delete this.roughness;\n            delete this.metalnessMap;\n            delete this.roughnessMap;\n            return this;\n        };\n        function GLTFMaterialsPbrSpecularGlossinessExtension() {\n            return {\n                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n                specularGlossinessParams: [\n                    'color',\n                    'map',\n                    'lightMap',\n                    'lightMapIntensity',\n                    'aoMap',\n                    'aoMapIntensity',\n                    'emissive',\n                    'emissiveIntensity',\n                    'emissiveMap',\n                    'bumpMap',\n                    'bumpScale',\n                    'normalMap',\n                    'normalMapType',\n                    'displacementMap',\n                    'displacementScale',\n                    'displacementBias',\n                    'specularMap',\n                    'specular',\n                    'glossinessMap',\n                    'glossiness',\n                    'alphaMap',\n                    'envMap',\n                    'envMapIntensity',\n                    'refractionRatio'\n                ],\n                getMaterialType: function () {\n                    return GLTFMeshStandardSGMaterial;\n                },\n                extendParams: function (materialParams, materialDef, parser) {\n                    var pbrSpecularGlossiness = materialDef.extensions[this.name];\n                    materialParams.color = new THREE.Color(1, 1, 1);\n                    materialParams.opacity = 1;\n                    var pending = [];\n                    if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n                        var array = pbrSpecularGlossiness.diffuseFactor;\n                        materialParams.color.fromArray(array);\n                        materialParams.opacity = array[3];\n                    }\n                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\n                        pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));\n                    }\n                    materialParams.emissive = new THREE.Color(0, 0, 0);\n                    materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1;\n                    materialParams.specular = new THREE.Color(1, 1, 1);\n                    if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {\n                        materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n                    }\n                    if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n                        var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n                        pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));\n                        pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));\n                    }\n                    return Promise.all(pending);\n                },\n                createMaterial: function (materialParams) {\n                    var material = new GLTFMeshStandardSGMaterial(materialParams);\n                    material.fog = true;\n                    material.color = materialParams.color;\n                    material.map = materialParams.map === undefined ? null : materialParams.map;\n                    material.lightMap = null;\n                    material.lightMapIntensity = 1;\n                    material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;\n                    material.aoMapIntensity = 1;\n                    material.emissive = materialParams.emissive;\n                    material.emissiveIntensity = 1;\n                    material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;\n                    material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;\n                    material.bumpScale = 1;\n                    material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;\n                    material.normalMapType = THREE.TangentSpaceNormalMap;\n                    if (materialParams.normalScale)\n                        material.normalScale = materialParams.normalScale;\n                    material.displacementMap = null;\n                    material.displacementScale = 1;\n                    material.displacementBias = 0;\n                    material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;\n                    material.specular = materialParams.specular;\n                    material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;\n                    material.glossiness = materialParams.glossiness;\n                    material.alphaMap = null;\n                    material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;\n                    material.envMapIntensity = 1;\n                    material.refractionRatio = 0.98;\n                    return material;\n                }\n            };\n        }\n        function GLTFMeshQuantizationExtension() {\n            this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n        }\n        function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n            THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n        }\n        GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);\n        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n        GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {\n            var result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;\n            for (var i = 0; i !== valueSize; i++) {\n                result[i] = values[offset + i];\n            }\n            return result;\n        };\n        GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n        GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n        GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {\n            var result = this.resultBuffer;\n            var values = this.sampleValues;\n            var stride = this.valueSize;\n            var stride2 = stride * 2;\n            var stride3 = stride * 3;\n            var td = t1 - t0;\n            var p = (t - t0) / td;\n            var pp = p * p;\n            var ppp = pp * p;\n            var offset1 = i1 * stride3;\n            var offset0 = offset1 - stride3;\n            var s2 = -2 * ppp + 3 * pp;\n            var s3 = ppp - pp;\n            var s0 = 1 - s2;\n            var s1 = s3 - pp + p;\n            for (var i = 0; i !== stride; i++) {\n                var p0 = values[offset0 + i + stride];\n                var m0 = values[offset0 + i + stride2] * td;\n                var p1 = values[offset1 + i + stride];\n                var m1 = values[offset1 + i] * td;\n                result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n            }\n            return result;\n        };\n        var WEBGL_CONSTANTS = {\n            FLOAT: 5126,\n            FLOAT_MAT3: 35675,\n            FLOAT_MAT4: 35676,\n            FLOAT_VEC2: 35664,\n            FLOAT_VEC3: 35665,\n            FLOAT_VEC4: 35666,\n            LINEAR: 9729,\n            REPEAT: 10497,\n            SAMPLER_2D: 35678,\n            POINTS: 0,\n            LINES: 1,\n            LINE_LOOP: 2,\n            LINE_STRIP: 3,\n            TRIANGLES: 4,\n            TRIANGLE_STRIP: 5,\n            TRIANGLE_FAN: 6,\n            UNSIGNED_BYTE: 5121,\n            UNSIGNED_SHORT: 5123\n        };\n        var WEBGL_COMPONENT_TYPES = {\n            5120: Int8Array,\n            5121: Uint8Array,\n            5122: Int16Array,\n            5123: Uint16Array,\n            5125: Uint32Array,\n            5126: Float32Array\n        };\n        var WEBGL_FILTERS = {\n            9728: THREE.NearestFilter,\n            9729: THREE.LinearFilter,\n            9984: THREE.NearestMipmapNearestFilter,\n            9985: THREE.LinearMipmapNearestFilter,\n            9986: THREE.NearestMipmapLinearFilter,\n            9987: THREE.LinearMipmapLinearFilter\n        };\n        var WEBGL_WRAPPINGS = {\n            33071: THREE.ClampToEdgeWrapping,\n            33648: THREE.MirroredRepeatWrapping,\n            10497: THREE.RepeatWrapping\n        };\n        var WEBGL_TYPE_SIZES = {\n            'SCALAR': 1,\n            'VEC2': 2,\n            'VEC3': 3,\n            'VEC4': 4,\n            'MAT2': 4,\n            'MAT3': 9,\n            'MAT4': 16\n        };\n        var ATTRIBUTES = {\n            POSITION: 'position',\n            NORMAL: 'normal',\n            TANGENT: 'tangent',\n            TEXCOORD_0: 'uv',\n            TEXCOORD_1: 'uv2',\n            COLOR_0: 'color',\n            WEIGHTS_0: 'skinWeight',\n            JOINTS_0: 'skinIndex'\n        };\n        var PATH_PROPERTIES = {\n            scale: 'scale',\n            translation: 'position',\n            rotation: 'quaternion',\n            weights: 'morphTargetInfluences'\n        };\n        var INTERPOLATION = {\n            CUBICSPLINE: undefined,\n            LINEAR: THREE.InterpolateLinear,\n            STEP: THREE.InterpolateDiscrete\n        };\n        var ALPHA_MODES = {\n            OPAQUE: 'OPAQUE',\n            MASK: 'MASK',\n            BLEND: 'BLEND'\n        };\n        var MIME_TYPE_FORMATS = {\n            'image/png': THREE.RGBAFormat,\n            'image/jpeg': THREE.RGBFormat\n        };\n        function resolveURL(url, path) {\n            if (typeof url !== 'string' || url === '')\n                return '';\n            if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n                path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n            }\n            if (/^(https?:)?\\/\\//i.test(url))\n                return url;\n            if (/^data:.*,.*$/i.test(url))\n                return url;\n            if (/^blob:.*$/i.test(url))\n                return url;\n            return path + url;\n        }\n        function createDefaultMaterial(cache) {\n            if (cache['DefaultMaterial'] === undefined) {\n                cache['DefaultMaterial'] = new THREE.MeshStandardMaterial({\n                    color: 16777215,\n                    emissive: 0,\n                    metalness: 1,\n                    roughness: 1,\n                    transparent: false,\n                    depthTest: true,\n                    side: THREE.FrontSide\n                });\n            }\n            return cache['DefaultMaterial'];\n        }\n        function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n            for (var name in objectDef.extensions) {\n                if (knownExtensions[name] === undefined) {\n                    object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n                    object.userData.gltfExtensions[name] = objectDef.extensions[name];\n                }\n            }\n        }\n        function assignExtrasToUserData(object, gltfDef) {\n            if (gltfDef.extras !== undefined) {\n                if (typeof gltfDef.extras === 'object') {\n                    Object.assign(object.userData, gltfDef.extras);\n                } else {\n                    console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);\n                }\n            }\n        }\n        function addMorphTargets(geometry, targets, parser) {\n            var hasMorphPosition = false;\n            var hasMorphNormal = false;\n            for (var i = 0, il = targets.length; i < il; i++) {\n                var target = targets[i];\n                if (target.POSITION !== undefined)\n                    hasMorphPosition = true;\n                if (target.NORMAL !== undefined)\n                    hasMorphNormal = true;\n                if (hasMorphPosition && hasMorphNormal)\n                    break;\n            }\n            if (!hasMorphPosition && !hasMorphNormal)\n                return Promise.resolve(geometry);\n            var pendingPositionAccessors = [];\n            var pendingNormalAccessors = [];\n            for (var i = 0, il = targets.length; i < il; i++) {\n                var target = targets[i];\n                if (hasMorphPosition) {\n                    var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;\n                    pendingPositionAccessors.push(pendingAccessor);\n                }\n                if (hasMorphNormal) {\n                    var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;\n                    pendingNormalAccessors.push(pendingAccessor);\n                }\n            }\n            return Promise.all([\n                Promise.all(pendingPositionAccessors),\n                Promise.all(pendingNormalAccessors)\n            ]).then(function (accessors) {\n                var morphPositions = accessors[0];\n                var morphNormals = accessors[1];\n                if (hasMorphPosition)\n                    geometry.morphAttributes.position = morphPositions;\n                if (hasMorphNormal)\n                    geometry.morphAttributes.normal = morphNormals;\n                geometry.morphTargetsRelative = true;\n                return geometry;\n            });\n        }\n        function updateMorphTargets(mesh, meshDef) {\n            mesh.updateMorphTargets();\n            if (meshDef.weights !== undefined) {\n                for (var i = 0, il = meshDef.weights.length; i < il; i++) {\n                    mesh.morphTargetInfluences[i] = meshDef.weights[i];\n                }\n            }\n            if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n                var targetNames = meshDef.extras.targetNames;\n                if (mesh.morphTargetInfluences.length === targetNames.length) {\n                    mesh.morphTargetDictionary = {};\n                    for (var i = 0, il = targetNames.length; i < il; i++) {\n                        mesh.morphTargetDictionary[targetNames[i]] = i;\n                    }\n                } else {\n                    console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');\n                }\n            }\n        }\n        function createPrimitiveKey(primitiveDef) {\n            var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];\n            var geometryKey;\n            if (dracoExtension) {\n                geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);\n            } else {\n                geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;\n            }\n            return geometryKey;\n        }\n        function createAttributesKey(attributes) {\n            var attributesKey = '';\n            var keys = Object.keys(attributes).sort();\n            for (var i = 0, il = keys.length; i < il; i++) {\n                attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';\n            }\n            return attributesKey;\n        }\n        function GLTFParser(json, extensions, options) {\n            this.json = json || {};\n            this.extensions = extensions || {};\n            this.options = options || {};\n            this.cache = new GLTFRegistry();\n            this.primitiveCache = {};\n            this.textureLoader = new THREE.TextureLoader(this.options.manager);\n            this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n            this.fileLoader = new THREE.FileLoader(this.options.manager);\n            this.fileLoader.setResponseType('arraybuffer');\n            if (this.options.crossOrigin === 'use-credentials') {\n                this.fileLoader.setWithCredentials(true);\n            }\n        }\n        GLTFParser.prototype.parse = function (onLoad, onError) {\n            var parser = this;\n            var json = this.json;\n            var extensions = this.extensions;\n            this.cache.removeAll();\n            this.markDefs();\n            Promise.all([\n                this.getDependencies('scene'),\n                this.getDependencies('animation'),\n                this.getDependencies('camera')\n            ]).then(function (dependencies) {\n                var result = {\n                    scene: dependencies[0][json.scene || 0],\n                    scenes: dependencies[0],\n                    animations: dependencies[1],\n                    cameras: dependencies[2],\n                    asset: json.asset,\n                    parser: parser,\n                    userData: {}\n                };\n                addUnknownExtensionsToUserData(extensions, result, json);\n                assignExtrasToUserData(result, json);\n                onLoad(result);\n            }).catch(onError);\n        };\n        GLTFParser.prototype.markDefs = function () {\n            var nodeDefs = this.json.nodes || [];\n            var skinDefs = this.json.skins || [];\n            var meshDefs = this.json.meshes || [];\n            var meshReferences = {};\n            var meshUses = {};\n            for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {\n                var joints = skinDefs[skinIndex].joints;\n                for (var i = 0, il = joints.length; i < il; i++) {\n                    nodeDefs[joints[i]].isBone = true;\n                }\n            }\n            for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {\n                var nodeDef = nodeDefs[nodeIndex];\n                if (nodeDef.mesh !== undefined) {\n                    if (meshReferences[nodeDef.mesh] === undefined) {\n                        meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n                    }\n                    meshReferences[nodeDef.mesh]++;\n                    if (nodeDef.skin !== undefined) {\n                        meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n                    }\n                }\n            }\n            this.json.meshReferences = meshReferences;\n            this.json.meshUses = meshUses;\n        };\n        GLTFParser.prototype.getDependency = function (type, index) {\n            var cacheKey = type + ':' + index;\n            var dependency = this.cache.get(cacheKey);\n            if (!dependency) {\n                switch (type) {\n                case 'scene':\n                    dependency = this.loadScene(index);\n                    break;\n                case 'node':\n                    dependency = this.loadNode(index);\n                    break;\n                case 'mesh':\n                    dependency = this.loadMesh(index);\n                    break;\n                case 'accessor':\n                    dependency = this.loadAccessor(index);\n                    break;\n                case 'bufferView':\n                    dependency = this.loadBufferView(index);\n                    break;\n                case 'buffer':\n                    dependency = this.loadBuffer(index);\n                    break;\n                case 'material':\n                    dependency = this.loadMaterial(index);\n                    break;\n                case 'texture':\n                    dependency = this.loadTexture(index);\n                    break;\n                case 'skin':\n                    dependency = this.loadSkin(index);\n                    break;\n                case 'animation':\n                    dependency = this.loadAnimation(index);\n                    break;\n                case 'camera':\n                    dependency = this.loadCamera(index);\n                    break;\n                case 'light':\n                    dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);\n                    break;\n                default:\n                    throw new Error('Unknown type: ' + type);\n                }\n                this.cache.add(cacheKey, dependency);\n            }\n            return dependency;\n        };\n        GLTFParser.prototype.getDependencies = function (type) {\n            var dependencies = this.cache.get(type);\n            if (!dependencies) {\n                var parser = this;\n                var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];\n                dependencies = Promise.all(defs.map(function (def, index) {\n                    return parser.getDependency(type, index);\n                }));\n                this.cache.add(type, dependencies);\n            }\n            return dependencies;\n        };\n        GLTFParser.prototype.loadBuffer = function (bufferIndex) {\n            var bufferDef = this.json.buffers[bufferIndex];\n            var loader = this.fileLoader;\n            if (bufferDef.type && bufferDef.type !== 'arraybuffer') {\n                throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');\n            }\n            if (bufferDef.uri === undefined && bufferIndex === 0) {\n                return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n            }\n            var options = this.options;\n            return new Promise(function (resolve, reject) {\n                loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {\n                    reject(new Error('THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'));\n                });\n            });\n        };\n        GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {\n            var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n            return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {\n                var byteLength = bufferViewDef.byteLength || 0;\n                var byteOffset = bufferViewDef.byteOffset || 0;\n                return buffer.slice(byteOffset, byteOffset + byteLength);\n            });\n        };\n        GLTFParser.prototype.loadAccessor = function (accessorIndex) {\n            var parser = this;\n            var json = this.json;\n            var accessorDef = this.json.accessors[accessorIndex];\n            if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {\n                return Promise.resolve(null);\n            }\n            var pendingBufferViews = [];\n            if (accessorDef.bufferView !== undefined) {\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));\n            } else {\n                pendingBufferViews.push(null);\n            }\n            if (accessorDef.sparse !== undefined) {\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));\n            }\n            return Promise.all(pendingBufferViews).then(function (bufferViews) {\n                var bufferView = bufferViews[0];\n                var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n                var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n                var itemBytes = elementBytes * itemSize;\n                var byteOffset = accessorDef.byteOffset || 0;\n                var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;\n                var normalized = accessorDef.normalized === true;\n                var array, bufferAttribute;\n                if (byteStride && byteStride !== itemBytes) {\n                    var ibSlice = Math.floor(byteOffset / byteStride);\n                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n                    var ib = parser.cache.get(ibCacheKey);\n                    if (!ib) {\n                        array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);\n                        ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n                        parser.cache.add(ibCacheKey, ib);\n                    }\n                    bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);\n                } else {\n                    if (bufferView === null) {\n                        array = new TypedArray(accessorDef.count * itemSize);\n                    } else {\n                        array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);\n                    }\n                    bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);\n                }\n                if (accessorDef.sparse !== undefined) {\n                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n                    var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);\n                    var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);\n                    if (bufferView !== null) {\n                        bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\n                    }\n                    for (var i = 0, il = sparseIndices.length; i < il; i++) {\n                        var index = sparseIndices[i];\n                        bufferAttribute.setX(index, sparseValues[i * itemSize]);\n                        if (itemSize >= 2)\n                            bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n                        if (itemSize >= 3)\n                            bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n                        if (itemSize >= 4)\n                            bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n                        if (itemSize >= 5)\n                            throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');\n                    }\n                }\n                return bufferAttribute;\n            });\n        };\n        GLTFParser.prototype.loadTexture = function (textureIndex) {\n            var parser = this;\n            var json = this.json;\n            var options = this.options;\n            var textureLoader = this.textureLoader;\n            var URL = self.URL || self.webkitURL;\n            var textureDef = json.textures[textureIndex];\n            var textureExtensions = textureDef.extensions || {};\n            var source;\n            if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {\n                source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n            } else {\n                source = json.images[textureDef.source];\n            }\n            var sourceURI = source.uri;\n            var isObjectURL = false;\n            if (source.bufferView !== undefined) {\n                sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {\n                    isObjectURL = true;\n                    var blob = new Blob([bufferView], { type: source.mimeType });\n                    sourceURI = URL.createObjectURL(blob);\n                    return sourceURI;\n                });\n            }\n            return Promise.resolve(sourceURI).then(function (sourceURI) {\n                var loader = options.manager.getHandler(sourceURI);\n                if (!loader) {\n                    loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;\n                }\n                return new Promise(function (resolve, reject) {\n                    loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);\n                });\n            }).then(function (texture) {\n                if (isObjectURL === true) {\n                    URL.revokeObjectURL(sourceURI);\n                }\n                texture.flipY = false;\n                if (textureDef.name)\n                    texture.name = textureDef.name;\n                if (source.mimeType in MIME_TYPE_FORMATS) {\n                    texture.format = MIME_TYPE_FORMATS[source.mimeType];\n                }\n                var samplers = json.samplers || {};\n                var sampler = samplers[textureDef.sampler] || {};\n                texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n                texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;\n                texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n                texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n                return texture;\n            });\n        };\n        GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {\n            var parser = this;\n            return this.getDependency('texture', mapDef.index).then(function (texture) {\n                if (!texture.isCompressedTexture) {\n                    switch (mapName) {\n                    case 'aoMap':\n                    case 'emissiveMap':\n                    case 'metalnessMap':\n                    case 'normalMap':\n                    case 'roughnessMap':\n                        texture.format = THREE.RGBFormat;\n                        break;\n                    }\n                }\n                if (mapDef.texCoord !== undefined && mapDef.texCoord != 0 && !(mapName === 'aoMap' && mapDef.texCoord == 1)) {\n                    console.warn('THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.');\n                }\n                if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {\n                    var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\n                    if (transform) {\n                        texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);\n                    }\n                }\n                materialParams[mapName] = texture;\n            });\n        };\n        GLTFParser.prototype.assignFinalMaterial = function (mesh) {\n            var geometry = mesh.geometry;\n            var material = mesh.material;\n            var useVertexTangents = geometry.attributes.tangent !== undefined;\n            var useVertexColors = geometry.attributes.color !== undefined;\n            var useFlatShading = geometry.attributes.normal === undefined;\n            var useSkinning = mesh.isSkinnedMesh === true;\n            var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;\n            var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n            if (mesh.isPoints) {\n                var cacheKey = 'PointsMaterial:' + material.uuid;\n                var pointsMaterial = this.cache.get(cacheKey);\n                if (!pointsMaterial) {\n                    pointsMaterial = new THREE.PointsMaterial();\n                    THREE.Material.prototype.copy.call(pointsMaterial, material);\n                    pointsMaterial.color.copy(material.color);\n                    pointsMaterial.map = material.map;\n                    pointsMaterial.sizeAttenuation = false;\n                    this.cache.add(cacheKey, pointsMaterial);\n                }\n                material = pointsMaterial;\n            } else if (mesh.isLine) {\n                var cacheKey = 'LineBasicMaterial:' + material.uuid;\n                var lineMaterial = this.cache.get(cacheKey);\n                if (!lineMaterial) {\n                    lineMaterial = new THREE.LineBasicMaterial();\n                    THREE.Material.prototype.copy.call(lineMaterial, material);\n                    lineMaterial.color.copy(material.color);\n                    this.cache.add(cacheKey, lineMaterial);\n                }\n                material = lineMaterial;\n            }\n            if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {\n                var cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n                if (material.isGLTFSpecularGlossinessMaterial)\n                    cacheKey += 'specular-glossiness:';\n                if (useSkinning)\n                    cacheKey += 'skinning:';\n                if (useVertexTangents)\n                    cacheKey += 'vertex-tangents:';\n                if (useVertexColors)\n                    cacheKey += 'vertex-colors:';\n                if (useFlatShading)\n                    cacheKey += 'flat-shading:';\n                if (useMorphTargets)\n                    cacheKey += 'morph-targets:';\n                if (useMorphNormals)\n                    cacheKey += 'morph-normals:';\n                var cachedMaterial = this.cache.get(cacheKey);\n                if (!cachedMaterial) {\n                    cachedMaterial = material.clone();\n                    if (useSkinning)\n                        cachedMaterial.skinning = true;\n                    if (useVertexTangents)\n                        cachedMaterial.vertexTangents = true;\n                    if (useVertexColors)\n                        cachedMaterial.vertexColors = true;\n                    if (useFlatShading)\n                        cachedMaterial.flatShading = true;\n                    if (useMorphTargets)\n                        cachedMaterial.morphTargets = true;\n                    if (useMorphNormals)\n                        cachedMaterial.morphNormals = true;\n                    this.cache.add(cacheKey, cachedMaterial);\n                }\n                material = cachedMaterial;\n            }\n            if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {\n                geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));\n            }\n            if (material.normalScale && !useVertexTangents) {\n                material.normalScale.y = -material.normalScale.y;\n            }\n            if (material.clearcoatNormalScale && !useVertexTangents) {\n                material.clearcoatNormalScale.y = -material.clearcoatNormalScale.y;\n            }\n            mesh.material = material;\n        };\n        GLTFParser.prototype.loadMaterial = function (materialIndex) {\n            var parser = this;\n            var json = this.json;\n            var extensions = this.extensions;\n            var materialDef = json.materials[materialIndex];\n            var materialType;\n            var materialParams = {};\n            var materialExtensions = materialDef.extensions || {};\n            var pending = [];\n            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n                var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n                materialType = sgExtension.getMaterialType();\n                pending.push(sgExtension.extendParams(materialParams, materialDef, parser));\n            } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n                var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n                materialType = kmuExtension.getMaterialType();\n                pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));\n            } else {\n                materialType = THREE.MeshStandardMaterial;\n                var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n                materialParams.color = new THREE.Color(1, 1, 1);\n                materialParams.opacity = 1;\n                if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                    var array = metallicRoughness.baseColorFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (metallicRoughness.baseColorTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n                }\n                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1;\n                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1;\n                if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));\n                    pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));\n                }\n            }\n            if (materialDef.doubleSided === true) {\n                materialParams.side = THREE.DoubleSide;\n            }\n            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n            if (alphaMode === ALPHA_MODES.BLEND) {\n                materialParams.transparent = true;\n                materialParams.depthWrite = false;\n            } else {\n                materialParams.transparent = false;\n                if (alphaMode === ALPHA_MODES.MASK) {\n                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n                }\n            }\n            if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));\n                materialParams.normalScale = new THREE.Vector2(1, 1);\n                if (materialDef.normalTexture.scale !== undefined) {\n                    materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);\n                }\n            }\n            if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));\n                if (materialDef.occlusionTexture.strength !== undefined) {\n                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n                }\n            }\n            if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);\n            }\n            if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));\n            }\n            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {\n                var clearcoatExtension = extensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT];\n                materialType = clearcoatExtension.getMaterialType();\n                pending.push(clearcoatExtension.extendParams(materialParams, { extensions: materialExtensions }, parser));\n            }\n            return Promise.all(pending).then(function () {\n                var material;\n                if (materialType === GLTFMeshStandardSGMaterial) {\n                    material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);\n                } else {\n                    material = new materialType(materialParams);\n                }\n                if (materialDef.name)\n                    material.name = materialDef.name;\n                if (material.map)\n                    material.map.encoding = THREE.sRGBEncoding;\n                if (material.emissiveMap)\n                    material.emissiveMap.encoding = THREE.sRGBEncoding;\n                assignExtrasToUserData(material, materialDef);\n                if (materialDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, material, materialDef);\n                return material;\n            });\n        };\n        function computeBounds(geometry, primitiveDef, parser) {\n            var attributes = primitiveDef.attributes;\n            var box = new THREE.Box3();\n            if (attributes.POSITION !== undefined) {\n                var accessor = parser.json.accessors[attributes.POSITION];\n                var min = accessor.min;\n                var max = accessor.max;\n                if (min !== undefined && max !== undefined) {\n                    box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));\n                } else {\n                    console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                    return;\n                }\n            } else {\n                return;\n            }\n            var targets = primitiveDef.targets;\n            if (targets !== undefined) {\n                var maxDisplacement = new THREE.Vector3();\n                var vector = new THREE.Vector3();\n                for (var i = 0, il = targets.length; i < il; i++) {\n                    var target = targets[i];\n                    if (target.POSITION !== undefined) {\n                        var accessor = parser.json.accessors[target.POSITION];\n                        var min = accessor.min;\n                        var max = accessor.max;\n                        if (min !== undefined && max !== undefined) {\n                            vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));\n                            vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));\n                            vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));\n                            maxDisplacement.max(vector);\n                        } else {\n                            console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                        }\n                    }\n                }\n                box.expandByVector(maxDisplacement);\n            }\n            geometry.boundingBox = box;\n            var sphere = new THREE.Sphere();\n            box.getCenter(sphere.center);\n            sphere.radius = box.min.distanceTo(box.max) / 2;\n            geometry.boundingSphere = sphere;\n        }\n        function addPrimitiveAttributes(geometry, primitiveDef, parser) {\n            var attributes = primitiveDef.attributes;\n            var pending = [];\n            function assignAttributeAccessor(accessorIndex, attributeName) {\n                return parser.getDependency('accessor', accessorIndex).then(function (accessor) {\n                    geometry.setAttribute(attributeName, accessor);\n                });\n            }\n            for (var gltfAttributeName in attributes) {\n                var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();\n                if (threeAttributeName in geometry.attributes)\n                    continue;\n                pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));\n            }\n            if (primitiveDef.indices !== undefined && !geometry.index) {\n                var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {\n                    geometry.setIndex(accessor);\n                });\n                pending.push(accessor);\n            }\n            assignExtrasToUserData(geometry, primitiveDef);\n            computeBounds(geometry, primitiveDef, parser);\n            return Promise.all(pending).then(function () {\n                return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;\n            });\n        }\n        function toTrianglesDrawMode(geometry, drawMode) {\n            var index = geometry.getIndex();\n            if (index === null) {\n                var indices = [];\n                var position = geometry.getAttribute('position');\n                if (position !== undefined) {\n                    for (var i = 0; i < position.count; i++) {\n                        indices.push(i);\n                    }\n                    geometry.setIndex(indices);\n                    index = geometry.getIndex();\n                } else {\n                    console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n                    return geometry;\n                }\n            }\n            var numberOfTriangles = index.count - 2;\n            var newIndices = [];\n            if (drawMode === THREE.TriangleFanDrawMode) {\n                for (var i = 1; i <= numberOfTriangles; i++) {\n                    newIndices.push(index.getX(0));\n                    newIndices.push(index.getX(i));\n                    newIndices.push(index.getX(i + 1));\n                }\n            } else {\n                for (var i = 0; i < numberOfTriangles; i++) {\n                    if (i % 2 === 0) {\n                        newIndices.push(index.getX(i));\n                        newIndices.push(index.getX(i + 1));\n                        newIndices.push(index.getX(i + 2));\n                    } else {\n                        newIndices.push(index.getX(i + 2));\n                        newIndices.push(index.getX(i + 1));\n                        newIndices.push(index.getX(i));\n                    }\n                }\n            }\n            if (newIndices.length / 3 !== numberOfTriangles) {\n                console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n            }\n            var newGeometry = geometry.clone();\n            newGeometry.setIndex(newIndices);\n            return newGeometry;\n        }\n        GLTFParser.prototype.loadGeometries = function (primitives) {\n            var parser = this;\n            var extensions = this.extensions;\n            var cache = this.primitiveCache;\n            function createDracoPrimitive(primitive) {\n                return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {\n                    return addPrimitiveAttributes(geometry, primitive, parser);\n                });\n            }\n            var pending = [];\n            for (var i = 0, il = primitives.length; i < il; i++) {\n                var primitive = primitives[i];\n                var cacheKey = createPrimitiveKey(primitive);\n                var cached = cache[cacheKey];\n                if (cached) {\n                    pending.push(cached.promise);\n                } else {\n                    var geometryPromise;\n                    if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {\n                        geometryPromise = createDracoPrimitive(primitive);\n                    } else {\n                        geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);\n                    }\n                    cache[cacheKey] = {\n                        primitive: primitive,\n                        promise: geometryPromise\n                    };\n                    pending.push(geometryPromise);\n                }\n            }\n            return Promise.all(pending);\n        };\n        GLTFParser.prototype.loadMesh = function (meshIndex) {\n            var parser = this;\n            var json = this.json;\n            var meshDef = json.meshes[meshIndex];\n            var primitives = meshDef.primitives;\n            var pending = [];\n            for (var i = 0, il = primitives.length; i < il; i++) {\n                var material = primitives[i].material === undefined ? createDefaultMaterial(this.cache) : this.getDependency('material', primitives[i].material);\n                pending.push(material);\n            }\n            pending.push(parser.loadGeometries(primitives));\n            return Promise.all(pending).then(function (results) {\n                var materials = results.slice(0, results.length - 1);\n                var geometries = results[results.length - 1];\n                var meshes = [];\n                for (var i = 0, il = geometries.length; i < il; i++) {\n                    var geometry = geometries[i];\n                    var primitive = primitives[i];\n                    var mesh;\n                    var material = materials[i];\n                    if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {\n                        mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);\n                        if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {\n                            mesh.normalizeSkinWeights();\n                        }\n                        if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {\n                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleStripDrawMode);\n                        } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {\n                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleFanDrawMode);\n                        }\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n                        mesh = new THREE.LineSegments(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {\n                        mesh = new THREE.Line(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {\n                        mesh = new THREE.LineLoop(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {\n                        mesh = new THREE.Points(geometry, material);\n                    } else {\n                        throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);\n                    }\n                    if (Object.keys(mesh.geometry.morphAttributes).length > 0) {\n                        updateMorphTargets(mesh, meshDef);\n                    }\n                    mesh.name = meshDef.name || 'mesh_' + meshIndex;\n                    if (geometries.length > 1)\n                        mesh.name += '_' + i;\n                    assignExtrasToUserData(mesh, meshDef);\n                    parser.assignFinalMaterial(mesh);\n                    meshes.push(mesh);\n                }\n                if (meshes.length === 1) {\n                    return meshes[0];\n                }\n                var group = new THREE.Group();\n                for (var i = 0, il = meshes.length; i < il; i++) {\n                    group.add(meshes[i]);\n                }\n                return group;\n            });\n        };\n        GLTFParser.prototype.loadCamera = function (cameraIndex) {\n            var camera;\n            var cameraDef = this.json.cameras[cameraIndex];\n            var params = cameraDef[cameraDef.type];\n            if (!params) {\n                console.warn('THREE.GLTFLoader: Missing camera parameters.');\n                return;\n            }\n            if (cameraDef.type === 'perspective') {\n                camera = new THREE.PerspectiveCamera(THREE.MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2000000);\n            } else if (cameraDef.type === 'orthographic') {\n                camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);\n            }\n            if (cameraDef.name)\n                camera.name = cameraDef.name;\n            assignExtrasToUserData(camera, cameraDef);\n            return Promise.resolve(camera);\n        };\n        GLTFParser.prototype.loadSkin = function (skinIndex) {\n            var skinDef = this.json.skins[skinIndex];\n            var skinEntry = { joints: skinDef.joints };\n            if (skinDef.inverseBindMatrices === undefined) {\n                return Promise.resolve(skinEntry);\n            }\n            return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {\n                skinEntry.inverseBindMatrices = accessor;\n                return skinEntry;\n            });\n        };\n        GLTFParser.prototype.loadAnimation = function (animationIndex) {\n            var json = this.json;\n            var animationDef = json.animations[animationIndex];\n            var pendingNodes = [];\n            var pendingInputAccessors = [];\n            var pendingOutputAccessors = [];\n            var pendingSamplers = [];\n            var pendingTargets = [];\n            for (var i = 0, il = animationDef.channels.length; i < il; i++) {\n                var channel = animationDef.channels[i];\n                var sampler = animationDef.samplers[channel.sampler];\n                var target = channel.target;\n                var name = target.node !== undefined ? target.node : target.id;\n                var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;\n                var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;\n                pendingNodes.push(this.getDependency('node', name));\n                pendingInputAccessors.push(this.getDependency('accessor', input));\n                pendingOutputAccessors.push(this.getDependency('accessor', output));\n                pendingSamplers.push(sampler);\n                pendingTargets.push(target);\n            }\n            return Promise.all([\n                Promise.all(pendingNodes),\n                Promise.all(pendingInputAccessors),\n                Promise.all(pendingOutputAccessors),\n                Promise.all(pendingSamplers),\n                Promise.all(pendingTargets)\n            ]).then(function (dependencies) {\n                var nodes = dependencies[0];\n                var inputAccessors = dependencies[1];\n                var outputAccessors = dependencies[2];\n                var samplers = dependencies[3];\n                var targets = dependencies[4];\n                var tracks = [];\n                for (var i = 0, il = nodes.length; i < il; i++) {\n                    var node = nodes[i];\n                    var inputAccessor = inputAccessors[i];\n                    var outputAccessor = outputAccessors[i];\n                    var sampler = samplers[i];\n                    var target = targets[i];\n                    if (node === undefined)\n                        continue;\n                    node.updateMatrix();\n                    node.matrixAutoUpdate = true;\n                    var TypedKeyframeTrack;\n                    switch (PATH_PROPERTIES[target.path]) {\n                    case PATH_PROPERTIES.weights:\n                        TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.rotation:\n                        TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.position:\n                    case PATH_PROPERTIES.scale:\n                    default:\n                        TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n                        break;\n                    }\n                    var targetName = node.name ? node.name : node.uuid;\n                    var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;\n                    var targetNames = [];\n                    if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {\n                        node.traverse(function (object) {\n                            if (object.isMesh === true && object.morphTargetInfluences) {\n                                targetNames.push(object.name ? object.name : object.uuid);\n                            }\n                        });\n                    } else {\n                        targetNames.push(targetName);\n                    }\n                    var outputArray = outputAccessor.array;\n                    if (outputAccessor.normalized) {\n                        var scale;\n                        if (outputArray.constructor === Int8Array) {\n                            scale = 1 / 127;\n                        } else if (outputArray.constructor === Uint8Array) {\n                            scale = 1 / 255;\n                        } else if (outputArray.constructor == Int16Array) {\n                            scale = 1 / 32767;\n                        } else if (outputArray.constructor === Uint16Array) {\n                            scale = 1 / 65535;\n                        } else {\n                            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');\n                        }\n                        var scaled = new Float32Array(outputArray.length);\n                        for (var j = 0, jl = outputArray.length; j < jl; j++) {\n                            scaled[j] = outputArray[j] * scale;\n                        }\n                        outputArray = scaled;\n                    }\n                    for (var j = 0, jl = targetNames.length; j < jl; j++) {\n                        var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);\n                        if (sampler.interpolation === 'CUBICSPLINE') {\n                            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {\n                                return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);\n                            };\n                            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n                        }\n                        tracks.push(track);\n                    }\n                }\n                var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n                return new THREE.AnimationClip(name, undefined, tracks);\n            });\n        };\n        GLTFParser.prototype.loadNode = function (nodeIndex) {\n            var json = this.json;\n            var extensions = this.extensions;\n            var parser = this;\n            var meshReferences = json.meshReferences;\n            var meshUses = json.meshUses;\n            var nodeDef = json.nodes[nodeIndex];\n            return function () {\n                var pending = [];\n                if (nodeDef.mesh !== undefined) {\n                    pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {\n                        var node;\n                        if (meshReferences[nodeDef.mesh] > 1) {\n                            var instanceNum = meshUses[nodeDef.mesh]++;\n                            node = mesh.clone();\n                            node.name += '_instance_' + instanceNum;\n                        } else {\n                            node = mesh;\n                        }\n                        if (nodeDef.weights !== undefined) {\n                            node.traverse(function (o) {\n                                if (!o.isMesh)\n                                    return;\n                                for (var i = 0, il = nodeDef.weights.length; i < il; i++) {\n                                    o.morphTargetInfluences[i] = nodeDef.weights[i];\n                                }\n                            });\n                        }\n                        return node;\n                    }));\n                }\n                if (nodeDef.camera !== undefined) {\n                    pending.push(parser.getDependency('camera', nodeDef.camera));\n                }\n                if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {\n                    pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\n                }\n                return Promise.all(pending);\n            }().then(function (objects) {\n                var node;\n                if (nodeDef.isBone === true) {\n                    node = new THREE.Bone();\n                } else if (objects.length > 1) {\n                    node = new THREE.Group();\n                } else if (objects.length === 1) {\n                    node = objects[0];\n                } else {\n                    node = new THREE.Object3D();\n                }\n                if (node !== objects[0]) {\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        node.add(objects[i]);\n                    }\n                }\n                if (nodeDef.name) {\n                    node.userData.name = nodeDef.name;\n                    node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n                }\n                assignExtrasToUserData(node, nodeDef);\n                if (nodeDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, node, nodeDef);\n                if (nodeDef.matrix !== undefined) {\n                    var matrix = new THREE.Matrix4();\n                    matrix.fromArray(nodeDef.matrix);\n                    node.applyMatrix4(matrix);\n                } else {\n                    if (nodeDef.translation !== undefined) {\n                        node.position.fromArray(nodeDef.translation);\n                    }\n                    if (nodeDef.rotation !== undefined) {\n                        node.quaternion.fromArray(nodeDef.rotation);\n                    }\n                    if (nodeDef.scale !== undefined) {\n                        node.scale.fromArray(nodeDef.scale);\n                    }\n                }\n                return node;\n            });\n        };\n        GLTFParser.prototype.loadScene = function () {\n            function buildNodeHierachy(nodeId, parentObject, json, parser) {\n                var nodeDef = json.nodes[nodeId];\n                return parser.getDependency('node', nodeId).then(function (node) {\n                    if (nodeDef.skin === undefined)\n                        return node;\n                    var skinEntry;\n                    return parser.getDependency('skin', nodeDef.skin).then(function (skin) {\n                        skinEntry = skin;\n                        var pendingJoints = [];\n                        for (var i = 0, il = skinEntry.joints.length; i < il; i++) {\n                            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));\n                        }\n                        return Promise.all(pendingJoints);\n                    }).then(function (jointNodes) {\n                        node.traverse(function (mesh) {\n                            if (!mesh.isMesh)\n                                return;\n                            var bones = [];\n                            var boneInverses = [];\n                            for (var j = 0, jl = jointNodes.length; j < jl; j++) {\n                                var jointNode = jointNodes[j];\n                                if (jointNode) {\n                                    bones.push(jointNode);\n                                    var mat = new THREE.Matrix4();\n                                    if (skinEntry.inverseBindMatrices !== undefined) {\n                                        mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n                                    }\n                                    boneInverses.push(mat);\n                                } else {\n                                    console.warn('THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[j]);\n                                }\n                            }\n                            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n                        });\n                        return node;\n                    });\n                }).then(function (node) {\n                    parentObject.add(node);\n                    var pending = [];\n                    if (nodeDef.children) {\n                        var children = nodeDef.children;\n                        for (var i = 0, il = children.length; i < il; i++) {\n                            var child = children[i];\n                            pending.push(buildNodeHierachy(child, node, json, parser));\n                        }\n                    }\n                    return Promise.all(pending);\n                });\n            }\n            return function loadScene(sceneIndex) {\n                var json = this.json;\n                var extensions = this.extensions;\n                var sceneDef = this.json.scenes[sceneIndex];\n                var parser = this;\n                var scene = new THREE.Group();\n                if (sceneDef.name)\n                    scene.name = sceneDef.name;\n                assignExtrasToUserData(scene, sceneDef);\n                if (sceneDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n                var nodeIds = sceneDef.nodes || [];\n                var pending = [];\n                for (var i = 0, il = nodeIds.length; i < il; i++) {\n                    pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));\n                }\n                return Promise.all(pending).then(function () {\n                    return scene;\n                });\n            };\n        }();\n        return GLTFLoader;\n    }();\n    return GLTFLoader ;\n});\ndefine('skylark-threejs-ex/loaders/MTLLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var MTLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: MTLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        setMaterialOptions: function (value) {\n            this.materialOptions = value;\n            return this;\n        },\n        parse: function (text, path) {\n            var lines = text.split('\\n');\n            var info = {};\n            var delimiter_pattern = /\\s+/;\n            var materialsInfo = {};\n            for (var i = 0; i < lines.length; i++) {\n                var line = lines[i];\n                line = line.trim();\n                if (line.length === 0 || line.charAt(0) === '#') {\n                    continue;\n                }\n                var pos = line.indexOf(' ');\n                var key = pos >= 0 ? line.substring(0, pos) : line;\n                key = key.toLowerCase();\n                var value = pos >= 0 ? line.substring(pos + 1) : '';\n                value = value.trim();\n                if (key === 'newmtl') {\n                    info = { name: value };\n                    materialsInfo[value] = info;\n                } else {\n                    if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n                        var ss = value.split(delimiter_pattern, 3);\n                        info[key] = [\n                            parseFloat(ss[0]),\n                            parseFloat(ss[1]),\n                            parseFloat(ss[2])\n                        ];\n                    } else {\n                        info[key] = value;\n                    }\n                }\n            }\n            var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n            materialCreator.setCrossOrigin(this.crossOrigin);\n            materialCreator.setManager(this.manager);\n            materialCreator.setMaterials(materialsInfo);\n            return materialCreator;\n        }\n    });\n    MTLLoader.MaterialCreator = function (baseUrl, options) {\n        this.baseUrl = baseUrl || '';\n        this.options = options;\n        this.materialsInfo = {};\n        this.materials = {};\n        this.materialsArray = [];\n        this.nameLookup = {};\n        this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n        this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n    };\n    MTLLoader.MaterialCreator.prototype = {\n        constructor: MTLLoader.MaterialCreator,\n        crossOrigin: 'anonymous',\n        setCrossOrigin: function (value) {\n            this.crossOrigin = value;\n            return this;\n        },\n        setManager: function (value) {\n            this.manager = value;\n        },\n        setMaterials: function (materialsInfo) {\n            this.materialsInfo = this.convert(materialsInfo);\n            this.materials = {};\n            this.materialsArray = [];\n            this.nameLookup = {};\n        },\n        convert: function (materialsInfo) {\n            if (!this.options)\n                return materialsInfo;\n            var converted = {};\n            for (var mn in materialsInfo) {\n                var mat = materialsInfo[mn];\n                var covmat = {};\n                converted[mn] = covmat;\n                for (var prop in mat) {\n                    var save = true;\n                    var value = mat[prop];\n                    var lprop = prop.toLowerCase();\n                    switch (lprop) {\n                    case 'kd':\n                    case 'ka':\n                    case 'ks':\n                        if (this.options && this.options.normalizeRGB) {\n                            value = [\n                                value[0] / 255,\n                                value[1] / 255,\n                                value[2] / 255\n                            ];\n                        }\n                        if (this.options && this.options.ignoreZeroRGBs) {\n                            if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                                save = false;\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                    }\n                    if (save) {\n                        covmat[lprop] = value;\n                    }\n                }\n            }\n            return converted;\n        },\n        preload: function () {\n            for (var mn in this.materialsInfo) {\n                this.create(mn);\n            }\n        },\n        getIndex: function (materialName) {\n            return this.nameLookup[materialName];\n        },\n        getAsArray: function () {\n            var index = 0;\n            for (var mn in this.materialsInfo) {\n                this.materialsArray[index] = this.create(mn);\n                this.nameLookup[mn] = index;\n                index++;\n            }\n            return this.materialsArray;\n        },\n        create: function (materialName) {\n            if (this.materials[materialName] === undefined) {\n                this.createMaterial_(materialName);\n            }\n            return this.materials[materialName];\n        },\n        createMaterial_: function (materialName) {\n            var scope = this;\n            var mat = this.materialsInfo[materialName];\n            var params = {\n                name: materialName,\n                side: this.side\n            };\n            function resolveURL(baseUrl, url) {\n                if (typeof url !== 'string' || url === '')\n                    return '';\n                if (/^https?:\\/\\//i.test(url))\n                    return url;\n                return baseUrl + url;\n            }\n            function setMapForType(mapType, value) {\n                if (params[mapType])\n                    return;\n                var texParams = scope.getTextureParams(value, params);\n                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n                map.repeat.copy(texParams.scale);\n                map.offset.copy(texParams.offset);\n                map.wrapS = scope.wrap;\n                map.wrapT = scope.wrap;\n                params[mapType] = map;\n            }\n            for (var prop in mat) {\n                var value = mat[prop];\n                var n;\n                if (value === '')\n                    continue;\n                switch (prop.toLowerCase()) {\n                case 'kd':\n                    params.color = new THREE.Color().fromArray(value);\n                    break;\n                case 'ks':\n                    params.specular = new THREE.Color().fromArray(value);\n                    break;\n                case 'ke':\n                    params.emissive = new THREE.Color().fromArray(value);\n                    break;\n                case 'map_kd':\n                    setMapForType('map', value);\n                    break;\n                case 'map_ks':\n                    setMapForType('specularMap', value);\n                    break;\n                case 'map_ke':\n                    setMapForType('emissiveMap', value);\n                    break;\n                case 'norm':\n                    setMapForType('normalMap', value);\n                    break;\n                case 'map_bump':\n                case 'bump':\n                    setMapForType('bumpMap', value);\n                    break;\n                case 'map_d':\n                    setMapForType('alphaMap', value);\n                    params.transparent = true;\n                    break;\n                case 'ns':\n                    params.shininess = parseFloat(value);\n                    break;\n                case 'd':\n                    n = parseFloat(value);\n                    if (n < 1) {\n                        params.opacity = n;\n                        params.transparent = true;\n                    }\n                    break;\n                case 'tr':\n                    n = parseFloat(value);\n                    if (this.options && this.options.invertTrProperty)\n                        n = 1 - n;\n                    if (n > 0) {\n                        params.opacity = 1 - n;\n                        params.transparent = true;\n                    }\n                    break;\n                default:\n                    break;\n                }\n            }\n            this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n            return this.materials[materialName];\n        },\n        getTextureParams: function (value, matParams) {\n            var texParams = {\n                scale: new THREE.Vector2(1, 1),\n                offset: new THREE.Vector2(0, 0)\n            };\n            var items = value.split(/\\s+/);\n            var pos;\n            pos = items.indexOf('-bm');\n            if (pos >= 0) {\n                matParams.bumpScale = parseFloat(items[pos + 1]);\n                items.splice(pos, 2);\n            }\n            pos = items.indexOf('-s');\n            if (pos >= 0) {\n                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            pos = items.indexOf('-o');\n            if (pos >= 0) {\n                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            texParams.url = items.join(' ').trim();\n            return texParams;\n        },\n        loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n            var texture;\n            var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n            var loader = manager.getHandler(url);\n            if (loader === null) {\n                loader = new THREE.TextureLoader(manager);\n            }\n            if (loader.setCrossOrigin)\n                loader.setCrossOrigin(this.crossOrigin);\n            texture = loader.load(url, onLoad, onProgress, onError);\n            if (mapping !== undefined)\n                texture.mapping = mapping;\n            return texture;\n        }\n    };\n    return MTLLoader ;\n});\ndefine('skylark-threejs-ex/loaders/OBJLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var OBJLoader = function () {\n        var object_pattern = /^[og]\\s*(.+)?/;\n        var material_library_pattern = /^mtllib /;\n        var material_use_pattern = /^usemtl /;\n        var map_use_pattern = /^usemap /;\n        function ParserState() {\n            var state = {\n                objects: [],\n                object: {},\n                vertices: [],\n                normals: [],\n                colors: [],\n                uvs: [],\n                materials: {},\n                materialLibraries: [],\n                startObject: function (name, fromDeclaration) {\n                    if (this.object && this.object.fromDeclaration === false) {\n                        this.object.name = name;\n                        this.object.fromDeclaration = fromDeclaration !== false;\n                        return;\n                    }\n                    var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n                    if (this.object && typeof this.object._finalize === 'function') {\n                        this.object._finalize(true);\n                    }\n                    this.object = {\n                        name: name || '',\n                        fromDeclaration: fromDeclaration !== false,\n                        geometry: {\n                            vertices: [],\n                            normals: [],\n                            colors: [],\n                            uvs: []\n                        },\n                        materials: [],\n                        smooth: true,\n                        startMaterial: function (name, libraries) {\n                            var previous = this._finalize(false);\n                            if (previous && (previous.inherited || previous.groupCount <= 0)) {\n                                this.materials.splice(previous.index, 1);\n                            }\n                            var material = {\n                                index: this.materials.length,\n                                name: name || '',\n                                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n                                smooth: previous !== undefined ? previous.smooth : this.smooth,\n                                groupStart: previous !== undefined ? previous.groupEnd : 0,\n                                groupEnd: -1,\n                                groupCount: -1,\n                                inherited: false,\n                                clone: function (index) {\n                                    var cloned = {\n                                        index: typeof index === 'number' ? index : this.index,\n                                        name: this.name,\n                                        mtllib: this.mtllib,\n                                        smooth: this.smooth,\n                                        groupStart: 0,\n                                        groupEnd: -1,\n                                        groupCount: -1,\n                                        inherited: false\n                                    };\n                                    cloned.clone = this.clone.bind(cloned);\n                                    return cloned;\n                                }\n                            };\n                            this.materials.push(material);\n                            return material;\n                        },\n                        currentMaterial: function () {\n                            if (this.materials.length > 0) {\n                                return this.materials[this.materials.length - 1];\n                            }\n                            return undefined;\n                        },\n                        _finalize: function (end) {\n                            var lastMultiMaterial = this.currentMaterial();\n                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n                                lastMultiMaterial.inherited = false;\n                            }\n                            if (end && this.materials.length > 1) {\n                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {\n                                    if (this.materials[mi].groupCount <= 0) {\n                                        this.materials.splice(mi, 1);\n                                    }\n                                }\n                            }\n                            if (end && this.materials.length === 0) {\n                                this.materials.push({\n                                    name: '',\n                                    smooth: this.smooth\n                                });\n                            }\n                            return lastMultiMaterial;\n                        }\n                    };\n                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n                        var declared = previousMaterial.clone(0);\n                        declared.inherited = true;\n                        this.object.materials.push(declared);\n                    }\n                    this.objects.push(this.object);\n                },\n                finalize: function () {\n                    if (this.object && typeof this.object._finalize === 'function') {\n                        this.object._finalize(true);\n                    }\n                },\n                parseVertexIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\n                },\n                parseNormalIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\n                },\n                parseUVIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 2) * 2;\n                },\n                addVertex: function (a, b, c) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addVertexPoint: function (a) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                },\n                addVertexLine: function (a) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                },\n                addNormal: function (a, b, c) {\n                    var src = this.normals;\n                    var dst = this.object.geometry.normals;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addColor: function (a, b, c) {\n                    var src = this.colors;\n                    var dst = this.object.geometry.colors;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addUV: function (a, b, c) {\n                    var src = this.uvs;\n                    var dst = this.object.geometry.uvs;\n                    dst.push(src[a + 0], src[a + 1]);\n                    dst.push(src[b + 0], src[b + 1]);\n                    dst.push(src[c + 0], src[c + 1]);\n                },\n                addUVLine: function (a) {\n                    var src = this.uvs;\n                    var dst = this.object.geometry.uvs;\n                    dst.push(src[a + 0], src[a + 1]);\n                },\n                addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n                    var vLen = this.vertices.length;\n                    var ia = this.parseVertexIndex(a, vLen);\n                    var ib = this.parseVertexIndex(b, vLen);\n                    var ic = this.parseVertexIndex(c, vLen);\n                    this.addVertex(ia, ib, ic);\n                    if (this.colors.length > 0) {\n                        this.addColor(ia, ib, ic);\n                    }\n                    if (ua !== undefined && ua !== '') {\n                        var uvLen = this.uvs.length;\n                        ia = this.parseUVIndex(ua, uvLen);\n                        ib = this.parseUVIndex(ub, uvLen);\n                        ic = this.parseUVIndex(uc, uvLen);\n                        this.addUV(ia, ib, ic);\n                    }\n                    if (na !== undefined && na !== '') {\n                        var nLen = this.normals.length;\n                        ia = this.parseNormalIndex(na, nLen);\n                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\n                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\n                        this.addNormal(ia, ib, ic);\n                    }\n                },\n                addPointGeometry: function (vertices) {\n                    this.object.geometry.type = 'Points';\n                    var vLen = this.vertices.length;\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\n                        this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\n                    }\n                },\n                addLineGeometry: function (vertices, uvs) {\n                    this.object.geometry.type = 'Line';\n                    var vLen = this.vertices.length;\n                    var uvLen = this.uvs.length;\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\n                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n                    }\n                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\n                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n                    }\n                }\n            };\n            state.startObject('', false);\n            return state;\n        }\n        function OBJLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.materials = null;\n        }\n        OBJLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: OBJLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(this.path);\n                loader.load(url, function (text) {\n                    onLoad(scope.parse(text));\n                }, onProgress, onError);\n            },\n            setMaterials: function (materials) {\n                this.materials = materials;\n                return this;\n            },\n            parse: function (text) {\n                var state = new ParserState();\n                if (text.indexOf('\\r\\n') !== -1) {\n                    text = text.replace(/\\r\\n/g, '\\n');\n                }\n                if (text.indexOf('\\\\\\n') !== -1) {\n                    text = text.replace(/\\\\\\n/g, '');\n                }\n                var lines = text.split('\\n');\n                var line = '', lineFirstChar = '';\n                var lineLength = 0;\n                var result = [];\n                var trimLeft = typeof ''.trimLeft === 'function';\n                for (var i = 0, l = lines.length; i < l; i++) {\n                    line = lines[i];\n                    line = trimLeft ? line.trimLeft() : line.trim();\n                    lineLength = line.length;\n                    if (lineLength === 0)\n                        continue;\n                    lineFirstChar = line.charAt(0);\n                    if (lineFirstChar === '#')\n                        continue;\n                    if (lineFirstChar === 'v') {\n                        var data = line.split(/\\s+/);\n                        switch (data[0]) {\n                        case 'v':\n                            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n                            if (data.length >= 7) {\n                                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n                            }\n                            break;\n                        case 'vn':\n                            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n                            break;\n                        case 'vt':\n                            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n                            break;\n                        }\n                    } else if (lineFirstChar === 'f') {\n                        var lineData = line.substr(1).trim();\n                        var vertexData = lineData.split(/\\s+/);\n                        var faceVertices = [];\n                        for (var j = 0, jl = vertexData.length; j < jl; j++) {\n                            var vertex = vertexData[j];\n                            if (vertex.length > 0) {\n                                var vertexParts = vertex.split('/');\n                                faceVertices.push(vertexParts);\n                            }\n                        }\n                        var v1 = faceVertices[0];\n                        for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n                            var v2 = faceVertices[j];\n                            var v3 = faceVertices[j + 1];\n                            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n                        }\n                    } else if (lineFirstChar === 'l') {\n                        var lineParts = line.substring(1).trim().split(' ');\n                        var lineVertices = [], lineUVs = [];\n                        if (line.indexOf('/') === -1) {\n                            lineVertices = lineParts;\n                        } else {\n                            for (var li = 0, llen = lineParts.length; li < llen; li++) {\n                                var parts = lineParts[li].split('/');\n                                if (parts[0] !== '')\n                                    lineVertices.push(parts[0]);\n                                if (parts[1] !== '')\n                                    lineUVs.push(parts[1]);\n                            }\n                        }\n                        state.addLineGeometry(lineVertices, lineUVs);\n                    } else if (lineFirstChar === 'p') {\n                        var lineData = line.substr(1).trim();\n                        var pointData = lineData.split(' ');\n                        state.addPointGeometry(pointData);\n                    } else if ((result = object_pattern.exec(line)) !== null) {\n                        var name = (' ' + result[0].substr(1).trim()).substr(1);\n                        state.startObject(name);\n                    } else if (material_use_pattern.test(line)) {\n                        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n                    } else if (material_library_pattern.test(line)) {\n                        state.materialLibraries.push(line.substring(7).trim());\n                    } else if (map_use_pattern.test(line)) {\n                        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n                    } else if (lineFirstChar === 's') {\n                        result = line.split(' ');\n                        if (result.length > 1) {\n                            var value = result[1].trim().toLowerCase();\n                            state.object.smooth = value !== '0' && value !== 'off';\n                        } else {\n                            state.object.smooth = true;\n                        }\n                        var material = state.object.currentMaterial();\n                        if (material)\n                            material.smooth = state.object.smooth;\n                    } else {\n                        if (line === '\\0')\n                            continue;\n                        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n                    }\n                }\n                state.finalize();\n                var container = new THREE.Group();\n                container.materialLibraries = [].concat(state.materialLibraries);\n                for (var i = 0, l = state.objects.length; i < l; i++) {\n                    var object = state.objects[i];\n                    var geometry = object.geometry;\n                    var materials = object.materials;\n                    var isLine = geometry.type === 'Line';\n                    var isPoints = geometry.type === 'Points';\n                    var hasVertexColors = false;\n                    if (geometry.vertices.length === 0)\n                        continue;\n                    var buffergeometry = new THREE.BufferGeometry();\n                    buffergeometry.setAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));\n                    if (geometry.normals.length > 0) {\n                        buffergeometry.setAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));\n                    } else {\n                        buffergeometry.computeVertexNormals();\n                    }\n                    if (geometry.colors.length > 0) {\n                        hasVertexColors = true;\n                        buffergeometry.setAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));\n                    }\n                    if (geometry.uvs.length > 0) {\n                        buffergeometry.setAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));\n                    }\n                    var createdMaterials = [];\n                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n                        var sourceMaterial = materials[mi];\n                        var materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n                        var material = state.materials[materialHash];\n                        if (this.materials !== null) {\n                            material = this.materials.create(sourceMaterial.name);\n                            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\n                                var materialLine = new THREE.LineBasicMaterial();\n                                THREE.Material.prototype.copy.call(materialLine, material);\n                                materialLine.color.copy(material.color);\n                                material = materialLine;\n                            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {\n                                var materialPoints = new THREE.PointsMaterial({\n                                    size: 10,\n                                    sizeAttenuation: false\n                                });\n                                THREE.Material.prototype.copy.call(materialPoints, material);\n                                materialPoints.color.copy(material.color);\n                                materialPoints.map = material.map;\n                                material = materialPoints;\n                            }\n                        }\n                        if (material === undefined) {\n                            if (isLine) {\n                                material = new THREE.LineBasicMaterial();\n                            } else if (isPoints) {\n                                material = new THREE.PointsMaterial({\n                                    size: 1,\n                                    sizeAttenuation: false\n                                });\n                            } else {\n                                material = new THREE.MeshPhongMaterial();\n                            }\n                            material.name = sourceMaterial.name;\n                            material.flatShading = sourceMaterial.smooth ? false : true;\n                            material.vertexColors = hasVertexColors;\n                            state.materials[materialHash] = material;\n                        }\n                        createdMaterials.push(material);\n                    }\n                    var mesh;\n                    if (createdMaterials.length > 1) {\n                        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n                            var sourceMaterial = materials[mi];\n                            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n                        }\n                        if (isLine) {\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\n                        } else if (isPoints) {\n                            mesh = new THREE.Points(buffergeometry, createdMaterials);\n                        } else {\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\n                        }\n                    } else {\n                        if (isLine) {\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\n                        } else if (isPoints) {\n                            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\n                        } else {\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\n                        }\n                    }\n                    mesh.name = object.name;\n                    container.add(mesh);\n                }\n                return container;\n            }\n        });\n        return OBJLoader;\n    }();\n    return OBJLoader;\n});\ndefine('skylark-threejs-ex/loaders/PCDLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PCDLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.littleEndian = true;\n    };\n    PCDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PCDLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                try {\n                    onLoad(scope.parse(data, url));\n                } catch (e) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        throw e;\n                    }\n                }\n            }, onProgress, onError);\n        },\n        parse: function (data, url) {\n            function decompressLZF(inData, outLength) {\n                var inLength = inData.length;\n                var outData = new Uint8Array(outLength);\n                var inPtr = 0;\n                var outPtr = 0;\n                var ctrl;\n                var len;\n                var ref;\n                do {\n                    ctrl = inData[inPtr++];\n                    if (ctrl < 1 << 5) {\n                        ctrl++;\n                        if (outPtr + ctrl > outLength)\n                            throw new Error('Output buffer is not large enough');\n                        if (inPtr + ctrl > inLength)\n                            throw new Error('Invalid compressed data');\n                        do {\n                            outData[outPtr++] = inData[inPtr++];\n                        } while (--ctrl);\n                    } else {\n                        len = ctrl >> 5;\n                        ref = outPtr - ((ctrl & 31) << 8) - 1;\n                        if (inPtr >= inLength)\n                            throw new Error('Invalid compressed data');\n                        if (len === 7) {\n                            len += inData[inPtr++];\n                            if (inPtr >= inLength)\n                                throw new Error('Invalid compressed data');\n                        }\n                        ref -= inData[inPtr++];\n                        if (outPtr + len + 2 > outLength)\n                            throw new Error('Output buffer is not large enough');\n                        if (ref < 0)\n                            throw new Error('Invalid compressed data');\n                        if (ref >= outPtr)\n                            throw new Error('Invalid compressed data');\n                        do {\n                            outData[outPtr++] = outData[ref++];\n                        } while (--len + 2);\n                    }\n                } while (inPtr < inLength);\n                return outData;\n            }\n            function parseHeader(data) {\n                var PCDheader = {};\n                var result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n                var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n                PCDheader.data = result2[1];\n                PCDheader.headerLen = result2[0].length + result1;\n                PCDheader.str = data.substr(0, PCDheader.headerLen);\n                PCDheader.str = PCDheader.str.replace(/\\#.*/gi, '');\n                PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n                PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n                PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n                PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n                PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n                PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n                PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n                PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n                PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str);\n                if (PCDheader.version !== null)\n                    PCDheader.version = parseFloat(PCDheader.version[1]);\n                if (PCDheader.fields !== null)\n                    PCDheader.fields = PCDheader.fields[1].split(' ');\n                if (PCDheader.type !== null)\n                    PCDheader.type = PCDheader.type[1].split(' ');\n                if (PCDheader.width !== null)\n                    PCDheader.width = parseInt(PCDheader.width[1]);\n                if (PCDheader.height !== null)\n                    PCDheader.height = parseInt(PCDheader.height[1]);\n                if (PCDheader.viewpoint !== null)\n                    PCDheader.viewpoint = PCDheader.viewpoint[1];\n                if (PCDheader.points !== null)\n                    PCDheader.points = parseInt(PCDheader.points[1], 10);\n                if (PCDheader.points === null)\n                    PCDheader.points = PCDheader.width * PCDheader.height;\n                if (PCDheader.size !== null) {\n                    PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n                        return parseInt(x, 10);\n                    });\n                }\n                if (PCDheader.count !== null) {\n                    PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n                        return parseInt(x, 10);\n                    });\n                } else {\n                    PCDheader.count = [];\n                    for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n                        PCDheader.count.push(1);\n                    }\n                }\n                PCDheader.offset = {};\n                var sizeSum = 0;\n                for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n                    if (PCDheader.data === 'ascii') {\n                        PCDheader.offset[PCDheader.fields[i]] = i;\n                    } else {\n                        PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n                        sizeSum += PCDheader.size[i];\n                    }\n                }\n                PCDheader.rowSize = sizeSum;\n                return PCDheader;\n            }\n            var textData = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n            var PCDheader = parseHeader(textData);\n            var position = [];\n            var normal = [];\n            var color = [];\n            if (PCDheader.data === 'ascii') {\n                var offset = PCDheader.offset;\n                var pcdData = textData.substr(PCDheader.headerLen);\n                var lines = pcdData.split('\\n');\n                for (var i = 0, l = lines.length; i < l; i++) {\n                    if (lines[i] === '')\n                        continue;\n                    var line = lines[i].split(' ');\n                    if (offset.x !== undefined) {\n                        position.push(parseFloat(line[offset.x]));\n                        position.push(parseFloat(line[offset.y]));\n                        position.push(parseFloat(line[offset.z]));\n                    }\n                    if (offset.rgb !== undefined) {\n                        var rgb = parseFloat(line[offset.rgb]);\n                        var r = rgb >> 16 & 255;\n                        var g = rgb >> 8 & 255;\n                        var b = rgb >> 0 & 255;\n                        color.push(r / 255, g / 255, b / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(parseFloat(line[offset.normal_x]));\n                        normal.push(parseFloat(line[offset.normal_y]));\n                        normal.push(parseFloat(line[offset.normal_z]));\n                    }\n                }\n            }\n            if (PCDheader.data === 'binary_compressed') {\n                var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n                var compressedSize = sizes[0];\n                var decompressedSize = sizes[1];\n                var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n                var dataview = new DataView(decompressed.buffer);\n                var offset = PCDheader.offset;\n                for (var i = 0; i < PCDheader.points; i++) {\n                    if (offset.x !== undefined) {\n                        position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n                        position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n                        position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n                    }\n                    if (offset.rgb !== undefined) {\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n                    }\n                }\n            }\n            if (PCDheader.data === 'binary') {\n                var dataview = new DataView(data, PCDheader.headerLen);\n                var offset = PCDheader.offset;\n                for (var i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n                    if (offset.x !== undefined) {\n                        position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n                        position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n                        position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n                    }\n                    if (offset.rgb !== undefined) {\n                        color.push(dataview.getUint8(row + offset.rgb + 2) / 255);\n                        color.push(dataview.getUint8(row + offset.rgb + 1) / 255);\n                        color.push(dataview.getUint8(row + offset.rgb + 0) / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n                        normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n                        normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n                    }\n                }\n            }\n            var geometry = new THREE.BufferGeometry();\n            if (position.length > 0)\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            if (normal.length > 0)\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal, 3));\n            if (color.length > 0)\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\n            geometry.computeBoundingSphere();\n            var material = new THREE.PointsMaterial({ size: 0.005 });\n            if (color.length > 0) {\n                material.vertexColors = true;\n            } else {\n                material.color.setHex(Math.random() * 16777215);\n            }\n            var mesh = new THREE.Points(geometry, material);\n            var name = url.split('').reverse().join('');\n            name = /([^\\/]*)/.exec(name);\n            name = name[1].split('').reverse().join('');\n            mesh.name = name;\n            return mesh;\n        }\n    });\n    return PCDLoader;\n});\ndefine('skylark-threejs-ex/loaders/PLYLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PLYLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.propertyNameMapping = {};\n    };\n    PLYLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PLYLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        setPropertyNameMapping: function (mapping) {\n            this.propertyNameMapping = mapping;\n        },\n        parse: function (data) {\n            function parseHeader(data) {\n                var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n                var headerText = '';\n                var headerLength = 0;\n                var result = patternHeader.exec(data);\n                if (result !== null) {\n                    headerText = result[1];\n                    headerLength = result[0].length;\n                }\n                var header = {\n                    comments: [],\n                    elements: [],\n                    headerLength: headerLength\n                };\n                var lines = headerText.split('\\n');\n                var currentElement;\n                var lineType, lineValues;\n                function make_ply_element_property(propertValues, propertyNameMapping) {\n                    var property = { type: propertValues[0] };\n                    if (property.type === 'list') {\n                        property.name = propertValues[3];\n                        property.countType = propertValues[1];\n                        property.itemType = propertValues[2];\n                    } else {\n                        property.name = propertValues[1];\n                    }\n                    if (property.name in propertyNameMapping) {\n                        property.name = propertyNameMapping[property.name];\n                    }\n                    return property;\n                }\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '')\n                        continue;\n                    lineValues = line.split(/\\s+/);\n                    lineType = lineValues.shift();\n                    line = lineValues.join(' ');\n                    switch (lineType) {\n                    case 'format':\n                        header.format = lineValues[0];\n                        header.version = lineValues[1];\n                        break;\n                    case 'comment':\n                        header.comments.push(line);\n                        break;\n                    case 'element':\n                        if (currentElement !== undefined) {\n                            header.elements.push(currentElement);\n                        }\n                        currentElement = {};\n                        currentElement.name = lineValues[0];\n                        currentElement.count = parseInt(lineValues[1]);\n                        currentElement.properties = [];\n                        break;\n                    case 'property':\n                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n                        break;\n                    default:\n                        console.log('unhandled', lineType, lineValues);\n                    }\n                }\n                if (currentElement !== undefined) {\n                    header.elements.push(currentElement);\n                }\n                return header;\n            }\n            function parseASCIINumber(n, type) {\n                switch (type) {\n                case 'char':\n                case 'uchar':\n                case 'short':\n                case 'ushort':\n                case 'int':\n                case 'uint':\n                case 'int8':\n                case 'uint8':\n                case 'int16':\n                case 'uint16':\n                case 'int32':\n                case 'uint32':\n                    return parseInt(n);\n                case 'float':\n                case 'double':\n                case 'float32':\n                case 'float64':\n                    return parseFloat(n);\n                }\n            }\n            function parseASCIIElement(properties, line) {\n                var values = line.split(/\\s+/);\n                var element = {};\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        var n = parseASCIINumber(values.shift(), properties[i].countType);\n                        for (var j = 0; j < n; j++) {\n                            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n                    }\n                }\n                return element;\n            }\n            function parseASCII(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var result;\n                var patternBody = /end_header\\s([\\s\\S]*)$/;\n                var body = '';\n                if ((result = patternBody.exec(data)) !== null) {\n                    body = result[1];\n                }\n                var lines = body.split('\\n');\n                var currentElement = 0;\n                var currentElementCount = 0;\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '') {\n                        continue;\n                    }\n                    if (currentElementCount >= header.elements[currentElement].count) {\n                        currentElement++;\n                        currentElementCount = 0;\n                    }\n                    var element = parseASCIIElement(header.elements[currentElement].properties, line);\n                    handleElement(buffer, header.elements[currentElement].name, element);\n                    currentElementCount++;\n                }\n                return postProcess(buffer);\n            }\n            function postProcess(buffer) {\n                var geometry = new THREE.BufferGeometry();\n                if (buffer.indices.length > 0) {\n                    geometry.setIndex(buffer.indices);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3));\n                if (buffer.normals.length > 0) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3));\n                }\n                if (buffer.uvs.length > 0) {\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2));\n                }\n                if (buffer.colors.length > 0) {\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3));\n                }\n                if (buffer.faceVertexUvs.length > 0) {\n                    geometry = geometry.toNonIndexed();\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2));\n                }\n                geometry.computeBoundingSphere();\n                return geometry;\n            }\n            function handleElement(buffer, elementName, element) {\n                if (elementName === 'vertex') {\n                    buffer.vertices.push(element.x, element.y, element.z);\n                    if ('nx' in element && 'ny' in element && 'nz' in element) {\n                        buffer.normals.push(element.nx, element.ny, element.nz);\n                    }\n                    if ('s' in element && 't' in element) {\n                        buffer.uvs.push(element.s, element.t);\n                    }\n                    if ('red' in element && 'green' in element && 'blue' in element) {\n                        buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n                    }\n                } else if (elementName === 'face') {\n                    var vertex_indices = element.vertex_indices || element.vertex_index;\n                    var texcoord = element.texcoord;\n                    if (vertex_indices.length === 3) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n                        if (texcoord && texcoord.length === 6) {\n                            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n                            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n                            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n                        }\n                    } else if (vertex_indices.length === 4) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n                        buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n                    }\n                }\n            }\n            function binaryRead(dataview, at, type, little_endian) {\n                switch (type) {\n                case 'int8':\n                case 'char':\n                    return [\n                        dataview.getInt8(at),\n                        1\n                    ];\n                case 'uint8':\n                case 'uchar':\n                    return [\n                        dataview.getUint8(at),\n                        1\n                    ];\n                case 'int16':\n                case 'short':\n                    return [\n                        dataview.getInt16(at, little_endian),\n                        2\n                    ];\n                case 'uint16':\n                case 'ushort':\n                    return [\n                        dataview.getUint16(at, little_endian),\n                        2\n                    ];\n                case 'int32':\n                case 'int':\n                    return [\n                        dataview.getInt32(at, little_endian),\n                        4\n                    ];\n                case 'uint32':\n                case 'uint':\n                    return [\n                        dataview.getUint32(at, little_endian),\n                        4\n                    ];\n                case 'float32':\n                case 'float':\n                    return [\n                        dataview.getFloat32(at, little_endian),\n                        4\n                    ];\n                case 'float64':\n                case 'double':\n                    return [\n                        dataview.getFloat64(at, little_endian),\n                        8\n                    ];\n                }\n            }\n            function binaryReadElement(dataview, at, properties, little_endian) {\n                var element = {};\n                var result, read = 0;\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n                        var n = result[0];\n                        read += result[1];\n                        for (var j = 0; j < n; j++) {\n                            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n                            list.push(result[0]);\n                            read += result[1];\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n                        element[properties[i].name] = result[0];\n                        read += result[1];\n                    }\n                }\n                return [\n                    element,\n                    read\n                ];\n            }\n            function parseBinary(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var little_endian = header.format === 'binary_little_endian';\n                var body = new DataView(data, header.headerLength);\n                var result, loc = 0;\n                for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n                    for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n                        result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n                        loc += result[1];\n                        var element = result[0];\n                        handleElement(buffer, header.elements[currentElement].name, element);\n                    }\n                }\n                return postProcess(buffer);\n            }\n            var geometry;\n            var scope = this;\n            if (data instanceof ArrayBuffer) {\n                var text = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                var header = parseHeader(text);\n                geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n            } else {\n                geometry = parseASCII(data, parseHeader(data));\n            }\n            return geometry;\n        }\n    });\n    return PLYLoader;\n});\ndefine('skylark-threejs-ex/loaders/PRWMLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PRWMLoader = function () {\n        var bigEndianPlatform = null;\n        function isBigEndianPlatform() {\n            if (bigEndianPlatform === null) {\n                var buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);\n                uint8Array[0] = 170;\n                uint8Array[1] = 187;\n                bigEndianPlatform = uint16Array[0] === 43707;\n            }\n            return bigEndianPlatform;\n        }\n        var InvertedEncodingTypes = [\n            null,\n            Float32Array,\n            null,\n            Int8Array,\n            Int16Array,\n            null,\n            Int32Array,\n            Uint8Array,\n            Uint16Array,\n            null,\n            Uint32Array\n        ];\n        var getMethods = {\n            Uint16Array: 'getUint16',\n            Uint32Array: 'getUint32',\n            Int16Array: 'getInt16',\n            Int32Array: 'getInt32',\n            Float32Array: 'getFloat32',\n            Float64Array: 'getFloat64'\n        };\n        function copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n            var bytesPerElement = viewType.BYTES_PER_ELEMENT, result;\n            if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n                result = new viewType(sourceArrayBuffer, position, length);\n            } else {\n                var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian, i = 0;\n                result = new viewType(length);\n                for (; i < length; i++) {\n                    result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n                }\n            }\n            return result;\n        }\n        function decodePrwm(buffer) {\n            var array = new Uint8Array(buffer), version = array[0], flags = array[1], indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31, valuesNumber = 0, indicesNumber = 0;\n            if (bigEndian) {\n                valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n                indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n            } else {\n                valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n                indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n            }\n            if (version === 0) {\n                throw new Error('PRWM decoder: Invalid format version: 0');\n            } else if (version !== 1) {\n                throw new Error('PRWM decoder: Unsupported format version: ' + version);\n            }\n            if (!indexedGeometry) {\n                if (indicesType !== 0) {\n                    throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');\n                } else if (indicesNumber !== 0) {\n                    throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');\n                }\n            }\n            var pos = 8;\n            var attributes = {}, attributeName, char, attributeType, cardinality, encodingType, arrayType, values, indices, i;\n            for (i = 0; i < attributesNumber; i++) {\n                attributeName = '';\n                while (pos < array.length) {\n                    char = array[pos];\n                    pos++;\n                    if (char === 0) {\n                        break;\n                    } else {\n                        attributeName += String.fromCharCode(char);\n                    }\n                }\n                flags = array[pos];\n                attributeType = flags >> 7 & 1;\n                cardinality = (flags >> 4 & 3) + 1;\n                encodingType = flags & 15;\n                arrayType = InvertedEncodingTypes[encodingType];\n                pos++;\n                pos = Math.ceil(pos / 4) * 4;\n                values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n                pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n                attributes[attributeName] = {\n                    type: attributeType,\n                    cardinality: cardinality,\n                    values: values\n                };\n            }\n            pos = Math.ceil(pos / 4) * 4;\n            indices = null;\n            if (indexedGeometry) {\n                indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n            }\n            return {\n                version: version,\n                attributes: attributes,\n                indices: indices\n            };\n        }\n        function PRWMLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        PRWMLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: PRWMLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(scope.path);\n                loader.setResponseType('arraybuffer');\n                url = url.replace(/\\*/g, isBigEndianPlatform() ? 'be' : 'le');\n                loader.load(url, function (arrayBuffer) {\n                    onLoad(scope.parse(arrayBuffer));\n                }, onProgress, onError);\n            },\n            parse: function (arrayBuffer) {\n                var data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new THREE.BufferGeometry(), attribute, i;\n                for (i = 0; i < attributesKey.length; i++) {\n                    attribute = data.attributes[attributesKey[i]];\n                    bufferGeometry.setAttribute(attributesKey[i], new THREE.BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n                }\n                if (data.indices !== null) {\n                    bufferGeometry.setIndex(new THREE.BufferAttribute(data.indices, 1));\n                }\n                return bufferGeometry;\n            }\n        });\n        PRWMLoader.isBigEndianPlatform = function () {\n            return isBigEndianPlatform();\n        };\n        return PRWMLoader;\n    }();\n    return PRWMLoader;\n});\ndefine('skylark-threejs-ex/loaders/STLLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var STLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    STLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: STLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                try {\n                    onLoad(scope.parse(text));\n                } catch (exception) {\n                    if (onError) {\n                        onError(exception);\n                    }\n                }\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function isBinary(data) {\n                var expect, face_size, n_faces, reader;\n                reader = new DataView(data);\n                face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                n_faces = reader.getUint32(80, true);\n                expect = 80 + 32 / 8 + n_faces * face_size;\n                if (expect === reader.byteLength) {\n                    return true;\n                }\n                var solid = [\n                    115,\n                    111,\n                    108,\n                    105,\n                    100\n                ];\n                for (var off = 0; off < 5; off++) {\n                    if (matchDataViewAt(solid, reader, off))\n                        return false;\n                }\n                return true;\n            }\n            function matchDataViewAt(query, reader, offset) {\n                for (var i = 0, il = query.length; i < il; i++) {\n                    if (query[i] !== reader.getUint8(offset + i, false))\n                        return false;\n                }\n                return true;\n            }\n            function parseBinary(data) {\n                var reader = new DataView(data);\n                var faces = reader.getUint32(80, true);\n                var r, g, b, hasColors = false, colors;\n                var defaultR, defaultG, defaultB, alpha;\n                for (var index = 0; index < 80 - 10; index++) {\n                    if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n                        hasColors = true;\n                        colors = new Float32Array(faces * 3 * 3);\n                        defaultR = reader.getUint8(index + 6) / 255;\n                        defaultG = reader.getUint8(index + 7) / 255;\n                        defaultB = reader.getUint8(index + 8) / 255;\n                        alpha = reader.getUint8(index + 9) / 255;\n                    }\n                }\n                var dataOffset = 84;\n                var faceLength = 12 * 4 + 2;\n                var geometry = new THREE.BufferGeometry();\n                var vertices = new Float32Array(faces * 3 * 3);\n                var normals = new Float32Array(faces * 3 * 3);\n                for (var face = 0; face < faces; face++) {\n                    var start = dataOffset + face * faceLength;\n                    var normalX = reader.getFloat32(start, true);\n                    var normalY = reader.getFloat32(start + 4, true);\n                    var normalZ = reader.getFloat32(start + 8, true);\n                    if (hasColors) {\n                        var packedColor = reader.getUint16(start + 48, true);\n                        if ((packedColor & 32768) === 0) {\n                            r = (packedColor & 31) / 31;\n                            g = (packedColor >> 5 & 31) / 31;\n                            b = (packedColor >> 10 & 31) / 31;\n                        } else {\n                            r = defaultR;\n                            g = defaultG;\n                            b = defaultB;\n                        }\n                    }\n                    for (var i = 1; i <= 3; i++) {\n                        var vertexstart = start + i * 12;\n                        var componentIdx = face * 3 * 3 + (i - 1) * 3;\n                        vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n                        vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n                        vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n                        normals[componentIdx] = normalX;\n                        normals[componentIdx + 1] = normalY;\n                        normals[componentIdx + 2] = normalZ;\n                        if (hasColors) {\n                            colors[componentIdx] = r;\n                            colors[componentIdx + 1] = g;\n                            colors[componentIdx + 2] = b;\n                        }\n                    }\n                }\n                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n                geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                if (hasColors) {\n                    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n                    geometry.hasColors = true;\n                    geometry.alpha = alpha;\n                }\n                return geometry;\n            }\n            function parseASCII(data) {\n                var geometry = new THREE.BufferGeometry();\n                var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n                var patternFace = /facet([\\s\\S]*?)endfacet/g;\n                var faceCounter = 0;\n                var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n                var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n                var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n                var vertices = [];\n                var normals = [];\n                var normal = new THREE.Vector3();\n                var result;\n                var groupCount = 0;\n                var startVertex = 0;\n                var endVertex = 0;\n                while ((result = patternSolid.exec(data)) !== null) {\n                    startVertex = endVertex;\n                    var solid = result[0];\n                    while ((result = patternFace.exec(solid)) !== null) {\n                        var vertexCountPerFace = 0;\n                        var normalCountPerFace = 0;\n                        var text = result[0];\n                        while ((result = patternNormal.exec(text)) !== null) {\n                            normal.x = parseFloat(result[1]);\n                            normal.y = parseFloat(result[2]);\n                            normal.z = parseFloat(result[3]);\n                            normalCountPerFace++;\n                        }\n                        while ((result = patternVertex.exec(text)) !== null) {\n                            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n                            normals.push(normal.x, normal.y, normal.z);\n                            vertexCountPerFace++;\n                            endVertex++;\n                        }\n                        if (normalCountPerFace !== 1) {\n                            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n                        }\n                        if (vertexCountPerFace !== 3) {\n                            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n                        }\n                        faceCounter++;\n                    }\n                    var start = startVertex;\n                    var count = endVertex - startVertex;\n                    geometry.addGroup(start, count, groupCount);\n                    groupCount++;\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                return geometry;\n            }\n            function ensureString(buffer) {\n                if (typeof buffer !== 'string') {\n                    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer));\n                }\n                return buffer;\n            }\n            function ensureBinary(buffer) {\n                if (typeof buffer === 'string') {\n                    var array_buffer = new Uint8Array(buffer.length);\n                    for (var i = 0; i < buffer.length; i++) {\n                        array_buffer[i] = buffer.charCodeAt(i) & 255;\n                    }\n                    return array_buffer.buffer || array_buffer;\n                } else {\n                    return buffer;\n                }\n            }\n            var binData = ensureBinary(data);\n            return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n        }\n    });\n    return STLLoader;\n});\ndefine('skylark-threejs-ex/loaders/SVGLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SVGLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.defaultDPI = 90;\n        this.defaultUnit = 'px';\n    };\n    SVGLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: SVGLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (text) {\n            var scope = this;\n            function parseNode(node, style) {\n                if (node.nodeType !== 1)\n                    return;\n                var transform = getNodeTransform(node);\n                var path = null;\n                switch (node.nodeName) {\n                case 'svg':\n                    break;\n                case 'g':\n                    style = parseStyle(node, style);\n                    break;\n                case 'path':\n                    style = parseStyle(node, style);\n                    if (node.hasAttribute('d'))\n                        path = parsePathNode(node);\n                    break;\n                case 'rect':\n                    style = parseStyle(node, style);\n                    path = parseRectNode(node);\n                    break;\n                case 'polygon':\n                    style = parseStyle(node, style);\n                    path = parsePolygonNode(node);\n                    break;\n                case 'polyline':\n                    style = parseStyle(node, style);\n                    path = parsePolylineNode(node);\n                    break;\n                case 'circle':\n                    style = parseStyle(node, style);\n                    path = parseCircleNode(node);\n                    break;\n                case 'ellipse':\n                    style = parseStyle(node, style);\n                    path = parseEllipseNode(node);\n                    break;\n                case 'line':\n                    style = parseStyle(node, style);\n                    path = parseLineNode(node);\n                    break;\n                default:\n                    console.log(node);\n                }\n                if (path) {\n                    if (style.fill !== undefined && style.fill !== 'none') {\n                        path.color.setStyle(style.fill);\n                    }\n                    transformPath(path, currentTransform);\n                    paths.push(path);\n                    path.userData = {\n                        node: node,\n                        style: style\n                    };\n                }\n                var nodes = node.childNodes;\n                for (var i = 0; i < nodes.length; i++) {\n                    parseNode(nodes[i], style);\n                }\n                if (transform) {\n                    transformStack.pop();\n                    if (transformStack.length > 0) {\n                        currentTransform.copy(transformStack[transformStack.length - 1]);\n                    } else {\n                        currentTransform.identity();\n                    }\n                }\n            }\n            function parsePathNode(node) {\n                var path = new THREE.ShapePath();\n                var point = new THREE.Vector2();\n                var control = new THREE.Vector2();\n                var firstPoint = new THREE.Vector2();\n                var isFirstPoint = true;\n                var doSetFirstPoint = false;\n                var d = node.getAttribute('d');\n                var commands = d.match(/[a-df-z][^a-df-z]*/ig);\n                for (var i = 0, l = commands.length; i < l; i++) {\n                    var command = commands[i];\n                    var type = command.charAt(0);\n                    var data = command.substr(1).trim();\n                    if (isFirstPoint === true) {\n                        doSetFirstPoint = true;\n                        isFirstPoint = false;\n                    }\n                    switch (type) {\n                    case 'M':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            if (j === 0) {\n                                path.moveTo(point.x, point.y);\n                            } else {\n                                path.lineTo(point.x, point.y);\n                            }\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'H':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.x = numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'V':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.y = numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'L':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'C':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {\n                            path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n                            control.x = numbers[j + 2];\n                            control.y = numbers[j + 3];\n                            point.x = numbers[j + 4];\n                            point.y = numbers[j + 5];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'S':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n                            control.x = numbers[j + 0];\n                            control.y = numbers[j + 1];\n                            point.x = numbers[j + 2];\n                            point.y = numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'Q':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n                            control.x = numbers[j + 0];\n                            control.y = numbers[j + 1];\n                            point.x = numbers[j + 2];\n                            point.y = numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'T':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            var rx = getReflection(point.x, control.x);\n                            var ry = getReflection(point.y, control.y);\n                            path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n                            control.x = rx;\n                            control.y = ry;\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'A':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {\n                            var start = point.clone();\n                            point.x = numbers[j + 5];\n                            point.y = numbers[j + 6];\n                            control.x = point.x;\n                            control.y = point.y;\n                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'm':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x += numbers[j + 0];\n                            point.y += numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            if (j === 0) {\n                                path.moveTo(point.x, point.y);\n                            } else {\n                                path.lineTo(point.x, point.y);\n                            }\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'h':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.x += numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'v':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.y += numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'l':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x += numbers[j + 0];\n                            point.y += numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'c':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {\n                            path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n                            control.x = point.x + numbers[j + 2];\n                            control.y = point.y + numbers[j + 3];\n                            point.x += numbers[j + 4];\n                            point.y += numbers[j + 5];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 's':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n                            control.x = point.x + numbers[j + 0];\n                            control.y = point.y + numbers[j + 1];\n                            point.x += numbers[j + 2];\n                            point.y += numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'q':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n                            control.x = point.x + numbers[j + 0];\n                            control.y = point.y + numbers[j + 1];\n                            point.x += numbers[j + 2];\n                            point.y += numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 't':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            var rx = getReflection(point.x, control.x);\n                            var ry = getReflection(point.y, control.y);\n                            path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n                            control.x = rx;\n                            control.y = ry;\n                            point.x = point.x + numbers[j + 0];\n                            point.y = point.y + numbers[j + 1];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'a':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {\n                            var start = point.clone();\n                            point.x += numbers[j + 5];\n                            point.y += numbers[j + 6];\n                            control.x = point.x;\n                            control.y = point.y;\n                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'Z':\n                    case 'z':\n                        path.currentPath.autoClose = true;\n                        if (path.currentPath.curves.length > 0) {\n                            point.copy(firstPoint);\n                            path.currentPath.currentPoint.copy(point);\n                            isFirstPoint = true;\n                        }\n                        break;\n                    default:\n                        console.warn(command);\n                    }\n                    doSetFirstPoint = false;\n                }\n                return path;\n            }\n            function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n                x_axis_rotation = x_axis_rotation * Math.PI / 180;\n                rx = Math.abs(rx);\n                ry = Math.abs(ry);\n                var dx2 = (start.x - end.x) / 2;\n                var dy2 = (start.y - end.y) / 2;\n                var x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n                var y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n                var rxs = rx * rx;\n                var rys = ry * ry;\n                var x1ps = x1p * x1p;\n                var y1ps = y1p * y1p;\n                var cr = x1ps / rxs + y1ps / rys;\n                if (cr > 1) {\n                    var s = Math.sqrt(cr);\n                    rx = s * rx;\n                    ry = s * ry;\n                    rxs = rx * rx;\n                    rys = ry * ry;\n                }\n                var dq = rxs * y1ps + rys * x1ps;\n                var pq = (rxs * rys - dq) / dq;\n                var q = Math.sqrt(Math.max(0, pq));\n                if (large_arc_flag === sweep_flag)\n                    q = -q;\n                var cxp = q * rx * y1p / ry;\n                var cyp = -q * ry * x1p / rx;\n                var cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n                var cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n                var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n                var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n                path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n            }\n            function svgAngle(ux, uy, vx, vy) {\n                var dot = ux * vx + uy * vy;\n                var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n                var ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n                if (ux * vy - uy * vx < 0)\n                    ang = -ang;\n                return ang;\n            }\n            function parseRectNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('x') || 0);\n                var y = parseFloatWithUnits(node.getAttribute('y') || 0);\n                var rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n                var ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n                var w = parseFloatWithUnits(node.getAttribute('width'));\n                var h = parseFloatWithUnits(node.getAttribute('height'));\n                var path = new THREE.ShapePath();\n                path.moveTo(x + 2 * rx, y);\n                path.lineTo(x + w - 2 * rx, y);\n                if (rx !== 0 || ry !== 0)\n                    path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);\n                path.lineTo(x + w, y + h - 2 * ry);\n                if (rx !== 0 || ry !== 0)\n                    path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);\n                path.lineTo(x + 2 * rx, y + h);\n                if (rx !== 0 || ry !== 0) {\n                    path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);\n                }\n                path.lineTo(x, y + 2 * ry);\n                if (rx !== 0 || ry !== 0) {\n                    path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);\n                }\n                return path;\n            }\n            function parsePolygonNode(node) {\n                function iterator(match, a, b) {\n                    var x = parseFloatWithUnits(a);\n                    var y = parseFloatWithUnits(b);\n                    if (index === 0) {\n                        path.moveTo(x, y);\n                    } else {\n                        path.lineTo(x, y);\n                    }\n                    index++;\n                }\n                var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n                var path = new THREE.ShapePath();\n                var index = 0;\n                node.getAttribute('points').replace(regex, iterator);\n                path.currentPath.autoClose = true;\n                return path;\n            }\n            function parsePolylineNode(node) {\n                function iterator(match, a, b) {\n                    var x = parseFloatWithUnits(a);\n                    var y = parseFloatWithUnits(b);\n                    if (index === 0) {\n                        path.moveTo(x, y);\n                    } else {\n                        path.lineTo(x, y);\n                    }\n                    index++;\n                }\n                var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n                var path = new THREE.ShapePath();\n                var index = 0;\n                node.getAttribute('points').replace(regex, iterator);\n                path.currentPath.autoClose = false;\n                return path;\n            }\n            function parseCircleNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('cx'));\n                var y = parseFloatWithUnits(node.getAttribute('cy'));\n                var r = parseFloatWithUnits(node.getAttribute('r'));\n                var subpath = new THREE.Path();\n                subpath.absarc(x, y, r, 0, Math.PI * 2);\n                var path = new THREE.ShapePath();\n                path.subPaths.push(subpath);\n                return path;\n            }\n            function parseEllipseNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('cx'));\n                var y = parseFloatWithUnits(node.getAttribute('cy'));\n                var rx = parseFloatWithUnits(node.getAttribute('rx'));\n                var ry = parseFloatWithUnits(node.getAttribute('ry'));\n                var subpath = new THREE.Path();\n                subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n                var path = new THREE.ShapePath();\n                path.subPaths.push(subpath);\n                return path;\n            }\n            function parseLineNode(node) {\n                var x1 = parseFloatWithUnits(node.getAttribute('x1'));\n                var y1 = parseFloatWithUnits(node.getAttribute('y1'));\n                var x2 = parseFloatWithUnits(node.getAttribute('x2'));\n                var y2 = parseFloatWithUnits(node.getAttribute('y2'));\n                var path = new THREE.ShapePath();\n                path.moveTo(x1, y1);\n                path.lineTo(x2, y2);\n                path.currentPath.autoClose = false;\n                return path;\n            }\n            function parseStyle(node, style) {\n                style = Object.assign({}, style);\n                function addStyle(svgName, jsName, adjustFunction) {\n                    if (adjustFunction === undefined)\n                        adjustFunction = function copy(v) {\n                            return v;\n                        };\n                    if (node.hasAttribute(svgName))\n                        style[jsName] = adjustFunction(node.getAttribute(svgName));\n                    if (node.style && node.style[svgName] !== '')\n                        style[jsName] = adjustFunction(node.style[svgName]);\n                }\n                function clamp(v) {\n                    return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n                }\n                function positive(v) {\n                    return Math.max(0, parseFloatWithUnits(v));\n                }\n                addStyle('fill', 'fill');\n                addStyle('fill-opacity', 'fillOpacity', clamp);\n                addStyle('stroke', 'stroke');\n                addStyle('stroke-opacity', 'strokeOpacity', clamp);\n                addStyle('stroke-width', 'strokeWidth', positive);\n                addStyle('stroke-linejoin', 'strokeLineJoin');\n                addStyle('stroke-linecap', 'strokeLineCap');\n                addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n                return style;\n            }\n            function getReflection(a, b) {\n                return a - (b - a);\n            }\n            function parseFloats(string) {\n                var array = string.split(/[\\s,]+|(?=\\s?[+\\-])/);\n                for (var i = 0; i < array.length; i++) {\n                    var number = array[i];\n                    if (number.indexOf('.') !== number.lastIndexOf('.')) {\n                        var split = number.split('.');\n                        for (var s = 2; s < split.length; s++) {\n                            array.splice(i + s - 1, 0, '0.' + split[s]);\n                        }\n                    }\n                    array[i] = parseFloatWithUnits(number);\n                }\n                return array;\n            }\n            var units = [\n                'mm',\n                'cm',\n                'in',\n                'pt',\n                'pc',\n                'px'\n            ];\n            var unitConversion = {\n                'mm': {\n                    'mm': 1,\n                    'cm': 0.1,\n                    'in': 1 / 25.4,\n                    'pt': 72 / 25.4,\n                    'pc': 6 / 25.4,\n                    'px': -1\n                },\n                'cm': {\n                    'mm': 10,\n                    'cm': 1,\n                    'in': 1 / 2.54,\n                    'pt': 72 / 2.54,\n                    'pc': 6 / 2.54,\n                    'px': -1\n                },\n                'in': {\n                    'mm': 25.4,\n                    'cm': 2.54,\n                    'in': 1,\n                    'pt': 72,\n                    'pc': 6,\n                    'px': -1\n                },\n                'pt': {\n                    'mm': 25.4 / 72,\n                    'cm': 2.54 / 72,\n                    'in': 1 / 72,\n                    'pt': 1,\n                    'pc': 6 / 72,\n                    'px': -1\n                },\n                'pc': {\n                    'mm': 25.4 / 6,\n                    'cm': 2.54 / 6,\n                    'in': 1 / 6,\n                    'pt': 72 / 6,\n                    'pc': 1,\n                    'px': -1\n                },\n                'px': { 'px': 1 }\n            };\n            function parseFloatWithUnits(string) {\n                var theUnit = 'px';\n                if (typeof string === 'string' || string instanceof String) {\n                    for (var i = 0, n = units.length; i < n; i++) {\n                        var u = units[i];\n                        if (string.endsWith(u)) {\n                            theUnit = u;\n                            string = string.substring(0, string.length - u.length);\n                            break;\n                        }\n                    }\n                }\n                var scale = undefined;\n                if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n                    scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n                } else {\n                    scale = unitConversion[theUnit][scope.defaultUnit];\n                    if (scale < 0) {\n                        scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n                    }\n                }\n                return scale * parseFloat(string);\n            }\n            function getNodeTransform(node) {\n                if (!node.hasAttribute('transform')) {\n                    return null;\n                }\n                var transform = parseNodeTransform(node);\n                if (transformStack.length > 0) {\n                    transform.premultiply(transformStack[transformStack.length - 1]);\n                }\n                currentTransform.copy(transform);\n                transformStack.push(transform);\n                return transform;\n            }\n            function parseNodeTransform(node) {\n                var transform = new THREE.Matrix3();\n                var currentTransform = tempTransform0;\n                var transformsTexts = node.getAttribute('transform').split(')');\n                for (var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n                    var transformText = transformsTexts[tIndex].trim();\n                    if (transformText === '')\n                        continue;\n                    var openParPos = transformText.indexOf('(');\n                    var closeParPos = transformText.length;\n                    if (openParPos > 0 && openParPos < closeParPos) {\n                        var transformType = transformText.substr(0, openParPos);\n                        var array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n                        currentTransform.identity();\n                        switch (transformType) {\n                        case 'translate':\n                            if (array.length >= 1) {\n                                var tx = array[0];\n                                var ty = tx;\n                                if (array.length >= 2) {\n                                    ty = array[1];\n                                }\n                                currentTransform.translate(tx, ty);\n                            }\n                            break;\n                        case 'rotate':\n                            if (array.length >= 1) {\n                                var angle = 0;\n                                var cx = 0;\n                                var cy = 0;\n                                angle = -array[0] * Math.PI / 180;\n                                if (array.length >= 3) {\n                                    cx = array[1];\n                                    cy = array[2];\n                                }\n                                tempTransform1.identity().translate(-cx, -cy);\n                                tempTransform2.identity().rotate(angle);\n                                tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                                tempTransform1.identity().translate(cx, cy);\n                                currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                            }\n                            break;\n                        case 'scale':\n                            if (array.length >= 1) {\n                                var scaleX = array[0];\n                                var scaleY = scaleX;\n                                if (array.length >= 2) {\n                                    scaleY = array[1];\n                                }\n                                currentTransform.scale(scaleX, scaleY);\n                            }\n                            break;\n                        case 'skewX':\n                            if (array.length === 1) {\n                                currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                            }\n                            break;\n                        case 'skewY':\n                            if (array.length === 1) {\n                                currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                            }\n                            break;\n                        case 'matrix':\n                            if (array.length === 6) {\n                                currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                            }\n                            break;\n                        }\n                    }\n                    transform.premultiply(currentTransform);\n                }\n                return transform;\n            }\n            function transformPath(path, m) {\n                function transfVec2(v2) {\n                    tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n                    v2.set(tempV3.x, tempV3.y);\n                }\n                var isRotated = isTransformRotated(m);\n                var subPaths = path.subPaths;\n                for (var i = 0, n = subPaths.length; i < n; i++) {\n                    var subPath = subPaths[i];\n                    var curves = subPath.curves;\n                    for (var j = 0; j < curves.length; j++) {\n                        var curve = curves[j];\n                        if (curve.isLineCurve) {\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                        } else if (curve.isCubicBezierCurve) {\n                            transfVec2(curve.v0);\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                            transfVec2(curve.v3);\n                        } else if (curve.isQuadraticBezierCurve) {\n                            transfVec2(curve.v0);\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                        } else if (curve.isEllipseCurve) {\n                            if (isRotated) {\n                                console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n                            }\n                            tempV2.set(curve.aX, curve.aY);\n                            transfVec2(tempV2);\n                            curve.aX = tempV2.x;\n                            curve.aY = tempV2.y;\n                            curve.xRadius *= getTransformScaleX(m);\n                            curve.yRadius *= getTransformScaleY(m);\n                        }\n                    }\n                }\n            }\n            function isTransformRotated(m) {\n                return m.elements[1] !== 0 || m.elements[3] !== 0;\n            }\n            function getTransformScaleX(m) {\n                var te = m.elements;\n                return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n            }\n            function getTransformScaleY(m) {\n                var te = m.elements;\n                return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n            }\n            var paths = [];\n            var transformStack = [];\n            var tempTransform0 = new THREE.Matrix3();\n            var tempTransform1 = new THREE.Matrix3();\n            var tempTransform2 = new THREE.Matrix3();\n            var tempTransform3 = new THREE.Matrix3();\n            var tempV2 = new THREE.Vector2();\n            var tempV3 = new THREE.Vector3();\n            var currentTransform = new THREE.Matrix3();\n            var xml = new DOMParser().parseFromString(text, 'image/svg+xml');\n            parseNode(xml.documentElement, {\n                fill: '#000',\n                fillOpacity: 1,\n                strokeOpacity: 1,\n                strokeWidth: 1,\n                strokeLineJoin: 'miter',\n                strokeLineCap: 'butt',\n                strokeMiterLimit: 4\n            });\n            var data = {\n                paths: paths,\n                xml: xml.documentElement\n            };\n            return data;\n        }\n    });\n    SVGLoader.getStrokeStyle = function (width, color, lineJoin, lineCap, miterLimit) {\n        width = width !== undefined ? width : 1;\n        color = color !== undefined ? color : '#000';\n        lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n        lineCap = lineCap !== undefined ? lineCap : 'butt';\n        miterLimit = miterLimit !== undefined ? miterLimit : 4;\n        return {\n            strokeColor: color,\n            strokeWidth: width,\n            strokeLineJoin: lineJoin,\n            strokeLineCap: lineCap,\n            strokeMiterLimit: miterLimit\n        };\n    };\n    SVGLoader.pointsToStroke = function (points, style, arcDivisions, minDistance) {\n        var vertices = [];\n        var normals = [];\n        var uvs = [];\n        if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n            return null;\n        }\n        var geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n        geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n        return geometry;\n    };\n    SVGLoader.pointsToStrokeWithBuffers = function () {\n        var tempV2_1 = new THREE.Vector2();\n        var tempV2_2 = new THREE.Vector2();\n        var tempV2_3 = new THREE.Vector2();\n        var tempV2_4 = new THREE.Vector2();\n        var tempV2_5 = new THREE.Vector2();\n        var tempV2_6 = new THREE.Vector2();\n        var tempV2_7 = new THREE.Vector2();\n        var lastPointL = new THREE.Vector2();\n        var lastPointR = new THREE.Vector2();\n        var point0L = new THREE.Vector2();\n        var point0R = new THREE.Vector2();\n        var currentPointL = new THREE.Vector2();\n        var currentPointR = new THREE.Vector2();\n        var nextPointL = new THREE.Vector2();\n        var nextPointR = new THREE.Vector2();\n        var innerPoint = new THREE.Vector2();\n        var outerPoint = new THREE.Vector2();\n        return function (points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n            arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n            minDistance = minDistance !== undefined ? minDistance : 0.001;\n            vertexOffset = vertexOffset !== undefined ? vertexOffset : 0;\n            points = removeDuplicatedPoints(points);\n            var numPoints = points.length;\n            if (numPoints < 2)\n                return 0;\n            var isClosed = points[0].equals(points[numPoints - 1]);\n            var currentPoint;\n            var previousPoint = points[0];\n            var nextPoint;\n            var strokeWidth2 = style.strokeWidth / 2;\n            var deltaU = 1 / (numPoints - 1);\n            var u0 = 0;\n            var innerSideModified;\n            var joinIsOnLeftSide;\n            var isMiter;\n            var initialJoinIsOnLeftSide = false;\n            var numVertices = 0;\n            var currentCoordinate = vertexOffset * 3;\n            var currentCoordinateUV = vertexOffset * 2;\n            getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n            lastPointL.copy(points[0]).sub(tempV2_1);\n            lastPointR.copy(points[0]).add(tempV2_1);\n            point0L.copy(lastPointL);\n            point0R.copy(lastPointR);\n            for (var iPoint = 1; iPoint < numPoints; iPoint++) {\n                currentPoint = points[iPoint];\n                if (iPoint === numPoints - 1) {\n                    if (isClosed) {\n                        nextPoint = points[1];\n                    } else\n                        nextPoint = undefined;\n                } else {\n                    nextPoint = points[iPoint + 1];\n                }\n                var normal1 = tempV2_1;\n                getNormal(previousPoint, currentPoint, normal1);\n                tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n                currentPointL.copy(currentPoint).sub(tempV2_3);\n                currentPointR.copy(currentPoint).add(tempV2_3);\n                var u1 = u0 + deltaU;\n                innerSideModified = false;\n                if (nextPoint !== undefined) {\n                    getNormal(currentPoint, nextPoint, tempV2_2);\n                    tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n                    nextPointL.copy(currentPoint).sub(tempV2_3);\n                    nextPointR.copy(currentPoint).add(tempV2_3);\n                    joinIsOnLeftSide = true;\n                    tempV2_3.subVectors(nextPoint, previousPoint);\n                    if (normal1.dot(tempV2_3) < 0) {\n                        joinIsOnLeftSide = false;\n                    }\n                    if (iPoint === 1)\n                        initialJoinIsOnLeftSide = joinIsOnLeftSide;\n                    tempV2_3.subVectors(nextPoint, currentPoint);\n                    tempV2_3.normalize();\n                    var dot = Math.abs(normal1.dot(tempV2_3));\n                    if (dot !== 0) {\n                        var miterSide = strokeWidth2 / dot;\n                        tempV2_3.multiplyScalar(-miterSide);\n                        tempV2_4.subVectors(currentPoint, previousPoint);\n                        tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n                        innerPoint.copy(tempV2_5).negate();\n                        var miterLength2 = tempV2_5.length();\n                        var segmentLengthPrev = tempV2_4.length();\n                        tempV2_4.divideScalar(segmentLengthPrev);\n                        tempV2_6.subVectors(nextPoint, currentPoint);\n                        var segmentLengthNext = tempV2_6.length();\n                        tempV2_6.divideScalar(segmentLengthNext);\n                        if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n                            innerSideModified = true;\n                        }\n                        outerPoint.copy(tempV2_5).add(currentPoint);\n                        innerPoint.add(currentPoint);\n                        isMiter = false;\n                        if (innerSideModified) {\n                            if (joinIsOnLeftSide) {\n                                nextPointR.copy(innerPoint);\n                                currentPointR.copy(innerPoint);\n                            } else {\n                                nextPointL.copy(innerPoint);\n                                currentPointL.copy(innerPoint);\n                            }\n                        } else {\n                            makeSegmentTriangles();\n                        }\n                        switch (style.strokeLineJoin) {\n                        case 'bevel':\n                            makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                            break;\n                        case 'round':\n                            createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                            if (joinIsOnLeftSide) {\n                                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n                            } else {\n                                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n                            }\n                            break;\n                        case 'miter':\n                        case 'miter-clip':\n                        default:\n                            var miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n                            if (miterFraction < 1) {\n                                if (style.strokeLineJoin !== 'miter-clip') {\n                                    makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                                    break;\n                                } else {\n                                    createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                                    if (joinIsOnLeftSide) {\n                                        tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                                        tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                                        addVertex(currentPointL, u1, 0);\n                                        addVertex(tempV2_6, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_6, u1, 0);\n                                        addVertex(tempV2_7, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_7, u1, 0);\n                                        addVertex(nextPointL, u1, 0);\n                                    } else {\n                                        tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                                        tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                                        addVertex(currentPointR, u1, 1);\n                                        addVertex(tempV2_6, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_6, u1, 1);\n                                        addVertex(tempV2_7, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_7, u1, 1);\n                                        addVertex(nextPointR, u1, 1);\n                                    }\n                                }\n                            } else {\n                                if (innerSideModified) {\n                                    if (joinIsOnLeftSide) {\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(innerPoint, u1, 1);\n                                    } else {\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(innerPoint, u1, 0);\n                                        addVertex(outerPoint, u1, 1);\n                                    }\n                                    if (joinIsOnLeftSide) {\n                                        nextPointL.copy(outerPoint);\n                                    } else {\n                                        nextPointR.copy(outerPoint);\n                                    }\n                                } else {\n                                    if (joinIsOnLeftSide) {\n                                        addVertex(currentPointL, u1, 0);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(nextPointL, u1, 0);\n                                    } else {\n                                        addVertex(currentPointR, u1, 1);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(nextPointR, u1, 1);\n                                    }\n                                }\n                                isMiter = true;\n                            }\n                            break;\n                        }\n                    } else {\n                        makeSegmentTriangles();\n                    }\n                } else {\n                    makeSegmentTriangles();\n                }\n                if (!isClosed && iPoint === numPoints - 1) {\n                    addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n                }\n                u0 = u1;\n                previousPoint = currentPoint;\n                lastPointL.copy(nextPointL);\n                lastPointR.copy(nextPointR);\n            }\n            if (!isClosed) {\n                addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n            } else if (innerSideModified && vertices) {\n                var lastOuter = outerPoint;\n                var lastInner = innerPoint;\n                if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n                    lastOuter = innerPoint;\n                    lastInner = outerPoint;\n                }\n                if (joinIsOnLeftSide) {\n                    if (isMiter || initialJoinIsOnLeftSide) {\n                        lastInner.toArray(vertices, 0 * 3);\n                        lastInner.toArray(vertices, 3 * 3);\n                        if (isMiter) {\n                            lastOuter.toArray(vertices, 1 * 3);\n                        }\n                    }\n                } else {\n                    if (isMiter || !initialJoinIsOnLeftSide) {\n                        lastInner.toArray(vertices, 1 * 3);\n                        lastInner.toArray(vertices, 3 * 3);\n                        if (isMiter) {\n                            lastOuter.toArray(vertices, 0 * 3);\n                        }\n                    }\n                }\n            }\n            return numVertices;\n            function getNormal(p1, p2, result) {\n                result.subVectors(p2, p1);\n                return result.set(-result.y, result.x).normalize();\n            }\n            function addVertex(position, u, v) {\n                if (vertices) {\n                    vertices[currentCoordinate] = position.x;\n                    vertices[currentCoordinate + 1] = position.y;\n                    vertices[currentCoordinate + 2] = 0;\n                    if (normals) {\n                        normals[currentCoordinate] = 0;\n                        normals[currentCoordinate + 1] = 0;\n                        normals[currentCoordinate + 2] = 1;\n                    }\n                    currentCoordinate += 3;\n                    if (uvs) {\n                        uvs[currentCoordinateUV] = u;\n                        uvs[currentCoordinateUV + 1] = v;\n                        currentCoordinateUV += 2;\n                    }\n                }\n                numVertices += 3;\n            }\n            function makeCircularSector(center, p1, p2, u, v) {\n                tempV2_1.copy(p1).sub(center).normalize();\n                tempV2_2.copy(p2).sub(center).normalize();\n                var angle = Math.PI;\n                var dot = tempV2_1.dot(tempV2_2);\n                if (Math.abs(dot) < 1)\n                    angle = Math.abs(Math.acos(dot));\n                angle /= arcDivisions;\n                tempV2_3.copy(p1);\n                for (var i = 0, il = arcDivisions - 1; i < il; i++) {\n                    tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n                    addVertex(tempV2_3, u, v);\n                    addVertex(tempV2_4, u, v);\n                    addVertex(center, u, 0.5);\n                    tempV2_3.copy(tempV2_4);\n                }\n                addVertex(tempV2_4, u, v);\n                addVertex(p2, u, v);\n                addVertex(center, u, 0.5);\n            }\n            function makeSegmentTriangles() {\n                addVertex(lastPointR, u0, 1);\n                addVertex(lastPointL, u0, 0);\n                addVertex(currentPointL, u1, 0);\n                addVertex(lastPointR, u0, 1);\n                addVertex(currentPointL, u1, 1);\n                addVertex(currentPointR, u1, 0);\n            }\n            function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n                if (innerSideModified) {\n                    if (joinIsOnLeftSide) {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPointL, u, 0);\n                        addVertex(nextPointL, u, 0);\n                        addVertex(innerPoint, u, 0.5);\n                    } else {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(currentPointR, u, 1);\n                        addVertex(nextPointR, u, 0);\n                        addVertex(innerPoint, u, 0.5);\n                    }\n                } else {\n                    if (joinIsOnLeftSide) {\n                        addVertex(currentPointL, u, 0);\n                        addVertex(nextPointL, u, 0);\n                        addVertex(currentPoint, u, 0.5);\n                    } else {\n                        addVertex(currentPointR, u, 1);\n                        addVertex(nextPointR, u, 0);\n                        addVertex(currentPoint, u, 0.5);\n                    }\n                }\n            }\n            function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n                if (innerSideModified) {\n                    if (joinIsOnLeftSide) {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPointL, u0, 0);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(nextPointL, u0, 0);\n                        addVertex(innerPoint, u1, 1);\n                    } else {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(currentPointR, u0, 1);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(nextPointR, u0, 1);\n                    }\n                }\n            }\n            function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n                switch (style.strokeLineCap) {\n                case 'round':\n                    if (start) {\n                        makeCircularSector(center, p2, p1, u, 0.5);\n                    } else {\n                        makeCircularSector(center, p1, p2, u, 0.5);\n                    }\n                    break;\n                case 'square':\n                    if (start) {\n                        tempV2_1.subVectors(p1, center);\n                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n                        if (joinIsOnLeftSide) {\n                            tempV2_3.toArray(vertices, 1 * 3);\n                            tempV2_4.toArray(vertices, 0 * 3);\n                            tempV2_4.toArray(vertices, 3 * 3);\n                        } else {\n                            tempV2_3.toArray(vertices, 1 * 3);\n                            tempV2_3.toArray(vertices, 3 * 3);\n                            tempV2_4.toArray(vertices, 0 * 3);\n                        }\n                    } else {\n                        tempV2_1.subVectors(p2, center);\n                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n                        var vl = vertices.length;\n                        if (joinIsOnLeftSide) {\n                            tempV2_3.toArray(vertices, vl - 1 * 3);\n                            tempV2_4.toArray(vertices, vl - 2 * 3);\n                            tempV2_4.toArray(vertices, vl - 4 * 3);\n                        } else {\n                            tempV2_3.toArray(vertices, vl - 2 * 3);\n                            tempV2_4.toArray(vertices, vl - 1 * 3);\n                            tempV2_4.toArray(vertices, vl - 4 * 3);\n                        }\n                    }\n                    break;\n                case 'butt':\n                default:\n                    break;\n                }\n            }\n            function removeDuplicatedPoints(points) {\n                var dupPoints = false;\n                for (var i = 1, n = points.length - 1; i < n; i++) {\n                    if (points[i].distanceTo(points[i + 1]) < minDistance) {\n                        dupPoints = true;\n                        break;\n                    }\n                }\n                if (!dupPoints)\n                    return points;\n                var newPoints = [];\n                newPoints.push(points[0]);\n                for (var i = 1, n = points.length - 1; i < n; i++) {\n                    if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n                        newPoints.push(points[i]);\n                    }\n                }\n                newPoints.push(points[points.length - 1]);\n                return newPoints;\n            }\n        };\n    }();\n    return SVGLoader;\n});\ndefine('skylark-threejs-ex/loaders/TDSLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TDSLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.debug = false;\n        this.group = null;\n        this.position = 0;\n        this.materials = [];\n        this.meshes = [];\n    };\n    TDSLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TDSLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                onLoad(scope.parse(data, path));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer, path) {\n            this.group = new THREE.Group();\n            this.position = 0;\n            this.materials = [];\n            this.meshes = [];\n            this.readFile(arraybuffer, path);\n            for (var i = 0; i < this.meshes.length; i++) {\n                this.group.add(this.meshes[i]);\n            }\n            return this.group;\n        },\n        readFile: function (arraybuffer, path) {\n            var data = new DataView(arraybuffer);\n            var chunk = this.readChunk(data);\n            if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n                var next = this.nextChunk(data, chunk);\n                while (next !== 0) {\n                    if (next === M3D_VERSION) {\n                        var version = this.readDWord(data);\n                        this.debugMessage('3DS file version: ' + version);\n                    } else if (next === MDATA) {\n                        this.resetPosition(data);\n                        this.readMeshData(data, path);\n                    } else {\n                        this.debugMessage('Unknown main chunk: ' + next.toString(16));\n                    }\n                    next = this.nextChunk(data, chunk);\n                }\n            }\n            this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n        },\n        readMeshData: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === MESH_VERSION) {\n                    var version = +this.readDWord(data);\n                    this.debugMessage('Mesh Version: ' + version);\n                } else if (next === MASTER_SCALE) {\n                    var scale = this.readFloat(data);\n                    this.debugMessage('Master scale: ' + scale);\n                    this.group.scale.set(scale, scale, scale);\n                } else if (next === NAMED_OBJECT) {\n                    this.debugMessage('Named Object');\n                    this.resetPosition(data);\n                    this.readNamedObject(data);\n                } else if (next === MAT_ENTRY) {\n                    this.debugMessage('Material');\n                    this.resetPosition(data);\n                    this.readMaterialEntry(data, path);\n                } else {\n                    this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n        },\n        readNamedObject: function (data) {\n            var chunk = this.readChunk(data);\n            var name = this.readString(data, 64);\n            chunk.cur = this.position;\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === N_TRI_OBJECT) {\n                    this.resetPosition(data);\n                    var mesh = this.readMesh(data);\n                    mesh.name = name;\n                    this.meshes.push(mesh);\n                } else {\n                    this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMaterialEntry: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var material = new THREE.MeshPhongMaterial();\n            while (next !== 0) {\n                if (next === MAT_NAME) {\n                    material.name = this.readString(data, 64);\n                    this.debugMessage('   Name: ' + material.name);\n                } else if (next === MAT_WIRE) {\n                    this.debugMessage('   Wireframe');\n                    material.wireframe = true;\n                } else if (next === MAT_WIRE_SIZE) {\n                    var value = this.readByte(data);\n                    material.wireframeLinewidth = value;\n                    this.debugMessage('   Wireframe Thickness: ' + value);\n                } else if (next === MAT_TWO_SIDE) {\n                    material.side = THREE.DoubleSide;\n                    this.debugMessage('   DoubleSided');\n                } else if (next === MAT_ADDITIVE) {\n                    this.debugMessage('   Additive Blending');\n                    material.blending = THREE.AdditiveBlending;\n                } else if (next === MAT_DIFFUSE) {\n                    this.debugMessage('   Diffuse Color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SPECULAR) {\n                    this.debugMessage('   Specular Color');\n                    material.specular = this.readColor(data);\n                } else if (next === MAT_AMBIENT) {\n                    this.debugMessage('   Ambient color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SHININESS) {\n                    var shininess = this.readWord(data);\n                    material.shininess = shininess;\n                    this.debugMessage('   Shininess : ' + shininess);\n                } else if (next === MAT_TRANSPARENCY) {\n                    var opacity = this.readWord(data);\n                    material.opacity = opacity * 0.01;\n                    this.debugMessage('  Opacity : ' + opacity);\n                    material.transparent = opacity < 100 ? true : false;\n                } else if (next === MAT_TEXMAP) {\n                    this.debugMessage('   ColorMap');\n                    this.resetPosition(data);\n                    material.map = this.readMap(data, path);\n                } else if (next === MAT_BUMPMAP) {\n                    this.debugMessage('   BumpMap');\n                    this.resetPosition(data);\n                    material.bumpMap = this.readMap(data, path);\n                } else if (next === MAT_OPACMAP) {\n                    this.debugMessage('   OpacityMap');\n                    this.resetPosition(data);\n                    material.alphaMap = this.readMap(data, path);\n                } else if (next === MAT_SPECMAP) {\n                    this.debugMessage('   SpecularMap');\n                    this.resetPosition(data);\n                    material.specularMap = this.readMap(data, path);\n                } else {\n                    this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            this.materials[material.name] = material;\n        },\n        readMesh: function (data) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var geometry = new THREE.BufferGeometry();\n            var uvs = [];\n            var material = new THREE.MeshPhongMaterial();\n            var mesh = new THREE.Mesh(geometry, material);\n            mesh.name = 'mesh';\n            while (next !== 0) {\n                if (next === POINT_ARRAY) {\n                    var points = this.readWord(data);\n                    this.debugMessage('   Vertex: ' + points);\n                    var vertices = [];\n                    for (var i = 0; i < points; i++) {\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                } else if (next === FACE_ARRAY) {\n                    this.resetPosition(data);\n                    this.readFaceArray(data, mesh);\n                } else if (next === TEX_VERTS) {\n                    var texels = this.readWord(data);\n                    this.debugMessage('   UV: ' + texels);\n                    var uvs = [];\n                    for (var i = 0; i < texels; i++) {\n                        uvs.push(this.readFloat(data));\n                        uvs.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                } else if (next === MESH_MATRIX) {\n                    this.debugMessage('   Tranformation Matrix (TODO)');\n                    var values = [];\n                    for (var i = 0; i < 12; i++) {\n                        values[i] = this.readFloat(data);\n                    }\n                    var matrix = new THREE.Matrix4();\n                    matrix.elements[0] = values[0];\n                    matrix.elements[1] = values[6];\n                    matrix.elements[2] = values[3];\n                    matrix.elements[3] = values[9];\n                    matrix.elements[4] = values[2];\n                    matrix.elements[5] = values[8];\n                    matrix.elements[6] = values[5];\n                    matrix.elements[7] = values[11];\n                    matrix.elements[8] = values[1];\n                    matrix.elements[9] = values[7];\n                    matrix.elements[10] = values[4];\n                    matrix.elements[11] = values[10];\n                    matrix.elements[12] = 0;\n                    matrix.elements[13] = 0;\n                    matrix.elements[14] = 0;\n                    matrix.elements[15] = 1;\n                    matrix.transpose();\n                    var inverse = new THREE.Matrix4();\n                    inverse.getInverse(matrix);\n                    geometry.applyMatrix4(inverse);\n                    matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n                } else {\n                    this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            geometry.computeVertexNormals();\n            return mesh;\n        },\n        readFaceArray: function (data, mesh) {\n            var chunk = this.readChunk(data);\n            var faces = this.readWord(data);\n            this.debugMessage('   Faces: ' + faces);\n            var index = [];\n            for (var i = 0; i < faces; ++i) {\n                index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n                this.readWord(data);\n            }\n            mesh.geometry.setIndex(index);\n            while (this.position < chunk.end) {\n                var chunk = this.readChunk(data);\n                if (chunk.id === MSH_MAT_GROUP) {\n                    this.debugMessage('      Material Group');\n                    this.resetPosition(data);\n                    var group = this.readMaterialGroup(data);\n                    var material = this.materials[group.name];\n                    if (material !== undefined) {\n                        mesh.material = material;\n                        if (material.name === '') {\n                            material.name = mesh.name;\n                        }\n                    }\n                } else {\n                    this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));\n                }\n                this.endChunk(chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMap: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var texture = {};\n            var loader = new THREE.TextureLoader(this.manager);\n            loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            while (next !== 0) {\n                if (next === MAT_MAPNAME) {\n                    var name = this.readString(data, 128);\n                    texture = loader.load(name);\n                    this.debugMessage('      File: ' + path + name);\n                } else if (next === MAT_MAP_UOFFSET) {\n                    texture.offset.x = this.readFloat(data);\n                    this.debugMessage('      OffsetX: ' + texture.offset.x);\n                } else if (next === MAT_MAP_VOFFSET) {\n                    texture.offset.y = this.readFloat(data);\n                    this.debugMessage('      OffsetY: ' + texture.offset.y);\n                } else if (next === MAT_MAP_USCALE) {\n                    texture.repeat.x = this.readFloat(data);\n                    this.debugMessage('      RepeatX: ' + texture.repeat.x);\n                } else if (next === MAT_MAP_VSCALE) {\n                    texture.repeat.y = this.readFloat(data);\n                    this.debugMessage('      RepeatY: ' + texture.repeat.y);\n                } else {\n                    this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            return texture;\n        },\n        readMaterialGroup: function (data) {\n            this.readChunk(data);\n            var name = this.readString(data, 64);\n            var numFaces = this.readWord(data);\n            this.debugMessage('         Name: ' + name);\n            this.debugMessage('         Faces: ' + numFaces);\n            var index = [];\n            for (var i = 0; i < numFaces; ++i) {\n                index.push(this.readWord(data));\n            }\n            return {\n                name: name,\n                index: index\n            };\n        },\n        readColor: function (data) {\n            var chunk = this.readChunk(data);\n            var color = new THREE.Color();\n            if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n                var r = this.readByte(data);\n                var g = this.readByte(data);\n                var b = this.readByte(data);\n                color.setRGB(r / 255, g / 255, b / 255);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n                var r = this.readFloat(data);\n                var g = this.readFloat(data);\n                var b = this.readFloat(data);\n                color.setRGB(r, g, b);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else {\n                this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n            }\n            this.endChunk(chunk);\n            return color;\n        },\n        readChunk: function (data) {\n            var chunk = {};\n            chunk.cur = this.position;\n            chunk.id = this.readWord(data);\n            chunk.size = this.readDWord(data);\n            chunk.end = chunk.cur + chunk.size;\n            chunk.cur += 6;\n            return chunk;\n        },\n        endChunk: function (chunk) {\n            this.position = chunk.end;\n        },\n        nextChunk: function (data, chunk) {\n            if (chunk.cur >= chunk.end) {\n                return 0;\n            }\n            this.position = chunk.cur;\n            try {\n                var next = this.readChunk(data);\n                chunk.cur += next.size;\n                return next.id;\n            } catch (e) {\n                this.debugMessage('Unable to read chunk at ' + this.position);\n                return 0;\n            }\n        },\n        resetPosition: function () {\n            this.position -= 6;\n        },\n        readByte: function (data) {\n            var v = data.getUint8(this.position, true);\n            this.position += 1;\n            return v;\n        },\n        readFloat: function (data) {\n            try {\n                var v = data.getFloat32(this.position, true);\n                this.position += 4;\n                return v;\n            } catch (e) {\n                this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n            }\n        },\n        readInt: function (data) {\n            var v = data.getInt32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readShort: function (data) {\n            var v = data.getInt16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readDWord: function (data) {\n            var v = data.getUint32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readWord: function (data) {\n            var v = data.getUint16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readString: function (data, maxLength) {\n            var s = '';\n            for (var i = 0; i < maxLength; i++) {\n                var c = this.readByte(data);\n                if (!c) {\n                    break;\n                }\n                s += String.fromCharCode(c);\n            }\n            return s;\n        },\n        debugMessage: function (message) {\n            if (this.debug) {\n                console.log(message);\n            }\n        }\n    });\n    var M3DMAGIC = 19789;\n    var MLIBMAGIC = 15786;\n    var CMAGIC = 49725;\n    var M3D_VERSION = 2;\n    var COLOR_F = 16;\n    var COLOR_24 = 17;\n    var LIN_COLOR_24 = 18;\n    var LIN_COLOR_F = 19;\n    var MDATA = 15677;\n    var MESH_VERSION = 15678;\n    var MASTER_SCALE = 256;\n    var MAT_ENTRY = 45055;\n    var MAT_NAME = 40960;\n    var MAT_AMBIENT = 40976;\n    var MAT_DIFFUSE = 40992;\n    var MAT_SPECULAR = 41008;\n    var MAT_SHININESS = 41024;\n    var MAT_TRANSPARENCY = 41040;\n    var MAT_TWO_SIDE = 41089;\n    var MAT_ADDITIVE = 41091;\n    var MAT_WIRE = 41093;\n    var MAT_WIRE_SIZE = 41095;\n    var MAT_TEXMAP = 41472;\n    var MAT_OPACMAP = 41488;\n    var MAT_BUMPMAP = 41520;\n    var MAT_SPECMAP = 41476;\n    var MAT_MAPNAME = 41728;\n    var MAT_MAP_USCALE = 41812;\n    var MAT_MAP_VSCALE = 41814;\n    var MAT_MAP_UOFFSET = 41816;\n    var MAT_MAP_VOFFSET = 41818;\n    var NAMED_OBJECT = 16384;\n    var N_TRI_OBJECT = 16640;\n    var POINT_ARRAY = 16656;\n    var FACE_ARRAY = 16672;\n    var MSH_MAT_GROUP = 16688;\n    var TEX_VERTS = 16704;\n    var MESH_MATRIX = 16736;\n\n    return TDSLoader;\n});\ndefine('skylark-threejs-ex/loaders/VTKLoader',[\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate'\n], function (\n    THREE, \n    Inflate\n) {\n    'use strict';\n    var VTKLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    VTKLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: VTKLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function parseASCII(data) {\n                var indices = [];\n                var positions = [];\n                var colors = [];\n                var normals = [];\n                var result;\n                var patWord = /^[^\\d.\\s-]+/;\n                var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n                var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n                var patPOINTS = /^POINTS /;\n                var patPOLYGONS = /^POLYGONS /;\n                var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n                var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n                var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n                var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n                var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n                var inPointsSection = false;\n                var inPolygonsSection = false;\n                var inTriangleStripSection = false;\n                var inPointDataSection = false;\n                var inCellDataSection = false;\n                var inColorSection = false;\n                var inNormalsSection = false;\n                var lines = data.split('\\n');\n                for (var i in lines) {\n                    var line = lines[i].trim();\n                    if (line.indexOf('DATASET') === 0) {\n                        var dataset = line.split(' ')[1];\n                        if (dataset !== 'POLYDATA')\n                            throw new Error('Unsupported DATASET type: ' + dataset);\n                    } else if (inPointsSection) {\n                        while ((result = pat3Floats.exec(line)) !== null) {\n                            if (patWord.exec(line) !== null)\n                                break;\n                            var x = parseFloat(result[1]);\n                            var y = parseFloat(result[2]);\n                            var z = parseFloat(result[3]);\n                            positions.push(x, y, z);\n                        }\n                    } else if (inPolygonsSection) {\n                        if ((result = patConnectivity.exec(line)) !== null) {\n                            var numVertices = parseInt(result[1]);\n                            var inds = result[2].split(/\\s+/);\n                            if (numVertices >= 3) {\n                                var i0 = parseInt(inds[0]);\n                                var i1, i2;\n                                var k = 1;\n                                for (var j = 0; j < numVertices - 2; ++j) {\n                                    i1 = parseInt(inds[k]);\n                                    i2 = parseInt(inds[k + 1]);\n                                    indices.push(i0, i1, i2);\n                                    k++;\n                                }\n                            }\n                        }\n                    } else if (inTriangleStripSection) {\n                        if ((result = patConnectivity.exec(line)) !== null) {\n                            var numVertices = parseInt(result[1]);\n                            var inds = result[2].split(/\\s+/);\n                            if (numVertices >= 3) {\n                                var i0, i1, i2;\n                                for (var j = 0; j < numVertices - 2; j++) {\n                                    if (j % 2 === 1) {\n                                        i0 = parseInt(inds[j]);\n                                        i1 = parseInt(inds[j + 2]);\n                                        i2 = parseInt(inds[j + 1]);\n                                        indices.push(i0, i1, i2);\n                                    } else {\n                                        i0 = parseInt(inds[j]);\n                                        i1 = parseInt(inds[j + 1]);\n                                        i2 = parseInt(inds[j + 2]);\n                                        indices.push(i0, i1, i2);\n                                    }\n                                }\n                            }\n                        }\n                    } else if (inPointDataSection || inCellDataSection) {\n                        if (inColorSection) {\n                            while ((result = pat3Floats.exec(line)) !== null) {\n                                if (patWord.exec(line) !== null)\n                                    break;\n                                var r = parseFloat(result[1]);\n                                var g = parseFloat(result[2]);\n                                var b = parseFloat(result[3]);\n                                colors.push(r, g, b);\n                            }\n                        } else if (inNormalsSection) {\n                            while ((result = pat3Floats.exec(line)) !== null) {\n                                if (patWord.exec(line) !== null)\n                                    break;\n                                var nx = parseFloat(result[1]);\n                                var ny = parseFloat(result[2]);\n                                var nz = parseFloat(result[3]);\n                                normals.push(nx, ny, nz);\n                            }\n                        }\n                    }\n                    if (patPOLYGONS.exec(line) !== null) {\n                        inPolygonsSection = true;\n                        inPointsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patPOINTS.exec(line) !== null) {\n                        inPolygonsSection = false;\n                        inPointsSection = true;\n                        inTriangleStripSection = false;\n                    } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n                        inPolygonsSection = false;\n                        inPointsSection = false;\n                        inTriangleStripSection = true;\n                    } else if (patPOINT_DATA.exec(line) !== null) {\n                        inPointDataSection = true;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patCELL_DATA.exec(line) !== null) {\n                        inCellDataSection = true;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patCOLOR_SCALARS.exec(line) !== null) {\n                        inColorSection = true;\n                        inNormalsSection = false;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patNORMALS.exec(line) !== null) {\n                        inNormalsSection = true;\n                        inColorSection = false;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    }\n                }\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(indices);\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n                if (normals.length === positions.length) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                }\n                if (colors.length !== indices.length) {\n                    if (colors.length === positions.length) {\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n                    }\n                } else {\n                    geometry = geometry.toNonIndexed();\n                    var numTriangles = geometry.attributes.position.count / 3;\n                    if (colors.length === numTriangles * 3) {\n                        var newColors = [];\n                        for (var i = 0; i < numTriangles; i++) {\n                            var r = colors[3 * i + 0];\n                            var g = colors[3 * i + 1];\n                            var b = colors[3 * i + 2];\n                            newColors.push(r, g, b);\n                            newColors.push(r, g, b);\n                            newColors.push(r, g, b);\n                        }\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));\n                    }\n                }\n                return geometry;\n            }\n            function parseBinary(data) {\n                var count, pointIndex, i, numberOfPoints, s;\n                var buffer = new Uint8Array(data);\n                var dataView = new DataView(data);\n                var points = [];\n                var normals = [];\n                var indices = [];\n                var vtk = [];\n                var index = 0;\n                function findString(buffer, start) {\n                    var index = start;\n                    var c = buffer[index];\n                    var s = [];\n                    while (c !== 10) {\n                        s.push(String.fromCharCode(c));\n                        index++;\n                        c = buffer[index];\n                    }\n                    return {\n                        start: start,\n                        end: index,\n                        next: index + 1,\n                        parsedString: s.join('')\n                    };\n                }\n                var state, line;\n                while (true) {\n                    state = findString(buffer, index);\n                    line = state.parsedString;\n                    if (line.indexOf('DATASET') === 0) {\n                        var dataset = line.split(' ')[1];\n                        if (dataset !== 'POLYDATA')\n                            throw new Error('Unsupported DATASET type: ' + dataset);\n                    } else if (line.indexOf('POINTS') === 0) {\n                        vtk.push(line);\n                        numberOfPoints = parseInt(line.split(' ')[1], 10);\n                        count = numberOfPoints * 4 * 3;\n                        points = new Float32Array(numberOfPoints * 3);\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfPoints; i++) {\n                            points[3 * i] = dataView.getFloat32(pointIndex, false);\n                            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n                            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n                            pointIndex = pointIndex + 12;\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n                        var numberOfStrips = parseInt(line.split(' ')[1], 10);\n                        var size = parseInt(line.split(' ')[2], 10);\n                        count = size * 4;\n                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                        var indicesIndex = 0;\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfStrips; i++) {\n                            var indexCount = dataView.getInt32(pointIndex, false);\n                            var strip = [];\n                            pointIndex += 4;\n                            for (s = 0; s < indexCount; s++) {\n                                strip.push(dataView.getInt32(pointIndex, false));\n                                pointIndex += 4;\n                            }\n                            for (var j = 0; j < indexCount - 2; j++) {\n                                if (j % 2) {\n                                    indices[indicesIndex++] = strip[j];\n                                    indices[indicesIndex++] = strip[j + 2];\n                                    indices[indicesIndex++] = strip[j + 1];\n                                } else {\n                                    indices[indicesIndex++] = strip[j];\n                                    indices[indicesIndex++] = strip[j + 1];\n                                    indices[indicesIndex++] = strip[j + 2];\n                                }\n                            }\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('POLYGONS') === 0) {\n                        var numberOfStrips = parseInt(line.split(' ')[1], 10);\n                        var size = parseInt(line.split(' ')[2], 10);\n                        count = size * 4;\n                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                        var indicesIndex = 0;\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfStrips; i++) {\n                            var indexCount = dataView.getInt32(pointIndex, false);\n                            var strip = [];\n                            pointIndex += 4;\n                            for (s = 0; s < indexCount; s++) {\n                                strip.push(dataView.getInt32(pointIndex, false));\n                                pointIndex += 4;\n                            }\n                            for (var j = 1; j < indexCount - 1; j++) {\n                                indices[indicesIndex++] = strip[0];\n                                indices[indicesIndex++] = strip[j];\n                                indices[indicesIndex++] = strip[j + 1];\n                            }\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('POINT_DATA') === 0) {\n                        numberOfPoints = parseInt(line.split(' ')[1], 10);\n                        state = findString(buffer, state.next);\n                        count = numberOfPoints * 4 * 3;\n                        normals = new Float32Array(numberOfPoints * 3);\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfPoints; i++) {\n                            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n                            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n                            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n                            pointIndex += 12;\n                        }\n                        state.next = state.next + count;\n                    }\n                    index = state.next;\n                    if (index >= buffer.byteLength) {\n                        break;\n                    }\n                }\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n                geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));\n                if (normals.length === points.length) {\n                    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                }\n                return geometry;\n            }\n            function Float32Concat(first, second) {\n                var firstLength = first.length, result = new Float32Array(firstLength + second.length);\n                result.set(first);\n                result.set(second, firstLength);\n                return result;\n            }\n            function Int32Concat(first, second) {\n                var firstLength = first.length, result = new Int32Array(firstLength + second.length);\n                result.set(first);\n                result.set(second, firstLength);\n                return result;\n            }\n            function parseXML(stringFile) {\n                function xmlToJson(xml) {\n                    var obj = {};\n                    if (xml.nodeType === 1) {\n                        if (xml.attributes) {\n                            if (xml.attributes.length > 0) {\n                                obj['attributes'] = {};\n                                for (var j = 0; j < xml.attributes.length; j++) {\n                                    var attribute = xml.attributes.item(j);\n                                    obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();\n                                }\n                            }\n                        }\n                    } else if (xml.nodeType === 3) {\n                        obj = xml.nodeValue.trim();\n                    }\n                    if (xml.hasChildNodes()) {\n                        for (var i = 0; i < xml.childNodes.length; i++) {\n                            var item = xml.childNodes.item(i);\n                            var nodeName = item.nodeName;\n                            if (typeof obj[nodeName] === 'undefined') {\n                                var tmp = xmlToJson(item);\n                                if (tmp !== '')\n                                    obj[nodeName] = tmp;\n                            } else {\n                                if (typeof obj[nodeName].push === 'undefined') {\n                                    var old = obj[nodeName];\n                                    obj[nodeName] = [old];\n                                }\n                                var tmp = xmlToJson(item);\n                                if (tmp !== '')\n                                    obj[nodeName].push(tmp);\n                            }\n                        }\n                    }\n                    return obj;\n                }\n                function Base64toByteArray(b64) {\n                    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n                    var i;\n                    var lookup = [];\n                    var revLookup = [];\n                    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n                    var len = code.length;\n                    for (i = 0; i < len; i++) {\n                        lookup[i] = code[i];\n                    }\n                    for (i = 0; i < len; ++i) {\n                        revLookup[code.charCodeAt(i)] = i;\n                    }\n                    revLookup['-'.charCodeAt(0)] = 62;\n                    revLookup['_'.charCodeAt(0)] = 63;\n                    var j, l, tmp, placeHolders, arr;\n                    var len = b64.length;\n                    if (len % 4 > 0) {\n                        throw new Error('Invalid string. Length must be a multiple of 4');\n                    }\n                    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n                    arr = new Arr(len * 3 / 4 - placeHolders);\n                    l = placeHolders > 0 ? len - 4 : len;\n                    var L = 0;\n                    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n                        arr[L++] = (tmp & 16711680) >> 16;\n                        arr[L++] = (tmp & 65280) >> 8;\n                        arr[L++] = tmp & 255;\n                    }\n                    if (placeHolders === 2) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n                        arr[L++] = tmp & 255;\n                    } else if (placeHolders === 1) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n                        arr[L++] = tmp >> 8 & 255;\n                        arr[L++] = tmp & 255;\n                    }\n                    return arr;\n                }\n                function parseDataArray(ele, compressed) {\n                    var numBytes = 0;\n                    if (json.attributes.header_type === 'UInt64') {\n                        numBytes = 8;\n                    } else if (json.attributes.header_type === 'UInt32') {\n                        numBytes = 4;\n                    }\n                    if (ele.attributes.format === 'binary' && compressed) {\n                        var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n                        if (ele.attributes.type === 'Float32') {\n                            var txt = new Float32Array();\n                        } else if (ele.attributes.type === 'Int64') {\n                            var txt = new Int32Array();\n                        }\n                        rawData = ele['#text'];\n                        byteData = Base64toByteArray(rawData);\n                        blocks = byteData[0];\n                        for (var i = 1; i < numBytes - 1; i++) {\n                            blocks = blocks | byteData[i] << i * numBytes;\n                        }\n                        headerSize = (blocks + 3) * numBytes;\n                        padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n                        headerSize = headerSize + padding;\n                        dataOffsets = [];\n                        currentOffset = headerSize;\n                        dataOffsets.push(currentOffset);\n                        cSizeStart = 3 * numBytes;\n                        for (var i = 0; i < blocks; i++) {\n                            var currentBlockSize = byteData[i * numBytes + cSizeStart];\n                            for (var j = 1; j < numBytes - 1; j++) {\n                                currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;\n                            }\n                            currentOffset = currentOffset + currentBlockSize;\n                            dataOffsets.push(currentOffset);\n                        }\n                        for (var i = 0; i < dataOffsets.length - 1; i++) {\n                            var inflate = new Inflate(byteData.slice(dataOffsets[i], dataOffsets[i + 1]), {\n                                resize: true,\n                                verify: true\n                            });\n                            content = inflate.decompress();\n                            content = content.buffer;\n                            if (ele.attributes.type === 'Float32') {\n                                content = new Float32Array(content);\n                                txt = Float32Concat(txt, content);\n                            } else if (ele.attributes.type === 'Int64') {\n                                content = new Int32Array(content);\n                                txt = Int32Concat(txt, content);\n                            }\n                        }\n                        delete ele['#text'];\n                        if (ele.attributes.type === 'Int64') {\n                            if (ele.attributes.format === 'binary') {\n                                txt = txt.filter(function (el, idx) {\n                                    if (idx % 2 !== 1)\n                                        return true;\n                                });\n                            }\n                        }\n                    } else {\n                        if (ele.attributes.format === 'binary' && !compressed) {\n                            var content = Base64toByteArray(ele['#text']);\n                            content = content.slice(numBytes).buffer;\n                        } else {\n                            if (ele['#text']) {\n                                var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                                    if (el !== '')\n                                        return el;\n                                });\n                            } else {\n                                var content = new Int32Array(0).buffer;\n                            }\n                        }\n                        delete ele['#text'];\n                        if (ele.attributes.type === 'Float32') {\n                            var txt = new Float32Array(content);\n                        } else if (ele.attributes.type === 'Int32') {\n                            var txt = new Int32Array(content);\n                        } else if (ele.attributes.type === 'Int64') {\n                            var txt = new Int32Array(content);\n                            if (ele.attributes.format === 'binary') {\n                                txt = txt.filter(function (el, idx) {\n                                    if (idx % 2 !== 1)\n                                        return true;\n                                });\n                            }\n                        }\n                    }\n                    return txt;\n                }\n                var dom = null;\n                if (window.DOMParser) {\n                    try {\n                        dom = new DOMParser().parseFromString(stringFile, 'text/xml');\n                    } catch (e) {\n                        dom = null;\n                    }\n                } else if (window.ActiveXObject) {\n                    try {\n                        dom = new ActiveXObject('Microsoft.XMLDOM');\n                        dom.async = false;\n                        if (!dom.loadXML()) {\n                            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n                        }\n                    } catch (e) {\n                        dom = null;\n                    }\n                } else {\n                    throw new Error('Cannot parse xml string!');\n                }\n                var doc = dom.documentElement;\n                var json = xmlToJson(doc);\n                var points = [];\n                var normals = [];\n                var indices = [];\n                if (json.PolyData) {\n                    var piece = json.PolyData.Piece;\n                    var compressed = json.attributes.hasOwnProperty('compressor');\n                    var sections = [\n                        'PointData',\n                        'Points',\n                        'Strips',\n                        'Polys'\n                    ];\n                    var sectionIndex = 0, numberOfSections = sections.length;\n                    while (sectionIndex < numberOfSections) {\n                        var section = piece[sections[sectionIndex]];\n                        if (section && section.DataArray) {\n                            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n                                var arr = section.DataArray;\n                            } else {\n                                var arr = [section.DataArray];\n                            }\n                            var dataArrayIndex = 0, numberOfDataArrays = arr.length;\n                            while (dataArrayIndex < numberOfDataArrays) {\n                                if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                                    arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n                                }\n                                dataArrayIndex++;\n                            }\n                            switch (sections[sectionIndex]) {\n                            case 'PointData':\n                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                                var normalsName = section.attributes.Normals;\n                                if (numberOfPoints > 0) {\n                                    for (var i = 0, len = arr.length; i < len; i++) {\n                                        if (normalsName === arr[i].attributes.Name) {\n                                            var components = arr[i].attributes.NumberOfComponents;\n                                            normals = new Float32Array(numberOfPoints * components);\n                                            normals.set(arr[i].text, 0);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 'Points':\n                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                                if (numberOfPoints > 0) {\n                                    var components = section.DataArray.attributes.NumberOfComponents;\n                                    points = new Float32Array(numberOfPoints * components);\n                                    points.set(section.DataArray.text, 0);\n                                }\n                                break;\n                            case 'Strips':\n                                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                                if (numberOfStrips > 0) {\n                                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                                    var offset = new Int32Array(section.DataArray[1].text.length);\n                                    connectivity.set(section.DataArray[0].text, 0);\n                                    offset.set(section.DataArray[1].text, 0);\n                                    var size = numberOfStrips + connectivity.length;\n                                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                                    var indicesIndex = 0;\n                                    for (var i = 0, len = numberOfStrips; i < len; i++) {\n                                        var strip = [];\n                                        for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                                            strip.push(connectivity[s]);\n                                            if (i > 0)\n                                                len0 = offset[i - 1];\n                                        }\n                                        for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                                            if (j % 2) {\n                                                indices[indicesIndex++] = strip[j];\n                                                indices[indicesIndex++] = strip[j + 2];\n                                                indices[indicesIndex++] = strip[j + 1];\n                                            } else {\n                                                indices[indicesIndex++] = strip[j];\n                                                indices[indicesIndex++] = strip[j + 1];\n                                                indices[indicesIndex++] = strip[j + 2];\n                                            }\n                                            if (i > 0)\n                                                len0 = offset[i - 1];\n                                        }\n                                    }\n                                }\n                                break;\n                            case 'Polys':\n                                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                                if (numberOfPolys > 0) {\n                                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                                    var offset = new Int32Array(section.DataArray[1].text.length);\n                                    connectivity.set(section.DataArray[0].text, 0);\n                                    offset.set(section.DataArray[1].text, 0);\n                                    var size = numberOfPolys + connectivity.length;\n                                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                                    var indicesIndex = 0, connectivityIndex = 0;\n                                    var i = 0, len = numberOfPolys, len0 = 0;\n                                    while (i < len) {\n                                        var poly = [];\n                                        var s = 0, len1 = offset[i];\n                                        while (s < len1 - len0) {\n                                            poly.push(connectivity[connectivityIndex++]);\n                                            s++;\n                                        }\n                                        var j = 1;\n                                        while (j < len1 - len0 - 1) {\n                                            indices[indicesIndex++] = poly[0];\n                                            indices[indicesIndex++] = poly[j];\n                                            indices[indicesIndex++] = poly[j + 1];\n                                            j++;\n                                        }\n                                        i++;\n                                        len0 = offset[i - 1];\n                                    }\n                                }\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n                        sectionIndex++;\n                    }\n                    var geometry = new THREE.BufferGeometry();\n                    geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));\n                    if (normals.length === points.length) {\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                    }\n                    return geometry;\n                } else {\n                    throw new Error('Unsupported DATASET type');\n                }\n            }\n            function getStringFile(data) {\n                var stringFile = '';\n                var charArray = new Uint8Array(data);\n                var i = 0;\n                var len = charArray.length;\n                while (len--) {\n                    stringFile += String.fromCharCode(charArray[i++]);\n                }\n                return stringFile;\n            }\n            var meta = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\\n');\n            if (meta[0].indexOf('xml') !== -1) {\n                return parseXML(getStringFile(data));\n            } else if (meta[2].includes('ASCII')) {\n                return parseASCII(getStringFile(data));\n            } else {\n                return parseBinary(data);\n            }\n        }\n    });\n\n    return VTKLoader;\n});\ndefine('skylark-threejs-ex/loaders/XLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var XLoader = function () {\n        var classCallCheck = function (instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n            }\n        };\n        var createClass = function () {\n            function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if ('value' in descriptor)\n                        descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            return function (Constructor, protoProps, staticProps) {\n                if (protoProps)\n                    defineProperties(Constructor.prototype, protoProps);\n                if (staticProps)\n                    defineProperties(Constructor, staticProps);\n                return Constructor;\n            };\n        }();\n        var XboneInf = function XboneInf() {\n            classCallCheck(this, XboneInf);\n            this.boneName = '';\n            this.BoneIndex = 0;\n            this.Indeces = [];\n            this.Weights = [];\n            this.initMatrix = null;\n            this.OffsetMatrix = null;\n        };\n        var XAnimationInfo = function XAnimationInfo() {\n            classCallCheck(this, XAnimationInfo);\n            this.animeName = '';\n            this.boneName = '';\n            this.targetBone = null;\n            this.keyType = 4;\n            this.frameStartLv = 0;\n            this.keyFrames = [];\n            this.InverseMx = null;\n        };\n        var XAnimationObj = function () {\n            function XAnimationObj(_flags) {\n                classCallCheck(this, XAnimationObj);\n                this.fps = 30;\n                this.name = 'xanimation';\n                this.length = 0;\n                this.hierarchy = [];\n                this.putFlags = _flags;\n                if (this.putFlags.putPos === undefined) {\n                    this.putFlags.putPos = true;\n                }\n                if (this.putFlags.putRot === undefined) {\n                    this.putFlags.putRot = true;\n                }\n                if (this.putFlags.putScl === undefined) {\n                    this.putFlags.putScl = true;\n                }\n            }\n            createClass(XAnimationObj, [\n                {\n                    key: 'make',\n                    value: function make(XAnimationInfoArray) {\n                        for (var i = 0; i < XAnimationInfoArray.length; i++) {\n                            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n                        }\n                        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n                    }\n                },\n                {\n                    key: 'clone',\n                    value: function clone() {\n                        return Object.assign({}, this);\n                    }\n                },\n                {\n                    key: 'makeBonekeys',\n                    value: function makeBonekeys(XAnimationInfo) {\n                        var refObj = {};\n                        refObj.name = XAnimationInfo.boneName;\n                        refObj.parent = '';\n                        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n                        refObj.copy = function () {\n                            return Object.assign({}, this);\n                        };\n                        return refObj;\n                    }\n                },\n                {\n                    key: 'keyFrameRefactor',\n                    value: function keyFrameRefactor(XAnimationInfo) {\n                        var keys = [];\n                        for (var i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n                            var keyframe = {};\n                            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n                            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n                                keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n                            }\n                            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n                                keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n                            }\n                            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n                                keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n                            }\n                            if (XAnimationInfo.keyFrames[i].matrix) {\n                                keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n                                if (this.putFlags.putPos) {\n                                    keyframe.pos = new THREE.Vector3().setFromMatrixPosition(keyframe.matrix);\n                                }\n                                if (this.putFlags.putRot) {\n                                    keyframe.rot = new THREE.Quaternion().setFromRotationMatrix(keyframe.matrix);\n                                }\n                                if (this.putFlags.putScl) {\n                                    keyframe.scl = new THREE.Vector3().setFromMatrixScale(keyframe.matrix);\n                                }\n                            }\n                            keys.push(keyframe);\n                        }\n                        return keys;\n                    }\n                }\n            ]);\n            return XAnimationObj;\n        }();\n        var XKeyFrameInfo = function XKeyFrameInfo() {\n            classCallCheck(this, XKeyFrameInfo);\n            this.index = 0;\n            this.Frame = 0;\n            this.time = 0;\n            this.matrix = null;\n        };\n        var XLoader = function () {\n            function XLoader(manager) {\n                THREE.Loader.call(this, manager);\n                classCallCheck(this, XLoader);\n                this.debug = false;\n                this.texloader = new THREE.TextureLoader(this.manager);\n                this.url = '';\n                this._putMatLength = 0;\n                this._nowMat = null;\n                this._nowFrameName = '';\n                this.frameHierarchie = [];\n                this.Hierarchies = {};\n                this.HieStack = [];\n                this._currentObject = {};\n                this._currentFrame = {};\n                this._data = null;\n                this.onLoad = null;\n                this.IsUvYReverse = true;\n                this.Meshes = [];\n                this.animations = [];\n                this.animTicksPerSecond = 30;\n                this._currentGeo = null;\n                this._currentAnime = null;\n                this._currentAnimeFrames = null;\n            }\n            createClass(XLoader, [\n                {\n                    key: '_setArgOption',\n                    value: function _setArgOption(_arg) {\n                        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        if (!_arg) {\n                            return;\n                        }\n                        for (var i = _start; i < _arg.length; i++) {\n                            switch (i) {\n                            case 0:\n                                this.url = _arg[i];\n                                break;\n                            case 1:\n                                this.options = _arg[i];\n                                break;\n                            }\n                        }\n                        if (this.options === undefined) {\n                            this.options = {};\n                        }\n                    }\n                },\n                {\n                    key: 'load',\n                    value: function load(_arg, onLoad, onProgress, onError) {\n                        var _this = this;\n                        this._setArgOption(_arg);\n                        var loader = new THREE.FileLoader(this.manager);\n                        loader.setPath(this.path);\n                        loader.setResponseType('arraybuffer');\n                        loader.load(this.url, function (response) {\n                            _this.parse(response, onLoad);\n                        }, onProgress, onError);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_isBinary',\n                    value: function _isBinary(binData) {\n                        var reader = new DataView(binData);\n                        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                        var n_faces = reader.getUint32(80, true);\n                        var expect = 80 + 32 / 8 + n_faces * face_size;\n                        if (expect === reader.byteLength) {\n                            return true;\n                        }\n                        var fileLength = reader.byteLength;\n                        for (var index = 0; index < fileLength; index++) {\n                            if (reader.getUint8(index, false) > 127) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: '_ensureBinary',\n                    value: function _ensureBinary(buf) {\n                        if (typeof buf === 'string') {\n                            var array_buffer = new Uint8Array(buf.length);\n                            for (var i = 0; i < buf.length; i++) {\n                                array_buffer[i] = buf.charCodeAt(i) & 255;\n                            }\n                            return array_buffer.buffer || array_buffer;\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: '_ensureString',\n                    value: function _ensureString(buf) {\n                        if (typeof buf !== 'string') {\n                            return THREE.LoaderUtils.decodeText(new Uint8Array(buf));\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: 'parse',\n                    value: function _parse(data, onLoad) {\n                        var binData = this._ensureBinary(data);\n                        this._data = this._ensureString(data);\n                        this.onLoad = onLoad;\n                        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n                    }\n                },\n                {\n                    key: '_parseBinary',\n                    value: function _parseBinary(data) {\n                        return this._parseASCII(THREE.LoaderUtils.decodeText(new Uint8Array(data)));\n                    }\n                },\n                {\n                    key: '_parseASCII',\n                    value: function _parseASCII() {\n                        var path;\n                        if (this.resourcePath !== '') {\n                            path = this.resourcePath;\n                        } else if (this.path !== '') {\n                            path = this.path;\n                        } else {\n                            path = THREE.LoaderUtils.extractUrlBase(this.url);\n                        }\n                        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n                        var endRead = 16;\n                        this.Hierarchies.children = [];\n                        this._hierarchieParse(this.Hierarchies, endRead);\n                        this._changeRoot();\n                        this._currentObject = this.Hierarchies.children.shift();\n                        this._mainloop();\n                    }\n                },\n                {\n                    key: '_hierarchieParse',\n                    value: function _hierarchieParse(_parent, _end) {\n                        var endRead = _end;\n                        while (true) {\n                            var find1 = this._data.indexOf('{', endRead) + 1;\n                            var findEnd = this._data.indexOf('}', endRead);\n                            var findNext = this._data.indexOf('{', find1) + 1;\n                            if (find1 > 0 && findEnd > find1) {\n                                var _currentObject = {};\n                                _currentObject.children = [];\n                                var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n                                var word = nameData.split(/ /g);\n                                if (word.length > 0) {\n                                    _currentObject.type = word[0];\n                                    if (word.length >= 2) {\n                                        _currentObject.name = word[1];\n                                    } else {\n                                        _currentObject.name = word[0] + this.Hierarchies.children.length;\n                                    }\n                                } else {\n                                    _currentObject.name = nameData;\n                                    _currentObject.type = '';\n                                }\n                                if (_currentObject.type === 'Animation') {\n                                    _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n                                    var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n                                    endRead = refs.end;\n                                    _currentObject.children = refs.parent.children;\n                                } else {\n                                    var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n                                    _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n                                    if (findNext <= 0 || findEnd < findNext) {\n                                        endRead = findEnd + 1;\n                                    } else {\n                                        var nextStart = Math.max(DataEnder + 1, find1);\n                                        var _refs = this._hierarchieParse(_currentObject, nextStart);\n                                        endRead = _refs.end;\n                                        _currentObject.children = _refs.parent.children;\n                                    }\n                                }\n                                _currentObject.parent = _parent;\n                                if (_currentObject.type != 'template') {\n                                    _parent.children.push(_currentObject);\n                                }\n                            } else {\n                                endRead = find1 === -1 ? this._data.length : findEnd + 1;\n                                break;\n                            }\n                        }\n                        return {\n                            parent: _parent,\n                            end: endRead\n                        };\n                    }\n                },\n                {\n                    key: '_mainloop',\n                    value: function _mainloop() {\n                        var _this2 = this;\n                        this._mainProc();\n                        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n                            setTimeout(function () {\n                                _this2._mainloop();\n                            }, 1);\n                        } else {\n                            setTimeout(function () {\n                                _this2.onLoad({\n                                    models: _this2.Meshes,\n                                    animations: _this2.animations\n                                });\n                            }, 1);\n                        }\n                    }\n                },\n                {\n                    key: '_mainProc',\n                    value: function _mainProc() {\n                        var breakFlag = false;\n                        while (true) {\n                            if (!this._currentObject.worked) {\n                                switch (this._currentObject.type) {\n                                case 'template':\n                                    break;\n                                case 'AnimTicksPerSecond':\n                                    this.animTicksPerSecond = parseInt(this._currentObject.data);\n                                    break;\n                                case 'Frame':\n                                    this._setFrame();\n                                    break;\n                                case 'FrameTransformMatrix':\n                                    this._setFrameTransformMatrix();\n                                    break;\n                                case 'Mesh':\n                                    this._changeRoot();\n                                    this._currentGeo = {};\n                                    this._currentGeo.name = this._currentObject.name.trim();\n                                    this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                                    this._currentGeo.VertexSetedBoneCount = [];\n                                    this._currentGeo.GeometryData = {\n                                        vertices: [],\n                                        normals: [],\n                                        uvs: [],\n                                        skinIndices: [],\n                                        skinWeights: [],\n                                        indices: [],\n                                        materialIndices: []\n                                    };\n                                    this._currentGeo.Materials = [];\n                                    this._currentGeo.normalVectors = [];\n                                    this._currentGeo.BoneInfs = [];\n                                    this._currentGeo.baseFrame = this._currentFrame;\n                                    this._makeBoneFrom_CurrentFrame();\n                                    this._readVertexDatas();\n                                    breakFlag = true;\n                                    break;\n                                case 'MeshNormals':\n                                    this._readVertexDatas();\n                                    break;\n                                case 'MeshTextureCoords':\n                                    this._setMeshTextureCoords();\n                                    break;\n                                case 'VertexDuplicationIndices':\n                                    break;\n                                case 'MeshMaterialList':\n                                    this._setMeshMaterialList();\n                                    break;\n                                case 'Material':\n                                    this._setMaterial();\n                                    break;\n                                case 'SkinWeights':\n                                    this._setSkinWeights();\n                                    break;\n                                case 'AnimationSet':\n                                    this._changeRoot();\n                                    this._currentAnime = {};\n                                    this._currentAnime.name = this._currentObject.name.trim();\n                                    this._currentAnime.AnimeFrames = [];\n                                    break;\n                                case 'Animation':\n                                    if (this._currentAnimeFrames) {\n                                        this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                    }\n                                    this._currentAnimeFrames = new XAnimationInfo();\n                                    this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                                    break;\n                                case 'AnimationKey':\n                                    this._readAnimationKey();\n                                    breakFlag = true;\n                                    break;\n                                }\n                                this._currentObject.worked = true;\n                            }\n                            if (this._currentObject.children.length > 0) {\n                                this._currentObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + this._currentObject.name);\n                                }\n                                if (breakFlag)\n                                    break;\n                            } else {\n                                if (this._currentObject.worked) {\n                                    if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                                        this._changeRoot();\n                                    }\n                                }\n                                if (this._currentObject.parent) {\n                                    this._currentObject = this._currentObject.parent;\n                                } else {\n                                    breakFlag = true;\n                                }\n                                if (breakFlag)\n                                    break;\n                            }\n                        }\n                        return;\n                    }\n                },\n                {\n                    key: '_changeRoot',\n                    value: function _changeRoot() {\n                        if (this._currentGeo != null && this._currentGeo.name) {\n                            this._makeOutputGeometry();\n                        }\n                        this._currentGeo = {};\n                        if (this._currentAnime != null && this._currentAnime.name) {\n                            if (this._currentAnimeFrames) {\n                                this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                this._currentAnimeFrames = null;\n                            }\n                            this._makeOutputAnimation();\n                        }\n                        this._currentAnime = {};\n                    }\n                },\n                {\n                    key: '_getParentName',\n                    value: function _getParentName(_obj) {\n                        if (_obj.parent) {\n                            if (_obj.parent.name) {\n                                return _obj.parent.name;\n                            } else {\n                                return this._getParentName(_obj.parent);\n                            }\n                        } else {\n                            return '';\n                        }\n                    }\n                },\n                {\n                    key: '_setFrame',\n                    value: function _setFrame() {\n                        this._nowFrameName = this._currentObject.name.trim();\n                        this._currentFrame = {};\n                        this._currentFrame.name = this._nowFrameName;\n                        this._currentFrame.children = [];\n                        if (this._currentObject.parent && this._currentObject.parent.name) {\n                            this._currentFrame.parentName = this._currentObject.parent.name;\n                        }\n                        this.frameHierarchie.push(this._nowFrameName);\n                        this.HieStack[this._nowFrameName] = this._currentFrame;\n                    }\n                },\n                {\n                    key: '_setFrameTransformMatrix',\n                    value: function _setFrameTransformMatrix() {\n                        this._currentFrame.FrameTransformMatrix = new THREE.Matrix4();\n                        var data = this._currentObject.data.split(',');\n                        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n                        this._makeBoneFrom_CurrentFrame();\n                    }\n                },\n                {\n                    key: '_makeBoneFrom_CurrentFrame',\n                    value: function _makeBoneFrom_CurrentFrame() {\n                        if (!this._currentFrame.FrameTransformMatrix) {\n                            return;\n                        }\n                        var b = new THREE.Bone();\n                        b.name = this._currentFrame.name;\n                        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n                        b.matrixWorld = b.matrix;\n                        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n                        this._currentFrame.putBone = b;\n                        if (this._currentFrame.parentName) {\n                            for (var frame in this.HieStack) {\n                                if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                                    this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readVertexDatas',\n                    value: function _readVertexDatas() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        var maxLength = 0;\n                        while (true) {\n                            var changeMode = false;\n                            if (mode_local === 0) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local = 1;\n                                maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n                                if (maxLength <= 0) {\n                                    maxLength = this._currentObject.data.length;\n                                }\n                            } else {\n                                var find = 0;\n                                switch (mode) {\n                                case 0:\n                                    find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    break;\n                                case 1:\n                                    find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                                    break;\n                                }\n                                if (find === 0 || find > maxLength) {\n                                    find = maxLength;\n                                    mode_local = 0;\n                                    changeMode = true;\n                                }\n                                switch (this._currentObject.type) {\n                                case 'Mesh':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    case 1:\n                                        this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                case 'MeshNormals':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                }\n                                endRead = find + 1;\n                                if (changeMode) {\n                                    mode++;\n                                }\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readInt1',\n                    value: function _readInt1(start) {\n                        var find = this._currentObject.data.indexOf(';', start);\n                        return {\n                            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n                            endRead: find + 1\n                        };\n                    }\n                },\n                {\n                    key: '_readVertex1',\n                    value: function _readVertex1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n                        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n                        this._currentGeo.VertexSetedBoneCount.push(0);\n                    }\n                },\n                {\n                    key: '_readFace1',\n                    value: function _readFace1(line) {\n                        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n                        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n                    }\n                },\n                {\n                    key: '_readNormalVector1',\n                    value: function _readNormalVector1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                    }\n                },\n                {\n                    key: '_buildGeometry',\n                    value: function _buildGeometry() {\n                        var bufferGeometry = new THREE.BufferGeometry();\n                        var position = [];\n                        var normals = [];\n                        var uvs = [];\n                        var skinIndices = [];\n                        var skinWeights = [];\n                        var data = this._currentGeo.GeometryData;\n                        for (var i = 0, l = data.indices.length; i < l; i++) {\n                            var stride2 = data.indices[i] * 2;\n                            var stride3 = data.indices[i] * 3;\n                            var stride4 = data.indices[i] * 4;\n                            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n                            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n                            skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n                            skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n                            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n                        }\n                        bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n                        bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                        bufferGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                        bufferGeometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));\n                        bufferGeometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));\n                        this._computeGroups(bufferGeometry, data.materialIndices);\n                        return bufferGeometry;\n                    }\n                },\n                {\n                    key: '_computeGroups',\n                    value: function _computeGroups(bufferGeometry, materialIndices) {\n                        var group;\n                        var groups = [];\n                        var materialIndex = undefined;\n                        for (var i = 0; i < materialIndices.length; i++) {\n                            var currentMaterialIndex = materialIndices[i];\n                            if (currentMaterialIndex !== materialIndex) {\n                                materialIndex = currentMaterialIndex;\n                                if (group !== undefined) {\n                                    group.count = i * 3 - group.start;\n                                    groups.push(group);\n                                }\n                                group = {\n                                    start: i * 3,\n                                    materialIndex: materialIndex\n                                };\n                            }\n                        }\n                        if (group !== undefined) {\n                            group.count = i * 3 - group.start;\n                            groups.push(group);\n                        }\n                        bufferGeometry.groups = groups;\n                    }\n                },\n                {\n                    key: '_setMeshTextureCoords',\n                    value: function _setMeshTextureCoords() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            switch (mode) {\n                            case 0:\n                                if (mode_local === 0) {\n                                    var refO = this._readInt1(0);\n                                    endRead = refO.endRead;\n                                    mode_local = 1;\n                                } else {\n                                    var find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    if (find === 0) {\n                                        find = this._currentObject.data.length;\n                                        mode = 2;\n                                        mode_local = 0;\n                                    }\n                                    var line = this._currentObject.data.substr(endRead, find - endRead);\n                                    var data = this._readLine(line.trim()).split(';');\n                                    if (this.IsUvYReverse) {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                                    } else {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                                    }\n                                    endRead = find + 1;\n                                }\n                                break;\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMeshMaterialList',\n                    value: function _setMeshMaterialList() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            if (mode_local < 2) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local++;\n                            } else {\n                                var find = this._currentObject.data.indexOf(';', endRead);\n                                if (find === -1) {\n                                    find = this._currentObject.data.length;\n                                    mode = 3;\n                                    mode_local = 0;\n                                }\n                                var line = this._currentObject.data.substr(endRead, find - endRead);\n                                var data = this._readLine(line.trim()).split(',');\n                                for (var i = 0; i < data.length; i++) {\n                                    this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n                                }\n                                endRead = this._currentObject.data.length;\n                            }\n                            if (endRead >= this._currentObject.data.length || mode >= 3) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMaterial',\n                    value: function _setMaterial() {\n                        var _nowMat = new THREE.MeshPhongMaterial({ color: Math.random() * 16777215 });\n                        _nowMat.side = THREE.FrontSide;\n                        _nowMat.name = this._currentObject.name;\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';;', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(';');\n                        _nowMat.color.r = parseFloat(data[0]);\n                        _nowMat.color.g = parseFloat(data[1]);\n                        _nowMat.color.b = parseFloat(data[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        _nowMat.shininess = parseFloat(this._readLine(line));\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(';');\n                        _nowMat.specular.r = parseFloat(data2[0]);\n                        _nowMat.specular.g = parseFloat(data2[1]);\n                        _nowMat.specular.b = parseFloat(data2[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        if (find === -1) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(';');\n                        _nowMat.emissive.r = parseFloat(data3[0]);\n                        _nowMat.emissive.g = parseFloat(data3[1]);\n                        _nowMat.emissive.b = parseFloat(data3[2]);\n                        var localObject = null;\n                        while (true) {\n                            if (this._currentObject.children.length > 0) {\n                                localObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + localObject.name);\n                                }\n                                var fileName = localObject.data.substr(1, localObject.data.length - 2);\n                                switch (localObject.type) {\n                                case 'TextureFilename':\n                                    _nowMat.map = this.texloader.load(fileName);\n                                    break;\n                                case 'BumpMapFilename':\n                                    _nowMat.bumpMap = this.texloader.load(fileName);\n                                    _nowMat.bumpScale = 0.05;\n                                    break;\n                                case 'NormalMapFilename':\n                                    _nowMat.normalMap = this.texloader.load(fileName);\n                                    _nowMat.normalScale = new THREE.Vector2(2, 2);\n                                    break;\n                                case 'EmissiveMapFilename':\n                                    _nowMat.emissiveMap = this.texloader.load(fileName);\n                                    break;\n                                case 'LightMapFilename':\n                                    _nowMat.lightMap = this.texloader.load(fileName);\n                                    break;\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        this._currentGeo.Materials.push(_nowMat);\n                    }\n                },\n                {\n                    key: '_setSkinWeights',\n                    value: function _setSkinWeights() {\n                        var boneInf = new XboneInf();\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        boneInf.boneName = line.substr(1, line.length - 2);\n                        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(',');\n                        for (var i = 0; i < data.length; i++) {\n                            boneInf.Indeces.push(parseInt(data[i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(',');\n                        for (var _i = 0; _i < data2.length; _i++) {\n                            boneInf.Weights.push(parseFloat(data2[_i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        if (find <= 0) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(',');\n                        boneInf.OffsetMatrix = new THREE.Matrix4();\n                        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n                        this._currentGeo.BoneInfs.push(boneInf);\n                    }\n                },\n                {\n                    key: '_makePutBoneList',\n                    value: function _makePutBoneList(_RootName, _bones) {\n                        var putting = false;\n                        for (var frame in this.HieStack) {\n                            if (this.HieStack[frame].name === _RootName || putting) {\n                                putting = true;\n                                var b = new THREE.Bone();\n                                b.name = this.HieStack[frame].name;\n                                b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n                                b.matrixWorld = b.matrix;\n                                b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n                                b.pos = new THREE.Vector3().setFromMatrixPosition(FrameTransformMatrix).toArray();\n                                b.rotq = new THREE.Quaternion().setFromRotationMatrix(FrameTransformMatrix).toArray();\n                                b.scl = new THREE.Vector3().setFromMatrixScale(FrameTransformMatrix).toArray();\n                                if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                                    for (var i = 0; i < _bones.length; i++) {\n                                        if (this.HieStack[frame].parentName === _bones[i].name) {\n                                            _bones[i].add(b);\n                                            b.parent = i;\n                                            break;\n                                        }\n                                    }\n                                }\n                                _bones.push(b);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputGeometry',\n                    value: function _makeOutputGeometry() {\n                        var mesh = null;\n                        if (this._currentGeo.BoneInfs.length > 0) {\n                            var putBones = [];\n                            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n                            for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n                                var boneIndex = 0;\n                                for (var bb = 0; bb < putBones.length; bb++) {\n                                    if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                                        boneIndex = bb;\n                                        putBones[bb].OffsetMatrix = new THREE.Matrix4();\n                                        putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                                        break;\n                                    }\n                                }\n                                for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                                    var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n                                    var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n                                    var stride = nowVertexID * 4;\n                                    switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                                    case 0:\n                                        this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                                        break;\n                                    case 1:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                                        break;\n                                    case 2:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                                        break;\n                                    case 3:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                                        break;\n                                    }\n                                    this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n                                    if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                                        console.log('warn! over 4 bone weight! :' + nowVertexID);\n                                    }\n                                }\n                            }\n                            for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n                                this._currentGeo.Materials[sk].skinning = true;\n                            }\n                            var offsetList = [];\n                            for (var _bi = 0; _bi < putBones.length; _bi++) {\n                                if (putBones[_bi].OffsetMatrix) {\n                                    offsetList.push(putBones[_bi].OffsetMatrix);\n                                } else {\n                                    offsetList.push(new THREE.Matrix4());\n                                }\n                            }\n                            var bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                            this._initSkeleton(mesh, putBones, offsetList);\n                        } else {\n                            var _bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                        }\n                        mesh.name = this._currentGeo.name;\n                        var worldBaseMx = new THREE.Matrix4();\n                        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n                        if (currentMxFrame && currentMxFrame.parent) {\n                            while (true) {\n                                currentMxFrame = currentMxFrame.parent;\n                                if (currentMxFrame) {\n                                    worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n                                } else {\n                                    break;\n                                }\n                            }\n                            mesh.applyMatrix4(worldBaseMx);\n                        }\n                        this.Meshes.push(mesh);\n                    }\n                },\n                {\n                    key: '_initSkeleton',\n                    value: function _initSkeleton(mesh, boneList, boneInverses) {\n                        var bones = [], bone, gbone;\n                        var i, il;\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            bone = new THREE.Bone();\n                            bones.push(bone);\n                            bone.name = gbone.name;\n                            bone.position.fromArray(gbone.pos);\n                            bone.quaternion.fromArray(gbone.rotq);\n                            if (gbone.scl !== undefined)\n                                bone.scale.fromArray(gbone.scl);\n                        }\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n                                bones[gbone.parent].add(bones[i]);\n                            } else {\n                                mesh.add(bones[i]);\n                            }\n                        }\n                        mesh.updateMatrixWorld(true);\n                        var skeleton = new THREE.Skeleton(bones, boneInverses);\n                        mesh.bind(skeleton, mesh.matrixWorld);\n                    }\n                },\n                {\n                    key: '_readAnimationKey',\n                    value: function _readAnimationKey() {\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        var nowKeyType = parseInt(this._readLine(line));\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        line = this._currentObject.data.substr(endRead);\n                        var data = this._readLine(line.trim()).split(';;,');\n                        for (var i = 0; i < data.length; i++) {\n                            var data2 = data[i].split(';');\n                            var keyInfo = new XKeyFrameInfo();\n                            keyInfo.type = nowKeyType;\n                            keyInfo.Frame = parseInt(data2[0]);\n                            keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n                            keyInfo.time = keyInfo.Frame;\n                            if (nowKeyType != 4) {\n                                var frameFound = false;\n                                for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                                    if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                                        keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                                        frameFound = true;\n                                        break;\n                                    }\n                                }\n                                var frameValue = data2[2].split(',');\n                                switch (nowKeyType) {\n                                case 0:\n                                    keyInfo.rot = new THREE.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                                    break;\n                                case 1:\n                                    keyInfo.scl = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                case 2:\n                                    keyInfo.pos = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                }\n                                if (!frameFound) {\n                                    this._currentAnimeFrames.keyFrames.push(keyInfo);\n                                }\n                            } else {\n                                keyInfo.matrix = new THREE.Matrix4();\n                                this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n                                this._currentAnimeFrames.keyFrames.push(keyInfo);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputAnimation',\n                    value: function _makeOutputAnimation() {\n                        var animationObj = new XAnimationObj(this.options);\n                        animationObj.fps = this.animTicksPerSecond;\n                        animationObj.name = this._currentAnime.name;\n                        animationObj.make(this._currentAnime.AnimeFrames);\n                        this.animations.push(animationObj);\n                    }\n                },\n                {\n                    key: 'assignAnimation',\n                    value: function assignAnimation(_model, _animation) {\n                        var model = _model;\n                        var animation = _animation;\n                        if (!model) {\n                            model = this.Meshes[0];\n                        }\n                        if (!animation) {\n                            animation = this.animations[0];\n                        }\n                        if (!model || !animation) {\n                            return null;\n                        }\n                        var put = {};\n                        put.fps = animation.fps;\n                        put.name = animation.name;\n                        put.length = animation.length;\n                        put.hierarchy = [];\n                        for (var b = 0; b < model.skeleton.bones.length; b++) {\n                            var findAnimation = false;\n                            for (var i = 0; i < animation.hierarchy.length; i++) {\n                                if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n                                    findAnimation = true;\n                                    var c_key = animation.hierarchy[i].copy();\n                                    c_key.parent = -1;\n                                    if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                                        for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                                            if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                                                c_key.parent = bb;\n                                                c_key.parentName = model.skeleton.bones[b].parent.name;\n                                            }\n                                        }\n                                    }\n                                    put.hierarchy.push(c_key);\n                                    break;\n                                }\n                            }\n                            if (!findAnimation) {\n                                var _c_key = animation.hierarchy[0].copy();\n                                _c_key.name = model.skeleton.bones[b].name;\n                                _c_key.parent = -1;\n                                for (var k = 0; k < _c_key.keys.length; k++) {\n                                    if (_c_key.keys[k].pos) {\n                                        _c_key.keys[k].pos.set(0, 0, 0);\n                                    }\n                                    if (_c_key.keys[k].scl) {\n                                        _c_key.keys[k].scl.set(1, 1, 1);\n                                    }\n                                    if (_c_key.keys[k].rot) {\n                                        _c_key.keys[k].rot.set(0, 0, 0, 1);\n                                    }\n                                }\n                                put.hierarchy.push(_c_key);\n                            }\n                        }\n                        if (!model.geometry.animations) {\n                            model.geometry.animations = [];\n                        }\n                        model.geometry.animations.push(THREE.AnimationClip.parseAnimation(put, model.skeleton.bones));\n                        if (!model.animationMixer) {\n                            model.animationMixer = new THREE.AnimationMixer(model);\n                        }\n                        return put;\n                    }\n                },\n                {\n                    key: '_ParseMatrixData',\n                    value: function _ParseMatrixData(targetMatrix, data) {\n                        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n                    }\n                }\n            ]);\n            return XLoader;\n        }();\n        return XLoader;\n    }();\n\n    return XLoader;\n});\ndefine('skylark-threejs-ex/loaders/DDSLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DDSLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    DDSLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: DDSLoader,\n        parse: function (buffer, loadMipmaps) {\n            var dds = {\n                mipmaps: [],\n                width: 0,\n                height: 0,\n                format: null,\n                mipmapCount: 1\n            };\n            var DDS_MAGIC = 542327876;\n            var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;\n            var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;\n            var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;\n            var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;\n            function fourCCToInt32(value) {\n                return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n            }\n            function int32ToFourCC(value) {\n                return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n            }\n            function loadARGBMip(buffer, dataOffset, width, height) {\n                var dataLength = width * height * 4;\n                var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n                var byteArray = new Uint8Array(dataLength);\n                var dst = 0;\n                var src = 0;\n                for (var y = 0; y < height; y++) {\n                    for (var x = 0; x < width; x++) {\n                        var b = srcBuffer[src];\n                        src++;\n                        var g = srcBuffer[src];\n                        src++;\n                        var r = srcBuffer[src];\n                        src++;\n                        var a = srcBuffer[src];\n                        src++;\n                        byteArray[dst] = r;\n                        dst++;\n                        byteArray[dst] = g;\n                        dst++;\n                        byteArray[dst] = b;\n                        dst++;\n                        byteArray[dst] = a;\n                        dst++;\n                    }\n                }\n                return byteArray;\n            }\n            var FOURCC_DXT1 = fourCCToInt32('DXT1');\n            var FOURCC_DXT3 = fourCCToInt32('DXT3');\n            var FOURCC_DXT5 = fourCCToInt32('DXT5');\n            var FOURCC_ETC1 = fourCCToInt32('ETC1');\n            var headerLengthInt = 31;\n            var off_magic = 0;\n            var off_size = 1;\n            var off_flags = 2;\n            var off_height = 3;\n            var off_width = 4;\n            var off_mipmapCount = 7;\n            var off_pfFlags = 20;\n            var off_pfFourCC = 21;\n            var off_RGBBitCount = 22;\n            var off_RBitMask = 23;\n            var off_GBitMask = 24;\n            var off_BBitMask = 25;\n            var off_ABitMask = 26;\n            var off_caps = 27;\n            var off_caps2 = 28;\n            var off_caps3 = 29;\n            var off_caps4 = 30;\n            var header = new Int32Array(buffer, 0, headerLengthInt);\n            if (header[off_magic] !== DDS_MAGIC) {\n                console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n                return dds;\n            }\n            if (!header[off_pfFlags] & DDPF_FOURCC) {\n                console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n                return dds;\n            }\n            var blockBytes;\n            var fourCC = header[off_pfFourCC];\n            var isRGBAUncompressed = false;\n            switch (fourCC) {\n            case FOURCC_DXT1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_S3TC_DXT1_Format;\n                break;\n            case FOURCC_DXT3:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT3_Format;\n                break;\n            case FOURCC_DXT5:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT5_Format;\n                break;\n            case FOURCC_ETC1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_ETC1_Format;\n                break;\n            default:\n                if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n                    isRGBAUncompressed = true;\n                    blockBytes = 64;\n                    dds.format = THREE.RGBAFormat;\n                } else {\n                    console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n                    return dds;\n                }\n            }\n            dds.mipmapCount = 1;\n            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n            }\n            var caps2 = header[off_caps2];\n            dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n            if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n                console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n                return dds;\n            }\n            dds.width = header[off_width];\n            dds.height = header[off_height];\n            var dataOffset = header[off_size] + 4;\n            var faces = dds.isCubemap ? 6 : 1;\n            for (var face = 0; face < faces; face++) {\n                var width = dds.width;\n                var height = dds.height;\n                for (var i = 0; i < dds.mipmapCount; i++) {\n                    if (isRGBAUncompressed) {\n                        var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n                        var dataLength = byteArray.length;\n                    } else {\n                        var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n                        var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n                    }\n                    var mipmap = {\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    };\n                    dds.mipmaps.push(mipmap);\n                    dataOffset += dataLength;\n                    width = Math.max(width >> 1, 1);\n                    height = Math.max(height >> 1, 1);\n                }\n            }\n            return dds;\n        }\n    });\n    return DDSLoader;\n});\ndefine('skylark-threejs-ex/loaders/PVRLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PVRLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    PVRLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: PVRLoader,\n        parse: function (buffer, loadMipmaps) {\n            var headerLengthInt = 13;\n            var header = new Uint32Array(buffer, 0, headerLengthInt);\n            var pvrDatas = {\n                buffer: buffer,\n                header: header,\n                loadMipmaps: loadMipmaps\n            };\n            if (header[0] === 55727696) {\n                return PVRLoader._parseV3(pvrDatas);\n            } else if (header[11] === 559044176) {\n                return PVRLoader._parseV2(pvrDatas);\n            } else {\n                console.error('THREE.PVRLoader: Unknown PVR format.');\n            }\n        }\n    });\n    PVRLoader._parseV3 = function (pvrDatas) {\n        var header = pvrDatas.header;\n        var bpp, format;\n        var metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];\n        switch (pixelFormat) {\n        case 0:\n            bpp = 2;\n            format = THREE.RGB_PVRTC_2BPPV1_Format;\n            break;\n        case 1:\n            bpp = 2;\n            format = THREE.RGBA_PVRTC_2BPPV1_Format;\n            break;\n        case 2:\n            bpp = 4;\n            format = THREE.RGB_PVRTC_4BPPV1_Format;\n            break;\n        case 3:\n            bpp = 4;\n            format = THREE.RGBA_PVRTC_4BPPV1_Format;\n            break;\n        default:\n            console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n        }\n        pvrDatas.dataPtr = 52 + metaLen;\n        pvrDatas.bpp = bpp;\n        pvrDatas.format = format;\n        pvrDatas.width = width;\n        pvrDatas.height = height;\n        pvrDatas.numSurfaces = numFaces;\n        pvrDatas.numMipmaps = numMipmaps;\n        pvrDatas.isCubemap = numFaces === 6;\n        return PVRLoader._extract(pvrDatas);\n    };\n    PVRLoader._parseV2 = function (pvrDatas) {\n        var header = pvrDatas.header;\n        var headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];\n        var TYPE_MASK = 255;\n        var PVRTC_2 = 24, PVRTC_4 = 25;\n        var formatFlags = flags & TYPE_MASK;\n        var bpp, format;\n        var _hasAlpha = bitmaskAlpha > 0;\n        if (formatFlags === PVRTC_4) {\n            format = _hasAlpha ? THREE.RGBA_PVRTC_4BPPV1_Format : THREE.RGB_PVRTC_4BPPV1_Format;\n            bpp = 4;\n        } else if (formatFlags === PVRTC_2) {\n            format = _hasAlpha ? THREE.RGBA_PVRTC_2BPPV1_Format : THREE.RGB_PVRTC_2BPPV1_Format;\n            bpp = 2;\n        } else {\n            console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n        }\n        pvrDatas.dataPtr = headerLength;\n        pvrDatas.bpp = bpp;\n        pvrDatas.format = format;\n        pvrDatas.width = width;\n        pvrDatas.height = height;\n        pvrDatas.numSurfaces = numSurfs;\n        pvrDatas.numMipmaps = numMipmaps + 1;\n        pvrDatas.isCubemap = numSurfs === 6;\n        return PVRLoader._extract(pvrDatas);\n    };\n    PVRLoader._extract = function (pvrDatas) {\n        var pvr = {\n            mipmaps: [],\n            width: pvrDatas.width,\n            height: pvrDatas.height,\n            format: pvrDatas.format,\n            mipmapCount: pvrDatas.numMipmaps,\n            isCubemap: pvrDatas.isCubemap\n        };\n        var buffer = pvrDatas.buffer;\n        var dataOffset = pvrDatas.dataPtr, bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;\n        if (bpp === 2) {\n            blockWidth = 8;\n            blockHeight = 4;\n        } else {\n            blockWidth = 4;\n            blockHeight = 4;\n        }\n        blockSize = blockWidth * blockHeight * bpp / 8;\n        pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n        var mipLevel = 0;\n        while (mipLevel < pvrDatas.numMipmaps) {\n            var sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;\n            widthBlocks = sWidth / blockWidth;\n            heightBlocks = sHeight / blockHeight;\n            if (widthBlocks < 2)\n                widthBlocks = 2;\n            if (heightBlocks < 2)\n                heightBlocks = 2;\n            dataSize = widthBlocks * heightBlocks * blockSize;\n            for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n                var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n                var mipmap = {\n                    data: byteArray,\n                    width: sWidth,\n                    height: sHeight\n                };\n                pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n                dataOffset += dataSize;\n            }\n            mipLevel++;\n        }\n        return pvr;\n    };\n    return PVRLoader;\n});\ndefine('skylark-threejs-ex/loaders/KTXLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var KTXLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    KTXLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: KTXLoader,\n        parse: function (buffer, loadMipmaps) {\n            var ktx = new KhronosTextureContainer(buffer, 1);\n            return {\n                mipmaps: ktx.mipmaps(loadMipmaps),\n                width: ktx.pixelWidth,\n                height: ktx.pixelHeight,\n                format: ktx.glInternalFormat,\n                isCubemap: ktx.numberOfFaces === 6,\n                mipmapCount: ktx.numberOfMipmapLevels\n            };\n        }\n    });\n    var KhronosTextureContainer = function () {\n        function KhronosTextureContainer(arrayBuffer, facesExpected) {\n            this.arrayBuffer = arrayBuffer;\n            var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n            if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n                console.error('texture missing KTX identifier');\n                return;\n            }\n            var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n            var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n            var endianness = headerDataView.getUint32(0, true);\n            var littleEndian = endianness === 67305985;\n            this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n            this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n            this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n            this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n            this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n            this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n            this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n            this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n            this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n            this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n            this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n            this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n            if (this.glType !== 0) {\n                console.warn('only compressed formats currently supported');\n                return;\n            } else {\n                this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n            }\n            if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n                console.warn('only 2D textures currently supported');\n                return;\n            }\n            if (this.numberOfArrayElements !== 0) {\n                console.warn('texture arrays not currently supported');\n                return;\n            }\n            if (this.numberOfFaces !== facesExpected) {\n                console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n                return;\n            }\n            this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n        }\n        KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n            var mipmaps = [];\n            var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n            var width = this.pixelWidth;\n            var height = this.pixelHeight;\n            var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n            for (var level = 0; level < mipmapCount; level++) {\n                var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n                dataOffset += 4;\n                for (var face = 0; face < this.numberOfFaces; face++) {\n                    var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n                    mipmaps.push({\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    });\n                    dataOffset += imageSize;\n                    dataOffset += 3 - (imageSize + 3) % 4;\n                }\n                width = Math.max(1, width * 0.5);\n                height = Math.max(1, height * 0.5);\n            }\n            return mipmaps;\n        };\n        KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4;\n        KhronosTextureContainer.COMPRESSED_2D = 0;\n        KhronosTextureContainer.COMPRESSED_3D = 1;\n        KhronosTextureContainer.TEX_2D = 2;\n        KhronosTextureContainer.TEX_3D = 3;\n        return KhronosTextureContainer;\n    }();\n    return KTXLoader;\n});\ndefine('skylark-threejs-ex/modifiers/SimplifyModifier',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SimplifyModifier = function () {\n    };\n    (function () {\n        var cb = new THREE.Vector3(), ab = new THREE.Vector3();\n        function pushIfUnique(array, object) {\n            if (array.indexOf(object) === -1)\n                array.push(object);\n        }\n        function removeFromArray(array, object) {\n            var k = array.indexOf(object);\n            if (k > -1)\n                array.splice(k, 1);\n        }\n        function computeEdgeCollapseCost(u, v) {\n            var edgelength = v.position.distanceTo(u.position);\n            var curvature = 0;\n            var sideFaces = [];\n            var i, il = u.faces.length, face, sideFace;\n            for (i = 0; i < il; i++) {\n                face = u.faces[i];\n                if (face.hasVertex(v)) {\n                    sideFaces.push(face);\n                }\n            }\n            for (i = 0; i < il; i++) {\n                var minCurvature = 1;\n                face = u.faces[i];\n                for (var j = 0; j < sideFaces.length; j++) {\n                    sideFace = sideFaces[j];\n                    var dotProd = face.normal.dot(sideFace.normal);\n                    minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n                }\n                curvature = Math.max(curvature, minCurvature);\n            }\n            var borders = 0;\n            if (sideFaces.length < 2) {\n                curvature = 1;\n            }\n            var amt = edgelength * curvature + borders;\n            return amt;\n        }\n        function computeEdgeCostAtVertex(v) {\n            if (v.neighbors.length === 0) {\n                v.collapseNeighbor = null;\n                v.collapseCost = -0.01;\n                return;\n            }\n            v.collapseCost = 100000;\n            v.collapseNeighbor = null;\n            for (var i = 0; i < v.neighbors.length; i++) {\n                var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n                if (!v.collapseNeighbor) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.collapseCost = collapseCost;\n                    v.minCost = collapseCost;\n                    v.totalCost = 0;\n                    v.costCount = 0;\n                }\n                v.costCount++;\n                v.totalCost += collapseCost;\n                if (collapseCost < v.minCost) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.minCost = collapseCost;\n                }\n            }\n            v.collapseCost = v.totalCost / v.costCount;\n        }\n        function removeVertex(v, vertices) {\n            console.assert(v.faces.length === 0);\n            while (v.neighbors.length) {\n                var n = v.neighbors.pop();\n                removeFromArray(n.neighbors, v);\n            }\n            removeFromArray(vertices, v);\n        }\n        function removeFace(f, faces) {\n            removeFromArray(faces, f);\n            if (f.v1)\n                removeFromArray(f.v1.faces, f);\n            if (f.v2)\n                removeFromArray(f.v2.faces, f);\n            if (f.v3)\n                removeFromArray(f.v3.faces, f);\n            var vs = [\n                f.v1,\n                f.v2,\n                f.v3\n            ];\n            var v1, v2;\n            for (var i = 0; i < 3; i++) {\n                v1 = vs[i];\n                v2 = vs[(i + 1) % 3];\n                if (!v1 || !v2)\n                    continue;\n                v1.removeIfNonNeighbor(v2);\n                v2.removeIfNonNeighbor(v1);\n            }\n        }\n        function collapse(vertices, faces, u, v) {\n            if (!v) {\n                removeVertex(u, vertices);\n                return;\n            }\n            var i;\n            var tmpVertices = [];\n            for (i = 0; i < u.neighbors.length; i++) {\n                tmpVertices.push(u.neighbors[i]);\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                if (u.faces[i].hasVertex(v)) {\n                    removeFace(u.faces[i], faces);\n                }\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                u.faces[i].replaceVertex(u, v);\n            }\n            removeVertex(u, vertices);\n            for (i = 0; i < tmpVertices.length; i++) {\n                computeEdgeCostAtVertex(tmpVertices[i]);\n            }\n        }\n        function minimumCostEdge(vertices) {\n            var least = vertices[0];\n            for (var i = 0; i < vertices.length; i++) {\n                if (vertices[i].collapseCost < least.collapseCost) {\n                    least = vertices[i];\n                }\n            }\n            return least;\n        }\n        function Triangle(v1, v2, v3, a, b, c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n            this.v1 = v1;\n            this.v2 = v2;\n            this.v3 = v3;\n            this.normal = new THREE.Vector3();\n            this.computeNormal();\n            v1.faces.push(this);\n            v1.addUniqueNeighbor(v2);\n            v1.addUniqueNeighbor(v3);\n            v2.faces.push(this);\n            v2.addUniqueNeighbor(v1);\n            v2.addUniqueNeighbor(v3);\n            v3.faces.push(this);\n            v3.addUniqueNeighbor(v1);\n            v3.addUniqueNeighbor(v2);\n        }\n        Triangle.prototype.computeNormal = function () {\n            var vA = this.v1.position;\n            var vB = this.v2.position;\n            var vC = this.v3.position;\n            cb.subVectors(vC, vB);\n            ab.subVectors(vA, vB);\n            cb.cross(ab).normalize();\n            this.normal.copy(cb);\n        };\n        Triangle.prototype.hasVertex = function (v) {\n            return v === this.v1 || v === this.v2 || v === this.v3;\n        };\n        Triangle.prototype.replaceVertex = function (oldv, newv) {\n            if (oldv === this.v1)\n                this.v1 = newv;\n            else if (oldv === this.v2)\n                this.v2 = newv;\n            else if (oldv === this.v3)\n                this.v3 = newv;\n            removeFromArray(oldv.faces, this);\n            newv.faces.push(this);\n            oldv.removeIfNonNeighbor(this.v1);\n            this.v1.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v2);\n            this.v2.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v3);\n            this.v3.removeIfNonNeighbor(oldv);\n            this.v1.addUniqueNeighbor(this.v2);\n            this.v1.addUniqueNeighbor(this.v3);\n            this.v2.addUniqueNeighbor(this.v1);\n            this.v2.addUniqueNeighbor(this.v3);\n            this.v3.addUniqueNeighbor(this.v1);\n            this.v3.addUniqueNeighbor(this.v2);\n            this.computeNormal();\n        };\n        function Vertex(v, id) {\n            this.position = v;\n            this.id = id;\n            this.faces = [];\n            this.neighbors = [];\n            this.collapseCost = 0;\n            this.collapseNeighbor = null;\n        }\n        Vertex.prototype.addUniqueNeighbor = function (vertex) {\n            pushIfUnique(this.neighbors, vertex);\n        };\n        Vertex.prototype.removeIfNonNeighbor = function (n) {\n            var neighbors = this.neighbors;\n            var faces = this.faces;\n            var offset = neighbors.indexOf(n);\n            if (offset === -1)\n                return;\n            for (var i = 0; i < faces.length; i++) {\n                if (faces[i].hasVertex(n))\n                    return;\n            }\n            neighbors.splice(offset, 1);\n        };\n        SimplifyModifier.prototype.modify = function (geometry, count) {\n            if (geometry.isBufferGeometry) {\n                geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n            }\n            geometry.mergeVertices();\n            var oldVertices = geometry.vertices;\n            var oldFaces = geometry.faces;\n            var vertices = [];\n            var faces = [];\n            var i, il;\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                var vertex = new Vertex(oldVertices[i], i);\n                vertices.push(vertex);\n            }\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                var face = oldFaces[i];\n                var a = face.a;\n                var b = face.b;\n                var c = face.c;\n                var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n                faces.push(triangle);\n            }\n            for (i = 0, il = vertices.length; i < il; i++) {\n                computeEdgeCostAtVertex(vertices[i]);\n            }\n            var nextVertex;\n            var z = count;\n            while (z--) {\n                nextVertex = minimumCostEdge(vertices);\n                if (!nextVertex) {\n                    console.log('THREE.SimplifyModifier: No next vertex');\n                    break;\n                }\n                collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n            }\n            var simplifiedGeometry = new THREE.BufferGeometry();\n            var position = [];\n            var index = [];\n            for (i = 0; i < vertices.length; i++) {\n                var vertex = vertices[i].position;\n                position.push(vertex.x, vertex.y, vertex.z);\n            }\n            for (i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                var a = vertices.indexOf(face.v1);\n                var b = vertices.indexOf(face.v2);\n                var c = vertices.indexOf(face.v3);\n                index.push(a, b, c);\n            }\n            simplifiedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            simplifiedGeometry.setIndex(index);\n            return simplifiedGeometry;\n        };\n    }());\n    return SimplifyModifier;\n});\ndefine('skylark-threejs-ex/modifiers/SubdivisionModifier',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SubdivisionModifier = function (subdivisions) {\n        this.subdivisions = subdivisions === undefined ? 1 : subdivisions;\n    };\n    SubdivisionModifier.prototype.modify = function (geometry) {\n        if (geometry.isBufferGeometry) {\n            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n        } else {\n            geometry = geometry.clone();\n        }\n        geometry.mergeVertices();\n        var repeats = this.subdivisions;\n        while (repeats-- > 0) {\n            this.smooth(geometry);\n        }\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n        return geometry;\n    };\n    (function () {\n        var ABC = [\n            'a',\n            'b',\n            'c'\n        ];\n        function getEdge(a, b, map) {\n            var vertexIndexA = Math.min(a, b);\n            var vertexIndexB = Math.max(a, b);\n            var key = vertexIndexA + '_' + vertexIndexB;\n            return map[key];\n        }\n        function processEdge(a, b, vertices, map, face, metaVertices) {\n            var vertexIndexA = Math.min(a, b);\n            var vertexIndexB = Math.max(a, b);\n            var key = vertexIndexA + '_' + vertexIndexB;\n            var edge;\n            if (key in map) {\n                edge = map[key];\n            } else {\n                var vertexA = vertices[vertexIndexA];\n                var vertexB = vertices[vertexIndexB];\n                edge = {\n                    a: vertexA,\n                    b: vertexB,\n                    newEdge: null,\n                    faces: []\n                };\n                map[key] = edge;\n            }\n            edge.faces.push(face);\n            metaVertices[a].edges.push(edge);\n            metaVertices[b].edges.push(edge);\n        }\n        function generateLookups(vertices, faces, metaVertices, edges) {\n            var i, il, face;\n            for (i = 0, il = vertices.length; i < il; i++) {\n                metaVertices[i] = { edges: [] };\n            }\n            for (i = 0, il = faces.length; i < il; i++) {\n                face = faces[i];\n                processEdge(face.a, face.b, vertices, edges, face, metaVertices);\n                processEdge(face.b, face.c, vertices, edges, face, metaVertices);\n                processEdge(face.c, face.a, vertices, edges, face, metaVertices);\n            }\n        }\n        function newFace(newFaces, a, b, c, materialIndex) {\n            newFaces.push(new THREE.Face3(a, b, c, undefined, undefined, materialIndex));\n        }\n        function midpoint(a, b) {\n            return Math.abs(b - a) / 2 + Math.min(a, b);\n        }\n        function newUv(newUvs, a, b, c) {\n            newUvs.push([\n                THREE.clone(),\n                b.clone(),\n                c.clone()\n            ]);\n        }\n        SubdivisionModifier.prototype.smooth = function (geometry) {\n            var tmp = new THREE.Vector3();\n            var oldVertices, oldFaces, oldUvs;\n            var newVertices, newFaces, newUVs = [];\n            var n, i, il, j, k;\n            var metaVertices, sourceEdges;\n            var sourceEdges, newEdgeVertices, newSourceVertices;\n            oldVertices = geometry.vertices;\n            oldFaces = geometry.faces;\n            oldUvs = geometry.faceVertexUvs;\n            var hasUvs = oldUvs[0] !== undefined && oldUvs[0].length > 0;\n            if (hasUvs) {\n                for (var j = 0; j < oldUvs.length; j++) {\n                    newUVs.push([]);\n                }\n            }\n            metaVertices = new Array(oldVertices.length);\n            sourceEdges = {};\n            generateLookups(oldVertices, oldFaces, metaVertices, sourceEdges);\n            newEdgeVertices = [];\n            var other, currentEdge, newEdge, face;\n            var edgeVertexWeight, adjacentVertexWeight, connectedFaces;\n            for (i in sourceEdges) {\n                currentEdge = sourceEdges[i];\n                newEdge = new THREE.Vector3();\n                edgeVertexWeight = 3 / 8;\n                adjacentVertexWeight = 1 / 8;\n                connectedFaces = currentEdge.faces.length;\n                if (connectedFaces != 2) {\n                    edgeVertexWeight = 0.5;\n                    adjacentVertexWeight = 0;\n                    if (connectedFaces != 1) {\n                    }\n                }\n                newEdge.addVectors(currentEdge.a, currentEdge.b).multiplyScalar(edgeVertexWeight);\n                tmp.set(0, 0, 0);\n                for (j = 0; j < connectedFaces; j++) {\n                    face = currentEdge.faces[j];\n                    for (k = 0; k < 3; k++) {\n                        other = oldVertices[face[ABC[k]]];\n                        if (other !== currentEdge.a && other !== currentEdge.b)\n                            break;\n                    }\n                    tmp.add(other);\n                }\n                tmp.multiplyScalar(adjacentVertexWeight);\n                newEdge.add(tmp);\n                currentEdge.newEdge = newEdgeVertices.length;\n                newEdgeVertices.push(newEdge);\n            }\n            var beta, sourceVertexWeight, connectingVertexWeight;\n            var connectingEdge, connectingEdges, oldVertex, newSourceVertex;\n            newSourceVertices = [];\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                oldVertex = oldVertices[i];\n                connectingEdges = metaVertices[i].edges;\n                n = connectingEdges.length;\n                if (n == 3) {\n                    beta = 3 / 16;\n                } else if (n > 3) {\n                    beta = 3 / (8 * n);\n                }\n                sourceVertexWeight = 1 - n * beta;\n                connectingVertexWeight = beta;\n                if (n <= 2) {\n                    if (n == 2) {\n                        sourceVertexWeight = 3 / 4;\n                        connectingVertexWeight = 1 / 8;\n                    } else if (n == 1) {\n                    } else if (n == 0) {\n                    }\n                }\n                newSourceVertex = oldVertex.clone().multiplyScalar(sourceVertexWeight);\n                tmp.set(0, 0, 0);\n                for (j = 0; j < n; j++) {\n                    connectingEdge = connectingEdges[j];\n                    other = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;\n                    tmp.add(other);\n                }\n                tmp.multiplyScalar(connectingVertexWeight);\n                newSourceVertex.add(tmp);\n                newSourceVertices.push(newSourceVertex);\n            }\n            newVertices = newSourceVertices.concat(newEdgeVertices);\n            var sl = newSourceVertices.length, edge1, edge2, edge3;\n            newFaces = [];\n            var uv, x0, x1, x2;\n            var x3 = new THREE.Vector2();\n            var x4 = new THREE.Vector2();\n            var x5 = new THREE.Vector2();\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                face = oldFaces[i];\n                edge1 = getEdge(face.a, face.b, sourceEdges).newEdge + sl;\n                edge2 = getEdge(face.b, face.c, sourceEdges).newEdge + sl;\n                edge3 = getEdge(face.c, face.a, sourceEdges).newEdge + sl;\n                newFace(newFaces, edge1, edge2, edge3, face.materialIndex);\n                newFace(newFaces, face.a, edge1, edge3, face.materialIndex);\n                newFace(newFaces, face.b, edge2, edge1, face.materialIndex);\n                newFace(newFaces, face.c, edge3, edge2, face.materialIndex);\n                if (hasUvs) {\n                    for (var j = 0; j < oldUvs.length; j++) {\n                        uv = oldUvs[j][i];\n                        x0 = uv[0];\n                        x1 = uv[1];\n                        x2 = uv[2];\n                        x3.set(midpoint(x0.x, x1.x), midpoint(x0.y, x1.y));\n                        x4.set(midpoint(x1.x, x2.x), midpoint(x1.y, x2.y));\n                        x5.set(midpoint(x0.x, x2.x), midpoint(x0.y, x2.y));\n                        newUv(newUVs[j], x3, x4, x5);\n                        newUv(newUVs[j], x0, x3, x5);\n                        newUv(newUVs[j], x1, x4, x3);\n                        newUv(newUVs[j], x2, x5, x4);\n                    }\n                }\n            }\n            geometry.vertices = newVertices;\n            geometry.faces = newFaces;\n            if (hasUvs)\n                geometry.faceVertexUvs = newUVs;\n        };\n    }());\n    return SubdivisionModifier;\n});\ndefine('skylark-threejs-ex/exporters/DRACOExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DRACOExporter = function () {\n    };\n    DRACOExporter.prototype = {\n        constructor: DRACOExporter,\n        parse: function (geometry, options) {\n            if (DracoEncoderModule === undefined) {\n                throw new Error('THREE.DRACOExporter: required the draco_decoder to work.');\n            }\n            if (options === undefined) {\n                options = {\n                    decodeSpeed: 5,\n                    encodeSpeed: 5,\n                    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n                    quantization: [\n                        16,\n                        8,\n                        8,\n                        8,\n                        8\n                    ],\n                    exportUvs: true,\n                    exportNormals: true,\n                    exportColor: false\n                };\n            }\n            var dracoEncoder = DracoEncoderModule();\n            var encoder = new dracoEncoder.Encoder();\n            var builder = new dracoEncoder.MeshBuilder();\n            var mesh = new dracoEncoder.Mesh();\n            if (geometry.isGeometry === true) {\n                var bufferGeometry = new THREE.BufferGeometry();\n                bufferGeometry.fromGeometry(geometry);\n                geometry = bufferGeometry;\n            }\n            if (geometry.isBufferGeometry !== true) {\n                throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or BufferGeometry instance.');\n            }\n            var vertices = geometry.getAttribute('position');\n            builder.AddFloatAttributeToMesh(mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n            var faces = geometry.getIndex();\n            if (faces !== null) {\n                builder.AddFacesToMesh(mesh, faces.count, faces.array);\n            } else {\n                var faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n                for (var i = 0; i < faces.length; i++) {\n                    faces[i] = i;\n                }\n                builder.AddFacesToMesh(mesh, vertices.count, faces);\n            }\n            if (options.exportNormals === true) {\n                var normals = geometry.getAttribute('normal');\n                if (normals !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n                }\n            }\n            if (options.exportUvs === true) {\n                var uvs = geometry.getAttribute('uv');\n                if (uvs !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n                }\n            }\n            if (options.exportColor === true) {\n                var colors = geometry.getAttribute('color');\n                if (colors !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n                }\n            }\n            var encodedData = new dracoEncoder.DracoInt8Array();\n            encoder.SetSpeedOptions(options.encodeSpeed || 5, options.decodeSpeed || 5);\n            if (options.encoderMethod !== undefined) {\n                encoder.SetEncodingMethod(options.encoderMethod);\n            }\n            if (options.quantization !== undefined) {\n                for (var i = 0; i < 5; i++) {\n                    if (options.quantization[i] !== undefined) {\n                        encoder.SetAttributeQuantization(i, options.quantization[i]);\n                    }\n                }\n            }\n            var length = encoder.EncodeMeshToDracoBuffer(mesh, encodedData);\n            dracoEncoder.destroy(mesh);\n            if (length === 0) {\n                throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n            }\n            var outputData = new Int8Array(new ArrayBuffer(length));\n            for (var i = 0; i < length; i++) {\n                outputData[i] = encodedData.GetValue(i);\n            }\n            dracoEncoder.destroy(encodedData);\n            dracoEncoder.destroy(encoder);\n            dracoEncoder.destroy(builder);\n            return outputData;\n        }\n    };\n    DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;\n    DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;\n    DRACOExporter.POINT_CLOUD = 0;\n    DRACOExporter.TRIANGULAR_MESH = 1;\n    DRACOExporter.INVALID = -1;\n    DRACOExporter.POSITION = 0;\n    DRACOExporter.NORMAL = 1;\n    DRACOExporter.COLOR = 2;\n    DRACOExporter.TEX_COORD = 3;\n    DRACOExporter.GENERIC = 4;\n\n    return DRACOExporter;\n});\ndefine('skylark-threejs-ex/exporters/OBJExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var OBJExporter = function () {\n    };\n    OBJExporter.prototype = {\n        constructor: OBJExporter,\n        parse: function (object) {\n            var output = '';\n            var indexVertex = 0;\n            var indexVertexUvs = 0;\n            var indexNormals = 0;\n            var vertex = new THREE.Vector3();\n            var normal = new THREE.Vector3();\n            var uv = new THREE.Vector2();\n            var i, j, k, l, m, face = [];\n            var parseMesh = function (mesh) {\n                var nbVertex = 0;\n                var nbNormals = 0;\n                var nbVertexUvs = 0;\n                var geometry = mesh.geometry;\n                var normalMatrixWorld = new THREE.Matrix3();\n                if (geometry instanceof THREE.Geometry) {\n                    geometry = new THREE.BufferGeometry().setFromObject(mesh);\n                }\n                if (geometry instanceof THREE.BufferGeometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var indices = geometry.getIndex();\n                    output += 'o ' + mesh.name + '\\n';\n                    if (mesh.material && mesh.material.name) {\n                        output += 'usemtl ' + mesh.material.name + '\\n';\n                    }\n                    if (vertices !== undefined) {\n                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n                            vertex.x = vertices.getX(i);\n                            vertex.y = vertices.getY(i);\n                            vertex.z = vertices.getZ(i);\n                            vertex.applyMatrix4(mesh.matrixWorld);\n                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n                        }\n                    }\n                    if (uvs !== undefined) {\n                        for (i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n                            uv.x = uvs.getX(i);\n                            uv.y = uvs.getY(i);\n                            output += 'vt ' + uv.x + ' ' + uv.y + '\\n';\n                        }\n                    }\n                    if (normals !== undefined) {\n                        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                        for (i = 0, l = normals.count; i < l; i++, nbNormals++) {\n                            normal.x = normals.getX(i);\n                            normal.y = normals.getY(i);\n                            normal.z = normals.getZ(i);\n                            normal.applyMatrix3(normalMatrixWorld).normalize();\n                            output += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n                        }\n                    }\n                    if (indices !== null) {\n                        for (i = 0, l = indices.count; i < l; i += 3) {\n                            for (m = 0; m < 3; m++) {\n                                j = indices.getX(i + m) + 1;\n                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');\n                            }\n                            output += 'f ' + face.join(' ') + '\\n';\n                        }\n                    } else {\n                        for (i = 0, l = vertices.count; i < l; i += 3) {\n                            for (m = 0; m < 3; m++) {\n                                j = i + m + 1;\n                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');\n                            }\n                            output += 'f ' + face.join(' ') + '\\n';\n                        }\n                    }\n                } else {\n                    console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry);\n                }\n                indexVertex += nbVertex;\n                indexVertexUvs += nbVertexUvs;\n                indexNormals += nbNormals;\n            };\n            var parseLine = function (line) {\n                var nbVertex = 0;\n                var geometry = line.geometry;\n                var type = line.type;\n                if (geometry instanceof THREE.Geometry) {\n                    geometry = new THREE.BufferGeometry().setFromObject(line);\n                }\n                if (geometry instanceof THREE.BufferGeometry) {\n                    var vertices = geometry.getAttribute('position');\n                    output += 'o ' + line.name + '\\n';\n                    if (vertices !== undefined) {\n                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n                            vertex.x = vertices.getX(i);\n                            vertex.y = vertices.getY(i);\n                            vertex.z = vertices.getZ(i);\n                            vertex.applyMatrix4(line.matrixWorld);\n                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n                        }\n                    }\n                    if (type === 'Line') {\n                        output += 'l ';\n                        for (j = 1, l = vertices.count; j <= l; j++) {\n                            output += indexVertex + j + ' ';\n                        }\n                        output += '\\n';\n                    }\n                    if (type === 'LineSegments') {\n                        for (j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n                            output += 'l ' + (indexVertex + j) + ' ' + (indexVertex + k) + '\\n';\n                        }\n                    }\n                } else {\n                    console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry);\n                }\n                indexVertex += nbVertex;\n            };\n            object.traverse(function (child) {\n                if (child instanceof THREE.Mesh) {\n                    parseMesh(child);\n                }\n                if (child instanceof THREE.Line) {\n                    parseLine(child);\n                }\n            });\n            return output;\n        }\n    };\n\n    return OBJExporter;\n});\ndefine('skylark-threejs-ex/exporters/STLExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var STLExporter = function () {\n    };\n    STLExporter.prototype = {\n        constructor: STLExporter,\n        parse: function () {\n            var vector = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            return function parse(scene, options) {\n                if (options === undefined)\n                    options = {};\n                var binary = options.binary !== undefined ? options.binary : false;\n                var objects = [];\n                var triangles = 0;\n                scene.traverse(function (object) {\n                    if (object.isMesh) {\n                        var geometry = object.geometry;\n                        if (geometry.isBufferGeometry) {\n                            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n                        }\n                        if (geometry.isGeometry) {\n                            triangles += geometry.faces.length;\n                            objects.push({\n                                geometry: geometry,\n                                matrixWorld: object.matrixWorld\n                            });\n                        }\n                    }\n                });\n                if (binary) {\n                    var offset = 80;\n                    var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n                    var arrayBuffer = new ArrayBuffer(bufferLength);\n                    var output = new DataView(arrayBuffer);\n                    output.setUint32(offset, triangles, true);\n                    offset += 4;\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output.setFloat32(offset, vector.x, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.y, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.z, true);\n                            offset += 4;\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output.setFloat32(offset, vector.x, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.y, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.z, true);\n                                offset += 4;\n                            }\n                            output.setUint16(offset, 0, true);\n                            offset += 2;\n                        }\n                    }\n                    return output;\n                } else {\n                    var output = '';\n                    output += 'solid exported\\n';\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output += '\\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            output += '\\t\\touter loop\\n';\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output += '\\t\\t\\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            }\n                            output += '\\t\\tendloop\\n';\n                            output += '\\tendfacet\\n';\n                        }\n                    }\n                    output += 'endsolid exported\\n';\n                    return output;\n                }\n            };\n        }()\n    };\n    return STLExporter;\n});\ndefine('skylark-threejs-ex/exporters/GLTFExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var WEBGL_CONSTANTS = {\n        POINTS: 0,\n        LINES: 1,\n        LINE_LOOP: 2,\n        LINE_STRIP: 3,\n        TRIANGLES: 4,\n        TRIANGLE_STRIP: 5,\n        TRIANGLE_FAN: 6,\n        UNSIGNED_BYTE: 5121,\n        UNSIGNED_SHORT: 5123,\n        FLOAT: 5126,\n        UNSIGNED_INT: 5125,\n        ARRAY_BUFFER: 34962,\n        ELEMENT_ARRAY_BUFFER: 34963,\n        NEAREST: 9728,\n        LINEAR: 9729,\n        NEAREST_MIPMAP_NEAREST: 9984,\n        LINEAR_MIPMAP_NEAREST: 9985,\n        NEAREST_MIPMAP_LINEAR: 9986,\n        LINEAR_MIPMAP_LINEAR: 9987,\n        CLAMP_TO_EDGE: 33071,\n        MIRRORED_REPEAT: 33648,\n        REPEAT: 10497\n    };\n    var THREE_TO_WEBGL = {};\n    THREE_TO_WEBGL[THREE.NearestFilter] = WEBGL_CONSTANTS.NEAREST;\n    THREE_TO_WEBGL[THREE.NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\n    THREE_TO_WEBGL[THREE.NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\n    THREE_TO_WEBGL[THREE.LinearFilter] = WEBGL_CONSTANTS.LINEAR;\n    THREE_TO_WEBGL[THREE.LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\n    THREE_TO_WEBGL[THREE.LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n    THREE_TO_WEBGL[THREE.ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\n    THREE_TO_WEBGL[THREE.RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\n    THREE_TO_WEBGL[THREE.MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n    var PATH_PROPERTIES = {\n        scale: 'scale',\n        position: 'translation',\n        quaternion: 'rotation',\n        morphTargetInfluences: 'weights'\n    };\n    var GLTFExporter = function () {\n    };\n    GLTFExporter.prototype = {\n        constructor: GLTFExporter,\n        parse: function (input, onDone, options) {\n            var DEFAULT_OPTIONS = {\n                binary: false,\n                trs: false,\n                onlyVisible: true,\n                truncateDrawRange: true,\n                embedImages: true,\n                maxTextureSize: Infinity,\n                animations: [],\n                forceIndices: false,\n                forcePowerOfTwoTextures: false,\n                includeCustomExtensions: false\n            };\n            options = Object.assign({}, DEFAULT_OPTIONS, options);\n            if (options.animations.length > 0) {\n                options.trs = true;\n            }\n            var outputJSON = {\n                asset: {\n                    version: '2.0',\n                    generator: 'GLTFExporter'\n                }\n            };\n            var byteOffset = 0;\n            var buffers = [];\n            var pending = [];\n            var nodeMap = new Map();\n            var skins = [];\n            var extensionsUsed = {};\n            var cachedData = {\n                meshes: new Map(),\n                attributes: new Map(),\n                attributesNormalized: new Map(),\n                materials: new Map(),\n                textures: new Map(),\n                images: new Map()\n            };\n            var cachedCanvas;\n            var uids = new Map();\n            var uid = 0;\n            function getUID(object) {\n                if (!uids.has(object))\n                    uids.set(object, uid++);\n                return uids.get(object);\n            }\n            function equalArray(array1, array2) {\n                return array1.length === array2.length && array1.every(function (element, index) {\n                    return element === array2[index];\n                });\n            }\n            function stringToArrayBuffer(text) {\n                if (window.TextEncoder !== undefined) {\n                    return new TextEncoder().encode(text).buffer;\n                }\n                var array = new Uint8Array(new ArrayBuffer(text.length));\n                for (var i = 0, il = text.length; i < il; i++) {\n                    var value = text.charCodeAt(i);\n                    array[i] = value > 255 ? 32 : value;\n                }\n                return array.buffer;\n            }\n            function getMinMax(attribute, start, count) {\n                var output = {\n                    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n                    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n                };\n                for (var i = start; i < start + count; i++) {\n                    for (var a = 0; a < attribute.itemSize; a++) {\n                        var value = attribute.array[i * attribute.itemSize + a];\n                        output.min[a] = Math.min(output.min[a], value);\n                        output.max[a] = Math.max(output.max[a], value);\n                    }\n                }\n                return output;\n            }\n            function isPowerOfTwo(image) {\n                return THREE.MathUtils.isPowerOfTwo(image.width) && THREE.MathUtils.isPowerOfTwo(image.height);\n            }\n            function isNormalizedNormalAttribute(normal) {\n                if (cachedData.attributesNormalized.has(normal)) {\n                    return false;\n                }\n                var v = new THREE.Vector3();\n                for (var i = 0, il = normal.count; i < il; i++) {\n                    if (Math.abs(v.fromArray(normal.array, i * 3).length() - 1) > 0.0005)\n                        return false;\n                }\n                return true;\n            }\n            function createNormalizedNormalAttribute(normal) {\n                if (cachedData.attributesNormalized.has(normal)) {\n                    return cachedData.attributesNormalized.get(normal);\n                }\n                var attribute = normal.clone();\n                var v = new THREE.Vector3();\n                for (var i = 0, il = attribute.count; i < il; i++) {\n                    v.fromArray(attribute.array, i * 3);\n                    if (v.x === 0 && v.y === 0 && v.z === 0) {\n                        v.setX(1);\n                    } else {\n                        v.normalize();\n                    }\n                    v.toArray(attribute.array, i * 3);\n                }\n                cachedData.attributesNormalized.set(normal, attribute);\n                return attribute;\n            }\n            function getPaddedBufferSize(bufferSize) {\n                return Math.ceil(bufferSize / 4) * 4;\n            }\n            function getPaddedArrayBuffer(arrayBuffer, paddingByte) {\n                paddingByte = paddingByte || 0;\n                var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n                if (paddedLength !== arrayBuffer.byteLength) {\n                    var array = new Uint8Array(paddedLength);\n                    array.set(new Uint8Array(arrayBuffer));\n                    if (paddingByte !== 0) {\n                        for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {\n                            array[i] = paddingByte;\n                        }\n                    }\n                    return array.buffer;\n                }\n                return arrayBuffer;\n            }\n            function serializeUserData(object, gltfProperty) {\n                if (Object.keys(object.userData).length === 0) {\n                    return;\n                }\n                try {\n                    var json = JSON.parse(JSON.stringify(object.userData));\n                    if (options.includeCustomExtensions && json.gltfExtensions) {\n                        if (gltfProperty.extensions === undefined) {\n                            gltfProperty.extensions = {};\n                        }\n                        for (var extensionName in json.gltfExtensions) {\n                            gltfProperty.extensions[extensionName] = json.gltfExtensions[extensionName];\n                            extensionsUsed[extensionName] = true;\n                        }\n                        delete json.gltfExtensions;\n                    }\n                    if (Object.keys(json).length > 0) {\n                        gltfProperty.extras = json;\n                    }\n                } catch (error) {\n                    console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n                }\n            }\n            function applyTextureTransform(mapDef, texture) {\n                var didTransform = false;\n                var transformDef = {};\n                if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n                    transformDef.offset = texture.offset.toArray();\n                    didTransform = true;\n                }\n                if (texture.rotation !== 0) {\n                    transformDef.rotation = texture.rotation;\n                    didTransform = true;\n                }\n                if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n                    transformDef.scale = texture.repeat.toArray();\n                    didTransform = true;\n                }\n                if (didTransform) {\n                    mapDef.extensions = mapDef.extensions || {};\n                    mapDef.extensions['KHR_texture_transform'] = transformDef;\n                    extensionsUsed['KHR_texture_transform'] = true;\n                }\n            }\n            function processBuffer(buffer) {\n                if (!outputJSON.buffers) {\n                    outputJSON.buffers = [{ byteLength: 0 }];\n                }\n                buffers.push(buffer);\n                return 0;\n            }\n            function processBufferView(attribute, componentType, start, count, target) {\n                if (!outputJSON.bufferViews) {\n                    outputJSON.bufferViews = [];\n                }\n                var componentSize;\n                if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n                    componentSize = 1;\n                } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n                    componentSize = 2;\n                } else {\n                    componentSize = 4;\n                }\n                var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n                var dataView = new DataView(new ArrayBuffer(byteLength));\n                var offset = 0;\n                for (var i = start; i < start + count; i++) {\n                    for (var a = 0; a < attribute.itemSize; a++) {\n                        var value = attribute.array[i * attribute.itemSize + a];\n                        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n                            dataView.setFloat32(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n                            dataView.setUint32(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n                            dataView.setUint16(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n                            dataView.setUint8(offset, value);\n                        }\n                        offset += componentSize;\n                    }\n                }\n                var gltfBufferView = {\n                    buffer: processBuffer(dataView.buffer),\n                    byteOffset: byteOffset,\n                    byteLength: byteLength\n                };\n                if (target !== undefined)\n                    gltfBufferView.target = target;\n                if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n                    gltfBufferView.byteStride = attribute.itemSize * componentSize;\n                }\n                byteOffset += byteLength;\n                outputJSON.bufferViews.push(gltfBufferView);\n                var output = {\n                    id: outputJSON.bufferViews.length - 1,\n                    byteLength: 0\n                };\n                return output;\n            }\n            function processBufferViewImage(blob) {\n                if (!outputJSON.bufferViews) {\n                    outputJSON.bufferViews = [];\n                }\n                return new Promise(function (resolve) {\n                    var reader = new window.FileReader();\n                    reader.readAsArrayBuffer(blob);\n                    reader.onloadend = function () {\n                        var buffer = getPaddedArrayBuffer(reader.result);\n                        var bufferView = {\n                            buffer: processBuffer(buffer),\n                            byteOffset: byteOffset,\n                            byteLength: buffer.byteLength\n                        };\n                        byteOffset += buffer.byteLength;\n                        outputJSON.bufferViews.push(bufferView);\n                        resolve(outputJSON.bufferViews.length - 1);\n                    };\n                });\n            }\n            function processAccessor(attribute, geometry, start, count) {\n                var types = {\n                    1: 'SCALAR',\n                    2: 'VEC2',\n                    3: 'VEC3',\n                    4: 'VEC4',\n                    16: 'MAT4'\n                };\n                var componentType;\n                if (attribute.array.constructor === Float32Array) {\n                    componentType = WEBGL_CONSTANTS.FLOAT;\n                } else if (attribute.array.constructor === Uint32Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n                } else if (attribute.array.constructor === Uint16Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n                } else if (attribute.array.constructor === Uint8Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n                } else {\n                    throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n                }\n                if (start === undefined)\n                    start = 0;\n                if (count === undefined)\n                    count = attribute.count;\n                if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n                    var end = start + count;\n                    var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n                    start = Math.max(start, geometry.drawRange.start);\n                    count = Math.min(end, end2) - start;\n                    if (count < 0)\n                        count = 0;\n                }\n                if (count === 0) {\n                    return null;\n                }\n                var minMax = getMinMax(attribute, start, count);\n                var bufferViewTarget;\n                if (geometry !== undefined) {\n                    bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n                }\n                var bufferView = processBufferView(attribute, componentType, start, count, bufferViewTarget);\n                var gltfAccessor = {\n                    bufferView: bufferView.id,\n                    byteOffset: bufferView.byteOffset,\n                    componentType: componentType,\n                    count: count,\n                    max: minMax.max,\n                    min: minMax.min,\n                    type: types[attribute.itemSize]\n                };\n                if (!outputJSON.accessors) {\n                    outputJSON.accessors = [];\n                }\n                outputJSON.accessors.push(gltfAccessor);\n                return outputJSON.accessors.length - 1;\n            }\n            function processImage(image, format, flipY) {\n                if (!cachedData.images.has(image)) {\n                    cachedData.images.set(image, {});\n                }\n                var cachedImages = cachedData.images.get(image);\n                var mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';\n                var key = mimeType + ':flipY/' + flipY.toString();\n                if (cachedImages[key] !== undefined) {\n                    return cachedImages[key];\n                }\n                if (!outputJSON.images) {\n                    outputJSON.images = [];\n                }\n                var gltfImage = { mimeType: mimeType };\n                if (options.embedImages) {\n                    var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');\n                    canvas.width = Math.min(image.width, options.maxTextureSize);\n                    canvas.height = Math.min(image.height, options.maxTextureSize);\n                    if (options.forcePowerOfTwoTextures && !isPowerOfTwo(canvas)) {\n                        console.warn('GLTFExporter: Resized non-power-of-two image.', image);\n                        canvas.width = THREE.MathUtils.floorPowerOfTwo(canvas.width);\n                        canvas.height = THREE.MathUtils.floorPowerOfTwo(canvas.height);\n                    }\n                    var ctx = canvas.getContext('2d');\n                    if (flipY === true) {\n                        ctx.translate(0, canvas.height);\n                        ctx.scale(1, -1);\n                    }\n                    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n                    if (options.binary === true) {\n                        pending.push(new Promise(function (resolve) {\n                            canvas.toBlob(function (blob) {\n                                processBufferViewImage(blob).then(function (bufferViewIndex) {\n                                    gltfImage.bufferView = bufferViewIndex;\n                                    resolve();\n                                });\n                            }, mimeType);\n                        }));\n                    } else {\n                        gltfImage.uri = canvas.toDataURL(mimeType);\n                    }\n                } else {\n                    gltfImage.uri = image.src;\n                }\n                outputJSON.images.push(gltfImage);\n                var index = outputJSON.images.length - 1;\n                cachedImages[key] = index;\n                return index;\n            }\n            function processSampler(map) {\n                if (!outputJSON.samplers) {\n                    outputJSON.samplers = [];\n                }\n                var gltfSampler = {\n                    magFilter: THREE_TO_WEBGL[map.magFilter],\n                    minFilter: THREE_TO_WEBGL[map.minFilter],\n                    wrapS: THREE_TO_WEBGL[map.wrapS],\n                    wrapT: THREE_TO_WEBGL[map.wrapT]\n                };\n                outputJSON.samplers.push(gltfSampler);\n                return outputJSON.samplers.length - 1;\n            }\n            function processTexture(map) {\n                if (cachedData.textures.has(map)) {\n                    return cachedData.textures.get(map);\n                }\n                if (!outputJSON.textures) {\n                    outputJSON.textures = [];\n                }\n                var gltfTexture = {\n                    sampler: processSampler(map),\n                    source: processImage(map.image, map.format, map.flipY)\n                };\n                if (map.name) {\n                    gltfTexture.name = map.name;\n                }\n                outputJSON.textures.push(gltfTexture);\n                var index = outputJSON.textures.length - 1;\n                cachedData.textures.set(map, index);\n                return index;\n            }\n            function processMaterial(material) {\n                if (cachedData.materials.has(material)) {\n                    return cachedData.materials.get(material);\n                }\n                if (material.isShaderMaterial) {\n                    console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n                    return null;\n                }\n                if (!outputJSON.materials) {\n                    outputJSON.materials = [];\n                }\n                var gltfMaterial = { pbrMetallicRoughness: {} };\n                if (material.isMeshBasicMaterial) {\n                    gltfMaterial.extensions = { KHR_materials_unlit: {} };\n                    extensionsUsed['KHR_materials_unlit'] = true;\n                } else if (material.isGLTFSpecularGlossinessMaterial) {\n                    gltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\n                    extensionsUsed['KHR_materials_pbrSpecularGlossiness'] = true;\n                } else if (!material.isMeshStandardMaterial) {\n                    console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n                }\n                var color = material.color.toArray().concat([material.opacity]);\n                if (!equalArray(color, [\n                        1,\n                        1,\n                        1,\n                        1\n                    ])) {\n                    gltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n                }\n                if (material.isMeshStandardMaterial) {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n                } else if (material.isMeshBasicMaterial) {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n                } else {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n                }\n                if (material.isGLTFSpecularGlossinessMaterial) {\n                    if (gltfMaterial.pbrMetallicRoughness.baseColorFactor) {\n                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n                    }\n                    var specularFactor = [\n                        1,\n                        1,\n                        1\n                    ];\n                    material.specular.toArray(specularFactor, 0);\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n                }\n                if (material.metalnessMap || material.roughnessMap) {\n                    if (material.metalnessMap === material.roughnessMap) {\n                        var metalRoughMapDef = { index: processTexture(material.metalnessMap) };\n                        applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n                        gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n                    } else {\n                        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n                    }\n                }\n                if (material.map) {\n                    var baseColorMapDef = { index: processTexture(material.map) };\n                    applyTextureTransform(baseColorMapDef, material.map);\n                    if (material.isGLTFSpecularGlossinessMaterial) {\n                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n                    }\n                    gltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n                }\n                if (material.isGLTFSpecularGlossinessMaterial && material.specularMap) {\n                    var specularMapDef = { index: processTexture(material.specularMap) };\n                    applyTextureTransform(specularMapDef, material.specularMap);\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n                }\n                if (material.emissive) {\n                    var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();\n                    if (!equalArray(emissive, [\n                            0,\n                            0,\n                            0\n                        ])) {\n                        gltfMaterial.emissiveFactor = emissive;\n                    }\n                    if (material.emissiveMap) {\n                        var emissiveMapDef = { index: processTexture(material.emissiveMap) };\n                        applyTextureTransform(emissiveMapDef, material.emissiveMap);\n                        gltfMaterial.emissiveTexture = emissiveMapDef;\n                    }\n                }\n                if (material.normalMap) {\n                    var normalMapDef = { index: processTexture(material.normalMap) };\n                    if (material.normalScale && material.normalScale.x !== -1) {\n                        if (material.normalScale.x !== material.normalScale.y) {\n                            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');\n                        }\n                        normalMapDef.scale = material.normalScale.x;\n                    }\n                    applyTextureTransform(normalMapDef, material.normalMap);\n                    gltfMaterial.normalTexture = normalMapDef;\n                }\n                if (material.aoMap) {\n                    var occlusionMapDef = {\n                        index: processTexture(material.aoMap),\n                        texCoord: 1\n                    };\n                    if (material.aoMapIntensity !== 1) {\n                        occlusionMapDef.strength = material.aoMapIntensity;\n                    }\n                    applyTextureTransform(occlusionMapDef, material.aoMap);\n                    gltfMaterial.occlusionTexture = occlusionMapDef;\n                }\n                if (material.transparent) {\n                    gltfMaterial.alphaMode = 'BLEND';\n                } else {\n                    if (material.alphaTest > 0) {\n                        gltfMaterial.alphaMode = 'MASK';\n                        gltfMaterial.alphaCutoff = material.alphaTest;\n                    }\n                }\n                if (material.side === THREE.DoubleSide) {\n                    gltfMaterial.doubleSided = true;\n                }\n                if (material.name !== '') {\n                    gltfMaterial.name = material.name;\n                }\n                serializeUserData(material, gltfMaterial);\n                outputJSON.materials.push(gltfMaterial);\n                var index = outputJSON.materials.length - 1;\n                cachedData.materials.set(material, index);\n                return index;\n            }\n            function processMesh(mesh) {\n                var meshCacheKeyParts = [mesh.geometry.uuid];\n                if (Array.isArray(mesh.material)) {\n                    for (var i = 0, l = mesh.material.length; i < l; i++) {\n                        meshCacheKeyParts.push(mesh.material[i].uuid);\n                    }\n                } else {\n                    meshCacheKeyParts.push(mesh.material.uuid);\n                }\n                var meshCacheKey = meshCacheKeyParts.join(':');\n                if (cachedData.meshes.has(meshCacheKey)) {\n                    return cachedData.meshes.get(meshCacheKey);\n                }\n                var geometry = mesh.geometry;\n                var mode;\n                if (mesh.isLineSegments) {\n                    mode = WEBGL_CONSTANTS.LINES;\n                } else if (mesh.isLineLoop) {\n                    mode = WEBGL_CONSTANTS.LINE_LOOP;\n                } else if (mesh.isLine) {\n                    mode = WEBGL_CONSTANTS.LINE_STRIP;\n                } else if (mesh.isPoints) {\n                    mode = WEBGL_CONSTANTS.POINTS;\n                } else {\n                    mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n                }\n                if (!geometry.isBufferGeometry) {\n                    console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.');\n                    geometry = new THREE.BufferGeometry().setFromObject(mesh);\n                }\n                var gltfMesh = {};\n                var attributes = {};\n                var primitives = [];\n                var targets = [];\n                var nameConversion = {\n                    uv: 'TEXCOORD_0',\n                    uv2: 'TEXCOORD_1',\n                    color: 'COLOR_0',\n                    skinWeight: 'WEIGHTS_0',\n                    skinIndex: 'JOINTS_0'\n                };\n                var originalNormal = geometry.getAttribute('normal');\n                if (originalNormal !== undefined && !isNormalizedNormalAttribute(originalNormal)) {\n                    console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n                    geometry.setAttribute('normal', createNormalizedNormalAttribute(originalNormal));\n                }\n                var modifiedAttribute = null;\n                for (var attributeName in geometry.attributes) {\n                    if (attributeName.substr(0, 5) === 'morph')\n                        continue;\n                    var attribute = geometry.attributes[attributeName];\n                    attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n                    var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n                    if (!validVertexAttributes.test(attributeName)) {\n                        attributeName = '_' + attributeName;\n                    }\n                    if (cachedData.attributes.has(getUID(attribute))) {\n                        attributes[attributeName] = cachedData.attributes.get(getUID(attribute));\n                        continue;\n                    }\n                    modifiedAttribute = null;\n                    var array = attribute.array;\n                    if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n                        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n                        modifiedAttribute = new THREE.BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n                    }\n                    var accessor = processAccessor(modifiedAttribute || attribute, geometry);\n                    if (accessor !== null) {\n                        attributes[attributeName] = accessor;\n                        cachedData.attributes.set(getUID(attribute), accessor);\n                    }\n                }\n                if (originalNormal !== undefined)\n                    geometry.setAttribute('normal', originalNormal);\n                if (Object.keys(attributes).length === 0) {\n                    return null;\n                }\n                if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n                    var weights = [];\n                    var targetNames = [];\n                    var reverseDictionary = {};\n                    if (mesh.morphTargetDictionary !== undefined) {\n                        for (var key in mesh.morphTargetDictionary) {\n                            reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n                        }\n                    }\n                    for (var i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n                        var target = {};\n                        var warned = false;\n                        for (var attributeName in geometry.morphAttributes) {\n                            if (attributeName !== 'position' && attributeName !== 'normal') {\n                                if (!warned) {\n                                    console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n                                    warned = true;\n                                }\n                                continue;\n                            }\n                            var attribute = geometry.morphAttributes[attributeName][i];\n                            var gltfAttributeName = attributeName.toUpperCase();\n                            var baseAttribute = geometry.attributes[attributeName];\n                            if (cachedData.attributes.has(getUID(attribute))) {\n                                target[gltfAttributeName] = cachedData.attributes.get(getUID(attribute));\n                                continue;\n                            }\n                            var relativeAttribute = attribute.clone();\n                            if (!geometry.morphTargetsRelative) {\n                                for (var j = 0, jl = attribute.count; j < jl; j++) {\n                                    relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n                                }\n                            }\n                            target[gltfAttributeName] = processAccessor(relativeAttribute, geometry);\n                            cachedData.attributes.set(getUID(baseAttribute), target[gltfAttributeName]);\n                        }\n                        targets.push(target);\n                        weights.push(mesh.morphTargetInfluences[i]);\n                        if (mesh.morphTargetDictionary !== undefined)\n                            targetNames.push(reverseDictionary[i]);\n                    }\n                    gltfMesh.weights = weights;\n                    if (targetNames.length > 0) {\n                        gltfMesh.extras = {};\n                        gltfMesh.extras.targetNames = targetNames;\n                    }\n                }\n                var forceIndices = options.forceIndices;\n                var isMultiMaterial = Array.isArray(mesh.material);\n                if (isMultiMaterial && geometry.groups.length === 0)\n                    return null;\n                if (!forceIndices && geometry.index === null && isMultiMaterial) {\n                    console.warn('THREE.GLTFExporter: Creating index for non-indexed multi-material mesh.');\n                    forceIndices = true;\n                }\n                var didForceIndices = false;\n                if (geometry.index === null && forceIndices) {\n                    var indices = [];\n                    for (var i = 0, il = geometry.attributes.position.count; i < il; i++) {\n                        indices[i] = i;\n                    }\n                    geometry.setIndex(indices);\n                    didForceIndices = true;\n                }\n                var materials = isMultiMaterial ? mesh.material : [mesh.material];\n                var groups = isMultiMaterial ? geometry.groups : [{\n                        materialIndex: 0,\n                        start: undefined,\n                        count: undefined\n                    }];\n                for (var i = 0, il = groups.length; i < il; i++) {\n                    var primitive = {\n                        mode: mode,\n                        attributes: attributes\n                    };\n                    serializeUserData(geometry, primitive);\n                    if (targets.length > 0)\n                        primitive.targets = targets;\n                    if (geometry.index !== null) {\n                        var cacheKey = getUID(geometry.index);\n                        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n                            cacheKey += ':' + groups[i].start + ':' + groups[i].count;\n                        }\n                        if (cachedData.attributes.has(cacheKey)) {\n                            primitive.indices = cachedData.attributes.get(cacheKey);\n                        } else {\n                            primitive.indices = processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n                            cachedData.attributes.set(cacheKey, primitive.indices);\n                        }\n                        if (primitive.indices === null)\n                            delete primitive.indices;\n                    }\n                    var material = processMaterial(materials[groups[i].materialIndex]);\n                    if (material !== null) {\n                        primitive.material = material;\n                    }\n                    primitives.push(primitive);\n                }\n                if (didForceIndices) {\n                    geometry.setIndex(null);\n                }\n                gltfMesh.primitives = primitives;\n                if (!outputJSON.meshes) {\n                    outputJSON.meshes = [];\n                }\n                outputJSON.meshes.push(gltfMesh);\n                var index = outputJSON.meshes.length - 1;\n                cachedData.meshes.set(meshCacheKey, index);\n                return index;\n            }\n            function processCamera(camera) {\n                if (!outputJSON.cameras) {\n                    outputJSON.cameras = [];\n                }\n                var isOrtho = camera.isOrthographicCamera;\n                var gltfCamera = { type: isOrtho ? 'orthographic' : 'perspective' };\n                if (isOrtho) {\n                    gltfCamera.orthographic = {\n                        xmag: camera.right * 2,\n                        ymag: camera.top * 2,\n                        zfar: camera.far <= 0 ? 0.001 : camera.far,\n                        znear: camera.near < 0 ? 0 : camera.near\n                    };\n                } else {\n                    gltfCamera.perspective = {\n                        aspectRatio: camera.aspect,\n                        yfov: THREE.MathUtils.degToRad(camera.fov),\n                        zfar: camera.far <= 0 ? 0.001 : camera.far,\n                        znear: camera.near < 0 ? 0 : camera.near\n                    };\n                }\n                if (camera.name !== '') {\n                    gltfCamera.name = camera.type;\n                }\n                outputJSON.cameras.push(gltfCamera);\n                return outputJSON.cameras.length - 1;\n            }\n            function processAnimation(clip, root) {\n                if (!outputJSON.animations) {\n                    outputJSON.animations = [];\n                }\n                clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n                var tracks = clip.tracks;\n                var channels = [];\n                var samplers = [];\n                for (var i = 0; i < tracks.length; ++i) {\n                    var track = tracks[i];\n                    var trackBinding = THREE.PropertyBinding.parseTrackName(track.name);\n                    var trackNode = THREE.PropertyBinding.findNode(root, trackBinding.nodeName);\n                    var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n                    if (trackBinding.objectName === 'bones') {\n                        if (trackNode.isSkinnedMesh === true) {\n                            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n                        } else {\n                            trackNode = undefined;\n                        }\n                    }\n                    if (!trackNode || !trackProperty) {\n                        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n                        return null;\n                    }\n                    var inputItemSize = 1;\n                    var outputItemSize = track.values.length / track.times.length;\n                    if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n                        outputItemSize /= trackNode.morphTargetInfluences.length;\n                    }\n                    var interpolation;\n                    if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n                        interpolation = 'CUBICSPLINE';\n                        outputItemSize /= 3;\n                    } else if (track.getInterpolation() === THREE.InterpolateDiscrete) {\n                        interpolation = 'STEP';\n                    } else {\n                        interpolation = 'LINEAR';\n                    }\n                    samplers.push({\n                        input: processAccessor(new THREE.BufferAttribute(track.times, inputItemSize)),\n                        output: processAccessor(new THREE.BufferAttribute(track.values, outputItemSize)),\n                        interpolation: interpolation\n                    });\n                    channels.push({\n                        sampler: samplers.length - 1,\n                        target: {\n                            node: nodeMap.get(trackNode),\n                            path: trackProperty\n                        }\n                    });\n                }\n                outputJSON.animations.push({\n                    name: clip.name || 'clip_' + outputJSON.animations.length,\n                    samplers: samplers,\n                    channels: channels\n                });\n                return outputJSON.animations.length - 1;\n            }\n            function processSkin(object) {\n                var node = outputJSON.nodes[nodeMap.get(object)];\n                var skeleton = object.skeleton;\n                if (skeleton === undefined)\n                    return null;\n                var rootJoint = object.skeleton.bones[0];\n                if (rootJoint === undefined)\n                    return null;\n                var joints = [];\n                var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n                for (var i = 0; i < skeleton.bones.length; ++i) {\n                    joints.push(nodeMap.get(skeleton.bones[i]));\n                    skeleton.boneInverses[i].toArray(inverseBindMatrices, i * 16);\n                }\n                if (outputJSON.skins === undefined) {\n                    outputJSON.skins = [];\n                }\n                outputJSON.skins.push({\n                    inverseBindMatrices: processAccessor(new THREE.BufferAttribute(inverseBindMatrices, 16)),\n                    joints: joints,\n                    skeleton: nodeMap.get(rootJoint)\n                });\n                var skinIndex = node.skin = outputJSON.skins.length - 1;\n                return skinIndex;\n            }\n            function processLight(light) {\n                var lightDef = {};\n                if (light.name)\n                    lightDef.name = light.name;\n                lightDef.color = light.color.toArray();\n                lightDef.intensity = light.intensity;\n                if (light.isDirectionalLight) {\n                    lightDef.type = 'directional';\n                } else if (light.isPointLight) {\n                    lightDef.type = 'point';\n                    if (light.distance > 0)\n                        lightDef.range = light.distance;\n                } else if (light.isSpotLight) {\n                    lightDef.type = 'spot';\n                    if (light.distance > 0)\n                        lightDef.range = light.distance;\n                    lightDef.spot = {};\n                    lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n                    lightDef.spot.outerConeAngle = light.angle;\n                }\n                if (light.decay !== undefined && light.decay !== 2) {\n                    console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n                }\n                if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n                    console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n                }\n                var lights = outputJSON.extensions['KHR_lights_punctual'].lights;\n                lights.push(lightDef);\n                return lights.length - 1;\n            }\n            function processNode(object) {\n                if (!outputJSON.nodes) {\n                    outputJSON.nodes = [];\n                }\n                var gltfNode = {};\n                if (options.trs) {\n                    var rotation = object.quaternion.toArray();\n                    var position = object.position.toArray();\n                    var scale = object.scale.toArray();\n                    if (!equalArray(rotation, [\n                            0,\n                            0,\n                            0,\n                            1\n                        ])) {\n                        gltfNode.rotation = rotation;\n                    }\n                    if (!equalArray(position, [\n                            0,\n                            0,\n                            0\n                        ])) {\n                        gltfNode.translation = position;\n                    }\n                    if (!equalArray(scale, [\n                            1,\n                            1,\n                            1\n                        ])) {\n                        gltfNode.scale = scale;\n                    }\n                } else {\n                    if (object.matrixAutoUpdate) {\n                        object.updateMatrix();\n                    }\n                    if (!equalArray(object.matrix.elements, [\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1\n                        ])) {\n                        gltfNode.matrix = object.matrix.elements;\n                    }\n                }\n                if (object.name !== '') {\n                    gltfNode.name = String(object.name);\n                }\n                serializeUserData(object, gltfNode);\n                if (object.isMesh || object.isLine || object.isPoints) {\n                    var mesh = processMesh(object);\n                    if (mesh !== null) {\n                        gltfNode.mesh = mesh;\n                    }\n                } else if (object.isCamera) {\n                    gltfNode.camera = processCamera(object);\n                } else if (object.isDirectionalLight || object.isPointLight || object.isSpotLight) {\n                    if (!extensionsUsed['KHR_lights_punctual']) {\n                        outputJSON.extensions = outputJSON.extensions || {};\n                        outputJSON.extensions['KHR_lights_punctual'] = { lights: [] };\n                        extensionsUsed['KHR_lights_punctual'] = true;\n                    }\n                    gltfNode.extensions = gltfNode.extensions || {};\n                    gltfNode.extensions['KHR_lights_punctual'] = { light: processLight(object) };\n                } else if (object.isLight) {\n                    console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object);\n                    return null;\n                }\n                if (object.isSkinnedMesh) {\n                    skins.push(object);\n                }\n                if (object.children.length > 0) {\n                    var children = [];\n                    for (var i = 0, l = object.children.length; i < l; i++) {\n                        var child = object.children[i];\n                        if (child.visible || options.onlyVisible === false) {\n                            var node = processNode(child);\n                            if (node !== null) {\n                                children.push(node);\n                            }\n                        }\n                    }\n                    if (children.length > 0) {\n                        gltfNode.children = children;\n                    }\n                }\n                outputJSON.nodes.push(gltfNode);\n                var nodeIndex = outputJSON.nodes.length - 1;\n                nodeMap.set(object, nodeIndex);\n                return nodeIndex;\n            }\n            function processScene(scene) {\n                if (!outputJSON.scenes) {\n                    outputJSON.scenes = [];\n                    outputJSON.scene = 0;\n                }\n                var gltfScene = {};\n                if (scene.name !== '') {\n                    gltfScene.name = scene.name;\n                }\n                outputJSON.scenes.push(gltfScene);\n                var nodes = [];\n                for (var i = 0, l = scene.children.length; i < l; i++) {\n                    var child = scene.children[i];\n                    if (child.visible || options.onlyVisible === false) {\n                        var node = processNode(child);\n                        if (node !== null) {\n                            nodes.push(node);\n                        }\n                    }\n                }\n                if (nodes.length > 0) {\n                    gltfScene.nodes = nodes;\n                }\n                serializeUserData(scene, gltfScene);\n            }\n            function processObjects(objects) {\n                var scene = new THREE.Scene();\n                scene.name = 'AuxScene';\n                for (var i = 0; i < objects.length; i++) {\n                    scene.children.push(objects[i]);\n                }\n                processScene(scene);\n            }\n            function processInput(input) {\n                input = input instanceof Array ? input : [input];\n                var objectsWithoutScene = [];\n                for (var i = 0; i < input.length; i++) {\n                    if (input[i] instanceof THREE.Scene) {\n                        processScene(input[i]);\n                    } else {\n                        objectsWithoutScene.push(input[i]);\n                    }\n                }\n                if (objectsWithoutScene.length > 0) {\n                    processObjects(objectsWithoutScene);\n                }\n                for (var i = 0; i < skins.length; ++i) {\n                    processSkin(skins[i]);\n                }\n                for (var i = 0; i < options.animations.length; ++i) {\n                    processAnimation(options.animations[i], input[0]);\n                }\n            }\n            processInput(input);\n            Promise.all(pending).then(function () {\n                var blob = new Blob(buffers, { type: 'application/octet-stream' });\n                var extensionsUsedList = Object.keys(extensionsUsed);\n                if (extensionsUsedList.length > 0)\n                    outputJSON.extensionsUsed = extensionsUsedList;\n                if (outputJSON.buffers && outputJSON.buffers.length > 0)\n                    outputJSON.buffers[0].byteLength = blob.size;\n                if (options.binary === true) {\n                    var GLB_HEADER_BYTES = 12;\n                    var GLB_HEADER_MAGIC = 1179937895;\n                    var GLB_VERSION = 2;\n                    var GLB_CHUNK_PREFIX_BYTES = 8;\n                    var GLB_CHUNK_TYPE_JSON = 1313821514;\n                    var GLB_CHUNK_TYPE_BIN = 5130562;\n                    var reader = new window.FileReader();\n                    reader.readAsArrayBuffer(blob);\n                    reader.onloadend = function () {\n                        var binaryChunk = getPaddedArrayBuffer(reader.result);\n                        var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n                        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n                        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n                        var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)), 32);\n                        var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n                        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n                        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n                        var header = new ArrayBuffer(GLB_HEADER_BYTES);\n                        var headerView = new DataView(header);\n                        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n                        headerView.setUint32(4, GLB_VERSION, true);\n                        var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n                        headerView.setUint32(8, totalByteLength, true);\n                        var glbBlob = new Blob([\n                            header,\n                            jsonChunkPrefix,\n                            jsonChunk,\n                            binaryChunkPrefix,\n                            binaryChunk\n                        ], { type: 'application/octet-stream' });\n                        var glbReader = new window.FileReader();\n                        glbReader.readAsArrayBuffer(glbBlob);\n                        glbReader.onloadend = function () {\n                            onDone(glbReader.result);\n                        };\n                    };\n                } else {\n                    if (outputJSON.buffers && outputJSON.buffers.length > 0) {\n                        var reader = new window.FileReader();\n                        reader.readAsDataURL(blob);\n                        reader.onloadend = function () {\n                            var base64data = reader.result;\n                            outputJSON.buffers[0].uri = base64data;\n                            onDone(outputJSON);\n                        };\n                    } else {\n                        onDone(outputJSON);\n                    }\n                }\n            });\n        }\n    };\n    GLTFExporter.Utils = {\n        insertKeyframe: function (track, time) {\n            var tolerance = 0.001;\n            var valueSize = track.getValueSize();\n            var times = new track.TimeBufferType(track.times.length + 1);\n            var values = new track.ValueBufferType(track.values.length + valueSize);\n            var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n            var index;\n            if (track.times.length === 0) {\n                times[0] = time;\n                for (var i = 0; i < valueSize; i++) {\n                    values[i] = 0;\n                }\n                index = 0;\n            } else if (time < track.times[0]) {\n                if (Math.abs(track.times[0] - time) < tolerance)\n                    return 0;\n                times[0] = time;\n                times.set(track.times, 1);\n                values.set(interpolant.evaluate(time), 0);\n                values.set(track.values, valueSize);\n                index = 0;\n            } else if (time > track.times[track.times.length - 1]) {\n                if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n                    return track.times.length - 1;\n                }\n                times[times.length - 1] = time;\n                times.set(track.times, 0);\n                values.set(track.values, 0);\n                values.set(interpolant.evaluate(time), track.values.length);\n                index = times.length - 1;\n            } else {\n                for (var i = 0; i < track.times.length; i++) {\n                    if (Math.abs(track.times[i] - time) < tolerance)\n                        return i;\n                    if (track.times[i] < time && track.times[i + 1] > time) {\n                        times.set(track.times.slice(0, i + 1), 0);\n                        times[i + 1] = time;\n                        times.set(track.times.slice(i + 1), i + 2);\n                        values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n                        values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n                        values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n                        index = i + 1;\n                        break;\n                    }\n                }\n            }\n            track.times = times;\n            track.values = values;\n            return index;\n        },\n        mergeMorphTargetTracks: function (clip, root) {\n            var tracks = [];\n            var mergedTracks = {};\n            var sourceTracks = clip.tracks;\n            for (var i = 0; i < sourceTracks.length; ++i) {\n                var sourceTrack = sourceTracks[i];\n                var sourceTrackBinding = THREE.PropertyBinding.parseTrackName(sourceTrack.name);\n                var sourceTrackNode = THREE.PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n                if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n                    tracks.push(sourceTrack);\n                    continue;\n                }\n                if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n                    if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n                        throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n                    }\n                    console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n                    sourceTrack = sourceTrack.clone();\n                    sourceTrack.setInterpolation(THREE.InterpolateLinear);\n                }\n                var targetCount = sourceTrackNode.morphTargetInfluences.length;\n                var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n                if (targetIndex === undefined) {\n                    throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n                }\n                var mergedTrack;\n                if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n                    mergedTrack = sourceTrack.clone();\n                    var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n                    for (var j = 0; j < mergedTrack.times.length; j++) {\n                        values[j * targetCount + targetIndex] = mergedTrack.values[j];\n                    }\n                    mergedTrack.name = '.morphTargetInfluences';\n                    mergedTrack.values = values;\n                    mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n                    tracks.push(mergedTrack);\n                    continue;\n                }\n                var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n                mergedTrack = mergedTracks[sourceTrackNode.uuid];\n                for (var j = 0; j < mergedTrack.times.length; j++) {\n                    mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n                }\n                for (var j = 0; j < sourceTrack.times.length; j++) {\n                    var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n                    mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n                }\n            }\n            clip.tracks = tracks;\n            return clip;\n        }\n    };\n    return GLTFExporter;\n});\ndefine('skylark-threejs-ex/exporters/ColladaExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var ColladaExporter = function () {\n    };\n    ColladaExporter.prototype = {\n        constructor: ColladaExporter,\n        parse: function (object, onDone, options) {\n            options = options || {};\n            options = Object.assign({\n                version: '1.4.1',\n                author: null,\n                textureDirectory: ''\n            }, options);\n            if (options.textureDirectory !== '') {\n                options.textureDirectory = `${ options.textureDirectory }/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n            }\n            var version = options.version;\n            if (version !== '1.4.1' && version !== '1.5.0') {\n                console.warn(`ColladaExporter : Version ${ version } not supported for export. Only 1.4.1 and 1.5.0.`);\n                return null;\n            }\n            function format(urdf) {\n                var IS_END_TAG = /^<\\//;\n                var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n                var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n                var pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n                var tagnum = 0;\n                return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(tag => {\n                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n                        tagnum--;\n                    }\n                    var res = `${ pad('  ', tagnum) }${ tag }`;\n                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n                        tagnum++;\n                    }\n                    return res;\n                }).join('\\n');\n            }\n            function base64ToBuffer(str) {\n                var b = atob(str);\n                var buf = new Uint8Array(b.length);\n                for (var i = 0, l = buf.length; i < l; i++) {\n                    buf[i] = b.charCodeAt(i);\n                }\n                return buf;\n            }\n            var canvas, ctx;\n            function imageToData(image, ext) {\n                canvas = canvas || document.createElement('canvas');\n                ctx = ctx || canvas.getContext('2d');\n                canvas.width = image.naturalWidth;\n                canvas.height = image.naturalHeight;\n                ctx.drawImage(image, 0, 0);\n                var base64data = canvas.toDataURL(`image/${ ext }`, 1).replace(/^data:image\\/(png|jpg);base64,/, '');\n                return base64ToBuffer(base64data);\n            }\n            var getFuncs = [\n                'getX',\n                'getY',\n                'getZ',\n                'getW'\n            ];\n            function attrBufferToArray(attr) {\n                if (attr.isInterleavedBufferAttribute) {\n                    var arr = new attr.array.constructor(attr.count * attr.itemSize);\n                    var size = attr.itemSize;\n                    for (var i = 0, l = attr.count; i < l; i++) {\n                        for (var j = 0; j < size; j++) {\n                            arr[i * size + j] = attr[getFuncs[j]](i);\n                        }\n                    }\n                    return arr;\n                } else {\n                    return attr.array;\n                }\n            }\n            function subArray(arr, st, ct) {\n                if (Array.isArray(arr))\n                    return arr.slice(st, st + ct);\n                else\n                    return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n            }\n            function getAttribute(attr, name, params, type) {\n                var array = attrBufferToArray(attr);\n                var res = `<source id=\"${ name }\">` + `<float_array id=\"${ name }-array\" count=\"${ array.length }\">` + array.join(' ') + '</float_array>' + '<technique_common>' + `<accessor source=\"#${ name }-array\" count=\"${ Math.floor(array.length / attr.itemSize) }\" stride=\"${ attr.itemSize }\">` + params.map(n => `<param name=\"${ n }\" type=\"${ type }\" />`).join('') + '</accessor>' + '</technique_common>' + '</source>';\n                return res;\n            }\n            var transMat;\n            function getTransform(o) {\n                o.updateMatrix();\n                transMat = transMat || new THREE.Matrix4();\n                transMat.copy(o.matrix);\n                transMat.transpose();\n                return `<matrix>${ transMat.toArray().join(' ') }</matrix>`;\n            }\n            function processGeometry(g) {\n                var info = geometryInfo.get(g);\n                if (!info) {\n                    var bufferGeometry = g;\n                    if (bufferGeometry instanceof THREE.Geometry) {\n                        bufferGeometry = new THREE.BufferGeometry().fromGeometry(bufferGeometry);\n                    }\n                    var meshid = `Mesh${ libraryGeometries.length + 1 }`;\n                    var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n                    var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n                            start: 0,\n                            count: indexCount,\n                            materialIndex: 0\n                        }];\n                    var gname = g.name ? ` name=\"${ g.name }\"` : '';\n                    var gnode = `<geometry id=\"${ meshid }\"${ gname }><mesh>`;\n                    var posName = `${ meshid }-position`;\n                    var vertName = `${ meshid }-vertices`;\n                    gnode += getAttribute(bufferGeometry.attributes.position, posName, [\n                        'X',\n                        'Y',\n                        'Z'\n                    ], 'float');\n                    gnode += `<vertices id=\"${ vertName }\"><input semantic=\"POSITION\" source=\"#${ posName }\" /></vertices>`;\n                    var triangleInputs = `<input semantic=\"VERTEX\" source=\"#${ vertName }\" offset=\"0\" />`;\n                    if ('normal' in bufferGeometry.attributes) {\n                        var normName = `${ meshid }-normal`;\n                        gnode += getAttribute(bufferGeometry.attributes.normal, normName, [\n                            'X',\n                            'Y',\n                            'Z'\n                        ], 'float');\n                        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${ normName }\" offset=\"0\" />`;\n                    }\n                    if ('uv' in bufferGeometry.attributes) {\n                        var uvName = `${ meshid }-texcoord`;\n                        gnode += getAttribute(bufferGeometry.attributes.uv, uvName, [\n                            'S',\n                            'T'\n                        ], 'float');\n                        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${ uvName }\" offset=\"0\" set=\"0\" />`;\n                    }\n                    if ('color' in bufferGeometry.attributes) {\n                        var colName = `${ meshid }-color`;\n                        gnode += getAttribute(bufferGeometry.attributes.color, colName, [\n                            'X',\n                            'Y',\n                            'Z'\n                        ], 'uint8');\n                        triangleInputs += `<input semantic=\"COLOR\" source=\"#${ colName }\" offset=\"0\" />`;\n                    }\n                    var indexArray = null;\n                    if (bufferGeometry.index) {\n                        indexArray = attrBufferToArray(bufferGeometry.index);\n                    } else {\n                        indexArray = new Array(indexCount);\n                        for (var i = 0, l = indexArray.length; i < l; i++)\n                            indexArray[i] = i;\n                    }\n                    for (var i = 0, l = groups.length; i < l; i++) {\n                        var group = groups[i];\n                        var subarr = subArray(indexArray, group.start, group.count);\n                        var polycount = subarr.length / 3;\n                        gnode += `<triangles material=\"MESH_MATERIAL_${ group.materialIndex }\" count=\"${ polycount }\">`;\n                        gnode += triangleInputs;\n                        gnode += `<p>${ subarr.join(' ') }</p>`;\n                        gnode += '</triangles>';\n                    }\n                    gnode += `</mesh></geometry>`;\n                    libraryGeometries.push(gnode);\n                    info = {\n                        meshid: meshid,\n                        bufferGeometry: bufferGeometry\n                    };\n                    geometryInfo.set(g, info);\n                }\n                return info;\n            }\n            function processTexture(tex) {\n                var texid = imageMap.get(tex);\n                if (texid == null) {\n                    texid = `image-${ libraryImages.length + 1 }`;\n                    var ext = 'png';\n                    var name = tex.name || texid;\n                    var imageNode = `<image id=\"${ texid }\" name=\"${ name }\">`;\n                    if (version === '1.5.0') {\n                        imageNode += `<init_from><ref>${ options.textureDirectory }${ name }.${ ext }</ref></init_from>`;\n                    } else {\n                        imageNode += `<init_from>${ options.textureDirectory }${ name }.${ ext }</init_from>`;\n                    }\n                    imageNode += '</image>';\n                    libraryImages.push(imageNode);\n                    imageMap.set(tex, texid);\n                    textures.push({\n                        directory: options.textureDirectory,\n                        name,\n                        ext,\n                        data: imageToData(tex.image, ext),\n                        original: tex\n                    });\n                }\n                return texid;\n            }\n            function processMaterial(m) {\n                var matid = materialMap.get(m);\n                if (matid == null) {\n                    matid = `Mat${ libraryEffects.length + 1 }`;\n                    var type = 'phong';\n                    if (m instanceof THREE.MeshLambertMaterial) {\n                        type = 'lambert';\n                    } else if (m instanceof THREE.MeshBasicMaterial) {\n                        type = 'constant';\n                        if (m.map !== null) {\n                            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n                        }\n                    }\n                    var emissive = m.emissive ? m.emissive : new THREE.Color(0, 0, 0);\n                    var diffuse = m.color ? m.color : new THREE.Color(0, 0, 0);\n                    var specular = m.specular ? m.specular : new THREE.Color(1, 1, 1);\n                    var shininess = m.shininess || 0;\n                    var reflectivity = m.reflectivity || 0;\n                    var transparencyNode = '';\n                    if (m.transparent === true) {\n                        transparencyNode += `<transparent>` + (m.map ? `<texture texture=\"diffuse-sampler\"></texture>` : '<float>1</float>') + '</transparent>';\n                        if (m.opacity < 1) {\n                            transparencyNode += `<transparency><float>${ m.opacity }</float></transparency>`;\n                        }\n                    }\n                    var techniqueNode = `<technique sid=\"common\"><${ type }>` + '<emission>' + (m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${ emissive.r } ${ emissive.g } ${ emissive.b } 1</color>`) + '</emission>' + (type !== 'constant' ? '<diffuse>' + (m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color>`) + '</diffuse>' : '') + (type !== 'constant' ? '<bump>' + (m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : '') + '</bump>' : '') + (type === 'phong' ? `<specular><color sid=\"specular\">${ specular.r } ${ specular.g } ${ specular.b } 1</color></specular>` + '<shininess>' + (m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${ shininess }</float>`) + '</shininess>' : '') + `<reflective><color>${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color></reflective>` + `<reflectivity><float>${ reflectivity }</float></reflectivity>` + transparencyNode + `</${ type }></technique>`;\n                    var effectnode = `<effect id=\"${ matid }-effect\">` + '<profile_COMMON>' + (m.map ? '<newparam sid=\"diffuse-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.map) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>' : '') + (m.specularMap ? '<newparam sid=\"specular-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.specularMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>' : '') + (m.emissiveMap ? '<newparam sid=\"emissive-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.emissiveMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>' : '') + (m.normalMap ? '<newparam sid=\"bump-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.normalMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>' : '') + techniqueNode + (m.side === THREE.DoubleSide ? `<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>` : '') + '</profile_COMMON>' + '</effect>';\n                    var materialName = m.name ? ` name=\"${ m.name }\"` : '';\n                    var materialNode = `<material id=\"${ matid }\"${ materialName }><instance_effect url=\"#${ matid }-effect\" /></material>`;\n                    libraryMaterials.push(materialNode);\n                    libraryEffects.push(effectnode);\n                    materialMap.set(m, matid);\n                }\n                return matid;\n            }\n            function processObject(o) {\n                var node = `<node name=\"${ o.name }\">`;\n                node += getTransform(o);\n                if (o instanceof THREE.Mesh && o.geometry != null) {\n                    var geomInfo = processGeometry(o.geometry);\n                    var meshid = geomInfo.meshid;\n                    var geometry = geomInfo.bufferGeometry;\n                    var matids = null;\n                    var matidsArray = [];\n                    var mat = o.material || new THREE.MeshBasicMaterial();\n                    var materials = Array.isArray(mat) ? mat : [mat];\n                    if (geometry.groups.length > materials.length) {\n                        matidsArray = new Array(geometry.groups.length);\n                    } else {\n                        matidsArray = new Array(materials.length);\n                    }\n                    matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));\n                    node += `<instance_geometry url=\"#${ meshid }\">` + (matids != null ? '<bind_material><technique_common>' + matids.map((id, i) => `<instance_material symbol=\"MESH_MATERIAL_${ i }\" target=\"#${ id }\" >` + '<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" />' + '</instance_material>').join('') + '</technique_common></bind_material>' : '') + '</instance_geometry>';\n                }\n                o.children.forEach(c => node += processObject(c));\n                node += '</node>';\n                return node;\n            }\n            var geometryInfo = new WeakMap();\n            var materialMap = new WeakMap();\n            var imageMap = new WeakMap();\n            var textures = [];\n            var libraryImages = [];\n            var libraryGeometries = [];\n            var libraryEffects = [];\n            var libraryMaterials = [];\n            var libraryVisualScenes = processObject(object);\n            var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n            var dae = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>' + `<COLLADA xmlns=\"${ specLink }\" version=\"${ version }\">` + '<asset>' + ('<contributor>' + '<authoring_tool>three.js Collada Exporter</authoring_tool>' + (options.author !== null ? `<author>${ options.author }</author>` : '') + '</contributor>' + `<created>${ new Date().toISOString() }</created>` + `<modified>${ new Date().toISOString() }</modified>` + '<up_axis>Y_UP</up_axis>') + '</asset>';\n            dae += `<library_images>${ libraryImages.join('') }</library_images>`;\n            dae += `<library_effects>${ libraryEffects.join('') }</library_effects>`;\n            dae += `<library_materials>${ libraryMaterials.join('') }</library_materials>`;\n            dae += `<library_geometries>${ libraryGeometries.join('') }</library_geometries>`;\n            dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${ libraryVisualScenes }</visual_scene></library_visual_scenes>`;\n            dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n            dae += '</COLLADA>';\n            var res = {\n                data: format(dae),\n                textures\n            };\n            if (typeof onDone === 'function') {\n                requestAnimationFrame(() => onDone(res));\n            }\n            return res;\n        }\n    };\n    return ColladaExporter;\n});\ndefine('skylark-threejs-ex/exporters/PLYExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PLYExporter = function () {\n    };\n    PLYExporter.prototype = {\n        constructor: PLYExporter,\n        parse: function (object, onDone, options) {\n            if (onDone && typeof onDone === 'object') {\n                console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n                options = onDone;\n                onDone = undefined;\n            }\n            function traverseMeshes(cb) {\n                object.traverse(function (child) {\n                    if (child.isMesh === true) {\n                        var mesh = child;\n                        var geometry = mesh.geometry;\n                        if (geometry.isGeometry === true) {\n                            geometry = geomToBufferGeom.get(geometry);\n                        }\n                        if (geometry.isBufferGeometry === true) {\n                            if (geometry.getAttribute('position') !== undefined) {\n                                cb(mesh, geometry);\n                            }\n                        }\n                    }\n                });\n            }\n            var defaultOptions = {\n                binary: false,\n                excludeAttributes: [],\n                littleEndian: false\n            };\n            options = Object.assign(defaultOptions, options);\n            var excludeAttributes = options.excludeAttributes;\n            var geomToBufferGeom = new WeakMap();\n            var includeNormals = false;\n            var includeColors = false;\n            var includeUVs = false;\n            var vertexCount = 0;\n            var faceCount = 0;\n            object.traverse(function (child) {\n                if (child.isMesh === true) {\n                    var mesh = child;\n                    var geometry = mesh.geometry;\n                    if (geometry.isGeometry === true) {\n                        var bufferGeometry = geomToBufferGeom.get(geometry) || new THREE.BufferGeometry().setFromObject(mesh);\n                        geomToBufferGeom.set(geometry, bufferGeometry);\n                        geometry = bufferGeometry;\n                    }\n                    if (geometry.isBufferGeometry === true) {\n                        var vertices = geometry.getAttribute('position');\n                        var normals = geometry.getAttribute('normal');\n                        var uvs = geometry.getAttribute('uv');\n                        var colors = geometry.getAttribute('color');\n                        var indices = geometry.getIndex();\n                        if (vertices === undefined) {\n                            return;\n                        }\n                        vertexCount += vertices.count;\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n                        if (normals !== undefined)\n                            includeNormals = true;\n                        if (uvs !== undefined)\n                            includeUVs = true;\n                        if (colors !== undefined)\n                            includeColors = true;\n                    }\n                }\n            });\n            var includeIndices = excludeAttributes.indexOf('index') === -1;\n            includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;\n            includeColors = includeColors && excludeAttributes.indexOf('color') === -1;\n            includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;\n            if (includeIndices && faceCount !== Math.floor(faceCount)) {\n                console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n                return null;\n            }\n            var indexByteCount = 4;\n            var header = 'ply\\n' + `format ${ options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii' } 1.0\\n` + `element vertex ${ vertexCount }\\n` + 'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n            if (includeNormals === true) {\n                header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n            }\n            if (includeUVs === true) {\n                header += 'property float s\\n' + 'property float t\\n';\n            }\n            if (includeColors === true) {\n                header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n            }\n            if (includeIndices === true) {\n                header += `element face ${ faceCount }\\n` + `property list uchar int vertex_index\\n`;\n            }\n            header += 'end_header\\n';\n            var vertex = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            var result = null;\n            if (options.binary === true) {\n                var headerBin = new TextEncoder().encode(header);\n                var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\n                var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n                var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n                new Uint8Array(output.buffer).set(headerBin, 0);\n                var vOffset = headerBin.length;\n                var fOffset = headerBin.length + vertexListLength;\n                var writtenVertices = 0;\n                traverseMeshes(function (mesh, geometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var colors = geometry.getAttribute('color');\n                    var indices = geometry.getIndex();\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                    for (var i = 0, l = vertices.count; i < l; i++) {\n                        vertex.x = vertices.getX(i);\n                        vertex.y = vertices.getY(i);\n                        vertex.z = vertices.getZ(i);\n                        vertex.applyMatrix4(mesh.matrixWorld);\n                        output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                        vOffset += 4;\n                        output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                        vOffset += 4;\n                        output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                        vOffset += 4;\n                        if (includeNormals === true) {\n                            if (normals != null) {\n                                vertex.x = normals.getX(i);\n                                vertex.y = normals.getY(i);\n                                vertex.z = normals.getZ(i);\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                                output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                                vOffset += 4;\n                            } else {\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                            }\n                        }\n                        if (includeUVs === true) {\n                            if (uvs != null) {\n                                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n                                vOffset += 4;\n                            } else if (includeUVs !== false) {\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                            }\n                        }\n                        if (includeColors === true) {\n                            if (colors != null) {\n                                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n                                vOffset += 1;\n                                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n                                vOffset += 1;\n                                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n                                vOffset += 1;\n                            } else {\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                            }\n                        }\n                    }\n                    if (includeIndices === true) {\n                        if (indices !== null) {\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\n                                output.setUint8(fOffset, 3);\n                                fOffset += 1;\n                                output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                            }\n                        } else {\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\n                                output.setUint8(fOffset, 3);\n                                fOffset += 1;\n                                output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n                                fOffset += indexByteCount;\n                            }\n                        }\n                    }\n                    writtenVertices += vertices.count;\n                });\n                result = output.buffer;\n            } else {\n                var writtenVertices = 0;\n                var vertexList = '';\n                var faceList = '';\n                traverseMeshes(function (mesh, geometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var colors = geometry.getAttribute('color');\n                    var indices = geometry.getIndex();\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                    for (var i = 0, l = vertices.count; i < l; i++) {\n                        vertex.x = vertices.getX(i);\n                        vertex.y = vertices.getY(i);\n                        vertex.z = vertices.getZ(i);\n                        vertex.applyMatrix4(mesh.matrixWorld);\n                        var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n                        if (includeNormals === true) {\n                            if (normals != null) {\n                                vertex.x = normals.getX(i);\n                                vertex.y = normals.getY(i);\n                                vertex.z = normals.getZ(i);\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n                            } else {\n                                line += ' 0 0 0';\n                            }\n                        }\n                        if (includeUVs === true) {\n                            if (uvs != null) {\n                                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n                            } else if (includeUVs !== false) {\n                                line += ' 0 0';\n                            }\n                        }\n                        if (includeColors === true) {\n                            if (colors != null) {\n                                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n                            } else {\n                                line += ' 255 255 255';\n                            }\n                        }\n                        vertexList += line + '\\n';\n                    }\n                    if (includeIndices === true) {\n                        if (indices !== null) {\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\n                                faceList += `3 ${ indices.getX(i + 0) + writtenVertices }`;\n                                faceList += ` ${ indices.getX(i + 1) + writtenVertices }`;\n                                faceList += ` ${ indices.getX(i + 2) + writtenVertices }\\n`;\n                            }\n                        } else {\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\n                                faceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\\n`;\n                            }\n                        }\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n                    }\n                    writtenVertices += vertices.count;\n                });\n                result = `${ header }${ vertexList }${ includeIndices ? `${ faceList }\\n` : '\\n' }`;\n            }\n            if (typeof onDone === 'function')\n                requestAnimationFrame(() => onDone(result));\n            return result;\n        }\n    };\n    \n    return PLYExporter;\n});\ndefine('skylark-threejs-ex/main',[\r\n\t\"skylark-threejs\",\r\n\r\n\t\"./shaders/CopyShader\",\r\n\t\"./shaders/BokehShader\",\r\n\t\"./shaders/SAOShader\",\r\n\t\"./shaders/DepthLimitedBlurShader\",\r\n\t\"./shaders/UnpackDepthRGBAShader\",\r\n\t\"./shaders/ConvolutionShader\",\r\n\t\"./shaders/LuminosityHighPassShader\",\r\n\t\"./shaders/FXAAShader\",\r\n\t\"./shaders/SSAOShader\",\r\n\t\"./shaders/FilmShader\",\r\n\t\"./shaders/DotScreenShader\",\r\n\t\"./shaders/LuminosityShader\",\r\n\t\"./shaders/SobelOperatorShader\",\r\n\t\"./shaders/ColorifyShader\",\r\n\t\"./shaders/ToneMapShader\",\r\n\t\"./shaders/TechnicolorShader\",\r\n\t\"./shaders/HueSaturationShader\",\r\n\r\n\t\"./postprocessing/EffectComposer\",\r\n\t\"./postprocessing/RenderPass\",\r\n\t\"./postprocessing/ShaderPass\",\r\n\t\"./postprocessing/MaskPass\",\r\n\r\n\t\"./curves/NURBSCurve\",\r\n\t\"./curves/NURBSSurface\",\r\n\t\"./curves/NURBSUtils\",\r\n\r\n\t\"./objects/Lensflare\",\r\n\t\"./objects/Reflector\",\r\n\t\"./objects/Refractor\",\r\n\r\n\t\"./loaders/TTFLoader\",\r\n//\t\"./loaders/LoaderSupport\",\r\n\t\"./loaders/3MFLoader\",\r\n\t\"./loaders/AMFLoader\",\r\n//\t\"./loaders/AssimpJSONLoader\",\r\n\t\"./loaders/AssimpLoader\",\r\n//\t\"./loaders/AWDLoader\",\r\n//\t\"./loaders/BabylonLoader\",\r\n\t\"./loaders/ColladaLoader\",\r\n\t\"./loaders/DRACOLoader\",\r\n\t\"./loaders/FBXLoader\",\r\n\t\"./loaders/GCodeLoader\",\r\n\t\"./loaders/GLTFLoader\",\r\n\t\"./loaders/MTLLoader\",\r\n\t\"./loaders/OBJLoader\",\r\n//\t\"./loaders/OBJLoader2\",\r\n\t\"./loaders/PCDLoader\",\r\n\t\"./loaders/PLYLoader\",\r\n\t\"./loaders/PRWMLoader\",\r\n\t\"./loaders/STLLoader\",\r\n\t\"./loaders/SVGLoader\",\r\n\t\"./loaders/TDSLoader\",\r\n//\t\"./loaders/VRMLLoader\",\r\n\t\"./loaders/VTKLoader\",\r\n\t\"./loaders/XLoader\",\r\n\t\"./loaders/DDSLoader\",\r\n\t\"./loaders/PVRLoader\",\r\n\t\"./loaders/TGALoader\",\r\n\t\"./loaders/KTXLoader\",\r\n\r\n\t\"./modifiers/SimplifyModifier\",\r\n\t\"./modifiers/SubdivisionModifier\",\r\n\r\n\t\"./exporters/DRACOExporter\",\r\n\t\"./exporters/OBJExporter\",\r\n\t\"./exporters/STLExporter\",\r\n\t\"./exporters/GLTFExporter\",\r\n\t\"./exporters/ColladaExporter\",\r\n\t\"./exporters/PLYExporter\"\r\n\r\n],function(THREE){\r\n\treturn THREE;\r\n});\ndefine('skylark-threejs-ex', ['skylark-threejs-ex/main'], function (main) { return main; });\n\n"]}