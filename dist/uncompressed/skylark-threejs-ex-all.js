/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
(function(factory,globals) {
  var define = globals.define,
      require = globals.require,
      isAmd = (typeof define === 'function' && define.amd),
      isCmd = (!isAmd && typeof exports !== 'undefined');

  if (!isAmd && !define) {
    var map = {};
    function absolute(relative, base) {
        if (relative[0]!==".") {
          return relative;
        }
        var stack = base.split("/"),
            parts = relative.split("/");
        stack.pop(); 
        for (var i=0; i<parts.length; i++) {
            if (parts[i] == ".")
                continue;
            if (parts[i] == "..")
                stack.pop();
            else
                stack.push(parts[i]);
        }
        return stack.join("/");
    }
    define = globals.define = function(id, deps, factory) {
        if (typeof factory == 'function') {
            map[id] = {
                factory: factory,
                deps: deps.map(function(dep){
                  return absolute(dep,id);
                }),
                resolved: false,
                exports: null
            };
            require(id);
        } else {
            map[id] = {
                factory : null,
                resolved : true,
                exports : factory
            };
        }
    };
    require = globals.require = function(id) {
        if (!map.hasOwnProperty(id)) {
            throw new Error('Module ' + id + ' has not been defined');
        }
        var module = map[id];
        if (!module.resolved) {
            var args = [];

            module.deps.forEach(function(dep){
                args.push(require(dep));
            })

            module.exports = module.factory.apply(globals, args) || null;
            module.resolved = true;
        }
        return module.exports;
    };
  }
  
  if (!define) {
     throw new Error("The module utility (ex: requirejs or skylark-utils) is not loaded!");
  }

  factory(define,require);

  if (!isAmd) {
    var skylarkjs = require("skylark-langx-ns");

    if (isCmd) {
      module.exports = skylarkjs;
    } else {
      globals.skylarkjs  = skylarkjs;
    }
  }

})(function(define,require) {

define('skylark-langx-ns/_attach',[],function(){
    return  function attach(obj1,path,obj2) {
        if (typeof path == "string") {
            path = path.split(".");//[path]
        };
        var length = path.length,
            ns=obj1,
            i=0,
            name = path[i++];

        while (i < length) {
            ns = ns[name] = ns[name] || {};
            name = path[i++];
        }

        return ns[name] = obj2;
    }
});
define('skylark-langx-ns/ns',[
    "./_attach"
], function(_attach) {
    var skylark = {
    	attach : function(path,obj) {
    		return _attach(skylark,path,obj);
    	}
    };
    return skylark;
});

define('skylark-langx-ns/main',[
	"./ns"
],function(skylark){
	return skylark;
});
define('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });

define('skylark-langx/skylark',[
    "skylark-langx-ns"
], function(ns) {
	return ns;
});

define('skylark-threejs/three',[], function () { 
	'use strict';

	var exports = {};

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	if ( Number.isInteger === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

		Number.isInteger = function ( value ) {

			return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

		};

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( 'name' in Function.prototype === false ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		Object.assign = function ( target ) {

			if ( target === undefined || target === null ) {

				throw new TypeError( 'Cannot convert undefined or null to object' );

			}

			var output = Object( target );

			for ( var index = 1; index < arguments.length; index ++ ) {

				var source = arguments[ index ];

				if ( source !== undefined && source !== null ) {

					for ( var nextKey in source ) {

						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

							output[ nextKey ] = source[ nextKey ];

						}

					}

				}

			}

			return output;

		};

	}

	var REVISION = '111';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
	var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var VSMShadowMap = 3;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var ACESFilmicToneMapping = 5;

	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var NearestFilter = 1003;
	var NearestMipmapNearestFilter = 1004;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipmapLinearFilter = 1005;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipmapNearestFilter = 1007;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipmapLinearFilter = 1008;
	var LinearMipMapLinearFilter = 1008;
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RedFormat = 1028;
	var RGB_S3TC_DXT1_Format = 33776;
	var RGBA_S3TC_DXT1_Format = 33777;
	var RGBA_S3TC_DXT3_Format = 33778;
	var RGBA_S3TC_DXT5_Format = 33779;
	var RGB_PVRTC_4BPPV1_Format = 35840;
	var RGB_PVRTC_2BPPV1_Format = 35841;
	var RGBA_PVRTC_4BPPV1_Format = 35842;
	var RGBA_PVRTC_2BPPV1_Format = 35843;
	var RGB_ETC1_Format = 36196;
	var RGBA_ASTC_4x4_Format = 37808;
	var RGBA_ASTC_5x4_Format = 37809;
	var RGBA_ASTC_5x5_Format = 37810;
	var RGBA_ASTC_6x5_Format = 37811;
	var RGBA_ASTC_6x6_Format = 37812;
	var RGBA_ASTC_8x5_Format = 37813;
	var RGBA_ASTC_8x6_Format = 37814;
	var RGBA_ASTC_8x8_Format = 37815;
	var RGBA_ASTC_10x5_Format = 37816;
	var RGBA_ASTC_10x6_Format = 37817;
	var RGBA_ASTC_10x8_Format = 37818;
	var RGBA_ASTC_10x10_Format = 37819;
	var RGBA_ASTC_12x10_Format = 37820;
	var RGBA_ASTC_12x12_Format = 37821;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;
	var TangentSpaceNormalMap = 0;
	var ObjectSpaceNormalMap = 1;

	var ZeroStencilOp = 0;
	var KeepStencilOp = 7680;
	var ReplaceStencilOp = 7681;
	var IncrementStencilOp = 7682;
	var DecrementStencilOp = 7683;
	var IncrementWrapStencilOp = 34055;
	var DecrementWrapStencilOp = 34056;
	var InvertStencilOp = 5386;

	var NeverStencilFunc = 512;
	var LessStencilFunc = 513;
	var EqualStencilFunc = 514;
	var LessEqualStencilFunc = 515;
	var GreaterStencilFunc = 516;
	var NotEqualStencilFunc = 517;
	var GreaterEqualStencilFunc = 518;
	var AlwaysStencilFunc = 519;

	var StaticDrawUsage = 35044;
	var DynamicDrawUsage = 35048;
	var StreamDrawUsage = 35040;
	var StaticReadUsage = 35045;
	var DynamicReadUsage = 35049;
	var StreamReadUsage = 35041;
	var StaticCopyUsage = 35046;
	var DynamicCopyUsage = 35050;
	var StreamCopyUsage = 35042;

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) { this._listeners = {}; }

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) { return false; }

			var listeners = this._listeners;

			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) { return; }

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) { return; }

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = listenerArray.slice( 0 );

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _lut = [];

	for ( var i = 0; i < 256; i ++ ) {

		_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

	}

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: function () {

			// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

			var d0 = Math.random() * 0xffffffff | 0;
			var d1 = Math.random() * 0xffffffff | 0;
			var d2 = Math.random() * 0xffffffff | 0;
			var d3 = Math.random() * 0xffffffff | 0;
			var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
				_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
				_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
				_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

			// .toUpperCase() here flattens concatenated strings to save heap memory space.
			return uuid.toUpperCase();

		},

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) { return 0; }
			if ( x >= max ) { return 1; }

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) { return 0; }
			if ( x >= max ) { return 1; }

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		ceilPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

		},

		floorPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Object.defineProperties( Vector2.prototype, {

		"width": {

			get: function () {

				return this.x;

			},

			set: function ( value ) {

				this.x = value;

			}

		},

		"height": {

			get: function () {

				return this.y;

			},

			set: function ( value ) {

				this.y = value;

			}

		}

	} );

	Object.assign( Vector2.prototype, {

		isVector2: true,

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		cross: function ( v ) {

			return this.x * v.y - this.y * v.x;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) { angle += 2 * Math.PI; }

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Object.assign( Quaternion, {

		slerp: function ( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	Object.defineProperties( Quaternion.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this._onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this._onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this._onChangeCallback();

			}

		},

		w: {

			get: function () {

				return this._w;

			},

			set: function ( value ) {

				this._w = value;
				this._onChangeCallback();

			}

		}

	} );

	Object.assign( Quaternion.prototype, {

		isQuaternion: true,

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( ! ( euler && euler.isEuler ) ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var cos = Math.cos;
			var sin = Math.sin;

			var c1 = cos( x / 2 );
			var c2 = cos( y / 2 );
			var c3 = cos( z / 2 );

			var s1 = sin( x / 2 );
			var s2 = sin( y / 2 );
			var s3 = sin( z / 2 );

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) { this._onChangeCallback(); }

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this._onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this._onChangeCallback();

			return this;

		},

		setFromUnitVectors: function ( vFrom, vTo ) {

			// assumes direction vectors vFrom and vTo are normalized

			var EPS = 0.000001;

			var r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					this._x = - vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;

				} else {

					this._x = 0;
					this._y = - vFrom.z;
					this._z = vFrom.y;
					this._w = r;

				}

			} else {

				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;

			}

			return this.normalize();

		},

		angleTo: function ( q ) {

			return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );

		},

		rotateTowards: function ( q, step ) {

			var angle = this.angleTo( q );

			if ( angle === 0 ) { return this; }

			var t = Math.min( 1, step / angle );

			this.slerp( q, t );

			return this;

		},

		inverse: function () {

			// quaternion is assumed to have unit length

			return this.conjugate();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this._onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this._onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) { return this; }
			if ( t === 1 ) { return this.copy( qb ); }

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if ( sqrSinHalfTheta <= Number.EPSILON ) {

				var s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;

				this.normalize();
				this._onChangeCallback();

				return this;

			}

			var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this._onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this._onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		_onChange: function ( callback ) {

			this._onChangeCallback = callback;

			return this;

		},

		_onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _vector = new Vector3();
	var _quaternion = new Quaternion();

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Object.assign( Vector3.prototype, {

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

		},

		applyAxisAngle: function ( axis, angle ) {

			return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyNormalMatrix: function ( m ) {

			return this.applyMatrix3( m ).normalize();

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function ( camera ) {

			return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

		},

		unproject: function ( camera ) {

			return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

		},

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		// TODO lengthSquared?

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			return this.crossVectors( this, v );

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( v ) {

			// v cannot be the zero v

			var scalar = v.dot( this ) / v.lengthSq();

			return this.copy( v ).multiplyScalar( scalar );

		},

		projectOnPlane: function ( planeNormal ) {

			_vector.copy( this ).projectOnVector( planeNormal );

			return this.sub( _vector );

		},

		reflect: function ( normal ) {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		},

		angleTo: function ( v ) {

			var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\'t handle zero length vectors.' ); }

			var theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function ( s ) {

			return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

		},

		setFromSphericalCoords: function ( radius, phi, theta ) {

			var sinPhiRadius = Math.sin( phi ) * radius;

			this.x = sinPhiRadius * Math.sin( theta );
			this.y = Math.cos( phi ) * radius;
			this.z = sinPhiRadius * Math.cos( theta );

			return this;

		},

		setFromCylindrical: function ( c ) {

			return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

		},

		setFromCylindricalCoords: function ( radius, theta, y ) {

			this.x = radius * Math.sin( theta );
			this.y = y;
			this.z = radius * Math.cos( theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			var e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	var _vector$1 = new Vector3();

	function Matrix3() {

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix3.prototype, {

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		},

		setFromMatrix4: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToBufferAttribute: function ( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				_vector$1.x = attribute.getX( i );
				_vector$1.y = attribute.getY( i );
				_vector$1.z = attribute.getZ( i );

				_vector$1.applyMatrix3( this );

				attribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );

			}

			return attribute;

		},

		multiply: function ( m ) {

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( matrix && matrix.isMatrix4 ) {

				console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

			var c = Math.cos( rotation );
			var s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

		},

		scale: function ( sx, sy ) {

			var te = this.elements;

			te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
			te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

			return this;

		},

		rotate: function ( theta ) {

			var c = Math.cos( theta );
			var s = Math.sin( theta );

			var te = this.elements;

			var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
			var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

			te[ 0 ] = c * a11 + s * a21;
			te[ 3 ] = c * a12 + s * a22;
			te[ 6 ] = c * a13 + s * a23;

			te[ 1 ] = - s * a11 + c * a21;
			te[ 4 ] = - s * a12 + c * a22;
			te[ 7 ] = - s * a13 + c * a23;

			return this;

		},

		translate: function ( tx, ty ) {

			var te = this.elements;

			te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
			te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) { return false; }

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			for ( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var _canvas;

	var ImageUtils = {

		getDataURL: function ( image ) {

			var canvas;

			if ( typeof HTMLCanvasElement == 'undefined' ) {

				return image.src;

			} else if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				if ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }

				_canvas.width = image.width;
				_canvas.height = image.height;

				var context = _canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

				canvas = _canvas;

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var textureId = 0;

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: textureId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding : LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Texture,

		isTexture: true,

		updateMatrix: function () {

			this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			var output = {

				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,

				wrap: [ this.wrapS, this.wrapT ],

				format: this.format,
				type: this.type,
				encoding: this.encoding,

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY,

				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment

			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

					var url;

					if ( Array.isArray( image ) ) {

						// process array of images e.g. CubeTexture

						url = [];

						for ( var i = 0, l = image.length; i < l; i ++ ) {

							url.push( ImageUtils.getDataURL( image[ i ] ) );

						}

					} else {

						// process single image

						url = ImageUtils.getDataURL( image );

					}

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: url
					};

				}

				output.image = image.uuid;

			}

			if ( ! isRootObject ) {

				meta.textures[ this.uuid ] = output;

			}

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping ) { return uv; }

			uv.applyMatrix3( this.matrix );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

			return uv;

		}

	} );

	Object.defineProperty( Texture.prototype, "needsUpdate", {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Object.defineProperties( Vector4.prototype, {

		"width": {

			get: function () {

				return this.z;

			},

			set: function ( value ) {

				this.z = value;

			}

		},

		"height": {

			get: function () {

				return this.w;

			},

			set: function ( value ) {

				this.w = value;

			}

		}

	} );

	Object.assign( Vector4.prototype, {

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) { s = 1; }

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		}

	} );

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.texture.image = {};
		this.texture.image.width = width;
		this.texture.image.height = height;

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: WebGLRenderTarget,

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.texture.image.width = width;
				this.texture.image.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author Matt DesLauriers / @mattdesl
	 */

	function WebGLMultisampleRenderTarget( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.samples = 4;

	}

	WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

		constructor: WebGLMultisampleRenderTarget,

		isWebGLMultisampleRenderTarget: true,

		copy: function ( source ) {

			WebGLRenderTarget.prototype.copy.call( this, source );

			this.samples = source.samples;

			return this;

		}

	} );

	var _v1 = new Vector3();
	var _m1 = new Matrix4();
	var _zero = new Vector3( 0, 0, 0 );
	var _one = new Vector3( 1, 1, 1 );
	var _x = new Vector3();
	var _y = new Vector3();
	var _z = new Vector3();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix4.prototype, {

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		},

		extractRotation: function ( m ) {

			// this method does not support reflection matrices

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;
			te[ 3 ] = 0;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;
			te[ 7 ] = 0;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;
			te[ 11 ] = 0;

			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// bottom row
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// last column
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			return this.compose( _zero, q, _one );

		},

		lookAt: function ( eye, target, up ) {

			var te = this.elements;

			_z.subVectors( eye, target );

			if ( _z.lengthSq() === 0 ) {

				// eye and target are in the same position

				_z.z = 1;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

			if ( _x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					_z.x += 0.0001;

				} else {

					_z.z += 0.0001;

				}

				_z.normalize();
				_x.crossVectors( up, _z );

			}

			_x.normalize();
			_y.crossVectors( _z, _x );

			te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
			te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
			te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

			return this;

		},

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToBufferAttribute: function ( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				_v1.x = attribute.getX( i );
				_v1.y = attribute.getY( i );
				_v1.z = attribute.getZ( i );

				_v1.applyMatrix4( this );

				attribute.setXYZ( i, _v1.x, _v1.y, _v1.z );

			}

			return attribute;

		},

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		setPosition: function ( x, y, z ) {

			var te = this.elements;

			if ( x.isVector3 ) {

				te[ 12 ] = x.x;
				te[ 13 ] = x.y;
				te[ 14 ] = x.z;

			} else {

				te[ 12 ] = x;
				te[ 13 ] = y;
				te[ 14 ] = z;

			}

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeShear: function ( x, y, z ) {

			this.set(

				1, y, z, 0,
				x, 1, z, 0,
				x, y, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			var x2 = x + x,	y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			var sx = scale.x, sy = scale.y, sz = scale.z;

			te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
			te[ 1 ] = ( xy + wz ) * sx;
			te[ 2 ] = ( xz - wy ) * sx;
			te[ 3 ] = 0;

			te[ 4 ] = ( xy - wz ) * sy;
			te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
			te[ 6 ] = ( yz + wx ) * sy;
			te[ 7 ] = 0;

			te[ 8 ] = ( xz + wy ) * sz;
			te[ 9 ] = ( yz - wx ) * sz;
			te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
			te[ 11 ] = 0;

			te[ 12 ] = position.x;
			te[ 13 ] = position.y;
			te[ 14 ] = position.z;
			te[ 15 ] = 1;

			return this;

		},

		decompose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) { sx = - sx; }

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			_m1.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			_m1.elements[ 0 ] *= invSX;
			_m1.elements[ 1 ] *= invSX;
			_m1.elements[ 2 ] *= invSX;

			_m1.elements[ 4 ] *= invSY;
			_m1.elements[ 5 ] *= invSY;
			_m1.elements[ 6 ] *= invSY;

			_m1.elements[ 8 ] *= invSZ;
			_m1.elements[ 9 ] *= invSZ;
			_m1.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( _m1 );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		},

		makePerspective: function ( left, right, top, bottom, near, far ) {

			if ( far === undefined ) {

				console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

			}

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) { return false; }

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			for ( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	var _matrix = new Matrix4();
	var _quaternion$1 = new Quaternion();

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Object.defineProperties( Euler.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this._onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this._onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this._onChangeCallback();

			}

		},

		order: {

			get: function () {

				return this._order;

			},

			set: function ( value ) {

				this._order = value;
				this._onChangeCallback();

			}

		}

	} );

	Object.assign( Euler.prototype, {

		isEuler: true,

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this._onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.9999999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.9999999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) { this._onChangeCallback(); }

			return this;

		},

		setFromQuaternion: function ( q, order, update ) {

			_matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( _matrix, order, update );

		},

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function ( newOrder ) {

			// WARNING: this discards revolution information -bhouston

			_quaternion$1.setFromEuler( this );

			return this.setFromQuaternion( _quaternion$1, newOrder );

		},

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }

			this._onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		_onChange: function ( callback ) {

			this._onChangeCallback = callback;

			return this;

		},

		_onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1 | 0;

	}

	Object.assign( Layers.prototype, {

		set: function ( channel ) {

			this.mask = 1 << channel | 0;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel | 0;

		},

		enableAll: function () {

			this.mask = 0xffffffff | 0;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel | 0;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel | 0 );

		},

		disableAll: function () {

			this.mask = 0;

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	} );

	var _object3DId = 0;

	var _v1$1 = new Vector3();
	var _q1 = new Quaternion();
	var _m1$1 = new Matrix4();
	var _target = new Vector3();

	var _position = new Vector3();
	var _scale = new Vector3();
	var _quaternion$2 = new Quaternion();

	var _xAxis = new Vector3( 1, 0, 0 );
	var _yAxis = new Vector3( 0, 1, 0 );
	var _zAxis = new Vector3( 0, 0, 1 );

	var _addedEvent = { type: 'added' };
	var _removedEvent = { type: 'removed' };

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	function Object3D() {

		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation._onChange( onRotationChange );
		quaternion._onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				configurable: true,
				enumerable: true,
				value: position
			},
			rotation: {
				configurable: true,
				enumerable: true,
				value: rotation
			},
			quaternion: {
				configurable: true,
				enumerable: true,
				value: quaternion
			},
			scale: {
				configurable: true,
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Object3D,

		isObject3D: true,

		onBeforeRender: function () {},
		onAfterRender: function () {},

		applyMatrix: function ( matrix ) {

			if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

			this.matrix.premultiply( matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		applyQuaternion: function ( q ) {

			this.quaternion.premultiply( q );

			return this;

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function ( axis, angle ) {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( _q1 );

			return this;

		},

		rotateOnWorldAxis: function ( axis, angle ) {

			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.premultiply( _q1 );

			return this;

		},

		rotateX: function ( angle ) {

			return this.rotateOnAxis( _xAxis, angle );

		},

		rotateY: function ( angle ) {

			return this.rotateOnAxis( _yAxis, angle );

		},

		rotateZ: function ( angle ) {

			return this.rotateOnAxis( _zAxis, angle );

		},

		translateOnAxis: function ( axis, distance ) {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			_v1$1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( _v1$1.multiplyScalar( distance ) );

			return this;

		},

		translateX: function ( distance ) {

			return this.translateOnAxis( _xAxis, distance );

		},

		translateY: function ( distance ) {

			return this.translateOnAxis( _yAxis, distance );

		},

		translateZ: function ( distance ) {

			return this.translateOnAxis( _zAxis, distance );

		},

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function ( vector ) {

			return vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );

		},

		lookAt: function ( x, y, z ) {

			// This method does not support objects having non-uniformly-scaled parent(s)

			if ( x.isVector3 ) {

				_target.copy( x );

			} else {

				_target.set( x, y, z );

			}

			var parent = this.parent;

			this.updateWorldMatrix( true, false );

			_position.setFromMatrixPosition( this.matrixWorld );

			if ( this.isCamera || this.isLight ) {

				_m1$1.lookAt( _position, _target, this.up );

			} else {

				_m1$1.lookAt( _target, _position, this.up );

			}

			this.quaternion.setFromRotationMatrix( _m1$1 );

			if ( parent ) {

				_m1$1.extractRotation( parent.matrixWorld );
				_q1.setFromRotationMatrix( _m1$1 );
				this.quaternion.premultiply( _q1.inverse() );

			}

		},

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( ( object && object.isObject3D ) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				this.children.push( object );

				object.dispatchEvent( _addedEvent );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

				return this;

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;
				this.children.splice( index, 1 );

				object.dispatchEvent( _removedEvent );

			}

			return this;

		},

		attach: function ( object ) {

			// adds object as a child of this, while maintaining the object's world transform

			this.updateWorldMatrix( true, false );

			_m1$1.getInverse( this.matrixWorld );

			if ( object.parent !== null ) {

				object.parent.updateWorldMatrix( true, false );

				_m1$1.multiply( object.parent.matrixWorld );

			}

			object.applyMatrix( _m1$1 );

			object.updateWorldMatrix( false, false );

			this.add( object );

			return this;

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) { return this; }

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			return target.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
				target = new Quaternion();

			}

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( _position, target, _scale );

			return target;

		},

		getWorldScale: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( _position, _quaternion$2, target );

			return target;

		},

		getWorldDirection: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			var e = this.matrixWorld.elements;

			return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

		},

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) { return; }

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

			if ( this.matrixWorldNeedsUpdate || force ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		updateWorldMatrix: function ( updateParents, updateChildren ) {

			var parent = this.parent;

			if ( updateParents === true && parent !== null ) {

				parent.updateWorldMatrix( true, false );

			}

			if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			// update children

			if ( updateChildren === true ) {

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].updateWorldMatrix( false, true );

				}

			}

		},

		toJSON: function ( meta ) {

			// meta is a string when called from JSON.stringify
			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {}
				};

				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) { object.name = this.name; }
			if ( this.castShadow === true ) { object.castShadow = true; }
			if ( this.receiveShadow === true ) { object.receiveShadow = true; }
			if ( this.visible === false ) { object.visible = false; }
			if ( this.frustumCulled === false ) { object.frustumCulled = false; }
			if ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }
			if ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }

			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();

			if ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }

			// object specific properties

			if ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }

			if ( this.isInstancedMesh ) {

				object.type = 'InstancedMesh';
				object.count = this.count;
				object.instanceMatrix = this.instanceMatrix.toJSON();

			}

			//

			function serialize( library, element ) {

				if ( library[ element.uuid ] === undefined ) {

					library[ element.uuid ] = element.toJSON( meta );

				}

				return element.uuid;

			}

			if ( this.isMesh || this.isLine || this.isPoints ) {

				object.geometry = serialize( meta.geometries, this.geometry );

				var parameters = this.geometry.parameters;

				if ( parameters !== undefined && parameters.shapes !== undefined ) {

					var shapes = parameters.shapes;

					if ( Array.isArray( shapes ) ) {

						for ( var i = 0, l = shapes.length; i < l; i ++ ) {

							var shape = shapes[ i ];

							serialize( meta.shapes, shape );

						}

					} else {

						serialize( meta.shapes, shapes );

					}

				}

			}

			if ( this.material !== undefined ) {

				if ( Array.isArray( this.material ) ) {

					var uuids = [];

					for ( var i = 0, l = this.material.length; i < l; i ++ ) {

						uuids.push( serialize( meta.materials, this.material[ i ] ) );

					}

					object.material = uuids;

				} else {

					object.material = serialize( meta.materials, this.material );

				}

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
				var shapes = extractFromCache( meta.shapes );

				if ( geometries.length > 0 ) { output.geometries = geometries; }
				if ( materials.length > 0 ) { output.materials = materials; }
				if ( textures.length > 0 ) { output.textures = textures; }
				if ( images.length > 0 ) { output.images = images; }
				if ( shapes.length > 0 ) { output.shapes = shapes; }

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) { recursive = true; }

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.layers.mask = source.layers.mask;
			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene() {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

		}

	}

	Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Scene,

		isScene: true,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			if ( source.background !== null ) { this.background = source.background.clone(); }
			if ( source.fog !== null ) { this.fog = source.fog.clone(); }
			if ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }

			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			if ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }
			if ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }

			return data;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	var _points = [
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3()
	];

	var _vector$2 = new Vector3();

	var _box = new Box3();

	// triangle centered vertices

	var _v0 = new Vector3();
	var _v1$2 = new Vector3();
	var _v2 = new Vector3();

	// triangle edge vectors

	var _f0 = new Vector3();
	var _f1 = new Vector3();
	var _f2 = new Vector3();

	var _center = new Vector3();
	var _extents = new Vector3();
	var _triangleNormal = new Vector3();
	var _testAxis = new Vector3();

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}


	Object.assign( Box3.prototype, {

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) { minX = x; }
				if ( y < minY ) { minY = y; }
				if ( z < minZ ) { minZ = z; }

				if ( x > maxX ) { maxX = x; }
				if ( y > maxY ) { maxY = y; }
				if ( z > maxZ ) { maxZ = z; }

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromBufferAttribute: function ( attribute ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				var x = attribute.getX( i );
				var y = attribute.getY( i );
				var z = attribute.getZ( i );

				if ( x < minX ) { minX = x; }
				if ( y < minY ) { minY = y; }
				if ( z < minZ ) { minZ = z; }

				if ( x > maxX ) { maxX = x; }
				if ( y > maxY ) { maxY = y; }
				if ( z > maxZ ) { maxZ = z; }

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function ( center, size ) {

			var halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		},

		setFromObject: function ( object ) {

			this.makeEmpty();

			return this.expandByObject( object );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getCenter() target is now required' );
				target = new Vector3();

			}

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getSize() target is now required' );
				target = new Vector3();

			}

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		expandByObject: function ( object ) {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			object.updateWorldMatrix( false, false );

			var geometry = object.geometry;

			if ( geometry !== undefined ) {

				if ( geometry.boundingBox === null ) {

					geometry.computeBoundingBox();

				}

				_box.copy( geometry.boundingBox );
				_box.applyMatrix4( object.matrixWorld );

				this.expandByPoint( _box.min );
				this.expandByPoint( _box.max );

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				this.expandByObject( children[ i ] );

			}

			return this;

		},

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;

		},

		getParameter: function ( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getParameter() target is now required' );
				target = new Vector3();

			}

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

		},

		intersectsSphere: function ( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, _vector$2 );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		},

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= - plane.constant && max >= - plane.constant );

		},

		intersectsTriangle: function ( triangle ) {

			if ( this.isEmpty() ) {

				return false;

			}

			// compute box center and extents
			this.getCenter( _center );
			_extents.subVectors( this.max, _center );

			// translate triangle to aabb origin
			_v0.subVectors( triangle.a, _center );
			_v1$2.subVectors( triangle.b, _center );
			_v2.subVectors( triangle.c, _center );

			// compute edge vectors for triangle
			_f0.subVectors( _v1$2, _v0 );
			_f1.subVectors( _v2, _v1$2 );
			_f2.subVectors( _v0, _v2 );

			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
			var axes = [
				0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
				_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
				- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
			];
			if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

				return false;

			}

			// test 3 face normals from the aabb
			axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
			if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

				return false;

			}

			// finally testing the face normal of the triangle
			// use already existing triangle edge vectors here
			_triangleNormal.crossVectors( _f0, _f1 );
			axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

			return satForAxes( axes, _v0, _v1$2, _v2, _extents );

		},

		clampPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .clampPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function ( point ) {

			var clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );

			return clampedPoint.sub( point ).length();

		},

		getBoundingSphere: function ( target ) {

			if ( target === undefined ) {

				console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
				//target = new Sphere(); // removed to avoid cyclic dependency

			}

			this.getCenter( target.center );

			target.radius = this.getSize( _vector$2 ).length() * 0.5;

			return target;

		},

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if ( this.isEmpty() ) { this.makeEmpty(); }

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function ( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) { return this; }

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

			this.setFromPoints( _points );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	function satForAxes( axes, v0, v1, v2, extents ) {

		var i, j;

		for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {

			_testAxis.fromArray( axes, i );
			// project the aabb onto the seperating axis
			var r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
			// project all 3 vertices of the triangle onto the seperating axis
			var p0 = v0.dot( _testAxis );
			var p1 = v1.dot( _testAxis );
			var p2 = v2.dot( _testAxis );
			// actual test, basically see if either of the most extreme of the triangle points intersects r
			if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

				// points of the projected triangle are outside the projected half-length of the aabb
				// the axis is seperating and we can exit
				return false;

			}

		}

		return true;

	}

	var _box$1 = new Box3();

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Object.assign( Sphere.prototype, {

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function ( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				_box$1.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

		},

		clampPoint: function ( point, target ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			if ( target === undefined ) {

				console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
				target = new Vector3();

			}

			target.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				target.sub( this.center ).normalize();
				target.multiplyScalar( this.radius ).add( this.center );

			}

			return target;

		},

		getBoundingBox: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
				target = new Box3();

			}

			target.set( this.center, this.center );
			target.expandByScalar( this.radius );

			return target;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	} );

	var _vector$3 = new Vector3();
	var _segCenter = new Vector3();
	var _segDir = new Vector3();
	var _diff = new Vector3();

	var _edge1 = new Vector3();
	var _edge2 = new Vector3();
	var _normal = new Vector3();

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );

	}

	Object.assign( Ray.prototype, {

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Ray: .at() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function ( t ) {

			this.origin.copy( this.at( t, _vector$3 ) );

			return this;

		},

		closestPointToPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			target.subVectors( point, this.origin );

			var directionDistance = target.dot( this.direction );

			if ( directionDistance < 0 ) {

				return target.copy( this.origin );

			}

			return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function ( point ) {

			var directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return _vector$3.distanceToSquared( point );

		},

		distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			_segDir.copy( v1 ).sub( v0 ).normalize();
			_diff.copy( this.origin ).sub( _segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( _segDir );
			var b0 = _diff.dot( this.direction );
			var b1 = - _diff.dot( _segDir );
			var c = _diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

			}

			return sqrDist;

		},

		intersectSphere: function ( sphere, target ) {

			_vector$3.subVectors( sphere.center, this.origin );
			var tca = _vector$3.dot( this.direction );
			var d2 = _vector$3.dot( _vector$3 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) { return null; }

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) { return null; }

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) { return this.at( t1, target ); }

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, target );

		},

		intersectsSphere: function ( sphere ) {

			return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t : null;

		},

		intersectPlane: function ( plane, target ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, target );

		},

		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, target ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }

			if ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }

			if ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }

			if ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) { return null; }

			return this.at( tmin >= 0 ? tmin : tmax, target );

		},

		intersectsBox: function ( box ) {

			return this.intersectBox( box, _vector$3 ) !== null;

		},

		intersectTriangle: function ( a, b, c, backfaceCulling, target ) {

			// Compute the offset origin, edges, and normal.

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			_edge1.subVectors( b, a );
			_edge2.subVectors( c, a );
			_normal.crossVectors( _edge1, _edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( _normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) { return null; }
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			_diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * _diff.dot( _normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, target );

		},

		applyMatrix4: function ( matrix4 ) {

			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	var _vector1 = new Vector3();
	var _vector2 = new Vector3();
	var _normalMatrix = new Matrix3();

	function Plane( normal, constant ) {

		// normal is assumed to be normalized

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Object.assign( Plane.prototype, {

		isPlane: true,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		},

		setFromCoplanarPoints: function ( a, b, c ) {

			var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .projectPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

		},

		intersectLine: function ( line, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .intersectLine() target is now required' );
				target = new Vector3();

			}

			var direction = line.delta( _vector1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return target.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return target.copy( direction ).multiplyScalar( t ).add( line.start );

		},

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function ( matrix, optionalNormalMatrix ) {

			var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

			var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		},

		translate: function ( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _v0$1 = new Vector3();
	var _v1$3 = new Vector3();
	var _v2$1 = new Vector3();
	var _v3 = new Vector3();

	var _vab = new Vector3();
	var _vac = new Vector3();
	var _vbc = new Vector3();
	var _vap = new Vector3();
	var _vbp = new Vector3();
	var _vcp = new Vector3();

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Object.assign( Triangle, {

		getNormal: function ( a, b, c, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getNormal() target is now required' );
				target = new Vector3();

			}

			target.subVectors( c, b );
			_v0$1.subVectors( a, b );
			target.cross( _v0$1 );

			var targetLengthSq = target.lengthSq();
			if ( targetLengthSq > 0 ) {

				return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

			}

			return target.set( 0, 0, 0 );

		},

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		getBarycoord: function ( point, a, b, c, target ) {

			_v0$1.subVectors( c, a );
			_v1$3.subVectors( b, a );
			_v2$1.subVectors( point, a );

			var dot00 = _v0$1.dot( _v0$1 );
			var dot01 = _v0$1.dot( _v1$3 );
			var dot02 = _v0$1.dot( _v2$1 );
			var dot11 = _v1$3.dot( _v1$3 );
			var dot12 = _v1$3.dot( _v2$1 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
				target = new Vector3();

			}

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return target.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return target.set( 1 - u - v, v, u );

		},

		containsPoint: function ( point, a, b, c ) {

			Triangle.getBarycoord( point, a, b, c, _v3 );

			return ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );

		},

		getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {

			this.getBarycoord( point, p1, p2, p3, _v3 );

			target.set( 0, 0 );
			target.addScaledVector( uv1, _v3.x );
			target.addScaledVector( uv2, _v3.y );
			target.addScaledVector( uv3, _v3.z );

			return target;

		},

		isFrontFacing: function ( a, b, c, direction ) {

			_v0$1.subVectors( c, b );
			_v1$3.subVectors( a, b );

			// strictly front facing
			return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

		}

	} );

	Object.assign( Triangle.prototype, {

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		getArea: function () {

			_v0$1.subVectors( this.c, this.b );
			_v1$3.subVectors( this.a, this.b );

			return _v0$1.cross( _v1$3 ).length() * 0.5;

		},

		getMidpoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
				target = new Vector3();

			}

			return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		getNormal: function ( target ) {

			return Triangle.getNormal( this.a, this.b, this.c, target );

		},

		getPlane: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getPlane() target is now required' );
				target = new Plane();

			}

			return target.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		getBarycoord: function ( point, target ) {

			return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

		},

		getUV: function ( point, uv1, uv2, uv3, target ) {

			return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		isFrontFacing: function ( direction ) {

			return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

		},

		intersectsBox: function ( box ) {

			return box.intersectsTriangle( this );

		},

		closestPointToPoint: function ( p, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			var a = this.a, b = this.b, c = this.c;
			var v, w;

			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			_vab.subVectors( b, a );
			_vac.subVectors( c, a );
			_vap.subVectors( p, a );
			var d1 = _vab.dot( _vap );
			var d2 = _vac.dot( _vap );
			if ( d1 <= 0 && d2 <= 0 ) {

				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy( a );

			}

			_vbp.subVectors( p, b );
			var d3 = _vab.dot( _vbp );
			var d4 = _vac.dot( _vbp );
			if ( d3 >= 0 && d4 <= d3 ) {

				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy( b );

			}

			var vc = d1 * d4 - d3 * d2;
			if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

				v = d1 / ( d1 - d3 );
				// edge region of AB; barycentric coords (1-v, v, 0)
				return target.copy( a ).addScaledVector( _vab, v );

			}

			_vcp.subVectors( p, c );
			var d5 = _vab.dot( _vcp );
			var d6 = _vac.dot( _vcp );
			if ( d6 >= 0 && d5 <= d6 ) {

				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy( c );

			}

			var vb = d5 * d2 - d1 * d6;
			if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

				w = d2 / ( d2 - d6 );
				// edge region of AC; barycentric coords (1-w, 0, w)
				return target.copy( a ).addScaledVector( _vac, w );

			}

			var va = d3 * d6 - d5 * d4;
			if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

				_vbc.subVectors( c, b );
				w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
				// edge region of BC; barycentric coords (0, 1-w, w)
				return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

			}

			// face region
			var denom = 1 / ( va + vb + vc );
			// u = va * denom
			v = vb * denom;
			w = vc * denom;

			return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

		},

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	var _hslA = { h: 0, s: 0, l: 0 };
	var _hslB = { h: 0, s: 0, l: 0 };

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	function hue2rgb( p, q, t ) {

		if ( t < 0 ) { t += 1; }
		if ( t > 1 ) { t -= 1; }
		if ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }
		if ( t < 1 / 2 ) { return q; }
		if ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }
		return p;

	}

	function SRGBToLinear( c ) {

		return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

	}

	function LinearToSRGB( c ) {

		return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

	}

	Object.assign( Color.prototype, {

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value && value.isColor ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function ( h, s, l ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			return this;

		},

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) { return; }

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				return this.setColorName( style );

			}

			return this;

		},

		setColorName: function ( style ) {

			// color keywords
			var hex = _colorKeywords[ style ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function ( gammaFactor ) {

			this.copyGammaToLinear( this, gammaFactor );

			return this;

		},

		convertLinearToGamma: function ( gammaFactor ) {

			this.copyLinearToGamma( this, gammaFactor );

			return this;

		},

		copySRGBToLinear: function ( color ) {

			this.r = SRGBToLinear( color.r );
			this.g = SRGBToLinear( color.g );
			this.b = SRGBToLinear( color.b );

			return this;

		},

		copyLinearToSRGB: function ( color ) {

			this.r = LinearToSRGB( color.r );
			this.g = LinearToSRGB( color.g );
			this.b = LinearToSRGB( color.b );

			return this;

		},

		convertSRGBToLinear: function () {

			this.copySRGBToLinear( this );

			return this;

		},

		convertLinearToSRGB: function () {

			this.copyLinearToSRGB( this );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( target ) {

			// h,s,l ranges are in 0.0 - 1.0

			if ( target === undefined ) {

				console.warn( 'THREE.Color: .getHSL() target is now required' );
				target = { h: 0, s: 0, l: 0 };

			}

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;

			return target;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			this.getHSL( _hslA );

			_hslA.h += h; _hslA.s += s; _hslA.l += l;

			this.setHSL( _hslA.h, _hslA.s, _hslA.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function ( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		lerpHSL: function ( color, alpha ) {

			this.getHSL( _hslA );
			color.getHSL( _hslB );

			var h = _Math.lerp( _hslA.h, _hslB.h, alpha );
			var s = _Math.lerp( _hslA.s, _hslB.s, alpha );
			var l = _Math.lerp( _hslA.l, _hslB.l, alpha );

			this.setHSL( h, s, l );

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	} );

	Color.NAMES = _colorKeywords;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = ( color && color.isColor ) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Object.assign( Face3.prototype, {

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var materialId = 0;

	function Material() {

		Object.defineProperty( this, 'id', { value: materialId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.flatShading = false;
		this.vertexTangents = false;
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.stencilWriteMask = 0xff;
		this.stencilFunc = AlwaysStencilFunc;
		this.stencilRef = 0;
		this.stencilFuncMask = 0xff;
		this.stencilFail = KeepStencilOp;
		this.stencilZFail = KeepStencilOp;
		this.stencilZPass = KeepStencilOp;
		this.stencilWrite = false;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.shadowSide = null;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.visible = true;

		this.toneMapped = true;

		this.userData = {};

		this.version = 0;

	}

	Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Material,

		isMaterial: true,

		onBeforeCompile: function () {},

		setValues: function ( values ) {

			if ( values === undefined ) { return; }

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				// for backward compatability if shading is set in the constructor
				if ( key === 'shading' ) {

					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( newValue === FlatShading ) ? true : false;
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue && currentValue.isColor ) {

					currentValue.set( newValue );

				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

					currentValue.copy( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = ( meta === undefined || typeof meta === 'string' );

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) { data.name = this.name; }

			if ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }

			if ( this.roughness !== undefined ) { data.roughness = this.roughness; }
			if ( this.metalness !== undefined ) { data.metalness = this.metalness; }

			if ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }
			if ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }
			if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }

			if ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }
			if ( this.shininess !== undefined ) { data.shininess = this.shininess; }
			if ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }
			if ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }

			if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

			}

			if ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }
			if ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }
			if ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }
			if ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }

			if ( this.aoMap && this.aoMap.isTexture ) {

				data.aoMap = this.aoMap.toJSON( meta ).uuid;
				data.aoMapIntensity = this.aoMapIntensity;

			}

			if ( this.bumpMap && this.bumpMap.isTexture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}

			if ( this.normalMap && this.normalMap.isTexture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();

			}

			if ( this.displacementMap && this.displacementMap.isTexture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}

			if ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }
			if ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }

			if ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }
			if ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }

			if ( this.envMap && this.envMap.isTexture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap
				data.refractionRatio = this.refractionRatio;

				if ( this.combine !== undefined ) { data.combine = this.combine; }
				if ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }

			}

			if ( this.gradientMap && this.gradientMap.isTexture ) {

				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

			}

			if ( this.size !== undefined ) { data.size = this.size; }
			if ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }

			if ( this.blending !== NormalBlending ) { data.blending = this.blending; }
			if ( this.flatShading === true ) { data.flatShading = this.flatShading; }
			if ( this.side !== FrontSide ) { data.side = this.side; }
			if ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }

			if ( this.opacity < 1 ) { data.opacity = this.opacity; }
			if ( this.transparent === true ) { data.transparent = this.transparent; }

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			data.stencilWrite = this.stencilWrite;
			data.stencilWriteMask = this.stencilWriteMask;
			data.stencilFunc = this.stencilFunc;
			data.stencilRef = this.stencilRef;
			data.stencilFuncMask = this.stencilFuncMask;
			data.stencilFail = this.stencilFail;
			data.stencilZFail = this.stencilZFail;
			data.stencilZPass = this.stencilZPass;

			// rotation (SpriteMaterial)
			if ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }

			if ( this.polygonOffset === true ) { data.polygonOffset = true; }
			if ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }
			if ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }

			if ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }
			if ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }
			if ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }
			if ( this.scale !== undefined ) { data.scale = this.scale; }

			if ( this.dithering === true ) { data.dithering = true; }

			if ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }
			if ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }

			if ( this.wireframe === true ) { data.wireframe = this.wireframe; }
			if ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }
			if ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }
			if ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }

			if ( this.morphTargets === true ) { data.morphTargets = true; }
			if ( this.morphNormals === true ) { data.morphNormals = true; }
			if ( this.skinning === true ) { data.skinning = true; }

			if ( this.visible === false ) { data.visible = false; }

			if ( this.toneMapped === false ) { data.toneMapped = false; }

			if ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) { data.textures = textures; }
				if ( images.length > 0 ) { data.images = images; }

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;

			this.blending = source.blending;
			this.side = source.side;
			this.flatShading = source.flatShading;
			this.vertexTangents = source.vertexTangents;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.stencilWriteMask = source.stencilWriteMask;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilFuncMask = source.stencilFuncMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.stencilWrite = source.stencilWrite;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }

			}

			this.clippingPlanes = dstPlanes;
			this.clipIntersection = source.clipIntersection;
			this.clipShadows = source.clipShadows;

			this.shadowSide = source.shadowSide;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.dithering = source.dithering;

			this.alphaTest = source.alphaTest;
			this.premultipliedAlpha = source.premultipliedAlpha;

			this.visible = source.visible;

			this.toneMapped = source.toneMapped;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	Object.defineProperty( Material.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	Object.assign( BufferAttribute.prototype, {

		isBufferAttribute: true,

		onUploadCallback: function () {},

		setUsage: function ( value ) {

			this.usage = value;

			return this;

		},

		copy: function ( source ) {

			this.name = source.name;
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.usage = source.usage;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		},

		clone: function () {

			return new this.constructor( this.array, this.itemSize ).copy( this );

		},

		toJSON: function () {

			return {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.prototype.slice.call( this.array ),
				normalized: this.normalized
			};

		}

	} );

	//

	function Int8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

	}

	Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


	function Uint8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

	}

	Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


	function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

	}

	Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


	function Int16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

	}

	Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


	function Uint16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

	}

	Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


	function Int32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

	}

	Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


	function Uint32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

	}

	Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


	function Float32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

	}

	Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


	function Float64BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

	}

	Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, {

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex = undefined;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = {
						name: morphTargets[ i ].name,
					 	data: []
					};

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = {
						name: morphNormals[ i ].name,
					 	data: []
					};

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			if ( vertices.length > 0 && faces.length === 0 ) {

				console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

			}

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function arrayMax( array ) {

		if ( array.length === 0 ) { return - Infinity; }

		var max = array[ 0 ];

		for ( var i = 1, l = array.length; i < l; ++ i ) {

			if ( array[ i ] > max ) { max = array[ i ]; }

		}

		return max;

	}

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

	var _m1$2 = new Matrix4();
	var _obj = new Object3D();
	var _offset = new Vector3();
	var _box$2 = new Box3();
	var _boxMorphTargets = new Box3();
	var _vector$4 = new Vector3();

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};
		this.morphTargetsRelative = false;

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

		this.userData = {};

	}

	BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: BufferGeometry,

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			if ( Array.isArray( index ) ) {

				this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

			} else {

				this.index = index;

			}

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		setAttribute: function ( name, attribute ) {

			this.attributes[ name ] = attribute;

			return this;

		},

		deleteAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToBufferAttribute( position );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToBufferAttribute( normal );
				normal.needsUpdate = true;

			}

			var tangent = this.attributes.tangent;

			if ( tangent !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				// Tangent is vec4, but the '.w' component is a sign value (+1/-1).
				normalMatrix.applyToBufferAttribute( tangent );
				tangent.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function ( angle ) {

			// rotate geometry around world x-axis

			_m1$2.makeRotationX( angle );

			this.applyMatrix( _m1$2 );

			return this;

		},

		rotateY: function ( angle ) {

			// rotate geometry around world y-axis

			_m1$2.makeRotationY( angle );

			this.applyMatrix( _m1$2 );

			return this;

		},

		rotateZ: function ( angle ) {

			// rotate geometry around world z-axis

			_m1$2.makeRotationZ( angle );

			this.applyMatrix( _m1$2 );

			return this;

		},

		translate: function ( x, y, z ) {

			// translate geometry

			_m1$2.makeTranslation( x, y, z );

			this.applyMatrix( _m1$2 );

			return this;

		},

		scale: function ( x, y, z ) {

			// scale geometry

			_m1$2.makeScale( x, y, z );

			this.applyMatrix( _m1$2 );

			return this;

		},

		lookAt: function ( vector ) {

			_obj.lookAt( vector );

			_obj.updateMatrix();

			this.applyMatrix( _obj.matrix );

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			this.boundingBox.getCenter( _offset ).negate();

			this.translate( _offset.x, _offset.y, _offset.z );

			return this;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object.isPoints || object.isLine ) {

				var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

				this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

					this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object.isMesh ) {

				if ( geometry && geometry.isGeometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		setFromPoints: function ( points ) {

			var position = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );

			}

			this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object.isMesh ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
					attribute.name = morphTarget.name;

					array.push( attribute.copyVector3sArray( morphTarget.data ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
				this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
				this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var position = this.attributes.position;
			var morphAttributesPosition = this.morphAttributes.position;

			if ( position !== undefined ) {

				this.boundingBox.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						var morphAttribute = morphAttributesPosition[ i ];
						_box$2.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$4.addVectors( this.boundingBox.min, _box$2.min );
							this.boundingBox.expandByPoint( _vector$4 );

							_vector$4.addVectors( this.boundingBox.max, _box$2.max );
							this.boundingBox.expandByPoint( _vector$4 );

						} else {

							this.boundingBox.expandByPoint( _box$2.min );
							this.boundingBox.expandByPoint( _box$2.max );

						}

					}

				}

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			var position = this.attributes.position;
			var morphAttributesPosition = this.morphAttributes.position;

			if ( position ) {

				// first, find the center of the bounding sphere

				var center = this.boundingSphere.center;

				_box$2.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						var morphAttribute = morphAttributesPosition[ i ];
						_boxMorphTargets.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );
							_box$2.expandByPoint( _vector$4 );

							_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );
							_box$2.expandByPoint( _vector$4 );

						} else {

							_box$2.expandByPoint( _boxMorphTargets.min );
							_box$2.expandByPoint( _boxMorphTargets.max );

						}

					}

				}

				_box$2.getCenter( center );

				// second, try to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = position.count; i < il; i ++ ) {

					_vector$4.fromBufferAttribute( position, i );

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

				}

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						var morphAttribute = morphAttributesPosition[ i ];
						var morphTargetsRelative = this.morphTargetsRelative;

						for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

							_vector$4.fromBufferAttribute( morphAttribute, j );

							if ( morphTargetsRelative ) {

								_offset.fromBufferAttribute( position, j );
								_vector$4.add( _offset );

							}

							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

						}

					}

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		},

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC;
				var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				var cb = new Vector3(), ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					for ( var i = 0, il = index.count; i < il; i += 3 ) {

						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( ! ( geometry && geometry.isBufferGeometry ) ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) {

				offset = 0;

				console.warn(
					'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
					+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
				);

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) { continue; }

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeOffset = attribute2.itemSize * offset;
				var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

				for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal;

			for ( var i = 0, il = normals.count; i < il; i ++ ) {

				_vector$4.x = normals.getX( i );
				_vector$4.y = normals.getY( i );
				_vector$4.z = normals.getZ( i );

				_vector$4.normalize();

				normals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );

			}

		},

		toNonIndexed: function () {

			function convertBufferAttribute( attribute, indices ) {

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				return new BufferAttribute( array2, itemSize );

			}

			//

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			// attributes

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var newAttribute = convertBufferAttribute( attribute, indices );

				geometry2.setAttribute( name, newAttribute );

			}

			// morph attributes

			var morphAttributes = this.morphAttributes;

			for ( name in morphAttributes ) {

				var morphArray = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {

					var attribute = morphAttribute[ i ];

					var newAttribute = convertBufferAttribute( attribute, indices );

					morphArray.push( newAttribute );

				}

				geometry2.morphAttributes[ name ] = morphArray;

			}

			geometry2.morphTargetsRelative = this.morphTargetsRelative;

			// groups

			var groups = this.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				geometry2.addGroup( group.start, group.count, group.materialIndex );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) { data.name = this.name; }
			if ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call( index.array )
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var attributeData = attribute.toJSON();

				if ( attribute.name !== '' ) { attributeData.name = attribute.name; }

				data.data.attributes[ key ] = attributeData;

			}

			var morphAttributes = {};
			var hasMorphAttributes = false;

			for ( var key in this.morphAttributes ) {

				var attributeArray = this.morphAttributes[ key ];

				var array = [];

				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

					var attribute = attributeArray[ i ];

					var attributeData = attribute.toJSON();

					if ( attribute.name !== '' ) { attributeData.name = attribute.name; }

					array.push( attributeData );

				}

				if ( array.length > 0 ) {

					morphAttributes[ key ] = array;

					hasMorphAttributes = true;

				}

			}

			if ( hasMorphAttributes ) {

				data.data.morphAttributes = morphAttributes;
				data.data.morphTargetsRelative = this.morphTargetsRelative;

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var name, i, l;

			// reset

			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// index

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			// attributes

			var attributes = source.attributes;

			for ( name in attributes ) {

				var attribute = attributes[ name ];
				this.setAttribute( name, attribute.clone() );

			}

			// morph attributes

			var morphAttributes = source.morphAttributes;

			for ( name in morphAttributes ) {

				var array = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

					array.push( morphAttribute[ i ].clone() );

				}

				this.morphAttributes[ name ] = array;

			}

			this.morphTargetsRelative = source.morphTargetsRelative;

			// groups

			var groups = source.groups;

			for ( i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// draw range

			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;

			// user data

			this.userData = source.userData;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	var _inverseMatrix = new Matrix4();
	var _ray = new Ray();
	var _sphere = new Sphere();

	var _vA = new Vector3();
	var _vB = new Vector3();
	var _vC = new Vector3();

	var _tempA = new Vector3();
	var _tempB = new Vector3();
	var _tempC = new Vector3();

	var _morphA = new Vector3();
	var _morphB = new Vector3();
	var _morphC = new Vector3();

	var _uvA = new Vector2();
	var _uvB = new Vector2();
	var _uvC = new Vector2();

	var _intersectionPoint = new Vector3();
	var _intersectionPointWorld = new Vector3();

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			if ( source.morphTargetInfluences !== undefined ) {

				this.morphTargetInfluences = source.morphTargetInfluences.slice();

			}

			if ( source.morphTargetDictionary !== undefined ) {

				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

			}

			return this;

		},

		updateMorphTargets: function () {

			var geometry = this.geometry;
			var m, ml, name;

			if ( geometry.isBufferGeometry ) {

				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );

				if ( keys.length > 0 ) {

					var morphAttribute = morphAttributes[ keys[ 0 ] ];

					if ( morphAttribute !== undefined ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

							name = morphAttribute[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			} else {

				var morphTargets = geometry.morphTargets;

				if ( morphTargets !== undefined && morphTargets.length > 0 ) {

					console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

				}

			}

		},

		raycast: function ( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) { return; }

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere.copy( geometry.boundingSphere );
			_sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }

			//

			_inverseMatrix.getInverse( matrixWorld );
			_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }

			}

			// check unsupported draw modes

			if ( this.drawMode !== TrianglesDrawMode ) {

				console.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );
				return;

			}

			var intersection;

			if ( geometry.isBufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var position = geometry.attributes.position;
				var morphPosition = geometry.morphAttributes.position;
				var morphTargetsRelative = geometry.morphTargetsRelative;
				var uv = geometry.attributes.uv;
				var uv2 = geometry.attributes.uv2;
				var groups = geometry.groups;
				var drawRange = geometry.drawRange;
				var i, j, il, jl;
				var group, groupMaterial;
				var start, end;

				if ( index !== null ) {

					// indexed buffer geometry

					if ( Array.isArray( material ) ) {

						for ( i = 0, il = groups.length; i < il; i ++ ) {

							group = groups[ i ];
							groupMaterial = material[ group.materialIndex ];

							start = Math.max( group.start, drawRange.start );
							end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

							for ( j = start, jl = end; j < jl; j += 3 ) {

								a = index.getX( j );
								b = index.getX( j + 1 );
								c = index.getX( j + 2 );

								intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
									intersection.face.materialIndex = group.materialIndex;
									intersects.push( intersection );

								}

							}

						}

					} else {

						start = Math.max( 0, drawRange.start );
						end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

						for ( i = start, il = end; i < il; i += 3 ) {

							a = index.getX( i );
							b = index.getX( i + 1 );
							c = index.getX( i + 2 );

							intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( position !== undefined ) {

					// non-indexed buffer geometry

					if ( Array.isArray( material ) ) {

						for ( i = 0, il = groups.length; i < il; i ++ ) {

							group = groups[ i ];
							groupMaterial = material[ group.materialIndex ];

							start = Math.max( group.start, drawRange.start );
							end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

							for ( j = start, jl = end; j < jl; j += 3 ) {

								a = j;
								b = j + 1;
								c = j + 2;

								intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
									intersection.face.materialIndex = group.materialIndex;
									intersects.push( intersection );

								}

							}

						}

					} else {

						start = Math.max( 0, drawRange.start );
						end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

						for ( i = start, il = end; i < il; i += 3 ) {

							a = i;
							b = i + 1;
							c = i + 2;

							intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
								intersects.push( intersection );

							}

						}

					}

				}

			} else if ( geometry.isGeometry ) {

				var fvA, fvB, fvC;
				var isMultiMaterial = Array.isArray( material );

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var uvs;

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) { continue; }

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					intersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );

					if ( intersection ) {

						if ( uvs && uvs[ f ] ) {

							var uvs_f = uvs[ f ];
							_uvA.copy( uvs_f[ 0 ] );
							_uvB.copy( uvs_f[ 1 ] );
							_uvC.copy( uvs_f[ 2 ] );

							intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

		var intersect;

		if ( material.side === BackSide ) {

			intersect = ray.intersectTriangle( pC, pB, pA, true, point );

		} else {

			intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

		}

		if ( intersect === null ) { return null; }

		_intersectionPointWorld.copy( point );
		_intersectionPointWorld.applyMatrix4( object.matrixWorld );

		var distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

		if ( distance < raycaster.near || distance > raycaster.far ) { return null; }

		return {
			distance: distance,
			point: _intersectionPointWorld.clone(),
			object: object
		};

	}

	function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

		_vA.fromBufferAttribute( position, a );
		_vB.fromBufferAttribute( position, b );
		_vC.fromBufferAttribute( position, c );

		var morphInfluences = object.morphTargetInfluences;

		if ( material.morphTargets && morphPosition && morphInfluences ) {

			_morphA.set( 0, 0, 0 );
			_morphB.set( 0, 0, 0 );
			_morphC.set( 0, 0, 0 );

			for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {

				var influence = morphInfluences[ i ];
				var morphAttribute = morphPosition[ i ];

				if ( influence === 0 ) { continue; }

				_tempA.fromBufferAttribute( morphAttribute, a );
				_tempB.fromBufferAttribute( morphAttribute, b );
				_tempC.fromBufferAttribute( morphAttribute, c );

				if ( morphTargetsRelative ) {

					_morphA.addScaledVector( _tempA, influence );
					_morphB.addScaledVector( _tempB, influence );
					_morphC.addScaledVector( _tempC, influence );

				} else {

					_morphA.addScaledVector( _tempA.sub( _vA ), influence );
					_morphB.addScaledVector( _tempB.sub( _vB ), influence );
					_morphC.addScaledVector( _tempC.sub( _vC ), influence );

				}

			}

			_vA.add( _morphA );
			_vB.add( _morphB );
			_vC.add( _morphC );

		}

		var intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );

		if ( intersection ) {

			if ( uv ) {

				_uvA.fromBufferAttribute( uv, a );
				_uvB.fromBufferAttribute( uv, b );
				_uvC.fromBufferAttribute( uv, c );

				intersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

			}

			if ( uv2 ) {

				_uvA.fromBufferAttribute( uv2, a );
				_uvB.fromBufferAttribute( uv2, b );
				_uvC.fromBufferAttribute( uv2, c );

				intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

			}

			var face = new Face3( a, b, c );
			Triangle.getNormal( _vA, _vB, _vC, face.normal );

			intersection.face = face;

		}

		return intersection;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	var _geometryId = 0; // Geometry uses even numbers as Id
	var _m1$3 = new Matrix4();
	var _obj$1 = new Object3D();
	var _offset$1 = new Vector3();

	function Geometry() {

		Object.defineProperty( this, 'id', { value: _geometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Geometry,

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function ( angle ) {

			// rotate geometry around world x-axis

			_m1$3.makeRotationX( angle );

			this.applyMatrix( _m1$3 );

			return this;

		},

		rotateY: function ( angle ) {

			// rotate geometry around world y-axis

			_m1$3.makeRotationY( angle );

			this.applyMatrix( _m1$3 );

			return this;

		},

		rotateZ: function ( angle ) {

			// rotate geometry around world z-axis

			_m1$3.makeRotationZ( angle );

			this.applyMatrix( _m1$3 );

			return this;

		},

		translate: function ( x, y, z ) {

			// translate geometry

			_m1$3.makeTranslation( x, y, z );

			this.applyMatrix( _m1$3 );

			return this;

		},

		scale: function ( x, y, z ) {

			// scale geometry

			_m1$3.makeScale( x, y, z );

			this.applyMatrix( _m1$3 );

			return this;

		},

		lookAt: function ( vector ) {

			_obj$1.lookAt( vector );

			_obj$1.updateMatrix();

			this.applyMatrix( _obj$1.matrix );

			return this;

		},

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			if ( attributes.position === undefined ) {

				console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
				return this;

			}

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }

			for ( var i = 0; i < positions.length; i += 3 ) {

				scope.vertices.push( new Vector3().fromArray( positions, i ) );

				if ( colors !== undefined ) {

					scope.colors.push( new Color().fromArray( colors, i ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexColors = ( colors === undefined ) ? [] : [
					scope.colors[ a ].clone(),
					scope.colors[ b ].clone(),
					scope.colors[ c ].clone() ];

				var vertexNormals = ( normals === undefined ) ? [] : [
					new Vector3().fromArray( normals, a * 3 ),
					new Vector3().fromArray( normals, b * 3 ),
					new Vector3().fromArray( normals, c * 3 )
				];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [
						new Vector2().fromArray( uvs, a * 2 ),
						new Vector2().fromArray( uvs, b * 2 ),
						new Vector2().fromArray( uvs, c * 2 )
					] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [
						new Vector2().fromArray( uvs2, a * 2 ),
						new Vector2().fromArray( uvs2, b * 2 ),
						new Vector2().fromArray( uvs2, c * 2 )
					] );

				}

			}

			var groups = geometry.groups;

			if ( groups.length > 0 ) {

				for ( var i = 0; i < groups.length; i ++ ) {

					var group = groups[ i ];

					var start = group.start;
					var count = group.count;

					for ( var j = start, jl = start + count; j < jl; j += 3 ) {

						if ( indices !== undefined ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

						} else {

							addFace( j, j + 1, j + 2, group.materialIndex );

						}

					}

				}

			} else {

				if ( indices !== undefined ) {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				} else {

					for ( var i = 0; i < positions.length / 3; i += 3 ) {

						addFace( i, i + 1, i + 2 );

					}

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			this.boundingBox.getCenter( _offset$1 ).negate();

			this.translate( _offset$1.x, _offset$1.y, _offset$1.z );

			return this;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) { areaWeighted = true; }

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( ! ( geometry && geometry.isGeometry ) ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				colors1 = this.colors,
				colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs2 = geometry.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }

				for ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {

					var uvs2 = faceVertexUvs2[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {

						uvsCopy.push( uvs2[ k ].clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

		},

		mergeMesh: function ( mesh ) {

			if ( ! ( mesh && mesh.isMesh ) ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			if ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		setFromPoints: function ( points ) {

			this.vertices = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return this;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) { newUvs1 = []; }
			if ( uvs2 && uvs2.length === length ) { newUvs2 = []; }

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }
				if ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }

			}

			if ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }
			if ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) { data.name = this.name; }

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) { data.data.colors = colors; }
			if ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			var i, il, j, jl, k, kl;

			// reset

			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
			this.morphTargets = [];
			this.morphNormals = [];
			this.skinWeights = [];
			this.skinIndices = [];
			this.lineDistances = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// vertices

			var vertices = source.vertices;

			for ( i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			// colors

			var colors = source.colors;

			for ( i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			// faces

			var faces = source.faces;

			for ( i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			// face vertex uvs

			for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			// morph targets

			var morphTargets = source.morphTargets;

			for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = {};
				morphTarget.name = morphTargets[ i ].name;

				// vertices

				if ( morphTargets[ i ].vertices !== undefined ) {

					morphTarget.vertices = [];

					for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

						morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

					}

				}

				// normals

				if ( morphTargets[ i ].normals !== undefined ) {

					morphTarget.normals = [];

					for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

						morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

					}

				}

				this.morphTargets.push( morphTarget );

			}

			// morph normals

			var morphNormals = source.morphNormals;

			for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

				var morphNormal = {};

				// vertex normals

				if ( morphNormals[ i ].vertexNormals !== undefined ) {

					morphNormal.vertexNormals = [];

					for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

						var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
						var destVertexNormal = {};

						destVertexNormal.a = srcVertexNormal.a.clone();
						destVertexNormal.b = srcVertexNormal.b.clone();
						destVertexNormal.c = srcVertexNormal.c.clone();

						morphNormal.vertexNormals.push( destVertexNormal );

					}

				}

				// face normals

				if ( morphNormals[ i ].faceNormals !== undefined ) {

					morphNormal.faceNormals = [];

					for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

						morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

					}

				}

				this.morphNormals.push( morphNormal );

			}

			// skin weights

			var skinWeights = source.skinWeights;

			for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

				this.skinWeights.push( skinWeights[ i ].clone() );

			}

			// skin indices

			var skinIndices = source.skinIndices;

			for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

				this.skinIndices.push( skinIndices[ i ].clone() );

			}

			// line distances

			var lineDistances = source.lineDistances;

			for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

				this.lineDistances.push( lineDistances[ i ] );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// update flags

			this.elementsNeedUpdate = source.elementsNeedUpdate;
			this.verticesNeedUpdate = source.verticesNeedUpdate;
			this.uvsNeedUpdate = source.uvsNeedUpdate;
			this.normalsNeedUpdate = source.normalsNeedUpdate;
			this.colorsNeedUpdate = source.colorsNeedUpdate;
			this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
			this.groupsNeedUpdate = source.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// BoxGeometry

	var BoxGeometry = /*@__PURE__*/(function (Geometry) {
		function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			Geometry.call(this);

			this.type = 'BoxGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
			this.mergeVertices();

		}

		if ( Geometry ) BoxGeometry.__proto__ = Geometry;
		BoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );
		BoxGeometry.prototype.constructor = BoxGeometry;

		return BoxGeometry;
	}(Geometry));

	// BoxBufferGeometry

	var BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {
		function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			BufferGeometry.call(this);

			this.type = 'BoxBufferGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			var scope = this;

			width = width || 1;
			height = height || 1;
			depth = depth || 1;

			// segments

			widthSegments = Math.floor( widthSegments ) || 1;
			heightSegments = Math.floor( heightSegments ) || 1;
			depthSegments = Math.floor( depthSegments ) || 1;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var numberOfVertices = 0;
			var groupStart = 0;

			// build each side of the box geometry

			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
			buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
			buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

			// build geometry

			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

				var segmentWidth = width / gridX;
				var segmentHeight = height / gridY;

				var widthHalf = width / 2;
				var heightHalf = height / 2;
				var depthHalf = depth / 2;

				var gridX1 = gridX + 1;
				var gridY1 = gridY + 1;

				var vertexCounter = 0;
				var groupCount = 0;

				var ix, iy;

				var vector = new Vector3();

				// generate vertices, normals and uvs

				for ( iy = 0; iy < gridY1; iy ++ ) {

					var y = iy * segmentHeight - heightHalf;

					for ( ix = 0; ix < gridX1; ix ++ ) {

						var x = ix * segmentWidth - widthHalf;

						// set values to correct vector component

						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;

						// now apply vector to vertex buffer

						vertices.push( vector.x, vector.y, vector.z );

						// set values to correct vector component

						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;

						// now apply vector to normal buffer

						normals.push( vector.x, vector.y, vector.z );

						// uvs

						uvs.push( ix / gridX );
						uvs.push( 1 - ( iy / gridY ) );

						// counters

						vertexCounter += 1;

					}

				}

				// indices

				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment

				for ( iy = 0; iy < gridY; iy ++ ) {

					for ( ix = 0; ix < gridX; ix ++ ) {

						var a = numberOfVertices + ix + gridX1 * iy;
						var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

						// increase counter

						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, materialIndex );

				// calculate new start value for groups

				groupStart += groupCount;

				// update total number of vertices

				numberOfVertices += vertexCounter;

			}

		}

		if ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;
		BoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );
		BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

		return BoxBufferGeometry;
	}(BufferGeometry));

	/**
	 * Uniform Utilities
	 */

	function cloneUniforms( src ) {

		var dst = {};

		for ( var u in src ) {

			dst[ u ] = {};

			for ( var p in src[ u ] ) {

				var property = src[ u ][ p ];

				if ( property && ( property.isColor ||
					property.isMatrix3 || property.isMatrix4 ||
					property.isVector2 || property.isVector3 || property.isVector4 ||
					property.isTexture ) ) {

					dst[ u ][ p ] = property.clone();

				} else if ( Array.isArray( property ) ) {

					dst[ u ][ p ] = property.slice();

				} else {

					dst[ u ][ p ] = property;

				}

			}

		}

		return dst;

	}

	function mergeUniforms( uniforms ) {

		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = cloneUniforms( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	}

	// Legacy

	var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = default_vertex;
		this.fragmentShader = default_fragment;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = cloneUniforms( source.uniforms );

		this.defines = Object.assign( {}, source.defines );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = {};

		for ( var name in this.uniforms ) {

			var uniform = this.uniforms[ name ];
			var value = uniform.value;

			if ( value && value.isTexture ) {

				data.uniforms[ name ] = {
					type: 't',
					value: value.toJSON( meta ).uuid
				};

			} else if ( value && value.isColor ) {

				data.uniforms[ name ] = {
					type: 'c',
					value: value.getHex()
				};

			} else if ( value && value.isVector2 ) {

				data.uniforms[ name ] = {
					type: 'v2',
					value: value.toArray()
				};

			} else if ( value && value.isVector3 ) {

				data.uniforms[ name ] = {
					type: 'v3',
					value: value.toArray()
				};

			} else if ( value && value.isVector4 ) {

				data.uniforms[ name ] = {
					type: 'v4',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix3 ) {

				data.uniforms[ name ] = {
					type: 'm3',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix4 ) {

				data.uniforms[ name ] = {
					type: 'm4',
					value: value.toArray()
				};

			} else {

				data.uniforms[ name ] = {
					value: value
				};

				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

			}

		}

		if ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }

		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		var extensions = {};

		for ( var key in this.extensions ) {

			if ( this.extensions[ key ] === true ) { extensions[ key ] = true; }

		}

		if ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }

		return data;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();

		this.projectionMatrix = new Matrix4();
		this.projectionMatrixInverse = new Matrix4();

	}

	Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Camera,

		isCamera: true,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );

			this.projectionMatrix.copy( source.projectionMatrix );
			this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

			return this;

		},

		getWorldDirection: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			var e = this.matrixWorld.elements;

			return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

		},

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			this.matrixWorldInverse.getInverse( this.matrixWorld );

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( this.view !== null && this.view.enabled ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }

			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

			this.projectionMatrixInverse.getInverse( this.projectionMatrix );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	var fov = 90, aspect = 1;

	function CubeCamera( near, far, cubeResolution, options ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
		this.renderTarget.texture.name = "CubeCamera";

		this.update = function ( renderer, scene ) {

			if ( this.parent === null ) { this.updateMatrixWorld(); }

			var currentRenderTarget = renderer.getRenderTarget();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderer.setRenderTarget( renderTarget, 0 );
			renderer.render( scene, cameraPX );

			renderer.setRenderTarget( renderTarget, 1 );
			renderer.render( scene, cameraNX );

			renderer.setRenderTarget( renderTarget, 2 );
			renderer.render( scene, cameraPY );

			renderer.setRenderTarget( renderTarget, 3 );
			renderer.render( scene, cameraNY );

			renderer.setRenderTarget( renderTarget, 4 );
			renderer.render( scene, cameraPZ );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderer.setRenderTarget( renderTarget, 5 );
			renderer.render( scene, cameraNZ );

			renderer.setRenderTarget( currentRenderTarget );

		};

		this.clear = function ( renderer, color, depth, stencil ) {

			var currentRenderTarget = renderer.getRenderTarget();

			var renderTarget = this.renderTarget;

			for ( var i = 0; i < 6; i ++ ) {

				renderer.setRenderTarget( renderTarget, i );

				renderer.clear( color, depth, stencil );

			}

			renderer.setRenderTarget( currentRenderTarget );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author alteredq / http://alteredqualia.com
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	WebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {

		this.texture.type = texture.type;
		this.texture.format = texture.format;
		this.texture.encoding = texture.encoding;

		var scene = new Scene();

		var shader = {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: [

				"varying vec3 vWorldDirection;",

				"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",

				"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",

				"}",

				"void main() {",

				"	vWorldDirection = transformDirection( position, modelMatrix );",

				"	#include <begin_vertex>",
				"	#include <project_vertex>",

				"}"

			].join( '\n' ),

			fragmentShader: [

				"uniform sampler2D tEquirect;",

				"varying vec3 vWorldDirection;",

				"#define RECIPROCAL_PI 0.31830988618",
				"#define RECIPROCAL_PI2 0.15915494",

				"void main() {",

				"	vec3 direction = normalize( vWorldDirection );",

				"	vec2 sampleUV;",

				"	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",

				"	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",

				"	gl_FragColor = texture2D( tEquirect, sampleUV );",

				"}"

			].join( '\n' ),
		};

		var material = new ShaderMaterial( {

			type: 'CubemapFromEquirect',

			uniforms: cloneUniforms( shader.uniforms ),
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			side: BackSide,
			blending: NoBlending

		} );

		material.uniforms.tEquirect.value = texture;

		var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );

		scene.add( mesh );

		var camera = new CubeCamera( 1, 10, 1 );

		camera.renderTarget = this;
		camera.renderTarget.texture.name = 'CubeCameraTexture';

		camera.update( renderer, scene );

		mesh.geometry.dispose();
		mesh.material.dispose();

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data || null, width: width || 1, height: height || 1 };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

		this.needsUpdate = true;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	var _sphere$1 = new Sphere();
	var _vector$5 = new Vector3();

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Object.assign( Frustum.prototype, {

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function ( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( _sphere$1 );

		},

		intersectsSprite: function ( sprite ) {

			_sphere$1.center.set( 0, 0, 0 );
			_sphere$1.radius = 0.7071067811865476;
			_sphere$1.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( _sphere$1 );

		},

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function ( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				var plane = planes[ i ];

				// corner at max distance

				_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				if ( plane.distanceToPoint( _vector$5 ) < 0 ) {

					return false;

				}

			}

			return true;

		},

		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	} );

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "vec3 transformed = vec3( position );";

	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

	var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";

	var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

	var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

	var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

	var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

	var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";

	var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";

	var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

	var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

	var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";

	var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

	var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";

	var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

	var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";

	var clearcoat_normalmap_pars_fragment = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpack2HalfToRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

	var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

	var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

	var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

	var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";

	var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

	var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

	var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";

	var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

	var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

	var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

	var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

	var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";

	var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_common_pars_fragment: envmap_common_pars_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars_begin: lights_pars_begin,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normalmap_pars_fragment: normalmap_pars_fragment,
		clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
		clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
		clearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		background_frag: background_frag,
		background_vert: background_vert,
		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshmatcap_frag: meshmatcap_frag,
		meshmatcap_vert: meshmatcap_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert,
		sprite_frag: sprite_frag,
		sprite_vert: sprite_vert
	};

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			uvTransform: { value: new Matrix3() },

			alphaMap: { value: null },

		},

		specularmap: {

			specularMap: { value: null },

		},

		envmap: {

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 },
			maxMipLevel: { value: 0 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		gradientmap: {

			gradientMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			lightProbe: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },

			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			alphaMap: { value: null },
			uvTransform: { value: new Matrix3() }

		},

		sprite: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			center: { value: new Vector2( 0.5, 0.5 ) },
			rotation: { value: 0.0 },
			map: { value: null },
			alphaMap: { value: null },
			uvTransform: { value: new Matrix3() }

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					specular: { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0.5 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		matcap: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				{
					matcap: { value: null }
				}
			] ),

			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag

		},

		points: {

			uniforms: mergeUniforms( [
				UniformsLib.points,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		sprite: {

			uniforms: mergeUniforms( [
				UniformsLib.sprite,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag

		},

		background: {

			uniforms: {
				uvTransform: { value: new Matrix3() },
				t2D: { value: null },
			},

			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag

		},
		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		equirect: {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		},

		shadow: {

			uniforms: mergeUniforms( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: new Color( 0x00000 ) },
					opacity: { value: 1.0 }
				} ] ),

			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag

		}

	};

	ShaderLib.physical = {

		uniforms: mergeUniforms( [
			ShaderLib.standard.uniforms,
			{
				transparency: { value: 0 },
				clearcoat: { value: 0 },
				clearcoatRoughness: { value: 0 },
				sheen: { value: new Color( 0x000000 ) },
				clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
				clearcoatNormalMap: { value: null },
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAnimation() {

		var context = null;
		var isAnimating = false;
		var animationLoop = null;

		function onAnimationFrame( time, frame ) {

			if ( isAnimating === false ) { return; }

			animationLoop( time, frame );

			context.requestAnimationFrame( onAnimationFrame );

		}

		return {

			start: function () {

				if ( isAnimating === true ) { return; }
				if ( animationLoop === null ) { return; }

				context.requestAnimationFrame( onAnimationFrame );

				isAnimating = true;

			},

			stop: function () {

				isAnimating = false;

			},

			setAnimationLoop: function ( callback ) {

				animationLoop = callback;

			},

			setContext: function ( value ) {

				context = value;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAttributes( gl ) {

		var buffers = new WeakMap();

		function createBuffer( attribute, bufferType ) {

			var array = attribute.array;
			var usage = attribute.usage;

			var buffer = gl.createBuffer();

			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );

			attribute.onUploadCallback();

			var type = 5126;

			if ( array instanceof Float32Array ) {

				type = 5126;

			} else if ( array instanceof Float64Array ) {

				console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

			} else if ( array instanceof Uint16Array ) {

				type = 5123;

			} else if ( array instanceof Int16Array ) {

				type = 5122;

			} else if ( array instanceof Uint32Array ) {

				type = 5125;

			} else if ( array instanceof Int32Array ) {

				type = 5124;

			} else if ( array instanceof Int8Array ) {

				type = 5120;

			} else if ( array instanceof Uint8Array ) {

				type = 5121;

			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};

		}

		function updateBuffer( buffer, attribute, bufferType ) {

			var array = attribute.array;
			var updateRange = attribute.updateRange;

			gl.bindBuffer( bufferType, buffer );

			if ( updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, array );

			} else {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

				updateRange.count = - 1; // reset range

			}

		}

		//

		function get( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

			return buffers.get( attribute );

		}

		function remove( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

			var data = buffers.get( attribute );

			if ( data ) {

				gl.deleteBuffer( data.buffer );

				buffers.delete( attribute );

			}

		}

		function update( attribute, bufferType ) {

			if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

			var data = buffers.get( attribute );

			if ( data === undefined ) {

				buffers.set( attribute, createBuffer( attribute, bufferType ) );

			} else if ( data.version < attribute.version ) {

				updateBuffer( data.buffer, attribute, bufferType );

				data.version = attribute.version;

			}

		}

		return {

			get: get,
			remove: remove,
			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PlaneGeometry

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
		this.mergeVertices();

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	// PlaneBufferGeometry

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		width = width || 1;
		height = height || 1;

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var ix, iy;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices.push( x, - y, 0 );

				normals.push( 0, 0, 1 );

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

			}

		}

		// indices

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

		var clearColor = new Color( 0x000000 );
		var clearAlpha = 0;

		var planeMesh;
		var boxMesh;
		// Store the current background texture and its `version`
		// so we can recompile the material accordingly.
		var currentBackground = null;
		var currentBackgroundVersion = 0;

		function render( renderList, scene, camera, forceClear ) {

			var background = scene.background;

			// Ignore background in AR
			// TODO: Reconsider this.

			var vr = renderer.vr;
			var session = vr.getSession && vr.getSession();

			if ( session && session.environmentBlendMode === 'additive' ) {

				background = null;

			}

			if ( background === null ) {

				setClear( clearColor, clearAlpha );
				currentBackground = null;
				currentBackgroundVersion = 0;

			} else if ( background && background.isColor ) {

				setClear( background, 1 );
				forceClear = true;
				currentBackground = null;
				currentBackgroundVersion = 0;

			}

			if ( renderer.autoClear || forceClear ) {

				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

			}

			if ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {

				if ( boxMesh === undefined ) {

					boxMesh = new Mesh(
						new BoxBufferGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							type: 'BackgroundCubeMaterial',
							uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
							vertexShader: ShaderLib.cube.vertexShader,
							fragmentShader: ShaderLib.cube.fragmentShader,
							side: BackSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					boxMesh.geometry.deleteAttribute( 'normal' );
					boxMesh.geometry.deleteAttribute( 'uv' );

					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

						this.matrixWorld.copyPosition( camera.matrixWorld );

					};

					// enable code injection for non-built-in material
					Object.defineProperty( boxMesh.material, 'map', {

						get: function () {

							return this.uniforms.tCube.value;

						}

					} );

					objects.update( boxMesh );

				}

				var texture = background.isWebGLRenderTargetCube ? background.texture : background;
				boxMesh.material.uniforms.tCube.value = texture;
				boxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;

				if ( currentBackground !== background ||
				     currentBackgroundVersion !== texture.version ) {

					boxMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = texture.version;

				}

				// push to the pre-sorted opaque render list
				renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

			} else if ( background && background.isTexture ) {

				if ( planeMesh === undefined ) {

					planeMesh = new Mesh(
						new PlaneBufferGeometry( 2, 2 ),
						new ShaderMaterial( {
							type: 'BackgroundMaterial',
							uniforms: cloneUniforms( ShaderLib.background.uniforms ),
							vertexShader: ShaderLib.background.vertexShader,
							fragmentShader: ShaderLib.background.fragmentShader,
							side: FrontSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					planeMesh.geometry.deleteAttribute( 'normal' );

					// enable code injection for non-built-in material
					Object.defineProperty( planeMesh.material, 'map', {

						get: function () {

							return this.uniforms.t2D.value;

						}

					} );

					objects.update( planeMesh );

				}

				planeMesh.material.uniforms.t2D.value = background;

				if ( background.matrixAutoUpdate === true ) {

					background.updateMatrix();

				}

				planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

				if ( currentBackground !== background ||
					   currentBackgroundVersion !== background.version ) {

					planeMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = background.version;

				}


				// push to the pre-sorted opaque render list
				renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

			}

		}

		function setClear( color, alpha ) {

			state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

		}

		return {

			getClearColor: function () {

				return clearColor;

			},
			setClearColor: function ( color, alpha ) {

				clearColor.set( color );
				clearAlpha = alpha !== undefined ? alpha : 1;
				setClear( clearColor, clearAlpha );

			},
			getClearAlpha: function () {

				return clearAlpha;

			},
			setClearAlpha: function ( alpha ) {

				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			render: render

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			info.update( count, mode );

		}

		function renderInstances( geometry, start, count, primcount ) {

			if ( primcount === 0 ) { return; }

			var extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawArraysInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawArraysInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, start, count, primcount );

			info.update( count, mode, primcount );

		}

		//

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) { return maxAnisotropy; }

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
					gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
					gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		/* eslint-disable no-undef */
		var isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
			( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
		/* eslint-enable no-undef */

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

		var maxTextures = gl.getParameter( 34930 );
		var maxVertexTextures = gl.getParameter( 35660 );
		var maxTextureSize = gl.getParameter( 3379 );
		var maxCubemapSize = gl.getParameter( 34076 );

		var maxAttributes = gl.getParameter( 34921 );
		var maxVertexUniforms = gl.getParameter( 36347 );
		var maxVaryings = gl.getParameter( 36348 );
		var maxFragmentUniforms = gl.getParameter( 36349 );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

		return {

			isWebGL2: isWebGL2,

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,

			maxSamples: maxSamples

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function ( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function () {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function () {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

				// there's no local clipping

				if ( renderingShadows ) {

					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();

				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;

			return dstArray;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, attributes, info ) {

		var geometries = new WeakMap();
		var wireframeAttributes = new WeakMap();

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries.get( geometry );

			if ( buffergeometry.index !== null ) {

				attributes.remove( buffergeometry.index );

			}

			for ( var name in buffergeometry.attributes ) {

				attributes.remove( buffergeometry.attributes[ name ] );

			}

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			geometries.delete( geometry );

			var attribute = wireframeAttributes.get( buffergeometry );

			if ( attribute ) {

				attributes.remove( attribute );
				wireframeAttributes.delete( buffergeometry );

			}

			//

			info.memory.geometries --;

		}

		function get( object, geometry ) {

			var buffergeometry = geometries.get( geometry );

			if ( buffergeometry ) { return buffergeometry; }

			geometry.addEventListener( 'dispose', onGeometryDispose );

			if ( geometry.isBufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry.isGeometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries.set( geometry, buffergeometry );

			info.memory.geometries ++;

			return buffergeometry;

		}

		function update( geometry ) {

			var index = geometry.index;
			var geometryAttributes = geometry.attributes;

			if ( index !== null ) {

				attributes.update( index, 34963 );

			}

			for ( var name in geometryAttributes ) {

				attributes.update( geometryAttributes[ name ], 34962 );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					attributes.update( array[ i ], 34962 );

				}

			}

		}

		function updateWireframeAttribute( geometry ) {

			var indices = [];

			var geometryIndex = geometry.index;
			var geometryPosition = geometry.attributes.position;
			var version = 0;

			if ( geometryIndex !== null ) {

				var array = geometryIndex.array;
				version = geometryIndex.version;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = geometryPosition.array;
				version = geometryPosition.version;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			var attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
			attribute.version = version;

			attributes.update( attribute, 34963 );

			//

			var previousAttribute = wireframeAttributes.get( geometry );

			if ( previousAttribute ) { attributes.remove( previousAttribute ); }

			//

			wireframeAttributes.set( geometry, attribute );

		}

		function getWireframeAttribute( geometry ) {

			var currentAttribute = wireframeAttributes.get( geometry );

			if ( currentAttribute ) {

				var geometryIndex = geometry.index;

				if ( geometryIndex !== null ) {

					// if the attribute is obsolete, create a new one

					if ( currentAttribute.version < geometryIndex.version ) {

						updateWireframeAttribute( geometry );

					}

				}

			} else {

				updateWireframeAttribute( geometry );

			}

			return wireframeAttributes.get( geometry );

		}

		return {

			get: get,
			update: update,

			getWireframeAttribute: getWireframeAttribute

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, bytesPerElement;

		function setIndex( value ) {

			type = value.type;
			bytesPerElement = value.bytesPerElement;

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * bytesPerElement );

			info.update( count, mode );

		}

		function renderInstances( geometry, start, count, primcount ) {

			if ( primcount === 0 ) { return; }

			var extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawElementsInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawElementsInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

			info.update( count, mode, primcount );

		}

		//

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WebGLInfo( gl ) {

		var memory = {
			geometries: 0,
			textures: 0
		};

		var render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update( count, mode, instanceCount ) {

			instanceCount = instanceCount || 1;

			render.calls ++;

			switch ( mode ) {

				case 4:
					render.triangles += instanceCount * ( count / 3 );
					break;

				case 5:
				case 6:
					render.triangles += instanceCount * ( count - 2 );
					break;

				case 1:
					render.lines += instanceCount * ( count / 2 );
					break;

				case 3:
					render.lines += instanceCount * ( count - 1 );
					break;

				case 2:
					render.lines += instanceCount * count;
					break;

				case 0:
					render.points += instanceCount * count;
					break;

				default:
					console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
					break;

			}

		}

		function reset() {

			render.frame ++;
			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;

		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

	}

	function WebGLMorphtargets( gl ) {

		var influencesList = {};
		var morphInfluences = new Float32Array( 8 );

		function update( object, geometry, material, program ) {

			var objectInfluences = object.morphTargetInfluences;

			var length = objectInfluences.length;

			var influences = influencesList[ geometry.id ];

			if ( influences === undefined ) {

				// initialise list

				influences = [];

				for ( var i = 0; i < length; i ++ ) {

					influences[ i ] = [ i, 0 ];

				}

				influencesList[ geometry.id ] = influences;

			}

			var morphTargets = material.morphTargets && geometry.morphAttributes.position;
			var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

			// Remove current morphAttributes

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				if ( influence[ 1 ] !== 0 ) {

					if ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }
					if ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }

				}

			}

			// Collect influences

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];

			}

			influences.sort( absNumericalSort );

			// Add morphAttributes

			var morphInfluencesSum = 0;

			for ( var i = 0; i < 8; i ++ ) {

				var influence = influences[ i ];

				if ( influence ) {

					var index = influence[ 0 ];
					var value = influence[ 1 ];

					if ( value ) {

						if ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }
						if ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }

						morphInfluences[ i ] = value;
						morphInfluencesSum += value;
						continue;

					}

				}

				morphInfluences[ i ] = 0;

			}

			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
			// This allows us to switch between absolute morphs and relative morphs without changing shader code
			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
			var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

		}

		return {

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( gl, geometries, attributes, info ) {

		var updateList = {};

		function update( object ) {

			var frame = info.render.frame;

			var geometry = object.geometry;
			var buffergeometry = geometries.get( object, geometry );

			// Update once per frame

			if ( updateList[ buffergeometry.id ] !== frame ) {

				if ( geometry.isGeometry ) {

					buffergeometry.updateFromObject( object );

				}

				geometries.update( buffergeometry );

				updateList[ buffergeometry.id ] = frame;

			}

			if ( object.isInstancedMesh ) {

				attributes.update( object.instanceMatrix, 34962 );

			}

			return buffergeometry;

		}

		function dispose() {

			updateList = {};

		}

		return {

			update: update,
			dispose: dispose

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
		format = format !== undefined ? format : RGBFormat;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author Takahiro https://github.com/takahirox
	 */

	function DataTexture2DArray( data, width, height, depth ) {

		Texture.call( this, null );

		this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;

		this.needsUpdate = true;

	}

	DataTexture2DArray.prototype = Object.create( Texture.prototype );
	DataTexture2DArray.prototype.constructor = DataTexture2DArray;
	DataTexture2DArray.prototype.isDataTexture2DArray = true;

	/**
	 * @author Artur Trzesiok
	 */

	function DataTexture3D( data, width, height, depth ) {

		// We're going to add .setXXX() methods for setting properties later.
		// Users can still set in DataTexture3D directly.
		//
		//	var texture = new THREE.DataTexture3D( data, width, height, depth );
		// 	texture.anisotropy = 16;
		//
		// See #14839

		Texture.call( this, null );

		this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;

		this.needsUpdate = true;


	}

	DataTexture3D.prototype = Object.create( Texture.prototype );
	DataTexture3D.prototype.constructor = DataTexture3D;
	DataTexture3D.prototype.isDataTexture3D = true;

	/**
	 * @author tschw
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyTexture2dArray = new DataTexture2DArray();
	var emptyTexture3d = new DataTexture3D();
	var emptyCubeTexture = new CubeTexture();

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Float32Array caches used for uploading Matrix uniforms

	var mat4array = new Float32Array( 16 );
	var mat3array = new Float32Array( 9 );
	var mat2array = new Float32Array( 4 );

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) { return array; }
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	function arraysEqual( a, b ) {

		if ( a.length !== b.length ) { return false; }

		for ( var i = 0, l = a.length; i < l; i ++ ) {

			if ( a[ i ] !== b[ i ] ) { return false; }

		}

		return true;

	}

	function copyArray( a, b ) {

		for ( var i = 0, l = b.length; i < l; i ++ ) {

			a[ i ] = b[ i ];

		}

	}

	// Texture unit allocation

	function allocTexUnits( textures, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			{ r[ i ] = textures.allocateTextureUnit(); }

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValueV1f( gl, v ) {

		var cache = this.cache;

		if ( cache[ 0 ] === v ) { return; }

		gl.uniform1f( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single float vector (from flat array or THREE.VectorN)

	function setValueV2f( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2f( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniform2fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3f( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3f( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else if ( v.r !== undefined ) {

			if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

				gl.uniform3f( this.addr, v.r, v.g, v.b );

				cache[ 0 ] = v.r;
				cache[ 1 ] = v.g;
				cache[ 2 ] = v.b;

			}

		} else {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniform3fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4f( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniform4fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single matrix (from flat array or MatrixN)

	function setValueM2( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniformMatrix2fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) { return; }

			mat2array.set( elements );

			gl.uniformMatrix2fv( this.addr, false, mat2array );

			copyArray( cache, elements );

		}

	}

	function setValueM3( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniformMatrix3fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) { return; }

			mat3array.set( elements );

			gl.uniformMatrix3fv( this.addr, false, mat3array );

			copyArray( cache, elements );

		}

	}

	function setValueM4( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniformMatrix4fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) { return; }

			mat4array.set( elements );

			gl.uniformMatrix4fv( this.addr, false, mat4array );

			copyArray( cache, elements );

		}

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.safeSetTexture2D( v || emptyTexture, unit );

	}

	function setValueT2DArray1( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture2DArray( v || emptyTexture2dArray, unit );

	}

	function setValueT3D1( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture3D( v || emptyTexture3d, unit );

	}

	function setValueT6( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.safeSetTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValueV1i( gl, v ) {

		var cache = this.cache;

		if ( cache[ 0 ] === v ) { return; }

		gl.uniform1i( this.addr, v );

		cache[ 0 ] = v;

	}

	function setValueV2i( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) { return; }

		gl.uniform2iv( this.addr, v );

		copyArray( cache, v );

	}

	function setValueV3i( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) { return; }

		gl.uniform3iv( this.addr, v );

		copyArray( cache, v );

	}

	function setValueV4i( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) { return; }

		gl.uniform4iv( this.addr, v );

		copyArray( cache, v );

	}

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1f; // FLOAT
			case 0x8b50: return setValueV2f; // _VEC2
			case 0x8b51: return setValueV3f; // _VEC3
			case 0x8b52: return setValueV4f; // _VEC4

			case 0x8b5a: return setValueM2; // _MAT2
			case 0x8b5b: return setValueM3; // _MAT3
			case 0x8b5c: return setValueM4; // _MAT4

			case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
			case 0x8b5f: return setValueT3D1; // SAMPLER_3D
			case 0x8b60: return setValueT6; // SAMPLER_CUBE
			case 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY

			case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

		}

	}

	// Array of scalars
	function setValueV1fArray( gl, v ) {

		gl.uniform1fv( this.addr, v );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)
	function setValueV1iArray( gl, v ) {

		gl.uniform1iv( this.addr, v );

	}

	function setValueV2iArray( gl, v ) {

		gl.uniform2iv( this.addr, v );

	}

	function setValueV3iArray( gl, v ) {

		gl.uniform3iv( this.addr, v );

	}

	function setValueV4iArray( gl, v ) {

		gl.uniform4iv( this.addr, v );

	}


	// Array of vectors (flat or from THREE classes)

	function setValueV2fArray( gl, v ) {

		var data = flatten( v, this.size, 2 );

		gl.uniform2fv( this.addr, data );

	}

	function setValueV3fArray( gl, v ) {

		var data = flatten( v, this.size, 3 );

		gl.uniform3fv( this.addr, data );

	}

	function setValueV4fArray( gl, v ) {

		var data = flatten( v, this.size, 4 );

		gl.uniform4fv( this.addr, data );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2Array( gl, v ) {

		var data = flatten( v, this.size, 4 );

		gl.uniformMatrix2fv( this.addr, false, data );

	}

	function setValueM3Array( gl, v ) {

		var data = flatten( v, this.size, 9 );

		gl.uniformMatrix3fv( this.addr, false, data );

	}

	function setValueM4Array( gl, v ) {

		var data = flatten( v, this.size, 16 );

		gl.uniformMatrix4fv( this.addr, false, data );

	}

	// Array of textures (2D / Cube)

	function setValueT1Array( gl, v, textures ) {

		var n = v.length;

		var units = allocTexUnits( textures, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6Array( gl, v, textures ) {

		var n = v.length;

		var units = allocTexUnits( textures, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1fArray; // FLOAT
			case 0x8b50: return setValueV2fArray; // _VEC2
			case 0x8b51: return setValueV3fArray; // _VEC3
			case 0x8b52: return setValueV4fArray; // _VEC4

			case 0x8b5a: return setValueM2Array; // _MAT2
			case 0x8b5b: return setValueM3Array; // _MAT3
			case 0x8b5c: return setValueM4Array; // _MAT4

			case 0x8b5e: return setValueT1Array; // SAMPLER_2D
			case 0x8b60: return setValueT6Array; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	PureArrayUniform.prototype.updateCache = function ( data ) {

		var cache = this.cache;

		if ( data instanceof Float32Array && cache.length !== data.length ) {

			this.cache = new Float32Array( data.length );

		}

		copyArray( cache, data );

	};

	function StructuredUniform( id ) {

		this.id = id;

		this.seq = [];
		this.map = {};

	}

	StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ], textures );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		while ( true ) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) { id = id | 0; } // convert to integer

			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {

				// step into inner node / create it in case it doesn't exist

				var map = container.map, next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program ) {

		this.seq = [];
		this.map = {};

		var n = gl.getProgramParameter( program, 35718 );

		for ( var i = 0; i < n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				addr = gl.getUniformLocation( program, info.name );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

		var u = this.map[ name ];

		if ( u !== undefined ) { u.setValue( gl, value, textures ); }

	};

	WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) { this.setValue( gl, name, v ); }

	};


	// Static interface

	WebGLUniforms.upload = function ( gl, seq, values, textures ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {

				// note: always updating when .needsUpdate is undefined
				u.setValue( gl, v.value, textures );

			}

		}

	};

	WebGLUniforms.seqWithValue = function ( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) { r.push( u ); }

		}

		return r;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear', '( value )' ];
			case sRGBEncoding:
				return [ 'sRGB', '( value )' ];
			case RGBEEncoding:
				return [ 'RGBE', '( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM', '( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM', '( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD', '( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
			case LogLuvEncoding:
				return [ 'LogLuv', '( value )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getShaderErrors( gl, shader, type ) {

		var status = gl.getShaderParameter( shader, 35713 );
		var log = gl.getShaderInfoLog( shader ).trim();

		if ( status && log === '' ) { return ''; }

		// --enable-privileged-webgl-extension
		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		var source = gl.getShaderSource( shader );

		return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case Uncharted2ToneMapping:
				toneMappingName = 'Uncharted2';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) { continue; }

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, 35721 );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
			.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
			.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
			.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

	}

	function replaceClippingPlaneNums( string, parameters ) {

		return string
			.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
			.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

	}

	// Resolve Includes

	var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

	function resolveIncludes( string ) {

		return string.replace( includePattern, includeReplacer );

	}

	function includeReplacer( match, include ) {

		var string = ShaderChunk[ include ];

		if ( string === undefined ) {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

		return resolveIncludes( string );

	}

	// Unroll Loops

	var loopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	function unrollLoops( string ) {

		return string.replace( loopPattern, loopReplacer );

	}

	function loopReplacer( match, start, end, snippet ) {

		var string = '';

		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

			string += snippet
				.replace( /\[ i \]/g, '[ ' + i + ' ]' )
				.replace( /UNROLLED_LOOP_INDEX/g, i );

		}

		return string;

	}

	//

	function generatePrecision( parameters ) {

		var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";

		if ( parameters.precision === "highp" ) {

			precisionstring += "\n#define HIGH_PRECISION";

		} else if ( parameters.precision === "mediump" ) {

			precisionstring += "\n#define MEDIUM_PRECISION";

		} else if ( parameters.precision === "lowp" ) {

			precisionstring += "\n#define LOW_PRECISION";

		}

		return precisionstring;

	}

	function generateShadowMapTypeDefine( parameters ) {

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		} else if ( parameters.shadowMapType === VSMShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

		}

		return shadowMapTypeDefine;

	}

	function generateEnvMapTypeDefine( parameters ) {

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

		}

		return envMapTypeDefine;

	}

	function generateEnvMapModeDefine( parameters ) {

		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

		}

		return envMapModeDefine;

	}

	function generateEnvMapBlendingDefine( parameters ) {

		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( parameters.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		return envMapBlendingDefine;

	}

	function WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {

		var gl = renderer.getContext();

		var defines = material.defines;

		var vertexShader = shader.vertexShader;
		var fragmentShader = shader.fragmentShader;
		var shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
		var envMapTypeDefine = generateEnvMapTypeDefine( parameters );
		var envMapModeDefine = generateEnvMapModeDefine( parameters );
		var envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );


		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		var customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );

		var customDefines = generateDefines( defines );

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		var numMultiviewViews = parameters.numMultiviewViews;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixVertex.length > 0 ) {

				prefixVertex += '\n';

			}

			prefixFragment = [

				customExtensions,
				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixFragment.length > 0 ) {

				prefixFragment += '\n';

			}

		} else {

			prefixVertex = [

				generatePrecision( parameters ),

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.instancing ? '#define USE_INSTANCING' : '',
				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,
				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

				parameters.vertexTangents ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.vertexUvs ? '#define USE_UV' : '',
				parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				'#ifdef USE_INSTANCING',

				' attribute mat4 instanceMatrix;',

				'#endif',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_TANGENT',

				'	attribute vec4 tangent;',

				'#endif',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				generatePrecision( parameters ),

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.matcap ? '#define USE_MATCAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

				parameters.sheen ? '#define USE_SHEEN' : '',

				parameters.vertexTangents ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.vertexUvs ? '#define USE_UV' : '',
				parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

				parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

				parameters.dithering ? '#define DITHERING' : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?
					ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

				parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = resolveIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );
		vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

		fragmentShader = resolveIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );
		fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

		if ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {

			var isGLSL3ShaderMaterial = false;

			var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

			if ( material.isShaderMaterial &&
				vertexShader.match( versionRegex ) !== null &&
				fragmentShader.match( versionRegex ) !== null ) {

				isGLSL3ShaderMaterial = true;

				vertexShader = vertexShader.replace( versionRegex, '' );
				fragmentShader = fragmentShader.replace( versionRegex, '' );

			}

			// GLSL 3.0 conversion

			prefixVertex = [
				'#version 300 es\n',
				'#define attribute in',
				'#define varying out',
				'#define texture2D texture'
			].join( '\n' ) + '\n' + prefixVertex;

			prefixFragment = [
				'#version 300 es\n',
				'#define varying in',
				isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
				isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
				'#define gl_FragDepthEXT gl_FragDepth',
				'#define texture2D texture',
				'#define textureCube texture',
				'#define texture2DProj textureProj',
				'#define texture2DLodEXT textureLod',
				'#define texture2DProjLodEXT textureProjLod',
				'#define textureCubeLodEXT textureLod',
				'#define texture2DGradEXT textureGrad',
				'#define texture2DProjGradEXT textureProjGrad',
				'#define textureCubeGradEXT textureGrad'
			].join( '\n' ) + '\n' + prefixFragment;

			// Multiview

			if ( numMultiviewViews > 0 ) {

				prefixVertex = prefixVertex.replace(
					'#version 300 es\n',
					[
						'#version 300 es\n',
						'#extension GL_OVR_multiview2 : require',
						'layout(num_views = ' + numMultiviewViews + ') in;',
						'#define VIEW_ID gl_ViewID_OVR'
					].join( '\n' )
				);

				prefixVertex = prefixVertex.replace(
					[
						'uniform mat4 modelViewMatrix;',
						'uniform mat4 projectionMatrix;',
						'uniform mat4 viewMatrix;',
						'uniform mat3 normalMatrix;'
					].join( '\n' ),
					[
						'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',
						'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',
						'uniform mat4 viewMatrices[' + numMultiviewViews + '];',
						'uniform mat3 normalMatrices[' + numMultiviewViews + '];',

						'#define modelViewMatrix modelViewMatrices[VIEW_ID]',
						'#define projectionMatrix projectionMatrices[VIEW_ID]',
						'#define viewMatrix viewMatrices[VIEW_ID]',
						'#define normalMatrix normalMatrices[VIEW_ID]'
					].join( '\n' )
				);

				prefixFragment = prefixFragment.replace(
					'#version 300 es\n',
					[
						'#version 300 es\n',
						'#extension GL_OVR_multiview2 : require',
						'#define VIEW_ID gl_ViewID_OVR'
					].join( '\n' )
				);

				prefixFragment = prefixFragment.replace(
					'uniform mat4 viewMatrix;',
					[
						'uniform mat4 viewMatrices[' + numMultiviewViews + '];',
						'#define viewMatrix viewMatrices[VIEW_ID]'
					].join( '\n' )
				);

			}

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		// check for link errors
		if ( renderer.debug.checkShaderErrors ) {

			var programLog = gl.getProgramInfoLog( program ).trim();
			var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

			var runnable = true;
			var haveDiagnostics = true;

			if ( gl.getProgramParameter( program, 35714 ) === false ) {

				runnable = false;

				var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
				var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,
					material: material,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function () {

			if ( cachedUniforms === undefined ) {

				cachedUniforms = new WebGLUniforms( gl, program );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function () {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function () {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		//

		this.name = shader.name;
		this.id = programIdCount ++;
		this.cacheKey = cacheKey;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;
		this.numMultiviewViews = numMultiviewViews;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, extensions, capabilities ) {

		var programs = [];

		var isWebGL2 = capabilities.isWebGL2;
		var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
		var floatVertexTextures = capabilities.floatVertexTextures;
		var precision = capabilities.precision;
		var maxVertexUniforms = capabilities.maxVertexUniforms;
		var vertexTextures = capabilities.vertexTextures;

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};

		var parameterNames = [
			"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "numMultiviewViews",
			"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatNormalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap", "gradientMap",
			"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
			"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
			"sheen"
		];


		function allocateBones( object ) {

			var skeleton = object.skeleton;
			var bones = skeleton.bones;

			if ( floatVertexTextures ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = Math.min( nVertexMatrices, bones.length );

				if ( maxBones < bones.length ) {

					console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
					return 0;

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( map.isTexture ) {

				encoding = map.encoding;

			} else if ( map.isWebGLRenderTarget ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getRenderTarget();
			var numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;

			var parameters = {

				isWebGL2: isWebGL2,

				shaderID: shaderID,

				precision: precision,

				instancing: object.isInstancedMesh === true,

				supportsVertexTextures: vertexTextures,
				numMultiviewViews: numMultiviewViews,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				matcap: !! material.matcap,
				matcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
				tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
				clearcoatNormalMap: !! material.clearcoatNormalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				gradientMap: !! material.gradientMap,

				sheen: !! material.sheen,

				combine: material.combine,

				vertexTangents: ( material.normalMap && material.vertexTangents ),
				vertexColors: material.vertexColors,
				vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,
				uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,

				fog: !! fog,
				useFog: material.fog,
				fogExp2: ( fog && fog.isFogExp2 ),

				flatShading: material.flatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: logarithmicDepthBuffer,

				skinning: material.skinning && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: floatVertexTextures,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,

				numDirLightShadows: lights.directionalShadowMap.length,
				numPointLightShadows: lights.pointShadowMap.length,
				numSpotLightShadows: lights.spotShadowMap.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				dithering: material.dithering,

				shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCacheKey = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			array.push( material.onBeforeCompile.toString() );

			array.push( renderer.gammaOutput );

			array.push( renderer.gammaFactor );

			return array.join();

		};

		this.acquireProgram = function ( material, shader, parameters, cacheKey ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var preexistingProgram = programs[ p ];

				if ( preexistingProgram.cacheKey === cacheKey ) {

					program = preexistingProgram;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function ( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = new WeakMap();

		function get( object ) {

			var map = properties.get( object );

			if ( map === undefined ) {

				map = {};
				properties.set( object, map );

			}

			return map;

		}

		function remove( object ) {

			properties.delete( object );

		}

		function update( object, key, value ) {

			properties.get( object )[ key ] = value;

		}

		function dispose() {

			properties = new WeakMap();

		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function painterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.program !== b.program ) {

			return a.program.id - b.program.id;

		} else if ( a.material.id !== b.material.id ) {

			return a.material.id - b.material.id;

		} else if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}


	function WebGLRenderList() {

		var renderItems = [];
		var renderItemsIndex = 0;

		var opaque = [];
		var transparent = [];

		var defaultProgram = { id: - 1 };

		function init() {

			renderItemsIndex = 0;

			opaque.length = 0;
			transparent.length = 0;

		}

		function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

			var renderItem = renderItems[ renderItemsIndex ];

			if ( renderItem === undefined ) {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					program: material.program || defaultProgram,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};

				renderItems[ renderItemsIndex ] = renderItem;

			} else {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.program = material.program || defaultProgram;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;

			}

			renderItemsIndex ++;

			return renderItem;

		}

		function push( object, geometry, material, groupOrder, z, group ) {

			var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			( material.transparent === true ? transparent : opaque ).push( renderItem );

		}

		function unshift( object, geometry, material, groupOrder, z, group ) {

			var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			( material.transparent === true ? transparent : opaque ).unshift( renderItem );

		}

		function sort() {

			if ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }
			if ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }

		}

		return {
			opaque: opaque,
			transparent: transparent,

			init: init,
			push: push,
			unshift: unshift,

			sort: sort
		};

	}

	function WebGLRenderLists() {

		var lists = new WeakMap();

		function onSceneDispose( event ) {

			var scene = event.target;

			scene.removeEventListener( 'dispose', onSceneDispose );

			lists.delete( scene );

		}

		function get( scene, camera ) {

			var cameras = lists.get( scene );
			var list;
			if ( cameras === undefined ) {

				list = new WebGLRenderList();
				lists.set( scene, new WeakMap() );
				lists.get( scene ).set( camera, list );

				scene.addEventListener( 'dispose', onSceneDispose );

			} else {

				list = cameras.get( camera );
				if ( list === undefined ) {

					list = new WebGLRenderList();
					cameras.set( camera, list );

				}

			}

			return list;

		}

		function dispose() {

			lists = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function UniformsCache() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
							// TODO (abelnation): set RectAreaLight shadow uniforms
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	var nextVersion = 0;

	function shadowCastingLightsFirst( lightA, lightB ) {

		return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

	}

	function WebGLLights() {

		var cache = new UniformsCache();

		var state = {

			version: 0,

			hash: {
				directionalLength: - 1,
				pointLength: - 1,
				spotLength: - 1,
				rectAreaLength: - 1,
				hemiLength: - 1,

				numDirectionalShadows: - 1,
				numPointShadows: - 1,
				numSpotShadows: - 1,
			},

			ambient: [ 0, 0, 0 ],
			probe: [],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			numDirectionalShadows: - 1,
			numPointShadows: - 1,
			numSpotShadows: - 1

		};

		for ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }

		var vector3 = new Vector3();
		var matrix4 = new Matrix4();
		var matrix42 = new Matrix4();

		function setup( lights, shadows, camera ) {

			var r = 0, g = 0, b = 0;

			for ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }

			var directionalLength = 0;
			var pointLength = 0;
			var spotLength = 0;
			var rectAreaLength = 0;
			var hemiLength = 0;

			var numDirectionalShadows = 0;
			var numPointShadows = 0;
			var numSpotShadows = 0;

			var viewMatrix = camera.matrixWorldInverse;

			lights.sort( shadowCastingLightsFirst );

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				var color = light.color;
				var intensity = light.intensity;
				var distance = light.distance;

				var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isLightProbe ) {

					for ( var j = 0; j < 9; j ++ ) {

						state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

					}

				} else if ( light.isDirectionalLight ) {

					var uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

						state.directionalShadowMap[ directionalLength ] = shadowMap;
						state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

						numDirectionalShadows ++;

					}

					state.directional[ directionalLength ] = uniforms;

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

						state.spotShadowMap[ spotLength ] = shadowMap;
						state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

						numSpotShadows ++;

					}

					state.spot[ spotLength ] = uniforms;

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					var uniforms = cache.get( light );

					// (a) intensity is the total visible light emitted
					//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

					// (b) intensity is the brightness of the light
					uniforms.color.copy( color ).multiplyScalar( intensity );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					// extract local rotation of light to derive width/height half vectors
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );

					// TODO (abelnation): RectAreaLight distance?
					// uniforms.distance = distance;

					state.rectArea[ rectAreaLength ] = uniforms;

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
						uniforms.shadowCameraNear = shadow.camera.near;
						uniforms.shadowCameraFar = shadow.camera.far;

						state.pointShadowMap[ pointLength ] = shadowMap;
						state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

						numPointShadows ++;

					}

					state.point[ pointLength ] = uniforms;

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					var uniforms = cache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					state.hemi[ hemiLength ] = uniforms;

					hemiLength ++;

				}

			}

			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;

			var hash = state.hash;

			if ( hash.directionalLength !== directionalLength ||
				hash.pointLength !== pointLength ||
				hash.spotLength !== spotLength ||
				hash.rectAreaLength !== rectAreaLength ||
				hash.hemiLength !== hemiLength ||
				hash.numDirectionalShadows !== numDirectionalShadows ||
				hash.numPointShadows !== numPointShadows ||
				hash.numSpotShadows !== numSpotShadows ) {

				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;

				state.directionalShadowMap.length = numDirectionalShadows;
				state.pointShadowMap.length = numPointShadows;
				state.spotShadowMap.length = numSpotShadows;
				state.directionalShadowMatrix.length = numDirectionalShadows;
				state.pointShadowMatrix.length = numPointShadows;
				state.spotShadowMatrix.length = numSpotShadows;

				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;

				hash.numDirectionalShadows = numDirectionalShadows;
				hash.numPointShadows = numPointShadows;
				hash.numSpotShadows = numSpotShadows;

				state.version = nextVersion ++;

			}

		}

		return {
			setup: setup,
			state: state
		};

	}

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WebGLRenderState() {

		var lights = new WebGLLights();

		var lightsArray = [];
		var shadowsArray = [];

		function init() {

			lightsArray.length = 0;
			shadowsArray.length = 0;

		}

		function pushLight( light ) {

			lightsArray.push( light );

		}

		function pushShadow( shadowLight ) {

			shadowsArray.push( shadowLight );

		}

		function setupLights( camera ) {

			lights.setup( lightsArray, shadowsArray, camera );

		}

		var state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,

			lights: lights
		};

		return {
			init: init,
			state: state,
			setupLights: setupLights,

			pushLight: pushLight,
			pushShadow: pushShadow
		};

	}

	function WebGLRenderStates() {

		var renderStates = new WeakMap();

		function onSceneDispose( event ) {

			var scene = event.target;

			scene.removeEventListener( 'dispose', onSceneDispose );

			renderStates.delete( scene );

		}

		function get( scene, camera ) {

			var renderState;

			if ( renderStates.has( scene ) === false ) {

				renderState = new WebGLRenderState();
				renderStates.set( scene, new WeakMap() );
				renderStates.get( scene ).set( camera, renderState );

				scene.addEventListener( 'dispose', onSceneDispose );

			} else {

				if ( renderStates.get( scene ).has( camera ) === false ) {

					renderState = new WebGLRenderState();
					renderStates.get( scene ).set( camera, renderState );

				} else {

					renderState = renderStates.get( scene ).get( camera );

				}

			}

			return renderState;

		}

		function dispose() {

			renderStates = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  referencePosition: <float>,
	 *  nearDistance: <float>,
	 *  farDistance: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>
	 *
	 * }
	 */

	function MeshDistanceMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDistanceMaterial';

		this.referencePosition = new Vector3();
		this.nearDistance = 1;
		this.farDistance = 1000;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.fog = false;

		this.setValues( parameters );

	}

	MeshDistanceMaterial.prototype = Object.create( Material.prototype );
	MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

	MeshDistanceMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.referencePosition.copy( source.referencePosition );
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	};

	var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

	var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

		var _frustum = new Frustum(),

			_shadowMapSize = new Vector2(),
			_viewportSize = new Vector2(),

			_viewport = new Vector4(),

			_depthMaterials = [],
			_distanceMaterials = [],

			_materialCache = {};

		var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

		var shadowMaterialVertical = new ShaderMaterial( {

			defines: {
				SAMPLE_RATE: 2.0 / 8.0,
				HALF_SAMPLE_RATE: 1.0 / 8.0
			},

			uniforms: {
				shadow_pass: { value: null },
				resolution: { value: new Vector2() },
				radius: { value: 4.0 }
			},

			vertexShader: vsm_vert,

			fragmentShader: vsm_frag

		} );

		var shadowMaterialHorizonal = shadowMaterialVertical.clone();
		shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;

		var fullScreenTri = new BufferGeometry();
		fullScreenTri.setAttribute(
			"position",
			new BufferAttribute(
				new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
				3
			)
		);

		var fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.render = function ( lights, scene, camera ) {

			if ( scope.enabled === false ) { return; }
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }

			if ( lights.length === 0 ) { return; }

			var currentRenderTarget = _renderer.getRenderTarget();
			var activeCubeFace = _renderer.getActiveCubeFace();
			var activeMipmapLevel = _renderer.getActiveMipmapLevel();

			var _state = _renderer.state;

			// Set GL state for depth map.
			_state.setBlending( NoBlending );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );

			// render depth map

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];
				var shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				_shadowMapSize.copy( shadow.mapSize );

				var shadowFrameExtents = shadow.getFrameExtents();

				_shadowMapSize.multiply( shadowFrameExtents );

				_viewportSize.copy( shadow.mapSize );

				if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );

					if ( _shadowMapSize.x > maxTextureSize ) {

						_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
						shadow.mapSize.x = _viewportSize.x;

					}

					if ( _shadowMapSize.y > maxTextureSize ) {

						_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
						shadow.mapSize.y = _viewportSize.y;

					}

				}

				if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

					var pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";

					shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

					shadow.camera.updateProjectionMatrix();

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";

					shadow.camera.updateProjectionMatrix();

				}

				_renderer.setRenderTarget( shadow.map );
				_renderer.clear();

				var viewportCount = shadow.getViewportCount();

				for ( var vp = 0; vp < viewportCount; vp ++ ) {

					var viewport = shadow.getViewport( vp );

					_viewport.set(
						_viewportSize.x * viewport.x,
						_viewportSize.y * viewport.y,
						_viewportSize.x * viewport.z,
						_viewportSize.y * viewport.w
					);

					_state.viewport( _viewport );

					shadow.updateMatrices( light, vp );

					_frustum = shadow.getFrustum();

					renderObject( scene, camera, shadow.camera, light, this.type );

				}

				// do blur pass for VSM

				if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

					VSMPass( shadow, camera );

				}

			}

			scope.needsUpdate = false;

			_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

		};

		function VSMPass( shadow, camera ) {

			var geometry = _objects.update( fullScreenMesh );

			// vertical pass

			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialVertical.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.mapPass );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

			// horizonal pass

			shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
			shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.map );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );

		}

		function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {

			var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

			var material = _depthMaterials[ index ];

			if ( material === undefined ) {

				material = new MeshDepthMaterial( {

					depthPacking: RGBADepthPacking,

					morphTargets: useMorphing,
					skinning: useSkinning

				} );

				_depthMaterials[ index ] = material;

			}

			return material;

		}

		function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {

			var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

			var material = _distanceMaterials[ index ];

			if ( material === undefined ) {

				material = new MeshDistanceMaterial( {

					morphTargets: useMorphing,
					skinning: useSkinning

				} );

				_distanceMaterials[ index ] = material;

			}

			return material;

		}

		function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {

			var geometry = object.geometry;

			var result = null;

			var getMaterialVariant = getDepthMaterialVariant;
			var customMaterial = object.customDepthMaterial;

			if ( light.isPointLight === true ) {

				getMaterialVariant = getDistanceMaterialVariant;
				customMaterial = object.customDistanceMaterial;

			}

			if ( customMaterial === undefined ) {

				var useMorphing = false;

				if ( material.morphTargets === true ) {

					if ( geometry.isBufferGeometry === true ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( geometry.isGeometry === true ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				var useSkinning = false;

				if ( object.isSkinnedMesh === true ) {

					if ( material.skinning === true ) {

						useSkinning = true;

					} else {

						console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

					}

				}

				var useInstancing = object.isInstancedMesh === true;

				result = getMaterialVariant( useMorphing, useSkinning, useInstancing );

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
					material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			if ( type === VSMShadowMap ) {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

			} else {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

			}

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

				result.referencePosition.setFromMatrixPosition( light.matrixWorld );
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;

			}

			return result;

		}

		function renderObject( object, camera, shadowCamera, light, type ) {

			if ( object.visible === false ) { return; }

			var visible = object.layers.test( camera.layers );

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					var geometry = _objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

							var group = groups[ k ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								var depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

							}

						}

					} else if ( material.visible ) {

						var depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );

						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				renderObject( children[ i ], camera, shadowCamera, light, type );

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4( 0, 0, 0, 0 );

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a, premultipliedAlpha ) {

					if ( premultipliedAlpha === true ) {

						r *= a; g *= a; b *= a;

					}

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( 2929 );

					} else {

						disable( 2929 );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( 512 );
									break;

								case AlwaysDepth:

									gl.depthFunc( 519 );
									break;

								case LessDepth:

									gl.depthFunc( 513 );
									break;

								case LessEqualDepth:

									gl.depthFunc( 515 );
									break;

								case EqualDepth:

									gl.depthFunc( 514 );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( 518 );
									break;

								case GreaterDepth:

									gl.depthFunc( 516 );
									break;

								case NotEqualDepth:

									gl.depthFunc( 517 );
									break;

								default:

									gl.depthFunc( 515 );

							}

						} else {

							gl.depthFunc( 515 );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( ! locked ) {

						if ( stencilTest ) {

							enable( 2960 );

						} else {

							disable( 2960 );

						}

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( 34921 );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var enabledCapabilities = {};

		var currentProgram = null;

		var currentBlendingEnabled = null;
		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var maxTextures = gl.getParameter( 35661 );

		var lineWidthAvailable = false;
		var version = 0;
		var glVersion = gl.getParameter( 7938 );

		if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

			version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 1.0 );

		} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

			version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 2.0 );

		}

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, 10241, 9728 );
			gl.texParameteri( type, 10240, 9728 );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
		emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

		// init

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( 2929 );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( 2884 );

		setBlending( NoBlending );

		//

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			enableAttributeAndDivisor( attribute, 0 );

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				var extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

				extension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( enabledCapabilities[ id ] !== true ) {

				gl.enable( id );
				enabledCapabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( enabledCapabilities[ id ] !== false ) {

				gl.disable( id );
				enabledCapabilities[ id ] = false;

			}

		}

		function useProgram( program ) {

			if ( currentProgram !== program ) {

				gl.useProgram( program );

				currentProgram = program;

				return true;

			}

			return false;

		}

		var equationToGL = {};
		equationToGL[ AddEquation ] = 32774;
		equationToGL[ SubtractEquation ] = 32778;
		equationToGL[ ReverseSubtractEquation ] = 32779;

		if ( isWebGL2 ) {

			equationToGL[ MinEquation ] = 32775;
			equationToGL[ MaxEquation ] = 32776;

		} else {

			var extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				equationToGL[ MinEquation ] = extension.MIN_EXT;
				equationToGL[ MaxEquation ] = extension.MAX_EXT;

			}

		}

		var factorToGL = {};
		factorToGL[ ZeroFactor ] = 0;
		factorToGL[ OneFactor ] = 1;
		factorToGL[ SrcColorFactor ] = 768;
		factorToGL[ SrcAlphaFactor ] = 770;
		factorToGL[ SrcAlphaSaturateFactor ] = 776;
		factorToGL[ DstColorFactor ] = 774;
		factorToGL[ DstAlphaFactor ] = 772;
		factorToGL[ OneMinusSrcColorFactor ] = 769;
		factorToGL[ OneMinusSrcAlphaFactor ] = 771;
		factorToGL[ OneMinusDstColorFactor ] = 775;
		factorToGL[ OneMinusDstAlphaFactor ] = 773;

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending === NoBlending ) {

				if ( currentBlendingEnabled ) {

					disable( 3042 );
					currentBlendingEnabled = false;

				}

				return;

			}

			if ( ! currentBlendingEnabled ) {

				enable( 3042 );
				currentBlendingEnabled = true;

			}

			if ( blending !== CustomBlending ) {

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

						gl.blendEquation( 32774 );

						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;

					}

					if ( premultipliedAlpha ) {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( 1, 771, 1, 771 );
								break;

							case AdditiveBlending:
								gl.blendFunc( 1, 1 );
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate( 0, 0, 769, 771 );
								break;

							case MultiplyBlending:
								gl.blendFuncSeparate( 0, 768, 0, 770 );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					} else {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( 770, 771, 1, 771 );
								break;

							case AdditiveBlending:
								gl.blendFunc( 770, 1 );
								break;

							case SubtractiveBlending:
								gl.blendFunc( 0, 769 );
								break;

							case MultiplyBlending:
								gl.blendFunc( 0, 768 );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					}

					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;

					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;

				}

				return;

			}

			// custom blending

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

			currentBlending = blending;
			currentPremultipledAlpha = null;

		}

		function setMaterial( material, frontFaceCW ) {

			material.side === DoubleSide
				? disable( 2884 )
				: enable( 2884 );

			var flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) { flipSided = ! flipSided; }

			setFlipSided( flipSided );

			( material.blending === NormalBlending && material.transparent === false )
				? setBlending( NoBlending )
				: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );

			var stencilWrite = material.stencilWrite;
			stencilBuffer.setTest( stencilWrite );
			if ( stencilWrite ) {

				stencilBuffer.setMask( material.stencilWriteMask );
				stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
				stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

			}

			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( 2304 );

				} else {

					gl.frontFace( 2305 );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( 2884 );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( 1029 );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( 1028 );

					} else {

						gl.cullFace( 1032 );

					}

				}

			} else {

				disable( 2884 );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				if ( lineWidthAvailable ) { gl.lineWidth( width ); }

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( 32823 );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( 32823 );

			}

		}

		function setScissorTest( scissorTest ) {

			if ( scissorTest ) {

				enable( 3089 );

			} else {

				disable( 3089 );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function unbindTexture() {

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

				gl.bindTexture( boundTexture.type, null );

				boundTexture.type = undefined;
				boundTexture.texture = undefined;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage3D() {

			try {

				gl.texImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			enabledCapabilities = {};

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentProgram = null;

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,

			useProgram: useProgram,

			setBlending: setBlending,
			setMaterial: setMaterial,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			unbindTexture: unbindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

		var isWebGL2 = capabilities.isWebGL2;
		var maxTextures = capabilities.maxTextures;
		var maxCubemapSize = capabilities.maxCubemapSize;
		var maxTextureSize = capabilities.maxTextureSize;
		var maxSamples = capabilities.maxSamples;

		var _videoTextures = new WeakMap();
		var _canvas;

		// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!

		var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
			&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;

		function createCanvas( width, height ) {

			// Use OffscreenCanvas when available. Specially needed in web workers

			return useOffscreenCanvas ?
				new OffscreenCanvas( width, height ) :
				document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

		}

		function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

			var scale = 1;

			// handle case if texture exceeds max size

			if ( image.width > maxSize || image.height > maxSize ) {

				scale = maxSize / Math.max( image.width, image.height );

			}

			// only perform resize if necessary

			if ( scale < 1 || needsPowerOfTwo === true ) {

				// only perform resize for certain image types

				if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
					( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
					( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

					var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;

					var width = floor( scale * image.width );
					var height = floor( scale * image.height );

					if ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }

					// cube textures can't reuse the same canvas

					var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

					canvas.width = width;
					canvas.height = height;

					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, width, height );

					console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

					return canvas;

				} else {

					if ( 'data' in image ) {

						console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

					}

					return image;

				}

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( isWebGL2 ) { return false; }

			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

		}

		function textureNeedsGenerateMipmaps( texture, supportsMips ) {

			return texture.generateMipmaps && supportsMips &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

		}

		function generateMipmap( target, texture, width, height ) {

			_gl.generateMipmap( target );

			var textureProperties = properties.get( texture );

			// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
			textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

		}

		function getInternalFormat( glFormat, glType ) {

			if ( isWebGL2 === false ) { return glFormat; }

			var internalFormat = glFormat;

			if ( glFormat === 6403 ) {

				if ( glType === 5126 ) { internalFormat = 33326; }
				if ( glType === 5131 ) { internalFormat = 33325; }
				if ( glType === 5121 ) { internalFormat = 33321; }

			}

			if ( glFormat === 6407 ) {

				if ( glType === 5126 ) { internalFormat = 34837; }
				if ( glType === 5131 ) { internalFormat = 34843; }
				if ( glType === 5121 ) { internalFormat = 32849; }

			}

			if ( glFormat === 6408 ) {

				if ( glType === 5126 ) { internalFormat = 34836; }
				if ( glType === 5131 ) { internalFormat = 34842; }
				if ( glType === 5121 ) { internalFormat = 32856; }

			}

			if ( internalFormat === 33325 || internalFormat === 33326 ||
				internalFormat === 34842 || internalFormat === 34836 ) {

				extensions.get( 'EXT_color_buffer_float' );

			} else if ( internalFormat === 34843 || internalFormat === 34837 ) {

				console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );

			}

			return internalFormat;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

				return 9728;

			}

			return 9729;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			if ( texture.isVideoTexture ) {

				_videoTextures.delete( texture );

			}

			info.memory.textures --;

		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			info.memory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( textureProperties.__webglInit === undefined ) { return; }

			_gl.deleteTexture( textureProperties.__webglTexture );

			properties.remove( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) { return; }

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget.isWebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }

			}

			if ( renderTarget.isWebGLMultiviewRenderTarget ) {

				_gl.deleteTexture( renderTargetProperties.__webglColorTexture );
				_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );

				info.memory.textures -= 2;

				for ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );

				}

			}

			properties.remove( renderTarget.texture );
			properties.remove( renderTarget );

		}

		//

		var textureUnits = 0;

		function resetTextureUnits() {

			textureUnits = 0;

		}

		function allocateTextureUnit() {

			var textureUnit = textureUnits;

			if ( textureUnit >= maxTextures ) {

				console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

			}

			textureUnits += 1;

			return textureUnit;

		}

		//

		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.isVideoTexture ) { updateVideoTexture( texture ); }

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( 33984 + slot );
			state.bindTexture( 3553, textureProperties.__webglTexture );

		}

		function setTexture2DArray( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.activeTexture( 33984 + slot );
			state.bindTexture( 35866, textureProperties.__webglTexture );

		}

		function setTexture3D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.activeTexture( 33984 + slot );
			state.bindTexture( 32879, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			if ( texture.image.length !== 6 ) { return; }

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				initTexture( textureProperties, texture );

				state.activeTexture( 33984 + slot );
				state.bindTexture( 34067, textureProperties.__webglTexture );

				_gl.pixelStorei( 37440, texture.flipY );

				var isCompressed = ( texture && texture.isCompressedTexture );
				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
					supportsMips = isPowerOfTwo( image ) || isWebGL2,
					glFormat = utils.convert( texture.format ),
					glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( glFormat, glType );

				setTextureParameters( 34067, texture, supportsMips );

				var mipmaps;

				if ( isCompressed ) {

					for ( var i = 0; i < 6; i ++ ) {

						mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0; j < mipmaps.length; j ++ ) {

							var mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

								if ( glFormat !== null ) {

									state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					mipmaps = texture.mipmaps;

					for ( var i = 0; i < 6; i ++ ) {

						if ( isDataTexture ) {

							state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							for ( var j = 0; j < mipmaps.length; j ++ ) {

								var mipmap = mipmaps[ j ];
								var mipmapImage = mipmap.image[ i ].image;

								state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

							}

						} else {

							state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

							for ( var j = 0; j < mipmaps.length; j ++ ) {

								var mipmap = mipmaps[ j ];

								state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

							}

						}

					}

					textureProperties.__maxMipLevel = mipmaps.length;

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					// We assume images for cube map have the same size.
					generateMipmap( 34067, texture, image.width, image.height );

				}

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) { texture.onUpdate( texture ); }

			} else {

				state.activeTexture( 33984 + slot );
				state.bindTexture( 34067, textureProperties.__webglTexture );

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( 33984 + slot );
			state.bindTexture( 34067, properties.get( texture ).__webglTexture );

		}

		var wrappingToGL = {};
		wrappingToGL[ RepeatWrapping ] = 10497;
		wrappingToGL[ ClampToEdgeWrapping ] = 33071;
		wrappingToGL[ MirroredRepeatWrapping ] = 33648;

		var filterToGL = {};
		filterToGL[ NearestFilter ] = 9728;
		filterToGL[ NearestMipmapNearestFilter ] = 9984;
		filterToGL[ NearestMipmapLinearFilter ] = 9986;
		filterToGL[ LinearFilter ] = 9729;
		filterToGL[ LinearMipmapNearestFilter ] = 9985;
		filterToGL[ LinearMipmapLinearFilter ] = 9987;

		function setTextureParameters( textureType, texture, supportsMips ) {

			if ( supportsMips ) {

				_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
				_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );

				if ( textureType === 32879 || textureType === 35866 ) {

					_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );

				}

				_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
				_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );

			} else {

				_gl.texParameteri( textureType, 10242, 33071 );
				_gl.texParameteri( textureType, 10243, 33071 );

				if ( textureType === 32879 || textureType === 35866 ) {

					_gl.texParameteri( textureType, 32882, 33071 );

				}

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

				}

				_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

				}

			}

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }
				if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function initTexture( textureProperties, texture ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				info.memory.textures ++;

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			var textureType = 3553;

			if ( texture.isDataTexture2DArray ) { textureType = 35866; }
			if ( texture.isDataTexture3D ) { textureType = 32879; }

			initTexture( textureProperties, texture );

			state.activeTexture( 33984 + slot );
			state.bindTexture( textureType, textureProperties.__webglTexture );

			_gl.pixelStorei( 37440, texture.flipY );
			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
			_gl.pixelStorei( 3317, texture.unpackAlignment );

			var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
			var image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );

			var supportsMips = isPowerOfTwo( image ) || isWebGL2,
				glFormat = utils.convert( texture.format ),
				glType = utils.convert( texture.type ),
				glInternalFormat = getInternalFormat( glFormat, glType );

			setTextureParameters( textureType, texture, supportsMips );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture.isDepthTexture ) {

				// populate depth texture with dummy data

				glInternalFormat = 6402;

				if ( texture.type === FloatType ) {

					if ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }
					glInternalFormat = 36012;

				} else if ( isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					glInternalFormat = 33189;

				}

				if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

						texture.type = UnsignedShortType;
						glType = utils.convert( texture.type );

					}

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					glInternalFormat = 34041;

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedInt248Type ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

						texture.type = UnsignedInt248Type;
						glType = utils.convert( texture.type );

					}

				}

				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( texture.isDataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && supportsMips ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
					textureProperties.__maxMipLevel = 0;

				}

			} else if ( texture.isCompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( glFormat !== null ) {

							state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

						}

					} else {

						state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

				textureProperties.__maxMipLevel = mipmaps.length - 1;

			} else if ( texture.isDataTexture2DArray ) {

				state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;

			} else if ( texture.isDataTexture3D ) {

				state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && supportsMips ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
					textureProperties.__maxMipLevel = 0;

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( 3553, texture, image.width, image.height );

			}

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) { texture.onUpdate( texture ); }

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = utils.convert( renderTarget.texture.format );
			var glType = utils.convert( renderTarget.texture.type );
			var glInternalFormat = getInternalFormat( glFormat, glType );
			state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( 36160, framebuffer );
			_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( 36160, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

			_gl.bindRenderbuffer( 36161, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				if ( isMultisample ) {

					var samples = getRenderTargetSamples( renderTarget );

					_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );

				}

				_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				if ( isMultisample ) {

					var samples = getRenderTargetSamples( renderTarget );

					_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

				}


				_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

			} else {

				var glFormat = utils.convert( renderTarget.texture.format );
				var glType = utils.convert( renderTarget.texture.type );
				var glInternalFormat = getInternalFormat( glFormat, glType );

				if ( isMultisample ) {

					var samples = getRenderTargetSamples( renderTarget );

					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

				}

			}

			_gl.bindRenderbuffer( 36161, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			if ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }

			_gl.bindFramebuffer( 36160, framebuffer );

			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

			}

			// upload an empty depth texture with framebuffer size
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {

				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;

			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

			} else {

				throw new Error( 'Unknown depthTexture format' );

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( 36160, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			info.memory.textures ++;

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
			var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
			var isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );
			var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				if ( isMultisample ) {

					if ( isWebGL2 ) {

						renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
						renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

						_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
						var glFormat = utils.convert( renderTarget.texture.format );
						var glType = utils.convert( renderTarget.texture.type );
						var glInternalFormat = getInternalFormat( glFormat, glType );
						var samples = getRenderTargetSamples( renderTarget );
						_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
						_gl.bindRenderbuffer( 36161, null );

						if ( renderTarget.depthBuffer ) {

							renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

						}

						_gl.bindFramebuffer( 36160, null );


					} else {

						console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

					}

				} else if ( isMultiview ) {

					var width = renderTarget.width;
					var height = renderTarget.height;
					var numViews = renderTarget.numViews;

					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );

					var ext = extensions.get( 'OVR_multiview2' );

					info.memory.textures += 2;

					var colorTexture = _gl.createTexture();
					_gl.bindTexture( 35866, colorTexture );
					_gl.texParameteri( 35866, 10240, 9728 );
					_gl.texParameteri( 35866, 10241, 9728 );
					_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );
					ext.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );

					var depthStencilTexture = _gl.createTexture();
					_gl.bindTexture( 35866, depthStencilTexture );
					_gl.texParameteri( 35866, 10240, 9728 );
					_gl.texParameteri( 35866, 10241, 9728 );
					_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );
					ext.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );

					var viewFramebuffers = new Array( numViews );
					for ( var i = 0; i < numViews; ++ i ) {

						viewFramebuffers[ i ] = _gl.createFramebuffer();
						_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );
						_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );

					}

					renderTargetProperties.__webglColorTexture = colorTexture;
					renderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;
					renderTargetProperties.__webglViewFramebuffers = viewFramebuffers;

					_gl.bindFramebuffer( 36160, null );
					_gl.bindTexture( 35866, null );

				}

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( 34067, textureProperties.__webglTexture );
				setTextureParameters( 34067, renderTarget.texture, supportsMips );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );

				}

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

					generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );

				}

				state.bindTexture( 34067, null );

			} else if ( ! isMultiview ) {

				state.bindTexture( 3553, textureProperties.__webglTexture );
				setTextureParameters( 3553, renderTarget.texture, supportsMips );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

					generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );

				}

				state.bindTexture( 3553, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;
			var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				generateMipmap( target, texture, renderTarget.width, renderTarget.height );
				state.bindTexture( target, null );

			}

		}

		function updateMultisampleRenderTarget( renderTarget ) {

			if ( renderTarget.isWebGLMultisampleRenderTarget ) {

				if ( isWebGL2 ) {

					var renderTargetProperties = properties.get( renderTarget );

					_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
					_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

					var width = renderTarget.width;
					var height = renderTarget.height;
					var mask = 16384;

					if ( renderTarget.depthBuffer ) { mask |= 256; }
					if ( renderTarget.stencilBuffer ) { mask |= 1024; }

					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

				} else {

					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

				}

			}

		}

		function getRenderTargetSamples( renderTarget ) {

			return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
				Math.min( maxSamples, renderTarget.samples ) : 0;

		}

		function updateVideoTexture( texture ) {

			var frame = info.render.frame;

			// Check the last frame we updated the VideoTexture

			if ( _videoTextures.get( texture ) !== frame ) {

				_videoTextures.set( texture, frame );
				texture.update();

			}

		}

		// backwards compatibility

		var warnedTexture2D = false;
		var warnedTextureCube = false;

		function safeSetTexture2D( texture, slot ) {

			if ( texture && texture.isWebGLRenderTarget ) {

				if ( warnedTexture2D === false ) {

					console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warnedTexture2D = true;

				}

				texture = texture.texture;

			}

			setTexture2D( texture, slot );

		}

		function safeSetTextureCube( texture, slot ) {

			if ( texture && texture.isWebGLRenderTargetCube ) {

				if ( warnedTextureCube === false ) {

					console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warnedTextureCube = true;

				}

				texture = texture.texture;

			}

			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
			// TODO: unify these code paths
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

				// CompressedTexture can have Array in image :/

				// this function alone should take care of cube textures
				setTextureCube( texture, slot );

			} else {

				// assumed: texture property of THREE.WebGLRenderTargetCube
				setTextureCubeDynamic( texture, slot );

			}

		}

		//

		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;

		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

		this.safeSetTexture2D = safeSetTexture2D;
		this.safeSetTextureCube = safeSetTextureCube;

	}

	/**
	 * @author thespite / http://www.twitter.com/thespite
	 */

	function WebGLUtils( gl, extensions, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		function convert( p ) {

			var extension;

			if ( p === UnsignedByteType ) { return 5121; }
			if ( p === UnsignedShort4444Type ) { return 32819; }
			if ( p === UnsignedShort5551Type ) { return 32820; }
			if ( p === UnsignedShort565Type ) { return 33635; }

			if ( p === ByteType ) { return 5120; }
			if ( p === ShortType ) { return 5122; }
			if ( p === UnsignedShortType ) { return 5123; }
			if ( p === IntType ) { return 5124; }
			if ( p === UnsignedIntType ) { return 5125; }
			if ( p === FloatType ) { return 5126; }

			if ( p === HalfFloatType ) {

				if ( isWebGL2 ) { return 5131; }

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) {

					return extension.HALF_FLOAT_OES;

				} else {

					return null;

				}

			}

			if ( p === AlphaFormat ) { return 6406; }
			if ( p === RGBFormat ) { return 6407; }
			if ( p === RGBAFormat ) { return 6408; }
			if ( p === LuminanceFormat ) { return 6409; }
			if ( p === LuminanceAlphaFormat ) { return 6410; }
			if ( p === DepthFormat ) { return 6402; }
			if ( p === DepthStencilFormat ) { return 34041; }
			if ( p === RedFormat ) { return 6403; }

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }
					if ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }
					if ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }
					if ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }

				} else {

					return null;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }
					if ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }
					if ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }
					if ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }

				} else {

					return null;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) {

					return extension.COMPRESSED_RGB_ETC1_WEBGL;

				} else {

					return null;

				}

			}

			if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
				p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
				p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
				p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
				p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_astc' );

				if ( extension !== null ) {

					// TODO Complete?

					return p;

				} else {

					return null;

				}

			}

			if ( p === UnsignedInt248Type ) {

				if ( isWebGL2 ) { return 34042; }

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) {

					return extension.UNSIGNED_INT_24_8_WEBGL;

				} else {

					return null;

				}

			}

		}

		return { convert: convert };

	}

	/**
	 * @author fernandojsg / http://fernandojsg.com
	 * @author Takahiro https://github.com/takahirox
	 */

	function WebGLMultiviewRenderTarget( width, height, numViews, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.depthBuffer = false;
		this.stencilBuffer = false;

		this.numViews = numViews;

	}

	WebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

		constructor: WebGLMultiviewRenderTarget,

		isWebGLMultiviewRenderTarget: true,

		copy: function ( source ) {

			WebGLRenderTarget.prototype.copy.call( this, source );

			this.numViews = source.numViews;

			return this;

		},

		setNumViews: function ( numViews ) {

			if ( this.numViews !== numViews ) {

				this.numViews = numViews;
				this.dispose();

			}

			return this;

		}

	} );

	/**
	 * @author fernandojsg / http://fernandojsg.com
	 * @author Takahiro https://github.com/takahirox
	 */

	function WebGLMultiview( renderer, gl ) {

		var DEFAULT_NUMVIEWS = 2;

		var extensions = renderer.extensions;
		var properties = renderer.properties;

		var renderTarget, currentRenderTarget;
		var mat3, mat4, cameraArray, renderSize;

		var available;
		var maxNumViews = 0;

		//

		function isAvailable() {

			if ( available === undefined ) {

				var extension = extensions.get( 'OVR_multiview2' );

				available = extension !== null && gl.getContextAttributes().antialias === false;

				if ( available ) {

					maxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );
					renderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );

					renderSize = new Vector2();
					mat4 = [];
					mat3 = [];
					cameraArray = [];

					for ( var i = 0; i < maxNumViews; i ++ ) {

						mat4[ i ] = new Matrix4();
						mat3[ i ] = new Matrix3();

					}

				}

			}

			return available;

		}

		function getCameraArray( camera ) {

			if ( camera.isArrayCamera ) { return camera.cameras; }

			cameraArray[ 0 ] = camera;

			return cameraArray;

		}

		function updateCameraProjectionMatricesUniform( camera, uniforms ) {

			var cameras = getCameraArray( camera );

			for ( var i = 0; i < cameras.length; i ++ ) {

				mat4[ i ].copy( cameras[ i ].projectionMatrix );

			}

			uniforms.setValue( gl, 'projectionMatrices', mat4 );

		}

		function updateCameraViewMatricesUniform( camera, uniforms ) {

			var cameras = getCameraArray( camera );

			for ( var i = 0; i < cameras.length; i ++ ) {

				mat4[ i ].copy( cameras[ i ].matrixWorldInverse );

			}

			uniforms.setValue( gl, 'viewMatrices', mat4 );

		}

		function updateObjectMatricesUniforms( object, camera, uniforms ) {

			var cameras = getCameraArray( camera );

			for ( var i = 0; i < cameras.length; i ++ ) {

				mat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );
				mat3[ i ].getNormalMatrix( mat4[ i ] );

			}

			uniforms.setValue( gl, 'modelViewMatrices', mat4 );
			uniforms.setValue( gl, 'normalMatrices', mat3 );

		}

		function isMultiviewCompatible( camera ) {

			if ( camera.isArrayCamera === undefined ) { return true; }

			var cameras = camera.cameras;

			if ( cameras.length > maxNumViews ) { return false; }

			for ( var i = 1, il = cameras.length; i < il; i ++ ) {

				if ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||
					cameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }

			}

			return true;

		}

		function resizeRenderTarget( camera ) {

			if ( currentRenderTarget ) {

				renderSize.set( currentRenderTarget.width, currentRenderTarget.height );

			} else {

				renderer.getDrawingBufferSize( renderSize );

			}

			if ( camera.isArrayCamera ) {

				var viewport = camera.cameras[ 0 ].viewport;

				renderTarget.setSize( viewport.z, viewport.w );
				renderTarget.setNumViews( camera.cameras.length );

			} else {

				renderTarget.setSize( renderSize.x, renderSize.y );
				renderTarget.setNumViews( DEFAULT_NUMVIEWS );

			}

		}

		function attachCamera( camera ) {

			if ( isMultiviewCompatible( camera ) === false ) { return; }

			currentRenderTarget = renderer.getRenderTarget();
			resizeRenderTarget( camera );
			renderer.setRenderTarget( renderTarget );

		}

		function detachCamera( camera ) {

			if ( renderTarget !== renderer.getRenderTarget() ) { return; }

			renderer.setRenderTarget( currentRenderTarget );

			flush( camera );

		}

		function flush( camera ) {

			var srcRenderTarget = renderTarget;
			var numViews = srcRenderTarget.numViews;

			var srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;

			var viewWidth = srcRenderTarget.width;
			var viewHeight = srcRenderTarget.height;

			if ( camera.isArrayCamera ) {

				for ( var i = 0; i < numViews; i ++ ) {

					var viewport = camera.cameras[ i ].viewport;

					var x1 = viewport.x;
					var y1 = viewport.y;
					var x2 = x1 + viewport.z;
					var y2 = y1 + viewport.w;

					gl.bindFramebuffer( 36008, srcFramebuffers[ i ] );
					gl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );

				}

			} else {

				gl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );
				gl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );

			}

		}

		this.isAvailable = isAvailable;
		this.attachCamera = attachCamera;
		this.detachCamera = detachCamera;
		this.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;
		this.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;
		this.updateObjectMatricesUniforms = updateObjectMatricesUniforms;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group,

		isGroup: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ArrayCamera( array ) {

		PerspectiveCamera.call( this );

		this.cameras = array || [];

	}

	ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

		constructor: ArrayCamera,

		isArrayCamera: true

	} );

	/**
	 * @author jsantell / https://www.jsantell.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var cameraLPos = new Vector3();
	var cameraRPos = new Vector3();

	/**
	 * Assumes 2 cameras that are parallel and share an X-axis, and that
	 * the cameras' projection and world matrices have already been set.
	 * And that near and far planes are identical for both cameras.
	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
	 */
	function setProjectionFromUnion( camera, cameraL, cameraR ) {

		cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
		cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

		var ipd = cameraLPos.distanceTo( cameraRPos );

		var projL = cameraL.projectionMatrix.elements;
		var projR = cameraR.projectionMatrix.elements;

		// VR systems will have identical far and near planes, and
		// most likely identical top and bottom frustum extents.
		// Use the left camera for these values.
		var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
		var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
		var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
		var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

		var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
		var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
		var left = near * leftFov;
		var right = near * rightFov;

		// Calculate the new camera's position offset from the
		// left camera. xOffset should be roughly half `ipd`.
		var zOffset = ipd / ( - leftFov + rightFov );
		var xOffset = zOffset * - leftFov;

		// TODO: Better way to apply this offset?
		cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
		camera.translateX( xOffset );
		camera.translateZ( zOffset );
		camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		// Find the union of the frustum values of the cameras and scale
		// the values so that the near plane's position does not change in world space,
		// although must now be relative to the new union camera.
		var near2 = near + zOffset;
		var far2 = far + zOffset;
		var left2 = left - xOffset;
		var right2 = right + ( ipd - xOffset );
		var top2 = topFov * far / far2 * near2;
		var bottom2 = bottomFov * far / far2 * near2;

		camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebVRManager( renderer ) {

		var renderWidth, renderHeight;
		var scope = this;

		var device = null;
		var frameData = null;

		var controllers = [];
		var standingMatrix = new Matrix4();
		var standingMatrixInverse = new Matrix4();

		var framebufferScaleFactor = 1.0;

		var referenceSpaceType = 'local-floor';

		if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

			frameData = new window.VRFrameData();
			window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

		}

		var matrixWorldInverse = new Matrix4();
		var tempQuaternion = new Quaternion();
		var tempPosition = new Vector3();

		var tempCamera = new PerspectiveCamera();

		var cameraL = new PerspectiveCamera();
		cameraL.viewport = new Vector4();
		cameraL.layers.enable( 1 );

		var cameraR = new PerspectiveCamera();
		cameraR.viewport = new Vector4();
		cameraR.layers.enable( 2 );

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		function isPresenting() {

			return device !== null && device.isPresenting === true;

		}

		var currentSize = new Vector2(), currentPixelRatio;

		function onVRDisplayPresentChange() {

			if ( isPresenting() ) {

				var eyeParameters = device.getEyeParameters( 'left' );
				renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
				renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;

				currentPixelRatio = renderer.getPixelRatio();
				renderer.getSize( currentSize );

				renderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );

				cameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );
				cameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );

				animation.start();

				scope.dispatchEvent( { type: 'sessionstart' } );

			} else {

				if ( scope.enabled ) {

					renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

				}

				animation.stop();

				scope.dispatchEvent( { type: 'sessionend' } );

			}

		}

		//

		var triggers = [];
		var grips = [];

		function findGamepad( id ) {

			var gamepads = navigator.getGamepads && navigator.getGamepads();

			for ( var i = 0, l = gamepads.length; i < l; i ++ ) {

				var gamepad = gamepads[ i ];

				if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
					gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
					gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
					gamepad.id.startsWith( 'HTC Vive Focus' ) ||
					gamepad.id.startsWith( 'Spatial Controller' ) ) ) {

					var hand = gamepad.hand;

					if ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }
					if ( id === 1 && ( hand === 'left' ) ) { return gamepad; }

				}

			}

		}

		function updateControllers() {

			for ( var i = 0; i < controllers.length; i ++ ) {

				var controller = controllers[ i ];

				var gamepad = findGamepad( i );

				if ( gamepad !== undefined && gamepad.pose !== undefined ) {

					if ( gamepad.pose === null ) { return; }

					// Pose

					var pose = gamepad.pose;

					if ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }

					if ( pose.position !== null ) { controller.position.fromArray( pose.position ); }
					if ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }
					controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
					controller.matrix.premultiply( standingMatrix );
					controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
					controller.matrixWorldNeedsUpdate = true;
					controller.visible = true;

					// Trigger

					var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;

					if ( triggers[ i ] === undefined ) { triggers[ i ] = false; }

					if ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {

						triggers[ i ] = gamepad.buttons[ buttonId ].pressed;

						if ( triggers[ i ] === true ) {

							controller.dispatchEvent( { type: 'selectstart' } );

						} else {

							controller.dispatchEvent( { type: 'selectend' } );
							controller.dispatchEvent( { type: 'select' } );

						}

					}

					// Grip
					buttonId = 2;

					if ( grips[ i ] === undefined ) { grips[ i ] = false; }

					// Skip if the grip button doesn't exist on this controller
					if ( gamepad.buttons[ buttonId ] !== undefined ) {

						if ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {

							grips[ i ] = gamepad.buttons[ buttonId ].pressed;

							if ( grips[ i ] === true ) {

								controller.dispatchEvent( { type: 'squeezestart' } );

							} else {

								controller.dispatchEvent( { type: 'squeezeend' } );
								controller.dispatchEvent( { type: 'squeeze' } );

							}

						}

					}

				} else {

					controller.visible = false;

				}

			}

		}

		function updateViewportFromBounds( viewport, bounds ) {

			if ( bounds !== null && bounds.length === 4 ) {

				viewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );

			}

		}

		//

		this.enabled = false;

		this.getController = function ( id ) {

			var controller = controllers[ id ];

			if ( controller === undefined ) {

				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;

				controllers[ id ] = controller;

			}

			return controller;

		};

		this.getDevice = function () {

			return device;

		};

		this.setDevice = function ( value ) {

			if ( value !== undefined ) { device = value; }

			animation.setContext( value );

		};

		this.setFramebufferScaleFactor = function ( value ) {

			framebufferScaleFactor = value;

		};

		this.setReferenceSpaceType = function ( value ) {

			referenceSpaceType = value;

		};

		this.getCamera = function ( camera ) {

			var userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;

			device.depthNear = camera.near;
			device.depthFar = camera.far;

			device.getFrameData( frameData );

			//

			if ( referenceSpaceType === 'local-floor' ) {

				var stageParameters = device.stageParameters;

				if ( stageParameters ) {

					standingMatrix.fromArray( stageParameters.sittingToStandingTransform );

				} else {

					standingMatrix.makeTranslation( 0, userHeight, 0 );

				}

			}


			var pose = frameData.pose;

			tempCamera.matrix.copy( standingMatrix );
			tempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );

			if ( pose.orientation !== null ) {

				tempQuaternion.fromArray( pose.orientation );
				tempCamera.quaternion.multiply( tempQuaternion );

			}

			if ( pose.position !== null ) {

				tempQuaternion.setFromRotationMatrix( standingMatrix );
				tempPosition.fromArray( pose.position );
				tempPosition.applyQuaternion( tempQuaternion );
				tempCamera.position.add( tempPosition );

			}

			tempCamera.updateMatrixWorld();

			//

			camera.matrixWorld.copy( tempCamera.matrixWorld );

			var children = camera.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( true );

			}

			//

			cameraL.near = camera.near;
			cameraR.near = camera.near;

			cameraL.far = camera.far;
			cameraR.far = camera.far;

			cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
			cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

			// TODO (mrdoob) Double check this code

			standingMatrixInverse.getInverse( standingMatrix );

			if ( referenceSpaceType === 'local-floor' ) {

				cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
				cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

			}

			var parent = camera.parent;

			if ( parent !== null ) {

				matrixWorldInverse.getInverse( parent.matrixWorld );

				cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
				cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

			}

			// envMap and Mirror needs camera.matrixWorld

			cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
			cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

			cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
			cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

			setProjectionFromUnion( cameraVR, cameraL, cameraR );

			//

			var layers = device.getLayers();

			if ( layers.length ) {

				var layer = layers[ 0 ];

				updateViewportFromBounds( cameraL.viewport, layer.leftBounds );
				updateViewportFromBounds( cameraR.viewport, layer.rightBounds );

			}

			updateControllers();

			return cameraVR;

		};

		this.getStandingMatrix = function () {

			return standingMatrix;

		};

		this.isPresenting = isPresenting;

		// Animation Loop

		var animation = new WebGLAnimation();

		this.setAnimationLoop = function ( callback ) {

			animation.setAnimationLoop( callback );

			if ( isPresenting() ) { animation.start(); }

		};

		this.submitFrame = function () {

			if ( isPresenting() ) { device.submitFrame(); }

		};

		this.dispose = function () {

			if ( typeof window !== 'undefined' ) {

				window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

			}

		};

		// DEPRECATED

		this.setFrameOfReferenceType = function () {

			console.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );

		};

	}

	Object.assign( WebVRManager.prototype, EventDispatcher.prototype );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebXRManager( renderer, gl ) {

		var scope = this;

		var session = null;

		// var framebufferScaleFactor = 1.0;

		var referenceSpace = null;
		var referenceSpaceType = 'local-floor';

		var pose = null;

		var controllers = [];
		var sortedInputSources = [];

		function isPresenting() {

			return session !== null && referenceSpace !== null;

		}

		//

		var cameraL = new PerspectiveCamera();
		cameraL.layers.enable( 1 );
		cameraL.viewport = new Vector4();

		var cameraR = new PerspectiveCamera();
		cameraR.layers.enable( 2 );
		cameraR.viewport = new Vector4();

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		this.enabled = false;

		this.getController = function ( id ) {

			var controller = controllers[ id ];

			if ( controller === undefined ) {

				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;

				controllers[ id ] = controller;

			}

			return controller;

		};

		//

		function onSessionEvent( event ) {

			for ( var i = 0; i < controllers.length; i ++ ) {

				if ( sortedInputSources[ i ] === event.inputSource ) {

					controllers[ i ].dispatchEvent( { type: event.type } );

				}

			}

		}

		function onSessionEnd() {

			renderer.setFramebuffer( null );
			renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
			animation.stop();

			scope.dispatchEvent( { type: 'sessionend' } );

		}

		function onRequestReferenceSpace( value ) {

			referenceSpace = value;

			animation.setContext( session );
			animation.start();

			scope.dispatchEvent( { type: 'sessionstart' } );

		}

		this.setFramebufferScaleFactor = function ( /* value */ ) {

			// framebufferScaleFactor = value;

		};

		this.setReferenceSpaceType = function ( value ) {

			referenceSpaceType = value;

		};

		this.getSession = function () {

			return session;

		};

		this.setSession = function ( value ) {

			session = value;

			if ( session !== null ) {

				session.addEventListener( 'select', onSessionEvent );
				session.addEventListener( 'selectstart', onSessionEvent );
				session.addEventListener( 'selectend', onSessionEvent );
				session.addEventListener( 'squeeze', onSessionEvent );
				session.addEventListener( 'squeezestart', onSessionEvent );
				session.addEventListener( 'squeezeend', onSessionEvent );
				session.addEventListener( 'end', onSessionEnd );

				// eslint-disable-next-line no-undef
				session.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );

				session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );

				//

				session.addEventListener( 'inputsourceschange', updateInputSources );

				updateInputSources();

			}

		};

		function updateInputSources() {

			for ( var i = 0; i < controllers.length; i ++ ) {

				sortedInputSources[ i ] = findInputSource( i );

			}

		}

		function findInputSource( id ) {

			var inputSources = session.inputSources;

			for ( var i = 0; i < inputSources.length; i ++ ) {

				var inputSource = inputSources[ i ];
				var handedness = inputSource.handedness;

				if ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }
				if ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }

			}

		}

		//

		function updateCamera( camera, parent ) {

			if ( parent === null ) {

				camera.matrixWorld.copy( camera.matrix );

			} else {

				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

			}

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		}

		this.getCamera = function ( camera ) {

			var parent = camera.parent;
			var cameras = cameraVR.cameras;

			updateCamera( cameraVR, parent );

			for ( var i = 0; i < cameras.length; i ++ ) {

				updateCamera( cameras[ i ], parent );

			}

			// update camera and its children

			camera.matrixWorld.copy( cameraVR.matrixWorld );

			var children = camera.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( true );

			}

			setProjectionFromUnion( cameraVR, cameraL, cameraR );

			return cameraVR;

		};

		this.isPresenting = isPresenting;

		// Animation Loop

		var onAnimationFrameCallback = null;

		function onAnimationFrame( time, frame ) {

			pose = frame.getViewerPose( referenceSpace );

			if ( pose !== null ) {

				var views = pose.views;
				var baseLayer = session.renderState.baseLayer;

				renderer.setFramebuffer( baseLayer.framebuffer );

				for ( var i = 0; i < views.length; i ++ ) {

					var view = views[ i ];
					var viewport = baseLayer.getViewport( view );
					var viewMatrix = view.transform.inverse.matrix;

					var camera = cameraVR.cameras[ i ];
					camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
					camera.projectionMatrix.fromArray( view.projectionMatrix );
					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

					if ( i === 0 ) {

						cameraVR.matrix.copy( camera.matrix );

					}

				}

			}

			//

			for ( var i = 0; i < controllers.length; i ++ ) {

				var controller = controllers[ i ];

				var inputSource = sortedInputSources[ i ];

				if ( inputSource ) {

					var inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

					if ( inputPose !== null ) {

						controller.matrix.fromArray( inputPose.transform.matrix );
						controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
						controller.visible = true;

						continue;

					}

				}

				controller.visible = false;

			}

			if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }

		}

		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;

		};

		this.dispose = function () {};

		// DEPRECATED

		this.getStandingMatrix = function () {

			console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
			return new Matrix4();

		};

		this.getDevice = function () {

			console.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );

		};

		this.setDevice = function () {

			console.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );

		};

		this.setFrameOfReferenceType = function () {

			console.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );

		};

		this.submitFrame = function () {};

	}

	Object.assign( WebXRManager.prototype, EventDispatcher.prototype );

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,

			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
			_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
			_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

		var currentRenderList = null;
		var currentRenderState = null;

		// public properties

		this.domElement = _canvas;

		// Debug configuration container
		this.debug = {

			/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
			checkShaderErrors: true
		};

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

			_isContextLost = false,

			// internal state cache

			_framebuffer = null,

			_currentActiveCubeFace = 0,
			_currentActiveMipmapLevel = 0,
			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,

			// geometry and program caching

			_currentGeometryProgram = {
				geometry: null,
				program: null,
				wireframe: false
			},

			_currentCamera = null,
			_currentArrayCamera = null,

			_currentViewport = new Vector4(),
			_currentScissor = new Vector4(),
			_currentScissorTest = null,

			//

			_width = _canvas.width,
			_height = _canvas.height,

			_pixelRatio = 1,

			_viewport = new Vector4( 0, 0, _width, _height ),
			_scissor = new Vector4( 0, 0, _width, _height ),
			_scissorTest = false,

			// frustum

			_frustum = new Frustum(),

			// clipping

			_clipping = new WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,

			// camera matrices cache

			_projScreenMatrix = new Matrix4(),

			_vector3 = new Vector3();

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		// initialize

		var _gl;

		try {

			var contextAttributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference,
				failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,
				xrCompatible: true
			};

			// event listeners must be registered before WebGL context is created, see #12753

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

			_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw new Error( 'Error creating WebGL context with your selected attributes.' );

				} else {

					throw new Error( 'Error creating WebGL context.' );

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error.message );
			throw error;

		}

		var extensions, capabilities, state, info;
		var properties, textures, attributes, geometries, objects;
		var programCache, renderLists, renderStates;

		var background, morphtargets, bufferRenderer, indexedBufferRenderer;

		var utils;

		function initGLContext() {

			extensions = new WebGLExtensions( _gl );

			capabilities = new WebGLCapabilities( _gl, extensions, parameters );

			if ( capabilities.isWebGL2 === false ) {

				extensions.get( 'WEBGL_depth_texture' );
				extensions.get( 'OES_texture_float' );
				extensions.get( 'OES_texture_half_float' );
				extensions.get( 'OES_texture_half_float_linear' );
				extensions.get( 'OES_standard_derivatives' );
				extensions.get( 'OES_element_index_uint' );
				extensions.get( 'ANGLE_instanced_arrays' );

			}

			extensions.get( 'OES_texture_float_linear' );

			utils = new WebGLUtils( _gl, extensions, capabilities );

			state = new WebGLState( _gl, extensions, capabilities );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

			info = new WebGLInfo( _gl );
			properties = new WebGLProperties();
			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
			attributes = new WebGLAttributes( _gl );
			geometries = new WebGLGeometries( _gl, attributes, info );
			objects = new WebGLObjects( _gl, geometries, attributes, info );
			morphtargets = new WebGLMorphtargets( _gl );
			programCache = new WebGLPrograms( _this, extensions, capabilities );
			renderLists = new WebGLRenderLists();
			renderStates = new WebGLRenderStates();

			background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

			info.programs = programCache.programs;

			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.state = state;
			_this.info = info;

		}

		initGLContext();

		// vr

		var vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );

		this.vr = vr;

		// Multiview

		var multiview = new WebGLMultiview( _this, _gl );

		// shadow map

		var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

		this.shadowMap = shadowMap;

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) { extension.loseContext(); }

		};

		this.forceContextRestore = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) { extension.restoreContext(); }

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) { return; }

			_pixelRatio = value;

			this.setSize( _width, _height, false );

		};

		this.getSize = function ( target ) {

			if ( target === undefined ) {

				console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );

				target = new Vector2();

			}

			return target.set( _width, _height );

		};

		this.setSize = function ( width, height, updateStyle ) {

			if ( vr.isPresenting() ) {

				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
				return;

			}

			_width = width;
			_height = height;

			_canvas.width = Math.floor( width * _pixelRatio );
			_canvas.height = Math.floor( height * _pixelRatio );

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.getDrawingBufferSize = function ( target ) {

			if ( target === undefined ) {

				console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );

				target = new Vector2();

			}

			return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

		};

		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

			_width = width;
			_height = height;

			_pixelRatio = pixelRatio;

			_canvas.width = Math.floor( width * pixelRatio );
			_canvas.height = Math.floor( height * pixelRatio );

			this.setViewport( 0, 0, width, height );

		};

		this.getCurrentViewport = function ( target ) {

			if ( target === undefined ) {

				console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );

				target = new Vector4();

			}

			return target.copy( _currentViewport );

		};

		this.getViewport = function ( target ) {

			return target.copy( _viewport );

		};

		this.setViewport = function ( x, y, width, height ) {

			if ( x.isVector4 ) {

				_viewport.set( x.x, x.y, x.z, x.w );

			} else {

				_viewport.set( x, y, width, height );

			}

			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

		};

		this.getScissor = function ( target ) {

			return target.copy( _scissor );

		};

		this.setScissor = function ( x, y, width, height ) {

			if ( x.isVector4 ) {

				_scissor.set( x.x, x.y, x.z, x.w );

			} else {

				_scissor.set( x, y, width, height );

			}

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

		};

		this.getScissorTest = function () {

			return _scissorTest;

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return background.getClearColor();

		};

		this.setClearColor = function () {

			background.setClearColor.apply( background, arguments );

		};

		this.getClearAlpha = function () {

			return background.getClearAlpha();

		};

		this.setClearAlpha = function () {

			background.setClearAlpha.apply( background, arguments );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) { bits |= 16384; }
			if ( depth === undefined || depth ) { bits |= 256; }
			if ( stencil === undefined || stencil ) { bits |= 1024; }

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		//

		this.dispose = function () {

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			objects.dispose();

			vr.dispose();

			animation.stop();

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			console.log( 'THREE.WebGLRenderer: Context Lost.' );

			_isContextLost = true;

		}

		function onContextRestore( /* event */ ) {

			console.log( 'THREE.WebGLRenderer: Context Restored.' );

			_isContextLost = false;

			initGLContext();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.remove( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		function renderObjectImmediate( object, program ) {

			object.render( function ( object ) {

				_this.renderBufferImmediate( object, program );

			} );

		}

		this.renderBufferImmediate = function ( object, program ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }
			if ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }
			if ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }
			if ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }

			var programAttributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( 34962, buffers.position );
				_gl.bufferData( 34962, object.positionArray, 35048 );

				state.enableAttribute( programAttributes.position );
				_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( 34962, buffers.normal );
				_gl.bufferData( 34962, object.normalArray, 35048 );

				state.enableAttribute( programAttributes.normal );
				_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );

			}

			if ( object.hasUvs ) {

				_gl.bindBuffer( 34962, buffers.uv );
				_gl.bufferData( 34962, object.uvArray, 35048 );

				state.enableAttribute( programAttributes.uv );
				_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );

			}

			if ( object.hasColors ) {

				_gl.bindBuffer( 34962, buffers.color );
				_gl.bufferData( 34962, object.colorArray, 35048 );

				state.enableAttribute( programAttributes.color );
				_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( 4, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

			state.setMaterial( material, frontFaceCW );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;

			if ( _currentGeometryProgram.geometry !== geometry.id ||
				_currentGeometryProgram.program !== program.id ||
				_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {

				_currentGeometryProgram.geometry = geometry.id;
				_currentGeometryProgram.program = program.id;
				_currentGeometryProgram.wireframe = material.wireframe === true;
				updateBuffers = true;

			}

			if ( object.morphTargetInfluences ) {

				morphtargets.update( object, geometry, material, program );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;

			//

			if ( index !== null && index.count === 0 ) { return; }
			if ( position === undefined || position.count === 0 ) { return; }

			//

			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = geometries.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var attribute;
			var renderer = bufferRenderer;

			if ( index !== null ) {

				attribute = attributes.get( index );

				renderer = indexedBufferRenderer;
				renderer.setIndex( attribute );

			}

			if ( updateBuffers ) {

				setupVertexAttributes( object, geometry, material, program );

				if ( index !== null ) {

					_gl.bindBuffer( 34963, attribute.buffer );

				}

			}

			//

			var dataCount = Infinity;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) { return; }

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( 1 );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( 4 );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( 5 );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( 6 );
							break;

					}

				}

			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( 1 );

				} else if ( object.isLineLoop ) {

					renderer.setMode( 2 );

				} else {

					renderer.setMode( 3 );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( 0 );

			} else if ( object.isSprite ) {

				renderer.setMode( 4 );

			}

			if ( object.isInstancedMesh ) {

				renderer.renderInstances( geometry, drawStart, drawCount, object.count );

			} else if ( geometry.isInstancedBufferGeometry ) {

				renderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( object, geometry, material, program ) {

			if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }

			}

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var normalized = geometryAttribute.normalized;
						var size = geometryAttribute.itemSize;

						var attribute = attributes.get( geometryAttribute );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) { continue; }

						var buffer = attribute.buffer;
						var type = attribute.type;
						var bytesPerElement = attribute.bytesPerElement;

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( 34962, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( 34962, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

						}

					} else if ( name === 'instanceMatrix' ) {

						var attribute = attributes.get( object.instanceMatrix );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) { continue; }

						var buffer = attribute.buffer;
						var type = attribute.type;

						state.enableAttributeAndDivisor( programAttribute + 0, 1 );
						state.enableAttributeAndDivisor( programAttribute + 1, 1 );
						state.enableAttributeAndDivisor( programAttribute + 2, 1 );
						state.enableAttributeAndDivisor( programAttribute + 3, 1 );

						_gl.bindBuffer( 34962, buffer );

						_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );
						_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );
						_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );
						_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Compile

		this.compile = function ( scene, camera ) {

			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();

			scene.traverse( function ( object ) {

				if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				}

			} );

			currentRenderState.setupLights( camera );

			scene.traverse( function ( object ) {

				if ( object.material ) {

					if ( Array.isArray( object.material ) ) {

						for ( var i = 0; i < object.material.length; i ++ ) {

							initMaterial( object.material[ i ], scene.fog, object );

						}

					} else {

						initMaterial( object.material, scene.fog, object );

					}

				}

			} );

		};

		// Animation Loop

		var onAnimationFrameCallback = null;

		function onAnimationFrame( time ) {

			if ( vr.isPresenting() ) { return; }
			if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }

		}

		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		if ( typeof window !== 'undefined' ) { animation.setContext( window ); }

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;
			vr.setAnimationLoop( callback );

			animation.start();

		};

		// Rendering

		this.render = function ( scene, camera ) {

			var renderTarget, forceClear;

			if ( arguments[ 2 ] !== undefined ) {

				console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
				renderTarget = arguments[ 2 ];

			}

			if ( arguments[ 3 ] !== undefined ) {

				console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
				forceClear = arguments[ 3 ];

			}

			if ( ! ( camera && camera.isCamera ) ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			if ( _isContextLost ) { return; }

			// reset caching for this frame

			_currentGeometryProgram.geometry = null;
			_currentGeometryProgram.program = null;
			_currentGeometryProgram.wireframe = false;
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }

			// update camera matrices and frustum

			if ( camera.parent === null ) { camera.updateMatrixWorld(); }

			if ( vr.enabled && vr.isPresenting() ) {

				camera = vr.getCamera( camera );

			}

			//

			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();

			scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			currentRenderList = renderLists.get( scene, camera );
			currentRenderList.init();

			projectObject( scene, camera, 0, _this.sortObjects );

			if ( _this.sortObjects === true ) {

				currentRenderList.sort();

			}

			//

			if ( _clippingEnabled ) { _clipping.beginShadows(); }

			var shadowsArray = currentRenderState.state.shadowsArray;

			shadowMap.render( shadowsArray, scene, camera );

			currentRenderState.setupLights( camera );

			if ( _clippingEnabled ) { _clipping.endShadows(); }

			//

			if ( this.info.autoReset ) { this.info.reset(); }

			if ( renderTarget !== undefined ) {

				this.setRenderTarget( renderTarget );

			}

			if ( vr.enabled && multiview.isAvailable() ) {

				multiview.attachCamera( camera );

			}

			//

			background.render( currentRenderList, scene, camera, forceClear );

			// render scene

			var opaqueObjects = currentRenderList.opaque;
			var transparentObjects = currentRenderList.transparent;

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }
				if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }

			} else {

				// opaque pass (front-to-back order)

				if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }

				// transparent pass (back-to-front order)

				if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }

			}

			//

			scene.onAfterRender( _this, scene, camera );

			//

			if ( _currentRenderTarget !== null ) {

				// Generate mipmap if we're using any kind of mipmap filtering

				textures.updateRenderTargetMipmap( _currentRenderTarget );

				// resolve multisample renderbuffers to a single-sample texture if necessary

				textures.updateMultisampleRenderTarget( _currentRenderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest( true );
			state.buffers.depth.setMask( true );
			state.buffers.color.setMask( true );

			state.setPolygonOffset( false );

			if ( vr.enabled ) {

				if ( multiview.isAvailable() ) {

					multiview.detachCamera( camera );

				}

				vr.submitFrame();

			}

			// _gl.finish();

			currentRenderList = null;
			currentRenderState = null;

		};

		function projectObject( object, camera, groupOrder, sortObjects ) {

			if ( object.visible === false ) { return; }

			var visible = object.layers.test( camera.layers );

			if ( visible ) {

				if ( object.isGroup ) {

					groupOrder = object.renderOrder;

				} else if ( object.isLOD ) {

					if ( object.autoUpdate === true ) { object.update( camera ); }

				} else if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				} else if ( object.isSprite ) {

					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						if ( material.visible ) {

							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

						}

					}

				} else if ( object.isImmediateRenderObject ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						// update skeleton only once in a frame

						if ( object.skeleton.frame !== info.render.frame ) {

							object.skeleton.update();
							object.skeleton.frame = info.render.frame;

						}

					}

					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						if ( Array.isArray( material ) ) {

							var groups = geometry.groups;

							for ( var i = 0, l = groups.length; i < l; i ++ ) {

								var group = groups[ i ];
								var groupMaterial = material[ group.materialIndex ];

								if ( groupMaterial && groupMaterial.visible ) {

									currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

								}

							}

						} else if ( material.visible ) {

							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, groupOrder, sortObjects );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				if ( camera.isArrayCamera ) {

					_currentArrayCamera = camera;

					if ( vr.enabled && multiview.isAvailable() ) {

						renderObject( object, scene, camera, geometry, material, group );

					} else {

						var cameras = camera.cameras;

						for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

							var camera2 = cameras[ j ];

							if ( object.layers.test( camera2.layers ) ) {

								state.viewport( _currentViewport.copy( camera2.viewport ) );

								currentRenderState.setupLights( camera2 );

								renderObject( object, scene, camera2, geometry, material, group );

							}

						}

					}

				} else {

					_currentArrayCamera = null;

					renderObject( object, scene, camera, geometry, material, group );

				}

			}

		}

		function renderObject( object, scene, camera, geometry, material, group ) {

			object.onBeforeRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

			if ( object.isImmediateRenderObject ) {

				state.setMaterial( material );

				var program = setProgram( camera, scene.fog, material, object );

				_currentGeometryProgram.geometry = null;
				_currentGeometryProgram.program = null;
				_currentGeometryProgram.wireframe = false;

				renderObjectImmediate( object, program );

			} else {

				_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

			}

			object.onAfterRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var lights = currentRenderState.state.lights;
			var shadowsArray = currentRenderState.state.shadowsArray;

			var lightsStateVersion = lights.state.version;

			var parameters = programCache.getParameters(
				material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var programCacheKey = programCache.getProgramCacheKey( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.cacheKey !== programCacheKey ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {

				materialProperties.lightsStateVersion = lightsStateVersion;

				programChange = false;

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.shader = {
						name: material.type,
						uniforms: cloneUniforms( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.shader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.onBeforeCompile( materialProperties.shader, _this );

				// Computing cache key again as onBeforeCompile may have changed the shaders
				programCacheKey = programCache.getProgramCacheKey( material, parameters );

				program = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );

				materialProperties.program = program;
				material.program = program;

			}

			var programAttributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.shader.uniforms;

			if ( ! material.isShaderMaterial &&
				! material.isRawShaderMaterial ||
				material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.needsLights = materialNeedsLights( material );
			materialProperties.lightsStateVersion = lightsStateVersion;

			if ( materialProperties.needsLights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.lightProbe.value = lights.state.probe;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.pointLights.value = lights.state.point;
				uniforms.hemisphereLights.value = lights.state.hemi;

				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
				// TODO (abelnation): add area lights shadow info to uniforms

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
					WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setProgram( camera, fog, material, object ) {

			textures.resetTextureUnits();

			var materialProperties = properties.get( material );
			var lights = currentRenderState.state.lights;

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
						camera === _currentCamera &&
						material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
						material.clippingPlanes, material.clipIntersection, material.clipShadows,
						camera, materialProperties, useCache );

				}

			}

			if ( material.version === materialProperties.__version ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
					materialProperties.numIntersection !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.version !== materialProperties.__version ) {

				initMaterial( material, fog, object );
				materialProperties.__version = material.version;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.shader.uniforms;

			if ( state.useProgram( program.program ) ) {

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || _currentCamera !== camera ) {

				if ( program.numMultiviewViews > 0 ) {

					multiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );

				} else {

					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

				}

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}

				if ( _currentCamera !== camera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
					material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial ||
					material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
							_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ) {

					p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

				}

				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ||
					material.skinning ) {

					if ( program.numMultiviewViews > 0 ) {

						multiview.updateCameraViewMatricesUniform( camera, p_uniforms );

					} else {

						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

					}

				}

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					var bones = skeleton.bones;

					if ( capabilities.floatVertexTextures ) {

						if ( skeleton.boneTexture === undefined ) {

							// layout (1 matrix = 4 pixels)
							//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
							//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
							//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
							//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
							//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


							var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
							size = _Math.ceilPowerOfTwo( size );
							size = Math.max( size, 4 );

							var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
							boneMatrices.set( skeleton.boneMatrices ); // copy current values

							var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

							skeleton.boneMatrices = boneMatrices;
							skeleton.boneTexture = boneTexture;
							skeleton.boneTextureSize = size;

						}

						p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
						p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

				materialProperties.receiveShadow = object.receiveShadow;
				p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

			}

			if ( refreshMaterial ) {

				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
				p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

				if ( materialProperties.needsLights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshToonMaterial ) {

						refreshUniformsToon( m_uniforms, material );

					} else {

						refreshUniformsPhong( m_uniforms, material );

					}

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshPhysicalMaterial ) {

						refreshUniformsPhysical( m_uniforms, material );

					} else {

						refreshUniformsStandard( m_uniforms, material );

					}

				} else if ( material.isMeshMatcapMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					refreshUniformsMatcap( m_uniforms, material );

				} else if ( material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDepth( m_uniforms, material );

				} else if ( material.isMeshDistanceMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDistance( m_uniforms, material );

				} else if ( material.isMeshNormalMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsNormal( m_uniforms, material );

				} else if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

					if ( material.isLineDashedMaterial ) {

						refreshUniformsDash( m_uniforms, material );

					}

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isSpriteMaterial ) {

					refreshUniformsSprites( m_uniforms, material );

				} else if ( material.isShadowMaterial ) {

					m_uniforms.color.value.copy( material.color );
					m_uniforms.opacity.value = material.opacity;

				}

				// RectAreaLight Texture
				// TODO (mrdoob): Find a nicer implementation

				if ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }
				if ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

				if ( material.isShaderMaterial ) {

					material.uniformsNeedUpdate = false; // #15581

				}

			}

			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
				material.uniformsNeedUpdate = false;

			}

			if ( material.isSpriteMaterial ) {

				p_uniforms.setValue( _gl, 'center', object.center );

			}

			// common matrices

			if ( program.numMultiviewViews > 0 ) {

				multiview.updateObjectMatricesUniforms( object, camera, p_uniforms );

			} else {

				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );

			}

			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			if ( material.color ) {

				uniforms.diffuse.value.copy( material.color );

			}

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			if ( material.specularMap ) {

				uniforms.specularMap.value = material.specularMap;

			}

			if ( material.envMap ) {

				uniforms.envMap.value = material.envMap;

				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

				uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			}

			if ( uvScaleMap !== undefined ) {

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsSprites( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			}

			if ( uvScaleMap !== undefined ) {

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value.copy( fog.color );

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value.copy( material.specular );
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsToon( uniforms, material ) {

			refreshUniformsPhong( uniforms, material );

			if ( material.gradientMap ) {

				uniforms.gradientMap.value = material.gradientMap;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			refreshUniformsStandard( uniforms, material );

			uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

			uniforms.clearcoat.value = material.clearcoat;
			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
			if ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }

			if ( material.clearcoatNormalMap ) {

				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

				if ( material.side === BackSide ) {

					uniforms.clearcoatNormalScale.value.negate();

				}

			}

			uniforms.transparency.value = material.transparency;

		}

		function refreshUniformsMatcap( uniforms, material ) {

			if ( material.matcap ) {

				uniforms.matcap.value = material.matcap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsDepth( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsDistance( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			uniforms.referencePosition.value.copy( material.referencePosition );
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;

		}

		function refreshUniformsNormal( uniforms, material ) {

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;
			uniforms.lightProbe.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		function materialNeedsLights( material ) {

			return material.isMeshLambertMaterial || material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial || material.isShadowMaterial ||
				( material.isShaderMaterial && material.lights === true );

		}

		//
		this.setFramebuffer = function ( value ) {

			if ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }

			_framebuffer = value;

		};

		this.getActiveCubeFace = function () {

			return _currentActiveCubeFace;

		};

		this.getActiveMipmapLevel = function () {

			return _currentActiveMipmapLevel;

		};

		this.getRenderTarget = function () {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {

			_currentRenderTarget = renderTarget;
			_currentActiveCubeFace = activeCubeFace;
			_currentActiveMipmapLevel = activeMipmapLevel;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var framebuffer = _framebuffer;
			var isCube = false;

			if ( renderTarget ) {

				var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLRenderTargetCube ) {

					framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
					isCube = true;

				} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

					framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

				} else {

					framebuffer = __webglFramebuffer;

				}

				_currentViewport.copy( renderTarget.viewport );
				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

			} else {

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
				_currentScissorTest = _scissorTest;

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( 36160, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.viewport( _currentViewport );
			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {

				framebuffer = framebuffer[ activeCubeFaceIndex ];

			}

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( 36160, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
						! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( 36160, _currentFramebuffer );

					}

				}

			}

		};

		this.copyFramebufferToTexture = function ( position, texture, level ) {

			if ( level === undefined ) { level = 0; }

			var levelScale = Math.pow( 2, - level );
			var width = Math.floor( texture.image.width * levelScale );
			var height = Math.floor( texture.image.height * levelScale );
			var glFormat = utils.convert( texture.format );

			textures.setTexture2D( texture, 0 );

			_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );

			state.unbindTexture();

		};

		this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

			var width = srcTexture.image.width;
			var height = srcTexture.image.height;
			var glFormat = utils.convert( dstTexture.format );
			var glType = utils.convert( dstTexture.type );

			textures.setTexture2D( dstTexture, 0 );

			if ( srcTexture.isDataTexture ) {

				_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

			} else {

				_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );

			}

			state.unbindTexture();

		};

		this.initTexture = function ( texture ) {

			textures.setTexture2D( texture, 0 );

			state.unbindTexture();

		};

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	Object.assign( FogExp2.prototype, {

		isFogExp2: true,

		clone: function () {

			return new FogExp2( this.color, this.density );

		},

		toJSON: function ( /* meta */ ) {

			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Object.assign( Fog.prototype, {

		isFog: true,

		clone: function () {

			return new Fog( this.color, this.near, this.far );

		},

		toJSON: function ( /* meta */ ) {

			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	Object.assign( InterleavedBuffer.prototype, {

		isInterleavedBuffer: true,

		onUploadCallback: function () {},

		setUsage: function ( value ) {

			this.usage = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.usage = source.usage;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}

	Object.defineProperties( InterleavedBufferAttribute.prototype, {

		count: {

			get: function () {

				return this.data.count;

			}

		},

		array: {

			get: function () {

				return this.data.array;

			}

		}

	} );

	Object.assign( InterleavedBufferAttribute.prototype, {

		isInterleavedBufferAttribute: true,

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  map: new THREE.Texture( <Image> ),
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *  rotation: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.alphaMap = null;

		this.rotation = 0;

		this.sizeAttenuation = true;

		this.transparent = true;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;
	SpriteMaterial.prototype.isSpriteMaterial = true;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.rotation = source.rotation;

		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var _geometry;

	var _intersectPoint = new Vector3();
	var _worldScale = new Vector3();
	var _mvPosition = new Vector3();

	var _alignedPosition = new Vector2();
	var _rotatedPosition = new Vector2();
	var _viewWorldMatrix = new Matrix4();

	var _vA$1 = new Vector3();
	var _vB$1 = new Vector3();
	var _vC$1 = new Vector3();

	var _uvA$1 = new Vector2();
	var _uvB$1 = new Vector2();
	var _uvC$1 = new Vector2();

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		if ( _geometry === undefined ) {

			_geometry = new BufferGeometry();

			var float32Array = new Float32Array( [
				- 0.5, - 0.5, 0, 0, 0,
				0.5, - 0.5, 0, 1, 0,
				0.5, 0.5, 0, 1, 1,
				- 0.5, 0.5, 0, 0, 1
			] );

			var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

			_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
			_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
			_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

		}

		this.geometry = _geometry;
		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

		this.center = new Vector2( 0.5, 0.5 );

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: function ( raycaster, intersects ) {

			if ( raycaster.camera === null ) {

				console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );

			}

			_worldScale.setFromMatrixScale( this.matrixWorld );

			_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
			this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );

			_mvPosition.setFromMatrixPosition( this.modelViewMatrix );

			if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {

				_worldScale.multiplyScalar( - _mvPosition.z );

			}

			var rotation = this.material.rotation;
			var sin, cos;
			if ( rotation !== 0 ) {

				cos = Math.cos( rotation );
				sin = Math.sin( rotation );

			}

			var center = this.center;

			transformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
			transformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
			transformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );

			_uvA$1.set( 0, 0 );
			_uvB$1.set( 1, 0 );
			_uvC$1.set( 1, 1 );

			// check first triangle
			var intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );

			if ( intersect === null ) {

				// check second triangle
				transformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
				_uvB$1.set( 0, 1 );

				intersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );
				if ( intersect === null ) {

					return;

				}

			}

			var distance = raycaster.ray.origin.distanceTo( _intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) { return; }

			intersects.push( {

				distance: distance,
				point: _intersectPoint.clone(),
				uv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),
				face: null,
				object: this

			} );

		},

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			if ( source.center !== undefined ) { this.center.copy( source.center ); }

			return this;

		}


	} );

	function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

		// compute position in camera space
		_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

		// to check if rotation is not zero
		if ( sin !== undefined ) {

			_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
			_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );

		} else {

			_rotatedPosition.copy( _alignedPosition );

		}


		vertexPosition.copy( mvPosition );
		vertexPosition.x += _rotatedPosition.x;
		vertexPosition.y += _rotatedPosition.y;

		// transform to world space
		vertexPosition.applyMatrix4( _viewWorldMatrix );

	}

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _v1$4 = new Vector3();
	var _v2$2 = new Vector3();

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

		this.autoUpdate = true;

	}

	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		isLOD: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			this.autoUpdate = source.autoUpdate;

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) { distance = 0; }

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

			return this;

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			if ( levels.length > 0 ) {

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance < levels[ i ].distance ) {

						break;

					}

				}

				return levels[ i - 1 ].object;

			}

			return null;

		},

		raycast: function ( raycaster, intersects ) {

			var levels = this.levels;

			if ( levels.length > 0 ) {

				_v1$4.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( _v1$4 );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			}

		},

		update: function ( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				_v1$4.setFromMatrixPosition( camera.matrixWorld );
				_v2$2.setFromMatrixPosition( this.matrixWorld );

				var distance = _v1$4.distanceTo( _v2$2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			if ( this.autoUpdate === false ) { data.object.autoUpdate = false; }

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material ) {

		if ( geometry && geometry.isGeometry ) {

			console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = 'attached';
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

	}

	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		bind: function ( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			var vector = new Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {

				vector.x = skinWeight.getX( i );
				vector.y = skinWeight.getY( i );
				vector.z = skinWeight.getZ( i );
				vector.w = skinWeight.getW( i );

				var scale = 1.0 / vector.manhattanLength();

				if ( scale !== Infinity ) {

					vector.multiplyScalar( scale );

				} else {

					vector.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

			}

		},

		updateMatrixWorld: function ( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, force );

			if ( this.bindMode === 'attached' ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === 'detached' ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	var _offsetMatrix = new Matrix4();
	var _identityMatrix = new Matrix4();

	function Skeleton( bones, boneInverses ) {

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );
		this.boneMatrices = new Float32Array( this.bones.length * 16 );

		this.frame = - 1;

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ i ] ) {

					inverse.getInverse( this.bones[ i ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone, i, il;

			// recover the bind-time world matrices

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ i ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					if ( bone.parent && bone.parent.isBone ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: function () {

			var bones = this.bones;
			var boneInverses = this.boneInverses;
			var boneMatrices = this.boneMatrices;
			var boneTexture = this.boneTexture;

			// flatten bone matrices to array

			for ( var i = 0, il = bones.length; i < il; i ++ ) {

				// compute the offset between the current and the original transform

				var matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;

				_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
				_offsetMatrix.toArray( boneMatrices, i * 16 );

			}

			if ( boneTexture !== undefined ) {

				boneTexture.needsUpdate = true;

			}

		},

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses );

		},

		getBoneByName: function ( name ) {

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var bone = this.bones[ i ];

				if ( bone.name === name ) {

					return bone;

				}

			}

			return undefined;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone() {

		Object3D.call( this );

		this.type = 'Bone';

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _instanceLocalMatrix = new Matrix4();
	var _instanceWorldMatrix = new Matrix4();

	var _instanceIntersects = [];

	var _mesh = new Mesh();

	function InstancedMesh( geometry, material, count ) {

		Mesh.call( this, geometry, material );

		this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );

		this.count = count;

	}

	InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: InstancedMesh,

		isInstancedMesh: true,

		getMatrixAt: function ( index, matrix ) {

			matrix.fromArray( this.instanceMatrix.array, index * 16 );

		},

		raycast: function ( raycaster, intersects ) {

			var matrixWorld = this.matrixWorld;
			var raycastTimes = this.count;

			_mesh.geometry = this.geometry;
			_mesh.material = this.material;

			if ( _mesh.material === undefined ) { return; }

			for ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {

				// calculate the world matrix for each instance

				this.getMatrixAt( instanceId, _instanceLocalMatrix );

				_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );

				// the mesh represents this single instance

				_mesh.matrixWorld = _instanceWorldMatrix;

				_mesh.raycast( raycaster, _instanceIntersects );

				// process the result of raycast

				if ( _instanceIntersects.length > 0 ) {

					_instanceIntersects[ 0 ].instanceId = instanceId;
					_instanceIntersects[ 0 ].object = this;

					intersects.push( _instanceIntersects[ 0 ] );

					_instanceIntersects.length = 0;

				}

			}

		},

		setMatrixAt: function ( index, matrix ) {

			matrix.toArray( this.instanceMatrix.array, index * 16 );

		},

		updateMorphTargets: function () {

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _start = new Vector3();
	var _end = new Vector3();
	var _inverseMatrix$1 = new Matrix4();
	var _ray$1 = new Ray();
	var _sphere$2 = new Sphere();

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		computeLineDistances: function () {

			var geometry = this.geometry;

			if ( geometry.isBufferGeometry ) {

				// we assume non-indexed geometry

				if ( geometry.index === null ) {

					var positionAttribute = geometry.attributes.position;
					var lineDistances = [ 0 ];

					for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {

						_start.fromBufferAttribute( positionAttribute, i - 1 );
						_end.fromBufferAttribute( positionAttribute, i );

						lineDistances[ i ] = lineDistances[ i - 1 ];
						lineDistances[ i ] += _start.distanceTo( _end );

					}

					geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

				} else {

					console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var lineDistances = geometry.lineDistances;

				lineDistances[ 0 ] = 0;

				for ( var i = 1, l = vertices.length; i < l; i ++ ) {

					lineDistances[ i ] = lineDistances[ i - 1 ];
					lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );

				}

			}

			return this;

		},

		raycast: function ( raycaster, intersects ) {

			var precision = raycaster.linePrecision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere$2.copy( geometry.boundingSphere );
			_sphere$2.applyMatrix4( matrixWorld );
			_sphere$2.radius += precision;

			if ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }

			//

			_inverseMatrix$1.getInverse( matrixWorld );
			_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

			var localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localPrecisionSq = localPrecision * localPrecision;

			var vStart = new Vector3();
			var vEnd = new Vector3();
			var interSegment = new Vector3();
			var interRay = new Vector3();
			var step = ( this && this.isLineSegments ) ? 2 : 1;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > localPrecisionSq ) { continue; }

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > localPrecisionSq ) { continue; }

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > localPrecisionSq ) { continue; }

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _start$1 = new Vector3();
	var _end$1 = new Vector3();

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true,

		computeLineDistances: function () {

			var geometry = this.geometry;

			if ( geometry.isBufferGeometry ) {

				// we assume non-indexed geometry

				if ( geometry.index === null ) {

					var positionAttribute = geometry.attributes.position;
					var lineDistances = [];

					for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {

						_start$1.fromBufferAttribute( positionAttribute, i );
						_end$1.fromBufferAttribute( positionAttribute, i + 1 );

						lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
						lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

					}

					geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

				} else {

					console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var lineDistances = geometry.lineDistances;

				for ( var i = 0, l = vertices.length; i < l; i += 2 ) {

					_start$1.copy( vertices[ i ] );
					_end$1.copy( vertices[ i + 1 ] );

					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
					lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

				}

			}

			return this;

		}

	} );

	/**
	 * @author mgreter / http://github.com/mgreter
	 */

	function LineLoop( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineLoop';

	}

	LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineLoop,

		isLineLoop: true,

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 *
	 *  morphTargets: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.alphaMap = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.morphTargets = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	var _inverseMatrix$2 = new Matrix4();
	var _ray$2 = new Ray();
	var _sphere$3 = new Sphere();
	var _position$1 = new Vector3();

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

		this.updateMorphTargets();

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: function ( raycaster, intersects ) {

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere$3.copy( geometry.boundingSphere );
			_sphere$3.applyMatrix4( matrixWorld );
			_sphere$3.radius += threshold;

			if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }

			//

			_inverseMatrix$2.getInverse( matrixWorld );
			_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						_position$1.fromArray( positions, a * 3 );

						testPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						_position$1.fromArray( positions, i * 3 );

						testPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );

				}

			}

		},

		updateMorphTargets: function () {

			var geometry = this.geometry;
			var m, ml, name;

			if ( geometry.isBufferGeometry ) {

				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );

				if ( keys.length > 0 ) {

					var morphAttribute = morphAttributes[ keys[ 0 ] ];

					if ( morphAttribute !== undefined ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

							name = morphAttribute[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			} else {

				var morphTargets = geometry.morphTargets;

				if ( morphTargets !== undefined && morphTargets.length > 0 ) {

					console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

				}

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {

		var rayPointDistanceSq = _ray$2.distanceSqToPoint( point );

		if ( rayPointDistanceSq < localThresholdSq ) {

			var intersectPoint = new Vector3();

			_ray$2.closestPointToPoint( point, intersectPoint );
			intersectPoint.applyMatrix4( matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) { return; }

			intersects.push( {

				distance: distance,
				distanceToRay: Math.sqrt( rayPointDistanceSq ),
				point: intersectPoint,
				index: index,
				face: null,
				object: object

			} );

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.format = format !== undefined ? format : RGBFormat;

		this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

		this.generateMipmaps = false;

	}

	VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

		constructor: VideoTexture,

		isVideoTexture: true,

		update: function () {

			var video = this.image;

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				this.needsUpdate = true;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;
	CanvasTexture.prototype.isCanvasTexture = true;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

		}

		if ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }
		if ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		this.type = 'WireframeGeometry';

		// buffer

		var vertices = [];

		// helper variables

		var i, j, l, o, ol;
		var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];
		var vertex;

		// different logic for Geometry and BufferGeometry

		if ( geometry && geometry.isGeometry ) {

			// create a data structure that contains all edges without duplicates

			var faces = geometry.faces;

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( j = 0; j < 3; j ++ ) {

					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
					edge[ 1 ] = Math.max( edge1, edge2 );

					key = edge[ 0 ] + ',' + edge[ 1 ];

					if ( edges[ key ] === undefined ) {

						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex = geometry.vertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = geometry.vertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else if ( geometry && geometry.isBufferGeometry ) {

			var position, indices, groups;
			var group, start, count;
			var index1, index2;

			vertex = new Vector3();

			if ( geometry.index !== null ) {

				// indexed BufferGeometry

				position = geometry.attributes.position;
				indices = geometry.index;
				groups = geometry.groups;

				if ( groups.length === 0 ) {

					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

				}

				// create a data structure that contains all eges without duplicates

				for ( o = 0, ol = groups.length; o < ol; ++ o ) {

					group = groups[ o ];

					start = group.start;
					count = group.count;

					for ( i = start, l = ( start + count ); i < l; i += 3 ) {

						for ( j = 0; j < 3; j ++ ) {

							edge1 = indices.getX( i + j );
							edge2 = indices.getX( i + ( j + 1 ) % 3 );
							edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
							edge[ 1 ] = Math.max( edge1, edge2 );

							key = edge[ 0 ] + ',' + edge[ 1 ];

							if ( edges[ key ] === undefined ) {

								edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

							}

						}

					}

				}

				// generate vertices

				for ( key in edges ) {

					e = edges[ key ];

					vertex.fromBufferAttribute( position, e.index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					vertex.fromBufferAttribute( position, e.index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			} else {

				// non-indexed BufferGeometry

				position = geometry.attributes.position;

				for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

					for ( j = 0; j < 3; j ++ ) {

						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

						index1 = 3 * i + j;
						vertex.fromBufferAttribute( position, index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );

						index2 = 3 * i + ( ( j + 1 ) % 3 );
						vertex.fromBufferAttribute( position, index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );

					}

				}

			}

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	// ParametricGeometry

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	// ParametricBufferGeometry

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		var EPS = 0.00001;

		var normal = new Vector3();

		var p0 = new Vector3(), p1 = new Vector3();
		var pu = new Vector3(), pv = new Vector3();

		var i, j;

		if ( func.length < 3 ) {

			console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

		}

		// generate vertices, normals and uvs

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			var v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				var u = j / slices;

				// vertex

				func( u, v, p0 );
				vertices.push( p0.x, p0.y, p0.z );

				// normal

				// approximate tangent vectors via finite differences

				if ( u - EPS >= 0 ) {

					func( u - EPS, v, p1 );
					pu.subVectors( p0, p1 );

				} else {

					func( u + EPS, v, p1 );
					pu.subVectors( p1, p0 );

				}

				if ( v - EPS >= 0 ) {

					func( u, v - EPS, p1 );
					pv.subVectors( p0, p1 );

				} else {

					func( u, v + EPS, p1 );
					pv.subVectors( p1, p0 );

				}

				// cross product of tangent vectors returns surface normal

				normal.crossVectors( pu, pv ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, v );

			}

		}

		// generate indices

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				var a = i * sliceCount + j;
				var b = i * sliceCount + j + 1;
				var c = ( i + 1 ) * sliceCount + j + 1;
				var d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PolyhedronGeometry

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	// PolyhedronBufferGeometry

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		applyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

		if ( detail === 0 ) {

			this.computeVertexNormals(); // flat normals

		} else {

			this.normalizeNormals(); // smooth normals

		}

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function applyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }
					if ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }
					if ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] = uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TetrahedronGeometry

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	// TetrahedronBufferGeometry

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
		];

		var indices = [
			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// OctahedronGeometry

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	// OctahedronBufferGeometry

	function OctahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
		];

		var indices = [
			0, 2, 4,	0, 4, 3,	0, 3, 5,
			0, 5, 2,	1, 2, 5,	1, 5, 3,
			1, 3, 4,	1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// IcosahedronGeometry

	function IcosahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	// IcosahedronBufferGeometry

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
			 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
			 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
		];

		var indices = [
			 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
			 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
			 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
			 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// DodecahedronGeometry

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	// DodecahedronBufferGeometry

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,	- 1, - 1, 1,
			- 1, 1, - 1, - 1, 1, 1,
			1, - 1, - 1, 1, - 1, 1,
			1, 1, - 1, 1, 1, 1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t, 0, - r, t,
			 0, r, - t, 0, r, t,

			// (±1/φ, ±φ, 0)
			- r, - t, 0, - r, t, 0,
			 r, - t, 0, r, t, 0,

			// (±φ, 0, ±1/φ)
			- t, 0, - r, t, 0, - r,
			- t, 0, r, t, 0, r
		];

		var indices = [
			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
			1, 12, 14, 	1, 14, 5, 	1, 5, 9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 */

	// TubeGeometry

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	// TubeBufferGeometry

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();
		var P = new Vector3();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			P = path.getPointAt( i / tubularSegments, P );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin = Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	TubeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		data.path = this.parameters.path.toJSON();

		return data;

	};

	/**
	 * @author oosmoxiecode
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * based on http://www.blackpawn.com/texts/pqtorus/
	 */

	// TorusKnotGeometry

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	// TorusKnotBufferGeometry

	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 1;
		tube = tube || 0.4;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, j;

		var vertex = new Vector3();
		var normal = new Vector3();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

				normal.subVectors( vertex, P1 ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TorusGeometry

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
		this.mergeVertices();

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	// TorusBufferGeometry

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 1;
		tube = tube || 0.4;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex

				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
				normal.subVectors( vertex, center ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices

				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.5)
	 */

	var Earcut = {

		triangulate: function ( data, holeIndices, dim ) {

			dim = dim || 2;

			var hasHoles = holeIndices && holeIndices.length,
				outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
				outerNode = linkedList( data, 0, outerLen, dim, true ),
				triangles = [];

			if ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }

			var minX, minY, maxX, maxY, x, y, invSize;

			if ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }

			// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
			if ( data.length > 80 * dim ) {

				minX = maxX = data[ 0 ];
				minY = maxY = data[ 1 ];

				for ( var i = dim; i < outerLen; i += dim ) {

					x = data[ i ];
					y = data[ i + 1 ];
					if ( x < minX ) { minX = x; }
					if ( y < minY ) { minY = y; }
					if ( x > maxX ) { maxX = x; }
					if ( y > maxY ) { maxY = y; }

				}

				// minX, minY and invSize are later used to transform coords into integers for z-order calculation
				invSize = Math.max( maxX - minX, maxY - minY );
				invSize = invSize !== 0 ? 1 / invSize : 0;

			}

			earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

			return triangles;

		}

	};

	// create a circular doubly linked list from polygon points in the specified winding order
	function linkedList( data, start, end, dim, clockwise ) {

		var i, last;

		if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

			for ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }

		} else {

			for ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }

		}

		if ( last && equals( last, last.next ) ) {

			removeNode( last );
			last = last.next;

		}

		return last;

	}

	// eliminate colinear or duplicate points
	function filterPoints( start, end ) {

		if ( ! start ) { return start; }
		if ( ! end ) { end = start; }

		var p = start,
			again;
		do {

			again = false;

			if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

				removeNode( p );
				p = end = p.prev;
				if ( p === p.next ) { break; }
				again = true;

			} else {

				p = p.next;

			}

		} while ( again || p !== end );

		return end;

	}

	// main ear slicing loop which triangulates a polygon (given as a linked list)
	function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

		if ( ! ear ) { return; }

		// interlink polygon nodes in z-order
		if ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }

		var stop = ear,
			prev, next;

		// iterate through ears, slicing them one by one
		while ( ear.prev !== ear.next ) {

			prev = ear.prev;
			next = ear.next;

			if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

				// cut off the triangle
				triangles.push( prev.i / dim );
				triangles.push( ear.i / dim );
				triangles.push( next.i / dim );

				removeNode( ear );

				// skipping the next vertex leads to less sliver triangles
				ear = next.next;
				stop = next.next;

				continue;

			}

			ear = next;

			// if we looped through the whole remaining polygon and can't find any more ears
			if ( ear === stop ) {

				// try filtering points and slicing again
				if ( ! pass ) {

					earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

					// if this didn't work, try curing all small self-intersections locally

				} else if ( pass === 1 ) {

					ear = cureLocalIntersections( ear, triangles, dim );
					earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

					// as a last resort, try splitting the remaining polygon into two

				} else if ( pass === 2 ) {

					splitEarcut( ear, triangles, dim, minX, minY, invSize );

				}

				break;

			}

		}

	}

	// check whether a polygon node forms a valid ear with adjacent nodes
	function isEar( ear ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear

		// now make sure we don't have other points inside the potential ear
		var p = ear.next.next;

		while ( p !== ear.prev ) {

			if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) { return false; }
			p = p.next;

		}

		return true;

	}

	function isEarHashed( ear, minX, minY, invSize ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear

		// triangle bbox; min & max are calculated like this for speed
		var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
			minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
			maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
			maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

		// z-order range for the current triangle bbox;
		var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
			maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

		var p = ear.prevZ,
			n = ear.nextZ;

		// look for points inside the triangle in both directions
		while ( p && p.z >= minZ && n && n.z <= maxZ ) {

			if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) { return false; }
			p = p.prevZ;

			if ( n !== ear.prev && n !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
				area( n.prev, n, n.next ) >= 0 ) { return false; }
			n = n.nextZ;

		}

		// look for remaining points in decreasing z-order
		while ( p && p.z >= minZ ) {

			if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) { return false; }
			p = p.prevZ;

		}

		// look for remaining points in increasing z-order
		while ( n && n.z <= maxZ ) {

			if ( n !== ear.prev && n !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
				area( n.prev, n, n.next ) >= 0 ) { return false; }
			n = n.nextZ;

		}

		return true;

	}

	// go through all polygon nodes and cure small local self-intersections
	function cureLocalIntersections( start, triangles, dim ) {

		var p = start;
		do {

			var a = p.prev,
				b = p.next.next;

			if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

				triangles.push( a.i / dim );
				triangles.push( p.i / dim );
				triangles.push( b.i / dim );

				// remove two nodes involved
				removeNode( p );
				removeNode( p.next );

				p = start = b;

			}

			p = p.next;

		} while ( p !== start );

		return p;

	}

	// try splitting polygon into two and triangulate them independently
	function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

		// look for a valid diagonal that divides the polygon into two
		var a = start;
		do {

			var b = a.next.next;
			while ( b !== a.prev ) {

				if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

					// split the polygon in two by the diagonal
					var c = splitPolygon( a, b );

					// filter colinear points around the cuts
					a = filterPoints( a, a.next );
					c = filterPoints( c, c.next );

					// run earcut on each half
					earcutLinked( a, triangles, dim, minX, minY, invSize );
					earcutLinked( c, triangles, dim, minX, minY, invSize );
					return;

				}

				b = b.next;

			}

			a = a.next;

		} while ( a !== start );

	}

	// link every hole into the outer loop, producing a single-ring polygon without holes
	function eliminateHoles( data, holeIndices, outerNode, dim ) {

		var queue = [],
			i, len, start, end, list;

		for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

			start = holeIndices[ i ] * dim;
			end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
			list = linkedList( data, start, end, dim, false );
			if ( list === list.next ) { list.steiner = true; }
			queue.push( getLeftmost( list ) );

		}

		queue.sort( compareX );

		// process holes from left to right
		for ( i = 0; i < queue.length; i ++ ) {

			eliminateHole( queue[ i ], outerNode );
			outerNode = filterPoints( outerNode, outerNode.next );

		}

		return outerNode;

	}

	function compareX( a, b ) {

		return a.x - b.x;

	}

	// find a bridge between vertices that connects hole with an outer ring and and link it
	function eliminateHole( hole, outerNode ) {

		outerNode = findHoleBridge( hole, outerNode );
		if ( outerNode ) {

			var b = splitPolygon( outerNode, hole );
			filterPoints( b, b.next );

		}

	}

	// David Eberly's algorithm for finding a bridge between hole and outer polygon
	function findHoleBridge( hole, outerNode ) {

		var p = outerNode,
			hx = hole.x,
			hy = hole.y,
			qx = - Infinity,
			m;

		// find a segment intersected by a ray from the hole's leftmost point to the left;
		// segment's endpoint with lesser x will be potential connection point
		do {

			if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

				var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
				if ( x <= hx && x > qx ) {

					qx = x;
					if ( x === hx ) {

						if ( hy === p.y ) { return p; }
						if ( hy === p.next.y ) { return p.next; }

					}

					m = p.x < p.next.x ? p : p.next;

				}

			}

			p = p.next;

		} while ( p !== outerNode );

		if ( ! m ) { return null; }

		if ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint

		// look for points inside the triangle of hole point, segment intersection and endpoint;
		// if there are no points found, we have a valid connection;
		// otherwise choose the point of the minimum angle with the ray as connection point

		var stop = m,
			mx = m.x,
			my = m.y,
			tanMin = Infinity,
			tan;

		p = m.next;

		while ( p !== stop ) {

			if ( hx >= p.x && p.x >= mx && hx !== p.x &&
					pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

				tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

				if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

					m = p;
					tanMin = tan;

				}

			}

			p = p.next;

		}

		return m;

	}

	// interlink polygon nodes in z-order
	function indexCurve( start, minX, minY, invSize ) {

		var p = start;
		do {

			if ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;

		} while ( p !== start );

		p.prevZ.nextZ = null;
		p.prevZ = null;

		sortLinked( p );

	}

	// Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
	function sortLinked( list ) {

		var i, p, q, e, tail, numMerges, pSize, qSize,
			inSize = 1;

		do {

			p = list;
			list = null;
			tail = null;
			numMerges = 0;

			while ( p ) {

				numMerges ++;
				q = p;
				pSize = 0;
				for ( i = 0; i < inSize; i ++ ) {

					pSize ++;
					q = q.nextZ;
					if ( ! q ) { break; }

				}

				qSize = inSize;

				while ( pSize > 0 || ( qSize > 0 && q ) ) {

					if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

						e = p;
						p = p.nextZ;
						pSize --;

					} else {

						e = q;
						q = q.nextZ;
						qSize --;

					}

					if ( tail ) { tail.nextZ = e; }
					else { list = e; }

					e.prevZ = tail;
					tail = e;

				}

				p = q;

			}

			tail.nextZ = null;
			inSize *= 2;

		} while ( numMerges > 1 );

		return list;

	}

	// z-order of a point given coords and inverse of the longer side of data bbox
	function zOrder( x, y, minX, minY, invSize ) {

		// coords are transformed into non-negative 15-bit integer range
		x = 32767 * ( x - minX ) * invSize;
		y = 32767 * ( y - minY ) * invSize;

		x = ( x | ( x << 8 ) ) & 0x00FF00FF;
		x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
		x = ( x | ( x << 2 ) ) & 0x33333333;
		x = ( x | ( x << 1 ) ) & 0x55555555;

		y = ( y | ( y << 8 ) ) & 0x00FF00FF;
		y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
		y = ( y | ( y << 2 ) ) & 0x33333333;
		y = ( y | ( y << 1 ) ) & 0x55555555;

		return x | ( y << 1 );

	}

	// find the leftmost node of a polygon ring
	function getLeftmost( start ) {

		var p = start,
			leftmost = start;
		do {

			if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }
			p = p.next;

		} while ( p !== start );

		return leftmost;

	}

	// check if a point lies within a convex triangle
	function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

		return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
			   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
			   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

	}

	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
	function isValidDiagonal( a, b ) {

		return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
			   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

	}

	// signed area of a triangle
	function area( p, q, r ) {

		return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

	}

	// check if two points are equal
	function equals( p1, p2 ) {

		return p1.x === p2.x && p1.y === p2.y;

	}

	// check if two segments intersect
	function intersects( p1, q1, p2, q2 ) {

		if ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||
			( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }
		return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
			   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

	}

	// check if a polygon diagonal intersects any polygon segments
	function intersectsPolygon( a, b ) {

		var p = a;
		do {

			if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
					intersects( p, p.next, a, b ) ) { return true; }
			p = p.next;

		} while ( p !== a );

		return false;

	}

	// check if a polygon diagonal is locally inside the polygon
	function locallyInside( a, b ) {

		return area( a.prev, a, a.next ) < 0 ?
			area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
			area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

	}

	// check if the middle point of a polygon diagonal is inside the polygon
	function middleInside( a, b ) {

		var p = a,
			inside = false,
			px = ( a.x + b.x ) / 2,
			py = ( a.y + b.y ) / 2;
		do {

			if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
					( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
				{ inside = ! inside; }
			p = p.next;

		} while ( p !== a );

		return inside;

	}

	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring
	function splitPolygon( a, b ) {

		var a2 = new Node( a.i, a.x, a.y ),
			b2 = new Node( b.i, b.x, b.y ),
			an = a.next,
			bp = b.prev;

		a.next = b;
		b.prev = a;

		a2.next = an;
		an.prev = a2;

		b2.next = a2;
		a2.prev = b2;

		bp.next = b2;
		b2.prev = bp;

		return b2;

	}

	// create a node and optionally link it with previous one (in a circular doubly linked list)
	function insertNode( i, x, y, last ) {

		var p = new Node( i, x, y );

		if ( ! last ) {

			p.prev = p;
			p.next = p;

		} else {

			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;

		}

		return p;

	}

	function removeNode( p ) {

		p.next.prev = p.prev;
		p.prev.next = p.next;

		if ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }
		if ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }

	}

	function Node( i, x, y ) {

		// vertex index in coordinates array
		this.i = i;

		// vertex coordinates
		this.x = x;
		this.y = y;

		// previous and next vertex nodes in a polygon ring
		this.prev = null;
		this.next = null;

		// z-order curve value
		this.z = null;

		// previous and next nodes in z-order
		this.prevZ = null;
		this.nextZ = null;

		// indicates whether this is a steiner point
		this.steiner = false;

	}

	function signedArea( data, start, end, dim ) {

		var sum = 0;
		for ( var i = start, j = end - dim; i < end; i += dim ) {

			sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
			j = i;

		}

		return sum;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		triangulateShape: function ( contour, holes ) {

			var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
			var holeIndices = []; // array of hole indices
			var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

			removeDupEndPts( contour );
			addContour( vertices, contour );

			//

			var holeIndex = contour.length;

			holes.forEach( removeDupEndPts );

			for ( var i = 0; i < holes.length; i ++ ) {

				holeIndices.push( holeIndex );
				holeIndex += holes[ i ].length;
				addContour( vertices, holes[ i ] );

			}

			//

			var triangles = Earcut.triangulate( vertices, holeIndices );

			//

			for ( var i = 0; i < triangles.length; i += 3 ) {

				faces.push( triangles.slice( i, i + 3 ) );

			}

			return faces;

		}

	};

	function removeDupEndPts( points ) {

		var l = points.length;

		if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

			points.pop();

		}

	}

	function addContour( vertices, contour ) {

		for ( var i = 0; i < contour.length; i ++ ) {

			vertices.push( contour[ i ].x );
			vertices.push( contour[ i ].y );

		}

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  depth: <float>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
	 *  bevelOffset: <float>, // how far from shape outline does bevel start
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *  UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */

	// ExtrudeGeometry

	function ExtrudeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
		this.mergeVertices();

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	ExtrudeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;
		var options = this.parameters.options;

		return toJSON( shapes, options, data );

	};

	// ExtrudeBufferGeometry

	function ExtrudeBufferGeometry( shapes, options ) {

		BufferGeometry.call( this );

		this.type = 'ExtrudeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		var scope = this;

		var verticesArray = [];
		var uvArray = [];

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			var shape = shapes[ i ];
			addShape( shape );

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

		this.computeVertexNormals();

		// functions

		function addShape( shape ) {

			var placeholder = [];

			// options

			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
			var steps = options.steps !== undefined ? options.steps : 1;
			var depth = options.depth !== undefined ? options.depth : 100;

			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
			var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			var extrudePath = options.extrudePath;

			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

			// deprecated options

			if ( options.amount !== undefined ) {

				console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
				depth = options.amount;

			}

			//

			var extrudePts, extrudeByPath = false;
			var splineTube, binormal, normal, position2;

			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// TODO1 - have a .isClosed in spline?

				splineTube = extrudePath.computeFrenetFrames( steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
				bevelOffset = 0;

			}

			// Variables initialization

			var ahole, h, hl; // looping of holes

			var shapePoints = shape.extractPoints( curveSegments );

			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;

			var reverse = ! ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];

					if ( ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

			}


			var faces = ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			var contour = vertices; // vertices has all points but contour has only points of circumference

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2( pt, vec, size ) {

				if ( ! vec ) { console.error( "THREE.ExtrudeGeometry: vec does not exist" ); }

				return vec.clone().multiplyScalar( size ).add( pt );

			}

			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				var v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;

				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return new Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					var direction_eq = false; // assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			var contourMovements = [];

			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) { j = 0; }
				if ( k === il ) { k = 0; }

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			var holesMovements = [],
				oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				oneHoleMovements = [];

				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) { j = 0; }
					if ( k === il ) { k = 0; }

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y, - z );

					}

				}

			}

			bs = bevelSize + bevelOffset;

			// Back facing vertices

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			var s;

			for ( s = 1; s <= steps; s ++ ) {

				for ( i = 0; i < vlen; i ++ ) {

					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, depth / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, depth + z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y, depth + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				var start = verticesArray.length / 3;

				if ( bevelEnabled ) {

					var layer = 0; // steps + 1
					var offset = vlen * layer;

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

				scope.addGroup( start, verticesArray.length / 3 - start, 0 );

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				var start = verticesArray.length / 3;
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}


				scope.addGroup( start, verticesArray.length / 3 - start, 1 );


			}

			function sidewalls( contour, layeroffset ) {

				var j, k;
				i = contour.length;

				while ( -- i >= 0 ) {

					j = i;
					k = i - 1;
					if ( k < 0 ) { k = contour.length - 1; }

					//console.log('b', i,j, i-1, k,vertices.length);

					var s = 0,
						sl = steps + bevelSegments * 2;

					for ( s = 0; s < sl; s ++ ) {

						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );

						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d );

					}

				}

			}

			function v( x, y, z ) {

				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );

			}


			function f3( a, b, c ) {

				addVertex( a );
				addVertex( b );
				addVertex( c );

				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );

			}

			function f4( a, b, c, d ) {

				addVertex( a );
				addVertex( b );
				addVertex( d );

				addVertex( b );
				addVertex( c );
				addVertex( d );


				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );

				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );

			}

			function addVertex( index ) {

				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );

			}


			function addUV( vector2 ) {

				uvArray.push( vector2.x );
				uvArray.push( vector2.y );

			}

		}

	}

	ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

	ExtrudeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;
		var options = this.parameters.options;

		return toJSON( shapes, options, data );

	};

	//

	var WorldUVGenerator = {

		generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];

			return [
				new Vector2( a_x, a_y ),
				new Vector2( b_x, b_y ),
				new Vector2( c_x, c_y )
			];

		},

		generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var a_z = vertices[ indexA * 3 + 2 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var b_z = vertices[ indexB * 3 + 2 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];
			var c_z = vertices[ indexC * 3 + 2 ];
			var d_x = vertices[ indexD * 3 ];
			var d_y = vertices[ indexD * 3 + 1 ];
			var d_z = vertices[ indexD * 3 + 2 ];

			if ( Math.abs( a_y - b_y ) < 0.01 ) {

				return [
					new Vector2( a_x, 1 - a_z ),
					new Vector2( b_x, 1 - b_z ),
					new Vector2( c_x, 1 - c_z ),
					new Vector2( d_x, 1 - d_z )
				];

			} else {

				return [
					new Vector2( a_y, 1 - a_z ),
					new Vector2( b_y, 1 - b_z ),
					new Vector2( c_y, 1 - c_z ),
					new Vector2( d_y, 1 - d_z )
				];

			}

		}
	};

	function toJSON( shapes, options, data ) {

		//

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		//

		if ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }

		return data;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
	 *  bevelOffset: <float> // how far from text outline does bevel start
	 * }
	 */

	// TextGeometry

	function TextGeometry( text, parameters ) {

		Geometry.call( this );

		this.type = 'TextGeometry';

		this.parameters = {
			text: text,
			parameters: parameters
		};

		this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
		this.mergeVertices();

	}

	TextGeometry.prototype = Object.create( Geometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	// TextBufferGeometry

	function TextBufferGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( ! ( font && font.isFont ) ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size );

		// translate parameters to ExtrudeGeometry API

		parameters.depth = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }
		if ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }
		if ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }

		ExtrudeBufferGeometry.call( this, shapes, parameters );

		this.type = 'TextBufferGeometry';

	}

	TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
	TextBufferGeometry.prototype.constructor = TextBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// SphereGeometry

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	// SphereBufferGeometry

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

		var ix, iy;

		var index = 0;
		var grid = [];

		var vertex = new Vector3();
		var normal = new Vector3();

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy <= heightSegments; iy ++ ) {

			var verticesRow = [];

			var v = iy / heightSegments;

			// special case for the poles

			var uOffset = 0;

			if ( iy == 0 && thetaStart == 0 ) {

				uOffset = 0.5 / widthSegments;

			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

				uOffset = - 0.5 / widthSegments;

			}

			for ( ix = 0; ix <= widthSegments; ix ++ ) {

				var u = ix / widthSegments;

				// vertex

				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.copy( vertex ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u + uOffset, 1 - v );

				verticesRow.push( index ++ );

			}

			grid.push( verticesRow );

		}

		// indices

		for ( iy = 0; iy < heightSegments; iy ++ ) {

			for ( ix = 0; ix < widthSegments; ix ++ ) {

				var a = grid[ iy ][ ix + 1 ];
				var b = grid[ iy ][ ix ];
				var c = grid[ iy + 1 ][ ix ];
				var d = grid[ iy + 1 ][ ix + 1 ];

				if ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }
				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// RingGeometry

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	// RingBufferGeometry

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 0.5;
		outerRadius = outerRadius || 1;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// some helper variables

		var segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				// values are generate from the inside of the ring to the outside

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex

				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, 0, 1 );

				// uv

				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;

				uvs.push( uv.x, uv.y );

			}

			// increase the radius for next row of vertices

			radius += radiusStep;

		}

		// indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// LatheGeometry

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	// LatheBufferGeometry

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]

		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


		// buffers

		var indices = [];
		var vertices = [];
		var uvs = [];

		// helper variables

		var base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex

				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;

				vertices.push( vertex.x, vertex.y, vertex.z );

				// uv

				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );

				uvs.push( uv.x, uv.y );


			}

		}

		// indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if ( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices

			base = segments * points.length * 3;

			for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line

				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line

				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals

				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals

				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			}

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// ShapeGeometry

	function ShapeGeometry( shapes, curveSegments ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( typeof curveSegments === 'object' ) {

			console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

			curveSegments = curveSegments.curveSegments;

		}

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
		this.mergeVertices();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	ShapeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON$1( shapes, data );

	};

	// ShapeBufferGeometry

	function ShapeBufferGeometry( shapes, curveSegments ) {

		BufferGeometry.call( this );

		this.type = 'ShapeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		curveSegments = curveSegments || 12;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var groupStart = 0;
		var groupCount = 0;

		// allow single and array values for "shapes" parameter

		if ( Array.isArray( shapes ) === false ) {

			addShape( shapes );

		} else {

			for ( var i = 0; i < shapes.length; i ++ ) {

				addShape( shapes[ i ] );

				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

				groupStart += groupCount;
				groupCount = 0;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


		// helper functions

		function addShape( shape ) {

			var i, l, shapeHole;

			var indexOffset = vertices.length / 3;
			var points = shape.extractPoints( curveSegments );

			var shapeVertices = points.shape;
			var shapeHoles = points.holes;

			// check direction of vertices

			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

				shapeVertices = shapeVertices.reverse();

			}

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

			var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

			// join vertices of inner and outer paths to a single array

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );

			}

			// vertices, normals, uvs

			for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

				var vertex = shapeVertices[ i ];

				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs

			}

			// incides

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var a = face[ 0 ] + indexOffset;
				var b = face[ 1 ] + indexOffset;
				var c = face[ 2 ] + indexOffset;

				indices.push( a, b, c );
				groupCount += 3;

			}

		}

	}

	ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

	ShapeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON$1( shapes, data );

	};

	//

	function toJSON$1( shapes, data ) {

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		return data;

	}

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		this.type = 'EdgesGeometry';

		this.parameters = {
			thresholdAngle: thresholdAngle
		};

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		// buffer

		var vertices = [];

		// helper variables

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
		var edge = [ 0, 0 ], edges = {}, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];

		// prepare source geometry

		var geometry2;

		if ( geometry.isBufferGeometry ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var sourceVertices = geometry2.vertices;
		var faces = geometry2.faces;

		// now create a data structure where each entry represents an edge with its adjoining faces

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 );
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					edges[ key ].face2 = i;

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			var e = edges[ key ];

			// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

			if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

				var vertex = sourceVertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = sourceVertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// CylinderGeometry

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	// CylinderBufferGeometry

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 1;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
		height = height || 1;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var index = 0;
		var indexArray = [];
		var halfHeight = height / 2;
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) { generateCap( true ); }
			if ( radiusBottom > 0 ) { generateCap( false ); }

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row

				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					// save index of vertex in respective row

					indexRow.push( index ++ );

				}

				// now save vertices of the row in our index array

				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices

					var a = indexArray[ y ][ x ];
					var b = indexArray[ y + 1 ][ x ];
					var c = indexArray[ y + 1 ][ x + 1 ];
					var d = indexArray[ y ][ x + 1 ];

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// update group counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex

				vertices.push( 0, halfHeight * sign, 0 );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uvs.push( 0.5, 0.5 );

				// increase index

				index ++;

			}

			// save the index of the last center vertex

			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );

				// increase index

				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top

					indices.push( i, i + 1, c );

				} else {

					// face bottom

					indices.push( i + 1, i, c );

				}

				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	// ConeGeometry

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	// ConeBufferGeometry

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author hughes
	 */

	// CircleGeometry

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	// CircleBufferGeometry

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, s;
		var vertex = new Vector3();
		var uv = new Vector2();

		// center point

		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );

		for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

			var segment = thetaStart + s / segments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uvs

			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// indices

		for ( i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



	var Geometries = /*#__PURE__*/Object.freeze({
		__proto__: null,
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		TextBufferGeometry: TextBufferGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeBufferGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeBufferGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxBufferGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  color: <THREE.Color>
	 * }
	 */

	function ShadowMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShadowMaterial';

		this.color = new Color( 0x000000 );
		this.transparent = true;

		this.setValues( parameters );

	}

	ShadowMaterial.prototype = Object.create( Material.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	ShadowMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 *  clearcoat: <float>
	 *  clearcoatRoughness: <float>
	 *
	 *  sheen: <Color>
	 *
	 *  clearcoatNormalScale: <Vector2>,
	 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearcoat = 0.0;
		this.clearcoatRoughness = 0.0;

		this.sheen = null; // null will disable sheen bsdf

		this.clearcoatNormalScale = new Vector2( 1, 1 );
		this.clearcoatNormalMap = null;

		this.transparency = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.reflectivity = source.reflectivity;

		this.clearcoat = source.clearcoat;
		this.clearcoatRoughness = source.clearcoatRoughness;

		if ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }
		else { this.sheen = null; }

		this.clearcoatNormalMap = source.clearcoatNormalMap;
		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

		this.transparency = source.transparency;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.MultiplyOperation,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author takahirox / http://github.com/takahirox
	 *
	 * parameters = {
	 *  gradientMap: new THREE.Texture( <Image> )
	 * }
	 */

	function MeshToonMaterial( parameters ) {

		MeshPhongMaterial.call( this );

		this.defines = { 'TOON': '' };

		this.type = 'MeshToonMaterial';

		this.gradientMap = null;

		this.setValues( parameters );

	}

	MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
	MeshToonMaterial.prototype.constructor = MeshToonMaterial;

	MeshToonMaterial.prototype.isMeshToonMaterial = true;

	MeshToonMaterial.prototype.copy = function ( source ) {

		MeshPhongMaterial.prototype.copy.call( this, source );

		this.gradientMap = source.gradientMap;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshNormalMaterial';

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  matcap: new THREE.Texture( <Image> ),
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshMatcapMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'MATCAP': '' };

		this.type = 'MeshMatcapMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.matcap = null;

		this.map = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.alphaMap = null;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshMatcapMaterial.prototype = Object.create( Material.prototype );
	MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;

	MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

	MeshMatcapMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'MATCAP': '' };

		this.color.copy( source.color );

		this.matcap = source.matcap;

		this.map = source.map;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.alphaMap = source.alphaMap;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		LineBasicMaterial.call( this );

		this.type = 'LineDashedMaterial';

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		LineBasicMaterial.prototype.copy.call( this, source );

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshToonMaterial: MeshToonMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshDistanceMaterial: MeshDistanceMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		MeshMatcapMaterial: MeshMatcapMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function ( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				// in ios9 array.subarray(from, undefined) will return empty array
				// but array.subarray(from) or array.subarray(from, len) is correct
				return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function ( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) { return array; }

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function ( object ) {

			return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function ( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function ( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) { return; } // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) { return; } // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {

				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {

				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		},

		subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {

			fps = fps || 30;

			var clip = sourceClip.clone();

			clip.name = name;

			var tracks = [];

			for ( var i = 0; i < clip.tracks.length; ++ i ) {

				var track = clip.tracks[ i ];
				var valueSize = track.getValueSize();

				var times = [];
				var values = [];

				for ( var j = 0; j < track.times.length; ++ j ) {

					var frame = track.times[ j ] * fps;

					if ( frame < startFrame || frame >= endFrame ) { continue; }

					times.push( track.times[ j ] );

					for ( var k = 0; k < valueSize; ++ k ) {

						values.push( track.values[ j * valueSize + k ] );

					}

				}

				if ( times.length === 0 ) { continue; }

				track.times = AnimationUtils.convertArray( times, track.times.constructor );
				track.values = AnimationUtils.convertArray( values, track.values.constructor );

				tracks.push( track );

			}

			clip.tracks = tracks;

			// find minimum .times value across all tracks in the trimmed clip

			var minStartTime = Infinity;

			for ( var i = 0; i < clip.tracks.length; ++ i ) {

				if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {

					minStartTime = clip.tracks[ i ].times[ 0 ];

				}

			}

			// shift all tracks such that clip begins at t=0

			for ( var i = 0; i < clip.tracks.length; ++ i ) {

				clip.tracks[ i ].shift( - 1 * minStartTime );

			}

			clip.resetDuration();

			return clip;

		}

	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Object.assign( Interpolant.prototype, {

		evaluate: function ( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[ i1 ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {

						//- See http://jsperf.com/comparison-to-undefined/3
						//- slower code:
						//-
						//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ; ) {

								if ( t1 === undefined ) {

									if ( t < t0 ) { break forward_scan; }

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) { break; } // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

						//- slower code:
						//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ; ) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) { break; } // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[ i1 ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function () {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function ( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function ( /* i1, t0, t, t1 */ ) {

			throw new Error( 'call to abstract method' );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function ( /* i1, t0, t1 */ ) {

			// empty

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( Interpolant.prototype, {

		//( 0, t, t0 ), returns this.resultBuffer
		beforeStart_: Interpolant.prototype.copySampleValue_,

		//( N-1, tN-1, t ), returns this.resultBuffer
		afterEnd_: Interpolant.prototype.copySampleValue_,

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = - 0;
		this._offsetPrev = - 0;
		this._weightNext = - 0;
		this._offsetNext = - 0;

	}

	CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding

		},

		intervalChanged_: function ( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP = - wP * ppp + 2 * wP * pp - wP * p;
			var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
			var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
			var sN = wN * ppp - wN * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function ( i1 /*, t0, t, t1 */ ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		if ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }
		if ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

	}

	// Static methods

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		toJSON: function ( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		}

	} );

	Object.assign( KeyframeTrack.prototype, {

		constructor: KeyframeTrack,

		TimeBufferType: Float32Array,

		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function ( result ) {

			return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function ( result ) {

			return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function ( result ) {

			return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function ( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( 'THREE.KeyframeTrack:', message );
				return this;

			}

			this.createInterpolant = factoryMethod;

			return this;

		},

		getInterpolation: function () {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function () {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function ( timeOffset ) {

			if ( timeOffset !== 0.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function ( timeScale ) {

			if ( timeScale !== 1.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function ( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) {

				++ from;

			}

			while ( to !== - 1 && times[ to ] > endTime ) {

				-- to;

			}

			++ to; // inclusive -> exclusive bound

			if ( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function () {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if ( nKeys === 0 ) {

				console.error( 'THREE.KeyframeTrack: Track is empty.', this );
				valid = false;

			}

			var prevTime = null;

			for ( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
					valid = false;
					break;

				}

				if ( prevTime !== null && prevTime > currTime ) {

					console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function () {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for ( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else {

						keep = true;

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

					values[ writeOffset + j ] = values[ readOffset + j ];

				}

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		},

		clone: function () {

			var times = AnimationUtils.arraySlice( this.times, 0 );
			var values = AnimationUtils.arraySlice( this.values, 0 );

			var TypedKeyframeTrack = this.constructor;
			var track = new TypedKeyframeTrack( this.name, times, values );

			// Interpolant argument to constructor is not saved, so copy the factory method directly.
			track.createInterpolant = this.createInterpolant;

			return track;

		}

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrack.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function ( result ) {

			return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : - 1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

	}

	function getTrackTypeForValueTypeName( typeName ) {

		switch ( typeName.toLowerCase() ) {

			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':

				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':

				return VectorKeyframeTrack;

			case 'color':

				return ColorKeyframeTrack;

			case 'quaternion':

				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':

				return BooleanKeyframeTrack;

			case 'string':

				return StringKeyframeTrack;

		}

		throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

	}

	function parseKeyframeTrack( json ) {

		if ( json.type === undefined ) {

			throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

		}

		var trackType = getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we assume a constructor compatible with the base
			return new trackType( json.name, json.times, json.values, json.interpolation );

		}

	}

	Object.assign( AnimationClip, {

		parse: function ( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},

		toJSON: function ( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks,
				'uuid': clip.uuid

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},

		CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );

			}

			return new AnimationClip( name, - 1, tracks );

		},

		findByName: function ( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}

			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function ( animation, bones ) {

			if ( ! animation ) {

				console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
				return null;

			}

			var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || - 1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) { continue; }

				// process morph targets
				if ( animationKeys[ 0 ].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};

					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[ k ].morphTargets ) {

							for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[ k ];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {

					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );

					addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	Object.assign( AnimationClip.prototype, {

		resetDuration: function () {

			var tracks = this.tracks, duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max( duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

			return this;

		},

		trim: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		validate: function () {

			var valid = true;

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				valid = valid && this.tracks[ i ].validate();

			}

			return valid;

		},

		optimize: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		},

		clone: function () {

			var tracks = [];

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				tracks.push( this.tracks[ i ].clone() );

			}

			return new AnimationClip( this.name, this.duration, tracks );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) { return; }

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) { return; }

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false;
		var itemsLoaded = 0;
		var itemsTotal = 0;
		var urlModifier = undefined;
		var handlers = [];

		// Refer to #5689 for the reason why we don't set .onStart
		// in the constructor

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

		this.resolveURL = function ( url ) {

			if ( urlModifier ) {

				return urlModifier( url );

			}

			return url;

		};

		this.setURLModifier = function ( transform ) {

			urlModifier = transform;

			return this;

		};

		this.addHandler = function ( regex, loader ) {

			handlers.push( regex, loader );

			return this;

		};

		this.removeHandler = function ( regex ) {

			var index = handlers.indexOf( regex );

			if ( index !== - 1 ) {

				handlers.splice( index, 2 );

			}

			return this;

		};

		this.getHandler = function ( file ) {

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader = handlers[ i + 1 ];

				if ( regex.global ) { regex.lastIndex = 0; } // see #17920

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.crossOrigin = 'anonymous';
		this.path = '';
		this.resourcePath = '';

	}

	Object.assign( Loader.prototype, {

		load: function ( /* url, onLoad, onProgress, onError */ ) {},

		parse: function ( /* data */ ) {},

		setCrossOrigin: function ( crossOrigin ) {

			this.crossOrigin = crossOrigin;
			return this;

		},

		setPath: function ( path ) {

			this.path = path;
			return this;

		},

		setResourcePath: function ( resourcePath ) {

			this.resourcePath = resourcePath;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var loading = {};

	function FileLoader( manager ) {

		Loader.call( this, manager );

	}

	FileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: FileLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) { url = ''; }

			if ( this.path !== undefined ) { url = this.path + url; }

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) { onLoad( cached ); }

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check if request is duplicate

			if ( loading[ url ] !== undefined ) {

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				return;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[ 1 ];
				var isBase64 = !! dataUriRegexResult[ 2 ];
				var data = dataUriRegexResult[ 3 ];

				data = decodeURIComponent( data );

				if ( isBase64 ) { data = atob( data ); }

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

							var view = new Uint8Array( data.length );

							for ( var i = 0; i < data.length; i ++ ) {

								view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ view.buffer ], { type: mimeType } );

							} else {

								response = view.buffer;

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					setTimeout( function () {

						if ( onLoad ) { onLoad( response ); }

						scope.manager.itemEnd( url );

					}, 0 );

				} catch ( error ) {

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					setTimeout( function () {

						if ( onError ) { onError( error ); }

						scope.manager.itemError( url );
						scope.manager.itemEnd( url );

					}, 0 );

				}

			} else {

				// Initialise array for duplicate requests

				loading[ url ] = [];

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				var request = new XMLHttpRequest();

				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = this.response;

					var callbacks = loading[ url ];

					delete loading[ url ];

					if ( this.status === 200 || this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						if ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }

						// Add to cache only on HTTP success, so that we do not cache
						// error response bodies as proper responses to requests.
						Cache.add( url, response );

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onLoad ) { callback.onLoad( response ); }

						}

						scope.manager.itemEnd( url );

					} else {

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onError ) { callback.onError( event ); }

						}

						scope.manager.itemError( url );
						scope.manager.itemEnd( url );

					}

				}, false );

				request.addEventListener( 'progress', function ( event ) {

					var callbacks = loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onProgress ) { callback.onProgress( event ); }

					}

				}, false );

				request.addEventListener( 'error', function ( event ) {

					var callbacks = loading[ url ];

					delete loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) { callback.onError( event ); }

					}

					scope.manager.itemError( url );
					scope.manager.itemEnd( url );

				}, false );

				request.addEventListener( 'abort', function ( event ) {

					var callbacks = loading[ url ];

					delete loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) { callback.onError( event ); }

					}

					scope.manager.itemError( url );
					scope.manager.itemEnd( url );

				}, false );

				if ( this.responseType !== undefined ) { request.responseType = this.responseType; }
				if ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }

				if ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }

				for ( var header in this.requestHeader ) {

					request.setRequestHeader( header, this.requestHeader[ header ] );

				}

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setMimeType: function ( value ) {

			this.mimeType = value;
			return this;

		},

		setRequestHeader: function ( value ) {

			this.requestHeader = value;
			return this;

		}

	} );

	/**
	 * @author bhouston / http://clara.io/
	 */

	function AnimationLoader( manager ) {

		Loader.call( this, manager );

	}

	AnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: AnimationLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	function CompressedTextureLoader( manager ) {

		Loader.call( this, manager );

	}

	CompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: CompressedTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope.parse( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							{ texture.minFilter = LinearFilter; }

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) { onLoad( texture ); }

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope.parse( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps: [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) { onLoad( texture ); }

				}, onProgress, onError );

			}

			return texture;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	function DataTextureLoader( manager ) {

		Loader.call( this, manager );

	}

	DataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: DataTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.setPath( this.path );
			loader.load( url, function ( buffer ) {

				var texData = scope.parse( buffer );

				if ( ! texData ) { return; }

				if ( texData.image !== undefined ) {

					texture.image = texData.image;

				} else if ( texData.data !== undefined ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
				texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;

				texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

				if ( texData.format !== undefined ) {

					texture.format = texData.format;

				}
				if ( texData.type !== undefined ) {

					texture.type = texData.type;

				}

				if ( texData.mipmaps !== undefined ) {

					texture.mipmaps = texData.mipmaps;
					texture.minFilter = LinearMipmapLinearFilter; // presumably...

				}

				if ( texData.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) { onLoad( texture, texData ); }

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ImageLoader( manager ) {

		Loader.call( this, manager );

	}

	ImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: ImageLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) { url = this.path + url; }

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) { onLoad( cached ); }

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

			function onImageLoad() {

				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );

				Cache.add( url, this );

				if ( onLoad ) { onLoad( this ); }

				scope.manager.itemEnd( url );

			}

			function onImageError( event ) {

				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );

				if ( onError ) { onError( event ); }

				scope.manager.itemError( url );
				scope.manager.itemEnd( url );

			}

			image.addEventListener( 'load', onImageLoad, false );
			image.addEventListener( 'error', onImageError, false );

			if ( url.substr( 0, 5 ) !== 'data:' ) {

				if ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }

			}

			scope.manager.itemStart( url );

			image.src = url;

			return image;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function CubeTextureLoader( manager ) {

		Loader.call( this, manager );

	}

	CubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: CubeTextureLoader,

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) { onLoad( texture ); }

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function TextureLoader( manager ) {

		Loader.call( this, manager );

	}

	TextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: TextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			loader.load( url, function ( image ) {

				texture.image = image;

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	Object.assign( Curve.prototype, {

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( /* t, optionalTarget */ ) {

			console.warn( 'THREE.Curve: .getPoint() not implemented.' );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u, optionalTarget ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t, optionalTarget );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( divisions === undefined ) { divisions = 5; }

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) { divisions = 5; }

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( divisions === undefined ) { divisions = this.arcLengthDivisions; }

			if ( this.cacheArcLengths &&
				( this.cacheArcLengths.length === divisions + 1 ) &&
				! this.needsUpdate ) {

				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum: sum }; Sum is in the last element.

		},

		updateArcLengths: function () {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			if ( arcLengths[ i ] === targetArcLength ) {

				return i / ( il - 1 );

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function ( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) { t1 = 0; }
			if ( t2 > 1 ) { t2 = 1; }

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.arcLengthDivisions = source.arcLengthDivisions;

			return this;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};

			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;

			return data;

		},

		fromJSON: function ( json ) {

			this.arcLengthDivisions = json.arcLengthDivisions;

			return this;

		}

	} );

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		Curve.call( this );

		this.type = 'EllipseCurve';

		this.aX = aX || 0;
		this.aY = aY || 0;

		this.xRadius = xRadius || 1;
		this.yRadius = yRadius || 1;

		this.aStartAngle = aStartAngle || 0;
		this.aEndAngle = aEndAngle || 2 * Math.PI;

		this.aClockwise = aClockwise || false;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) { deltaAngle += twoPi; }
		while ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return point.set( x, y );

	};

	EllipseCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.aX = source.aX;
		this.aY = source.aY;

		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;

		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;

		this.aClockwise = source.aClockwise;

		this.aRotation = source.aRotation;

		return this;

	};


	EllipseCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.aX = this.aX;
		data.aY = this.aY;

		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;

		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;

		data.aClockwise = this.aClockwise;

		data.aRotation = this.aRotation;

		return data;

	};

	EllipseCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.aX = json.aX;
		this.aY = json.aY;

		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;

		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;

		this.aClockwise = json.aClockwise;

		this.aRotation = json.aRotation;

		return this;

	};

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		this.type = 'ArcCurve';

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	ArcCurve.prototype.isArcCurve = true;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */


	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/

	function CubicPoly() {

		var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		function init( x0, x1, t0, t1 ) {

			c0 = x0;
			c1 = t0;
			c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;

		}

		return {

			initCatmullRom: function ( x0, x1, x2, x3, tension ) {

				init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

			},

			initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

				// compute tangents when parameterized in [t1,t2]
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

				// rescale tangents for parametrization in [0,1]
				t1 *= dt1;
				t2 *= dt1;

				init( x1, x2, t1, t2 );

			},

			calc: function ( t ) {

				var t2 = t * t;
				var t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;

			}

		};

	}

	//

	var tmp = new Vector3();
	var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

	function CatmullRomCurve3( points, closed, curveType, tension ) {

		Curve.call( this );

		this.type = 'CatmullRomCurve3';

		this.points = points || [];
		this.closed = closed || false;
		this.curveType = curveType || 'centripetal';
		this.tension = tension || 0.5;

	}

	CatmullRomCurve3.prototype = Object.create( Curve.prototype );
	CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

	CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var points = this.points;
		var l = points.length;

		var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		var p0, p1, p2, p3; // 4 points

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		p1 = points[ intPoint % l ];
		p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) { dt1 = 1.0; }
			if ( dt0 < 1e-4 ) { dt0 = dt1; }
			if ( dt2 < 1e-4 ) { dt2 = dt1; }

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	};

	CatmullRomCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	};

	CatmullRomCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	};

	CatmullRomCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/Bézier_curve
	 */

	function CatmullRom( t, p0, p1, p2, p3 ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

	//

	function QuadraticBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * p;

	}

	function QuadraticBezierP1( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	}

	function QuadraticBezierP2( t, p ) {

		return t * t * p;

	}

	function QuadraticBezier( t, p0, p1, p2 ) {

		return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
			QuadraticBezierP2( t, p2 );

	}

	//

	function CubicBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	}

	function CubicBezierP1( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	}

	function CubicBezierP2( t, p ) {

		return 3 * ( 1 - t ) * t * t * p;

	}

	function CubicBezierP3( t, p ) {

		return t * t * t * p;

	}

	function CubicBezier( t, p0, p1, p2, p3 ) {

		return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
			CubicBezierP3( t, p3 );

	}

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
		this.v3 = v3 || new Vector2();

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.isCubicBezierCurve = true;

	CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);

		return point;

	};

	CubicBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function CubicBezierCurve3( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
		this.v3 = v3 || new Vector3();

	}

	CubicBezierCurve3.prototype = Object.create( Curve.prototype );
	CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

	CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);

		return point;

	};

	CubicBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function LineCurve( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve';

		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve.prototype.getTangent = function ( /* t */ ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	LineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function LineCurve3( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve3';

		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	LineCurve3.prototype = Object.create( Curve.prototype );
	LineCurve3.prototype.constructor = LineCurve3;

	LineCurve3.prototype.isLineCurve3 = true;

	LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

	QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);

		return point;

	};

	QuadraticBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve3( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

	QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);

		return point;

	};

	QuadraticBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function SplineCurve( points /* array of Vector2 */ ) {

		Curve.call( this );

		this.type = 'SplineCurve';

		this.points = points || [];

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var points = this.points;
		var p = ( points.length - 1 ) * t;

		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var p1 = points[ intPoint ];
		var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);

		return point;

	};

	SplineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		return this;

	};

	SplineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		return data;

	};

	SplineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );

		}

		return this;

	};



	var Curves = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		Curve.call( this );

		this.type = 'CurvePath';

		this.curves = [];
		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) { divisions = 40; }

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
					: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
						: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
							: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j ++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		copy: function ( source ) {

			Curve.prototype.copy.call( this, source );

			this.curves = [];

			for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

				var curve = source.curves[ i ];

				this.curves.push( curve.clone() );

			}

			this.autoClose = source.autoClose;

			return this;

		},

		toJSON: function () {

			var data = Curve.prototype.toJSON.call( this );

			data.autoClose = this.autoClose;
			data.curves = [];

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				var curve = this.curves[ i ];
				data.curves.push( curve.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Curve.prototype.fromJSON.call( this, json );

			this.autoClose = json.autoClose;
			this.curves = [];

			for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

				var curve = json.curves[ i ];
				this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

			}

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 **/

	function Path( points ) {

		CurvePath.call( this );

		this.type = 'Path';

		this.currentPoint = new Vector2();

		if ( points ) {

			this.setFromPoints( points );

		}

	}

	Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

		constructor: Path,

		setFromPoints: function ( points ) {

			this.moveTo( points[ 0 ].x, points[ 0 ].y );

			for ( var i = 1, l = points.length; i < l; i ++ ) {

				this.lineTo( points[ i ].x, points[ i ].y );

			}

			return this;

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

			return this;

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

			return this;

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

			return this;

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

			return this;

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

			return this;

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

			return this;

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

			return this;

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			return this;

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

			return this;

		},

		copy: function ( source ) {

			CurvePath.prototype.copy.call( this, source );

			this.currentPoint.copy( source.currentPoint );

			return this;

		},

		toJSON: function () {

			var data = CurvePath.prototype.toJSON.call( this );

			data.currentPoint = this.currentPoint.toArray();

			return data;

		},

		fromJSON: function ( json ) {

			CurvePath.prototype.fromJSON.call( this, json );

			this.currentPoint.fromArray( json.currentPoint );

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape( points ) {

		Path.call( this, points );

		this.uuid = _Math.generateUUID();

		this.type = 'Shape';

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( Path.prototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// get points of shape and holes (keypoints based on segments parameter)

		extractPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		copy: function ( source ) {

			Path.prototype.copy.call( this, source );

			this.holes = [];

			for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

				var hole = source.holes[ i ];

				this.holes.push( hole.clone() );

			}

			return this;

		},

		toJSON: function () {

			var data = Path.prototype.toJSON.call( this );

			data.uuid = this.uuid;
			data.holes = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				var hole = this.holes[ i ];
				data.holes.push( hole.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Path.prototype.fromJSON.call( this, json );

			this.uuid = json.uuid;
			this.holes = [];

			for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

				var hole = json.holes[ i ];
				this.holes.push( new Path().fromJSON( hole ) );

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }

			if ( this.distance !== undefined ) { data.object.distance = this.distance; }
			if ( this.angle !== undefined ) { data.object.angle = this.angle; }
			if ( this.decay !== undefined ) { data.object.decay = this.decay; }
			if ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }

			if ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.mapPass = null;
		this.matrix = new Matrix4();

		this._frustum = new Frustum();
		this._frameExtents = new Vector2( 1, 1 );

		this._viewportCount = 1;

		this._viewports = [

			new Vector4( 0, 0, 1, 1 )

		];

	}

	Object.assign( LightShadow.prototype, {

		_projScreenMatrix: new Matrix4(),

		_lightPositionWorld: new Vector3(),

		_lookTarget: new Vector3(),

		getViewportCount: function () {

			return this._viewportCount;

		},

		getFrustum: function () {

			return this._frustum;

		},

		updateMatrices: function ( light ) {

			var shadowCamera = this.camera,
				shadowMatrix = this.matrix,
				projScreenMatrix = this._projScreenMatrix,
				lookTarget = this._lookTarget,
				lightPositionWorld = this._lightPositionWorld;

			lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			shadowCamera.position.copy( lightPositionWorld );

			lookTarget.setFromMatrixPosition( light.target.matrixWorld );
			shadowCamera.lookAt( lookTarget );
			shadowCamera.updateMatrixWorld();

			projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
			this._frustum.setFromMatrix( projScreenMatrix );

			shadowMatrix.set(
				0.5, 0.0, 0.0, 0.5,
				0.0, 0.5, 0.0, 0.5,
				0.0, 0.0, 0.5, 0.5,
				0.0, 0.0, 0.0, 1.0
			);

			shadowMatrix.multiply( shadowCamera.projectionMatrix );
			shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

		},

		getViewport: function ( viewportIndex ) {

			return this._viewports[ viewportIndex ];

		},

		getFrameExtents: function () {

			return this._frameExtents;

		},

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) { object.bias = this.bias; }
			if ( this.radius !== 1 ) { object.radius = this.radius; }
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		updateMatrices: function ( light ) {

			var camera = this.camera;

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || camera.far;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

			LightShadow.prototype.updateMatrices.call( this, light );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				return this.intensity * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				this.intensity = power / Math.PI;

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	function PointLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );

		this._frameExtents = new Vector2( 4, 2 );

		this._viewportCount = 6;

		this._viewports = [
			// These viewports map a cube-map onto a 2D texture with the
			// following orientation:
			//
			//  xzXZ
			//   y Y
			//
			// X - Positive x direction
			// x - Negative x direction
			// Y - Positive y direction
			// y - Negative y direction
			// Z - Positive z direction
			// z - Negative z direction

			// positive X
			new Vector4( 2, 1, 1, 1 ),
			// negative X
			new Vector4( 0, 1, 1, 1 ),
			// positive Z
			new Vector4( 3, 1, 1, 1 ),
			// negative Z
			new Vector4( 1, 1, 1, 1 ),
			// positive Y
			new Vector4( 3, 0, 1, 1 ),
			// negative Y
			new Vector4( 1, 0, 1, 1 )
		];

		this._cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		this._cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

	}

	PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: PointLightShadow,

		isPointLightShadow: true,

		updateMatrices: function ( light, viewportIndex ) {

			if ( viewportIndex === undefined ) { viewportIndex = 0; }

			var camera = this.camera,
				shadowMatrix = this.matrix,
				lightPositionWorld = this._lightPositionWorld,
				lookTarget = this._lookTarget,
				projScreenMatrix = this._projScreenMatrix;

			lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			camera.position.copy( lightPositionWorld );

			lookTarget.copy( camera.position );
			lookTarget.add( this._cubeDirections[ viewportIndex ] );
			camera.up.copy( this._cubeUps[ viewportIndex ] );
			camera.lookAt( lookTarget );
			camera.updateMatrixWorld();

			shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );

			projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			this._frustum.setFromMatrix( projScreenMatrix );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				this.intensity = power / ( 4 * Math.PI );

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new PointLightShadow();

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = ( left !== undefined ) ? left : - 1;
		this.right = ( right !== undefined ) ? right : 1;
		this.top = ( top !== undefined ) ? top : 1;
		this.bottom = ( bottom !== undefined ) ? bottom : - 1;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null && this.view.enabled ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

			this.projectionMatrixInverse.getInverse( this.projectionMatrix );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow() {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow,

		isDirectionalLightShadow: true,

		updateMatrices: function ( light ) {

			LightShadow.prototype.updateMatrices.call( this, light );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true

	} );

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function RectAreaLight( color, intensity, width, height ) {

		Light.call( this, color, intensity );

		this.type = 'RectAreaLight';

		this.width = ( width !== undefined ) ? width : 10;
		this.height = ( height !== undefined ) ? height : 10;

	}

	RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: RectAreaLight,

		isRectAreaLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.width = source.width;
			this.height = source.height;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Light.prototype.toJSON.call( this, meta );

			data.object.width = this.width;
			data.object.height = this.height;

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		Loader.call( this, manager );

		this.textures = {};

	}

	MaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: MaterialLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) { material.uuid = json.uuid; }
			if ( json.name !== undefined ) { material.name = json.name; }
			if ( json.color !== undefined ) { material.color.setHex( json.color ); }
			if ( json.roughness !== undefined ) { material.roughness = json.roughness; }
			if ( json.metalness !== undefined ) { material.metalness = json.metalness; }
			if ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }
			if ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }
			if ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }
			if ( json.shininess !== undefined ) { material.shininess = json.shininess; }
			if ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }
			if ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }
			if ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }
			if ( json.fog !== undefined ) { material.fog = json.fog; }
			if ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }
			if ( json.blending !== undefined ) { material.blending = json.blending; }
			if ( json.combine !== undefined ) { material.combine = json.combine; }
			if ( json.side !== undefined ) { material.side = json.side; }
			if ( json.opacity !== undefined ) { material.opacity = json.opacity; }
			if ( json.transparent !== undefined ) { material.transparent = json.transparent; }
			if ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }
			if ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }
			if ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }
			if ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }

			if ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }
			if ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }
			if ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }
			if ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }
			if ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }
			if ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }
			if ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }
			if ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }

			if ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }
			if ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }
			if ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }
			if ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }

			if ( json.rotation !== undefined ) { material.rotation = json.rotation; }

			if ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }
			if ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }
			if ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }
			if ( json.scale !== undefined ) { material.scale = json.scale; }

			if ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }
			if ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }
			if ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }

			if ( json.skinning !== undefined ) { material.skinning = json.skinning; }
			if ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }
			if ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }
			if ( json.dithering !== undefined ) { material.dithering = json.dithering; }

			if ( json.visible !== undefined ) { material.visible = json.visible; }

			if ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }

			if ( json.userData !== undefined ) { material.userData = json.userData; }

			// Shader Material

			if ( json.uniforms !== undefined ) {

				for ( var name in json.uniforms ) {

					var uniform = json.uniforms[ name ];

					material.uniforms[ name ] = {};

					switch ( uniform.type ) {

						case 't':
							material.uniforms[ name ].value = getTexture( uniform.value );
							break;

						case 'c':
							material.uniforms[ name ].value = new Color().setHex( uniform.value );
							break;

						case 'v2':
							material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
							break;

						case 'v3':
							material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
							break;

						case 'v4':
							material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
							break;

						case 'm3':
							material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );

						case 'm4':
							material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
							break;

						default:
							material.uniforms[ name ].value = uniform.value;

					}

				}

			}

			if ( json.defines !== undefined ) { material.defines = json.defines; }
			if ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }
			if ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }

			if ( json.extensions !== undefined ) {

				for ( var key in json.extensions ) {

					material.extensions[ key ] = json.extensions[ key ];

				}

			}

			// Deprecated

			if ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading

			// for PointsMaterial

			if ( json.size !== undefined ) { material.size = json.size; }
			if ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }

			// maps

			if ( json.map !== undefined ) { material.map = getTexture( json.map ); }
			if ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }
			if ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }

			if ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }
			if ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }
			if ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }
			if ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }

			if ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }
			if ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }

			if ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }
			if ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }

			if ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }

			if ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }
			if ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }

			if ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }
			if ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }

			if ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }
			if ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }

			if ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }
			if ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }

			if ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }

			if ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }
			if ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }

			return material;

		},

		setTextures: function ( value ) {

			this.textures = value;
			return this;

		}

	} );

	/**
	 * @author Don McCurdy / https://www.donmccurdy.com
	 */

	var LoaderUtils = {

		decodeText: function ( array ) {

			if ( typeof TextDecoder !== 'undefined' ) {

				return new TextDecoder().decode( array );

			}

			// Avoid the String.fromCharCode.apply(null, array) shortcut, which
			// throws a "maximum call stack size exceeded" error for large arrays.

			var s = '';

			for ( var i = 0, il = array.length; i < il; i ++ ) {

				// Implicitly assumes little-endian.
				s += String.fromCharCode( array[ i ] );

			}

			try {

				// merges multi-byte utf-8 characters.

				return decodeURIComponent( escape( s ) );

			} catch ( e ) { // see #16358

				return s;

			}

		},

		extractUrlBase: function ( url ) {

			var index = url.lastIndexOf( '/' );

			if ( index === - 1 ) { return './'; }

			return url.substr( 0, index + 1 );

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

		constructor: InstancedBufferGeometry,

		isInstancedBufferGeometry: true,

		copy: function ( source ) {

			BufferGeometry.prototype.copy.call( this, source );

			this.maxInstancedCount = source.maxInstancedCount;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var data = BufferGeometry.prototype.toJSON.call( this );

			data.maxInstancedCount = this.maxInstancedCount;

			data.isInstancedBufferGeometry = true;

			return data;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {

		if ( typeof ( normalized ) === 'number' ) {

			meshPerAttribute = normalized;

			normalized = false;

			console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

		}

		BufferAttribute.call( this, array, itemSize, normalized );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

		constructor: InstancedBufferAttribute,

		isInstancedBufferAttribute: true,

		copy: function ( source ) {

			BufferAttribute.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		},

		toJSON: function ()	{

			var data = BufferAttribute.prototype.toJSON.call( this );

			data.meshPerAttribute = this.meshPerAttribute;

			data.isInstancedBufferAttribute = true;

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		Loader.call( this, manager );

	}

	BufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: BufferGeometryLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();

			var index = json.data.index;

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
				var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
				var bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
				if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
				geometry.setAttribute( key, bufferAttribute );

			}

			var morphAttributes = json.data.morphAttributes;

			if ( morphAttributes ) {

				for ( var key in morphAttributes ) {

					var attributeArray = morphAttributes[ key ];

					var array = [];

					for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

						var attribute = attributeArray[ i ];
						var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

						var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
						if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
						array.push( bufferAttribute );

					}

					geometry.morphAttributes[ key ] = array;

				}

			}

			var morphTargetsRelative = json.data.morphTargetsRelative;

			if ( morphTargetsRelative ) {

				geometry.morphTargetsRelative = true;

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			if ( json.name ) { geometry.name = json.name; }
			if ( json.userData ) { geometry.userData = json.userData; }

			return geometry;

		}

	} );

	var TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		// Workaround for IE11 pre KB2929437. See #11440
		Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader( manager ) {

		Loader.call( this, manager );

	}

	ObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: ObjectLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
			this.resourcePath = this.resourcePath || path;

			var loader = new FileLoader( scope.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				var json = null;

				try {

					json = JSON.parse( text );

				} catch ( error ) {

					if ( onError !== undefined ) { onError( error ); }

					console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

					return;

				}

				var metadata = json.metadata;

				if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

					console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
					return;

				}

				scope.parse( json, onLoad );

			}, onProgress, onError );

		},

		parse: function ( json, onLoad ) {

			var shapes = this.parseShape( json.shapes );
			var geometries = this.parseGeometries( json.geometries, shapes );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) { onLoad( object ); }

			} );

			var textures = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) { onLoad( object ); }

			}

			return object;

		},

		parseShape: function ( json ) {

			var shapes = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var shape = new Shape().fromJSON( json[ i ] );

					shapes[ shape.uuid ] = shape;

				}

			}

			return shapes;

		},

		parseGeometries: function ( json, shapes ) {

			var geometries = {};

			if ( json !== undefined ) {

				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'DodecahedronBufferGeometry':
						case 'IcosahedronGeometry':
						case 'IcosahedronBufferGeometry':
						case 'OctahedronGeometry':
						case 'OctahedronBufferGeometry':
						case 'TetrahedronGeometry':
						case 'TetrahedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'TubeGeometry':
						case 'TubeBufferGeometry':

							// This only works for built-in curves (e.g. CatmullRomCurve3).
							// User defined curves or instances of CurvePath will not be deserialized.
							geometry = new Geometries[ data.type ](
								new Curves[ data.path.type ]().fromJSON( data.path ),
								data.tubularSegments,
								data.radius,
								data.radialSegments,
								data.closed
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'PolyhedronGeometry':
						case 'PolyhedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.vertices,
								data.indices,
								data.radius,
								data.details
							);

							break;

						case 'ShapeGeometry':
						case 'ShapeBufferGeometry':

							var geometryShapes = [];

							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

								var shape = shapes[ data.shapes[ j ] ];

								geometryShapes.push( shape );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.curveSegments
							);

							break;


						case 'ExtrudeGeometry':
						case 'ExtrudeBufferGeometry':

							var geometryShapes = [];

							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

								var shape = shapes[ data.shapes[ j ] ];

								geometryShapes.push( shape );

							}

							var extrudePath = data.options.extrudePath;

							if ( extrudePath !== undefined ) {

								data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.options
							);

							break;

						case 'BufferGeometry':
						case 'InstancedBufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							if ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {

								var geometryLoader = new THREE.LegacyJSONLoader();
								geometry = geometryLoader.parse( data, this.resourcePath ).geometry;


							} else {

								console.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".' );

							}

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) { geometry.name = data.name; }
					if ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var cache = {}; // MultiMaterial
			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.type === 'MultiMaterial' ) {

						// Deprecated

						var array = [];

						for ( var j = 0; j < data.materials.length; j ++ ) {

							var material = data.materials[ j ];

							if ( cache[ material.uuid ] === undefined ) {

								cache[ material.uuid ] = loader.parse( material );

							}

							array.push( cache[ material.uuid ] );

						}

						materials[ data.uuid ] = array;

					} else {

						if ( cache[ data.uuid ] === undefined ) {

							cache[ data.uuid ] = loader.parse( data );

						}

						materials[ data.uuid ] = cache[ data.uuid ];

					}

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var data = json[ i ];

				var clip = AnimationClip.parse( data );

				if ( data.uuid !== undefined ) { clip.uuid = data.uuid; }

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemError( url );
					scope.manager.itemEnd( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, il = json.length; i < il; i ++ ) {

					var image = json[ i ];
					var url = image.url;

					if ( Array.isArray( url ) ) {

						// load array of images e.g CubeTexture

						images[ image.uuid ] = [];

						for ( var j = 0, jl = url.length; j < jl; j ++ ) {

							var currentUrl = url[ j ];

							var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;

							images[ image.uuid ].push( loadImage( path ) );

						}

					} else {

						// load single image

						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;

						images[ image.uuid ] = loadImage( path );

					}

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof value === 'number' ) { return value; }

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture;

					if ( Array.isArray( images[ data.image ] ) ) {

						texture = new CubeTexture( images[ data.image ] );

					} else {

						texture = new Texture( images[ data.image ] );

					}

					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) { texture.name = data.name; }

					if ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }

					if ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }
					if ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }
					if ( data.center !== undefined ) { texture.center.fromArray( data.center ); }
					if ( data.rotation !== undefined ) { texture.rotation = data.rotation; }

					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

					}

					if ( data.format !== undefined ) { texture.format = data.format; }
					if ( data.type !== undefined ) { texture.type = data.type; }
					if ( data.encoding !== undefined ) { texture.encoding = data.encoding; }

					if ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }
					if ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }
					if ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }

					if ( data.flipY !== undefined ) { texture.flipY = data.flipY; }

					if ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }
					if ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function ( data, geometries, materials ) {

			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) { return undefined; }

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) { object.focus = data.focus; }
					if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
					if ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }
					if ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }
					if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
					if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'InstancedMesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );
					var count = data.count;
					var instanceMatrix = data.instanceMatrix;

					object = new InstancedMesh( geometry, material, count );
					object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) { object.name = data.name; }

			if ( data.matrix !== undefined ) {

				object.matrix.fromArray( data.matrix );

				if ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }
				if ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }

			} else {

				if ( data.position !== undefined ) { object.position.fromArray( data.position ); }
				if ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }
				if ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }
				if ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }

			}

			if ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }
			if ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }
				if ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }
				if ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }
				if ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }

			}

			if ( data.visible !== undefined ) { object.visible = data.visible; }
			if ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }
			if ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }
			if ( data.userData !== undefined ) { object.userData = data.userData; }
			if ( data.layers !== undefined ) { object.layers.mask = data.layers; }

			if ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }

			if ( data.children !== undefined ) {

				var children = data.children;

				for ( var i = 0; i < children.length; i ++ ) {

					object.add( this.parseObject( children[ i ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				if ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		}

	} );

	var TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};

	var TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};

	var TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipmapNearestFilter: NearestMipmapNearestFilter,
		NearestMipmapLinearFilter: NearestMipmapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipmapNearestFilter: LinearMipmapNearestFilter,
		LinearMipmapLinearFilter: LinearMipmapLinearFilter
	};

	/**
	 * @author thespite / http://clicktorelease.com/
	 */


	function ImageBitmapLoader( manager ) {

		if ( typeof createImageBitmap === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

		}

		if ( typeof fetch === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

		}

		Loader.call( this, manager );

		this.options = undefined;

	}

	ImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: ImageBitmapLoader,

		setOptions: function setOptions( options ) {

			this.options = options;

			return this;

		},

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) { url = ''; }

			if ( this.path !== undefined ) { url = this.path + url; }

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) { onLoad( cached ); }

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			fetch( url ).then( function ( res ) {

				return res.blob();

			} ).then( function ( blob ) {

				if ( scope.options === undefined ) {

					// Workaround for FireFox. It causes an error if you pass options.
					return createImageBitmap( blob );

				} else {

					return createImageBitmap( blob, scope.options );

				}

			} ).then( function ( imageBitmap ) {

				Cache.add( url, imageBitmap );

				if ( onLoad ) { onLoad( imageBitmap ); }

				scope.manager.itemEnd( url );

			} ).catch( function ( e ) {

				if ( onError ) { onError( e ); }

				scope.manager.itemError( url );
				scope.manager.itemEnd( url );

			} );

			scope.manager.itemStart( url );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	 **/

	function ShapePath() {

		this.type = 'ShapePath';

		this.color = new Color();

		this.subPaths = [];
		this.currentPath = null;

	}

	Object.assign( ShapePath.prototype, {

		moveTo: function ( x, y ) {

			this.currentPath = new Path();
			this.subPaths.push( this.currentPath );
			this.currentPath.moveTo( x, y );

			return this;

		},

		lineTo: function ( x, y ) {

			this.currentPath.lineTo( x, y );

			return this;

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

			return this;

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

			return this;

		},

		splineThru: function ( pts ) {

			this.currentPath.splineThru( pts );

			return this;

		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		{ continue; }

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		{ return	true; }		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				{ return	true; }		// inPt is on contour ?
							if ( perpEdge < 0 ) 				{ continue; }
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		{ continue; }			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		{ return	true; }	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) { return []; }

			if ( noHoles === true )	{ return	toShapesNoHoles( subPaths ); }


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	{ mainIdx ++; }

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	{ mainIdx ++; }
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	{ return	toShapesNoHoles( subPaths ); }


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	{ newShapeHoles = betterShapeHoles; }

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */


	function Font( data ) {

		this.type = 'Font';

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size ) {

			if ( size === undefined ) { size = 100; }

			var shapes = [];
			var paths = createPaths( text, size, this.data );

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	function createPaths( text, size, data ) {

		var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988
		var scale = size / data.resolution;
		var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

		var paths = [];

		var offsetX = 0, offsetY = 0;

		for ( var i = 0; i < chars.length; i ++ ) {

			var char = chars[ i ];

			if ( char === '\n' ) {

				offsetX = 0;
				offsetY -= line_height;

			} else {

				var ret = createPath( char, scale, offsetX, offsetY, data );
				offsetX += ret.offsetX;
				paths.push( ret.path );

			}

		}

		return paths;

	}

	function createPath( char, scale, offsetX, offsetY, data ) {

		var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

		if ( ! glyph ) {

			console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );

			return;

		}

		var path = new ShapePath();

		var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

		if ( glyph.o ) {

			var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

			for ( var i = 0, l = outline.length; i < l; ) {

				var action = outline[ i ++ ];

				switch ( action ) {

					case 'm': // moveTo

						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;

						path.moveTo( x, y );

						break;

					case 'l': // lineTo

						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;

						path.lineTo( x, y );

						break;

					case 'q': // quadraticCurveTo

						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;

						path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

						break;

					case 'b': // bezierCurveTo

						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;
						cpx2 = outline[ i ++ ] * scale + offsetX;
						cpy2 = outline[ i ++ ] * scale + offsetY;

						path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

						break;

				}

			}

		}

		return { offsetX: glyph.ha * scale, path: path };

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		Loader.call( this, manager );

	}

	FontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: FontLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) { onLoad( font ); }

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _context;

	var AudioContext = {

		getContext: function () {

			if ( _context === undefined ) {

				_context = new ( window.AudioContext || window.webkitAudioContext )();

			}

			return _context;

		},

		setContext: function ( value ) {

			_context = value;

		}

	};

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		Loader.call( this, manager );

	}

	AudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: AudioLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.setPath( this.path );
			loader.load( url, function ( buffer ) {

				// Create a copy of the buffer. The `decodeAudioData` method
				// detaches the buffer when complete, preventing reuse.
				var bufferCopy = buffer.slice( 0 );

				var context = AudioContext.getContext();
				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Primary reference:
	 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
	 *
	 * Secondary reference:
	 *   https://www.ppsloan.org/publications/StupidSH36.pdf
	 */

	// 3-band SH defined by 9 coefficients

	function SphericalHarmonics3() {

		this.coefficients = [];

		for ( var i = 0; i < 9; i ++ ) {

			this.coefficients.push( new Vector3() );

		}

	}

	Object.assign( SphericalHarmonics3.prototype, {

		isSphericalHarmonics3: true,

		set: function ( coefficients ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].copy( coefficients[ i ] );

			}

			return this;

		},

		zero: function () {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].set( 0, 0, 0 );

			}

			return this;

		},

		// get the radiance in the direction of the normal
		// target is a Vector3
		getAt: function ( normal, target ) {

			// normal is assumed to be unit length

			var x = normal.x, y = normal.y, z = normal.z;

			var coeff = this.coefficients;

			// band 0
			target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

			// band 1
			target.addScale( coeff[ 1 ], 0.488603 * y );
			target.addScale( coeff[ 2 ], 0.488603 * z );
			target.addScale( coeff[ 3 ], 0.488603 * x );

			// band 2
			target.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );
			target.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );
			target.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
			target.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );
			target.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

			return target;

		},

		// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
		// target is a Vector3
		// https://graphics.stanford.edu/papers/envmap/envmap.pdf
		getIrradianceAt: function ( normal, target ) {

			// normal is assumed to be unit length

			var x = normal.x, y = normal.y, z = normal.z;

			var coeff = this.coefficients;

			// band 0
			target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095

			// band 1
			target.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
			target.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );
			target.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );

			// band 2
			target.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
			target.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );
			target.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
			target.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );
			target.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274

			return target;

		},

		add: function ( sh ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].add( sh.coefficients[ i ] );

			}

			return this;

		},


		scale: function ( s ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].multiplyScalar( s );

			}

			return this;

		},

		lerp: function ( sh, alpha ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

			}

			return this;

		},

		equals: function ( sh ) {

			for ( var i = 0; i < 9; i ++ ) {

				if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

					return false;

				}

			}

			return true;

		},

		copy: function ( sh ) {

			return this.set( sh.coefficients );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			var coefficients = this.coefficients;

			for ( var i = 0; i < 9; i ++ ) {

				coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			var coefficients = this.coefficients;

			for ( var i = 0; i < 9; i ++ ) {

				coefficients[ i ].toArray( array, offset + ( i * 3 ) );

			}

			return array;

		}

	} );

	Object.assign( SphericalHarmonics3, {

		// evaluate the basis functions
		// shBasis is an Array[ 9 ]
		getBasisAt: function ( normal, shBasis ) {

			// normal is assumed to be unit length

			var x = normal.x, y = normal.y, z = normal.z;

			// band 0
			shBasis[ 0 ] = 0.282095;

			// band 1
			shBasis[ 1 ] = 0.488603 * y;
			shBasis[ 2 ] = 0.488603 * z;
			shBasis[ 3 ] = 0.488603 * x;

			// band 2
			shBasis[ 4 ] = 1.092548 * x * y;
			shBasis[ 5 ] = 1.092548 * y * z;
			shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
			shBasis[ 7 ] = 1.092548 * x * z;
			shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

		}

	} );

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * A LightProbe is a source of indirect-diffuse light
	 */

	function LightProbe( sh, intensity ) {

		Light.call( this, undefined, intensity );

		this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();

	}

	LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: LightProbe,

		isLightProbe: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.sh.copy( source.sh );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Light.prototype.toJSON.call( this, meta );

			// data.sh = this.sh.toArray(); // todo

			return data;

		}

	} );

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function HemisphereLightProbe( skyColor, groundColor, intensity ) {

		LightProbe.call( this, undefined, intensity );

		var color1 = new Color().set( skyColor );
		var color2 = new Color().set( groundColor );

		var sky = new Vector3( color1.r, color1.g, color1.b );
		var ground = new Vector3( color2.r, color2.g, color2.b );

		// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
		var c0 = Math.sqrt( Math.PI );
		var c1 = c0 * Math.sqrt( 0.75 );

		this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
		this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

	}

	HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

		constructor: HemisphereLightProbe,

		isHemisphereLightProbe: true,

		copy: function ( source ) { // modifying colors not currently supported

			LightProbe.prototype.copy.call( this, source );

			return this;

		},

		toJSON: function ( meta ) {

			var data = LightProbe.prototype.toJSON.call( this, meta );

			// data.sh = this.sh.toArray(); // todo

			return data;

		}

	} );

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function AmbientLightProbe( color, intensity ) {

		LightProbe.call( this, undefined, intensity );

		var color1 = new Color().set( color );

		// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
		this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

	}

	AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

		constructor: AmbientLightProbe,

		isAmbientLightProbe: true,

		copy: function ( source ) { // modifying color not currently supported

			LightProbe.prototype.copy.call( this, source );

			return this;

		},

		toJSON: function ( meta ) {

			var data = LightProbe.prototype.toJSON.call( this, meta );

			// data.sh = this.sh.toArray(); // todo

			return data;

		}

	} );

	var _eyeRight = new Matrix4();
	var _eyeLeft = new Matrix4();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

		this._cache = {
			focus: null,
			fov: null,
			aspect: null,
			near: null,
			far: null,
			zoom: null,
			eyeSep: null
		};

	}

	Object.assign( StereoCamera.prototype, {

		update: function ( camera ) {

			var cache = this._cache;

			var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
				cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
				cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

			if ( needsUpdate ) {

				cache.focus = camera.focus;
				cache.fov = camera.fov;
				cache.aspect = camera.aspect * this.aspect;
				cache.near = camera.near;
				cache.far = camera.far;
				cache.zoom = camera.zoom;
				cache.eyeSep = this.eyeSep;

				// Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				var projectionMatrix = camera.projectionMatrix.clone();
				var eyeSepHalf = cache.eyeSep / 2;
				var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
				var ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
				var xmin, xmax;

				// translate xOffset

				_eyeLeft.elements[ 12 ] = - eyeSepHalf;
				_eyeRight.elements[ 12 ] = eyeSepHalf;

				// for left eye

				xmin = - ymax * cache.aspect + eyeSepOnProjection;
				xmax = ymax * cache.aspect + eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraL.projectionMatrix.copy( projectionMatrix );

				// for right eye

				xmin = - ymax * cache.aspect - eyeSepOnProjection;
				xmax = ymax * cache.aspect - eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraR.projectionMatrix.copy( projectionMatrix );

			}

			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Object.assign( Clock.prototype, {

		start: function () {

			this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();
				return 0;

			}

			if ( this.running ) {

				var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _position$2 = new Vector3();
	var _quaternion$3 = new Quaternion();
	var _scale$1 = new Vector3();
	var _orientation = new Vector3();

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = AudioContext.getContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

		this.timeDelta = 0;

		// private

		this._clock = new Clock();

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

			return this;

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

			return this;

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

			return this;

		},

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.timeDelta = this._clock.getDelta();

			this.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );

			_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );

			if ( listener.positionX ) {

				// code path for Chrome (see #14393)

				var endTime = this.context.currentTime + this.timeDelta;

				listener.positionX.linearRampToValueAtTime( _position$2.x, endTime );
				listener.positionY.linearRampToValueAtTime( _position$2.y, endTime );
				listener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );
				listener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );
				listener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );
				listener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );
				listener.upX.linearRampToValueAtTime( up.x, endTime );
				listener.upY.linearRampToValueAtTime( up.y, endTime );
				listener.upZ.linearRampToValueAtTime( up.z, endTime );

			} else {

				listener.setPosition( _position$2.x, _position$2.y, _position$2.z );
				listener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.listener = listener;
		this.context = listener.context;

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.buffer = null;
		this.detune = 0;
		this.loop = false;
		this.loopStart = 0;
		this.loopEnd = 0;
		this.offset = 0;
		this.duration = undefined;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this._startedAt = 0;
		this._pausedAt = 0;

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setMediaElementSource: function ( mediaElement ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'mediaNode';
			this.source = this.context.createMediaElementSource( mediaElement );
			this.connect();

			return this;

		},

		setMediaStreamSource: function ( mediaStream ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'mediaStreamNode';
			this.source = this.context.createMediaStreamSource( mediaStream );
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) { this.play(); }

			return this;

		},

		play: function ( delay ) {

			if ( delay === undefined ) { delay = 0; }

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this._startedAt = this.context.currentTime + delay;

			var source = this.context.createBufferSource();
			source.buffer = this.buffer;
			source.loop = this.loop;
			source.loopStart = this.loopStart;
			source.loopEnd = this.loopEnd;
			source.onended = this.onEnded.bind( this );
			source.start( this._startedAt, this._pausedAt + this.offset, this.duration );

			this.isPlaying = true;

			this.source = source;

			this.setDetune( this.detune );
			this.setPlaybackRate( this.playbackRate );

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			if ( this.isPlaying === true ) {

				this._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;

				this.source.stop();
				this.source.onended = null;

				this.isPlaying = false;

			}

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this._pausedAt = 0;

			this.source.stop();
			this.source.onended = null;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) { value = []; }

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		setDetune: function ( value ) {

			this.detune = value;

			if ( this.source.detune === undefined ) { return; } // only set detune when available

			if ( this.isPlaying === true ) {

				this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

			}

			return this;

		},

		getDetune: function () {

			return this.detune;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.loop = value;

			if ( this.isPlaying === true ) {

				this.source.loop = this.loop;

			}

			return this;

		},

		setLoopStart: function ( value ) {

			this.loopStart = value;

			return this;

		},

		setLoopEnd: function ( value ) {

			this.loopEnd = value;

			return this;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},

		setVolume: function ( value ) {

			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _position$3 = new Vector3();
	var _quaternion$4 = new Quaternion();
	var _scale$2 = new Vector3();
	var _orientation$1 = new Vector3();

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.panningModel = 'HRTF';
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

			return this;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

			return this;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

			return this;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

			return this;

		},

		setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

			this.panner.coneInnerAngle = coneInnerAngle;
			this.panner.coneOuterAngle = coneOuterAngle;
			this.panner.coneOuterGain = coneOuterGain;

			return this;

		},

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			if ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }

			this.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );

			_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );

			var panner = this.panner;

			if ( panner.positionX ) {

				// code path for Chrome and Firefox (see #14393)

				var endTime = this.context.currentTime + this.listener.timeDelta;

				panner.positionX.linearRampToValueAtTime( _position$3.x, endTime );
				panner.positionY.linearRampToValueAtTime( _position$3.y, endTime );
				panner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );
				panner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );
				panner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );
				panner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );

			} else {

				panner.setPosition( _position$3.x, _position$3.y, _position$3.z );
				panner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':
				mixFunction = this._slerp;
				break;

			case 'string':
			case 'bool':
				bufferType = Array;
				mixFunction = this._select;
				break;

			default:
				mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	Object.assign( PropertyMixer.prototype, {

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function ( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function ( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
					buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function () {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function () {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function ( buffer, dstOffset, srcOffset, t ) {

			Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	} );

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	// Characters [].:/ are reserved for track binding syntax.
	var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
	var _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );

	// Attempts to allow node names from any language. ES5's `\w` regexp matches
	// only latin characters, and the unicode \p{L} is not yet supported. So
	// instead, we exclude reserved characters and match everything else.
	var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
	var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

	// Parent directories, delimited by '/' or ':'. Currently unused, but must
	// be matched to parse the rest of the track name.
	var _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

	// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
	var _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

	// Object on target node, and accessor. May not contain reserved
	// characters. Accessor may contain any character except closing bracket.
	var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

	// Property and accessor. May not contain reserved characters. Accessor may
	// contain any non-bracket characters.
	var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

	var _trackRe = new RegExp( ''
		+ '^'
		+ _directoryRe
		+ _nodeRe
		+ _objectRe
		+ _propertyRe
		+ '$'
	);

	var _supportedObjectNames = [ 'material', 'materials', 'bones' ];

	function Composite( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	}

	Object.assign( Composite.prototype, {

		getValue: function ( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) { binding.getValue( array, offset ); }

		},

		setValue: function ( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	} );


	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	Object.assign( PropertyBinding, {

		Composite: Composite,

		create: function ( root, path, parsedPath ) {

			if ( ! ( root && root.isAnimationObjectGroup ) ) {

				return new PropertyBinding( root, path, parsedPath );

			} else {

				return new PropertyBinding.Composite( root, path, parsedPath );

			}

		},

		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param {string} name Node name to be sanitized.
		 * @return {string}
		 */
		sanitizeNodeName: function ( name ) {

			return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );

		},

		parseTrackName: function ( trackName ) {

			var matches = _trackRe.exec( trackName );

			if ( ! matches ) {

				throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

			}

			var results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[ 2 ],
				objectName: matches[ 3 ],
				objectIndex: matches[ 4 ],
				propertyName: matches[ 5 ], // required
				propertyIndex: matches[ 6 ]
			};

			var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

			if ( lastDot !== undefined && lastDot !== - 1 ) {

				var objectName = results.nodeName.substring( lastDot + 1 );

				// Object names must be checked against a whitelist. Otherwise, there
				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
				// 'bar' could be the objectName, or part of a nodeName (which can
				// include '.' characters).
				if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {

					results.nodeName = results.nodeName.substring( 0, lastDot );
					results.objectName = objectName;

				}

			}

			if ( results.propertyName === null || results.propertyName.length === 0 ) {

				throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

			}

			return results;

		},

		findNode: function ( root, nodeName ) {

			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

				return root;

			}

			// search into skeleton bones.
			if ( root.skeleton ) {

				var bone = root.skeleton.getBoneByName( nodeName );

				if ( bone !== undefined ) {

					return bone;

				}

			}

			// search into node subtree.
			if ( root.children ) {

				var searchNodeSubtree = function ( children ) {

					for ( var i = 0; i < children.length; i ++ ) {

						var childNode = children[ i ];

						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

							return childNode;

						}

						var result = searchNodeSubtree( childNode.children );

						if ( result ) { return result; }

					}

					return null;

				};

				var subTreeNode = searchNodeSubtree( root.children );

				if ( subTreeNode ) {

					return subTreeNode;

				}

			}

			return null;

		}

	} );

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function () {},
		_setValue_unavailable: function () {},

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		],

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function () {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

			// ensure there is a value node
			if ( ! targetObject ) {

				console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
					'.' + propertyName + ' but it wasn\'t found.', targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			this.targetObject = targetObject;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {

				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {

					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
						return;

					}

					if ( targetObject.geometry.isBufferGeometry ) {

						if ( ! targetObject.geometry.morphAttributes ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

							if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}


					} else {

						if ( ! targetObject.geometry.morphTargets ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( Array.isArray( nodeProperty ) ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function () {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( PropertyBinding.prototype, {

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

	} );

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 *  - Add objects you would otherwise pass as 'root' to the
	 *    constructor or the .clipAction method of AnimationMixer.
	 *
	 *  - Instead pass this object as 'root'.
	 *
	 *  - You can also add and remove objects later when the mixer
	 *    is running.
	 *
	 * Note:
	 *
	 *    Objects of this class appear as one object to the mixer,
	 *    so cache control of the individual objects must be done
	 *    on the group.
	 *
	 * Limitation:
	 *
	 *  - The animated properties must be compatible among the
	 *    all objects in the group.
	 *
	 *  - A single property can either be controlled through a
	 *    target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup() {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0; // threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices; // for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = []; // inside: string
		this._parsedPaths = []; // inside: { we don't care, here }
		this._bindings = []; // inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; // inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() {

					return scope._objects.length;

				},
				get inUse() {

					return this.total - scope.nCachedObjects_;

				}
			},
			get bindingsPerObject() {

				return scope._bindings.length;

			}

		};

	}

	Object.assign( AnimationObjectGroup.prototype, {

		isAnimationObjectGroup: true,

		add: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length,
				knownObject = undefined;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject ) {

					console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function () {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function ( path, parsedPath ) {

			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) { return bindings[ index ]; }

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];
				bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function ( path ) {

			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	} );

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants; // bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null; // for the memory manager
		this._byClipCacheIndex = null; // for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = - 1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; // no. of repetitions when looping

		this.paused = false; // true -> zero effective time scale
		this.enabled = true; // false -> zero effective weight

		this.clampWhenFinished = false;// keep feeding the last frame?

		this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd = true;// clips for start, loop and end

	}

	Object.assign( AnimationAction.prototype, {

		// State & Scheduling

		play: function () {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function () {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function () {

			this.paused = false;
			this.enabled = true;

			this.time = 0; // restart clip
			this._loopCount = - 1;// forget previous loops
			this._startTime = null;// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function () {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function () {

			return this._mixer._isActiveAction( this );

		},

		startAt: function ( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function ( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function ( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function () {

			return this._effectiveWeight;

		},

		fadeIn: function ( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function ( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function ( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if ( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function ( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function () {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the time scale stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function ( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function () {

			return this._effectiveTimeScale;

		},

		setDuration: function ( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function ( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function ( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function ( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function () {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function () {

			return this._mixer;

		},

		getClip: function () {

			return this._clip;

		},

		getRoot: function () {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function ( time, deltaTime, timeDirection, accuIndex ) {

			// called by the mixer

			if ( ! this.enabled ) {

				// call ._updateWeight() to update ._effectiveWeight

				this._updateWeight( time );
				return;

			}

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function ( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function ( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function ( deltaTime ) {

			var time = this.time + deltaTime;
			var duration = this._clip.duration;
			var loop = this.loop;
			var loopCount = this._loopCount;

			var pingPong = ( loop === LoopPingPong );

			if ( deltaTime === 0 ) {

				if ( loopCount === - 1 ) { return time; }

				return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

			}

			if ( loop === LoopOnce ) {

				if ( loopCount === - 1 ) {

					// just started

					this._loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else {

						this.time = time;

						break handle_stop;

					}

					if ( this.clampWhenFinished ) { this.paused = true; }
					else { this.enabled = false; }

					this.time = time;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? - 1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				if ( loopCount === - 1 ) {

					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings( true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings( this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {

					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending <= 0 ) {

						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) { this.paused = true; }
						else { this.enabled = false; }

						time = deltaTime > 0 ? duration : 0;

						this.time = time;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : - 1
						} );

					} else {

						// keep running

						if ( pending === 1 ) {

							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this.time = time;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				} else {

					this.time = time;

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {

					// invert time for the "pong round"

					return duration - time;

				}

			}

			return time;

		},

		_setEndings: function ( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart = ZeroSlopeEnding;
				settings.endingEnd = ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function ( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;
			values[ 1 ] = weightThen;

			return this;

		}

	} );

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: AnimationMixer,

		_bindAction: function ( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
						PropertyBinding.create( root, trackName, path ),
						track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function ( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
						actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function ( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function () {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 	knownActions: Array< AnimationAction > - used as prototypes
			// 	actionByRoot: AnimationAction - lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() {

						return scope._actions.length;

					},
					get inUse() {

						return scope._nActiveActions;

					}
				},
				bindings: {
					get total() {

						return scope._bindings.length;

					},
					get inUse() {

						return scope._nActiveBindings;

					}
				},
				controlInterpolants: {
					get total() {

						return scope._controlInterpolants.length;

					},
					get inUse() {

						return scope._nActiveControlInterpolants;

					}
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function ( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function ( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function ( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( action._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function ( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function ( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function ( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function ( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function ( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			if ( Object.keys( bindingByName ).length === 0 ) {

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function () {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
					new Float32Array( 2 ), new Float32Array( 2 ),
					1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function ( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 ),

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					{ clipObject = prototypeAction._clip; }

			}

			// clip must be known when specified via string
			if ( clipObject === null ) { return null; }

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function () {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function ( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				action._update( time, deltaTime, timeDirection, accuIndex );

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// Allows you to seek to a specific time in an animation.
		setTime: function ( timeInSeconds ) {

			this.time = 0; // Zero out time attribute for AnimationMixer object;
			for ( var i = 0; i < this._actions.length; i ++ ) {

				this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.

			}

			return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.

		},

		// return this mixer's root target object
		getRoot: function () {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function ( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function ( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function ( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	Uniform.prototype.clone = function () {

		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

		constructor: InstancedInterleavedBuffer,

		isInstancedInterleavedBuffer: true,

		copy: function ( source ) {

			InterleavedBuffer.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;
		this.camera = null;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {

					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;

				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) { return; }

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	Object.assign( Raycaster.prototype, {

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( ( camera && camera.isPerspectiveCamera ) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
				this.camera = camera;

			} else if ( ( camera && camera.isOrthographicCamera ) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
				this.camera = camera;

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive, optionalTarget ) {

			var intersects = optionalTarget || [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive, optionalTarget ) {

			var intersects = optionalTarget || [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axis.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
		this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle

		return this;

	}

	Object.assign( Spherical.prototype, {

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function () {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function ( v ) {

			return this.setFromCartesianCoords( v.x, v.y, v.z );

		},

		setFromCartesianCoords: function ( x, y, z ) {

			this.radius = Math.sqrt( x * x + y * y + z * z );

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( x, z );
				this.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );

			}

			return this;

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 *
	 */

	function Cylindrical( radius, theta, y ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
		this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
		this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

		return this;

	}

	Object.assign( Cylindrical.prototype, {

		set: function ( radius, theta, y ) {

			this.radius = radius;
			this.theta = theta;
			this.y = y;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;

			return this;

		},

		setFromVector3: function ( v ) {

			return this.setFromCartesianCoords( v.x, v.y, v.z );

		},

		setFromCartesianCoords: function ( x, y, z ) {

			this.radius = Math.sqrt( x * x + z * z );
			this.theta = Math.atan2( x, z );
			this.y = y;

			return this;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	var _vector$6 = new Vector2();

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Object.assign( Box2.prototype, {

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function ( center, size ) {

			var halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getCenter() target is now required' );
				target = new Vector2();

			}

			return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getSize() target is now required' );
				target = new Vector2();

			}

			return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y;

		},

		getParameter: function ( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getParameter() target is now required' );
				target = new Vector2();

			}

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 4 splitting planes to rule out intersections

			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

		},

		clampPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .clampPoint() target is now required' );
				target = new Vector2();

			}

			return target.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function ( point ) {

			var clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		},

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	var _startP = new Vector3();
	var _startEnd = new Vector3();

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Object.assign( Line3.prototype, {

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .getCenter() target is now required' );
				target = new Vector3();

			}

			return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .delta() target is now required' );
				target = new Vector3();

			}

			return target.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .at() target is now required' );
				target = new Vector3();

			}

			return this.delta( target ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function ( point, clampToLine ) {

			_startP.subVectors( point, this.start );
			_startEnd.subVectors( this.end, this.start );

			var startEnd2 = _startEnd.dot( _startEnd );
			var startEnd_startP = _startEnd.dot( _startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = _Math.clamp( t, 0, 1 );

			}

			return t;

		},

		closestPointToPoint: function ( point, clampToLine, target ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			return this.delta( target ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( /* renderCallback */ ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _v1$5 = new Vector3();
	var _v2$3 = new Vector3();
	var _normalMatrix$1 = new Matrix3();
	var _keys = [ 'a', 'b', 'c' ];

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.setAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = function () {

		this.object.updateMatrixWorld( true );

		_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					var vertex = vertices[ face[ _keys[ j ] ] ];

					var normal = face.vertexNormals[ j ];

					_v1$5.copy( vertex ).applyMatrix4( matrixWorld );

					_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );

					position.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );

					idx = idx + 1;

					position.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );

					idx = idx + 1;

				}

			}

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			var objPos = objGeometry.attributes.position;

			var objNorm = objGeometry.attributes.normal;

			var idx = 0;

			// for simplicity, ignore index and drawcalls, and render every normal

			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

				_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

				_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

				_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );

				position.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );

				idx = idx + 1;

				position.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );

				idx = idx + 1;

			}

		}

		position.needsUpdate = true;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _vector$7 = new Vector3();

	function SpotLightHelper( light, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0, 	0, 0, 1,
			0, 0, 0, 	1, 0, 1,
			0, 0, 0,	- 1, 0, 1,
			0, 0, 0, 	0, 1, 1,
			0, 0, 0, 	0, - 1, 1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		this.light.updateMatrixWorld();

		var coneLength = this.light.distance ? this.light.distance : 1000;
		var coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( _vector$7 );

		if ( this.color !== undefined ) {

			this.cone.material.color.set( this.color );

		} else {

			this.cone.material.color.copy( this.light.color );

		}

	};

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	var _vector$8 = new Vector3();
	var _boneMatrix = new Matrix4();
	var _matrixWorldInv = new Matrix4();

	function getBoneList( object ) {

		var boneList = [];

		if ( object && object.isBone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

		}

		return boneList;

	}

	function SkeletonHelper( object ) {

		var bones = getBoneList( object );

		var geometry = new BufferGeometry();

		var vertices = [];
		var colors = [];

		var color1 = new Color( 0, 0, 1 );
		var color2 = new Color( 0, 1, 0 );

		for ( var i = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				vertices.push( 0, 0, 0 );
				vertices.push( 0, 0, 0 );
				colors.push( color1.r, color1.g, color1.b );
				colors.push( color2.r, color2.g, color2.b );

			}

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;
		this.bones = bones;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	}

	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {

		var bones = this.bones;

		var geometry = this.geometry;
		var position = geometry.getAttribute( 'position' );

		_matrixWorldInv.getInverse( this.root.matrixWorld );

		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
				_vector$8.setFromMatrixPosition( _boneMatrix );
				position.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );

				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
				_vector$8.setFromMatrixPosition( _boneMatrix );
				position.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize, color ) {

		this.light = light;
		this.light.updateMatrixWorld();

		this.color = color;

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();


		/*
		var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color );

		}

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author abelnation / http://github.com/abelnation
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 *  This helper must be added as a child of the light
	 */

	function RectAreaLightHelper( light, color ) {

		this.type = 'RectAreaLightHelper';

		this.light = light;

		this.color = color; // optional hardwired color for the helper

		var positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		var material = new LineBasicMaterial( { fog: false } );

		Line.call( this, geometry, material );

		//

		var positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];

		var geometry2 = new BufferGeometry();
		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );

		this.update();

	}

	RectAreaLightHelper.prototype = Object.create( Line.prototype );
	RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

	RectAreaLightHelper.prototype.update = function () {

		this.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );
			this.children[ 0 ].material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			// prevent hue shift
			var c = this.material.color;
			var max = Math.max( c.r, c.g, c.b );
			if ( max > 1 ) { c.multiplyScalar( 1 / max ); }

			this.children[ 0 ].material.color.copy( this.material.color );

		}

	};

	RectAreaLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();
		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	var _vector$9 = new Vector3();
	var _color1 = new Color();
	var _color2 = new Color();

	function HemisphereLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new OctahedronBufferGeometry( size );
		geometry.rotateY( Math.PI * 0.5 );

		this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		if ( this.color === undefined ) { this.material.vertexColors = VertexColors; }

		var position = geometry.getAttribute( 'position' );
		var colors = new Float32Array( position.count * 3 );

		geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );

		this.add( new Mesh( geometry, this.material ) );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var mesh = this.children[ 0 ];

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			var colors = mesh.geometry.getAttribute( 'color' );

			_color1.copy( this.light.color );
			_color2.copy( this.light.groundColor );

			for ( var i = 0, l = colors.count; i < l; i ++ ) {

				var color = ( i < ( l / 2 ) ) ? _color1 : _color2;

				colors.setXYZ( i, color.r, color.g, color.b );

			}

			colors.needsUpdate = true;

		}

		mesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function LightProbeHelper( lightProbe, size ) {

		this.lightProbe = lightProbe;

		this.size = size;

		var defines = {};
		defines[ 'GAMMA_OUTPUT' ] = "";

		// material
		var material = new ShaderMaterial( {

			defines: defines,

			uniforms: {

				sh: { value: this.lightProbe.sh.coefficients }, // by reference

				intensity: { value: this.lightProbe.intensity }

			},

			vertexShader: [

				'varying vec3 vNormal;',

				'void main() {',

				'	vNormal = normalize( normalMatrix * normal );',

				'	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',

				'}' ].join( '\n' ),

			fragmentShader: [

				'#define RECIPROCAL_PI 0.318309886',

				'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',

				'	// matrix is assumed to be orthogonal',

				'	return normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',

				'}',

				'vec3 linearToOutput( in vec3 a ) {',

				'	#ifdef GAMMA_OUTPUT',

				'		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',

				'	#else',

				'		return a;',

				'	#endif',

				'}',

				'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',
				'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',

				'	// normal is assumed to have unit length',

				'	float x = normal.x, y = normal.y, z = normal.z;',

				'	// band 0',
				'	vec3 result = shCoefficients[ 0 ] * 0.886227;',

				'	// band 1',
				'	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',
				'	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',
				'	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',

				'	// band 2',
				'	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',
				'	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',
				'	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',
				'	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',
				'	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',

				'	return result;',

				'}',

				'uniform vec3 sh[ 9 ]; // sh coefficients',

				'uniform float intensity; // light probe intensity',

				'varying vec3 vNormal;',

				'void main() {',

				'	vec3 normal = normalize( vNormal );',

				'	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',

				'	vec3 irradiance = shGetIrradianceAt( worldNormal, sh );',

				'	vec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',

				'	outgoingLight = linearToOutput( outgoingLight );',

				'	gl_FragColor = vec4( outgoingLight, 1.0 );',

				'}'

			].join( '\n' )

		} );

		var geometry = new SphereBufferGeometry( 1, 32, 16 );

		Mesh.call( this, geometry, material );

		this.onBeforeRender();

	}

	LightProbeHelper.prototype = Object.create( Mesh.prototype );
	LightProbeHelper.prototype.constructor = LightProbeHelper;

	LightProbeHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	LightProbeHelper.prototype.onBeforeRender = function () {

		this.position.copy( this.lightProbe.position );

		this.scale.set( 1, 1, 1 ).multiplyScalar( this.size );

		this.material.uniforms.intensity.value = this.lightProbe.intensity;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		size = size || 10;
		divisions = divisions || 10;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = size / divisions;
		var halfSize = size / 2;

		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

			vertices.push( - halfSize, 0, k, halfSize, 0, k );
			vertices.push( k, 0, - halfSize, k, 0, halfSize );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {

		constructor: GridHelper,

		copy: function ( source ) {

			LineSegments.prototype.copy.call( this, source );

			this.geometry.copy( source.geometry );
			this.material.copy( source.material );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author Hectate / http://www.github.com/Hectate
	 */

	function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

		radius = radius || 10;
		radials = radials || 16;
		circles = circles || 8;
		divisions = divisions || 64;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var vertices = [];
		var colors = [];

		var x, z;
		var v, i, j, r, color;

		// create the radials

		for ( i = 0; i <= radials; i ++ ) {

			v = ( i / radials ) * ( Math.PI * 2 );

			x = Math.sin( v ) * radius;
			z = Math.cos( v ) * radius;

			vertices.push( 0, 0, 0 );
			vertices.push( x, 0, z );

			color = ( i & 1 ) ? color1 : color2;

			colors.push( color.r, color.g, color.b );
			colors.push( color.r, color.g, color.b );

		}

		// create the circles

		for ( i = 0; i <= circles; i ++ ) {

			color = ( i & 1 ) ? color1 : color2;

			r = radius - ( radius / circles * i );

			for ( j = 0; j < divisions; j ++ ) {

				// first vertex

				v = ( j / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

				// second vertex

				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

			}

		}

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	PolarGridHelper.prototype = Object.create( LineSegments.prototype );
	PolarGridHelper.prototype.constructor = PolarGridHelper;

	/**
	 * @author Mugen87 / http://github.com/Mugen87
	 */

	function PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {

		this.audio = audio;
		this.range = range || 1;
		this.divisionsInnerAngle = divisionsInnerAngle || 16;
		this.divisionsOuterAngle = divisionsOuterAngle || 2;

		var geometry = new BufferGeometry();
		var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
		var positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );
		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

		var materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );
		var materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );

		Line.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );

		this.update();

	}

	PositionalAudioHelper.prototype = Object.create( Line.prototype );
	PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;

	PositionalAudioHelper.prototype.update = function () {

		var audio = this.audio;
		var range = this.range;
		var divisionsInnerAngle = this.divisionsInnerAngle;
		var divisionsOuterAngle = this.divisionsOuterAngle;

		var coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );
		var coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );

		var halfConeInnerAngle = coneInnerAngle / 2;
		var halfConeOuterAngle = coneOuterAngle / 2;

		var start = 0;
		var count = 0;
		var i, stride;

		var geometry = this.geometry;
		var positionAttribute = geometry.attributes.position;

		geometry.clearGroups();

		//

		function generateSegment( from, to, divisions, materialIndex ) {

			var step = ( to - from ) / divisions;

			positionAttribute.setXYZ( start, 0, 0, 0 );
			count ++;

			for ( i = from; i < to; i += step ) {

				stride = start + count;

				positionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );
				positionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );
				positionAttribute.setXYZ( stride + 2, 0, 0, 0 );

				count += 3;

			}

			geometry.addGroup( start, count, materialIndex );

			start += count;
			count = 0;

		}

		//

		generateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );
		generateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );
		generateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );

		//

		positionAttribute.needsUpdate = true;

		if ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }

	};

	PositionalAudioHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material[ 0 ].dispose();
		this.material[ 1 ].dispose();

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _v1$6 = new Vector3();
	var _v2$4 = new Vector3();
	var _normalMatrix$2 = new Matrix3();

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.setAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = function () {

		this.object.updateMatrixWorld( true );

		_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		var vertices = objGeometry.vertices;

		var faces = objGeometry.faces;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var normal = face.normal;

			_v1$6.copy( vertices[ face.a ] )
				.add( vertices[ face.b ] )
				.add( vertices[ face.c ] )
				.divideScalar( 3 )
				.applyMatrix4( matrixWorld );

			_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );

			position.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );

			idx = idx + 1;

			position.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );

			idx = idx + 1;

		}

		position.needsUpdate = true;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _v1$7 = new Vector3();
	var _v2$5 = new Vector3();
	var _v3$1 = new Vector3();

	function DirectionalLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		if ( size === undefined ) { size = 1; }

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( [
			- size, size, 0,
			size, size, 0,
			size, - size, 0,
			- size, - size, 0,
			- size, size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.lightPlane = new Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.targetLine = new Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		_v1$7.setFromMatrixPosition( this.light.matrixWorld );
		_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );
		_v3$1.subVectors( _v2$5, _v1$7 );

		this.lightPlane.lookAt( _v2$5 );

		if ( this.color !== undefined ) {

			this.lightPlane.material.color.set( this.color );
			this.targetLine.material.color.set( this.color );

		} else {

			this.lightPlane.material.color.copy( this.light.color );
			this.targetLine.material.color.copy( this.light.color );

		}

		this.targetLine.lookAt( _v2$5 );
		this.targetLine.scale.z = _v3$1.length();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	var _vector$a = new Vector3();
	var _camera = new Camera();

	function CameraHelper( camera ) {

		var geometry = new BufferGeometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var vertices = [];
		var colors = [];

		var pointMap = {};

		// colors

		var colorFrustum = new Color( 0xffaa00 );
		var colorCone = new Color( 0xff0000 );
		var colorUp = new Color( 0x00aaff );
		var colorTarget = new Color( 0xffffff );
		var colorCross = new Color( 0x333333 );

		// near

		addLine( 'n1', 'n2', colorFrustum );
		addLine( 'n2', 'n4', colorFrustum );
		addLine( 'n4', 'n3', colorFrustum );
		addLine( 'n3', 'n1', colorFrustum );

		// far

		addLine( 'f1', 'f2', colorFrustum );
		addLine( 'f2', 'f4', colorFrustum );
		addLine( 'f4', 'f3', colorFrustum );
		addLine( 'f3', 'f1', colorFrustum );

		// sides

		addLine( 'n1', 'f1', colorFrustum );
		addLine( 'n2', 'f2', colorFrustum );
		addLine( 'n3', 'f3', colorFrustum );
		addLine( 'n4', 'f4', colorFrustum );

		// cone

		addLine( 'p', 'n1', colorCone );
		addLine( 'p', 'n2', colorCone );
		addLine( 'p', 'n3', colorCone );
		addLine( 'p', 'n4', colorCone );

		// up

		addLine( 'u1', 'u2', colorUp );
		addLine( 'u2', 'u3', colorUp );
		addLine( 'u3', 'u1', colorUp );

		// target

		addLine( 'c', 't', colorTarget );
		addLine( 'p', 'c', colorCross );

		// cross

		addLine( 'cn1', 'cn2', colorCross );
		addLine( 'cn3', 'cn4', colorCross );

		addLine( 'cf1', 'cf2', colorCross );
		addLine( 'cf3', 'cf4', colorCross );

		function addLine( a, b, color ) {

			addPoint( a, color );
			addPoint( b, color );

		}

		function addPoint( id, color ) {

			vertices.push( 0, 0, 0 );
			colors.push( color.r, color.g, color.b );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry = this.geometry;
		var pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix inverse
		// world matrix must be identity

		_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

		// center / target

		setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
		setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );

		// near

		setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
		setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
		setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
		setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );

		// far

		setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
		setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
		setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
		setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );

		// up

		setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
		setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
		setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );

		// cross

		setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
		setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
		setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
		setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );

		setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
		setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
		setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
		setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

	function setPoint( point, pointMap, geometry, camera, x, y, z ) {

		_vector$a.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			var position = geometry.getAttribute( 'position' );

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				position.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 */

	var _box$3 = new Box3();

	function BoxHelper( object, color ) {

		this.object = object;

		if ( color === undefined ) { color = 0xffff00; }

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.matrixAutoUpdate = false;

		this.update();

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = function ( object ) {

		if ( object !== undefined ) {

			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

		}

		if ( this.object !== undefined ) {

			_box$3.setFromObject( this.object );

		}

		if ( _box$3.isEmpty() ) { return; }

		var min = _box$3.min;
		var max = _box$3.max;

		/*
		  5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/

		var position = this.geometry.attributes.position;
		var array = position.array;

		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

		position.needsUpdate = true;

		this.geometry.computeBoundingSphere();


	};

	BoxHelper.prototype.setFromObject = function ( object ) {

		this.object = object;
		this.update();

		return this;

	};

	BoxHelper.prototype.copy = function ( source ) {

		LineSegments.prototype.copy.call( this, source );

		this.object = source.object;

		return this;

	};

	BoxHelper.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3Helper( box, color ) {

		this.type = 'Box3Helper';

		this.box = box;

		color = color || 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

		var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

		var geometry = new BufferGeometry();

		geometry.setIndex( new BufferAttribute( indices, 1 ) );

		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.geometry.computeBoundingSphere();

	}

	Box3Helper.prototype = Object.create( LineSegments.prototype );
	Box3Helper.prototype.constructor = Box3Helper;

	Box3Helper.prototype.updateMatrixWorld = function ( force ) {

		var box = this.box;

		if ( box.isEmpty() ) { return; }

		box.getCenter( this.position );

		box.getSize( this.scale );

		this.scale.multiplyScalar( 0.5 );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function PlaneHelper( plane, size, hex ) {

		this.type = 'PlaneHelper';

		this.plane = plane;

		this.size = ( size === undefined ) ? 1 : size;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		//

		var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

		var geometry2 = new BufferGeometry();
		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

	}

	PlaneHelper.prototype = Object.create( Line.prototype );
	PlaneHelper.prototype.constructor = PlaneHelper;

	PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

		var scale = - this.plane.constant;

		if ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter

		this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

		this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

		this.lookAt( this.plane.normal );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var _axis = new Vector3();
	var _lineGeometry, _coneGeometry;

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }
		if ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }
		if ( length === undefined ) { length = 1; }
		if ( color === undefined ) { color = 0xffff00; }
		if ( headLength === undefined ) { headLength = 0.2 * length; }
		if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }

		if ( _lineGeometry === undefined ) {

			_lineGeometry = new BufferGeometry();
			_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

			_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
			_coneGeometry.translate( 0, - 0.5, 0 );

		}

		this.position.copy( origin );

		this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = function ( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			_axis.set( dir.z, 0, - dir.x ).normalize();

			var radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( _axis, radians );

		}

	};

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) { headLength = 0.2 * length; }
		if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }

		this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.set( color );
		this.cone.material.color.set( color );

	};

	ArrowHelper.prototype.copy = function ( source ) {

		Object3D.prototype.copy.call( this, source, false );

		this.line.copy( source.line );
		this.cone.copy( source.cone );

		return this;

	};

	ArrowHelper.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxesHelper( size ) {

		size = size || 1;

		var vertices = [
			0, 0, 0,	size, 0, 0,
			0, 0, 0,	0, size, 0,
			0, 0, 0,	0, 0, size
		];

		var colors = [
			1, 0, 0,	1, 0.6, 0,
			0, 1, 0,	0.6, 1, 0,
			0, 0, 1,	0, 0.6, 1
		];

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxesHelper.prototype = Object.create( LineSegments.prototype );
	AxesHelper.prototype.constructor = AxesHelper;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Face4( a, b, c, d, normal, color, materialIndex ) {

		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );

	}

	var LineStrip = 0;

	var LinePieces = 1;

	function MeshFaceMaterial( materials ) {

		console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
		return materials;

	}

	function MultiMaterial( materials ) {

		if ( materials === undefined ) { materials = []; }

		console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
		materials.isMultiMaterial = true;
		materials.materials = materials;
		materials.clone = function () {

			return materials.slice();

		};
		return materials;

	}

	function PointCloud( geometry, material ) {

		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );

	}

	function Particle( material ) {

		console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
		return new Sprite( material );

	}

	function ParticleSystem( geometry, material ) {

		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );

	}

	function PointCloudMaterial( parameters ) {

		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function ParticleBasicMaterial( parameters ) {

		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function ParticleSystemMaterial( parameters ) {

		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function Vertex( x, y, z ) {

		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );

	}

	//

	function DynamicBufferAttribute( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );

	}

	function Int8Attribute( array, itemSize ) {

		console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
		return new Int8BufferAttribute( array, itemSize );

	}

	function Uint8Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
		return new Uint8BufferAttribute( array, itemSize );

	}

	function Uint8ClampedAttribute( array, itemSize ) {

		console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
		return new Uint8ClampedBufferAttribute( array, itemSize );

	}

	function Int16Attribute( array, itemSize ) {

		console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
		return new Int16BufferAttribute( array, itemSize );

	}

	function Uint16Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
		return new Uint16BufferAttribute( array, itemSize );

	}

	function Int32Attribute( array, itemSize ) {

		console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
		return new Int32BufferAttribute( array, itemSize );

	}

	function Uint32Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
		return new Uint32BufferAttribute( array, itemSize );

	}

	function Float32Attribute( array, itemSize ) {

		console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
		return new Float32BufferAttribute( array, itemSize );

	}

	function Float64Attribute( array, itemSize ) {

		console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
		return new Float64BufferAttribute( array, itemSize );

	}

	//

	Curve.create = function ( construct, getPoint ) {

		console.log( 'THREE.Curve.create() has been deprecated' );

		construct.prototype = Object.create( Curve.prototype );
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;

		return construct;

	};

	//

	Object.assign( CurvePath.prototype, {

		createPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from path points (for Line or Points objects)

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		createSpacedPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from equidistant sampling along the path

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	//

	Object.assign( Path.prototype, {

		fromPoints: function ( points ) {

			console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
			return this.setFromPoints( points );

		}

	} );

	//

	function ClosedSplineCurve3( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	}

	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	//

	function SplineCurve3( points ) {

		console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	//

	function Spline( points ) {

		console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	Spline.prototype = Object.create( CatmullRomCurve3.prototype );

	Object.assign( Spline.prototype, {

		initFromArray: function ( /* a */ ) {

			console.error( 'THREE.Spline: .initFromArray() has been removed.' );

		},
		getControlPointsArray: function ( /* optionalTarget */ ) {

			console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

		},
		reparametrizeByArcLength: function ( /* samplingCoef */ ) {

			console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

		}

	} );

	//

	function AxisHelper( size ) {

		console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
		return new AxesHelper( size );

	}

	function BoundingBoxHelper( object, color ) {

		console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
		return new BoxHelper( object, color );

	}

	function EdgesHelper( object, hex ) {

		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

	}

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	SkeletonHelper.prototype.update = function () {

		console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

	};

	function WireframeHelper( object, hex ) {

		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

	}

	//

	Object.assign( Loader.prototype, {

		extractUrlBase: function ( url ) {

			console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
			return LoaderUtils.extractUrlBase( url );

		}

	} );

	Loader.Handlers = {

		add: function ( /* regex, loader */ ) {

			console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );

		},

		get: function ( /* file */ ) {

			console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );

		}

	};

	function XHRLoader( manager ) {

		console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
		return new FileLoader( manager );

	}

	function BinaryTextureLoader( manager ) {

		console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
		return new DataTextureLoader( manager );

	}

	Object.assign( ObjectLoader.prototype, {

		setTexturePath: function ( value ) {

			console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
			return this.setResourcePath( value );

		}

	} );

	//

	Object.assign( Box2.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Object.assign( Box3.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Line3.prototype.center = function ( optionalTarget ) {

		console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	};

	Object.assign( _Math, {

		random16: function () {

			console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		nearestPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
			return _Math.floorPowerOfTwo( value );

		},

		nextPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
			return _Math.ceilPowerOfTwo( value );

		}

	} );

	Object.assign( Matrix3.prototype, {

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

		}

	} );

	Object.assign( Matrix4.prototype, {

		extractPosition: function ( m ) {

			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );

		},
		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		getPosition: function () {

			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
			return new Vector3().setFromMatrixColumn( this, 3 );

		},
		setRotationFromQuaternion: function ( q ) {

			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );

		},
		multiplyToArray: function () {

			console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector4: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

		},
		rotateAxis: function ( v ) {

			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );

		},
		crossVector: function ( vector ) {

			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		translate: function () {

			console.error( 'THREE.Matrix4: .translate() has been removed.' );

		},
		rotateX: function () {

			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

		},
		rotateY: function () {

			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

		},
		rotateZ: function () {

			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

		},
		rotateByAxis: function () {

			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

		},
		makeFrustum: function ( left, right, bottom, top, near, far ) {

			console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
			return this.makePerspective( left, right, top, bottom, near, far );

		}

	} );

	Plane.prototype.isIntersectionLine = function ( line ) {

		console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
		return this.intersectsLine( line );

	};

	Quaternion.prototype.multiplyVector3 = function ( vector ) {

		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );

	};

	Object.assign( Ray.prototype, {

		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionPlane: function ( plane ) {

			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		}

	} );

	Object.assign( Triangle.prototype, {

		area: function () {

			console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
			return this.getArea();

		},
		barycoordFromPoint: function ( point, target ) {

			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return this.getBarycoord( point, target );

		},
		midpoint: function ( target ) {

			console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
			return this.getMidpoint( target );

		},
		normal: function ( target ) {

			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return this.getNormal( target );

		},
		plane: function ( target ) {

			console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
			return this.getPlane( target );

		}

	} );

	Object.assign( Triangle, {

		barycoordFromPoint: function ( point, a, b, c, target ) {

			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return Triangle.getBarycoord( point, a, b, c, target );

		},
		normal: function ( a, b, c, target ) {

			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return Triangle.getNormal( a, b, c, target );

		}

	} );

	Object.assign( Shape.prototype, {

		extractAllPoints: function ( divisions ) {

			console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
			return this.extractPoints( divisions );

		},
		extrude: function ( options ) {

			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );

		},
		makeGeometry: function ( options ) {

			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );

		}

	} );

	Object.assign( Vector2.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector3.prototype, {

		setEulerFromRotationMatrix: function () {

			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

		},
		setEulerFromQuaternion: function () {

			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

		},
		getPositionFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );

		},
		getScaleFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );

		},
		getColumnFromMatrix: function ( index, matrix ) {

			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );

		},
		applyProjection: function ( m ) {

			console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
			return this.applyMatrix4( m );

		},
		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector4.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	//

	Object.assign( Geometry.prototype, {

		computeTangents: function () {

			console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

		},
		computeLineDistances: function () {

			console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

		}

	} );

	Object.assign( Object3D.prototype, {

		getChildByName: function ( name ) {

			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );

		},
		renderDepth: function () {

			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

		},
		translate: function ( distance, axis ) {

			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );

		},
		getWorldRotation: function () {

			console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

		}

	} );

	Object.defineProperties( Object3D.prototype, {

		eulerOrder: {
			get: function () {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;

			},
			set: function ( value ) {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;

			}
		},
		useQuaternion: {
			get: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			},
			set: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			}
		}

	} );

	Object.defineProperties( LOD.prototype, {

		objects: {
			get: function () {

				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;

			}
		}

	} );

	Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

		get: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		}

	} );

	SkinnedMesh.prototype.initBones = function () {

		console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

	};

	Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

		get: function () {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			return this.arcLengthDivisions;

		},
		set: function ( value ) {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			this.arcLengthDivisions = value;

		}

	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function () {

				console.warn( 'THREE.Light: .onlyShadow has been removed.' );

			}
		},
		shadowCameraFov: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;

			}
		},
		shadowCameraLeft: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;

			}
		},
		shadowCameraRight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;

			}
		},
		shadowCameraTop: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;

			}
		},
		shadowCameraBottom: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;

			}
		},
		shadowCameraNear: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;

			}
		},
		shadowCameraFar: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;

			}
		},
		shadowCameraVisible: {
			set: function () {

				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

			}
		},
		shadowBias: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;

			}
		},
		shadowDarkness: {
			set: function () {

				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

			}
		},
		shadowMapWidth: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;

			}
		},
		shadowMapHeight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;

			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {

		length: {
			get: function () {

				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
				return this.array.length;

			}
		},
		dynamic: {
			get: function () {

				console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
				return this.usage === DynamicDrawUsage;

			},
			set: function ( /* value */ ) {

				console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
				this.setUsage( DynamicDrawUsage );

			}
		}

	} );

	Object.assign( BufferAttribute.prototype, {
		setDynamic: function ( value ) {

			console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
			this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
			return this;

		},
		copyIndicesArray: function ( /* indices */ ) {

			console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

		},
		setArray: function ( /* array */ ) {

			console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

		}
	} );

	Object.assign( BufferGeometry.prototype, {

		addIndex: function ( index ) {

			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );

		},
		addAttribute: function ( name, attribute ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );

			if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return this;

			}

			return this.setAttribute( name, attribute );

		},
		addDrawCall: function ( start, count, indexOffset ) {

			if ( indexOffset !== undefined ) {

				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );

		},
		clearDrawCalls: function () {

			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();

		},
		computeTangents: function () {

			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

		},
		computeOffsets: function () {

			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

		},
		removeAttribute: function ( name ) {

			console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );

			return this.deleteAttribute( name );

		}
	} );

	Object.defineProperties( BufferGeometry.prototype, {

		drawcalls: {
			get: function () {

				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;

			}
		},
		offsets: {
			get: function () {

				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;

			}
		}

	} );

	Object.defineProperties( InterleavedBuffer.prototype, {

		dynamic: {
			get: function () {

				console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
				return this.usage === DynamicDrawUsage;

			},
			set: function ( value ) {

				console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
				this.setUsage( value );

			}
		}

	} );

	Object.assign( InterleavedBuffer.prototype, {
		setDynamic: function ( value ) {

			console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
			this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
			return this;

		},
		setArray: function ( /* array */ ) {

			console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

		}
	} );

	//

	Object.assign( ExtrudeBufferGeometry.prototype, {

		getArrays: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

		},

		addShapeList: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

		},

		addShape: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

		}

	} );

	//

	Object.defineProperties( Uniform.prototype, {

		dynamic: {
			set: function () {

				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

			}
		},
		onUpdate: {
			value: function () {

				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;

			}
		}

	} );

	//

	Object.defineProperties( Material.prototype, {

		wrapAround: {
			get: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			}
		},

		overdraw: {
			get: function () {

				console.warn( 'THREE.Material: .overdraw has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Material: .overdraw has been removed.' );

			}
		},

		wrapRGB: {
			get: function () {

				console.warn( 'THREE.Material: .wrapRGB has been removed.' );
				return new Color();

			}
		},

		shading: {
			get: function () {

				console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

			},
			set: function ( value ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( value === FlatShading );

			}
		},

		stencilMask: {
			get: function () {

				console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
				return this.stencilFuncMask;

			},
			set: function ( value ) {

				console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
				this.stencilFuncMask = value;

			}
		}

	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {

		metal: {
			get: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;

			},
			set: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

			}
		}

	} );

	Object.defineProperties( ShaderMaterial.prototype, {

		derivatives: {
			get: function () {

				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;

			},
			set: function ( value ) {

				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;

			}
		}

	} );

	//

	Object.assign( WebGLRenderer.prototype, {

		clearTarget: function ( renderTarget, color, depth, stencil ) {

			console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		},
		animate: function ( callback ) {

			console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
			this.setAnimationLoop( callback );

		},
		getCurrentRenderTarget: function () {

			console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
			return this.getRenderTarget();

		},
		getMaxAnisotropy: function () {

			console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
			return this.capabilities.getMaxAnisotropy();

		},
		getPrecision: function () {

			console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
			return this.capabilities.precision;

		},
		resetGLState: function () {

			console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
			return this.state.reset();

		},
		supportsFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );

		},
		supportsHalfFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );

		},
		supportsStandardDerivatives: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );

		},
		supportsCompressedTextureS3TC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

		},
		supportsCompressedTexturePVRTC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

		},
		supportsBlendMinMax: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );

		},
		supportsVertexTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
			return this.capabilities.vertexTextures;

		},
		supportsInstancedArrays: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );

		},
		enableScissorTest: function ( boolean ) {

			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );

		},
		initMaterial: function () {

			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

		},
		addPrePlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

		},
		addPostPlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

		},
		updateShadowMap: function () {

			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

		},
		setFaceCulling: function () {

			console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

		},
		allocTextureUnit: function () {

			console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

		},
		setTexture: function () {

			console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

		},
		setTexture2D: function () {

			console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

		},
		setTextureCube: function () {

			console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

		},
		getActiveMipMapLevel: function () {

			console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
			return this.getActiveMipmapLevel();

		}

	} );

	Object.defineProperties( WebGLRenderer.prototype, {

		shadowMapEnabled: {
			get: function () {

				return this.shadowMap.enabled;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;

			}
		},
		shadowMapType: {
			get: function () {

				return this.shadowMap.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;

			}
		},
		shadowMapCullFace: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

			}
		},
		context: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
				return this.getContext();

			}
		}

	} );

	Object.defineProperties( WebGLShadowMap.prototype, {

		cullFace: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function ( /* cullFace */ ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

			}
		},
		renderReverseSided: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

			}
		},
		renderSingleSided: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

			}
		}

	} );

	//

	Object.defineProperties( WebGLRenderTargetCube.prototype, {

		activeCubeFace: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );

			}
		},
		activeMipMapLevel: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );

			}
		}

	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {

		wrapS: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;

			}
		},
		wrapT: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;

			}
		},
		magFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;

			}
		},
		minFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;

			}
		},
		anisotropy: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;

			}
		},
		offset: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;

			}
		},
		repeat: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;

			}
		},
		format: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;

			}
		},
		type: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;

			}
		},
		generateMipmaps: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;

			}
		}

	} );

	//

	Object.defineProperties( WebVRManager.prototype, {

		standing: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebVRManager: .standing has been removed.' );

			}
		},
		userHeight: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebVRManager: .userHeight has been removed.' );

			}
		}

	} );

	//

	Object.defineProperties( Audio.prototype, {

		load: {
			value: function ( file ) {

				console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
				var scope = this;
				var audioLoader = new AudioLoader();
				audioLoader.load( file, function ( buffer ) {

					scope.setBuffer( buffer );

				} );
				return this;

			}
		},
		startTime: {
			set: function () {

				console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );

			}
		}

	} );

	AudioAnalyser.prototype.getData = function () {

		console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
		return this.getFrequencyData();

	};

	//

	CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

		console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
		return this.update( renderer, scene );

	};

	//

	var GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
			var matrix;

			if ( geometry2.isMesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	ImageUtils.crossOrigin = undefined;

	ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

		var loader = new TextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( url, onLoad, undefined, onError );

		if ( mapping ) { texture.mapping = mapping; }

		return texture;

	};

	ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

		var loader = new CubeTextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( urls, onLoad, undefined, onError );

		if ( mapping ) { texture.mapping = mapping; }

		return texture;

	};

	ImageUtils.loadCompressedTexture = function () {

		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

	};

	ImageUtils.loadCompressedTextureCube = function () {

		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

	};

	//

	function CanvasRenderer() {

		console.error( 'THREE.CanvasRenderer has been removed' );

	}

	//

	function JSONLoader() {

		console.error( 'THREE.JSONLoader has been removed.' );

	}

	//

	var SceneUtils = {

		createMultiMaterialObject: function ( /* geometry, materials */ ) {

			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

		},

		detach: function ( /* child, parent, scene */ ) {

			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

		},

		attach: function ( /* child, scene, parent */ ) {

			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

		}

	};

	//

	function LensFlare() {

		console.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );

	}

	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

		/* eslint-disable no-undef */
		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
			revision: REVISION,
		} } ) );
		/* eslint-enable no-undef */

	}

	exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
	exports.AddEquation = AddEquation;
	exports.AddOperation = AddOperation;
	exports.AdditiveBlending = AdditiveBlending;
	exports.AlphaFormat = AlphaFormat;
	exports.AlwaysDepth = AlwaysDepth;
	exports.AlwaysStencilFunc = AlwaysStencilFunc;
	exports.AmbientLight = AmbientLight;
	exports.AmbientLightProbe = AmbientLightProbe;
	exports.AnimationClip = AnimationClip;
	exports.AnimationLoader = AnimationLoader;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationUtils = AnimationUtils;
	exports.ArcCurve = ArcCurve;
	exports.ArrayCamera = ArrayCamera;
	exports.ArrowHelper = ArrowHelper;
	exports.Audio = Audio;
	exports.AudioAnalyser = AudioAnalyser;
	exports.AudioContext = AudioContext;
	exports.AudioListener = AudioListener;
	exports.AudioLoader = AudioLoader;
	exports.AxesHelper = AxesHelper;
	exports.AxisHelper = AxisHelper;
	exports.BackSide = BackSide;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.BasicShadowMap = BasicShadowMap;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.Bone = Bone;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.Box2 = Box2;
	exports.Box3 = Box3;
	exports.Box3Helper = Box3Helper;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.BoxHelper = BoxHelper;
	exports.BufferAttribute = BufferAttribute;
	exports.BufferGeometry = BufferGeometry;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.ByteType = ByteType;
	exports.Cache = Cache;
	exports.Camera = Camera;
	exports.CameraHelper = CameraHelper;
	exports.CanvasRenderer = CanvasRenderer;
	exports.CanvasTexture = CanvasTexture;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.CineonToneMapping = CineonToneMapping;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.Clock = Clock;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.Color = Color;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.CompressedTexture = CompressedTexture;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.CubeCamera = CubeCamera;
	exports.CubeGeometry = BoxGeometry;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.CubeTexture = CubeTexture;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.CubicInterpolant = CubicInterpolant;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.CullFaceNone = CullFaceNone;
	exports.Curve = Curve;
	exports.CurvePath = CurvePath;
	exports.CustomBlending = CustomBlending;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.Cylindrical = Cylindrical;
	exports.DataTexture = DataTexture;
	exports.DataTexture2DArray = DataTexture2DArray;
	exports.DataTexture3D = DataTexture3D;
	exports.DataTextureLoader = DataTextureLoader;
	exports.DecrementStencilOp = DecrementStencilOp;
	exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.DepthTexture = DepthTexture;
	exports.DirectionalLight = DirectionalLight;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DoubleSide = DoubleSide;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.DynamicCopyUsage = DynamicCopyUsage;
	exports.DynamicDrawUsage = DynamicDrawUsage;
	exports.DynamicReadUsage = DynamicReadUsage;
	exports.EdgesGeometry = EdgesGeometry;
	exports.EdgesHelper = EdgesHelper;
	exports.EllipseCurve = EllipseCurve;
	exports.EqualDepth = EqualDepth;
	exports.EqualStencilFunc = EqualStencilFunc;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.Euler = Euler;
	exports.EventDispatcher = EventDispatcher;
	exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.Face3 = Face3;
	exports.Face4 = Face4;
	exports.FaceColors = FaceColors;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.FileLoader = FileLoader;
	exports.FlatShading = FlatShading;
	exports.Float32Attribute = Float32Attribute;
	exports.Float32BufferAttribute = Float32BufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float64BufferAttribute = Float64BufferAttribute;
	exports.FloatType = FloatType;
	exports.Fog = Fog;
	exports.FogExp2 = FogExp2;
	exports.Font = Font;
	exports.FontLoader = FontLoader;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontSide = FrontSide;
	exports.Frustum = Frustum;
	exports.GammaEncoding = GammaEncoding;
	exports.Geometry = Geometry;
	exports.GeometryUtils = GeometryUtils;
	exports.GreaterDepth = GreaterDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
	exports.GreaterStencilFunc = GreaterStencilFunc;
	exports.GridHelper = GridHelper;
	exports.Group = Group;
	exports.HalfFloatType = HalfFloatType;
	exports.HemisphereLight = HemisphereLight;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.HemisphereLightProbe = HemisphereLightProbe;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.ImageBitmapLoader = ImageBitmapLoader;
	exports.ImageLoader = ImageLoader;
	exports.ImageUtils = ImageUtils;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.IncrementStencilOp = IncrementStencilOp;
	exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InstancedMesh = InstancedMesh;
	exports.Int16Attribute = Int16Attribute;
	exports.Int16BufferAttribute = Int16BufferAttribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Int32BufferAttribute = Int32BufferAttribute;
	exports.Int8Attribute = Int8Attribute;
	exports.Int8BufferAttribute = Int8BufferAttribute;
	exports.IntType = IntType;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.Interpolant = Interpolant;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.InvertStencilOp = InvertStencilOp;
	exports.JSONLoader = JSONLoader;
	exports.KeepStencilOp = KeepStencilOp;
	exports.KeyframeTrack = KeyframeTrack;
	exports.LOD = LOD;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.Layers = Layers;
	exports.LensFlare = LensFlare;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.LessEqualStencilFunc = LessEqualStencilFunc;
	exports.LessStencilFunc = LessStencilFunc;
	exports.Light = Light;
	exports.LightProbe = LightProbe;
	exports.LightProbeHelper = LightProbeHelper;
	exports.LightShadow = LightShadow;
	exports.Line = Line;
	exports.Line3 = Line3;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.LineCurve = LineCurve;
	exports.LineCurve3 = LineCurve3;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineLoop = LineLoop;
	exports.LinePieces = LinePieces;
	exports.LineSegments = LineSegments;
	exports.LineStrip = LineStrip;
	exports.LinearEncoding = LinearEncoding;
	exports.LinearFilter = LinearFilter;
	exports.LinearInterpolant = LinearInterpolant;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
	exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
	exports.LinearToneMapping = LinearToneMapping;
	exports.Loader = Loader;
	exports.LoaderUtils = LoaderUtils;
	exports.LoadingManager = LoadingManager;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.LoopOnce = LoopOnce;
	exports.LoopPingPong = LoopPingPong;
	exports.LoopRepeat = LoopRepeat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.MOUSE = MOUSE;
	exports.Material = Material;
	exports.MaterialLoader = MaterialLoader;
	exports.Math = _Math;
	exports.Matrix3 = Matrix3;
	exports.Matrix4 = Matrix4;
	exports.MaxEquation = MaxEquation;
	exports.Mesh = Mesh;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshDistanceMaterial = MeshDistanceMaterial;
	exports.MeshFaceMaterial = MeshFaceMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshMatcapMaterial = MeshMatcapMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshToonMaterial = MeshToonMaterial;
	exports.MinEquation = MinEquation;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.MixOperation = MixOperation;
	exports.MultiMaterial = MultiMaterial;
	exports.MultiplyBlending = MultiplyBlending;
	exports.MultiplyOperation = MultiplyOperation;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
	exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
	exports.NeverDepth = NeverDepth;
	exports.NeverStencilFunc = NeverStencilFunc;
	exports.NoBlending = NoBlending;
	exports.NoColors = NoColors;
	exports.NoToneMapping = NoToneMapping;
	exports.NormalBlending = NormalBlending;
	exports.NotEqualDepth = NotEqualDepth;
	exports.NotEqualStencilFunc = NotEqualStencilFunc;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.Object3D = Object3D;
	exports.ObjectLoader = ObjectLoader;
	exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OneFactor = OneFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.OrthographicCamera = OrthographicCamera;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.Particle = Particle;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystem = ParticleSystem;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Path = Path;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.Plane = Plane;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.PlaneHelper = PlaneHelper;
	exports.PointCloud = PointCloud;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.PointLight = PointLight;
	exports.PointLightHelper = PointLightHelper;
	exports.Points = Points;
	exports.PointsMaterial = PointsMaterial;
	exports.PolarGridHelper = PolarGridHelper;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PositionalAudio = PositionalAudio;
	exports.PositionalAudioHelper = PositionalAudioHelper;
	exports.PropertyBinding = PropertyBinding;
	exports.PropertyMixer = PropertyMixer;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.Quaternion = Quaternion;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.REVISION = REVISION;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.RGBAFormat = RGBAFormat;
	exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
	exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
	exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
	exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
	exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
	exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
	exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
	exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
	exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
	exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
	exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
	exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
	exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
	exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGBDEncoding = RGBDEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.RGBEFormat = RGBEFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.Ray = Ray;
	exports.Raycaster = Raycaster;
	exports.RectAreaLight = RectAreaLight;
	exports.RectAreaLightHelper = RectAreaLightHelper;
	exports.RedFormat = RedFormat;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ReplaceStencilOp = ReplaceStencilOp;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.RingGeometry = RingGeometry;
	exports.Scene = Scene;
	exports.SceneUtils = SceneUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.ShaderLib = ShaderLib;
	exports.ShaderMaterial = ShaderMaterial;
	exports.ShadowMaterial = ShadowMaterial;
	exports.Shape = Shape;
	exports.ShapeBufferGeometry = ShapeBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ShapePath = ShapePath;
	exports.ShapeUtils = ShapeUtils;
	exports.ShortType = ShortType;
	exports.Skeleton = Skeleton;
	exports.SkeletonHelper = SkeletonHelper;
	exports.SkinnedMesh = SkinnedMesh;
	exports.SmoothShading = SmoothShading;
	exports.Sphere = Sphere;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.Spherical = Spherical;
	exports.SphericalHarmonics3 = SphericalHarmonics3;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.Spline = Spline;
	exports.SplineCurve = SplineCurve;
	exports.SplineCurve3 = SplineCurve3;
	exports.SpotLight = SpotLight;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SpotLightShadow = SpotLightShadow;
	exports.Sprite = Sprite;
	exports.SpriteMaterial = SpriteMaterial;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.StaticCopyUsage = StaticCopyUsage;
	exports.StaticDrawUsage = StaticDrawUsage;
	exports.StaticReadUsage = StaticReadUsage;
	exports.StereoCamera = StereoCamera;
	exports.StreamCopyUsage = StreamCopyUsage;
	exports.StreamDrawUsage = StreamDrawUsage;
	exports.StreamReadUsage = StreamReadUsage;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.SubtractEquation = SubtractEquation;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.TOUCH = TOUCH;
	exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TextBufferGeometry = TextBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.Texture = Texture;
	exports.TextureLoader = TextureLoader;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.Triangle = Triangle;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.UVMapping = UVMapping;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Uint16BufferAttribute = Uint16BufferAttribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Uint32BufferAttribute = Uint32BufferAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Uint8BufferAttribute = Uint8BufferAttribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.Uniform = Uniform;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.UnsignedByteType = UnsignedByteType;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.UnsignedIntType = UnsignedIntType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedShortType = UnsignedShortType;
	exports.VSMShadowMap = VSMShadowMap;
	exports.Vector2 = Vector2;
	exports.Vector3 = Vector3;
	exports.Vector4 = Vector4;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.Vertex = Vertex;
	exports.VertexColors = VertexColors;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.VideoTexture = VideoTexture;
	exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderer = WebGLRenderer;
	exports.WebGLUtils = WebGLUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.WireframeHelper = WireframeHelper;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.XHRLoader = XHRLoader;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroFactor = ZeroFactor;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.ZeroStencilOp = ZeroStencilOp;
	exports.sRGBEncoding = sRGBEncoding;

    return exports;
});

define('skylark-threejs/main',[
	"skylark-langx/skylark",
    "./three"
], function(skylark,threejs) {
    return skylark.attach("intg.threejs",threejs);
});

define('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });

define('skylark-threejs-ex/shaders/CopyShader',[],function () {
    'use strict';
    var CopyShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'opacity': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform float opacity;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tgl_FragColor = opacity * texel;',
            '}'
        ].join('\n')
    };
    return CopyShader;
});
define('skylark-threejs-ex/shaders/BokehShader',[],function () {
    'use strict';
    var BokehShader = {
        defines: {
            'DEPTH_PACKING': 1,
            'PERSPECTIVE_CAMERA': 1
        },
        uniforms: {
            'tColor': { value: null },
            'tDepth': { value: null },
            'focus': { value: 1 },
            'aspect': { value: 1 },
            'aperture': { value: 0.025 },
            'maxblur': { value: 1 },
            'nearClip': { value: 1 },
            'farClip': { value: 1000 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'varying vec2 vUv;',
            'uniform sampler2D tColor;',
            'uniform sampler2D tDepth;',
            'uniform float maxblur;',
            'uniform float aperture;',
            'uniform float nearClip;',
            'uniform float farClip;',
            'uniform float focus;',
            'uniform float aspect;',
            '#include <packing>',
            'float getDepth( const in vec2 screenPosition ) {',
            '\t#if DEPTH_PACKING == 1',
            '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',
            '\t#else',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );',
            '\t#else',
            '\treturn orthographicDepthToViewZ( depth, nearClip, farClip );',
            '\t#endif',
            '}',
            'void main() {',
            '\tvec2 aspectcorrect = vec2( 1.0, aspect );',
            '\tfloat viewZ = getViewZ( getDepth( vUv ) );',
            '\tfloat factor = ( focus + viewZ );',
            '\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );',
            '\tvec2 dofblur9 = dofblur * 0.9;',
            '\tvec2 dofblur7 = dofblur * 0.7;',
            '\tvec2 dofblur4 = dofblur * 0.4;',
            '\tvec4 col = vec4( 0.0 );',
            '\tcol += texture2D( tColor, vUv.xy );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',
            '\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );',
            '\tgl_FragColor = col / 41.0;',
            '\tgl_FragColor.a = 1.0;',
            '}'
        ].join('\n')
    };
    return BokehShader;
});
define('skylark-threejs-ex/shaders/SAOShader',[
   "skylark-threejs"
], function (THREE) {
    'use strict';
    var SAOShader = {
        defines: {
            'NUM_SAMPLES': 7,
            'NUM_RINGS': 4,
            'NORMAL_TEXTURE': 0,
            'DIFFUSE_TEXTURE': 0,
            'DEPTH_PACKING': 1,
            'PERSPECTIVE_CAMERA': 1
        },
        uniforms: {
            'tDepth': { value: null },
            'tDiffuse': { value: null },
            'tNormal': { value: null },
            'size': { value: new THREE.Vector2(512, 512) },
            'cameraNear': { value: 1 },
            'cameraFar': { value: 100 },
            'cameraProjectionMatrix': { value: new THREE.Matrix4() },
            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },
            'scale': { value: 1 },
            'intensity': { value: 0.1 },
            'bias': { value: 0.5 },
            'minResolution': { value: 0 },
            'kernelRadius': { value: 100 },
            'randomSeed': { value: 0 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'varying vec2 vUv;',
            '#if DIFFUSE_TEXTURE == 1',
            'uniform sampler2D tDiffuse;',
            '#endif',
            'uniform sampler2D tDepth;',
            '#if NORMAL_TEXTURE == 1',
            'uniform sampler2D tNormal;',
            '#endif',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'uniform mat4 cameraProjectionMatrix;',
            'uniform mat4 cameraInverseProjectionMatrix;',
            'uniform float scale;',
            'uniform float intensity;',
            'uniform float bias;',
            'uniform float kernelRadius;',
            'uniform float minResolution;',
            'uniform vec2 size;',
            'uniform float randomSeed;',
            '// RGBA depth',
            '#include <packing>',
            'vec4 getDefaultColor( const in vec2 screenPosition ) {',
            '\t#if DIFFUSE_TEXTURE == 1',
            '\treturn texture2D( tDiffuse, vUv );',
            '\t#else',
            '\treturn vec4( 1.0 );',
            '\t#endif',
            '}',
            'float getDepth( const in vec2 screenPosition ) {',
            '\t#if DEPTH_PACKING == 1',
            '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',
            '\t#else',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#else',
            '\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#endif',
            '}',
            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',
            '\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',
            '\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',
            '\tclipPosition *= clipW; // unprojection.',
            '\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',
            '}',
            'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',
            '\t#if NORMAL_TEXTURE == 1',
            '\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',
            '\t#else',
            '\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',
            '\t#endif',
            '}',
            'float scaleDividedByCameraFar;',
            'float minResolutionMultipliedByCameraFar;',
            'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',
            '\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',
            '\tfloat viewDistance = length( viewDelta );',
            '\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',
            '\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',
            '}',
            '// moving costly divides into consts',
            'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',
            'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',
            'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',
            '\t// precompute some variables require in getOcclusion.',
            '\tscaleDividedByCameraFar = scale / cameraFar;',
            '\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',
            '\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',
            '\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',
            '\tfloat angle = rand( vUv + randomSeed ) * PI2;',
            '\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',
            '\tvec2 radiusStep = radius;',
            '\tfloat occlusionSum = 0.0;',
            '\tfloat weightSum = 0.0;',
            '\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',
            '\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',
            '\t\tradius += radiusStep;',
            '\t\tangle += ANGLE_STEP;',
            '\t\tfloat sampleDepth = getDepth( sampleUv );',
            '\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',
            '\t\t\tcontinue;',
            '\t\t}',
            '\t\tfloat sampleViewZ = getViewZ( sampleDepth );',
            '\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',
            '\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',
            '\t\tweightSum += 1.0;',
            '\t}',
            '\tif( weightSum == 0.0 ) discard;',
            '\treturn occlusionSum * ( intensity / weightSum );',
            '}',
            'void main() {',
            '\tfloat centerDepth = getDepth( vUv );',
            '\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',
            '\t\tdiscard;',
            '\t}',
            '\tfloat centerViewZ = getViewZ( centerDepth );',
            '\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',
            '\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',
            '\tgl_FragColor = getDefaultColor( vUv );',
            '\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',
            '}'
        ].join('\n')
    };
    return SAOShader;
});
define('skylark-threejs-ex/shaders/DepthLimitedBlurShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var DepthLimitedBlurShader = {
        defines: {
            'KERNEL_RADIUS': 4,
            'DEPTH_PACKING': 1,
            'PERSPECTIVE_CAMERA': 1
        },
        uniforms: {
            'tDiffuse': { value: null },
            'size': { value: new THREE.Vector2(512, 512) },
            'sampleUvOffsets': { value: [new THREE.Vector2(0, 0)] },
            'sampleWeights': { value: [1] },
            'tDepth': { value: null },
            'cameraNear': { value: 10 },
            'cameraFar': { value: 1000 },
            'depthCutoff': { value: 10 }
        },
        vertexShader: [
            '#include <common>',
            'uniform vec2 size;',
            'varying vec2 vUv;',
            'varying vec2 vInvSize;',
            'void main() {',
            '\tvUv = uv;',
            '\tvInvSize = 1.0 / size;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            '#include <packing>',
            'uniform sampler2D tDiffuse;',
            'uniform sampler2D tDepth;',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'uniform float depthCutoff;',
            'uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];',
            'uniform float sampleWeights[ KERNEL_RADIUS + 1 ];',
            'varying vec2 vUv;',
            'varying vec2 vInvSize;',
            'float getDepth( const in vec2 screenPosition ) {',
            '\t#if DEPTH_PACKING == 1',
            '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',
            '\t#else',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#else',
            '\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#endif',
            '}',
            'void main() {',
            '\tfloat depth = getDepth( vUv );',
            '\tif( depth >= ( 1.0 - EPSILON ) ) {',
            '\t\tdiscard;',
            '\t}',
            '\tfloat centerViewZ = -getViewZ( depth );',
            '\tbool rBreak = false, lBreak = false;',
            '\tfloat weightSum = sampleWeights[0];',
            '\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;',
            '\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {',
            '\t\tfloat sampleWeight = sampleWeights[i];',
            '\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;',
            '\t\tvec2 sampleUv = vUv + sampleUvOffset;',
            '\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );',
            '\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;',
            '\t\tif( ! rBreak ) {',
            '\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',
            '\t\t\tweightSum += sampleWeight;',
            '\t\t}',
            '\t\tsampleUv = vUv - sampleUvOffset;',
            '\t\tviewZ = -getViewZ( getDepth( sampleUv ) );',
            '\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;',
            '\t\tif( ! lBreak ) {',
            '\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',
            '\t\t\tweightSum += sampleWeight;',
            '\t\t}',
            '\t}',
            '\tgl_FragColor = diffuseSum / weightSum;',
            '}'
        ].join('\n')
    };
    var BlurShaderUtils = DepthLimitedBlurShader.BlurShaderUtils = {
        createSampleWeights: function (kernelRadius, stdDev) {
            var gaussian = function (x, stdDev) {
                return Math.exp(-(x * x) / (2 * (stdDev * stdDev))) / (Math.sqrt(2 * Math.PI) * stdDev);
            };
            var weights = [];
            for (var i = 0; i <= kernelRadius; i++) {
                weights.push(gaussian(i, stdDev));
            }
            return weights;
        },
        createSampleOffsets: function (kernelRadius, uvIncrement) {
            var offsets = [];
            for (var i = 0; i <= kernelRadius; i++) {
                offsets.push(uvIncrement.clone().multiplyScalar(i));
            }
            return offsets;
        },
        configure: function (material, kernelRadius, stdDev, uvIncrement) {
            material.defines['KERNEL_RADIUS'] = kernelRadius;
            material.uniforms['sampleUvOffsets'].value = BlurShaderUtils.createSampleOffsets(kernelRadius, uvIncrement);
            material.uniforms['sampleWeights'].value = BlurShaderUtils.createSampleWeights(kernelRadius, stdDev);
            material.needsUpdate = true;
        }
    };

    return DepthLimitedBlurShader;
    
});
define('skylark-threejs-ex/shaders/UnpackDepthRGBAShader',[],function () {
    'use strict';
    var UnpackDepthRGBAShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'opacity': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform float opacity;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            '#include <packing>',
            'void main() {',
            '\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );',
            '\tgl_FragColor = vec4( vec3( depth ), opacity );',
            '}'
        ].join('\n')
    };
    return  UnpackDepthRGBAShader ;
});
define('skylark-threejs-ex/shaders/ConvolutionShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var ConvolutionShader = {
        defines: {
            'KERNEL_SIZE_FLOAT': '25.0',
            'KERNEL_SIZE_INT': '25'
        },
        uniforms: {
            'tDiffuse': { value: null },
            'uImageIncrement': { value: new THREE.Vector2(0.001953125, 0) },
            'cKernel': { value: [] }
        },
        vertexShader: [
            'uniform vec2 uImageIncrement;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform float cKernel[ KERNEL_SIZE_INT ];',
            'uniform sampler2D tDiffuse;',
            'uniform vec2 uImageIncrement;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec2 imageCoord = vUv;',
            '\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );',
            '\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {',
            '\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];',
            '\t\timageCoord += uImageIncrement;',
            '\t}',
            '\tgl_FragColor = sum;',
            '}'
        ].join('\n'),
        buildKernel: function (sigma) {
            function gauss(x, sigma) {
                return Math.exp(-(x * x) / (2 * sigma * sigma));
            }
            var i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil(sigma * 3) + 1;
            if (kernelSize > kMaxKernelSize)
                kernelSize = kMaxKernelSize;
            halfWidth = (kernelSize - 1) * 0.5;
            values = new Array(kernelSize);
            sum = 0;
            for (i = 0; i < kernelSize; ++i) {
                values[i] = gauss(i - halfWidth, sigma);
                sum += values[i];
            }
            for (i = 0; i < kernelSize; ++i)
                values[i] /= sum;
            return values;
        }
    };
    return ConvolutionShader;
});
define('skylark-threejs-ex/shaders/LuminosityHighPassShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var LuminosityHighPassShader = {
        shaderID: 'luminosityHighPass',
        uniforms: {
            'tDiffuse': { value: null },
            'luminosityThreshold': { value: 1 },
            'smoothWidth': { value: 1 },
            'defaultColor': { value: new THREE.Color(0) },
            'defaultOpacity': { value: 0 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform vec3 defaultColor;',
            'uniform float defaultOpacity;',
            'uniform float luminosityThreshold;',
            'uniform float smoothWidth;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',
            '\tfloat v = dot( texel.xyz, luma );',
            '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',
            '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',
            '\tgl_FragColor = mix( outputColor, texel, alpha );',
            '}'
        ].join('\n')
    };
    return LuminosityHighPassShader;
});
define('skylark-threejs-ex/shaders/FXAAShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var FXAAShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'resolution': { value: new  THREE.Vector2(1 / 1024, 1 / 512) }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'precision highp float;',
            '',
            'uniform sampler2D tDiffuse;',
            '',
            'uniform vec2 resolution;',
            '',
            'varying vec2 vUv;',
            '',
            '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)',
            '',
            '//----------------------------------------------------------------------------------',
            '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag',
            '// SDK Version: v3.00',
            '// Email:       gameworks@nvidia.com',
            '// Site:        http://developer.nvidia.com/',
            '//',
            '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.',
            '//',
            '// Redistribution and use in source and binary forms, with or without',
            '// modification, are permitted provided that the following conditions',
            '// are met:',
            '//  * Redistributions of source code must retain the above copyright',
            '//    notice, this list of conditions and the following disclaimer.',
            '//  * Redistributions in binary form must reproduce the above copyright',
            '//    notice, this list of conditions and the following disclaimer in the',
            '//    documentation and/or other materials provided with the distribution.',
            '//  * Neither the name of NVIDIA CORPORATION nor the names of its',
            '//    contributors may be used to endorse or promote products derived',
            '//    from this software without specific prior written permission.',
            '//',
            "// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY",
            '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',
            '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',
            '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR',
            '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,',
            '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,',
            '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR',
            '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY',
            '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',
            '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE',
            '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',
            '//',
            '//----------------------------------------------------------------------------------',
            '',
            '#define FXAA_PC 1',
            '#define FXAA_GLSL_100 1',
            '#define FXAA_QUALITY_PRESET 12',
            '',
            '#define FXAA_GREEN_AS_LUMA 1',
            '',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_PC_CONSOLE',
            '    //',
            '    // The console algorithm for PC is included',
            '    // for developers targeting really low spec machines.',
            '    // Likely better to just run FXAA_PC, and use a really low preset.',
            '    //',
            '    #define FXAA_PC_CONSOLE 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_GLSL_120',
            '    #define FXAA_GLSL_120 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_GLSL_130',
            '    #define FXAA_GLSL_130 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_HLSL_3',
            '    #define FXAA_HLSL_3 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_HLSL_4',
            '    #define FXAA_HLSL_4 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_HLSL_5',
            '    #define FXAA_HLSL_5 0',
            '#endif',
            '/*==========================================================================*/',
            '#ifndef FXAA_GREEN_AS_LUMA',
            '    //',
            '    // For those using non-linear color,',
            '    // and either not able to get luma in alpha, or not wanting to,',
            '    // this enables FXAA to run using green as a proxy for luma.',
            '    // So with this enabled, no need to pack luma in alpha.',
            '    //',
            '    // This will turn off AA on anything which lacks some amount of green.',
            '    // Pure red and blue or combination of only R and B, will get no AA.',
            '    //',
            '    // Might want to lower the settings for both,',
            '    //    fxaaConsoleEdgeThresholdMin',
            '    //    fxaaQualityEdgeThresholdMin',
            '    // In order to insure AA does not get turned off on colors',
            '    // which contain a minor amount of green.',
            '    //',
            '    // 1 = On.',
            '    // 0 = Off.',
            '    //',
            '    #define FXAA_GREEN_AS_LUMA 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_EARLY_EXIT',
            '    //',
            "    // Controls algorithm's early exit path.",
            '    // On PS3 turning this ON adds 2 cycles to the shader.',
            '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',
            '    // Turning this off on console will result in a more blurry image.',
            '    // So this defaults to on.',
            '    //',
            '    // 1 = On.',
            '    // 0 = Off.',
            '    //',
            '    #define FXAA_EARLY_EXIT 1',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_DISCARD',
            '    //',
            '    // Only valid for PC OpenGL currently.',
            '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',
            '    //',
            "    // 1 = Use discard on pixels which don't need AA.",
            '    //     For APIs which enable concurrent TEX+ROP from same surface.',
            "    // 0 = Return unchanged color on pixels which don't need AA.",
            '    //',
            '    #define FXAA_DISCARD 0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_FAST_PIXEL_OFFSET',
            '    //',
            '    // Used for GLSL 120 only.',
            '    //',
            '    // 1 = GL API supports fast pixel offsets',
            '    // 0 = do not use fast pixel offsets',
            '    //',
            '    #ifdef GL_EXT_gpu_shader4',
            '        #define FXAA_FAST_PIXEL_OFFSET 1',
            '    #endif',
            '    #ifdef GL_NV_gpu_shader5',
            '        #define FXAA_FAST_PIXEL_OFFSET 1',
            '    #endif',
            '    #ifdef GL_ARB_gpu_shader5',
            '        #define FXAA_FAST_PIXEL_OFFSET 1',
            '    #endif',
            '    #ifndef FXAA_FAST_PIXEL_OFFSET',
            '        #define FXAA_FAST_PIXEL_OFFSET 0',
            '    #endif',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#ifndef FXAA_GATHER4_ALPHA',
            '    //',
            '    // 1 = API supports gather4 on alpha channel.',
            '    // 0 = API does not support gather4 on alpha channel.',
            '    //',
            '    #if (FXAA_HLSL_5 == 1)',
            '        #define FXAA_GATHER4_ALPHA 1',
            '    #endif',
            '    #ifdef GL_ARB_gpu_shader5',
            '        #define FXAA_GATHER4_ALPHA 1',
            '    #endif',
            '    #ifdef GL_NV_gpu_shader5',
            '        #define FXAA_GATHER4_ALPHA 1',
            '    #endif',
            '    #ifndef FXAA_GATHER4_ALPHA',
            '        #define FXAA_GATHER4_ALPHA 0',
            '    #endif',
            '#endif',
            '',
            '',
            '/*============================================================================',
            '                        FXAA QUALITY - TUNING KNOBS',
            '------------------------------------------------------------------------------',
            'NOTE the other tuning knobs are now in the shader function inputs!',
            '============================================================================*/',
            '#ifndef FXAA_QUALITY_PRESET',
            '    //',
            '    // Choose the quality preset.',
            '    // This needs to be compiled into the shader as it effects code.',
            '    // Best option to include multiple presets is to',
            '    // in each shader define the preset, then include this file.',
            '    //',
            '    // OPTIONS',
            '    // -----------------------------------------------------------------------',
            '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',
            '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',
            '    // 39       - no dither, very expensive',
            '    //',
            '    // NOTES',
            '    // -----------------------------------------------------------------------',
            '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',
            '    // 13 = about same speed as FXAA 3.9 and better than 12',
            '    // 23 = closest to FXAA 3.9 visually and performance wise',
            '    //  _ = the lowest digit is directly related to performance',
            '    // _  = the highest digit is directly related to style',
            '    //',
            '    #define FXAA_QUALITY_PRESET 12',
            '#endif',
            '',
            '',
            '/*============================================================================',
            '',
            '                           FXAA QUALITY - PRESETS',
            '',
            '============================================================================*/',
            '',
            '/*============================================================================',
            '                     FXAA QUALITY - MEDIUM DITHER PRESETS',
            '============================================================================*/',
            '#if (FXAA_QUALITY_PRESET == 10)',
            '    #define FXAA_QUALITY_PS 3',
            '    #define FXAA_QUALITY_P0 1.5',
            '    #define FXAA_QUALITY_P1 3.0',
            '    #define FXAA_QUALITY_P2 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 11)',
            '    #define FXAA_QUALITY_PS 4',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 3.0',
            '    #define FXAA_QUALITY_P3 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 12)',
            '    #define FXAA_QUALITY_PS 5',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 4.0',
            '    #define FXAA_QUALITY_P4 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 13)',
            '    #define FXAA_QUALITY_PS 6',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 4.0',
            '    #define FXAA_QUALITY_P5 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 14)',
            '    #define FXAA_QUALITY_PS 7',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 4.0',
            '    #define FXAA_QUALITY_P6 12.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 15)',
            '    #define FXAA_QUALITY_PS 8',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 4.0',
            '    #define FXAA_QUALITY_P7 12.0',
            '#endif',
            '',
            '/*============================================================================',
            '                     FXAA QUALITY - LOW DITHER PRESETS',
            '============================================================================*/',
            '#if (FXAA_QUALITY_PRESET == 20)',
            '    #define FXAA_QUALITY_PS 3',
            '    #define FXAA_QUALITY_P0 1.5',
            '    #define FXAA_QUALITY_P1 2.0',
            '    #define FXAA_QUALITY_P2 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 21)',
            '    #define FXAA_QUALITY_PS 4',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 22)',
            '    #define FXAA_QUALITY_PS 5',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 23)',
            '    #define FXAA_QUALITY_PS 6',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 24)',
            '    #define FXAA_QUALITY_PS 7',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 3.0',
            '    #define FXAA_QUALITY_P6 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 25)',
            '    #define FXAA_QUALITY_PS 8',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 4.0',
            '    #define FXAA_QUALITY_P7 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 26)',
            '    #define FXAA_QUALITY_PS 9',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 4.0',
            '    #define FXAA_QUALITY_P8 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 27)',
            '    #define FXAA_QUALITY_PS 10',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 4.0',
            '    #define FXAA_QUALITY_P9 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 28)',
            '    #define FXAA_QUALITY_PS 11',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 2.0',
            '    #define FXAA_QUALITY_P9 4.0',
            '    #define FXAA_QUALITY_P10 8.0',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_QUALITY_PRESET == 29)',
            '    #define FXAA_QUALITY_PS 12',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.5',
            '    #define FXAA_QUALITY_P2 2.0',
            '    #define FXAA_QUALITY_P3 2.0',
            '    #define FXAA_QUALITY_P4 2.0',
            '    #define FXAA_QUALITY_P5 2.0',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 2.0',
            '    #define FXAA_QUALITY_P9 2.0',
            '    #define FXAA_QUALITY_P10 4.0',
            '    #define FXAA_QUALITY_P11 8.0',
            '#endif',
            '',
            '/*============================================================================',
            '                     FXAA QUALITY - EXTREME QUALITY',
            '============================================================================*/',
            '#if (FXAA_QUALITY_PRESET == 39)',
            '    #define FXAA_QUALITY_PS 12',
            '    #define FXAA_QUALITY_P0 1.0',
            '    #define FXAA_QUALITY_P1 1.0',
            '    #define FXAA_QUALITY_P2 1.0',
            '    #define FXAA_QUALITY_P3 1.0',
            '    #define FXAA_QUALITY_P4 1.0',
            '    #define FXAA_QUALITY_P5 1.5',
            '    #define FXAA_QUALITY_P6 2.0',
            '    #define FXAA_QUALITY_P7 2.0',
            '    #define FXAA_QUALITY_P8 2.0',
            '    #define FXAA_QUALITY_P9 2.0',
            '    #define FXAA_QUALITY_P10 4.0',
            '    #define FXAA_QUALITY_P11 8.0',
            '#endif',
            '',
            '',
            '',
            '/*============================================================================',
            '',
            '                                API PORTING',
            '',
            '============================================================================*/',
            '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',
            '    #define FxaaBool bool',
            '    #define FxaaDiscard discard',
            '    #define FxaaFloat float',
            '    #define FxaaFloat2 vec2',
            '    #define FxaaFloat3 vec3',
            '    #define FxaaFloat4 vec4',
            '    #define FxaaHalf float',
            '    #define FxaaHalf2 vec2',
            '    #define FxaaHalf3 vec3',
            '    #define FxaaHalf4 vec4',
            '    #define FxaaInt2 ivec2',
            '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',
            '    #define FxaaTex sampler2D',
            '#else',
            '    #define FxaaBool bool',
            '    #define FxaaDiscard clip(-1)',
            '    #define FxaaFloat float',
            '    #define FxaaFloat2 float2',
            '    #define FxaaFloat3 float3',
            '    #define FxaaFloat4 float4',
            '    #define FxaaHalf half',
            '    #define FxaaHalf2 half2',
            '    #define FxaaHalf3 half3',
            '    #define FxaaHalf4 half4',
            '    #define FxaaSat(x) saturate(x)',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_GLSL_100 == 1)',
            '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',
            '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_GLSL_120 == 1)',
            '    // Requires,',
            '    //  #version 120',
            '    // And at least,',
            '    //  #extension GL_EXT_gpu_shader4 : enable',
            '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',
            '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',
            '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',
            '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',
            '    #else',
            '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',
            '    #endif',
            '    #if (FXAA_GATHER4_ALPHA == 1)',
            '        // use #extension GL_ARB_gpu_shader5 : enable',
            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',
            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',
            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',
            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',
            '    #endif',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_GLSL_130 == 1)',
            '    // Requires "#version 130" or better',
            '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',
            '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',
            '    #if (FXAA_GATHER4_ALPHA == 1)',
            '        // use #extension GL_ARB_gpu_shader5 : enable',
            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',
            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',
            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',
            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',
            '    #endif',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_HLSL_3 == 1)',
            '    #define FxaaInt2 float2',
            '    #define FxaaTex sampler2D',
            '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',
            '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_HLSL_4 == 1)',
            '    #define FxaaInt2 int2',
            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',
            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',
            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',
            '#endif',
            '/*--------------------------------------------------------------------------*/',
            '#if (FXAA_HLSL_5 == 1)',
            '    #define FxaaInt2 int2',
            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',
            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',
            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',
            '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',
            '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',
            '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',
            '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',
            '#endif',
            '',
            '',
            '/*============================================================================',
            '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',
            '============================================================================*/',
            '#if (FXAA_GREEN_AS_LUMA == 0)',
            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',
            '#else',
            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',
            '#endif',
            '',
            '',
            '',
            '',
            '/*============================================================================',
            '',
            '                             FXAA3 QUALITY - PC',
            '',
            '============================================================================*/',
            '#if (FXAA_PC == 1)',
            '/*--------------------------------------------------------------------------*/',
            'FxaaFloat4 FxaaPixelShader(',
            '    //',
            '    // Use noperspective interpolation here (turn off perspective interpolation).',
            '    // {xy} = center of pixel',
            '    FxaaFloat2 pos,',
            '    //',
            '    // Used only for FXAA Console, and not used on the 360 version.',
            '    // Use noperspective interpolation here (turn off perspective interpolation).',
            '    // {xy_} = upper left of pixel',
            '    // {_zw} = lower right of pixel',
            '    FxaaFloat4 fxaaConsolePosPos,',
            '    //',
            '    // Input color texture.',
            '    // {rgb_} = color in linear or perceptual color space',
            '    // if (FXAA_GREEN_AS_LUMA == 0)',
            '    //     {__a} = luma in perceptual color space (not linear)',
            '    FxaaTex tex,',
            '    //',
            '    // Only used on the optimized 360 version of FXAA Console.',
            '    // For everything but 360, just use the same input here as for "tex".',
            '    // For 360, same texture, just alias with a 2nd sampler.',
            '    // This sampler needs to have an exponent bias of -1.',
            '    FxaaTex fxaaConsole360TexExpBiasNegOne,',
            '    //',
            '    // Only used on the optimized 360 version of FXAA Console.',
            '    // For everything but 360, just use the same input here as for "tex".',
            '    // For 360, same texture, just alias with a 3nd sampler.',
            '    // This sampler needs to have an exponent bias of -2.',
            '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This must be from a constant/uniform.',
            '    // {x_} = 1.0/screenWidthInPixels',
            '    // {_y} = 1.0/screenHeightInPixels',
            '    FxaaFloat2 fxaaQualityRcpFrame,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This must be from a constant/uniform.',
            '    // This effects sub-pixel AA quality and inversely sharpness.',
            '    //   Where N ranges between,',
            '    //     N = 0.50 (default)',
            '    //     N = 0.33 (sharper)',
            '    // {x__} = -N/screenWidthInPixels',
            '    // {_y_} = -N/screenHeightInPixels',
            '    // {_z_} =  N/screenWidthInPixels',
            '    // {__w} =  N/screenHeightInPixels',
            '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // Not used on 360, but used on PS3 and PC.',
            '    // This must be from a constant/uniform.',
            '    // {x__} = -2.0/screenWidthInPixels',
            '    // {_y_} = -2.0/screenHeightInPixels',
            '    // {_z_} =  2.0/screenWidthInPixels',
            '    // {__w} =  2.0/screenHeightInPixels',
            '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',
            '    // This must be from a constant/uniform.',
            '    // {x__} =  8.0/screenWidthInPixels',
            '    // {_y_} =  8.0/screenHeightInPixels',
            '    // {_z_} = -4.0/screenWidthInPixels',
            '    // {__w} = -4.0/screenHeightInPixels',
            '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This used to be the FXAA_QUALITY_SUBPIX define.',
            '    // It is here now to allow easier tuning.',
            '    // Choose the amount of sub-pixel aliasing removal.',
            '    // This can effect sharpness.',
            '    //   1.00 - upper limit (softer)',
            '    //   0.75 - default amount of filtering',
            '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',
            '    //   0.25 - almost off',
            '    //   0.00 - completely off',
            '    FxaaFloat fxaaQualitySubpix,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',
            '    // It is here now to allow easier tuning.',
            '    // The minimum amount of local contrast required to apply algorithm.',
            '    //   0.333 - too little (faster)',
            '    //   0.250 - low quality',
            '    //   0.166 - default',
            '    //   0.125 - high quality',
            '    //   0.063 - overkill (slower)',
            '    FxaaFloat fxaaQualityEdgeThreshold,',
            '    //',
            '    // Only used on FXAA Quality.',
            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',
            '    // It is here now to allow easier tuning.',
            '    // Trims the algorithm from processing darks.',
            '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',
            '    //   0.0625 - high quality (faster)',
            '    //   0.0312 - visible limit (slower)',
            '    // Special notes when using FXAA_GREEN_AS_LUMA,',
            '    //   Likely want to set this to zero.',
            '    //   As colors that are mostly not-green',
            '    //   will appear very dark in the green channel!',
            '    //   Tune by looking at mostly non-green content,',
            '    //   then start at zero and increase until aliasing is a problem.',
            '    FxaaFloat fxaaQualityEdgeThresholdMin,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',
            '    // It is here now to allow easier tuning.',
            '    // This does not effect PS3, as this needs to be compiled in.',
            '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',
            '    //   Due to the PS3 being ALU bound,',
            '    //   there are only three safe values here: 2 and 4 and 8.',
            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',
            '    // For all other platforms can be a non-power of two.',
            '    //   8.0 is sharper (default!!!)',
            '    //   4.0 is softer',
            '    //   2.0 is really soft (good only for vector graphics inputs)',
            '    FxaaFloat fxaaConsoleEdgeSharpness,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',
            '    // It is here now to allow easier tuning.',
            '    // This does not effect PS3, as this needs to be compiled in.',
            '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',
            '    //   Due to the PS3 being ALU bound,',
            '    //   there are only two safe values here: 1/4 and 1/8.',
            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',
            '    // The console setting has a different mapping than the quality setting.',
            '    // Other platforms can use other values.',
            '    //   0.125 leaves less aliasing, but is softer (default!!!)',
            '    //   0.25 leaves more aliasing, and is sharper',
            '    FxaaFloat fxaaConsoleEdgeThreshold,',
            '    //',
            '    // Only used on FXAA Console.',
            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',
            '    // It is here now to allow easier tuning.',
            '    // Trims the algorithm from processing darks.',
            '    // The console setting has a different mapping than the quality setting.',
            '    // This only applies when FXAA_EARLY_EXIT is 1.',
            '    // This does not apply to PS3,',
            '    // PS3 was simplified to avoid more shader instructions.',
            '    //   0.06 - faster but more aliasing in darks',
            '    //   0.05 - default',
            '    //   0.04 - slower and less aliasing in darks',
            '    // Special notes when using FXAA_GREEN_AS_LUMA,',
            '    //   Likely want to set this to zero.',
            '    //   As colors that are mostly not-green',
            '    //   will appear very dark in the green channel!',
            '    //   Tune by looking at mostly non-green content,',
            '    //   then start at zero and increase until aliasing is a problem.',
            '    FxaaFloat fxaaConsoleEdgeThresholdMin,',
            '    //',
            '    // Extra constants for 360 FXAA Console only.',
            '    // Use zeros or anything else for other platforms.',
            '    // These must be in physical constant registers and NOT immediates.',
            '    // Immediates will result in compiler un-optimizing.',
            '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',
            '    FxaaFloat4 fxaaConsole360ConstDir',
            ') {',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat2 posM;',
            '    posM.x = pos.x;',
            '    posM.y = pos.y;',
            '    #if (FXAA_GATHER4_ALPHA == 1)',
            '        #if (FXAA_DISCARD == 0)',
            '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',
            '            #if (FXAA_GREEN_AS_LUMA == 0)',
            '                #define lumaM rgbyM.w',
            '            #else',
            '                #define lumaM rgbyM.y',
            '            #endif',
            '        #endif',
            '        #if (FXAA_GREEN_AS_LUMA == 0)',
            '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',
            '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',
            '        #else',
            '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',
            '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',
            '        #endif',
            '        #if (FXAA_DISCARD == 1)',
            '            #define lumaM luma4A.w',
            '        #endif',
            '        #define lumaE luma4A.z',
            '        #define lumaS luma4A.x',
            '        #define lumaSE luma4A.y',
            '        #define lumaNW luma4B.w',
            '        #define lumaN luma4B.z',
            '        #define lumaW luma4B.x',
            '    #else',
            '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',
            '        #if (FXAA_GREEN_AS_LUMA == 0)',
            '            #define lumaM rgbyM.w',
            '        #else',
            '            #define lumaM rgbyM.y',
            '        #endif',
            '        #if (FXAA_GLSL_100 == 1)',
            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',
            '        #else',
            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',
            '        #endif',
            '    #endif',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat maxSM = max(lumaS, lumaM);',
            '    FxaaFloat minSM = min(lumaS, lumaM);',
            '    FxaaFloat maxESM = max(lumaE, maxSM);',
            '    FxaaFloat minESM = min(lumaE, minSM);',
            '    FxaaFloat maxWN = max(lumaN, lumaW);',
            '    FxaaFloat minWN = min(lumaN, lumaW);',
            '    FxaaFloat rangeMax = max(maxWN, maxESM);',
            '    FxaaFloat rangeMin = min(minWN, minESM);',
            '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',
            '    FxaaFloat range = rangeMax - rangeMin;',
            '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',
            '    FxaaBool earlyExit = range < rangeMaxClamped;',
            '/*--------------------------------------------------------------------------*/',
            '    if(earlyExit)',
            '        #if (FXAA_DISCARD == 1)',
            '            FxaaDiscard;',
            '        #else',
            '            return rgbyM;',
            '        #endif',
            '/*--------------------------------------------------------------------------*/',
            '    #if (FXAA_GATHER4_ALPHA == 0)',
            '        #if (FXAA_GLSL_100 == 1)',
            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',
            '        #else',
            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',
            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',
            '        #endif',
            '    #else',
            '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',
            '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',
            '    #endif',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat lumaNS = lumaN + lumaS;',
            '    FxaaFloat lumaWE = lumaW + lumaE;',
            '    FxaaFloat subpixRcpRange = 1.0/range;',
            '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',
            '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',
            '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat lumaNESE = lumaNE + lumaSE;',
            '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',
            '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',
            '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',
            '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',
            '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',
            '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',
            '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',
            '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',
            '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',
            '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',
            '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',
            '    FxaaBool horzSpan = edgeHorz >= edgeVert;',
            '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',
            '/*--------------------------------------------------------------------------*/',
            '    if(!horzSpan) lumaN = lumaW;',
            '    if(!horzSpan) lumaS = lumaE;',
            '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',
            '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat gradientN = lumaN - lumaM;',
            '    FxaaFloat gradientS = lumaS - lumaM;',
            '    FxaaFloat lumaNN = lumaN + lumaM;',
            '    FxaaFloat lumaSS = lumaS + lumaM;',
            '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',
            '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',
            '    if(pairN) lengthSign = -lengthSign;',
            '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat2 posB;',
            '    posB.x = posM.x;',
            '    posB.y = posM.y;',
            '    FxaaFloat2 offNP;',
            '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',
            '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',
            '    if(!horzSpan) posB.x += lengthSign * 0.5;',
            '    if( horzSpan) posB.y += lengthSign * 0.5;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat2 posN;',
            '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',
            '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',
            '    FxaaFloat2 posP;',
            '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',
            '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',
            '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',
            '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',
            '    FxaaFloat subpixE = subpixC * subpixC;',
            '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',
            '/*--------------------------------------------------------------------------*/',
            '    if(!pairN) lumaNN = lumaSS;',
            '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',
            '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',
            '    FxaaFloat subpixF = subpixD * subpixE;',
            '    FxaaBool lumaMLTZero = lumaMM < 0.0;',
            '/*--------------------------------------------------------------------------*/',
            '    lumaEndN -= lumaNN * 0.5;',
            '    lumaEndP -= lumaNN * 0.5;',
            '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',
            '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',
            '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',
            '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',
            '    FxaaBool doneNP = (!doneN) || (!doneP);',
            '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',
            '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',
            '/*--------------------------------------------------------------------------*/',
            '    if(doneNP) {',
            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '        doneN = abs(lumaEndN) >= gradientScaled;',
            '        doneP = abs(lumaEndP) >= gradientScaled;',
            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',
            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',
            '        doneNP = (!doneN) || (!doneP);',
            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',
            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',
            '/*--------------------------------------------------------------------------*/',
            '        #if (FXAA_QUALITY_PS > 3)',
            '        if(doneNP) {',
            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '            doneN = abs(lumaEndN) >= gradientScaled;',
            '            doneP = abs(lumaEndP) >= gradientScaled;',
            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',
            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',
            '            doneNP = (!doneN) || (!doneP);',
            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',
            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',
            '/*--------------------------------------------------------------------------*/',
            '            #if (FXAA_QUALITY_PS > 4)',
            '            if(doneNP) {',
            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                doneN = abs(lumaEndN) >= gradientScaled;',
            '                doneP = abs(lumaEndP) >= gradientScaled;',
            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',
            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',
            '                doneNP = (!doneN) || (!doneP);',
            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',
            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',
            '/*--------------------------------------------------------------------------*/',
            '                #if (FXAA_QUALITY_PS > 5)',
            '                if(doneNP) {',
            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                    doneN = abs(lumaEndN) >= gradientScaled;',
            '                    doneP = abs(lumaEndP) >= gradientScaled;',
            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',
            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',
            '                    doneNP = (!doneN) || (!doneP);',
            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',
            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',
            '/*--------------------------------------------------------------------------*/',
            '                    #if (FXAA_QUALITY_PS > 6)',
            '                    if(doneNP) {',
            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                        doneN = abs(lumaEndN) >= gradientScaled;',
            '                        doneP = abs(lumaEndP) >= gradientScaled;',
            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',
            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',
            '                        doneNP = (!doneN) || (!doneP);',
            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',
            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',
            '/*--------------------------------------------------------------------------*/',
            '                        #if (FXAA_QUALITY_PS > 7)',
            '                        if(doneNP) {',
            '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                            doneN = abs(lumaEndN) >= gradientScaled;',
            '                            doneP = abs(lumaEndP) >= gradientScaled;',
            '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',
            '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',
            '                            doneNP = (!doneN) || (!doneP);',
            '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',
            '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',
            '/*--------------------------------------------------------------------------*/',
            '    #if (FXAA_QUALITY_PS > 8)',
            '    if(doneNP) {',
            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '        doneN = abs(lumaEndN) >= gradientScaled;',
            '        doneP = abs(lumaEndP) >= gradientScaled;',
            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',
            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',
            '        doneNP = (!doneN) || (!doneP);',
            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',
            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',
            '/*--------------------------------------------------------------------------*/',
            '        #if (FXAA_QUALITY_PS > 9)',
            '        if(doneNP) {',
            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '            doneN = abs(lumaEndN) >= gradientScaled;',
            '            doneP = abs(lumaEndP) >= gradientScaled;',
            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',
            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',
            '            doneNP = (!doneN) || (!doneP);',
            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',
            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',
            '/*--------------------------------------------------------------------------*/',
            '            #if (FXAA_QUALITY_PS > 10)',
            '            if(doneNP) {',
            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                doneN = abs(lumaEndN) >= gradientScaled;',
            '                doneP = abs(lumaEndP) >= gradientScaled;',
            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',
            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',
            '                doneNP = (!doneN) || (!doneP);',
            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',
            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',
            '/*--------------------------------------------------------------------------*/',
            '                #if (FXAA_QUALITY_PS > 11)',
            '                if(doneNP) {',
            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                    doneN = abs(lumaEndN) >= gradientScaled;',
            '                    doneP = abs(lumaEndP) >= gradientScaled;',
            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',
            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',
            '                    doneNP = (!doneN) || (!doneP);',
            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',
            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',
            '/*--------------------------------------------------------------------------*/',
            '                    #if (FXAA_QUALITY_PS > 12)',
            '                    if(doneNP) {',
            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',
            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',
            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',
            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',
            '                        doneN = abs(lumaEndN) >= gradientScaled;',
            '                        doneP = abs(lumaEndP) >= gradientScaled;',
            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',
            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',
            '                        doneNP = (!doneN) || (!doneP);',
            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',
            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',
            '/*--------------------------------------------------------------------------*/',
            '                    }',
            '                    #endif',
            '/*--------------------------------------------------------------------------*/',
            '                }',
            '                #endif',
            '/*--------------------------------------------------------------------------*/',
            '            }',
            '            #endif',
            '/*--------------------------------------------------------------------------*/',
            '        }',
            '        #endif',
            '/*--------------------------------------------------------------------------*/',
            '    }',
            '    #endif',
            '/*--------------------------------------------------------------------------*/',
            '                        }',
            '                        #endif',
            '/*--------------------------------------------------------------------------*/',
            '                    }',
            '                    #endif',
            '/*--------------------------------------------------------------------------*/',
            '                }',
            '                #endif',
            '/*--------------------------------------------------------------------------*/',
            '            }',
            '            #endif',
            '/*--------------------------------------------------------------------------*/',
            '        }',
            '        #endif',
            '/*--------------------------------------------------------------------------*/',
            '    }',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat dstN = posM.x - posN.x;',
            '    FxaaFloat dstP = posP.x - posM.x;',
            '    if(!horzSpan) dstN = posM.y - posN.y;',
            '    if(!horzSpan) dstP = posP.y - posM.y;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',
            '    FxaaFloat spanLength = (dstP + dstN);',
            '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',
            '    FxaaFloat spanLengthRcp = 1.0/spanLength;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaBool directionN = dstN < dstP;',
            '    FxaaFloat dst = min(dstN, dstP);',
            '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',
            '    FxaaFloat subpixG = subpixF * subpixF;',
            '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',
            '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',
            '/*--------------------------------------------------------------------------*/',
            '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',
            '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',
            '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',
            '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',
            '    #if (FXAA_DISCARD == 1)',
            '        return FxaaTexTop(tex, posM);',
            '    #else',
            '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',
            '    #endif',
            '}',
            '/*==========================================================================*/',
            '#endif',
            '',
            'void main() {',
            '  gl_FragColor = FxaaPixelShader(',
            '    vUv,',
            '    vec4(0.0),',
            '    tDiffuse,',
            '    tDiffuse,',
            '    tDiffuse,',
            '    resolution,',
            '    vec4(0.0),',
            '    vec4(0.0),',
            '    vec4(0.0),',
            '    0.75,',
            '    0.166,',
            '    0.0833,',
            '    0.0,',
            '    0.0,',
            '    0.0,',
            '    vec4(0.0)',
            '  );',
            '',
            '  // TODO avoid querying texture twice for same texel',
            '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',
            '}'
        ].join('\n')
    };
    return FXAAShader;
});
define('skylark-threejs-ex/shaders/SSAOShader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SSAOShader = {
        defines: {
            'PERSPECTIVE_CAMERA': 1,
            'KERNEL_SIZE': 32
        },
        uniforms: {
            'tDiffuse': { value: null },
            'tNormal': { value: null },
            'tDepth': { value: null },
            'tNoise': { value: null },
            'kernel': { value: null },
            'cameraNear': { value: null },
            'cameraFar': { value: null },
            'resolution': { value: new THREE.Vector2() },
            'cameraProjectionMatrix': { value: new THREE.Matrix4() },
            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },
            'kernelRadius': { value: 8 },
            'minDistance': { value: 0.005 },
            'maxDistance': { value: 0.05 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform sampler2D tNormal;',
            'uniform sampler2D tDepth;',
            'uniform sampler2D tNoise;',
            'uniform vec3 kernel[ KERNEL_SIZE ];',
            'uniform vec2 resolution;',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'uniform mat4 cameraProjectionMatrix;',
            'uniform mat4 cameraInverseProjectionMatrix;',
            'uniform float kernelRadius;',
            'uniform float minDistance;',
            'uniform float maxDistance;',
            'varying vec2 vUv;',
            '#include <packing>',
            'float getDepth( const in vec2 screenPosition ) {',
            '\treturn texture2D( tDepth, screenPosition ).x;',
            '}',
            'float getLinearDepth( const in vec2 screenPosition ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',
            '\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',
            '\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',
            '\t#else',
            '\t\treturn texture2D( depthSampler, coord ).x;',
            '\t#endif',
            '}',
            'float getViewZ( const in float depth ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#else',
            '\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',
            '\t#endif',
            '}',
            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',
            '\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',
            '\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',
            '\tclipPosition *= clipW; // unprojection.',
            '\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',
            '}',
            'vec3 getViewNormal( const in vec2 screenPosition ) {',
            '\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',
            '}',
            'void main() {',
            '\tfloat depth = getDepth( vUv );',
            '\tfloat viewZ = getViewZ( depth );',
            '\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );',
            '\tvec3 viewNormal = getViewNormal( vUv );',
            ' vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );',
            '\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;',
            '\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );',
            '\tvec3 bitangent = cross( viewNormal, tangent );',
            '\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );',
            ' float occlusion = 0.0;',
            ' for ( int i = 0; i < KERNEL_SIZE; i ++ ) {',
            '\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];',
            '\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );',
            '\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );',
            '\t\tsamplePointNDC /= samplePointNDC.w;',
            '\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;',
            '\t\tfloat realDepth = getLinearDepth( samplePointUv );',
            '\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );',
            '\t\tfloat delta = sampleDepth - realDepth;',
            '\t\tif ( delta > minDistance && delta < maxDistance ) {',
            '\t\t\tocclusion += 1.0;',
            '\t\t}',
            '\t}',
            '\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );',
            '\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );',
            '}'
        ].join('\n')
    };
    var SSAODepthShader = {
        defines: { 'PERSPECTIVE_CAMERA': 1 },
        uniforms: {
            'tDepth': { value: null },
            'cameraNear': { value: null },
            'cameraFar': { value: null }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDepth;',
            'uniform float cameraNear;',
            'uniform float cameraFar;',
            'varying vec2 vUv;',
            '#include <packing>',
            'float getLinearDepth( const in vec2 screenPosition ) {',
            '\t#if PERSPECTIVE_CAMERA == 1',
            '\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',
            '\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',
            '\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',
            '\t#else',
            '\t\treturn texture2D( depthSampler, coord ).x;',
            '\t#endif',
            '}',
            'void main() {',
            '\tfloat depth = getLinearDepth( vUv );',
            '\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );',
            '}'
        ].join('\n')
    };
    var SSAOBlurShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'resolution': { value: new THREE.Vector2() }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform vec2 resolution;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec2 texelSize = ( 1.0 / resolution );',
            '\tfloat result = 0.0;',
            '\tfor ( int i = - 2; i <= 2; i ++ ) {',
            '\t\tfor ( int j = - 2; j <= 2; j ++ ) {',
            '\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;',
            '\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;',
            '\t\t}',
            '\t}',
            '\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );',
            '}'
        ].join('\n')
    };
    return {
        SSAOShader,
        SSAODepthShader,
        SSAOBlurShader
    };
});
define('skylark-threejs-ex/shaders/FilmShader',[],function () {
    'use strict';
    var FilmShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'time': { value: 0 },
            'nIntensity': { value: 0.5 },
            'sIntensity': { value: 0.05 },
            'sCount': { value: 4096 },
            'grayscale': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'uniform float time;',
            'uniform bool grayscale;',
            'uniform float nIntensity;',
            'uniform float sIntensity;',
            'uniform float sCount;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );',
            '\tfloat dx = rand( vUv + time );',
            '\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );',
            '\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );',
            '\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;',
            '\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );',
            '\tif( grayscale ) {',
            '\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );',
            '\t}',
            '\tgl_FragColor =  vec4( cResult, cTextureScreen.a );',
            '}'
        ].join('\n')
    };
    return  FilmShader ;
});
define('skylark-threejs-ex/shaders/DotScreenShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var DotScreenShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'tSize': { value: new THREE.Vector2(256, 256) },
            'center': { value: new THREE.Vector2(0.5, 0.5) },
            'angle': { value: 1.57 },
            'scale': { value: 1 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec2 center;',
            'uniform float angle;',
            'uniform float scale;',
            'uniform vec2 tSize;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'float pattern() {',
            '\tfloat s = sin( angle ), c = cos( angle );',
            '\tvec2 tex = vUv * tSize - center;',
            '\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',
            '\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',
            '}',
            'void main() {',
            '\tvec4 color = texture2D( tDiffuse, vUv );',
            '\tfloat average = ( color.r + color.g + color.b ) / 3.0;',
            '\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',
            '}'
        ].join('\n')
    };
    return  DotScreenShader ;
});
define('skylark-threejs-ex/shaders/LuminosityShader',[],function () {
    'use strict';
    var LuminosityShader = {
        uniforms: { 'tDiffuse': { value: null } },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tfloat l = linearToRelativeLuminance( texel.rgb );',
            '\tgl_FragColor = vec4( l, l, l, texel.w );',
            '}'
        ].join('\n')
    };
    return  LuminosityShader ;
});
define('skylark-threejs-ex/shaders/SobelOperatorShader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SobelOperatorShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'resolution': { value: new THREE.Vector2() }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform vec2 resolution;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );',
            '\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );',
            '\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );',
            '\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;',
            '\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;',
            '\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;',
            '\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;',
            '\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;',
            '\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;',
            '\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;',
            '\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;',
            '\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;',
            '\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + ',
            '\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + ',
            '\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; ',
            '\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + ',
            '\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + ',
            '\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; ',
            '\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );',
            '\tgl_FragColor = vec4( vec3( G ), 1 );',
            '}'
        ].join('\n')
    };
    return  SobelOperatorShader ;
});
define('skylark-threejs-ex/shaders/ColorifyShader',["skylark-threejs"], function (THREE) {
    'use strict';
    var ColorifyShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'color': { value: new THREE.Color(16777215) }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec3 color;',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',
            '\tfloat v = dot( texel.xyz, luma );',
            '\tgl_FragColor = vec4( v * color, texel.w );',
            '}'
        ].join('\n')
    };
    return ColorifyShader;
});
define('skylark-threejs-ex/shaders/ToneMapShader',[],function () {
    'use strict';
    var ToneMapShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'averageLuminance': { value: 1 },
            'luminanceMap': { value: null },
            'maxLuminance': { value: 16 },
            'minLuminance': { value: 0.01 },
            'middleGrey': { value: 0.6 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            '#include <common>',
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'uniform float middleGrey;',
            'uniform float minLuminance;',
            'uniform float maxLuminance;',
            '#ifdef ADAPTED_LUMINANCE',
            '\tuniform sampler2D luminanceMap;',
            '#else',
            '\tuniform float averageLuminance;',
            '#endif',
            'vec3 ToneMap( vec3 vColor ) {',
            '\t#ifdef ADAPTED_LUMINANCE',
            '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;',
            '\t#else',
            '\t\tfloat fLumAvg = averageLuminance;',
            '\t#endif',
            '\tfloat fLumPixel = linearToRelativeLuminance( vColor );',
            '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );',
            '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);',
            '\treturn fLumCompressed * vColor;',
            '}',
            'void main() {',
            '\tvec4 texel = texture2D( tDiffuse, vUv );',
            '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );',
            '}'
        ].join('\n')
    };
    return  ToneMapShader ;
});
define('skylark-threejs-ex/shaders/TechnicolorShader',[],function () {
    'use strict';
    var TechnicolorShader = {
        uniforms: { 'tDiffuse': { value: null } },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'varying vec2 vUv;',
            'void main() {',
            '\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );',
            '\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);',
            '\tgl_FragColor = newTex;',
            '}'
        ].join('\n')
    };
    return  TechnicolorShader ;
});
define('skylark-threejs-ex/shaders/HueSaturationShader',[],function () {
    'use strict';
    var HueSaturationShader = {
        uniforms: {
            'tDiffuse': { value: null },
            'hue': { value: 0 },
            'saturation': { value: 0 }
        },
        vertexShader: [
            'varying vec2 vUv;',
            'void main() {',
            '\tvUv = uv;',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform sampler2D tDiffuse;',
            'uniform float hue;',
            'uniform float saturation;',
            'varying vec2 vUv;',
            'void main() {',
            '\tgl_FragColor = texture2D( tDiffuse, vUv );',
            '\tfloat angle = hue * 3.14159265;',
            '\tfloat s = sin(angle), c = cos(angle);',
            '\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',
            '\tfloat len = length(gl_FragColor.rgb);',
            '\tgl_FragColor.rgb = vec3(',
            '\t\tdot(gl_FragColor.rgb, weights.xyz),',
            '\t\tdot(gl_FragColor.rgb, weights.zxy),',
            '\t\tdot(gl_FragColor.rgb, weights.yzx)',
            '\t);',
            '\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',
            '\tif (saturation > 0.0) {',
            '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',
            '\t} else {',
            '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',
            '\t}',
            '}'
        ].join('\n')
    };
    return  HueSaturationShader ;
});
define('skylark-threejs-ex/postprocessing/Pass',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    function Pass() {
        this.enabled = true;
        this.needsSwap = true;
        this.clear = false;
        this.renderToScreen = false;
    }
    Object.assign(Pass.prototype, {
        setSize: function () {
        },
        render: function () {
            console.error('THREE.Pass: .render() must be implemented in derived pass.');
        }
    });
    Pass.FullScreenQuad = function () {
        var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
        var geometry = new THREE.PlaneBufferGeometry(2, 2);
        var FullScreenQuad = function (material) {
            this._mesh = new THREE.Mesh(geometry, material);
        };
        Object.defineProperty(FullScreenQuad.prototype, 'material', {
            get: function () {
                return this._mesh.material;
            },
            set: function (value) {
                this._mesh.material = value;
            }
        });
        Object.assign(FullScreenQuad.prototype, {
            dispose: function () {
                this._mesh.geometry.dispose();
            },
            render: function (renderer) {
                renderer.render(this._mesh, camera);
            }
        });
        return FullScreenQuad;
    }();
    return Pass;
});
define('skylark-threejs-ex/postprocessing/ShaderPass',[
    "skylark-threejs",
    './Pass'
], function (
    THREE, 
    Pass
) {
    'use strict';
    var ShaderPass = function (shader, textureID) {
        Pass.call(this);
        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';
        if (shader instanceof THREE.ShaderMaterial) {
            this.uniforms = shader.uniforms;
            this.material = shader;
        } else if (shader) {
            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
            this.material = new THREE.ShaderMaterial({
                defines: Object.assign({}, shader.defines),
                uniforms: this.uniforms,
                vertexShader: shader.vertexShader,
                fragmentShader: shader.fragmentShader
            });
        }
        this.fsQuad = new Pass.FullScreenQuad(this.material);
    };
    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {
        constructor: ShaderPass,
        render: function (renderer, writeBuffer, readBuffer) {
            if (this.uniforms[this.textureID]) {
                this.uniforms[this.textureID].value = readBuffer.texture;
            }
            this.fsQuad.material = this.material;
            if (this.renderToScreen) {
                renderer.setRenderTarget(null);
                this.fsQuad.render(renderer);
            } else {
                renderer.setRenderTarget(writeBuffer);
                if (this.clear)
                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
                this.fsQuad.render(renderer);
            }
        }
    });
    return ShaderPass;
});
define('skylark-threejs-ex/postprocessing/MaskPass',[
    './Pass'
], function (Pass) {
    'use strict';
    var MaskPass = function (scene, camera) {
        Pass.call(this);
        this.scene = scene;
        this.camera = camera;
        this.clear = true;
        this.needsSwap = false;
        this.inverse = false;
    };
    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {
        constructor: MaskPass,
        render: function (renderer, writeBuffer, readBuffer) {
            var context = renderer.getContext();
            var state = renderer.state;
            state.buffers.color.setMask(false);
            state.buffers.depth.setMask(false);
            state.buffers.color.setLocked(true);
            state.buffers.depth.setLocked(true);
            var writeValue, clearValue;
            if (this.inverse) {
                writeValue = 0;
                clearValue = 1;
            } else {
                writeValue = 1;
                clearValue = 0;
            }
            state.buffers.stencil.setTest(true);
            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);
            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);
            state.buffers.stencil.setClear(clearValue);
            state.buffers.stencil.setLocked(true);
            renderer.setRenderTarget(readBuffer);
            if (this.clear)
                renderer.clear();
            renderer.render(this.scene, this.camera);
            renderer.setRenderTarget(writeBuffer);
            if (this.clear)
                renderer.clear();
            renderer.render(this.scene, this.camera);
            state.buffers.color.setLocked(false);
            state.buffers.depth.setLocked(false);
            state.buffers.stencil.setLocked(false);
            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);
            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);
            state.buffers.stencil.setLocked(true);
        }
    });
    return  MaskPass;
});
define('skylark-threejs-ex/postprocessing/EffectComposer',[
    "skylark-threejs",
    '../shaders/CopyShader',
    '../postprocessing/ShaderPass',
    '../postprocessing/MaskPass'
], function (
    THREE, 
    CopyShader, 
    ShaderPass, 
    MaskPass
) {
    'use strict';
    var EffectComposer = function (renderer, renderTarget) {
        this.renderer = renderer;
        if (renderTarget === undefined) {
            var parameters = {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                format: THREE.RGBAFormat,
                stencilBuffer: false
            };
            var size = renderer.getSize(new THREE.Vector2());
            this._pixelRatio = renderer.getPixelRatio();
            this._width = size.width;
            this._height = size.height;
            renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);
            renderTarget.texture.name = 'EffectComposer.rt1';
        } else {
            this._pixelRatio = 1;
            this._width = renderTarget.width;
            this._height = renderTarget.height;
        }
        this.renderTarget1 = renderTarget;
        this.renderTarget2 = renderTarget.clone();
        this.renderTarget2.texture.name = 'EffectComposer.rt2';
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
        this.renderToScreen = true;
        this.passes = [];
        if (CopyShader === undefined) {
            console.error('THREE.EffectComposer relies on CopyShader');
        }
        if (ShaderPass === undefined) {
            console.error('THREE.EffectComposer relies on ShaderPass');
        }
        this.copyPass = new ShaderPass(CopyShader);
        this.clock = new THREE.Clock();
    };
    Object.assign(EffectComposer.prototype, {
        swapBuffers: function () {
            var tmp = this.readBuffer;
            this.readBuffer = this.writeBuffer;
            this.writeBuffer = tmp;
        },
        addPass: function (pass) {
            this.passes.push(pass);
            pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
        },
        insertPass: function (pass, index) {
            this.passes.splice(index, 0, pass);
        },
        isLastEnabledPass: function (passIndex) {
            for (var i = passIndex + 1; i < this.passes.length; i++) {
                if (this.passes[i].enabled) {
                    return false;
                }
            }
            return true;
        },
        render: function (deltaTime) {
            if (deltaTime === undefined) {
                deltaTime = this.clock.getDelta();
            }
            var currentRenderTarget = this.renderer.getRenderTarget();
            var maskActive = false;
            var pass, i, il = this.passes.length;
            for (i = 0; i < il; i++) {
                pass = this.passes[i];
                if (pass.enabled === false)
                    continue;
                pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);
                pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);
                if (pass.needsSwap) {
                    if (maskActive) {
                        var context = this.renderer.getContext();
                        var stencil = this.renderer.state.buffers.stencil;
                        stencil.setFunc(context.NOTEQUAL, 1, 4294967295);
                        this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);
                        stencil.setFunc(context.EQUAL, 1, 4294967295);
                    }
                    this.swapBuffers();
                }
                if (MaskPass !== undefined) {
                    if (pass instanceof MaskPass) {
                        maskActive = true;
                    } else if (pass instanceof ClearMaskPass) {
                        maskActive = false;
                    }
                }
            }
            this.renderer.setRenderTarget(currentRenderTarget);
        },
        reset: function (renderTarget) {
            if (renderTarget === undefined) {
                var size = this.renderer.getSize(new THREE.Vector2());
                this._pixelRatio = this.renderer.getPixelRatio();
                this._width = size.width;
                this._height = size.height;
                renderTarget = this.renderTarget1.clone();
                renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
            }
            this.renderTarget1.dispose();
            this.renderTarget2.dispose();
            this.renderTarget1 = renderTarget;
            this.renderTarget2 = renderTarget.clone();
            this.writeBuffer = this.renderTarget1;
            this.readBuffer = this.renderTarget2;
        },
        setSize: function (width, height) {
            this._width = width;
            this._height = height;
            var effectiveWidth = this._width * this._pixelRatio;
            var effectiveHeight = this._height * this._pixelRatio;
            this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
            this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
            for (var i = 0; i < this.passes.length; i++) {
                this.passes[i].setSize(effectiveWidth, effectiveHeight);
            }
        },
        setPixelRatio: function (pixelRatio) {
            this._pixelRatio = pixelRatio;
            this.setSize(this._width, this._height);
        }
    });

    return  EffectComposer;
});
define('skylark-threejs-ex/postprocessing/RenderPass',['./Pass'], function (Pass) {
    'use strict';
    var RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {
        Pass.call(this);
        this.scene = scene;
        this.camera = camera;
        this.overrideMaterial = overrideMaterial;
        this.clearColor = clearColor;
        this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;
        this.clear = true;
        this.clearDepth = false;
        this.needsSwap = false;
    };
    RenderPass.prototype = Object.assign(Object.create(Pass.prototype), {
        constructor: RenderPass,
        render: function (renderer, writeBuffer, readBuffer) {
            var oldAutoClear = renderer.autoClear;
            renderer.autoClear = false;
            var oldClearColor, oldClearAlpha, oldOverrideMaterial;
            if (this.overrideMaterial !== undefined) {
                oldOverrideMaterial = this.scene.overrideMaterial;
                this.scene.overrideMaterial = this.overrideMaterial;
            }
            if (this.clearColor) {
                oldClearColor = renderer.getClearColor().getHex();
                oldClearAlpha = renderer.getClearAlpha();
                renderer.setClearColor(this.clearColor, this.clearAlpha);
            }
            if (this.clearDepth) {
                renderer.clearDepth();
            }
            renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);
            if (this.clear)
                renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
            renderer.render(this.scene, this.camera);
            if (this.clearColor) {
                renderer.setClearColor(oldClearColor, oldClearAlpha);
            }
            if (this.overrideMaterial !== undefined) {
                this.scene.overrideMaterial = oldOverrideMaterial;
            }
            renderer.autoClear = oldAutoClear;
        }
    });
    return RenderPass;
});
define('skylark-threejs-ex/curves/NURBSUtils',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var NURBSUtils = {
        findSpan: function (p, u, U) {
            var n = U.length - p - 1;
            if (u >= U[n]) {
                return n - 1;
            }
            if (u <= U[p]) {
                return p;
            }
            var low = p;
            var high = n;
            var mid = Math.floor((low + high) / 2);
            while (u < U[mid] || u >= U[mid + 1]) {
                if (u < U[mid]) {
                    high = mid;
                } else {
                    low = mid;
                }
                mid = Math.floor((low + high) / 2);
            }
            return mid;
        },
        calcBasisFunctions: function (span, u, p, U) {
            var N = [];
            var left = [];
            var right = [];
            N[0] = 1;
            for (var j = 1; j <= p; ++j) {
                left[j] = u - U[span + 1 - j];
                right[j] = U[span + j] - u;
                var saved = 0;
                for (var r = 0; r < j; ++r) {
                    var rv = right[r + 1];
                    var lv = left[j - r];
                    var temp = N[r] / (rv + lv);
                    N[r] = saved + rv * temp;
                    saved = lv * temp;
                }
                N[j] = saved;
            }
            return N;
        },
        calcBSplinePoint: function (p, U, P, u) {
            var span = this.findSpan(p, u, U);
            var N = this.calcBasisFunctions(span, u, p, U);
            var C = new THREE.Vector4(0, 0, 0, 0);
            for (var j = 0; j <= p; ++j) {
                var point = P[span - p + j];
                var Nj = N[j];
                var wNj = point.w * Nj;
                C.x += point.x * wNj;
                C.y += point.y * wNj;
                C.z += point.z * wNj;
                C.w += point.w * Nj;
            }
            return C;
        },
        calcBasisFunctionDerivatives: function (span, u, p, n, U) {
            var zeroArr = [];
            for (var i = 0; i <= p; ++i)
                zeroArr[i] = 0;
            var ders = [];
            for (var i = 0; i <= n; ++i)
                ders[i] = zeroArr.slice(0);
            var ndu = [];
            for (var i = 0; i <= p; ++i)
                ndu[i] = zeroArr.slice(0);
            ndu[0][0] = 1;
            var left = zeroArr.slice(0);
            var right = zeroArr.slice(0);
            for (var j = 1; j <= p; ++j) {
                left[j] = u - U[span + 1 - j];
                right[j] = U[span + j] - u;
                var saved = 0;
                for (var r = 0; r < j; ++r) {
                    var rv = right[r + 1];
                    var lv = left[j - r];
                    ndu[j][r] = rv + lv;
                    var temp = ndu[r][j - 1] / ndu[j][r];
                    ndu[r][j] = saved + rv * temp;
                    saved = lv * temp;
                }
                ndu[j][j] = saved;
            }
            for (var j = 0; j <= p; ++j) {
                ders[0][j] = ndu[j][p];
            }
            for (var r = 0; r <= p; ++r) {
                var s1 = 0;
                var s2 = 1;
                var a = [];
                for (var i = 0; i <= p; ++i) {
                    a[i] = zeroArr.slice(0);
                }
                a[0][0] = 1;
                for (var k = 1; k <= n; ++k) {
                    var d = 0;
                    var rk = r - k;
                    var pk = p - k;
                    if (r >= k) {
                        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];
                        d = a[s2][0] * ndu[rk][pk];
                    }
                    var j1 = rk >= -1 ? 1 : -rk;
                    var j2 = r - 1 <= pk ? k - 1 : p - r;
                    for (var j = j1; j <= j2; ++j) {
                        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];
                        d += a[s2][j] * ndu[rk + j][pk];
                    }
                    if (r <= pk) {
                        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];
                        d += a[s2][k] * ndu[r][pk];
                    }
                    ders[k][r] = d;
                    var j = s1;
                    s1 = s2;
                    s2 = j;
                }
            }
            var r = p;
            for (var k = 1; k <= n; ++k) {
                for (var j = 0; j <= p; ++j) {
                    ders[k][j] *= r;
                }
                r *= p - k;
            }
            return ders;
        },
        calcBSplineDerivatives: function (p, U, P, u, nd) {
            var du = nd < p ? nd : p;
            var CK = [];
            var span = this.findSpan(p, u, U);
            var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);
            var Pw = [];
            for (var i = 0; i < P.length; ++i) {
                var point = P[i].clone();
                var w = point.w;
                point.x *= w;
                point.y *= w;
                point.z *= w;
                Pw[i] = point;
            }
            for (var k = 0; k <= du; ++k) {
                var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);
                for (var j = 1; j <= p; ++j) {
                    point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));
                }
                CK[k] = point;
            }
            for (var k = du + 1; k <= nd + 1; ++k) {
                CK[k] = new THREE.Vector4(0, 0, 0);
            }
            return CK;
        },
        calcKoverI: function (k, i) {
            var nom = 1;
            for (var j = 2; j <= k; ++j) {
                nom *= j;
            }
            var denom = 1;
            for (var j = 2; j <= i; ++j) {
                denom *= j;
            }
            for (var j = 2; j <= k - i; ++j) {
                denom *= j;
            }
            return nom / denom;
        },
        calcRationalCurveDerivatives: function (Pders) {
            var nd = Pders.length;
            var Aders = [];
            var wders = [];
            for (var i = 0; i < nd; ++i) {
                var point = Pders[i];
                Aders[i] = new THREE.Vector3(point.x, point.y, point.z);
                wders[i] = point.w;
            }
            var CK = [];
            for (var k = 0; k < nd; ++k) {
                var v = Aders[k].clone();
                for (var i = 1; i <= k; ++i) {
                    v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));
                }
                CK[k] = v.divideScalar(wders[0]);
            }
            return CK;
        },
        calcNURBSDerivatives: function (p, U, P, u, nd) {
            var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);
            return this.calcRationalCurveDerivatives(Pders);
        },
        calcSurfacePoint: function (p, q, U, V, P, u, v, target) {
            var uspan = this.findSpan(p, u, U);
            var vspan = this.findSpan(q, v, V);
            var Nu = this.calcBasisFunctions(uspan, u, p, U);
            var Nv = this.calcBasisFunctions(vspan, v, q, V);
            var temp = [];
            for (var l = 0; l <= q; ++l) {
                temp[l] = new THREE.Vector4(0, 0, 0, 0);
                for (var k = 0; k <= p; ++k) {
                    var point = P[uspan - p + k][vspan - q + l].clone();
                    var w = point.w;
                    point.x *= w;
                    point.y *= w;
                    point.z *= w;
                    temp[l].add(point.multiplyScalar(Nu[k]));
                }
            }
            var Sw = new THREE.Vector4(0, 0, 0, 0);
            for (var l = 0; l <= q; ++l) {
                Sw.add(temp[l].multiplyScalar(Nv[l]));
            }
            Sw.divideScalar(Sw.w);
            target.set(Sw.x, Sw.y, Sw.z);
        }
    };
    
    return NURBSUtils;
});
define('skylark-threejs-ex/curves/NURBSCurve',[
    "skylark-threejs",
    './NURBSUtils'
], function (THREE, NURBSUtils) {
    'use strict';
    var NURBSCurve = function (degree, knots, controlPoints, startKnot, endKnot) {
        THREE.Curve.call(this);
        this.degree = degree;
        this.knots = knots;
        this.controlPoints = [];
        this.startKnot = startKnot || 0;
        this.endKnot = endKnot || this.knots.length - 1;
        for (var i = 0; i < controlPoints.length; ++i) {
            var point = controlPoints[i];
            this.controlPoints[i] = new THREE.Vector4(point.x, point.y, point.z, point.w);
        }
    };
    NURBSCurve.prototype = Object.create(THREE.Curve.prototype);
    NURBSCurve.prototype.constructor = NURBSCurve;
    NURBSCurve.prototype.getPoint = function (t) {
        var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);
        var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);
        if (hpoint.w != 1) {
            hpoint.divideScalar(hpoint.w);
        }
        return new THREE.Vector3(hpoint.x, hpoint.y, hpoint.z);
    };
    NURBSCurve.prototype.getTangent = function (t) {
        var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);
        var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);
        var tangent = ders[1].clone();
        tangent.normalize();
        return tangent;
    };
    
    return NURBSCurve;
});
define('skylark-threejs-ex/curves/NURBSSurface',[
    "skylark-threejs",
    './NURBSUtils'
], function (THREE, NURBSUtils) {
    'use strict';
    var NURBSSurface = function (degree1, degree2, knots1, knots2, controlPoints) {
        this.degree1 = degree1;
        this.degree2 = degree2;
        this.knots1 = knots1;
        this.knots2 = knots2;
        this.controlPoints = [];
        var len1 = knots1.length - degree1 - 1;
        var len2 = knots2.length - degree2 - 1;
        for (var i = 0; i < len1; ++i) {
            this.controlPoints[i] = [];
            for (var j = 0; j < len2; ++j) {
                var point = controlPoints[i][j];
                this.controlPoints[i][j] = new THREE.Vector4(point.x, point.y, point.z, point.w);
            }
        }
    };
    NURBSSurface.prototype = {
        constructor: NURBSSurface,
        getPoint: function (t1, t2, target) {
            var u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);
            var v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);
            NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);
        }
    };
    return NURBSSurface;
});
define('skylark-threejs-ex/objects/Lensflare',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var Lensflare = function () {
        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({
            opacity: 0,
            transparent: true
        }));
        this.type = 'Lensflare';
        this.frustumCulled = false;
        this.renderOrder = Infinity;
        var positionScreen = new THREE.Vector3();
        var positionView = new THREE.Vector3();
        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);
        tempMap.minFilter = THREE.NearestFilter;
        tempMap.magFilter = THREE.NearestFilter;
        tempMap.wrapS = THREE.ClampToEdgeWrapping;
        tempMap.wrapT = THREE.ClampToEdgeWrapping;
        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);
        occlusionMap.minFilter = THREE.NearestFilter;
        occlusionMap.magFilter = THREE.NearestFilter;
        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;
        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;
        var geometry = Lensflare.Geometry;
        var material1a = new THREE.RawShaderMaterial({
            uniforms: {
                'scale': { value: null },
                'screenPosition': { value: null }
            },
            vertexShader: [
                'precision highp float;',
                'uniform vec3 screenPosition;',
                'uniform vec2 scale;',
                'attribute vec3 position;',
                'void main() {',
                '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',
                '}'
            ].join('\n'),
            fragmentShader: [
                'precision highp float;',
                'void main() {',
                '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',
                '}'
            ].join('\n'),
            depthTest: true,
            depthWrite: false,
            transparent: false
        });
        var material1b = new THREE.RawShaderMaterial({
            uniforms: {
                'map': { value: tempMap },
                'scale': { value: null },
                'screenPosition': { value: null }
            },
            vertexShader: [
                'precision highp float;',
                'uniform vec3 screenPosition;',
                'uniform vec2 scale;',
                'attribute vec3 position;',
                'attribute vec2 uv;',
                'varying vec2 vUV;',
                'void main() {',
                '\tvUV = uv;',
                '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',
                '}'
            ].join('\n'),
            fragmentShader: [
                'precision highp float;',
                'uniform sampler2D map;',
                'varying vec2 vUV;',
                'void main() {',
                '\tgl_FragColor = texture2D( map, vUV );',
                '}'
            ].join('\n'),
            depthTest: false,
            depthWrite: false,
            transparent: false
        });
        var mesh1 = new THREE.Mesh(geometry, material1a);
        var elements = [];
        var shader = LensflareElement.Shader;
        var material2 = new THREE.RawShaderMaterial({
            uniforms: {
                'map': { value: null },
                'occlusionMap': { value: occlusionMap },
                'color': { value: new THREE.Color(16777215) },
                'scale': { value: new THREE.Vector2() },
                'screenPosition': { value: new THREE.Vector3() }
            },
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            blending: THREE.AdditiveBlending,
            transparent: true,
            depthWrite: false
        });
        var mesh2 = new THREE.Mesh(geometry, material2);
        this.addElement = function (element) {
            elements.push(element);
        };
        var scale = new THREE.Vector2();
        var screenPositionPixels = new THREE.Vector2();
        var validArea = new THREE.Box2();
        var viewport = new THREE.Vector4();
        this.onBeforeRender = function (renderer, scene, camera) {
            renderer.getCurrentViewport(viewport);
            var invAspect = viewport.w / viewport.z;
            var halfViewportWidth = viewport.z / 2;
            var halfViewportHeight = viewport.w / 2;
            var size = 16 / viewport.w;
            scale.set(size * invAspect, size);
            validArea.min.set(viewport.x, viewport.y);
            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));
            positionView.setFromMatrixPosition(this.matrixWorld);
            positionView.applyMatrix4(camera.matrixWorldInverse);
            if (positionView.z > 0)
                return;
            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);
            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;
            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;
            if (validArea.containsPoint(screenPositionPixels)) {
                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);
                var uniforms = material1a.uniforms;
                uniforms['scale'].value = scale;
                uniforms['screenPosition'].value = positionScreen;
                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);
                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);
                var uniforms = material1b.uniforms;
                uniforms['scale'].value = scale;
                uniforms['screenPosition'].value = positionScreen;
                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);
                var vecX = -positionScreen.x * 2;
                var vecY = -positionScreen.y * 2;
                for (var i = 0, l = elements.length; i < l; i++) {
                    var element = elements[i];
                    var uniforms = material2.uniforms;
                    uniforms['color'].value.copy(element.color);
                    uniforms['map'].value = element.texture;
                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;
                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;
                    var size = element.size / viewport.w;
                    var invAspect = viewport.w / viewport.z;
                    uniforms['scale'].value.set(size * invAspect, size);
                    material2.uniformsNeedUpdate = true;
                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);
                }
            }
        };
        this.dispose = function () {
            material1a.dispose();
            material1b.dispose();
            material2.dispose();
            tempMap.dispose();
            occlusionMap.dispose();
            for (var i = 0, l = elements.length; i < l; i++) {
                elements[i].texture.dispose();
            }
        };
    };
    Lensflare.prototype = Object.create(THREE.Mesh.prototype);
    Lensflare.prototype.constructor = Lensflare;
    Lensflare.prototype.isLensflare = true;
    return Lensflare;
});
define('skylark-threejs-ex/objects/Reflector',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var Reflector = function (geometry, options) {
        THREE.Mesh.call(this, geometry);
        this.type = 'Reflector';
        var scope = this;
        options = options || {};
        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);
        var textureWidth = options.textureWidth || 512;
        var textureHeight = options.textureHeight || 512;
        var clipBias = options.clipBias || 0;
        var shader = options.shader || Reflector.ReflectorShader;
        var recursion = options.recursion !== undefined ? options.recursion : 0;
        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;
        var reflectorPlane = new THREE.Plane();
        var normal = new THREE.Vector3();
        var reflectorWorldPosition = new THREE.Vector3();
        var cameraWorldPosition = new THREE.Vector3();
        var rotationMatrix = new THREE.Matrix4();
        var lookAtPosition = new THREE.Vector3(0, 0, -1);
        var clipPlane = new THREE.Vector4();
        var view = new THREE.Vector3();
        var target = new THREE.Vector3();
        var q = new THREE.Vector4();
        var textureMatrix = new THREE.Matrix4();
        var virtualCamera = new THREE.PerspectiveCamera();
        var parameters = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBFormat,
            stencilBuffer: false,
            encoding: encoding
        };
        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);
        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {
            renderTarget.texture.generateMipmaps = false;
        }
        var material = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.clone(shader.uniforms),
            fragmentShader: shader.fragmentShader,
            vertexShader: shader.vertexShader
        });
        material.uniforms['tDiffuse'].value = renderTarget.texture;
        material.uniforms['color'].value = color;
        material.uniforms['textureMatrix'].value = textureMatrix;
        this.material = material;
        this.onBeforeRender = function (renderer, scene, camera) {
            if ('recursion' in camera.userData) {
                if (camera.userData.recursion === recursion)
                    return;
                camera.userData.recursion++;
            }
            reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);
            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
            rotationMatrix.extractRotation(scope.matrixWorld);
            normal.set(0, 0, 1);
            normal.applyMatrix4(rotationMatrix);
            view.subVectors(reflectorWorldPosition, cameraWorldPosition);
            if (view.dot(normal) > 0)
                return;
            view.reflect(normal).negate();
            view.add(reflectorWorldPosition);
            rotationMatrix.extractRotation(camera.matrixWorld);
            lookAtPosition.set(0, 0, -1);
            lookAtPosition.applyMatrix4(rotationMatrix);
            lookAtPosition.add(cameraWorldPosition);
            target.subVectors(reflectorWorldPosition, lookAtPosition);
            target.reflect(normal).negate();
            target.add(reflectorWorldPosition);
            virtualCamera.position.copy(view);
            virtualCamera.up.set(0, 1, 0);
            virtualCamera.up.applyMatrix4(rotationMatrix);
            virtualCamera.up.reflect(normal);
            virtualCamera.lookAt(target);
            virtualCamera.far = camera.far;
            virtualCamera.updateMatrixWorld();
            virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
            virtualCamera.userData.recursion = 0;
            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            textureMatrix.multiply(virtualCamera.projectionMatrix);
            textureMatrix.multiply(virtualCamera.matrixWorldInverse);
            textureMatrix.multiply(scope.matrixWorld);
            reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
            reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
            clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
            var projectionMatrix = virtualCamera.projectionMatrix;
            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
            q.z = -1;
            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
            clipPlane.multiplyScalar(2 / clipPlane.dot(q));
            projectionMatrix.elements[2] = clipPlane.x;
            projectionMatrix.elements[6] = clipPlane.y;
            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;
            projectionMatrix.elements[14] = clipPlane.w;
            scope.visible = false;
            var currentRenderTarget = renderer.getRenderTarget();
            var currentXrEnabled = renderer.xr.enabled;
            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;
            renderer.xr.enabled = false;
            renderer.shadowMap.autoUpdate = false;
            renderer.setRenderTarget(renderTarget);
            if (renderer.autoClear === false)
                renderer.clear();
            renderer.render(scene, virtualCamera);
            renderer.xr.enabled = currentXrEnabled;
            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;
            renderer.setRenderTarget(currentRenderTarget);
            var viewport = camera.viewport;
            if (viewport !== undefined) {
                renderer.state.viewport(viewport);
            }
            scope.visible = true;
        };
        this.getRenderTarget = function () {
            return renderTarget;
        };
    };
    Reflector.prototype = Object.create(THREE.Mesh.prototype);
    Reflector.prototype.constructor = Reflector;
    Reflector.ReflectorShader = {
        uniforms: {
            'color': { value: null },
            'tDiffuse': { value: null },
            'textureMatrix': { value: null }
        },
        vertexShader: [
            'uniform mat4 textureMatrix;',
            'varying vec4 vUv;',
            'void main() {',
            '\tvUv = textureMatrix * vec4( position, 1.0 );',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec3 color;',
            'uniform sampler2D tDiffuse;',
            'varying vec4 vUv;',
            'float blendOverlay( float base, float blend ) {',
            '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',
            '}',
            'vec3 blendOverlay( vec3 base, vec3 blend ) {',
            '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',
            '}',
            'void main() {',
            '\tvec4 base = texture2DProj( tDiffuse, vUv );',
            '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',
            '}'
        ].join('\n')
    };

    return Reflector;
});
define('skylark-threejs-ex/objects/Refractor',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var Refractor = function (geometry, options) {
        THREE.Mesh.call(this, geometry);
        this.type = 'Refractor';
        var scope = this;
        options = options || {};
        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);
        var textureWidth = options.textureWidth || 512;
        var textureHeight = options.textureHeight || 512;
        var clipBias = options.clipBias || 0;
        var shader = options.shader || Refractor.RefractorShader;
        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;
        var virtualCamera = new THREE.PerspectiveCamera();
        virtualCamera.matrixAutoUpdate = false;
        virtualCamera.userData.refractor = true;
        var refractorPlane = new THREE.Plane();
        var textureMatrix = new THREE.Matrix4();
        var parameters = {
            minFilter: THREE.LinearFilter,
            magFilter: THREE.LinearFilter,
            format: THREE.RGBFormat,
            stencilBuffer: false,
            encoding: encoding
        };
        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);
        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {
            renderTarget.texture.generateMipmaps = false;
        }
        this.material = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.clone(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            transparent: true
        });
        this.material.uniforms['color'].value = color;
        this.material.uniforms['tDiffuse'].value = renderTarget.texture;
        this.material.uniforms['textureMatrix'].value = textureMatrix;
        var visible = function () {
            var refractorWorldPosition = new THREE.Vector3();
            var cameraWorldPosition = new THREE.Vector3();
            var rotationMatrix = new THREE.Matrix4();
            var view = new THREE.Vector3();
            var normal = new THREE.Vector3();
            return function visible(camera) {
                refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);
                cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
                view.subVectors(refractorWorldPosition, cameraWorldPosition);
                rotationMatrix.extractRotation(scope.matrixWorld);
                normal.set(0, 0, 1);
                normal.applyMatrix4(rotationMatrix);
                return view.dot(normal) < 0;
            };
        }();
        var updateRefractorPlane = function () {
            var normal = new THREE.Vector3();
            var position = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            var scale = new THREE.Vector3();
            return function updateRefractorPlane() {
                scope.matrixWorld.decompose(position, quaternion, scale);
                normal.set(0, 0, 1).applyQuaternion(quaternion).normalize();
                normal.negate();
                refractorPlane.setFromNormalAndCoplanarPoint(normal, position);
            };
        }();
        var updateVirtualCamera = function () {
            var clipPlane = new THREE.Plane();
            var clipVector = new THREE.Vector4();
            var q = new THREE.Vector4();
            return function updateVirtualCamera(camera) {
                virtualCamera.matrixWorld.copy(camera.matrixWorld);
                virtualCamera.matrixWorldInverse.getInverse(virtualCamera.matrixWorld);
                virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
                virtualCamera.far = camera.far;
                clipPlane.copy(refractorPlane);
                clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
                clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);
                var projectionMatrix = virtualCamera.projectionMatrix;
                q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
                q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
                q.z = -1;
                q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
                clipVector.multiplyScalar(2 / clipVector.dot(q));
                projectionMatrix.elements[2] = clipVector.x;
                projectionMatrix.elements[6] = clipVector.y;
                projectionMatrix.elements[10] = clipVector.z + 1 - clipBias;
                projectionMatrix.elements[14] = clipVector.w;
            };
        }();
        function updateTextureMatrix(camera) {
            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            textureMatrix.multiply(camera.projectionMatrix);
            textureMatrix.multiply(camera.matrixWorldInverse);
            textureMatrix.multiply(scope.matrixWorld);
        }
        function render(renderer, scene, camera) {
            scope.visible = false;
            var currentRenderTarget = renderer.getRenderTarget();
            var currentXrEnabled = renderer.xr.enabled;
            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;
            renderer.xr.enabled = false;
            renderer.shadowMap.autoUpdate = false;
            renderer.setRenderTarget(renderTarget);
            if (renderer.autoClear === false)
                renderer.clear();
            renderer.render(scene, virtualCamera);
            renderer.xr.enabled = currentXrEnabled;
            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;
            renderer.setRenderTarget(currentRenderTarget);
            var viewport = camera.viewport;
            if (viewport !== undefined) {
                renderer.state.viewport(viewport);
            }
            scope.visible = true;
        }
        this.onBeforeRender = function (renderer, scene, camera) {
            if (camera.userData.refractor === true)
                return;
            if (!visible(camera) === true)
                return;
            updateRefractorPlane();
            updateTextureMatrix(camera);
            updateVirtualCamera(camera);
            render(renderer, scene, camera);
        };
        this.getRenderTarget = function () {
            return renderTarget;
        };
    };
    Refractor.prototype = Object.create(THREE.Mesh.prototype);
    Refractor.prototype.constructor = Refractor;
    Refractor.RefractorShader = {
        uniforms: {
            'color': { value: null },
            'tDiffuse': { value: null },
            'textureMatrix': { value: null }
        },
        vertexShader: [
            'uniform mat4 textureMatrix;',
            'varying vec4 vUv;',
            'void main() {',
            '\tvUv = textureMatrix * vec4( position, 1.0 );',
            '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
            '}'
        ].join('\n'),
        fragmentShader: [
            'uniform vec3 color;',
            'uniform sampler2D tDiffuse;',
            'varying vec4 vUv;',
            'float blendOverlay( float base, float blend ) {',
            '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',
            '}',
            'vec3 blendOverlay( vec3 base, vec3 blend ) {',
            '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',
            '}',
            'void main() {',
            '\tvec4 base = texture2DProj( tDiffuse, vUv );',
            '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',
            '}'
        ].join('\n')
    };
    return Refractor;
});
define('skylark-threejs-ex/loaders/TTFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var TTFLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.reversed = false;
    };
    TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: TTFLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (buffer) {
                onLoad(scope.parse(buffer));
            }, onProgress, onError);
        },
        parse: function (arraybuffer) {
            function convert(font, reversed) {
                var round = Math.round;
                var glyphs = {};
                var scale = 100000 / ((font.unitsPerEm || 2048) * 72);
                var glyphIndexMap = font.encoding.cmap.glyphIndexMap;
                var unicodes = Object.keys(glyphIndexMap);
                for (var i = 0; i < unicodes.length; i++) {
                    var unicode = unicodes[i];
                    var glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];
                    if (unicode !== undefined) {
                        var token = {
                            ha: round(glyph.advanceWidth * scale),
                            x_min: round(glyph.xMin * scale),
                            x_max: round(glyph.xMax * scale),
                            o: ''
                        };
                        if (reversed) {
                            glyph.path.commands = reverseCommands(glyph.path.commands);
                        }
                        glyph.path.commands.forEach(function (command) {
                            if (command.type.toLowerCase() === 'c') {
                                command.type = 'b';
                            }
                            token.o += command.type.toLowerCase() + ' ';
                            if (command.x !== undefined && command.y !== undefined) {
                                token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';
                            }
                            if (command.x1 !== undefined && command.y1 !== undefined) {
                                token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';
                            }
                            if (command.x2 !== undefined && command.y2 !== undefined) {
                                token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';
                            }
                        });
                        glyphs[String.fromCodePoint(glyph.unicode)] = token;
                    }
                }
                return {
                    glyphs: glyphs,
                    familyName: font.getEnglishName('fullName'),
                    ascender: round(font.ascender * scale),
                    descender: round(font.descender * scale),
                    underlinePosition: font.tables.post.underlinePosition,
                    underlineThickness: font.tables.post.underlineThickness,
                    boundingBox: {
                        xMin: font.tables.head.xMin,
                        xMax: font.tables.head.xMax,
                        yMin: font.tables.head.yMin,
                        yMax: font.tables.head.yMax
                    },
                    resolution: 1000,
                    original_font_information: font.tables.name
                };
            }
            function reverseCommands(commands) {
                var paths = [];
                var path;
                commands.forEach(function (c) {
                    if (c.type.toLowerCase() === 'm') {
                        path = [c];
                        paths.push(path);
                    } else if (c.type.toLowerCase() !== 'z') {
                        path.push(c);
                    }
                });
                var reversed = [];
                paths.forEach(function (p) {
                    var result = {
                        type: 'm',
                        x: p[p.length - 1].x,
                        y: p[p.length - 1].y
                    };
                    reversed.push(result);
                    for (var i = p.length - 1; i > 0; i--) {
                        var command = p[i];
                        var result = { type: command.type };
                        if (command.x2 !== undefined && command.y2 !== undefined) {
                            result.x1 = command.x2;
                            result.y1 = command.y2;
                            result.x2 = command.x1;
                            result.y2 = command.y1;
                        } else if (command.x1 !== undefined && command.y1 !== undefined) {
                            result.x1 = command.x1;
                            result.y1 = command.y1;
                        }
                        result.x = p[i - 1].x;
                        result.y = p[i - 1].y;
                        reversed.push(result);
                    }
                });
                return reversed;
            }
            if (typeof opentype === 'undefined') {
                console.warn("THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader.");
                return null;
            }
            return convert(opentype.parse(arraybuffer), this.reversed);
        }
    });
    return TTFLoader;
});
define('skylark-threejs-ex/loaders/3MFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var ThreeMFLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.availableExtensions = [];
    };
    ThreeMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: ThreeMFLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (buffer) {
                onLoad(scope.parse(buffer));
            }, onProgress, onError);
        },
        parse: function (data) {
            var scope = this;
            var textureLoader = new THREE.TextureLoader(this.manager);
            function loadDocument(data) {
                var zip = null;
                var file = null;
                var relsName;
                var modelRelsName;
                var modelPartNames = [];
                var printTicketPartNames = [];
                var texturesPartNames = [];
                var otherPartNames = [];
                var rels;
                var modelRels;
                var modelParts = {};
                var printTicketParts = {};
                var texturesParts = {};
                var otherParts = {};
                try {
                    zip = new JSZip(data);
                } catch (e) {
                    if (e instanceof ReferenceError) {
                        console.error('THREE.3MFLoader: jszip missing and file is compressed.');
                        return null;
                    }
                }
                for (file in zip.files) {
                    if (file.match(/\_rels\/.rels$/)) {
                        relsName = file;
                    } else if (file.match(/3D\/_rels\/.*\.model\.rels$/)) {
                        modelRelsName = file;
                    } else if (file.match(/^3D\/.*\.model$/)) {
                        modelPartNames.push(file);
                    } else if (file.match(/^3D\/Metadata\/.*\.xml$/)) {
                        printTicketPartNames.push(file);
                    } else if (file.match(/^3D\/Textures?\/.*/)) {
                        texturesPartNames.push(file);
                    } else if (file.match(/^3D\/Other\/.*/)) {
                        otherPartNames.push(file);
                    }
                }
                var relsView = new Uint8Array(zip.file(relsName).asArrayBuffer());
                var relsFileText = THREE.LoaderUtils.decodeText(relsView);
                rels = parseRelsXml(relsFileText);
                if (modelRelsName) {
                    var relsView = new Uint8Array(zip.file(modelRelsName).asArrayBuffer());
                    var relsFileText = THREE.LoaderUtils.decodeText(relsView);
                    modelRels = parseRelsXml(relsFileText);
                }
                for (var i = 0; i < modelPartNames.length; i++) {
                    var modelPart = modelPartNames[i];
                    var view = new Uint8Array(zip.file(modelPart).asArrayBuffer());
                    var fileText = THREE.LoaderUtils.decodeText(view);
                    var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');
                    if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {
                        console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);
                    }
                    var modelNode = xmlData.querySelector('model');
                    var extensions = {};
                    for (var i = 0; i < modelNode.attributes.length; i++) {
                        var attr = modelNode.attributes[i];
                        if (attr.name.match(/^xmlns:(.+)$/)) {
                            extensions[attr.value] = RegExp.$1;
                        }
                    }
                    var modelData = parseModelNode(modelNode);
                    modelData['xml'] = modelNode;
                    if (0 < Object.keys(extensions).length) {
                        modelData['extensions'] = extensions;
                    }
                    modelParts[modelPart] = modelData;
                }
                for (var i = 0; i < texturesPartNames.length; i++) {
                    var texturesPartName = texturesPartNames[i];
                    texturesParts[texturesPartName] = zip.file(texturesPartName).asArrayBuffer();
                }
                return {
                    rels: rels,
                    modelRels: modelRels,
                    model: modelParts,
                    printTicket: printTicketParts,
                    texture: texturesParts,
                    other: otherParts
                };
            }
            function parseRelsXml(relsFileText) {
                var relationships = [];
                var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');
                var relsNodes = relsXmlData.querySelectorAll('Relationship');
                for (var i = 0; i < relsNodes.length; i++) {
                    var relsNode = relsNodes[i];
                    var relationship = {
                        target: relsNode.getAttribute('Target'),
                        id: relsNode.getAttribute('Id'),
                        type: relsNode.getAttribute('Type')
                    };
                    relationships.push(relationship);
                }
                return relationships;
            }
            function parseMetadataNodes(metadataNodes) {
                var metadataData = {};
                for (var i = 0; i < metadataNodes.length; i++) {
                    var metadataNode = metadataNodes[i];
                    var name = metadataNode.getAttribute('name');
                    var validNames = [
                        'Title',
                        'Designer',
                        'Description',
                        'Copyright',
                        'LicenseTerms',
                        'Rating',
                        'CreationDate',
                        'ModificationDate'
                    ];
                    if (0 <= validNames.indexOf(name)) {
                        metadataData[name] = metadataNode.textContent;
                    }
                }
                return metadataData;
            }
            function parseBasematerialsNode(basematerialsNode) {
                var basematerialsData = {
                    id: basematerialsNode.getAttribute('id'),
                    basematerials: []
                };
                var basematerialNodes = basematerialsNode.querySelectorAll('base');
                for (var i = 0; i < basematerialNodes.length; i++) {
                    var basematerialNode = basematerialNodes[i];
                    var basematerialData = parseBasematerialNode(basematerialNode);
                    basematerialData.index = i;
                    basematerialsData.basematerials.push(basematerialData);
                }
                return basematerialsData;
            }
            function parseTexture2DNode(texture2DNode) {
                var texture2dData = {
                    id: texture2DNode.getAttribute('id'),
                    path: texture2DNode.getAttribute('path'),
                    contenttype: texture2DNode.getAttribute('contenttype'),
                    tilestyleu: texture2DNode.getAttribute('tilestyleu'),
                    tilestylev: texture2DNode.getAttribute('tilestylev'),
                    filter: texture2DNode.getAttribute('filter')
                };
                return texture2dData;
            }
            function parseTextures2DGroupNode(texture2DGroupNode) {
                var texture2DGroupData = {
                    id: texture2DGroupNode.getAttribute('id'),
                    texid: texture2DGroupNode.getAttribute('texid'),
                    displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')
                };
                var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');
                var uvs = [];
                for (var i = 0; i < tex2coordNodes.length; i++) {
                    var tex2coordNode = tex2coordNodes[i];
                    var u = tex2coordNode.getAttribute('u');
                    var v = tex2coordNode.getAttribute('v');
                    uvs.push(parseFloat(u), parseFloat(v));
                }
                texture2DGroupData['uvs'] = new Float32Array(uvs);
                return texture2DGroupData;
            }
            function parseColorGroupNode(colorGroupNode) {
                var colorGroupData = {
                    id: colorGroupNode.getAttribute('id'),
                    displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')
                };
                var colorNodes = colorGroupNode.querySelectorAll('color');
                var colors = [];
                var colorObject = new THREE.Color();
                for (var i = 0; i < colorNodes.length; i++) {
                    var colorNode = colorNodes[i];
                    var color = colorNode.getAttribute('color');
                    colorObject.setStyle(color.substring(0, 7));
                    colorObject.convertSRGBToLinear();
                    colors.push(colorObject.r, colorObject.g, colorObject.b);
                }
                colorGroupData['colors'] = new Float32Array(colors);
                return colorGroupData;
            }
            function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {
                var metallicDisplaypropertiesData = { id: metallicDisplaypropetiesNode.getAttribute('id') };
                var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');
                var metallicData = [];
                for (var i = 0; i < metallicNodes.length; i++) {
                    var metallicNode = metallicNodes[i];
                    metallicData.push({
                        name: metallicNode.getAttribute('name'),
                        metallicness: parseFloat(metallicNode.getAttribute('metallicness')),
                        roughness: parseFloat(metallicNode.getAttribute('roughness'))
                    });
                }
                metallicDisplaypropertiesData.data = metallicData;
                return metallicDisplaypropertiesData;
            }
            function parseBasematerialNode(basematerialNode) {
                var basematerialData = {};
                basematerialData['name'] = basematerialNode.getAttribute('name');
                basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor');
                basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');
                return basematerialData;
            }
            function parseMeshNode(meshNode) {
                var meshData = {};
                var vertices = [];
                var vertexNodes = meshNode.querySelectorAll('vertices vertex');
                for (var i = 0; i < vertexNodes.length; i++) {
                    var vertexNode = vertexNodes[i];
                    var x = vertexNode.getAttribute('x');
                    var y = vertexNode.getAttribute('y');
                    var z = vertexNode.getAttribute('z');
                    vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));
                }
                meshData['vertices'] = new Float32Array(vertices);
                var triangleProperties = [];
                var triangles = [];
                var triangleNodes = meshNode.querySelectorAll('triangles triangle');
                for (var i = 0; i < triangleNodes.length; i++) {
                    var triangleNode = triangleNodes[i];
                    var v1 = triangleNode.getAttribute('v1');
                    var v2 = triangleNode.getAttribute('v2');
                    var v3 = triangleNode.getAttribute('v3');
                    var p1 = triangleNode.getAttribute('p1');
                    var p2 = triangleNode.getAttribute('p2');
                    var p3 = triangleNode.getAttribute('p3');
                    var pid = triangleNode.getAttribute('pid');
                    var triangleProperty = {};
                    triangleProperty['v1'] = parseInt(v1, 10);
                    triangleProperty['v2'] = parseInt(v2, 10);
                    triangleProperty['v3'] = parseInt(v3, 10);
                    triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);
                    if (p1) {
                        triangleProperty['p1'] = parseInt(p1, 10);
                    }
                    if (p2) {
                        triangleProperty['p2'] = parseInt(p2, 10);
                    }
                    if (p3) {
                        triangleProperty['p3'] = parseInt(p3, 10);
                    }
                    if (pid) {
                        triangleProperty['pid'] = pid;
                    }
                    if (0 < Object.keys(triangleProperty).length) {
                        triangleProperties.push(triangleProperty);
                    }
                }
                meshData['triangleProperties'] = triangleProperties;
                meshData['triangles'] = new Uint32Array(triangles);
                return meshData;
            }
            function parseComponentsNode(componentsNode) {
                var components = [];
                var componentNodes = componentsNode.querySelectorAll('component');
                for (var i = 0; i < componentNodes.length; i++) {
                    var componentNode = componentNodes[i];
                    var componentData = parseComponentNode(componentNode);
                    components.push(componentData);
                }
                return components;
            }
            function parseComponentNode(componentNode) {
                var componentData = {};
                componentData['objectId'] = componentNode.getAttribute('objectid');
                var transform = componentNode.getAttribute('transform');
                if (transform) {
                    componentData['transform'] = parseTransform(transform);
                }
                return componentData;
            }
            function parseTransform(transform) {
                var t = [];
                transform.split(' ').forEach(function (s) {
                    t.push(parseFloat(s));
                });
                var matrix = new THREE.Matrix4();
                matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);
                return matrix;
            }
            function parseObjectNode(objectNode) {
                var objectData = { type: objectNode.getAttribute('type') };
                var id = objectNode.getAttribute('id');
                if (id) {
                    objectData['id'] = id;
                }
                var pid = objectNode.getAttribute('pid');
                if (pid) {
                    objectData['pid'] = pid;
                }
                var pindex = objectNode.getAttribute('pindex');
                if (pindex) {
                    objectData['pindex'] = pindex;
                }
                var thumbnail = objectNode.getAttribute('thumbnail');
                if (thumbnail) {
                    objectData['thumbnail'] = thumbnail;
                }
                var partnumber = objectNode.getAttribute('partnumber');
                if (partnumber) {
                    objectData['partnumber'] = partnumber;
                }
                var name = objectNode.getAttribute('name');
                if (name) {
                    objectData['name'] = name;
                }
                var meshNode = objectNode.querySelector('mesh');
                if (meshNode) {
                    objectData['mesh'] = parseMeshNode(meshNode);
                }
                var componentsNode = objectNode.querySelector('components');
                if (componentsNode) {
                    objectData['components'] = parseComponentsNode(componentsNode);
                }
                return objectData;
            }
            function parseResourcesNode(resourcesNode) {
                var resourcesData = {};
                resourcesData['basematerials'] = {};
                var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');
                for (var i = 0; i < basematerialsNodes.length; i++) {
                    var basematerialsNode = basematerialsNodes[i];
                    var basematerialsData = parseBasematerialsNode(basematerialsNode);
                    resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;
                }
                resourcesData['texture2d'] = {};
                var textures2DNodes = resourcesNode.querySelectorAll('texture2d');
                for (var i = 0; i < textures2DNodes.length; i++) {
                    var textures2DNode = textures2DNodes[i];
                    var texture2DData = parseTexture2DNode(textures2DNode);
                    resourcesData['texture2d'][texture2DData['id']] = texture2DData;
                }
                resourcesData['colorgroup'] = {};
                var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');
                for (var i = 0; i < colorGroupNodes.length; i++) {
                    var colorGroupNode = colorGroupNodes[i];
                    var colorGroupData = parseColorGroupNode(colorGroupNode);
                    resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;
                }
                resourcesData['pbmetallicdisplayproperties'] = {};
                var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');
                for (var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {
                    var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];
                    var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);
                    resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;
                }
                resourcesData['texture2dgroup'] = {};
                var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');
                for (var i = 0; i < textures2DGroupNodes.length; i++) {
                    var textures2DGroupNode = textures2DGroupNodes[i];
                    var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);
                    resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;
                }
                resourcesData['object'] = {};
                var objectNodes = resourcesNode.querySelectorAll('object');
                for (var i = 0; i < objectNodes.length; i++) {
                    var objectNode = objectNodes[i];
                    var objectData = parseObjectNode(objectNode);
                    resourcesData['object'][objectData['id']] = objectData;
                }
                return resourcesData;
            }
            function parseBuildNode(buildNode) {
                var buildData = [];
                var itemNodes = buildNode.querySelectorAll('item');
                for (var i = 0; i < itemNodes.length; i++) {
                    var itemNode = itemNodes[i];
                    var buildItem = { objectId: itemNode.getAttribute('objectid') };
                    var transform = itemNode.getAttribute('transform');
                    if (transform) {
                        buildItem['transform'] = parseTransform(transform);
                    }
                    buildData.push(buildItem);
                }
                return buildData;
            }
            function parseModelNode(modelNode) {
                var modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' };
                var metadataNodes = modelNode.querySelectorAll('metadata');
                if (metadataNodes) {
                    modelData['metadata'] = parseMetadataNodes(metadataNodes);
                }
                var resourcesNode = modelNode.querySelector('resources');
                if (resourcesNode) {
                    modelData['resources'] = parseResourcesNode(resourcesNode);
                }
                var buildNode = modelNode.querySelector('build');
                if (buildNode) {
                    modelData['build'] = parseBuildNode(buildNode);
                }
                return modelData;
            }
            function buildTexture(texture2dgroup, objects, modelData, textureData) {
                var texid = texture2dgroup.texid;
                var texture2ds = modelData.resources.texture2d;
                var texture2d = texture2ds[texid];
                if (texture2d) {
                    var data = textureData[texture2d.path];
                    var type = texture2d.contenttype;
                    var blob = new Blob([data], { type: type });
                    var sourceURI = URL.createObjectURL(blob);
                    var texture = textureLoader.load(sourceURI, function () {
                        URL.revokeObjectURL(sourceURI);
                    });
                    texture.encoding = THREE.sRGBEncoding;
                    switch (texture2d.tilestyleu) {
                    case 'wrap':
                        texture.wrapS = THREE.RepeatWrapping;
                        break;
                    case 'mirror':
                        texture.wrapS = THREE.MirroredRepeatWrapping;
                        break;
                    case 'none':
                    case 'clamp':
                        texture.wrapS = THREE.ClampToEdgeWrapping;
                        break;
                    default:
                        texture.wrapS = THREE.RepeatWrapping;
                    }
                    switch (texture2d.tilestylev) {
                    case 'wrap':
                        texture.wrapT = THREE.RepeatWrapping;
                        break;
                    case 'mirror':
                        texture.wrapT = THREE.MirroredRepeatWrapping;
                        break;
                    case 'none':
                    case 'clamp':
                        texture.wrapT = THREE.ClampToEdgeWrapping;
                        break;
                    default:
                        texture.wrapT = THREE.RepeatWrapping;
                    }
                    switch (texture2d.filter) {
                    case 'auto':
                        texture.magFilter = THREE.LinearFilter;
                        texture.minFilter = THREE.LinearMipmapLinearFilter;
                        break;
                    case 'linear':
                        texture.magFilter = THREE.LinearFilter;
                        texture.minFilter = THREE.LinearFilter;
                        break;
                    case 'nearest':
                        texture.magFilter = THREE.NearestFilter;
                        texture.minFilter = THREE.NearestFilter;
                        break;
                    default:
                        texture.magFilter = THREE.LinearFilter;
                        texture.minFilter = THREE.LinearMipmapLinearFilter;
                    }
                    return texture;
                } else {
                    return null;
                }
            }
            function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {
                var objectPindex = objectData.pindex;
                var materialMap = {};
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;
                    if (materialMap[pindex] === undefined)
                        materialMap[pindex] = [];
                    materialMap[pindex].push(triangleProperty);
                }
                var keys = Object.keys(materialMap);
                var meshes = [];
                for (var i = 0, l = keys.length; i < l; i++) {
                    var materialIndex = keys[i];
                    var trianglePropertiesProps = materialMap[materialIndex];
                    var basematerialData = basematerials.basematerials[materialIndex];
                    var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);
                    var geometry = new THREE.BufferGeometry();
                    var positionData = [];
                    var vertices = meshData.vertices;
                    for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {
                        var triangleProperty = trianglePropertiesProps[j];
                        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);
                        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);
                        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);
                        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);
                        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);
                        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);
                        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);
                        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);
                        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);
                    }
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));
                    var mesh = new THREE.Mesh(geometry, material);
                    meshes.push(mesh);
                }
                return meshes;
            }
            function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {
                var geometry = new THREE.BufferGeometry();
                var positionData = [];
                var uvData = [];
                var vertices = meshData.vertices;
                var uvs = texture2dgroup.uvs;
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    positionData.push(vertices[triangleProperty.v1 * 3 + 0]);
                    positionData.push(vertices[triangleProperty.v1 * 3 + 1]);
                    positionData.push(vertices[triangleProperty.v1 * 3 + 2]);
                    positionData.push(vertices[triangleProperty.v2 * 3 + 0]);
                    positionData.push(vertices[triangleProperty.v2 * 3 + 1]);
                    positionData.push(vertices[triangleProperty.v2 * 3 + 2]);
                    positionData.push(vertices[triangleProperty.v3 * 3 + 0]);
                    positionData.push(vertices[triangleProperty.v3 * 3 + 1]);
                    positionData.push(vertices[triangleProperty.v3 * 3 + 2]);
                    uvData.push(uvs[triangleProperty.p1 * 2 + 0]);
                    uvData.push(uvs[triangleProperty.p1 * 2 + 1]);
                    uvData.push(uvs[triangleProperty.p2 * 2 + 0]);
                    uvData.push(uvs[triangleProperty.p2 * 2 + 1]);
                    uvData.push(uvs[triangleProperty.p3 * 2 + 0]);
                    uvData.push(uvs[triangleProperty.p3 * 2 + 1]);
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));
                geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvData, 2));
                var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);
                var material = new THREE.MeshPhongMaterial({
                    map: texture,
                    flatShading: true
                });
                var mesh = new THREE.Mesh(geometry, material);
                return mesh;
            }
            function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData) {
                var geometry = new THREE.BufferGeometry();
                var positionData = [];
                var colorData = [];
                var vertices = meshData.vertices;
                var colors = colorgroup.colors;
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    var v1 = triangleProperty.v1;
                    var v2 = triangleProperty.v2;
                    var v3 = triangleProperty.v3;
                    positionData.push(vertices[v1 * 3 + 0]);
                    positionData.push(vertices[v1 * 3 + 1]);
                    positionData.push(vertices[v1 * 3 + 2]);
                    positionData.push(vertices[v2 * 3 + 0]);
                    positionData.push(vertices[v2 * 3 + 1]);
                    positionData.push(vertices[v2 * 3 + 2]);
                    positionData.push(vertices[v3 * 3 + 0]);
                    positionData.push(vertices[v3 * 3 + 1]);
                    positionData.push(vertices[v3 * 3 + 2]);
                    var p1 = triangleProperty.p1;
                    var p2 = triangleProperty.p2;
                    var p3 = triangleProperty.p3;
                    colorData.push(colors[p1 * 3 + 0]);
                    colorData.push(colors[p1 * 3 + 1]);
                    colorData.push(colors[p1 * 3 + 2]);
                    colorData.push(colors[(p2 || p1) * 3 + 0]);
                    colorData.push(colors[(p2 || p1) * 3 + 1]);
                    colorData.push(colors[(p2 || p1) * 3 + 2]);
                    colorData.push(colors[(p3 || p1) * 3 + 0]);
                    colorData.push(colors[(p3 || p1) * 3 + 1]);
                    colorData.push(colors[(p3 || p1) * 3 + 2]);
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));
                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorData, 3));
                var material = new THREE.MeshPhongMaterial({
                    vertexColors: true,
                    flatShading: true
                });
                var mesh = new THREE.Mesh(geometry, material);
                return mesh;
            }
            function buildDefaultMesh(meshData) {
                var geometry = new THREE.BufferGeometry();
                geometry.setIndex(new THREE.BufferAttribute(meshData['triangles'], 1));
                geometry.setAttribute('position', new THREE.BufferAttribute(meshData['vertices'], 3));
                var material = new THREE.MeshPhongMaterial({
                    color: 11184895,
                    flatShading: true
                });
                var mesh = new THREE.Mesh(geometry, material);
                return mesh;
            }
            function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {
                var keys = Object.keys(resourceMap);
                var meshes = [];
                for (var i = 0, il = keys.length; i < il; i++) {
                    var resourceId = keys[i];
                    var triangleProperties = resourceMap[resourceId];
                    var resourceType = getResourceType(resourceId, modelData);
                    switch (resourceType) {
                    case 'material':
                        var basematerials = modelData.resources.basematerials[resourceId];
                        var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);
                        for (var j = 0, jl = newMeshes.length; j < jl; j++) {
                            meshes.push(newMeshes[j]);
                        }
                        break;
                    case 'texture':
                        var texture2dgroup = modelData.resources.texture2dgroup[resourceId];
                        meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));
                        break;
                    case 'vertexColors':
                        var colorgroup = modelData.resources.colorgroup[resourceId];
                        meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData));
                        break;
                    case 'default':
                        meshes.push(buildDefaultMesh(meshData));
                        break;
                    default:
                        console.error('THREE.3MFLoader: Unsupported resource type.');
                    }
                }
                return meshes;
            }
            function getResourceType(pid, modelData) {
                if (modelData.resources.texture2dgroup[pid] !== undefined) {
                    return 'texture';
                } else if (modelData.resources.basematerials[pid] !== undefined) {
                    return 'material';
                } else if (modelData.resources.colorgroup[pid] !== undefined) {
                    return 'vertexColors';
                } else if (pid === 'default') {
                    return 'default';
                } else {
                    return undefined;
                }
            }
            function analyzeObject(modelData, meshData, objectData) {
                var resourceMap = {};
                var triangleProperties = meshData['triangleProperties'];
                var objectPid = objectData.pid;
                for (var i = 0, l = triangleProperties.length; i < l; i++) {
                    var triangleProperty = triangleProperties[i];
                    var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;
                    if (pid === undefined)
                        pid = 'default';
                    if (resourceMap[pid] === undefined)
                        resourceMap[pid] = [];
                    resourceMap[pid].push(triangleProperty);
                }
                return resourceMap;
            }
            function buildGroup(meshData, objects, modelData, textureData, objectData) {
                var group = new THREE.Group();
                var resourceMap = analyzeObject(modelData, meshData, objectData);
                var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);
                for (var i = 0, l = meshes.length; i < l; i++) {
                    group.add(meshes[i]);
                }
                return group;
            }
            function applyExtensions(extensions, meshData, modelXml) {
                if (!extensions) {
                    return;
                }
                var availableExtensions = [];
                var keys = Object.keys(extensions);
                for (var i = 0; i < keys.length; i++) {
                    var ns = keys[i];
                    for (var j = 0; j < scope.availableExtensions.length; j++) {
                        var extension = scope.availableExtensions[j];
                        if (extension.ns === ns) {
                            availableExtensions.push(extension);
                        }
                    }
                }
                for (var i = 0; i < availableExtensions.length; i++) {
                    var extension = availableExtensions[i];
                    extension.apply(modelXml, extensions[extension['ns']], meshData);
                }
            }
            function getBuild(data, objects, modelData, textureData, objectData, builder) {
                if (data.build !== undefined)
                    return data.build;
                data.build = builder(data, objects, modelData, textureData, objectData);
                return data.build;
            }
            function buildBasematerial(materialData, objects, modelData) {
                var material;
                var displaypropertiesid = materialData.displaypropertiesid;
                var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;
                if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {
                    var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];
                    var metallicData = pbmetallicdisplayproperty.data[materialData.index];
                    material = new THREE.MeshStandardMaterial({
                        flatShading: true,
                        roughness: metallicData.roughness,
                        metalness: metallicData.metallicness
                    });
                } else {
                    material = new THREE.MeshPhongMaterial({ flatShading: true });
                }
                material.name = materialData.name;
                var displaycolor = materialData.displaycolor;
                var color = displaycolor.substring(0, 7);
                material.color.setStyle(color);
                material.color.convertSRGBToLinear();
                if (displaycolor.length === 9) {
                    material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;
                }
                return material;
            }
            function buildComposite(compositeData, objects, modelData, textureData) {
                var composite = new THREE.Group();
                for (var j = 0; j < compositeData.length; j++) {
                    var component = compositeData[j];
                    var build = objects[component.objectId];
                    if (build === undefined) {
                        buildObject(component.objectId, objects, modelData, textureData);
                        build = objects[component.objectId];
                    }
                    var object3D = build.clone();
                    var transform = component.transform;
                    if (transform) {
                        object3D.applyMatrix4(transform);
                    }
                    composite.add(object3D);
                }
                return composite;
            }
            function buildObject(objectId, objects, modelData, textureData) {
                var objectData = modelData['resources']['object'][objectId];
                if (objectData['mesh']) {
                    var meshData = objectData['mesh'];
                    var extensions = modelData['extensions'];
                    var modelXml = modelData['xml'];
                    applyExtensions(extensions, meshData, modelXml);
                    objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);
                } else {
                    var compositeData = objectData['components'];
                    objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);
                }
            }
            function buildObjects(data3mf) {
                var modelsData = data3mf.model;
                var modelRels = data3mf.modelRels;
                var objects = {};
                var modelsKeys = Object.keys(modelsData);
                var textureData = {};
                if (modelRels) {
                    for (var i = 0, l = modelRels.length; i < l; i++) {
                        var modelRel = modelRels[i];
                        var textureKey = modelRel.target.substring(1);
                        if (data3mf.texture[textureKey]) {
                            textureData[modelRel.target] = data3mf.texture[textureKey];
                        }
                    }
                }
                for (var i = 0; i < modelsKeys.length; i++) {
                    var modelsKey = modelsKeys[i];
                    var modelData = modelsData[modelsKey];
                    var objectIds = Object.keys(modelData['resources']['object']);
                    for (var j = 0; j < objectIds.length; j++) {
                        var objectId = objectIds[j];
                        buildObject(objectId, objects, modelData, textureData);
                    }
                }
                return objects;
            }
            function build(objects, data3mf) {
                var group = new THREE.Group();
                var relationship = data3mf['rels'][0];
                var buildData = data3mf.model[relationship['target'].substring(1)]['build'];
                for (var i = 0; i < buildData.length; i++) {
                    var buildItem = buildData[i];
                    var object3D = objects[buildItem['objectId']];
                    var transform = buildItem['transform'];
                    if (transform) {
                        object3D.applyMatrix4(transform);
                    }
                    group.add(object3D);
                }
                return group;
            }
            var data3mf = loadDocument(data);
            var objects = buildObjects(data3mf);
            return build(objects, data3mf);
        },
        addExtension: function (extension) {
            this.availableExtensions.push(extension);
        }
    });
    return ThreeMFLoader;
});
define('skylark-threejs-ex/loaders/AMFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var AMFLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    AMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: AMFLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        parse: function (data) {
            function loadDocument(data) {
                var view = new DataView(data);
                var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));
                if (magic === 'PK') {
                    var zip = null;
                    var file = null;
                    console.log('THREE.AMFLoader: Loading Zip');
                    try {
                        zip = new JSZip(data);
                    } catch (e) {
                        if (e instanceof ReferenceError) {
                            console.log('THREE.AMFLoader: jszip missing and file is compressed.');
                            return null;
                        }
                    }
                    for (file in zip.files) {
                        if (file.toLowerCase().substr(-4) === '.amf') {
                            break;
                        }
                    }
                    console.log('THREE.AMFLoader: Trying to load file asset: ' + file);
                    view = new DataView(zip.file(file).asArrayBuffer());
                }
                var fileText = THREE.LoaderUtils.decodeText(view);
                var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');
                if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {
                    console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');
                    return null;
                }
                return xmlData;
            }
            function loadDocumentScale(node) {
                var scale = 1;
                var unit = 'millimeter';
                if (node.documentElement.attributes.unit !== undefined) {
                    unit = node.documentElement.attributes.unit.value.toLowerCase();
                }
                var scaleUnits = {
                    millimeter: 1,
                    inch: 25.4,
                    feet: 304.8,
                    meter: 1000,
                    micron: 0.001
                };
                if (scaleUnits[unit] !== undefined) {
                    scale = scaleUnits[unit];
                }
                console.log('THREE.AMFLoader: Unit scale: ' + scale);
                return scale;
            }
            function loadMaterials(node) {
                var matName = 'AMF Material';
                var matId = node.attributes.id.textContent;
                var color = {
                    r: 1,
                    g: 1,
                    b: 1,
                    a: 1
                };
                var loadedMaterial = null;
                for (var i = 0; i < node.childNodes.length; i++) {
                    var matChildEl = node.childNodes[i];
                    if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {
                        if (matChildEl.attributes.type.value === 'name') {
                            matName = matChildEl.textContent;
                        }
                    } else if (matChildEl.nodeName === 'color') {
                        color = loadColor(matChildEl);
                    }
                }
                loadedMaterial = new THREE.MeshPhongMaterial({
                    flatShading: true,
                    color: new THREE.Color(color.r, color.g, color.b),
                    name: matName
                });
                if (color.a !== 1) {
                    loadedMaterial.transparent = true;
                    loadedMaterial.opacity = color.a;
                }
                return {
                    id: matId,
                    material: loadedMaterial
                };
            }
            function loadColor(node) {
                var color = {
                    r: 1,
                    g: 1,
                    b: 1,
                    a: 1
                };
                for (var i = 0; i < node.childNodes.length; i++) {
                    var matColor = node.childNodes[i];
                    if (matColor.nodeName === 'r') {
                        color.r = matColor.textContent;
                    } else if (matColor.nodeName === 'g') {
                        color.g = matColor.textContent;
                    } else if (matColor.nodeName === 'b') {
                        color.b = matColor.textContent;
                    } else if (matColor.nodeName === 'a') {
                        color.a = matColor.textContent;
                    }
                }
                return color;
            }
            function loadMeshVolume(node) {
                var volume = {
                    name: '',
                    triangles: [],
                    materialid: null
                };
                var currVolumeNode = node.firstElementChild;
                if (node.attributes.materialid !== undefined) {
                    volume.materialId = node.attributes.materialid.nodeValue;
                }
                while (currVolumeNode) {
                    if (currVolumeNode.nodeName === 'metadata') {
                        if (currVolumeNode.attributes.type !== undefined) {
                            if (currVolumeNode.attributes.type.value === 'name') {
                                volume.name = currVolumeNode.textContent;
                            }
                        }
                    } else if (currVolumeNode.nodeName === 'triangle') {
                        var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;
                        var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;
                        var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;
                        volume.triangles.push(v1, v2, v3);
                    }
                    currVolumeNode = currVolumeNode.nextElementSibling;
                }
                return volume;
            }
            function loadMeshVertices(node) {
                var vertArray = [];
                var normalArray = [];
                var currVerticesNode = node.firstElementChild;
                while (currVerticesNode) {
                    if (currVerticesNode.nodeName === 'vertex') {
                        var vNode = currVerticesNode.firstElementChild;
                        while (vNode) {
                            if (vNode.nodeName === 'coordinates') {
                                var x = vNode.getElementsByTagName('x')[0].textContent;
                                var y = vNode.getElementsByTagName('y')[0].textContent;
                                var z = vNode.getElementsByTagName('z')[0].textContent;
                                vertArray.push(x, y, z);
                            } else if (vNode.nodeName === 'normal') {
                                var nx = vNode.getElementsByTagName('nx')[0].textContent;
                                var ny = vNode.getElementsByTagName('ny')[0].textContent;
                                var nz = vNode.getElementsByTagName('nz')[0].textContent;
                                normalArray.push(nx, ny, nz);
                            }
                            vNode = vNode.nextElementSibling;
                        }
                    }
                    currVerticesNode = currVerticesNode.nextElementSibling;
                }
                return {
                    'vertices': vertArray,
                    'normals': normalArray
                };
            }
            function loadObject(node) {
                var objId = node.attributes.id.textContent;
                var loadedObject = {
                    name: 'amfobject',
                    meshes: []
                };
                var currColor = null;
                var currObjNode = node.firstElementChild;
                while (currObjNode) {
                    if (currObjNode.nodeName === 'metadata') {
                        if (currObjNode.attributes.type !== undefined) {
                            if (currObjNode.attributes.type.value === 'name') {
                                loadedObject.name = currObjNode.textContent;
                            }
                        }
                    } else if (currObjNode.nodeName === 'color') {
                        currColor = loadColor(currObjNode);
                    } else if (currObjNode.nodeName === 'mesh') {
                        var currMeshNode = currObjNode.firstElementChild;
                        var mesh = {
                            vertices: [],
                            normals: [],
                            volumes: [],
                            color: currColor
                        };
                        while (currMeshNode) {
                            if (currMeshNode.nodeName === 'vertices') {
                                var loadedVertices = loadMeshVertices(currMeshNode);
                                mesh.normals = mesh.normals.concat(loadedVertices.normals);
                                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);
                            } else if (currMeshNode.nodeName === 'volume') {
                                mesh.volumes.push(loadMeshVolume(currMeshNode));
                            }
                            currMeshNode = currMeshNode.nextElementSibling;
                        }
                        loadedObject.meshes.push(mesh);
                    }
                    currObjNode = currObjNode.nextElementSibling;
                }
                return {
                    'id': objId,
                    'obj': loadedObject
                };
            }
            var xmlData = loadDocument(data);
            var amfName = '';
            var amfAuthor = '';
            var amfScale = loadDocumentScale(xmlData);
            var amfMaterials = {};
            var amfObjects = {};
            var childNodes = xmlData.documentElement.childNodes;
            var i, j;
            for (i = 0; i < childNodes.length; i++) {
                var child = childNodes[i];
                if (child.nodeName === 'metadata') {
                    if (child.attributes.type !== undefined) {
                        if (child.attributes.type.value === 'name') {
                            amfName = child.textContent;
                        } else if (child.attributes.type.value === 'author') {
                            amfAuthor = child.textContent;
                        }
                    }
                } else if (child.nodeName === 'material') {
                    var loadedMaterial = loadMaterials(child);
                    amfMaterials[loadedMaterial.id] = loadedMaterial.material;
                } else if (child.nodeName === 'object') {
                    var loadedObject = loadObject(child);
                    amfObjects[loadedObject.id] = loadedObject.obj;
                }
            }
            var sceneObject = new THREE.Group();
            var defaultMaterial = new THREE.MeshPhongMaterial({
                color: 11184895,
                flatShading: true
            });
            sceneObject.name = amfName;
            sceneObject.userData.author = amfAuthor;
            sceneObject.userData.loader = 'AMF';
            for (var id in amfObjects) {
                var part = amfObjects[id];
                var meshes = part.meshes;
                var newObject = new THREE.Group();
                newObject.name = part.name || '';
                for (i = 0; i < meshes.length; i++) {
                    var objDefaultMaterial = defaultMaterial;
                    var mesh = meshes[i];
                    var vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);
                    var normals = null;
                    if (mesh.normals.length) {
                        normals = new THREE.Float32BufferAttribute(mesh.normals, 3);
                    }
                    if (mesh.color) {
                        var color = mesh.color;
                        objDefaultMaterial = defaultMaterial.clone();
                        objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);
                        if (color.a !== 1) {
                            objDefaultMaterial.transparent = true;
                            objDefaultMaterial.opacity = color.a;
                        }
                    }
                    var volumes = mesh.volumes;
                    for (j = 0; j < volumes.length; j++) {
                        var volume = volumes[j];
                        var newGeometry = new THREE.BufferGeometry();
                        var material = objDefaultMaterial;
                        newGeometry.setIndex(volume.triangles);
                        newGeometry.setAttribute('position', vertices.clone());
                        if (normals) {
                            newGeometry.setAttribute('normal', normals.clone());
                        }
                        if (amfMaterials[volume.materialId] !== undefined) {
                            material = amfMaterials[volume.materialId];
                        }
                        newGeometry.scale(amfScale, amfScale, amfScale);
                        newObject.add(new THREE.Mesh(newGeometry, material.clone()));
                    }
                }
                sceneObject.add(newObject);
            }
            return sceneObject;
        }
    });

    return AMFLoader;
});
define('skylark-threejs-ex/loaders/AssimpJSONLoader',[
	"skylark-threejs"
],function(THREE) {
	/**
	 * @author Alexander Gessler / http://www.greentoken.de/
	 * https://github.com/acgessler
	 *
	 * Loader for models imported with Open Asset Import Library (http://assimp.sf.net)
	 * through assimp2json (https://github.com/acgessler/assimp2json).
	 *
	 * Supports any input format that assimp supports, including 3ds, obj, dae, blend,
	 * fbx, x, ms3d, lwo (and many more).
	 *
	 * See webgl_loader_assimp2json example.
	 */

	THREE.AssimpJSONLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.AssimpJSONLoader.prototype = {

		constructor: THREE.AssimpJSONLoader,

		crossOrigin: 'anonymous',

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var path = ( scope.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;

			var loader = new THREE.FileLoader( this.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.__metadata__;

				// check if __metadata__ meta header is present
				// this header is used to disambiguate between different JSON-based file formats

				if ( typeof metadata !== 'undefined' ) {

					// check if assimp2json at all

					if ( metadata.format !== 'assimp2json' ) {

						onError( 'THREE.AssimpJSONLoader: Not an assimp2json scene.' );
						return;

						// check major format version

					} else if ( metadata.version < 100 && metadata.version >= 200 ) {

						onError( 'THREE.AssimpJSONLoader: Unsupported assimp2json file format version.' );
						return;

					}

				}

				onLoad( scope.parse( json, path ) );

			}, onProgress, onError );

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResourcePath: function ( value ) {

			this.resourcePath = value;
			return this;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		parse: function ( json, path ) {

			function parseList( json, handler ) {

				var meshes = new Array( json.length );

				for ( var i = 0; i < json.length; ++ i ) {

					meshes[ i ] = handler.call( this, json[ i ] );

				}

				return meshes;

			}

			function parseMesh( json ) {

				var geometry = new THREE.BufferGeometry();

				var i, l, face;

				var indices = [];

				var vertices = json.vertices || [];
				var normals = json.normals || [];
				var uvs = json.texturecoords || [];
				var colors = json.colors || [];

				uvs = uvs[ 0 ] || []; // only support for a single set of uvs

				for ( i = 0, l = json.faces.length; i < l; i ++ ) {

					face = json.faces[ i ];
					indices.push( face[ 0 ], face[ 1 ], face[ 2 ] );

				}

				geometry.setIndex( indices );
				geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );

				if ( normals.length > 0 ) {

					geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );

				}

				if ( uvs.length > 0 ) {

					geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );

				}

				if ( colors.length > 0 ) {

					geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );

				}

				geometry.computeBoundingSphere();

				return geometry;

			}

			function parseMaterial( json ) {

				var material = new THREE.MeshPhongMaterial();

				for ( var i in json.properties ) {

					var property = json.properties[ i ];
					var key = property.key;
					var value = property.value;

					switch ( key ) {

						case '$tex.file': {

							var semantic = property.semantic;

							// prop.semantic gives the type of the texture
							// 1: diffuse
							// 2: specular map
							// 4: emissive map
							// 5: height map (bumps)
							// 6: normal map
							// more values (i.e. environment, etc) are known by assimp and may be relevant

							if ( semantic === 1 || semantic === 2 || semantic === 4 || semantic === 5 || semantic === 6 ) {

								var keyname;

								switch ( semantic ) {

									case 1:
										keyname = 'map';
										break;
									case 2:
										keyname = 'specularMap';
										break;
									case 4:
										keyname = 'emissiveMap';
										break;
									case 5:
										keyname = 'bumpMap';
										break;
									case 6:
										keyname = 'normalMap';
										break;

								}

								var texture = textureLoader.load( value );

								// TODO: read texture settings from assimp.
								// Wrapping is the default, though.

								texture.wrapS = texture.wrapT = THREE.RepeatWrapping;

								material[ keyname ] = texture;

							}

							break;

						}

						case '?mat.name':
							material.name = value;
							break;

						case '$clr.diffuse':
							material.color.fromArray( value );
							break;

						case '$clr.specular':
							material.specular.fromArray( value );
							break;

						case '$clr.emissive':
							material.emissive.fromArray( value );
							break;

						case '$mat.shininess':
							material.shininess = value;
							break;

						case '$mat.shadingm':
							// aiShadingMode_Flat
							material.flatShading = ( value === 1 ) ? true : false;
							break;

						case '$mat.opacity':
							if ( value < 1 ) {

								material.opacity = value;
								material.transparent = true;

							}
							break;

					}

				}

				return material;

			}

			function parseObject( json, node, meshes, materials ) {

				var obj = new THREE.Object3D(),	i, idx;

				obj.name = node.name || '';
				obj.matrix = new THREE.Matrix4().fromArray( node.transformation ).transpose();
				obj.matrix.decompose( obj.position, obj.quaternion, obj.scale );

				for ( i = 0; node.meshes && i < node.meshes.length; i ++ ) {

					idx = node.meshes[ i ];
					obj.add( new THREE.Mesh( meshes[ idx ], materials[ json.meshes[ idx ].materialindex ] ) );

				}

				for ( i = 0; node.children && i < node.children.length; i ++ ) {

					obj.add( parseObject( json, node.children[ i ], meshes, materials ) );

				}

				return obj;

			}

			var textureLoader = new THREE.TextureLoader( this.manager );
			textureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );

			var meshes = parseList( json.meshes, parseMesh );
			var materials = parseList( json.materials, parseMaterial );
			return parseObject( json, json.rootnode, meshes, materials );

		}

	};
	
	return THREE.AssimpJSONLoader ;
});
define('skylark-threejs-ex/loaders/AssimpLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var AssimpLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    AssimpLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: AssimpLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (buffer) {
                onLoad(scope.parse(buffer, path));
            }, onProgress, onError);
        },
        parse: function (buffer, path) {
            var textureLoader = new THREE.TextureLoader(this.manager);
            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
            var Virtulous = {};
            Virtulous.KeyFrame = function (time, matrix) {
                this.time = time;
                this.matrix = matrix.clone();
                this.position = new THREE.Vector3();
                this.quaternion = new THREE.Quaternion();
                this.scale = new THREE.Vector3(1, 1, 1);
                this.matrix.decompose(this.position, this.quaternion, this.scale);
                this.clone = function () {
                    var n = new Virtulous.KeyFrame(this.time, this.matrix);
                    return n;
                };
                this.lerp = function (nextKey, time) {
                    time -= this.time;
                    var dist = nextKey.time - this.time;
                    var l = time / dist;
                    var l2 = 1 - l;
                    var keypos = this.position;
                    var keyrot = this.quaternion;
                    var key2pos = nextKey.position;
                    var key2rot = nextKey.quaternion;
                    Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;
                    Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;
                    Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;
                    Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);
                    Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);
                    return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);
                };
            };
            Virtulous.KeyFrame.tempAniPos = new THREE.Vector3();
            Virtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();
            Virtulous.KeyFrame.tempAniScale = new THREE.Vector3(1, 1, 1);
            Virtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();
            Virtulous.KeyFrameTrack = function () {
                this.keys = [];
                this.target = null;
                this.time = 0;
                this.length = 0;
                this._accelTable = {};
                this.fps = 20;
                this.addKey = function (key) {
                    this.keys.push(key);
                };
                this.init = function () {
                    this.sortKeys();
                    if (this.keys.length > 0)
                        this.length = this.keys[this.keys.length - 1].time;
                    else
                        this.length = 0;
                    if (!this.fps)
                        return;
                    for (var j = 0; j < this.length * this.fps; j++) {
                        for (var i = 0; i < this.keys.length; i++) {
                            if (this.keys[i].time == j) {
                                this._accelTable[j] = i;
                                break;
                            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {
                                this._accelTable[j] = i;
                                break;
                            }
                        }
                    }
                };
                this.parseFromThree = function (data) {
                    var fps = data.fps;
                    this.target = data.node;
                    var track = data.hierarchy[0].keys;
                    for (var i = 0; i < track.length; i++) {
                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));
                    }
                    this.init();
                };
                this.parseFromCollada = function (data) {
                    var track = data.keys;
                    var fps = this.fps;
                    for (var i = 0; i < track.length; i++) {
                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));
                    }
                    this.init();
                };
                this.sortKeys = function () {
                    this.keys.sort(this.keySortFunc);
                };
                this.keySortFunc = function (a, b) {
                    return a.time - b.time;
                };
                this.clone = function () {
                    var t = new Virtulous.KeyFrameTrack();
                    t.target = this.target;
                    t.time = this.time;
                    t.length = this.length;
                    for (var i = 0; i < this.keys.length; i++) {
                        t.addKey(this.keys[i].clone());
                    }
                    t.init();
                    return t;
                };
                this.reTarget = function (root, compareitor) {
                    if (!compareitor)
                        compareitor = Virtulous.TrackTargetNodeNameCompare;
                    this.target = compareitor(root, this.target);
                };
                this.keySearchAccel = function (time) {
                    time *= this.fps;
                    time = Math.floor(time);
                    return this._accelTable[time] || 0;
                };
                this.setTime = function (time) {
                    time = Math.abs(time);
                    if (this.length)
                        time = time % this.length + 0.05;
                    var key0 = null;
                    var key1 = null;
                    for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {
                        if (this.keys[i].time == time) {
                            key0 = this.keys[i];
                            key1 = this.keys[i];
                            break;
                        } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {
                            key0 = this.keys[i];
                            key1 = this.keys[i + 1];
                            break;
                        } else if (this.keys[i].time < time && i == this.keys.length - 1) {
                            key0 = this.keys[i];
                            key1 = this.keys[0].clone();
                            key1.time += this.length + 0.05;
                            break;
                        }
                    }
                    if (key0 && key1 && key0 !== key1) {
                        this.target.matrixAutoUpdate = false;
                        this.target.matrix.copy(key0.lerp(key1, time));
                        this.target.matrixWorldNeedsUpdate = true;
                        return;
                    }
                    if (key0 && key1 && key0 == key1) {
                        this.target.matrixAutoUpdate = false;
                        this.target.matrix.copy(key0.matrix);
                        this.target.matrixWorldNeedsUpdate = true;
                        return;
                    }
                };
            };
            Virtulous.TrackTargetNodeNameCompare = function (root, target) {
                function find(node, name) {
                    if (node.name == name)
                        return node;
                    for (var i = 0; i < node.children.length; i++) {
                        var r = find(node.children[i], name);
                        if (r)
                            return r;
                    }
                    return null;
                }
                return find(root, target.name);
            };
            Virtulous.Animation = function () {
                this.tracks = [];
                this.length = 0;
                this.addTrack = function (track) {
                    this.tracks.push(track);
                    this.length = Math.max(track.length, this.length);
                };
                this.setTime = function (time) {
                    this.time = time;
                    for (var i = 0; i < this.tracks.length; i++)
                        this.tracks[i].setTime(time);
                };
                this.clone = function (target, compareitor) {
                    if (!compareitor)
                        compareitor = Virtulous.TrackTargetNodeNameCompare;
                    var n = new Virtulous.Animation();
                    n.target = target;
                    for (var i = 0; i < this.tracks.length; i++) {
                        var track = this.tracks[i].clone();
                        track.reTarget(target, compareitor);
                        n.addTrack(track);
                    }
                    return n;
                };
            };
            var ASSBIN_CHUNK_AICAMERA = 4660;
            var ASSBIN_CHUNK_AILIGHT = 4661;
            var ASSBIN_CHUNK_AITEXTURE = 4662;
            var ASSBIN_CHUNK_AIMESH = 4663;
            var ASSBIN_CHUNK_AINODEANIM = 4664;
            var ASSBIN_CHUNK_AISCENE = 4665;
            var ASSBIN_CHUNK_AIBONE = 4666;
            var ASSBIN_CHUNK_AIANIMATION = 4667;
            var ASSBIN_CHUNK_AINODE = 4668;
            var ASSBIN_CHUNK_AIMATERIAL = 4669;
            var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;
            var ASSBIN_MESH_HAS_POSITIONS = 1;
            var ASSBIN_MESH_HAS_NORMALS = 2;
            var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;
            var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;
            var ASSBIN_MESH_HAS_COLOR_BASE = 65536;
            var AI_MAX_NUMBER_OF_COLOR_SETS = 1;
            var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;
            var aiLightSource_DIRECTIONAL = 1;
            var aiLightSource_SPOT = 3;
            var aiTextureType_DIFFUSE = 1;
            var aiTextureType_NORMALS = 6;
            var aiTextureType_OPACITY = 8;
            var aiTextureType_LIGHTMAP = 10;
            var BONESPERVERT = 4;
            function ASSBIN_MESH_HAS_TEXCOORD(n) {
                return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;
            }
            function ASSBIN_MESH_HAS_COLOR(n) {
                return ASSBIN_MESH_HAS_COLOR_BASE << n;
            }
            function markBones(scene) {
                for (var i in scene.mMeshes) {
                    var mesh = scene.mMeshes[i];
                    for (var k in mesh.mBones) {
                        var boneNode = scene.findNode(mesh.mBones[k].mName);
                        if (boneNode)
                            boneNode.isBone = true;
                    }
                }
            }
            function cloneTreeToBones(root, scene) {
                var rootBone = new THREE.Bone();
                rootBone.matrix.copy(root.matrix);
                rootBone.matrixWorld.copy(root.matrixWorld);
                rootBone.position.copy(root.position);
                rootBone.quaternion.copy(root.quaternion);
                rootBone.scale.copy(root.scale);
                scene.nodeCount++;
                rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();
                if (!scene.nodeToBoneMap[root.name])
                    scene.nodeToBoneMap[root.name] = [];
                scene.nodeToBoneMap[root.name].push(rootBone);
                for (var i in root.children) {
                    var child = cloneTreeToBones(root.children[i], scene);
                    rootBone.add(child);
                }
                return rootBone;
            }
            function sortWeights(indexes, weights) {
                var pairs = [];
                for (var i = 0; i < indexes.length; i++) {
                    pairs.push({
                        i: indexes[i],
                        w: weights[i]
                    });
                }
                pairs.sort(function (a, b) {
                    return b.w - a.w;
                });
                while (pairs.length < 4) {
                    pairs.push({
                        i: 0,
                        w: 0
                    });
                }
                if (pairs.length > 4)
                    pairs.length = 4;
                var sum = 0;
                for (var i = 0; i < 4; i++) {
                    sum += pairs[i].w * pairs[i].w;
                }
                sum = Math.sqrt(sum);
                for (var i = 0; i < 4; i++) {
                    pairs[i].w = pairs[i].w / sum;
                    indexes[i] = pairs[i].i;
                    weights[i] = pairs[i].w;
                }
            }
            function findMatchingBone(root, name) {
                if (root.name.indexOf('bone_' + name) == 0)
                    return root;
                for (var i in root.children) {
                    var ret = findMatchingBone(root.children[i], name);
                    if (ret)
                        return ret;
                }
                return undefined;
            }
            function aiMesh() {
                this.mPrimitiveTypes = 0;
                this.mNumVertices = 0;
                this.mNumFaces = 0;
                this.mNumBones = 0;
                this.mMaterialIndex = 0;
                this.mVertices = [];
                this.mNormals = [];
                this.mTangents = [];
                this.mBitangents = [];
                this.mColors = [[]];
                this.mTextureCoords = [[]];
                this.mFaces = [];
                this.mBones = [];
                this.hookupSkeletons = function (scene) {
                    if (this.mBones.length == 0)
                        return;
                    var allBones = [];
                    var offsetMatrix = [];
                    var skeletonRoot = scene.findNode(this.mBones[0].mName);
                    while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {
                        skeletonRoot = skeletonRoot.mParent;
                    }
                    var threeSkeletonRoot = skeletonRoot.toTHREE(scene);
                    var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);
                    this.threeNode.add(threeSkeletonRootBone);
                    for (var i = 0; i < this.mBones.length; i++) {
                        var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);
                        if (bone) {
                            var tbone = bone;
                            allBones.push(tbone);
                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());
                        } else {
                            var skeletonRoot = scene.findNode(this.mBones[i].mName);
                            if (!skeletonRoot)
                                return;
                            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);
                            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);
                            this.threeNode.add(threeSkeletonRootBone);
                            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);
                            var tbone = bone;
                            allBones.push(tbone);
                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());
                        }
                    }
                    var skeleton = new THREE.Skeleton(allBones, offsetMatrix);
                    this.threeNode.bind(skeleton, new THREE.Matrix4());
                    this.threeNode.material.skinning = true;
                };
                this.toTHREE = function (scene) {
                    if (this.threeNode)
                        return this.threeNode;
                    var geometry = new THREE.BufferGeometry();
                    var mat;
                    if (scene.mMaterials[this.mMaterialIndex])
                        mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);
                    else
                        mat = new THREE.MeshLambertMaterial();
                    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(this.mIndexArray), 1));
                    geometry.setAttribute('position', new THREE.BufferAttribute(this.mVertexBuffer, 3));
                    if (this.mNormalBuffer && this.mNormalBuffer.length > 0)
                        geometry.setAttribute('normal', new THREE.BufferAttribute(this.mNormalBuffer, 3));
                    if (this.mColorBuffer && this.mColorBuffer.length > 0)
                        geometry.setAttribute('color', new THREE.BufferAttribute(this.mColorBuffer, 4));
                    if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0)
                        geometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));
                    if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0)
                        geometry.setAttribute('uv1', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));
                    if (this.mTangentBuffer && this.mTangentBuffer.length > 0)
                        geometry.setAttribute('tangents', new THREE.BufferAttribute(this.mTangentBuffer, 3));
                    if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0)
                        geometry.setAttribute('bitangents', new THREE.BufferAttribute(this.mBitangentBuffer, 3));
                    if (this.mBones.length > 0) {
                        var weights = [];
                        var bones = [];
                        for (var i = 0; i < this.mBones.length; i++) {
                            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {
                                var weight = this.mBones[i].mWeights[j];
                                if (weight) {
                                    if (!weights[weight.mVertexId])
                                        weights[weight.mVertexId] = [];
                                    if (!bones[weight.mVertexId])
                                        bones[weight.mVertexId] = [];
                                    weights[weight.mVertexId].push(weight.mWeight);
                                    bones[weight.mVertexId].push(parseInt(i));
                                }
                            }
                        }
                        for (var i in bones) {
                            sortWeights(bones[i], weights[i]);
                        }
                        var _weights = [];
                        var _bones = [];
                        for (var i = 0; i < weights.length; i++) {
                            for (var j = 0; j < 4; j++) {
                                if (weights[i] && bones[i]) {
                                    _weights.push(weights[i][j]);
                                    _bones.push(bones[i][j]);
                                } else {
                                    _weights.push(0);
                                    _bones.push(0);
                                }
                            }
                        }
                        geometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(_weights), BONESPERVERT));
                        geometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(_bones), BONESPERVERT));
                    }
                    var mesh;
                    if (this.mBones.length == 0)
                        mesh = new THREE.Mesh(geometry, mat);
                    if (this.mBones.length > 0) {
                        mesh = new THREE.SkinnedMesh(geometry, mat);
                        mesh.normalizeSkinWeights();
                    }
                    this.threeNode = mesh;
                    return mesh;
                };
            }
            function aiFace() {
                this.mNumIndices = 0;
                this.mIndices = [];
            }
            function aiVector3D() {
                this.x = 0;
                this.y = 0;
                this.z = 0;
                this.toTHREE = function () {
                    return new THREE.Vector3(this.x, this.y, this.z);
                };
            }
            function aiColor3D() {
                this.r = 0;
                this.g = 0;
                this.b = 0;
                this.a = 0;
                this.toTHREE = function () {
                    return new THREE.Color(this.r, this.g, this.b);
                };
            }
            function aiQuaternion() {
                this.x = 0;
                this.y = 0;
                this.z = 0;
                this.w = 0;
                this.toTHREE = function () {
                    return new THREE.Quaternion(this.x, this.y, this.z, this.w);
                };
            }
            function aiVertexWeight() {
                this.mVertexId = 0;
                this.mWeight = 0;
            }
            function aiString() {
                this.data = [];
                this.toString = function () {
                    var str = '';
                    this.data.forEach(function (i) {
                        str += String.fromCharCode(i);
                    });
                    return str.replace(/[^\x20-\x7E]+/g, '');
                };
            }
            function aiVectorKey() {
                this.mTime = 0;
                this.mValue = null;
            }
            function aiQuatKey() {
                this.mTime = 0;
                this.mValue = null;
            }
            function aiNode() {
                this.mName = '';
                this.mTransformation = [];
                this.mNumChildren = 0;
                this.mNumMeshes = 0;
                this.mMeshes = [];
                this.mChildren = [];
                this.toTHREE = function (scene) {
                    if (this.threeNode)
                        return this.threeNode;
                    var o = new THREE.Object3D();
                    o.name = this.mName;
                    o.matrix = this.mTransformation.toTHREE();
                    for (var i = 0; i < this.mChildren.length; i++) {
                        o.add(this.mChildren[i].toTHREE(scene));
                    }
                    for (var i = 0; i < this.mMeshes.length; i++) {
                        o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));
                    }
                    this.threeNode = o;
                    o.matrix.decompose(o.position, o.quaternion, o.scale);
                    return o;
                };
            }
            function aiBone() {
                this.mName = '';
                this.mNumWeights = 0;
                this.mOffsetMatrix = 0;
            }
            function aiMaterialProperty() {
                this.mKey = '';
                this.mSemantic = 0;
                this.mIndex = 0;
                this.mData = [];
                this.mDataLength = 0;
                this.mType = 0;
                this.dataAsColor = function () {
                    var array = new Uint8Array(this.mData).buffer;
                    var reader = new DataView(array);
                    var r = reader.getFloat32(0, true);
                    var g = reader.getFloat32(4, true);
                    var b = reader.getFloat32(8, true);
                    return new THREE.Color(r, g, b);
                };
                this.dataAsFloat = function () {
                    var array = new Uint8Array(this.mData).buffer;
                    var reader = new DataView(array);
                    var r = reader.getFloat32(0, true);
                    return r;
                };
                this.dataAsBool = function () {
                    var array = new Uint8Array(this.mData).buffer;
                    var reader = new DataView(array);
                    var r = reader.getFloat32(0, true);
                    return !!r;
                };
                this.dataAsString = function () {
                    var s = new aiString();
                    s.data = this.mData;
                    return s.toString();
                };
                this.dataAsMap = function () {
                    var s = new aiString();
                    s.data = this.mData;
                    var path = s.toString();
                    path = path.replace(/\\/g, '/');
                    if (path.indexOf('/') != -1) {
                        path = path.substr(path.lastIndexOf('/') + 1);
                    }
                    return textureLoader.load(path);
                };
            }
            var namePropMapping = {
                '?mat.name': 'name',
                '$mat.shadingm': 'shading',
                '$mat.twosided': 'twoSided',
                '$mat.wireframe': 'wireframe',
                '$clr.ambient': 'ambient',
                '$clr.diffuse': 'color',
                '$clr.specular': 'specular',
                '$clr.emissive': 'emissive',
                '$clr.transparent': 'transparent',
                '$clr.reflective': 'reflect',
                '$mat.shininess': 'shininess',
                '$mat.reflectivity': 'reflectivity',
                '$mat.refracti': 'refraction',
                '$tex.file': 'map'
            };
            var nameTypeMapping = {
                '?mat.name': 'string',
                '$mat.shadingm': 'bool',
                '$mat.twosided': 'bool',
                '$mat.wireframe': 'bool',
                '$clr.ambient': 'color',
                '$clr.diffuse': 'color',
                '$clr.specular': 'color',
                '$clr.emissive': 'color',
                '$clr.transparent': 'color',
                '$clr.reflective': 'color',
                '$mat.shininess': 'float',
                '$mat.reflectivity': 'float',
                '$mat.refracti': 'float',
                '$tex.file': 'map'
            };
            function aiMaterial() {
                this.mNumAllocated = 0;
                this.mNumProperties = 0;
                this.mProperties = [];
                this.toTHREE = function () {
                    var mat = new THREE.MeshPhongMaterial();
                    for (var i = 0; i < this.mProperties.length; i++) {
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'float')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'color')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'bool')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'string')
                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();
                        if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {
                            var prop = this.mProperties[i];
                            if (prop.mSemantic == aiTextureType_DIFFUSE)
                                mat.map = this.mProperties[i].dataAsMap();
                            if (prop.mSemantic == aiTextureType_NORMALS)
                                mat.normalMap = this.mProperties[i].dataAsMap();
                            if (prop.mSemantic == aiTextureType_LIGHTMAP)
                                mat.lightMap = this.mProperties[i].dataAsMap();
                            if (prop.mSemantic == aiTextureType_OPACITY)
                                mat.alphaMap = this.mProperties[i].dataAsMap();
                        }
                    }
                    mat.ambient.r = 0.53;
                    mat.ambient.g = 0.53;
                    mat.ambient.b = 0.53;
                    mat.color.r = 1;
                    mat.color.g = 1;
                    mat.color.b = 1;
                    return mat;
                };
            }
            function veclerp(v1, v2, l) {
                var v = new THREE.Vector3();
                var lm1 = 1 - l;
                v.x = v1.x * l + v2.x * lm1;
                v.y = v1.y * l + v2.y * lm1;
                v.z = v1.z * l + v2.z * lm1;
                return v;
            }
            function quatlerp(q1, q2, l) {
                return q1.clone().slerp(q2, 1 - l);
            }
            function sampleTrack(keys, time, lne, lerp) {
                if (keys.length == 1)
                    return keys[0].mValue.toTHREE();
                var dist = Infinity;
                var key = null;
                var nextKey = null;
                for (var i = 0; i < keys.length; i++) {
                    var timeDist = Math.abs(keys[i].mTime - time);
                    if (timeDist < dist && keys[i].mTime <= time) {
                        dist = timeDist;
                        key = keys[i];
                        nextKey = keys[i + 1];
                    }
                }
                if (!key) {
                    return null;
                } else if (nextKey) {
                    var dT = nextKey.mTime - key.mTime;
                    var T = key.mTime - time;
                    var l = T / dT;
                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);
                } else {
                    nextKey = keys[0].clone();
                    nextKey.mTime += lne;
                    var dT = nextKey.mTime - key.mTime;
                    var T = key.mTime - time;
                    var l = T / dT;
                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);
                }
            }
            function aiNodeAnim() {
                this.mNodeName = '';
                this.mNumPositionKeys = 0;
                this.mNumRotationKeys = 0;
                this.mNumScalingKeys = 0;
                this.mPositionKeys = [];
                this.mRotationKeys = [];
                this.mScalingKeys = [];
                this.mPreState = '';
                this.mPostState = '';
                this.init = function (tps) {
                    if (!tps)
                        tps = 1;
                    function t(t) {
                        t.mTime /= tps;
                    }
                    this.mPositionKeys.forEach(t);
                    this.mRotationKeys.forEach(t);
                    this.mScalingKeys.forEach(t);
                };
                this.sortKeys = function () {
                    function comp(a, b) {
                        return a.mTime - b.mTime;
                    }
                    this.mPositionKeys.sort(comp);
                    this.mRotationKeys.sort(comp);
                    this.mScalingKeys.sort(comp);
                };
                this.getLength = function () {
                    return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {
                        return a.mTime;
                    })), Math.max.apply(null, this.mRotationKeys.map(function (a) {
                        return a.mTime;
                    })), Math.max.apply(null, this.mScalingKeys.map(function (a) {
                        return a.mTime;
                    })));
                };
                this.toTHREE = function (o) {
                    this.sortKeys();
                    var length = this.getLength();
                    var track = new Virtulous.KeyFrameTrack();
                    for (var i = 0; i < length; i += 0.05) {
                        var matrix = new THREE.Matrix4();
                        var time = i;
                        var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);
                        var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);
                        var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);
                        matrix.compose(pos, rotation, scale);
                        var key = new Virtulous.KeyFrame(time, matrix);
                        track.addKey(key);
                    }
                    track.target = o.findNode(this.mNodeName).toTHREE();
                    var tracks = [track];
                    if (o.nodeToBoneMap[this.mNodeName]) {
                        for (var i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {
                            var t2 = track.clone();
                            t2.target = o.nodeToBoneMap[this.mNodeName][i];
                            tracks.push(t2);
                        }
                    }
                    return tracks;
                };
            }
            function aiAnimation() {
                this.mName = '';
                this.mDuration = 0;
                this.mTicksPerSecond = 0;
                this.mNumChannels = 0;
                this.mChannels = [];
                this.toTHREE = function (root) {
                    var animationHandle = new Virtulous.Animation();
                    for (var i in this.mChannels) {
                        this.mChannels[i].init(this.mTicksPerSecond);
                        var tracks = this.mChannels[i].toTHREE(root);
                        for (var j in tracks) {
                            tracks[j].init();
                            animationHandle.addTrack(tracks[j]);
                        }
                    }
                    animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {
                        return e.length;
                    }));
                    return animationHandle;
                };
            }
            function aiTexture() {
                this.mWidth = 0;
                this.mHeight = 0;
                this.texAchFormatHint = [];
                this.pcData = [];
            }
            function aiLight() {
                this.mName = '';
                this.mType = 0;
                this.mAttenuationConstant = 0;
                this.mAttenuationLinear = 0;
                this.mAttenuationQuadratic = 0;
                this.mAngleInnerCone = 0;
                this.mAngleOuterCone = 0;
                this.mColorDiffuse = null;
                this.mColorSpecular = null;
                this.mColorAmbient = null;
            }
            function aiCamera() {
                this.mName = '';
                this.mPosition = null;
                this.mLookAt = null;
                this.mUp = null;
                this.mHorizontalFOV = 0;
                this.mClipPlaneNear = 0;
                this.mClipPlaneFar = 0;
                this.mAspect = 0;
            }
            function aiScene() {
                this.versionMajor = 0;
                this.versionMinor = 0;
                this.versionRevision = 0;
                this.compileFlags = 0;
                this.mFlags = 0;
                this.mNumMeshes = 0;
                this.mNumMaterials = 0;
                this.mNumAnimations = 0;
                this.mNumTextures = 0;
                this.mNumLights = 0;
                this.mNumCameras = 0;
                this.mRootNode = null;
                this.mMeshes = [];
                this.mMaterials = [];
                this.mAnimations = [];
                this.mLights = [];
                this.mCameras = [];
                this.nodeToBoneMap = {};
                this.findNode = function (name, root) {
                    if (!root) {
                        root = this.mRootNode;
                    }
                    if (root.mName == name) {
                        return root;
                    }
                    for (var i = 0; i < root.mChildren.length; i++) {
                        var ret = this.findNode(name, root.mChildren[i]);
                        if (ret)
                            return ret;
                    }
                    return null;
                };
                this.toTHREE = function () {
                    this.nodeCount = 0;
                    markBones(this);
                    var o = this.mRootNode.toTHREE(this);
                    for (var i in this.mMeshes)
                        this.mMeshes[i].hookupSkeletons(this);
                    if (this.mAnimations.length > 0) {
                        var a = this.mAnimations[0].toTHREE(this);
                    }
                    return {
                        object: o,
                        animation: a
                    };
                };
            }
            function aiMatrix4() {
                this.elements = [
                    [],
                    [],
                    [],
                    []
                ];
                this.toTHREE = function () {
                    var m = new THREE.Matrix4();
                    for (var i = 0; i < 4; ++i) {
                        for (var i2 = 0; i2 < 4; ++i2) {
                            m.elements[i * 4 + i2] = this.elements[i2][i];
                        }
                    }
                    return m;
                };
            }
            var littleEndian = true;
            function readFloat(dataview) {
                var val = dataview.getFloat32(dataview.readOffset, littleEndian);
                dataview.readOffset += 4;
                return val;
            }
            function Read_double(dataview) {
                var val = dataview.getFloat64(dataview.readOffset, littleEndian);
                dataview.readOffset += 8;
                return val;
            }
            function Read_uint8_t(dataview) {
                var val = dataview.getUint8(dataview.readOffset);
                dataview.readOffset += 1;
                return val;
            }
            function Read_uint16_t(dataview) {
                var val = dataview.getUint16(dataview.readOffset, littleEndian);
                dataview.readOffset += 2;
                return val;
            }
            function Read_unsigned_int(dataview) {
                var val = dataview.getUint32(dataview.readOffset, littleEndian);
                dataview.readOffset += 4;
                return val;
            }
            function Read_uint32_t(dataview) {
                var val = dataview.getUint32(dataview.readOffset, littleEndian);
                dataview.readOffset += 4;
                return val;
            }
            function Read_aiVector3D(stream) {
                var v = new aiVector3D();
                v.x = readFloat(stream);
                v.y = readFloat(stream);
                v.z = readFloat(stream);
                return v;
            }
            function Read_aiColor3D(stream) {
                var c = new aiColor3D();
                c.r = readFloat(stream);
                c.g = readFloat(stream);
                c.b = readFloat(stream);
                return c;
            }
            function Read_aiQuaternion(stream) {
                var v = new aiQuaternion();
                v.w = readFloat(stream);
                v.x = readFloat(stream);
                v.y = readFloat(stream);
                v.z = readFloat(stream);
                return v;
            }
            function Read_aiString(stream) {
                var s = new aiString();
                var stringlengthbytes = Read_unsigned_int(stream);
                stream.ReadBytes(s.data, 1, stringlengthbytes);
                return s.toString();
            }
            function Read_aiVertexWeight(stream) {
                var w = new aiVertexWeight();
                w.mVertexId = Read_unsigned_int(stream);
                w.mWeight = readFloat(stream);
                return w;
            }
            function Read_aiMatrix4x4(stream) {
                var m = new aiMatrix4();
                for (var i = 0; i < 4; ++i) {
                    for (var i2 = 0; i2 < 4; ++i2) {
                        m.elements[i][i2] = readFloat(stream);
                    }
                }
                return m;
            }
            function Read_aiVectorKey(stream) {
                var v = new aiVectorKey();
                v.mTime = Read_double(stream);
                v.mValue = Read_aiVector3D(stream);
                return v;
            }
            function Read_aiQuatKey(stream) {
                var v = new aiQuatKey();
                v.mTime = Read_double(stream);
                v.mValue = Read_aiQuaternion(stream);
                return v;
            }
            function ReadArray_aiVertexWeight(stream, data, size) {
                for (var i = 0; i < size; i++)
                    data[i] = Read_aiVertexWeight(stream);
            }
            function ReadArray_aiVectorKey(stream, data, size) {
                for (var i = 0; i < size; i++)
                    data[i] = Read_aiVectorKey(stream);
            }
            function ReadArray_aiQuatKey(stream, data, size) {
                for (var i = 0; i < size; i++)
                    data[i] = Read_aiQuatKey(stream);
            }
            function ReadBounds(stream, T, n) {
                return stream.Seek(sizeof(T) * n, aiOrigin_CUR);
            }
            function ai_assert(bool) {
                if (!bool)
                    throw 'asset failed';
            }
            function ReadBinaryNode(stream, parent, depth) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AINODE);
                Read_uint32_t(stream);
                var node = new aiNode();
                node.mParent = parent;
                node.mDepth = depth;
                node.mName = Read_aiString(stream);
                node.mTransformation = Read_aiMatrix4x4(stream);
                node.mNumChildren = Read_unsigned_int(stream);
                node.mNumMeshes = Read_unsigned_int(stream);
                if (node.mNumMeshes) {
                    node.mMeshes = [];
                    for (var i = 0; i < node.mNumMeshes; ++i) {
                        node.mMeshes[i] = Read_unsigned_int(stream);
                    }
                }
                if (node.mNumChildren) {
                    node.mChildren = [];
                    for (var i = 0; i < node.mNumChildren; ++i) {
                        var node2 = ReadBinaryNode(stream, node, depth++);
                        node.mChildren[i] = node2;
                    }
                }
                return node;
            }
            function ReadBinaryBone(stream, b) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);
                Read_uint32_t(stream);
                b.mName = Read_aiString(stream);
                b.mNumWeights = Read_unsigned_int(stream);
                b.mOffsetMatrix = Read_aiMatrix4x4(stream);
                if (shortened) {
                    ReadBounds(stream, b.mWeights, b.mNumWeights);
                } else {
                    b.mWeights = [];
                    ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);
                }
                return b;
            }
            function ReadBinaryMesh(stream, mesh) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);
                Read_uint32_t(stream);
                mesh.mPrimitiveTypes = Read_unsigned_int(stream);
                mesh.mNumVertices = Read_unsigned_int(stream);
                mesh.mNumFaces = Read_unsigned_int(stream);
                mesh.mNumBones = Read_unsigned_int(stream);
                mesh.mMaterialIndex = Read_unsigned_int(stream);
                mesh.mNumUVComponents = [];
                var c = Read_unsigned_int(stream);
                if (c & ASSBIN_MESH_HAS_POSITIONS) {
                    if (shortened) {
                        ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);
                    } else {
                        mesh.mVertices = [];
                        mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                    }
                }
                if (c & ASSBIN_MESH_HAS_NORMALS) {
                    if (shortened) {
                        ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);
                    } else {
                        mesh.mNormals = [];
                        mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                    }
                }
                if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {
                    if (shortened) {
                        ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);
                        ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);
                    } else {
                        mesh.mTangents = [];
                        mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                        mesh.mBitangents = [];
                        mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);
                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);
                    }
                }
                for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {
                    if (!(c & ASSBIN_MESH_HAS_COLOR(n)))
                        break;
                    if (shortened) {
                        ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);
                    } else {
                        mesh.mColors[n] = [];
                        mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);
                        stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);
                    }
                }
                mesh.mTexCoordsBuffers = [];
                for (var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {
                    if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))
                        break;
                    mesh.mNumUVComponents[n] = Read_unsigned_int(stream);
                    if (shortened) {
                        ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);
                    } else {
                        mesh.mTextureCoords[n] = [];
                        mesh.mTexCoordsBuffers[n] = [];
                        for (var uv = 0; uv < mesh.mNumVertices; uv++) {
                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));
                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));
                            readFloat(stream);
                        }
                    }
                }
                if (shortened) {
                    Read_unsigned_int(stream);
                } else {
                    mesh.mFaces = [];
                    mesh.mIndexArray = [];
                    for (var i = 0; i < mesh.mNumFaces; ++i) {
                        var f = mesh.mFaces[i] = new aiFace();
                        f.mNumIndices = Read_uint16_t(stream);
                        f.mIndices = [];
                        for (var a = 0; a < f.mNumIndices; ++a) {
                            if (mesh.mNumVertices < 1 << 16) {
                                f.mIndices[a] = Read_uint16_t(stream);
                            } else {
                                f.mIndices[a] = Read_unsigned_int(stream);
                            }
                        }
                        if (f.mNumIndices === 3) {
                            mesh.mIndexArray.push(f.mIndices[0]);
                            mesh.mIndexArray.push(f.mIndices[1]);
                            mesh.mIndexArray.push(f.mIndices[2]);
                        } else if (f.mNumIndices === 4) {
                            mesh.mIndexArray.push(f.mIndices[0]);
                            mesh.mIndexArray.push(f.mIndices[1]);
                            mesh.mIndexArray.push(f.mIndices[2]);
                            mesh.mIndexArray.push(f.mIndices[2]);
                            mesh.mIndexArray.push(f.mIndices[3]);
                            mesh.mIndexArray.push(f.mIndices[0]);
                        } else {
                            throw new Error("Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.");
                        }
                    }
                }
                if (mesh.mNumBones) {
                    mesh.mBones = [];
                    for (var a = 0; a < mesh.mNumBones; ++a) {
                        mesh.mBones[a] = new aiBone();
                        ReadBinaryBone(stream, mesh.mBones[a]);
                    }
                }
            }
            function ReadBinaryMaterialProperty(stream, prop) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);
                Read_uint32_t(stream);
                prop.mKey = Read_aiString(stream);
                prop.mSemantic = Read_unsigned_int(stream);
                prop.mIndex = Read_unsigned_int(stream);
                prop.mDataLength = Read_unsigned_int(stream);
                prop.mType = Read_unsigned_int(stream);
                prop.mData = [];
                stream.ReadBytes(prop.mData, 1, prop.mDataLength);
            }
            function ReadBinaryMaterial(stream, mat) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);
                Read_uint32_t(stream);
                mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);
                if (mat.mNumProperties) {
                    if (mat.mProperties) {
                        delete mat.mProperties;
                    }
                    mat.mProperties = [];
                    for (var i = 0; i < mat.mNumProperties; ++i) {
                        mat.mProperties[i] = new aiMaterialProperty();
                        ReadBinaryMaterialProperty(stream, mat.mProperties[i]);
                    }
                }
            }
            function ReadBinaryNodeAnim(stream, nd) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);
                Read_uint32_t(stream);
                nd.mNodeName = Read_aiString(stream);
                nd.mNumPositionKeys = Read_unsigned_int(stream);
                nd.mNumRotationKeys = Read_unsigned_int(stream);
                nd.mNumScalingKeys = Read_unsigned_int(stream);
                nd.mPreState = Read_unsigned_int(stream);
                nd.mPostState = Read_unsigned_int(stream);
                if (nd.mNumPositionKeys) {
                    if (shortened) {
                        ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);
                    } else {
                        nd.mPositionKeys = [];
                        ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);
                    }
                }
                if (nd.mNumRotationKeys) {
                    if (shortened) {
                        ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);
                    } else {
                        nd.mRotationKeys = [];
                        ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);
                    }
                }
                if (nd.mNumScalingKeys) {
                    if (shortened) {
                        ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);
                    } else {
                        nd.mScalingKeys = [];
                        ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);
                    }
                }
            }
            function ReadBinaryAnim(stream, anim) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);
                Read_uint32_t(stream);
                anim.mName = Read_aiString(stream);
                anim.mDuration = Read_double(stream);
                anim.mTicksPerSecond = Read_double(stream);
                anim.mNumChannels = Read_unsigned_int(stream);
                if (anim.mNumChannels) {
                    anim.mChannels = [];
                    for (var a = 0; a < anim.mNumChannels; ++a) {
                        anim.mChannels[a] = new aiNodeAnim();
                        ReadBinaryNodeAnim(stream, anim.mChannels[a]);
                    }
                }
            }
            function ReadBinaryTexture(stream, tex) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);
                Read_uint32_t(stream);
                tex.mWidth = Read_unsigned_int(stream);
                tex.mHeight = Read_unsigned_int(stream);
                stream.ReadBytes(tex.achFormatHint, 1, 4);
                if (!shortened) {
                    if (!tex.mHeight) {
                        tex.pcData = [];
                        stream.ReadBytes(tex.pcData, 1, tex.mWidth);
                    } else {
                        tex.pcData = [];
                        stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);
                    }
                }
            }
            function ReadBinaryLight(stream, l) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);
                Read_uint32_t(stream);
                l.mName = Read_aiString(stream);
                l.mType = Read_unsigned_int(stream);
                if (l.mType != aiLightSource_DIRECTIONAL) {
                    l.mAttenuationConstant = readFloat(stream);
                    l.mAttenuationLinear = readFloat(stream);
                    l.mAttenuationQuadratic = readFloat(stream);
                }
                l.mColorDiffuse = Read_aiColor3D(stream);
                l.mColorSpecular = Read_aiColor3D(stream);
                l.mColorAmbient = Read_aiColor3D(stream);
                if (l.mType == aiLightSource_SPOT) {
                    l.mAngleInnerCone = readFloat(stream);
                    l.mAngleOuterCone = readFloat(stream);
                }
            }
            function ReadBinaryCamera(stream, cam) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);
                Read_uint32_t(stream);
                cam.mName = Read_aiString(stream);
                cam.mPosition = Read_aiVector3D(stream);
                cam.mLookAt = Read_aiVector3D(stream);
                cam.mUp = Read_aiVector3D(stream);
                cam.mHorizontalFOV = readFloat(stream);
                cam.mClipPlaneNear = readFloat(stream);
                cam.mClipPlaneFar = readFloat(stream);
                cam.mAspect = readFloat(stream);
            }
            function ReadBinaryScene(stream, scene) {
                var chunkID = Read_uint32_t(stream);
                ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);
                Read_uint32_t(stream);
                scene.mFlags = Read_unsigned_int(stream);
                scene.mNumMeshes = Read_unsigned_int(stream);
                scene.mNumMaterials = Read_unsigned_int(stream);
                scene.mNumAnimations = Read_unsigned_int(stream);
                scene.mNumTextures = Read_unsigned_int(stream);
                scene.mNumLights = Read_unsigned_int(stream);
                scene.mNumCameras = Read_unsigned_int(stream);
                scene.mRootNode = new aiNode();
                scene.mRootNode = ReadBinaryNode(stream, null, 0);
                if (scene.mNumMeshes) {
                    scene.mMeshes = [];
                    for (var i = 0; i < scene.mNumMeshes; ++i) {
                        scene.mMeshes[i] = new aiMesh();
                        ReadBinaryMesh(stream, scene.mMeshes[i]);
                    }
                }
                if (scene.mNumMaterials) {
                    scene.mMaterials = [];
                    for (var i = 0; i < scene.mNumMaterials; ++i) {
                        scene.mMaterials[i] = new aiMaterial();
                        ReadBinaryMaterial(stream, scene.mMaterials[i]);
                    }
                }
                if (scene.mNumAnimations) {
                    scene.mAnimations = [];
                    for (var i = 0; i < scene.mNumAnimations; ++i) {
                        scene.mAnimations[i] = new aiAnimation();
                        ReadBinaryAnim(stream, scene.mAnimations[i]);
                    }
                }
                if (scene.mNumTextures) {
                    scene.mTextures = [];
                    for (var i = 0; i < scene.mNumTextures; ++i) {
                        scene.mTextures[i] = new aiTexture();
                        ReadBinaryTexture(stream, scene.mTextures[i]);
                    }
                }
                if (scene.mNumLights) {
                    scene.mLights = [];
                    for (var i = 0; i < scene.mNumLights; ++i) {
                        scene.mLights[i] = new aiLight();
                        ReadBinaryLight(stream, scene.mLights[i]);
                    }
                }
                if (scene.mNumCameras) {
                    scene.mCameras = [];
                    for (var i = 0; i < scene.mNumCameras; ++i) {
                        scene.mCameras[i] = new aiCamera();
                        ReadBinaryCamera(stream, scene.mCameras[i]);
                    }
                }
            }
            var aiOrigin_CUR = 0;
            var aiOrigin_BEG = 1;
            function extendStream(stream) {
                stream.readOffset = 0;
                stream.Seek = function (off, ori) {
                    if (ori == aiOrigin_CUR) {
                        stream.readOffset += off;
                    }
                    if (ori == aiOrigin_BEG) {
                        stream.readOffset = off;
                    }
                };
                stream.ReadBytes = function (buff, size, n) {
                    var bytes = size * n;
                    for (var i = 0; i < bytes; i++)
                        buff[i] = Read_uint8_t(this);
                };
                stream.subArray32 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Float32Array(newbuff);
                };
                stream.subArrayUint16 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Uint16Array(newbuff);
                };
                stream.subArrayUint8 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Uint8Array(newbuff);
                };
                stream.subArrayUint32 = function (start, end) {
                    var buff = this.buffer;
                    var newbuff = buff.slice(start, end);
                    return new Uint32Array(newbuff);
                };
            }
            var shortened, compressed;
            function InternReadFile(pFiledata) {
                var pScene = new aiScene();
                var stream = new DataView(pFiledata);
                extendStream(stream);
                stream.Seek(44, aiOrigin_CUR);
                pScene.versionMajor = Read_unsigned_int(stream);
                pScene.versionMinor = Read_unsigned_int(stream);
                pScene.versionRevision = Read_unsigned_int(stream);
                pScene.compileFlags = Read_unsigned_int(stream);
                shortened = Read_uint16_t(stream) > 0;
                compressed = Read_uint16_t(stream) > 0;
                if (shortened)
                    throw 'Shortened binaries are not supported!';
                stream.Seek(256, aiOrigin_CUR);
                stream.Seek(128, aiOrigin_CUR);
                stream.Seek(64, aiOrigin_CUR);
                if (compressed) {
                    var uncompressedSize = Read_uint32_t(stream);
                    var compressedSize = stream.FileSize() - stream.Tell();
                    var compressedData = [];
                    stream.Read(compressedData, 1, compressedSize);
                    var uncompressedData = [];
                    uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);
                    var buff = new ArrayBuffer(uncompressedData);
                    ReadBinaryScene(buff, pScene);
                } else {
                    ReadBinaryScene(stream, pScene);
                }
                return pScene.toTHREE();
            }
            return InternReadFile(buffer);
        }
    });
    return AssimpLoader;
});
define('skylark-threejs-ex/loaders/AWDLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var AWDLoader = function () {
        var AWD_FIELD_INT8 = 1, AWD_FIELD_INT16 = 2, AWD_FIELD_INT32 = 3, AWD_FIELD_UINT8 = 4, AWD_FIELD_UINT16 = 5, AWD_FIELD_UINT32 = 6, AWD_FIELD_FLOAT32 = 7, AWD_FIELD_FLOAT64 = 8, AWD_FIELD_BOOL = 21, AWD_FIELD_BADDR = 23, AWD_FIELD_VECTOR2x1 = 41, AWD_FIELD_VECTOR3x1 = 42, AWD_FIELD_VECTOR4x1 = 43, AWD_FIELD_MTX3x2 = 44, AWD_FIELD_MTX3x3 = 45, AWD_FIELD_MTX4x3 = 46, AWD_FIELD_MTX4x4 = 47, BOOL = 21, BADDR = 23, UINT8 = 4, UINT16 = 5, FLOAT32 = 7, FLOAT64 = 8;
        var littleEndian = true;
        function Block() {
            this.id = 0;
            this.data = null;
            this.namespace = 0;
            this.flags = 0;
        }
        function AWDProperties() {
        }
        AWDProperties.prototype = {
            set: function (key, value) {
                this[key] = value;
            },
            get: function (key, fallback) {
                if (this.hasOwnProperty(key)) {
                    return this[key];
                } else {
                    return fallback;
                }
            }
        };
        var AWDLoader = function (manager) {
            THREE.Loader.call(this, manager);
            this.trunk = new THREE.Object3D();
            this.materialFactory = undefined;
            this._url = '';
            this._baseDir = '';
            this._data = undefined;
            this._ptr = 0;
            this._version = [];
            this._streaming = false;
            this._optimized_for_accuracy = false;
            this._compression = 0;
            this._bodylen = 4294967295;
            this._blocks = [new Block()];
            this._accuracyMatrix = false;
            this._accuracyGeo = false;
            this._accuracyProps = false;
        };
        AWDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: AWDLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                this._url = url;
                this._baseDir = url.substr(0, url.lastIndexOf('/') + 1);
                var loader = new THREE.FileLoader(this.manager);
                loader.setPath(this.path);
                loader.setResponseType('arraybuffer');
                loader.load(url, function (text) {
                    onLoad(scope.parse(text));
                }, onProgress, onError);
            },
            parse: function (data) {
                var blen = data.byteLength;
                this._ptr = 0;
                this._data = new DataView(data);
                this._parseHeader();
                if (this._compression != 0) {
                    console.error('compressed AWD not supported');
                }
                if (!this._streaming && this._bodylen != data.byteLength - this._ptr) {
                    console.error('AWDLoader: body len does not match file length', this._bodylen, blen - this._ptr);
                }
                while (this._ptr < blen) {
                    this.parseNextBlock();
                }
                return this.trunk;
            },
            parseNextBlock: function () {
                var assetData, block, blockId = this.readU32(), ns = this.readU8(), type = this.readU8(), flags = this.readU8(), len = this.readU32();
                switch (type) {
                case 1:
                    assetData = this.parseMeshData();
                    break;
                case 22:
                    assetData = this.parseContainer();
                    break;
                case 23:
                    assetData = this.parseMeshInstance();
                    break;
                case 81:
                    assetData = this.parseMaterial();
                    break;
                case 82:
                    assetData = this.parseTexture();
                    break;
                case 101:
                    assetData = this.parseSkeleton();
                    break;
                case 112:
                    assetData = this.parseMeshPoseAnimation(false);
                    break;
                case 113:
                    assetData = this.parseVertexAnimationSet();
                    break;
                case 102:
                    assetData = this.parseSkeletonPose();
                    break;
                case 103:
                    assetData = this.parseSkeletonAnimation();
                    break;
                case 122:
                    assetData = this.parseAnimatorSet();
                    break;
                default:
                    this._ptr += len;
                    break;
                }
                this._blocks[blockId] = block = new Block();
                block.data = assetData;
                block.id = blockId;
                block.namespace = ns;
                block.flags = flags;
            },
            _parseHeader: function () {
                var version = this._version, awdmagic = this.readU8() << 16 | this.readU8() << 8 | this.readU8();
                if (awdmagic != 4282180)
                    throw new Error('AWDLoader - bad magic');
                version[0] = this.readU8();
                version[1] = this.readU8();
                var flags = this.readU16();
                this._streaming = (flags & 1) == 1;
                if (version[0] === 2 && version[1] === 1) {
                    this._accuracyMatrix = (flags & 2) === 2;
                    this._accuracyGeo = (flags & 4) === 4;
                    this._accuracyProps = (flags & 8) === 8;
                }
                this._geoNrType = this._accuracyGeo ? FLOAT64 : FLOAT32;
                this._matrixNrType = this._accuracyMatrix ? FLOAT64 : FLOAT32;
                this._propsNrType = this._accuracyProps ? FLOAT64 : FLOAT32;
                this._optimized_for_accuracy = (flags & 2) === 2;
                this._compression = this.readU8();
                this._bodylen = this.readU32();
            },
            parseContainer: function () {
                var parent, ctr = new THREE.Object3D(), par_id = this.readU32(), mtx = this.parseMatrix4();
                ctr.name = this.readUTF();
                ctr.applyMatrix4(mtx);
                parent = this._blocks[par_id].data || this.trunk;
                parent.add(ctr);
                this.parseProperties({
                    1: this._matrixNrType,
                    2: this._matrixNrType,
                    3: this._matrixNrType,
                    4: UINT8
                });
                ctr.extra = this.parseUserAttributes();
                return ctr;
            },
            parseMeshInstance: function () {
                var name, mesh, geometries, meshLen, meshes, par_id, data_id, mtx, materials, mat, mat_id, num_materials, parent, i;
                par_id = this.readU32();
                mtx = this.parseMatrix4();
                name = this.readUTF();
                data_id = this.readU32();
                num_materials = this.readU16();
                geometries = this.getBlock(data_id);
                materials = [];
                for (i = 0; i < num_materials; i++) {
                    mat_id = this.readU32();
                    mat = this.getBlock(mat_id);
                    materials.push(mat);
                }
                meshLen = geometries.length;
                meshes = [];
                if (meshLen > 1) {
                    mesh = new THREE.Object3D();
                    for (i = 0; i < meshLen; i++) {
                        var sm = new THREE.Mesh(geometries[i]);
                        meshes.push(sm);
                        mesh.add(sm);
                    }
                } else {
                    mesh = new THREE.Mesh(geometries[0]);
                    meshes.push(mesh);
                }
                mesh.applyMatrix4(mtx);
                mesh.name = name;
                parent = this.getBlock(par_id) || this.trunk;
                parent.add(mesh);
                var matLen = materials.length;
                var maxLen = Math.max(meshLen, matLen);
                for (i = 0; i < maxLen; i++)
                    meshes[i % meshLen].material = materials[i % matLen];
                this.parseProperties(null);
                mesh.extra = this.parseUserAttributes();
                return mesh;
            },
            parseMaterial: function () {
                var name, type, props, mat, attributes, num_methods, methods_parsed;
                name = this.readUTF();
                type = this.readU8();
                num_methods = this.readU8();
                props = this.parseProperties({
                    1: AWD_FIELD_INT32,
                    2: AWD_FIELD_BADDR,
                    11: AWD_FIELD_BOOL,
                    12: AWD_FIELD_FLOAT32,
                    13: AWD_FIELD_BOOL
                });
                methods_parsed = 0;
                while (methods_parsed < num_methods) {
                    this.readU16();
                    this.parseProperties(null);
                    this.parseUserAttributes();
                }
                attributes = this.parseUserAttributes();
                if (this.materialFactory !== undefined) {
                    mat = this.materialFactory(name);
                    if (mat)
                        return mat;
                }
                mat = new THREE.MeshPhongMaterial();
                if (type === 1) {
                    mat.color.setHex(props.get(1, 13421772));
                } else if (type === 2) {
                    var tex_addr = props.get(2, 0);
                    mat.map = this.getBlock(tex_addr);
                }
                mat.extra = attributes;
                mat.alphaThreshold = props.get(12, 0);
                mat.repeat = props.get(13, false);
                return mat;
            },
            parseTexture: function () {
                var name = this.readUTF(), type = this.readU8(), asset, data_len;
                if (type === 0) {
                    data_len = this.readU32();
                    var url = this.readUTFBytes(data_len);
                    console.log(url);
                    asset = this.loadTexture(url);
                    asset.userData = {};
                    asset.userData.name = name;
                } else {
                }
                this.parseProperties(null);
                this.parseUserAttributes();
                return asset;
            },
            loadTexture: function (url) {
                var tex = new THREE.Texture();
                var loader = new THREE.ImageLoader(this.manager);
                loader.load(this._baseDir + url, function (image) {
                    tex.image = image;
                    tex.needsUpdate = true;
                });
                return tex;
            },
            parseSkeleton: function () {
                this.readUTF();
                var num_joints = this.readU16(), skeleton = [], joints_parsed = 0;
                this.parseProperties(null);
                while (joints_parsed < num_joints) {
                    var joint, ibp;
                    this.readU16();
                    joint = new THREE.Bone();
                    joint.parent = this.readU16() - 1;
                    joint.name = this.readUTF();
                    ibp = this.parseMatrix4();
                    joint.skinMatrix = ibp;
                    this.parseProperties(null);
                    this.parseUserAttributes();
                    skeleton.push(joint);
                    joints_parsed++;
                }
                this.parseUserAttributes();
                return skeleton;
            },
            parseSkeletonPose: function () {
                var name = this.readUTF();
                var num_joints = this.readU16();
                this.parseProperties(null);
                var pose = [];
                var joints_parsed = 0;
                while (joints_parsed < num_joints) {
                    var has_transform;
                    var mtx_data;
                    has_transform = this.readU8();
                    if (has_transform === 1) {
                        mtx_data = this.parseMatrix4();
                    } else {
                        mtx_data = new THREE.Matrix4();
                    }
                    pose[joints_parsed] = mtx_data;
                    joints_parsed++;
                }
                this.parseUserAttributes();
                return pose;
            },
            parseSkeletonAnimation: function () {
                var frame_dur;
                var pose_addr;
                var pose;
                var name = this.readUTF();
                var clip = [];
                var num_frames = this.readU16();
                this.parseProperties(null);
                var frames_parsed = 0;
                while (frames_parsed < num_frames) {
                    pose_addr = this.readU32();
                    frame_dur = this.readU16();
                    pose = this._blocks[pose_addr].data;
                    clip.push({
                        pose: pose,
                        duration: frame_dur
                    });
                    frames_parsed++;
                }
                if (clip.length === 0) {
                    return;
                }
                this.parseUserAttributes();
                return clip;
            },
            parseVertexAnimationSet: function () {
                var poseBlockAdress, name = this.readUTF(), num_frames = this.readU16(), props = this.parseProperties({ 1: UINT16 }), frames_parsed = 0, skeletonFrames = [];
                while (frames_parsed < num_frames) {
                    poseBlockAdress = this.readU32();
                    skeletonFrames.push(this._blocks[poseBlockAdress].data);
                    frames_parsed++;
                }
                this.parseUserAttributes();
                return skeletonFrames;
            },
            parseAnimatorSet: function () {
                var animSetBlockAdress;
                var targetAnimationSet;
                var name = this.readUTF();
                var type = this.readU16();
                var props = this.parseProperties({ 1: BADDR });
                animSetBlockAdress = this.readU32();
                var targetMeshLength = this.readU16();
                var meshAdresses = [];
                for (var i = 0; i < targetMeshLength; i++)
                    meshAdresses.push(this.readU32());
                var activeState = this.readU16();
                var autoplay = Boolean(this.readU8());
                this.parseUserAttributes();
                this.parseUserAttributes();
                var targetMeshes = [];
                for (i = 0; i < meshAdresses.length; i++) {
                    targetMeshes.push(this._blocks[meshAdresses[i]].data);
                }
                targetAnimationSet = this._blocks[animSetBlockAdress].data;
                var thisAnimator;
                if (type == 1) {
                    thisAnimator = {
                        animationSet: targetAnimationSet,
                        skeleton: this._blocks[props.get(1, 0)].data
                    };
                } else if (type == 2) {
                }
                for (i = 0; i < targetMeshes.length; i++) {
                    targetMeshes[i].animator = thisAnimator;
                }
                return thisAnimator;
            },
            parseMeshData: function () {
                var name = this.readUTF(), num_subs = this.readU16(), geom, subs_parsed = 0, buffer, geometries = [];
                this.parseProperties({
                    1: this._geoNrType,
                    2: this._geoNrType
                });
                while (subs_parsed < num_subs) {
                    var sm_len, sm_end, attrib;
                    geom = new THREE.BufferGeometry();
                    geom.name = name;
                    geometries.push(geom);
                    sm_len = this.readU32();
                    sm_end = this._ptr + sm_len;
                    this.parseProperties({
                        1: this._geoNrType,
                        2: this._geoNrType
                    });
                    while (this._ptr < sm_end) {
                        var idx = 0, str_type = this.readU8(), str_ftype = this.readU8(), str_len = this.readU32(), str_end = str_len + this._ptr;
                        if (str_type === 1) {
                            buffer = new Float32Array(str_len / 12 * 3);
                            attrib = new THREE.BufferAttribute(buffer, 3);
                            geom.setAttribute('position', attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx] = -this.readF32();
                                buffer[idx + 1] = this.readF32();
                                buffer[idx + 2] = this.readF32();
                                idx += 3;
                            }
                        } else if (str_type === 2) {
                            buffer = new Uint16Array(str_len / 2);
                            attrib = new THREE.BufferAttribute(buffer, 1);
                            geom.setIndex(attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx + 1] = this.readU16();
                                buffer[idx] = this.readU16();
                                buffer[idx + 2] = this.readU16();
                                idx += 3;
                            }
                        } else if (str_type === 3) {
                            buffer = new Float32Array(str_len / 8 * 2);
                            attrib = new THREE.BufferAttribute(buffer, 2);
                            geom.setAttribute('uv', attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx] = this.readF32();
                                buffer[idx + 1] = 1 - this.readF32();
                                idx += 2;
                            }
                        } else if (str_type === 4) {
                            buffer = new Float32Array(str_len / 12 * 3);
                            attrib = new THREE.BufferAttribute(buffer, 3);
                            geom.setAttribute('normal', attrib);
                            idx = 0;
                            while (this._ptr < str_end) {
                                buffer[idx] = -this.readF32();
                                buffer[idx + 1] = this.readF32();
                                buffer[idx + 2] = this.readF32();
                                idx += 3;
                            }
                        } else {
                            this._ptr = str_end;
                        }
                    }
                    this.parseUserAttributes();
                    geom.computeBoundingSphere();
                    subs_parsed++;
                }
                this.parseUserAttributes();
                return geometries;
            },
            parseMeshPoseAnimation: function (poseOnly) {
                var num_frames = 1, num_submeshes, frames_parsed, subMeshParsed, str_len, str_end, geom, idx = 0, clip = {}, num_Streams, streamsParsed, streamtypes = [], props, name = this.readUTF(), geoAdress = this.readU32();
                var mesh = this.getBlock(geoAdress);
                if (mesh === null) {
                    console.log('parseMeshPoseAnimation target mesh not found at:', geoAdress);
                    return;
                }
                geom = mesh.geometry;
                geom.morphTargets = [];
                if (!poseOnly)
                    num_frames = this.readU16();
                num_submeshes = this.readU16();
                num_Streams = this.readU16();
                streamsParsed = 0;
                while (streamsParsed < num_Streams) {
                    streamtypes.push(this.readU16());
                    streamsParsed++;
                }
                props = this.parseProperties({
                    1: BOOL,
                    2: BOOL
                });
                clip.looping = props.get(1, true);
                clip.stitchFinalFrame = props.get(2, false);
                frames_parsed = 0;
                while (frames_parsed < num_frames) {
                    this.readU16();
                    subMeshParsed = 0;
                    while (subMeshParsed < num_submeshes) {
                        streamsParsed = 0;
                        str_len = this.readU32();
                        str_end = this._ptr + str_len;
                        while (streamsParsed < num_Streams) {
                            if (streamtypes[streamsParsed] === 1) {
                                var buffer = new Float32Array(str_len / 4);
                                geom.morphTargets.push({ array: buffer });
                                idx = 0;
                                while (this._ptr < str_end) {
                                    buffer[idx] = this.readF32();
                                    buffer[idx + 1] = this.readF32();
                                    buffer[idx + 2] = this.readF32();
                                    idx += 3;
                                }
                                subMeshParsed++;
                            } else
                                this._ptr = str_end;
                            streamsParsed++;
                        }
                    }
                    frames_parsed++;
                }
                this.parseUserAttributes();
                return null;
            },
            getBlock: function (id) {
                return this._blocks[id].data;
            },
            parseMatrix4: function () {
                var mtx = new THREE.Matrix4();
                var e = mtx.elements;
                e[0] = this.readF32();
                e[1] = this.readF32();
                e[2] = this.readF32();
                e[3] = 0;
                e[4] = this.readF32();
                e[5] = this.readF32();
                e[6] = this.readF32();
                e[7] = 0;
                e[8] = this.readF32();
                e[9] = this.readF32();
                e[10] = this.readF32();
                e[11] = 0;
                e[12] = -this.readF32();
                e[13] = this.readF32();
                e[14] = this.readF32();
                e[15] = 1;
                return mtx;
            },
            parseProperties: function (expected) {
                var list_len = this.readU32();
                var list_end = this._ptr + list_len;
                var props = new AWDProperties();
                if (expected) {
                    while (this._ptr < list_end) {
                        var key = this.readU16();
                        var len = this.readU32();
                        var type;
                        if (expected.hasOwnProperty(key)) {
                            type = expected[key];
                            props.set(key, this.parseAttrValue(type, len));
                        } else {
                            this._ptr += len;
                        }
                    }
                }
                return props;
            },
            parseUserAttributes: function () {
                this._ptr = this.readU32() + this._ptr;
                return null;
            },
            parseAttrValue: function (type, len) {
                var elem_len;
                var read_func;
                switch (type) {
                case AWD_FIELD_INT8:
                    elem_len = 1;
                    read_func = this.readI8;
                    break;
                case AWD_FIELD_INT16:
                    elem_len = 2;
                    read_func = this.readI16;
                    break;
                case AWD_FIELD_INT32:
                    elem_len = 4;
                    read_func = this.readI32;
                    break;
                case AWD_FIELD_BOOL:
                case AWD_FIELD_UINT8:
                    elem_len = 1;
                    read_func = this.readU8;
                    break;
                case AWD_FIELD_UINT16:
                    elem_len = 2;
                    read_func = this.readU16;
                    break;
                case AWD_FIELD_UINT32:
                case AWD_FIELD_BADDR:
                    elem_len = 4;
                    read_func = this.readU32;
                    break;
                case AWD_FIELD_FLOAT32:
                    elem_len = 4;
                    read_func = this.readF32;
                    break;
                case AWD_FIELD_FLOAT64:
                    elem_len = 8;
                    read_func = this.readF64;
                    break;
                case AWD_FIELD_VECTOR2x1:
                case AWD_FIELD_VECTOR3x1:
                case AWD_FIELD_VECTOR4x1:
                case AWD_FIELD_MTX3x2:
                case AWD_FIELD_MTX3x3:
                case AWD_FIELD_MTX4x3:
                case AWD_FIELD_MTX4x4:
                    elem_len = 8;
                    read_func = this.readF64;
                    break;
                }
                if (elem_len < len) {
                    var list;
                    var num_read;
                    var num_elems;
                    list = [];
                    num_read = 0;
                    num_elems = len / elem_len;
                    while (num_read < num_elems) {
                        list.push(read_func.call(this));
                        num_read++;
                    }
                    return list;
                } else {
                    return read_func.call(this);
                }
            },
            readU8: function () {
                return this._data.getUint8(this._ptr++);
            },
            readI8: function () {
                return this._data.getInt8(this._ptr++);
            },
            readU16: function () {
                var a = this._data.getUint16(this._ptr, littleEndian);
                this._ptr += 2;
                return a;
            },
            readI16: function () {
                var a = this._data.getInt16(this._ptr, littleEndian);
                this._ptr += 2;
                return a;
            },
            readU32: function () {
                var a = this._data.getUint32(this._ptr, littleEndian);
                this._ptr += 4;
                return a;
            },
            readI32: function () {
                var a = this._data.getInt32(this._ptr, littleEndian);
                this._ptr += 4;
                return a;
            },
            readF32: function () {
                var a = this._data.getFloat32(this._ptr, littleEndian);
                this._ptr += 4;
                return a;
            },
            readF64: function () {
                var a = this._data.getFloat64(this._ptr, littleEndian);
                this._ptr += 8;
                return a;
            },
            readUTF: function () {
                var len = this.readU16();
                return this.readUTFBytes(len);
            },
            readUTFBytes: function (len) {
                var out = [], c = 0;
                while (out.length < len) {
                    var c1 = this._data.getUint8(this._ptr++, littleEndian);
                    if (c1 < 128) {
                        out[c++] = String.fromCharCode(c1);
                    } else if (c1 > 191 && c1 < 224) {
                        var c2 = this._data.getUint8(this._ptr++, littleEndian);
                        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
                    } else {
                        var c2 = this._data.getUint8(this._ptr++, littleEndian);
                        var c3 = this._data.getUint8(this._ptr++, littleEndian);
                        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                    }
                }
                return out.join('');
            }
        });
        return AWDLoader;
    }();
    return AWDLoader;
});
define('skylark-threejs-ex/loaders/BabylonLoader',[
	"skylark-threejs"
],function(THREE) {
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	THREE.BabylonLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.BabylonLoader.prototype = {

		constructor: THREE.BabylonLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		parse: function ( json ) {

			function parseMaterials( json ) {

				var materials = {};

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					var data = json.materials[ i ];

					var material = new THREE.MeshPhongMaterial();
					material.name = data.name;
					material.color.fromArray( data.diffuse );
					material.emissive.fromArray( data.emissive );
					material.specular.fromArray( data.specular );
					material.shininess = data.specularPower;
					material.opacity = data.alpha;

					materials[ data.id ] = material;

				}

				if ( json.multiMaterials ) {

					for ( var i = 0, l = json.multiMaterials.length; i < l; i ++ ) {

						var data = json.multiMaterials[ i ];

						console.warn( 'THREE.BabylonLoader: Multi materials not yet supported.' );

						materials[ data.id ] = new THREE.MeshPhongMaterial();

					}

				}

				return materials;

			}

			function parseGeometry( json ) {

				var geometry = new THREE.BufferGeometry();

				var indices = json.indices;
				var positions = json.positions;
				var normals = json.normals;
				var uvs = json.uvs;

				// indices

				geometry.setIndex( indices );

				// positions

				for ( var j = 2, jl = positions.length; j < jl; j += 3 ) {

					positions[ j ] = - positions[ j ];

				}

				geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );

				// normals

				if ( normals ) {

					for ( var j = 2, jl = normals.length; j < jl; j += 3 ) {

						normals[ j ] = - normals[ j ];

					}

					geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );

				}

				// uvs

				if ( uvs ) {

					geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );

				}

				// offsets

				var subMeshes = json.subMeshes;

				if ( subMeshes ) {

					for ( var j = 0, jl = subMeshes.length; j < jl; j ++ ) {

						var subMesh = subMeshes[ j ];

						geometry.addGroup( subMesh.indexStart, subMesh.indexCount );

					}

				}

				return geometry;

			}

			function parseObjects( json, materials ) {

				var objects = {};
				var scene = new THREE.Scene();

				var cameras = json.cameras;

				for ( var i = 0, l = cameras.length; i < l; i ++ ) {

					var data = cameras[ i ];

					var camera = new THREE.PerspectiveCamera( ( data.fov / Math.PI ) * 180, 1.33, data.minZ, data.maxZ );

					camera.name = data.name;
					camera.position.fromArray( data.position );
					if ( data.rotation ) camera.rotation.fromArray( data.rotation );

					objects[ data.id ] = camera;

				}

				var lights = json.lights;

				for ( var i = 0, l = lights.length; i < l; i ++ ) {

					var data = lights[ i ];

					var light;

					switch ( data.type ) {

						case 0:
							light = new THREE.PointLight();
							break;

						case 1:
							light = new THREE.DirectionalLight();
							break;

						case 2:
							light = new THREE.SpotLight();
							break;

						case 3:
							light = new THREE.HemisphereLight();
							break;

					}

					light.name = data.name;
					if ( data.position ) light.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );
					light.color.fromArray( data.diffuse );
					if ( data.groundColor ) light.groundColor.fromArray( data.groundColor );
					if ( data.intensity ) light.intensity = data.intensity;

					objects[ data.id ] = light;

					scene.add( light );

				}

				var meshes = json.meshes;

				for ( var i = 0, l = meshes.length; i < l; i ++ ) {

					var data = meshes[ i ];

					var object;

					if ( data.indices ) {

						var geometry = parseGeometry( data );

						object = new THREE.Mesh( geometry, materials[ data.materialId ] );

					} else {

						object = new THREE.Group();

					}

					object.name = data.name;
					object.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );
					object.rotation.fromArray( data.rotation );
					if ( data.rotationQuaternion ) object.quaternion.fromArray( data.rotationQuaternion );
					object.scale.fromArray( data.scaling );
					// object.visible = data.isVisible;

					if ( data.parentId ) {

						objects[ data.parentId ].add( object );

					} else {

						scene.add( object );

					}

					objects[ data.id ] = object;

				}

				return scene;

			}

			var materials = parseMaterials( json );
			var scene = parseObjects( json, materials );

			return scene;

		}

	};
	
	return THREE.BabylonLoader ;
});
define('skylark-threejs-ex/loaders/TGALoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var TGALoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    TGALoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: TGALoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var texture = new THREE.Texture();
            var loader = new THREE.FileLoader(this.manager);
            loader.setResponseType('arraybuffer');
            loader.setPath(this.path);
            loader.load(url, function (buffer) {
                texture.image = scope.parse(buffer);
                texture.needsUpdate = true;
                if (onLoad !== undefined) {
                    onLoad(texture);
                }
            }, onProgress, onError);
            return texture;
        },
        parse: function (buffer) {
            function tgaCheckHeader(header) {
                switch (header.image_type) {
                case TGA_TYPE_INDEXED:
                case TGA_TYPE_RLE_INDEXED:
                    if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {
                        console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');
                    }
                    break;
                case TGA_TYPE_RGB:
                case TGA_TYPE_GREY:
                case TGA_TYPE_RLE_RGB:
                case TGA_TYPE_RLE_GREY:
                    if (header.colormap_type) {
                        console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');
                    }
                    break;
                case TGA_TYPE_NO_DATA:
                    console.error('THREE.TGALoader: No data.');
                default:
                    console.error('THREE.TGALoader: Invalid type "%s".', header.image_type);
                }
                if (header.width <= 0 || header.height <= 0) {
                    console.error('THREE.TGALoader: Invalid image size.');
                }
                if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {
                    console.error('THREE.TGALoader: Invalid pixel size "%s".', header.pixel_size);
                }
            }
            function tgaParse(use_rle, use_pal, header, offset, data) {
                var pixel_data, pixel_size, pixel_total, palettes;
                pixel_size = header.pixel_size >> 3;
                pixel_total = header.width * header.height * pixel_size;
                if (use_pal) {
                    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));
                }
                if (use_rle) {
                    pixel_data = new Uint8Array(pixel_total);
                    var c, count, i;
                    var shift = 0;
                    var pixels = new Uint8Array(pixel_size);
                    while (shift < pixel_total) {
                        c = data[offset++];
                        count = (c & 127) + 1;
                        if (c & 128) {
                            for (i = 0; i < pixel_size; ++i) {
                                pixels[i] = data[offset++];
                            }
                            for (i = 0; i < count; ++i) {
                                pixel_data.set(pixels, shift + i * pixel_size);
                            }
                            shift += pixel_size * count;
                        } else {
                            count *= pixel_size;
                            for (i = 0; i < count; ++i) {
                                pixel_data[shift + i] = data[offset++];
                            }
                            shift += count;
                        }
                    }
                } else {
                    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);
                }
                return {
                    pixel_data: pixel_data,
                    palettes: palettes
                };
            }
            function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {
                var colormap = palettes;
                var color, i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i++) {
                        color = image[i];
                        imageData[(x + width * y) * 4 + 3] = 255;
                        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];
                        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];
                        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];
                    }
                }
                return imageData;
            }
            function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var color, i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 2) {
                        color = image[i + 0] + (image[i + 1] << 8);
                        imageData[(x + width * y) * 4 + 0] = (color & 31744) >> 7;
                        imageData[(x + width * y) * 4 + 1] = (color & 992) >> 2;
                        imageData[(x + width * y) * 4 + 2] = (color & 31) >> 3;
                        imageData[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;
                    }
                }
                return imageData;
            }
            function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 3) {
                        imageData[(x + width * y) * 4 + 3] = 255;
                        imageData[(x + width * y) * 4 + 2] = image[i + 0];
                        imageData[(x + width * y) * 4 + 1] = image[i + 1];
                        imageData[(x + width * y) * 4 + 0] = image[i + 2];
                    }
                }
                return imageData;
            }
            function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 4) {
                        imageData[(x + width * y) * 4 + 2] = image[i + 0];
                        imageData[(x + width * y) * 4 + 1] = image[i + 1];
                        imageData[(x + width * y) * 4 + 0] = image[i + 2];
                        imageData[(x + width * y) * 4 + 3] = image[i + 3];
                    }
                }
                return imageData;
            }
            function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var color, i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i++) {
                        color = image[i];
                        imageData[(x + width * y) * 4 + 0] = color;
                        imageData[(x + width * y) * 4 + 1] = color;
                        imageData[(x + width * y) * 4 + 2] = color;
                        imageData[(x + width * y) * 4 + 3] = 255;
                    }
                }
                return imageData;
            }
            function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {
                var i = 0, x, y;
                var width = header.width;
                for (y = y_start; y !== y_end; y += y_step) {
                    for (x = x_start; x !== x_end; x += x_step, i += 2) {
                        imageData[(x + width * y) * 4 + 0] = image[i + 0];
                        imageData[(x + width * y) * 4 + 1] = image[i + 0];
                        imageData[(x + width * y) * 4 + 2] = image[i + 0];
                        imageData[(x + width * y) * 4 + 3] = image[i + 1];
                    }
                }
                return imageData;
            }
            function getTgaRGBA(data, width, height, image, palette) {
                var x_start, y_start, x_step, y_step, x_end, y_end;
                switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {
                default:
                case TGA_ORIGIN_UL:
                    x_start = 0;
                    x_step = 1;
                    x_end = width;
                    y_start = 0;
                    y_step = 1;
                    y_end = height;
                    break;
                case TGA_ORIGIN_BL:
                    x_start = 0;
                    x_step = 1;
                    x_end = width;
                    y_start = height - 1;
                    y_step = -1;
                    y_end = -1;
                    break;
                case TGA_ORIGIN_UR:
                    x_start = width - 1;
                    x_step = -1;
                    x_end = -1;
                    y_start = 0;
                    y_step = 1;
                    y_end = height;
                    break;
                case TGA_ORIGIN_BR:
                    x_start = width - 1;
                    x_step = -1;
                    x_end = -1;
                    y_start = height - 1;
                    y_step = -1;
                    y_end = -1;
                    break;
                }
                if (use_grey) {
                    switch (header.pixel_size) {
                    case 8:
                        tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    case 16:
                        tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    default:
                        console.error('THREE.TGALoader: Format not supported.');
                        break;
                    }
                } else {
                    switch (header.pixel_size) {
                    case 8:
                        tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);
                        break;
                    case 16:
                        tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    case 24:
                        tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    case 32:
                        tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                        break;
                    default:
                        console.error('THREE.TGALoader: Format not supported.');
                        break;
                    }
                }
                return data;
            }
            var TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;
            if (buffer.length < 19)
                console.error('THREE.TGALoader: Not enough data to contain header.');
            var content = new Uint8Array(buffer), offset = 0, header = {
                    id_length: content[offset++],
                    colormap_type: content[offset++],
                    image_type: content[offset++],
                    colormap_index: content[offset++] | content[offset++] << 8,
                    colormap_length: content[offset++] | content[offset++] << 8,
                    colormap_size: content[offset++],
                    origin: [
                        content[offset++] | content[offset++] << 8,
                        content[offset++] | content[offset++] << 8
                    ],
                    width: content[offset++] | content[offset++] << 8,
                    height: content[offset++] | content[offset++] << 8,
                    pixel_size: content[offset++],
                    flags: content[offset++]
                };
            tgaCheckHeader(header);
            if (header.id_length + offset > buffer.length) {
                console.error('THREE.TGALoader: No data.');
            }
            offset += header.id_length;
            var use_rle = false, use_pal = false, use_grey = false;
            switch (header.image_type) {
            case TGA_TYPE_RLE_INDEXED:
                use_rle = true;
                use_pal = true;
                break;
            case TGA_TYPE_INDEXED:
                use_pal = true;
                break;
            case TGA_TYPE_RLE_RGB:
                use_rle = true;
                break;
            case TGA_TYPE_RGB:
                break;
            case TGA_TYPE_RLE_GREY:
                use_rle = true;
                use_grey = true;
                break;
            case TGA_TYPE_GREY:
                use_grey = true;
                break;
            }
            var useOffscreen = typeof OffscreenCanvas !== 'undefined';
            var canvas = useOffscreen ? new OffscreenCanvas(header.width, header.height) : document.createElement('canvas');
            canvas.width = header.width;
            canvas.height = header.height;
            var context = canvas.getContext('2d');
            var imageData = context.createImageData(header.width, header.height);
            var result = tgaParse(use_rle, use_pal, header, offset, content);
            var rgbaData = getTgaRGBA(imageData.data, header.width, header.height, result.pixel_data, result.palettes);
            context.putImageData(imageData, 0, 0);
            return useOffscreen ? canvas.transferToImageBitmap() : canvas;
        }
    });
    return  TGALoader;
});
define('skylark-threejs-ex/loaders/ColladaLoader',[
    "skylark-threejs",
    '../loaders/TGALoader'
], function (THREE, TGALoader) {
    'use strict';
    var ColladaLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    ColladaLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: ColladaLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text, path));
            }, onProgress, onError);
        },
        options: {
            set convertUpAxis(value) {
                console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');
            }
        },
        parse: function (text, path) {
            function getElementsByTagName(xml, name) {
                var array = [];
                var childNodes = xml.childNodes;
                for (var i = 0, l = childNodes.length; i < l; i++) {
                    var child = childNodes[i];
                    if (child.nodeName === name) {
                        array.push(child);
                    }
                }
                return array;
            }
            function parseStrings(text) {
                if (text.length === 0)
                    return [];
                var parts = text.trim().split(/\s+/);
                var array = new Array(parts.length);
                for (var i = 0, l = parts.length; i < l; i++) {
                    array[i] = parts[i];
                }
                return array;
            }
            function parseFloats(text) {
                if (text.length === 0)
                    return [];
                var parts = text.trim().split(/\s+/);
                var array = new Array(parts.length);
                for (var i = 0, l = parts.length; i < l; i++) {
                    array[i] = parseFloat(parts[i]);
                }
                return array;
            }
            function parseInts(text) {
                if (text.length === 0)
                    return [];
                var parts = text.trim().split(/\s+/);
                var array = new Array(parts.length);
                for (var i = 0, l = parts.length; i < l; i++) {
                    array[i] = parseInt(parts[i]);
                }
                return array;
            }
            function parseId(text) {
                return text.substring(1);
            }
            function generateId() {
                return 'three_default_' + count++;
            }
            function isEmpty(object) {
                return Object.keys(object).length === 0;
            }
            function parseAsset(xml) {
                return {
                    unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),
                    upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])
                };
            }
            function parseAssetUnit(xml) {
                if (xml !== undefined && xml.hasAttribute('meter') === true) {
                    return parseFloat(xml.getAttribute('meter'));
                } else {
                    return 1;
                }
            }
            function parseAssetUpAxis(xml) {
                return xml !== undefined ? xml.textContent : 'Y_UP';
            }
            function parseLibrary(xml, libraryName, nodeName, parser) {
                var library = getElementsByTagName(xml, libraryName)[0];
                if (library !== undefined) {
                    var elements = getElementsByTagName(library, nodeName);
                    for (var i = 0; i < elements.length; i++) {
                        parser(elements[i]);
                    }
                }
            }
            function buildLibrary(data, builder) {
                for (var name in data) {
                    var object = data[name];
                    object.build = builder(data[name]);
                }
            }
            function getBuild(data, builder) {
                if (data.build !== undefined)
                    return data.build;
                data.build = builder(data);
                return data.build;
            }
            function parseAnimation(xml) {
                var data = {
                    sources: {},
                    samplers: {},
                    channels: {}
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    var id;
                    switch (child.nodeName) {
                    case 'source':
                        id = child.getAttribute('id');
                        data.sources[id] = parseSource(child);
                        break;
                    case 'sampler':
                        id = child.getAttribute('id');
                        data.samplers[id] = parseAnimationSampler(child);
                        break;
                    case 'channel':
                        id = child.getAttribute('target');
                        data.channels[id] = parseAnimationChannel(child);
                        break;
                    default:
                        console.log(child);
                    }
                }
                library.animations[xml.getAttribute('id')] = data;
            }
            function parseAnimationSampler(xml) {
                var data = { inputs: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var id = parseId(child.getAttribute('source'));
                        var semantic = child.getAttribute('semantic');
                        data.inputs[semantic] = id;
                        break;
                    }
                }
                return data;
            }
            function parseAnimationChannel(xml) {
                var data = {};
                var target = xml.getAttribute('target');
                var parts = target.split('/');
                var id = parts.shift();
                var sid = parts.shift();
                var arraySyntax = sid.indexOf('(') !== -1;
                var memberSyntax = sid.indexOf('.') !== -1;
                if (memberSyntax) {
                    parts = sid.split('.');
                    sid = parts.shift();
                    data.member = parts.shift();
                } else if (arraySyntax) {
                    var indices = sid.split('(');
                    sid = indices.shift();
                    for (var i = 0; i < indices.length; i++) {
                        indices[i] = parseInt(indices[i].replace(/\)/, ''));
                    }
                    data.indices = indices;
                }
                data.id = id;
                data.sid = sid;
                data.arraySyntax = arraySyntax;
                data.memberSyntax = memberSyntax;
                data.sampler = parseId(xml.getAttribute('source'));
                return data;
            }
            function buildAnimation(data) {
                var tracks = [];
                var channels = data.channels;
                var samplers = data.samplers;
                var sources = data.sources;
                for (var target in channels) {
                    if (channels.hasOwnProperty(target)) {
                        var channel = channels[target];
                        var sampler = samplers[channel.sampler];
                        var inputId = sampler.inputs.INPUT;
                        var outputId = sampler.inputs.OUTPUT;
                        var inputSource = sources[inputId];
                        var outputSource = sources[outputId];
                        var animation = buildAnimationChannel(channel, inputSource, outputSource);
                        createKeyframeTracks(animation, tracks);
                    }
                }
                return tracks;
            }
            function getAnimation(id) {
                return getBuild(library.animations[id], buildAnimation);
            }
            function buildAnimationChannel(channel, inputSource, outputSource) {
                var node = library.nodes[channel.id];
                var object3D = getNode(node.id);
                var transform = node.transforms[channel.sid];
                var defaultMatrix = node.matrix.clone().transpose();
                var time, stride;
                var i, il, j, jl;
                var data = {};
                switch (transform) {
                case 'matrix':
                    for (i = 0, il = inputSource.array.length; i < il; i++) {
                        time = inputSource.array[i];
                        stride = i * outputSource.stride;
                        if (data[time] === undefined)
                            data[time] = {};
                        if (channel.arraySyntax === true) {
                            var value = outputSource.array[stride];
                            var index = channel.indices[0] + 4 * channel.indices[1];
                            data[time][index] = value;
                        } else {
                            for (j = 0, jl = outputSource.stride; j < jl; j++) {
                                data[time][j] = outputSource.array[stride + j];
                            }
                        }
                    }
                    break;
                case 'translate':
                    console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
                    break;
                case 'rotate':
                    console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
                    break;
                case 'scale':
                    console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
                    break;
                }
                var keyframes = prepareAnimationData(data, defaultMatrix);
                var animation = {
                    name: object3D.uuid,
                    keyframes: keyframes
                };
                return animation;
            }
            function prepareAnimationData(data, defaultMatrix) {
                var keyframes = [];
                for (var time in data) {
                    keyframes.push({
                        time: parseFloat(time),
                        value: data[time]
                    });
                }
                keyframes.sort(ascending);
                for (var i = 0; i < 16; i++) {
                    transformAnimationData(keyframes, i, defaultMatrix.elements[i]);
                }
                return keyframes;
                function ascending(a, b) {
                    return a.time - b.time;
                }
            }
            var position = new THREE.Vector3();
            var scale = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            function createKeyframeTracks(animation, tracks) {
                var keyframes = animation.keyframes;
                var name = animation.name;
                var times = [];
                var positionData = [];
                var quaternionData = [];
                var scaleData = [];
                for (var i = 0, l = keyframes.length; i < l; i++) {
                    var keyframe = keyframes[i];
                    var time = keyframe.time;
                    var value = keyframe.value;
                    matrix.fromArray(value).transpose();
                    matrix.decompose(position, quaternion, scale);
                    times.push(time);
                    positionData.push(position.x, position.y, position.z);
                    quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
                    scaleData.push(scale.x, scale.y, scale.z);
                }
                if (positionData.length > 0)
                    tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));
                if (quaternionData.length > 0)
                    tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));
                if (scaleData.length > 0)
                    tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));
                return tracks;
            }
            function transformAnimationData(keyframes, property, defaultValue) {
                var keyframe;
                var empty = true;
                var i, l;
                for (i = 0, l = keyframes.length; i < l; i++) {
                    keyframe = keyframes[i];
                    if (keyframe.value[property] === undefined) {
                        keyframe.value[property] = null;
                    } else {
                        empty = false;
                    }
                }
                if (empty === true) {
                    for (i = 0, l = keyframes.length; i < l; i++) {
                        keyframe = keyframes[i];
                        keyframe.value[property] = defaultValue;
                    }
                } else {
                    createMissingKeyframes(keyframes, property);
                }
            }
            function createMissingKeyframes(keyframes, property) {
                var prev, next;
                for (var i = 0, l = keyframes.length; i < l; i++) {
                    var keyframe = keyframes[i];
                    if (keyframe.value[property] === null) {
                        prev = getPrev(keyframes, i, property);
                        next = getNext(keyframes, i, property);
                        if (prev === null) {
                            keyframe.value[property] = next.value[property];
                            continue;
                        }
                        if (next === null) {
                            keyframe.value[property] = prev.value[property];
                            continue;
                        }
                        interpolate(keyframe, prev, next, property);
                    }
                }
            }
            function getPrev(keyframes, i, property) {
                while (i >= 0) {
                    var keyframe = keyframes[i];
                    if (keyframe.value[property] !== null)
                        return keyframe;
                    i--;
                }
                return null;
            }
            function getNext(keyframes, i, property) {
                while (i < keyframes.length) {
                    var keyframe = keyframes[i];
                    if (keyframe.value[property] !== null)
                        return keyframe;
                    i++;
                }
                return null;
            }
            function interpolate(key, prev, next, property) {
                if (next.time - prev.time === 0) {
                    key.value[property] = prev.value[property];
                    return;
                }
                key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];
            }
            function parseAnimationClip(xml) {
                var data = {
                    name: xml.getAttribute('id') || 'default',
                    start: parseFloat(xml.getAttribute('start') || 0),
                    end: parseFloat(xml.getAttribute('end') || 0),
                    animations: []
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'instance_animation':
                        data.animations.push(parseId(child.getAttribute('url')));
                        break;
                    }
                }
                library.clips[xml.getAttribute('id')] = data;
            }
            function buildAnimationClip(data) {
                var tracks = [];
                var name = data.name;
                var duration = data.end - data.start || -1;
                var animations = data.animations;
                for (var i = 0, il = animations.length; i < il; i++) {
                    var animationTracks = getAnimation(animations[i]);
                    for (var j = 0, jl = animationTracks.length; j < jl; j++) {
                        tracks.push(animationTracks[j]);
                    }
                }
                return new THREE.AnimationClip(name, duration, tracks);
            }
            function getAnimationClip(id) {
                return getBuild(library.clips[id], buildAnimationClip);
            }
            function parseController(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'skin':
                        data.id = parseId(child.getAttribute('source'));
                        data.skin = parseSkin(child);
                        break;
                    case 'morph':
                        data.id = parseId(child.getAttribute('source'));
                        console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');
                        break;
                    }
                }
                library.controllers[xml.getAttribute('id')] = data;
            }
            function parseSkin(xml) {
                var data = { sources: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'bind_shape_matrix':
                        data.bindShapeMatrix = parseFloats(child.textContent);
                        break;
                    case 'source':
                        var id = child.getAttribute('id');
                        data.sources[id] = parseSource(child);
                        break;
                    case 'joints':
                        data.joints = parseJoints(child);
                        break;
                    case 'vertex_weights':
                        data.vertexWeights = parseVertexWeights(child);
                        break;
                    }
                }
                return data;
            }
            function parseJoints(xml) {
                var data = { inputs: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var semantic = child.getAttribute('semantic');
                        var id = parseId(child.getAttribute('source'));
                        data.inputs[semantic] = id;
                        break;
                    }
                }
                return data;
            }
            function parseVertexWeights(xml) {
                var data = { inputs: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var semantic = child.getAttribute('semantic');
                        var id = parseId(child.getAttribute('source'));
                        var offset = parseInt(child.getAttribute('offset'));
                        data.inputs[semantic] = {
                            id: id,
                            offset: offset
                        };
                        break;
                    case 'vcount':
                        data.vcount = parseInts(child.textContent);
                        break;
                    case 'v':
                        data.v = parseInts(child.textContent);
                        break;
                    }
                }
                return data;
            }
            function buildController(data) {
                var build = { id: data.id };
                var geometry = library.geometries[build.id];
                if (data.skin !== undefined) {
                    build.skin = buildSkin(data.skin);
                    geometry.sources.skinIndices = build.skin.indices;
                    geometry.sources.skinWeights = build.skin.weights;
                }
                return build;
            }
            function buildSkin(data) {
                var BONE_LIMIT = 4;
                var build = {
                    joints: [],
                    indices: {
                        array: [],
                        stride: BONE_LIMIT
                    },
                    weights: {
                        array: [],
                        stride: BONE_LIMIT
                    }
                };
                var sources = data.sources;
                var vertexWeights = data.vertexWeights;
                var vcount = vertexWeights.vcount;
                var v = vertexWeights.v;
                var jointOffset = vertexWeights.inputs.JOINT.offset;
                var weightOffset = vertexWeights.inputs.WEIGHT.offset;
                var jointSource = data.sources[data.joints.inputs.JOINT];
                var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];
                var weights = sources[vertexWeights.inputs.WEIGHT.id].array;
                var stride = 0;
                var i, j, l;
                for (i = 0, l = vcount.length; i < l; i++) {
                    var jointCount = vcount[i];
                    var vertexSkinData = [];
                    for (j = 0; j < jointCount; j++) {
                        var skinIndex = v[stride + jointOffset];
                        var weightId = v[stride + weightOffset];
                        var skinWeight = weights[weightId];
                        vertexSkinData.push({
                            index: skinIndex,
                            weight: skinWeight
                        });
                        stride += 2;
                    }
                    vertexSkinData.sort(descending);
                    for (j = 0; j < BONE_LIMIT; j++) {
                        var d = vertexSkinData[j];
                        if (d !== undefined) {
                            build.indices.array.push(d.index);
                            build.weights.array.push(d.weight);
                        } else {
                            build.indices.array.push(0);
                            build.weights.array.push(0);
                        }
                    }
                }
                if (data.bindShapeMatrix) {
                    build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();
                } else {
                    build.bindMatrix = new THREE.Matrix4().identity();
                }
                for (i = 0, l = jointSource.array.length; i < l; i++) {
                    var name = jointSource.array[i];
                    var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();
                    build.joints.push({
                        name: name,
                        boneInverse: boneInverse
                    });
                }
                return build;
                function descending(a, b) {
                    return b.weight - a.weight;
                }
            }
            function getController(id) {
                return getBuild(library.controllers[id], buildController);
            }
            function parseImage(xml) {
                var data = { init_from: getElementsByTagName(xml, 'init_from')[0].textContent };
                library.images[xml.getAttribute('id')] = data;
            }
            function buildImage(data) {
                if (data.build !== undefined)
                    return data.build;
                return data.init_from;
            }
            function getImage(id) {
                var data = library.images[id];
                if (data !== undefined) {
                    return getBuild(data, buildImage);
                }
                console.warn("THREE.ColladaLoader: Couldn't find image with ID:", id);
                return null;
            }
            function parseEffect(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'profile_COMMON':
                        data.profile = parseEffectProfileCOMMON(child);
                        break;
                    }
                }
                library.effects[xml.getAttribute('id')] = data;
            }
            function parseEffectProfileCOMMON(xml) {
                var data = {
                    surfaces: {},
                    samplers: {}
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'newparam':
                        parseEffectNewparam(child, data);
                        break;
                    case 'technique':
                        data.technique = parseEffectTechnique(child);
                        break;
                    case 'extra':
                        data.extra = parseEffectExtra(child);
                        break;
                    }
                }
                return data;
            }
            function parseEffectNewparam(xml, data) {
                var sid = xml.getAttribute('sid');
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'surface':
                        data.surfaces[sid] = parseEffectSurface(child);
                        break;
                    case 'sampler2D':
                        data.samplers[sid] = parseEffectSampler(child);
                        break;
                    }
                }
            }
            function parseEffectSurface(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'init_from':
                        data.init_from = child.textContent;
                        break;
                    }
                }
                return data;
            }
            function parseEffectSampler(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'source':
                        data.source = child.textContent;
                        break;
                    }
                }
                return data;
            }
            function parseEffectTechnique(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'constant':
                    case 'lambert':
                    case 'blinn':
                    case 'phong':
                        data.type = child.nodeName;
                        data.parameters = parseEffectParameters(child);
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameters(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'emission':
                    case 'diffuse':
                    case 'specular':
                    case 'bump':
                    case 'ambient':
                    case 'shininess':
                    case 'transparency':
                        data[child.nodeName] = parseEffectParameter(child);
                        break;
                    case 'transparent':
                        data[child.nodeName] = {
                            opaque: child.getAttribute('opaque'),
                            data: parseEffectParameter(child)
                        };
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameter(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'color':
                        data[child.nodeName] = parseFloats(child.textContent);
                        break;
                    case 'float':
                        data[child.nodeName] = parseFloat(child.textContent);
                        break;
                    case 'texture':
                        data[child.nodeName] = {
                            id: child.getAttribute('texture'),
                            extra: parseEffectParameterTexture(child)
                        };
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameterTexture(xml) {
                var data = { technique: {} };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'extra':
                        parseEffectParameterTextureExtra(child, data);
                        break;
                    }
                }
                return data;
            }
            function parseEffectParameterTextureExtra(xml, data) {
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique':
                        parseEffectParameterTextureExtraTechnique(child, data);
                        break;
                    }
                }
            }
            function parseEffectParameterTextureExtraTechnique(xml, data) {
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'repeatU':
                    case 'repeatV':
                    case 'offsetU':
                    case 'offsetV':
                        data.technique[child.nodeName] = parseFloat(child.textContent);
                        break;
                    case 'wrapU':
                    case 'wrapV':
                        if (child.textContent.toUpperCase() === 'TRUE') {
                            data.technique[child.nodeName] = 1;
                        } else if (child.textContent.toUpperCase() === 'FALSE') {
                            data.technique[child.nodeName] = 0;
                        } else {
                            data.technique[child.nodeName] = parseInt(child.textContent);
                        }
                        break;
                    }
                }
            }
            function parseEffectExtra(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique':
                        data.technique = parseEffectExtraTechnique(child);
                        break;
                    }
                }
                return data;
            }
            function parseEffectExtraTechnique(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'double_sided':
                        data[child.nodeName] = parseInt(child.textContent);
                        break;
                    }
                }
                return data;
            }
            function buildEffect(data) {
                return data;
            }
            function getEffect(id) {
                return getBuild(library.effects[id], buildEffect);
            }
            function parseMaterial(xml) {
                var data = { name: xml.getAttribute('name') };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'instance_effect':
                        data.url = parseId(child.getAttribute('url'));
                        break;
                    }
                }
                library.materials[xml.getAttribute('id')] = data;
            }
            function getTextureLoader(image) {
                var loader;
                var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2);
                extension = extension.toLowerCase();
                switch (extension) {
                case 'tga':
                    loader = tgaLoader;
                    break;
                default:
                    loader = textureLoader;
                }
                return loader;
            }
            function buildMaterial(data) {
                var effect = getEffect(data.url);
                var technique = effect.profile.technique;
                var extra = effect.profile.extra;
                var material;
                switch (technique.type) {
                case 'phong':
                case 'blinn':
                    material = new THREE.MeshPhongMaterial();
                    break;
                case 'lambert':
                    material = new THREE.MeshLambertMaterial();
                    break;
                default:
                    material = new THREE.MeshBasicMaterial();
                    break;
                }
                material.name = data.name || '';
                function getTexture(textureObject) {
                    var sampler = effect.profile.samplers[textureObject.id];
                    var image = null;
                    if (sampler !== undefined) {
                        var surface = effect.profile.surfaces[sampler.source];
                        image = getImage(surface.init_from);
                    } else {
                        console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');
                        image = getImage(textureObject.id);
                    }
                    if (image !== null) {
                        var loader = getTextureLoader(image);
                        if (loader !== undefined) {
                            var texture = loader.load(image);
                            var extra = textureObject.extra;
                            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {
                                var technique = extra.technique;
                                texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                                texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                                texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);
                                texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);
                            } else {
                                texture.wrapS = THREE.RepeatWrapping;
                                texture.wrapT = THREE.RepeatWrapping;
                            }
                            return texture;
                        } else {
                            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);
                            return null;
                        }
                    } else {
                        console.warn("THREE.ColladaLoader: Couldn't create texture with ID:", textureObject.id);
                        return null;
                    }
                }
                var parameters = technique.parameters;
                for (var key in parameters) {
                    var parameter = parameters[key];
                    switch (key) {
                    case 'diffuse':
                        if (parameter.color)
                            material.color.fromArray(parameter.color);
                        if (parameter.texture)
                            material.map = getTexture(parameter.texture);
                        break;
                    case 'specular':
                        if (parameter.color && material.specular)
                            material.specular.fromArray(parameter.color);
                        if (parameter.texture)
                            material.specularMap = getTexture(parameter.texture);
                        break;
                    case 'bump':
                        if (parameter.texture)
                            material.normalMap = getTexture(parameter.texture);
                        break;
                    case 'ambient':
                        if (parameter.texture)
                            material.lightMap = getTexture(parameter.texture);
                        break;
                    case 'shininess':
                        if (parameter.float && material.shininess)
                            material.shininess = parameter.float;
                        break;
                    case 'emission':
                        if (parameter.color && material.emissive)
                            material.emissive.fromArray(parameter.color);
                        if (parameter.texture)
                            material.emissiveMap = getTexture(parameter.texture);
                        break;
                    }
                }
                var transparent = parameters['transparent'];
                var transparency = parameters['transparency'];
                if (transparency === undefined && transparent) {
                    transparency = { float: 1 };
                }
                if (transparent === undefined && transparency) {
                    transparent = {
                        opaque: 'A_ONE',
                        data: {
                            color: [
                                1,
                                1,
                                1,
                                1
                            ]
                        }
                    };
                }
                if (transparent && transparency) {
                    if (transparent.data.texture) {
                        material.transparent = true;
                    } else {
                        var color = transparent.data.color;
                        switch (transparent.opaque) {
                        case 'A_ONE':
                            material.opacity = color[3] * transparency.float;
                            break;
                        case 'RGB_ZERO':
                            material.opacity = 1 - color[0] * transparency.float;
                            break;
                        case 'A_ZERO':
                            material.opacity = 1 - color[3] * transparency.float;
                            break;
                        case 'RGB_ONE':
                            material.opacity = color[0] * transparency.float;
                            break;
                        default:
                            console.warn('THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', transparent.opaque);
                        }
                        if (material.opacity < 1)
                            material.transparent = true;
                    }
                }
                if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {
                    material.side = THREE.DoubleSide;
                }
                return material;
            }
            function getMaterial(id) {
                return getBuild(library.materials[id], buildMaterial);
            }
            function parseCamera(xml) {
                var data = { name: xml.getAttribute('name') };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'optics':
                        data.optics = parseCameraOptics(child);
                        break;
                    }
                }
                library.cameras[xml.getAttribute('id')] = data;
            }
            function parseCameraOptics(xml) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'technique_common':
                        return parseCameraTechnique(child);
                    }
                }
                return {};
            }
            function parseCameraTechnique(xml) {
                var data = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'perspective':
                    case 'orthographic':
                        data.technique = child.nodeName;
                        data.parameters = parseCameraParameters(child);
                        break;
                    }
                }
                return data;
            }
            function parseCameraParameters(xml) {
                var data = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'xfov':
                    case 'yfov':
                    case 'xmag':
                    case 'ymag':
                    case 'znear':
                    case 'zfar':
                    case 'aspect_ratio':
                        data[child.nodeName] = parseFloat(child.textContent);
                        break;
                    }
                }
                return data;
            }
            function buildCamera(data) {
                var camera;
                switch (data.optics.technique) {
                case 'perspective':
                    camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);
                    break;
                case 'orthographic':
                    var ymag = data.optics.parameters.ymag;
                    var xmag = data.optics.parameters.xmag;
                    var aspectRatio = data.optics.parameters.aspect_ratio;
                    xmag = xmag === undefined ? ymag * aspectRatio : xmag;
                    ymag = ymag === undefined ? xmag / aspectRatio : ymag;
                    xmag *= 0.5;
                    ymag *= 0.5;
                    camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, data.optics.parameters.znear, data.optics.parameters.zfar);
                    break;
                default:
                    camera = new THREE.PerspectiveCamera();
                    break;
                }
                camera.name = data.name || '';
                return camera;
            }
            function getCamera(id) {
                var data = library.cameras[id];
                if (data !== undefined) {
                    return getBuild(data, buildCamera);
                }
                console.warn("THREE.ColladaLoader: Couldn't find camera with ID:", id);
                return null;
            }
            function parseLight(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique_common':
                        data = parseLightTechnique(child);
                        break;
                    }
                }
                library.lights[xml.getAttribute('id')] = data;
            }
            function parseLightTechnique(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'directional':
                    case 'point':
                    case 'spot':
                    case 'ambient':
                        data.technique = child.nodeName;
                        data.parameters = parseLightParameters(child);
                    }
                }
                return data;
            }
            function parseLightParameters(xml) {
                var data = {};
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'color':
                        var array = parseFloats(child.textContent);
                        data.color = new THREE.Color().fromArray(array);
                        break;
                    case 'falloff_angle':
                        data.falloffAngle = parseFloat(child.textContent);
                        break;
                    case 'quadratic_attenuation':
                        var f = parseFloat(child.textContent);
                        data.distance = f ? Math.sqrt(1 / f) : 0;
                        break;
                    }
                }
                return data;
            }
            function buildLight(data) {
                var light;
                switch (data.technique) {
                case 'directional':
                    light = new THREE.DirectionalLight();
                    break;
                case 'point':
                    light = new THREE.PointLight();
                    break;
                case 'spot':
                    light = new THREE.SpotLight();
                    break;
                case 'ambient':
                    light = new THREE.AmbientLight();
                    break;
                }
                if (data.parameters.color)
                    light.color.copy(data.parameters.color);
                if (data.parameters.distance)
                    light.distance = data.parameters.distance;
                return light;
            }
            function getLight(id) {
                var data = library.lights[id];
                if (data !== undefined) {
                    return getBuild(data, buildLight);
                }
                console.warn("THREE.ColladaLoader: Couldn't find light with ID:", id);
                return null;
            }
            function parseGeometry(xml) {
                var data = {
                    name: xml.getAttribute('name'),
                    sources: {},
                    vertices: {},
                    primitives: []
                };
                var mesh = getElementsByTagName(xml, 'mesh')[0];
                if (mesh === undefined)
                    return;
                for (var i = 0; i < mesh.childNodes.length; i++) {
                    var child = mesh.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    var id = child.getAttribute('id');
                    switch (child.nodeName) {
                    case 'source':
                        data.sources[id] = parseSource(child);
                        break;
                    case 'vertices':
                        data.vertices = parseGeometryVertices(child);
                        break;
                    case 'polygons':
                        console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);
                        break;
                    case 'lines':
                    case 'linestrips':
                    case 'polylist':
                    case 'triangles':
                        data.primitives.push(parseGeometryPrimitive(child));
                        break;
                    default:
                        console.log(child);
                    }
                }
                library.geometries[xml.getAttribute('id')] = data;
            }
            function parseSource(xml) {
                var data = {
                    array: [],
                    stride: 3
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'float_array':
                        data.array = parseFloats(child.textContent);
                        break;
                    case 'Name_array':
                        data.array = parseStrings(child.textContent);
                        break;
                    case 'technique_common':
                        var accessor = getElementsByTagName(child, 'accessor')[0];
                        if (accessor !== undefined) {
                            data.stride = parseInt(accessor.getAttribute('stride'));
                        }
                        break;
                    }
                }
                return data;
            }
            function parseGeometryVertices(xml) {
                var data = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));
                }
                return data;
            }
            function parseGeometryPrimitive(xml) {
                var primitive = {
                    type: xml.nodeName,
                    material: xml.getAttribute('material'),
                    count: parseInt(xml.getAttribute('count')),
                    inputs: {},
                    stride: 0,
                    hasUV: false
                };
                for (var i = 0, l = xml.childNodes.length; i < l; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'input':
                        var id = parseId(child.getAttribute('source'));
                        var semantic = child.getAttribute('semantic');
                        var offset = parseInt(child.getAttribute('offset'));
                        var set = parseInt(child.getAttribute('set'));
                        var inputname = set > 0 ? semantic + set : semantic;
                        primitive.inputs[inputname] = {
                            id: id,
                            offset: offset
                        };
                        primitive.stride = Math.max(primitive.stride, offset + 1);
                        if (semantic === 'TEXCOORD')
                            primitive.hasUV = true;
                        break;
                    case 'vcount':
                        primitive.vcount = parseInts(child.textContent);
                        break;
                    case 'p':
                        primitive.p = parseInts(child.textContent);
                        break;
                    }
                }
                return primitive;
            }
            function groupPrimitives(primitives) {
                var build = {};
                for (var i = 0; i < primitives.length; i++) {
                    var primitive = primitives[i];
                    if (build[primitive.type] === undefined)
                        build[primitive.type] = [];
                    build[primitive.type].push(primitive);
                }
                return build;
            }
            function checkUVCoordinates(primitives) {
                var count = 0;
                for (var i = 0, l = primitives.length; i < l; i++) {
                    var primitive = primitives[i];
                    if (primitive.hasUV === true) {
                        count++;
                    }
                }
                if (count > 0 && count < primitives.length) {
                    primitives.uvsNeedsFix = true;
                }
            }
            function buildGeometry(data) {
                var build = {};
                var sources = data.sources;
                var vertices = data.vertices;
                var primitives = data.primitives;
                if (primitives.length === 0)
                    return {};
                var groupedPrimitives = groupPrimitives(primitives);
                for (var type in groupedPrimitives) {
                    var primitiveType = groupedPrimitives[type];
                    checkUVCoordinates(primitiveType);
                    build[type] = buildGeometryType(primitiveType, sources, vertices);
                }
                return build;
            }
            function buildGeometryType(primitives, sources, vertices) {
                var build = {};
                var position = {
                    array: [],
                    stride: 0
                };
                var normal = {
                    array: [],
                    stride: 0
                };
                var uv = {
                    array: [],
                    stride: 0
                };
                var uv2 = {
                    array: [],
                    stride: 0
                };
                var color = {
                    array: [],
                    stride: 0
                };
                var skinIndex = {
                    array: [],
                    stride: 4
                };
                var skinWeight = {
                    array: [],
                    stride: 4
                };
                var geometry = new THREE.BufferGeometry();
                var materialKeys = [];
                var start = 0;
                for (var p = 0; p < primitives.length; p++) {
                    var primitive = primitives[p];
                    var inputs = primitive.inputs;
                    var count = 0;
                    switch (primitive.type) {
                    case 'lines':
                    case 'linestrips':
                        count = primitive.count * 2;
                        break;
                    case 'triangles':
                        count = primitive.count * 3;
                        break;
                    case 'polylist':
                        for (var g = 0; g < primitive.count; g++) {
                            var vc = primitive.vcount[g];
                            switch (vc) {
                            case 3:
                                count += 3;
                                break;
                            case 4:
                                count += 6;
                                break;
                            default:
                                count += (vc - 2) * 3;
                                break;
                            }
                        }
                        break;
                    default:
                        console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);
                    }
                    geometry.addGroup(start, count, p);
                    start += count;
                    if (primitive.material) {
                        materialKeys.push(primitive.material);
                    }
                    for (var name in inputs) {
                        var input = inputs[name];
                        switch (name) {
                        case 'VERTEX':
                            for (var key in vertices) {
                                var id = vertices[key];
                                switch (key) {
                                case 'POSITION':
                                    var prevLength = position.array.length;
                                    buildGeometryData(primitive, sources[id], input.offset, position.array);
                                    position.stride = sources[id].stride;
                                    if (sources.skinWeights && sources.skinIndices) {
                                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);
                                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);
                                    }
                                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {
                                        var count = (position.array.length - prevLength) / position.stride;
                                        for (var i = 0; i < count; i++) {
                                            uv.array.push(0, 0);
                                        }
                                    }
                                    break;
                                case 'NORMAL':
                                    buildGeometryData(primitive, sources[id], input.offset, normal.array);
                                    normal.stride = sources[id].stride;
                                    break;
                                case 'COLOR':
                                    buildGeometryData(primitive, sources[id], input.offset, color.array);
                                    color.stride = sources[id].stride;
                                    break;
                                case 'TEXCOORD':
                                    buildGeometryData(primitive, sources[id], input.offset, uv.array);
                                    uv.stride = sources[id].stride;
                                    break;
                                case 'TEXCOORD1':
                                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);
                                    uv.stride = sources[id].stride;
                                    break;
                                default:
                                    console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', key);
                                }
                            }
                            break;
                        case 'NORMAL':
                            buildGeometryData(primitive, sources[input.id], input.offset, normal.array);
                            normal.stride = sources[input.id].stride;
                            break;
                        case 'COLOR':
                            buildGeometryData(primitive, sources[input.id], input.offset, color.array);
                            color.stride = sources[input.id].stride;
                            break;
                        case 'TEXCOORD':
                            buildGeometryData(primitive, sources[input.id], input.offset, uv.array);
                            uv.stride = sources[input.id].stride;
                            break;
                        case 'TEXCOORD1':
                            buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);
                            uv2.stride = sources[input.id].stride;
                            break;
                        }
                    }
                }
                if (position.array.length > 0)
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));
                if (normal.array.length > 0)
                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));
                if (color.array.length > 0)
                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));
                if (uv.array.length > 0)
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));
                if (uv2.array.length > 0)
                    geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));
                if (skinIndex.array.length > 0)
                    geometry.setAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));
                if (skinWeight.array.length > 0)
                    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));
                build.data = geometry;
                build.type = primitives[0].type;
                build.materialKeys = materialKeys;
                return build;
            }
            function buildGeometryData(primitive, source, offset, array) {
                var indices = primitive.p;
                var stride = primitive.stride;
                var vcount = primitive.vcount;
                function pushVector(i) {
                    var index = indices[i + offset] * sourceStride;
                    var length = index + sourceStride;
                    for (; index < length; index++) {
                        array.push(sourceArray[index]);
                    }
                }
                var sourceArray = source.array;
                var sourceStride = source.stride;
                if (primitive.vcount !== undefined) {
                    var index = 0;
                    for (var i = 0, l = vcount.length; i < l; i++) {
                        var count = vcount[i];
                        if (count === 4) {
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
                            var d = index + stride * 3;
                            pushVector(a);
                            pushVector(b);
                            pushVector(d);
                            pushVector(b);
                            pushVector(c);
                            pushVector(d);
                        } else if (count === 3) {
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
                            pushVector(a);
                            pushVector(b);
                            pushVector(c);
                        } else if (count > 4) {
                            for (var k = 1, kl = count - 2; k <= kl; k++) {
                                var a = index + stride * 0;
                                var b = index + stride * k;
                                var c = index + stride * (k + 1);
                                pushVector(a);
                                pushVector(b);
                                pushVector(c);
                            }
                        }
                        index += stride * count;
                    }
                } else {
                    for (var i = 0, l = indices.length; i < l; i += stride) {
                        pushVector(i);
                    }
                }
            }
            function getGeometry(id) {
                return getBuild(library.geometries[id], buildGeometry);
            }
            function parseKinematicsModel(xml) {
                var data = {
                    name: xml.getAttribute('name') || '',
                    joints: {},
                    links: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique_common':
                        parseKinematicsTechniqueCommon(child, data);
                        break;
                    }
                }
                library.kinematicsModels[xml.getAttribute('id')] = data;
            }
            function buildKinematicsModel(data) {
                if (data.build !== undefined)
                    return data.build;
                return data;
            }
            function getKinematicsModel(id) {
                return getBuild(library.kinematicsModels[id], buildKinematicsModel);
            }
            function parseKinematicsTechniqueCommon(xml, data) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'joint':
                        data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);
                        break;
                    case 'link':
                        data.links.push(parseKinematicsLink(child));
                        break;
                    }
                }
            }
            function parseKinematicsJoint(xml) {
                var data;
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'prismatic':
                    case 'revolute':
                        data = parseKinematicsJointParameter(child);
                        break;
                    }
                }
                return data;
            }
            function parseKinematicsJointParameter(xml, data) {
                var data = {
                    sid: xml.getAttribute('sid'),
                    name: xml.getAttribute('name') || '',
                    axis: new THREE.Vector3(),
                    limits: {
                        min: 0,
                        max: 0
                    },
                    type: xml.nodeName,
                    static: false,
                    zeroPosition: 0,
                    middlePosition: 0
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'axis':
                        var array = parseFloats(child.textContent);
                        data.axis.fromArray(array);
                        break;
                    case 'limits':
                        var max = child.getElementsByTagName('max')[0];
                        var min = child.getElementsByTagName('min')[0];
                        data.limits.max = parseFloat(max.textContent);
                        data.limits.min = parseFloat(min.textContent);
                        break;
                    }
                }
                if (data.limits.min >= data.limits.max) {
                    data.static = true;
                }
                data.middlePosition = (data.limits.min + data.limits.max) / 2;
                return data;
            }
            function parseKinematicsLink(xml) {
                var data = {
                    sid: xml.getAttribute('sid'),
                    name: xml.getAttribute('name') || '',
                    attachments: [],
                    transforms: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'attachment_full':
                        data.attachments.push(parseKinematicsAttachment(child));
                        break;
                    case 'matrix':
                    case 'translate':
                    case 'rotate':
                        data.transforms.push(parseKinematicsTransform(child));
                        break;
                    }
                }
                return data;
            }
            function parseKinematicsAttachment(xml) {
                var data = {
                    joint: xml.getAttribute('joint').split('/').pop(),
                    transforms: [],
                    links: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'link':
                        data.links.push(parseKinematicsLink(child));
                        break;
                    case 'matrix':
                    case 'translate':
                    case 'rotate':
                        data.transforms.push(parseKinematicsTransform(child));
                        break;
                    }
                }
                return data;
            }
            function parseKinematicsTransform(xml) {
                var data = { type: xml.nodeName };
                var array = parseFloats(xml.textContent);
                switch (data.type) {
                case 'matrix':
                    data.obj = new THREE.Matrix4();
                    data.obj.fromArray(array).transpose();
                    break;
                case 'translate':
                    data.obj = new THREE.Vector3();
                    data.obj.fromArray(array);
                    break;
                case 'rotate':
                    data.obj = new THREE.Vector3();
                    data.obj.fromArray(array);
                    data.angle = THREE.MathUtils.degToRad(array[3]);
                    break;
                }
                return data;
            }
            function parsePhysicsModel(xml) {
                var data = {
                    name: xml.getAttribute('name') || '',
                    rigidBodies: {}
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'rigid_body':
                        data.rigidBodies[child.getAttribute('name')] = {};
                        parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);
                        break;
                    }
                }
                library.physicsModels[xml.getAttribute('id')] = data;
            }
            function parsePhysicsRigidBody(xml, data) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'technique_common':
                        parsePhysicsTechniqueCommon(child, data);
                        break;
                    }
                }
            }
            function parsePhysicsTechniqueCommon(xml, data) {
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'inertia':
                        data.inertia = parseFloats(child.textContent);
                        break;
                    case 'mass':
                        data.mass = parseFloats(child.textContent)[0];
                        break;
                    }
                }
            }
            function parseKinematicsScene(xml) {
                var data = { bindJointAxis: [] };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'bind_joint_axis':
                        data.bindJointAxis.push(parseKinematicsBindJointAxis(child));
                        break;
                    }
                }
                library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;
            }
            function parseKinematicsBindJointAxis(xml) {
                var data = { target: xml.getAttribute('target').split('/').pop() };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'axis':
                        var param = child.getElementsByTagName('param')[0];
                        data.axis = param.textContent;
                        var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];
                        data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);
                        break;
                    }
                }
                return data;
            }
            function buildKinematicsScene(data) {
                if (data.build !== undefined)
                    return data.build;
                return data;
            }
            function getKinematicsScene(id) {
                return getBuild(library.kinematicsScenes[id], buildKinematicsScene);
            }
            function setupKinematics() {
                var kinematicsModelId = Object.keys(library.kinematicsModels)[0];
                var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];
                var visualSceneId = Object.keys(library.visualScenes)[0];
                if (kinematicsModelId === undefined || kinematicsSceneId === undefined)
                    return;
                var kinematicsModel = getKinematicsModel(kinematicsModelId);
                var kinematicsScene = getKinematicsScene(kinematicsSceneId);
                var visualScene = getVisualScene(visualSceneId);
                var bindJointAxis = kinematicsScene.bindJointAxis;
                var jointMap = {};
                for (var i = 0, l = bindJointAxis.length; i < l; i++) {
                    var axis = bindJointAxis[i];
                    var targetElement = collada.querySelector('[sid="' + axis.target + '"]');
                    if (targetElement) {
                        var parentVisualElement = targetElement.parentElement;
                        connect(axis.jointIndex, parentVisualElement);
                    }
                }
                function connect(jointIndex, visualElement) {
                    var visualElementName = visualElement.getAttribute('name');
                    var joint = kinematicsModel.joints[jointIndex];
                    visualScene.traverse(function (object) {
                        if (object.name === visualElementName) {
                            jointMap[jointIndex] = {
                                object: object,
                                transforms: buildTransformList(visualElement),
                                joint: joint,
                                position: joint.zeroPosition
                            };
                        }
                    });
                }
                var m0 = new THREE.Matrix4();
                kinematics = {
                    joints: kinematicsModel && kinematicsModel.joints,
                    getJointValue: function (jointIndex) {
                        var jointData = jointMap[jointIndex];
                        if (jointData) {
                            return jointData.position;
                        } else {
                            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + " doesn't exist.");
                        }
                    },
                    setJointValue: function (jointIndex, value) {
                        var jointData = jointMap[jointIndex];
                        if (jointData) {
                            var joint = jointData.joint;
                            if (value > joint.limits.max || value < joint.limits.min) {
                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');
                            } else if (joint.static) {
                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');
                            } else {
                                var object = jointData.object;
                                var axis = joint.axis;
                                var transforms = jointData.transforms;
                                matrix.identity();
                                for (var i = 0; i < transforms.length; i++) {
                                    var transform = transforms[i];
                                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {
                                        switch (joint.type) {
                                        case 'revolute':
                                            matrix.multiply(m0.makeRotationAxis(axis, THREE.MathUtils.degToRad(value)));
                                            break;
                                        case 'prismatic':
                                            matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));
                                            break;
                                        default:
                                            console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);
                                            break;
                                        }
                                    } else {
                                        switch (transform.type) {
                                        case 'matrix':
                                            matrix.multiply(transform.obj);
                                            break;
                                        case 'translate':
                                            matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));
                                            break;
                                        case 'scale':
                                            matrix.scale(transform.obj);
                                            break;
                                        case 'rotate':
                                            matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));
                                            break;
                                        }
                                    }
                                }
                                object.matrix.copy(matrix);
                                object.matrix.decompose(object.position, object.quaternion, object.scale);
                                jointMap[jointIndex].position = value;
                            }
                        } else {
                            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');
                        }
                    }
                };
            }
            function buildTransformList(node) {
                var transforms = [];
                var xml = collada.querySelector('[id="' + node.id + '"]');
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'matrix':
                        var array = parseFloats(child.textContent);
                        var matrix = new THREE.Matrix4().fromArray(array).transpose();
                        transforms.push({
                            sid: child.getAttribute('sid'),
                            type: child.nodeName,
                            obj: matrix
                        });
                        break;
                    case 'translate':
                    case 'scale':
                        var array = parseFloats(child.textContent);
                        var vector = new THREE.Vector3().fromArray(array);
                        transforms.push({
                            sid: child.getAttribute('sid'),
                            type: child.nodeName,
                            obj: vector
                        });
                        break;
                    case 'rotate':
                        var array = parseFloats(child.textContent);
                        var vector = new THREE.Vector3().fromArray(array);
                        var angle = THREE.MathUtils.degToRad(array[3]);
                        transforms.push({
                            sid: child.getAttribute('sid'),
                            type: child.nodeName,
                            obj: vector,
                            angle: angle
                        });
                        break;
                    }
                }
                return transforms;
            }
            function prepareNodes(xml) {
                var elements = xml.getElementsByTagName('node');
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    if (element.hasAttribute('id') === false) {
                        element.setAttribute('id', generateId());
                    }
                }
            }
            var matrix = new THREE.Matrix4();
            var vector = new THREE.Vector3();
            function parseNode(xml) {
                var data = {
                    name: xml.getAttribute('name') || '',
                    type: xml.getAttribute('type'),
                    id: xml.getAttribute('id'),
                    sid: xml.getAttribute('sid'),
                    matrix: new THREE.Matrix4(),
                    nodes: [],
                    instanceCameras: [],
                    instanceControllers: [],
                    instanceLights: [],
                    instanceGeometries: [],
                    instanceNodes: [],
                    transforms: {}
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    if (child.nodeType !== 1)
                        continue;
                    switch (child.nodeName) {
                    case 'node':
                        data.nodes.push(child.getAttribute('id'));
                        parseNode(child);
                        break;
                    case 'instance_camera':
                        data.instanceCameras.push(parseId(child.getAttribute('url')));
                        break;
                    case 'instance_controller':
                        data.instanceControllers.push(parseNodeInstance(child));
                        break;
                    case 'instance_light':
                        data.instanceLights.push(parseId(child.getAttribute('url')));
                        break;
                    case 'instance_geometry':
                        data.instanceGeometries.push(parseNodeInstance(child));
                        break;
                    case 'instance_node':
                        data.instanceNodes.push(parseId(child.getAttribute('url')));
                        break;
                    case 'matrix':
                        var array = parseFloats(child.textContent);
                        data.matrix.multiply(matrix.fromArray(array).transpose());
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'translate':
                        var array = parseFloats(child.textContent);
                        vector.fromArray(array);
                        data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'rotate':
                        var array = parseFloats(child.textContent);
                        var angle = THREE.MathUtils.degToRad(array[3]);
                        data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'scale':
                        var array = parseFloats(child.textContent);
                        data.matrix.scale(vector.fromArray(array));
                        data.transforms[child.getAttribute('sid')] = child.nodeName;
                        break;
                    case 'extra':
                        break;
                    default:
                        console.log(child);
                    }
                }
                if (hasNode(data.id)) {
                    console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);
                } else {
                    library.nodes[data.id] = data;
                }
                return data;
            }
            function parseNodeInstance(xml) {
                var data = {
                    id: parseId(xml.getAttribute('url')),
                    materials: {},
                    skeletons: []
                };
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var child = xml.childNodes[i];
                    switch (child.nodeName) {
                    case 'bind_material':
                        var instances = child.getElementsByTagName('instance_material');
                        for (var j = 0; j < instances.length; j++) {
                            var instance = instances[j];
                            var symbol = instance.getAttribute('symbol');
                            var target = instance.getAttribute('target');
                            data.materials[symbol] = parseId(target);
                        }
                        break;
                    case 'skeleton':
                        data.skeletons.push(parseId(child.textContent));
                        break;
                    default:
                        break;
                    }
                }
                return data;
            }
            function buildSkeleton(skeletons, joints) {
                var boneData = [];
                var sortedBoneData = [];
                var i, j, data;
                for (i = 0; i < skeletons.length; i++) {
                    var skeleton = skeletons[i];
                    var root;
                    if (hasNode(skeleton)) {
                        root = getNode(skeleton);
                        buildBoneHierarchy(root, joints, boneData);
                    } else if (hasVisualScene(skeleton)) {
                        var visualScene = library.visualScenes[skeleton];
                        var children = visualScene.children;
                        for (var j = 0; j < children.length; j++) {
                            var child = children[j];
                            if (child.type === 'JOINT') {
                                var root = getNode(child.id);
                                buildBoneHierarchy(root, joints, boneData);
                            }
                        }
                    } else {
                        console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);
                    }
                }
                for (i = 0; i < joints.length; i++) {
                    for (j = 0; j < boneData.length; j++) {
                        data = boneData[j];
                        if (data.bone.name === joints[i].name) {
                            sortedBoneData[i] = data;
                            data.processed = true;
                            break;
                        }
                    }
                }
                for (i = 0; i < boneData.length; i++) {
                    data = boneData[i];
                    if (data.processed === false) {
                        sortedBoneData.push(data);
                        data.processed = true;
                    }
                }
                var bones = [];
                var boneInverses = [];
                for (i = 0; i < sortedBoneData.length; i++) {
                    data = sortedBoneData[i];
                    bones.push(data.bone);
                    boneInverses.push(data.boneInverse);
                }
                return new THREE.Skeleton(bones, boneInverses);
            }
            function buildBoneHierarchy(root, joints, boneData) {
                root.traverse(function (object) {
                    if (object.isBone === true) {
                        var boneInverse;
                        for (var i = 0; i < joints.length; i++) {
                            var joint = joints[i];
                            if (joint.name === object.name) {
                                boneInverse = joint.boneInverse;
                                break;
                            }
                        }
                        if (boneInverse === undefined) {
                            boneInverse = new THREE.Matrix4();
                        }
                        boneData.push({
                            bone: object,
                            boneInverse: boneInverse,
                            processed: false
                        });
                    }
                });
            }
            function buildNode(data) {
                var objects = [];
                var matrix = data.matrix;
                var nodes = data.nodes;
                var type = data.type;
                var instanceCameras = data.instanceCameras;
                var instanceControllers = data.instanceControllers;
                var instanceLights = data.instanceLights;
                var instanceGeometries = data.instanceGeometries;
                var instanceNodes = data.instanceNodes;
                for (var i = 0, l = nodes.length; i < l; i++) {
                    objects.push(getNode(nodes[i]));
                }
                for (var i = 0, l = instanceCameras.length; i < l; i++) {
                    var instanceCamera = getCamera(instanceCameras[i]);
                    if (instanceCamera !== null) {
                        objects.push(instanceCamera.clone());
                    }
                }
                for (var i = 0, l = instanceControllers.length; i < l; i++) {
                    var instance = instanceControllers[i];
                    var controller = getController(instance.id);
                    var geometries = getGeometry(controller.id);
                    var newObjects = buildObjects(geometries, instance.materials);
                    var skeletons = instance.skeletons;
                    var joints = controller.skin.joints;
                    var skeleton = buildSkeleton(skeletons, joints);
                    for (var j = 0, jl = newObjects.length; j < jl; j++) {
                        var object = newObjects[j];
                        if (object.isSkinnedMesh) {
                            object.bind(skeleton, controller.skin.bindMatrix);
                            object.normalizeSkinWeights();
                        }
                        objects.push(object);
                    }
                }
                for (var i = 0, l = instanceLights.length; i < l; i++) {
                    var instanceLight = getLight(instanceLights[i]);
                    if (instanceLight !== null) {
                        objects.push(instanceLight.clone());
                    }
                }
                for (var i = 0, l = instanceGeometries.length; i < l; i++) {
                    var instance = instanceGeometries[i];
                    var geometries = getGeometry(instance.id);
                    var newObjects = buildObjects(geometries, instance.materials);
                    for (var j = 0, jl = newObjects.length; j < jl; j++) {
                        objects.push(newObjects[j]);
                    }
                }
                for (var i = 0, l = instanceNodes.length; i < l; i++) {
                    objects.push(getNode(instanceNodes[i]).clone());
                }
                var object;
                if (nodes.length === 0 && objects.length === 1) {
                    object = objects[0];
                } else {
                    object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();
                    for (var i = 0; i < objects.length; i++) {
                        object.add(objects[i]);
                    }
                }
                if (object.name === '') {
                    object.name = type === 'JOINT' ? data.sid : data.name;
                }
                object.matrix.copy(matrix);
                object.matrix.decompose(object.position, object.quaternion, object.scale);
                return object;
            }
            var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });
            function resolveMaterialBinding(keys, instanceMaterials) {
                var materials = [];
                for (var i = 0, l = keys.length; i < l; i++) {
                    var id = instanceMaterials[keys[i]];
                    if (id === undefined) {
                        console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);
                        materials.push(fallbackMaterial);
                    } else {
                        materials.push(getMaterial(id));
                    }
                }
                return materials;
            }
            function buildObjects(geometries, instanceMaterials) {
                var objects = [];
                for (var type in geometries) {
                    var geometry = geometries[type];
                    var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);
                    if (materials.length === 0) {
                        if (type === 'lines' || type === 'linestrips') {
                            materials.push(new THREE.LineBasicMaterial());
                        } else {
                            materials.push(new THREE.MeshPhongMaterial());
                        }
                    }
                    var skinning = geometry.data.attributes.skinIndex !== undefined;
                    if (skinning) {
                        for (var i = 0, l = materials.length; i < l; i++) {
                            materials[i].skinning = true;
                        }
                    }
                    var material = materials.length === 1 ? materials[0] : materials;
                    var object;
                    switch (type) {
                    case 'lines':
                        object = new THREE.LineSegments(geometry.data, material);
                        break;
                    case 'linestrips':
                        object = new THREE.Line(geometry.data, material);
                        break;
                    case 'triangles':
                    case 'polylist':
                        if (skinning) {
                            object = new THREE.SkinnedMesh(geometry.data, material);
                        } else {
                            object = new THREE.Mesh(geometry.data, material);
                        }
                        break;
                    }
                    objects.push(object);
                }
                return objects;
            }
            function hasNode(id) {
                return library.nodes[id] !== undefined;
            }
            function getNode(id) {
                return getBuild(library.nodes[id], buildNode);
            }
            function parseVisualScene(xml) {
                var data = {
                    name: xml.getAttribute('name'),
                    children: []
                };
                prepareNodes(xml);
                var elements = getElementsByTagName(xml, 'node');
                for (var i = 0; i < elements.length; i++) {
                    data.children.push(parseNode(elements[i]));
                }
                library.visualScenes[xml.getAttribute('id')] = data;
            }
            function buildVisualScene(data) {
                var group = new THREE.Group();
                group.name = data.name;
                var children = data.children;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    group.add(getNode(child.id));
                }
                return group;
            }
            function hasVisualScene(id) {
                return library.visualScenes[id] !== undefined;
            }
            function getVisualScene(id) {
                return getBuild(library.visualScenes[id], buildVisualScene);
            }
            function parseScene(xml) {
                var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];
                return getVisualScene(parseId(instance.getAttribute('url')));
            }
            function setupAnimations() {
                var clips = library.clips;
                if (isEmpty(clips) === true) {
                    if (isEmpty(library.animations) === false) {
                        var tracks = [];
                        for (var id in library.animations) {
                            var animationTracks = getAnimation(id);
                            for (var i = 0, l = animationTracks.length; i < l; i++) {
                                tracks.push(animationTracks[i]);
                            }
                        }
                        animations.push(new THREE.AnimationClip('default', -1, tracks));
                    }
                } else {
                    for (var id in clips) {
                        animations.push(getAnimationClip(id));
                    }
                }
            }
            function parserErrorToText(parserError) {
                var result = '';
                var stack = [parserError];
                while (stack.length) {
                    var node = stack.shift();
                    if (node.nodeType === Node.TEXT_NODE) {
                        result += node.textContent;
                    } else {
                        result += '\n';
                        stack.push.apply(stack, node.childNodes);
                    }
                }
                return result.trim();
            }
            if (text.length === 0) {
                return { scene: new THREE.Scene() };
            }
            var xml = new DOMParser().parseFromString(text, 'application/xml');
            var collada = getElementsByTagName(xml, 'COLLADA')[0];
            var parserError = xml.getElementsByTagName('parsererror')[0];
            if (parserError !== undefined) {
                var errorElement = getElementsByTagName(parserError, 'div')[0];
                var errorText;
                if (errorElement) {
                    errorText = errorElement.textContent;
                } else {
                    errorText = parserErrorToText(parserError);
                }
                console.error('THREE.ColladaLoader: Failed to parse collada file.\n', errorText);
                return null;
            }
            var version = collada.getAttribute('version');
            console.log('THREE.ColladaLoader: File version', version);
            var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);
            var textureLoader = new THREE.TextureLoader(this.manager);
            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
            var tgaLoader;
            if (TGALoader) {
                tgaLoader = new TGALoader(this.manager);
                tgaLoader.setPath(this.resourcePath || path);
            }
            var animations = [];
            var kinematics = {};
            var count = 0;
            var library = {
                animations: {},
                clips: {},
                controllers: {},
                images: {},
                effects: {},
                materials: {},
                cameras: {},
                lights: {},
                geometries: {},
                nodes: {},
                visualScenes: {},
                kinematicsModels: {},
                physicsModels: {},
                kinematicsScenes: {}
            };
            parseLibrary(collada, 'library_animations', 'animation', parseAnimation);
            parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);
            parseLibrary(collada, 'library_controllers', 'controller', parseController);
            parseLibrary(collada, 'library_images', 'image', parseImage);
            parseLibrary(collada, 'library_effects', 'effect', parseEffect);
            parseLibrary(collada, 'library_materials', 'material', parseMaterial);
            parseLibrary(collada, 'library_cameras', 'camera', parseCamera);
            parseLibrary(collada, 'library_lights', 'light', parseLight);
            parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);
            parseLibrary(collada, 'library_nodes', 'node', parseNode);
            parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);
            parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);
            parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);
            parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);
            buildLibrary(library.animations, buildAnimation);
            buildLibrary(library.clips, buildAnimationClip);
            buildLibrary(library.controllers, buildController);
            buildLibrary(library.images, buildImage);
            buildLibrary(library.effects, buildEffect);
            buildLibrary(library.materials, buildMaterial);
            buildLibrary(library.cameras, buildCamera);
            buildLibrary(library.lights, buildLight);
            buildLibrary(library.geometries, buildGeometry);
            buildLibrary(library.visualScenes, buildVisualScene);
            setupAnimations();
            setupKinematics();
            var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);
            if (asset.upAxis === 'Z_UP') {
                scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));
            }
            scene.scale.multiplyScalar(asset.unit);
            return {
                animations: animations,
                kinematics: kinematics,
                library: library,
                scene: scene
            };
        }
    });
    return ColladaLoader;
});
define('skylark-threejs-ex/loaders/DRACOLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var DRACOLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.decoderPath = '';
        this.decoderConfig = {};
        this.decoderBinary = null;
        this.decoderPending = null;
        this.workerLimit = 4;
        this.workerPool = [];
        this.workerNextTaskID = 1;
        this.workerSourceURL = '';
        this.defaultAttributeIDs = {
            position: 'POSITION',
            normal: 'NORMAL',
            color: 'COLOR',
            uv: 'TEX_COORD'
        };
        this.defaultAttributeTypes = {
            position: 'Float32Array',
            normal: 'Float32Array',
            color: 'Float32Array',
            uv: 'Float32Array'
        };
    };
    DRACOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: DRACOLoader,
        setDecoderPath: function (path) {
            this.decoderPath = path;
            return this;
        },
        setDecoderConfig: function (config) {
            this.decoderConfig = config;
            return this;
        },
        setWorkerLimit: function (workerLimit) {
            this.workerLimit = workerLimit;
            return this;
        },
        setVerbosity: function () {
            console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');
        },
        setDrawMode: function () {
            console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');
        },
        setSkipDequantization: function () {
            console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');
        },
        load: function (url, onLoad, onProgress, onError) {
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            if (this.crossOrigin === 'use-credentials') {
                loader.setWithCredentials(true);
            }
            loader.load(url, buffer => {
                var taskConfig = {
                    attributeIDs: this.defaultAttributeIDs,
                    attributeTypes: this.defaultAttributeTypes,
                    useUniqueIDs: false
                };
                this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);
            }, onProgress, onError);
        },
        decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {
            var taskConfig = {
                attributeIDs: attributeIDs || this.defaultAttributeIDs,
                attributeTypes: attributeTypes || this.defaultAttributeTypes,
                useUniqueIDs: !!attributeIDs
            };
            this.decodeGeometry(buffer, taskConfig).then(callback);
        },
        decodeGeometry: function (buffer, taskConfig) {
            for (var attribute in taskConfig.attributeTypes) {
                var type = taskConfig.attributeTypes[attribute];
                if (type.BYTES_PER_ELEMENT !== undefined) {
                    taskConfig.attributeTypes[attribute] = type.name;
                }
            }
            var taskKey = JSON.stringify(taskConfig);
            if (DRACOLoader.taskCache.has(buffer)) {
                var cachedTask = DRACOLoader.taskCache.get(buffer);
                if (cachedTask.key === taskKey) {
                    return cachedTask.promise;
                } else if (buffer.byteLength === 0) {
                    throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');
                }
            }
            var worker;
            var taskID = this.workerNextTaskID++;
            var taskCost = buffer.byteLength;
            var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {
                worker = _worker;
                return new Promise((resolve, reject) => {
                    worker._callbacks[taskID] = {
                        resolve,
                        reject
                    };
                    worker.postMessage({
                        type: 'decode',
                        id: taskID,
                        taskConfig,
                        buffer
                    }, [buffer]);
                });
            }).then(message => this._createGeometry(message.geometry));
            geometryPending.finally(() => {
                if (worker && taskID) {
                    this._releaseTask(worker, taskID);
                }
            });
            DRACOLoader.taskCache.set(buffer, {
                key: taskKey,
                promise: geometryPending
            });
            return geometryPending;
        },
        _createGeometry: function (geometryData) {
            var geometry = new THREE.BufferGeometry();
            if (geometryData.index) {
                geometry.setIndex(new THREE.BufferAttribute(geometryData.index.array, 1));
            }
            for (var i = 0; i < geometryData.attributes.length; i++) {
                var attribute = geometryData.attributes[i];
                var name = attribute.name;
                var array = attribute.array;
                var itemSize = attribute.itemSize;
                geometry.setAttribute(name, new THREE.BufferAttribute(array, itemSize));
            }
            return geometry;
        },
        _loadLibrary: function (url, responseType) {
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.decoderPath);
            loader.setResponseType(responseType);
            return new Promise((resolve, reject) => {
                loader.load(url, resolve, undefined, reject);
            });
        },
        preload: function () {
            this._initDecoder();
            return this;
        },
        _initDecoder: function () {
            if (this.decoderPending)
                return this.decoderPending;
            var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';
            var librariesPending = [];
            if (useJS) {
                librariesPending.push(this._loadLibrary('draco_decoder', 'text'));
            } else {
                librariesPending.push(this._loadLibrary('draco_wasm_wrapper', 'text'));
                librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));
            }
            this.decoderPending = Promise.all(librariesPending).then(libraries => {
                var jsContent = libraries[0];
                if (!useJS) {
                    this.decoderConfig.wasmBinary = libraries[1];
                }
                var fn = DRACOLoader.DRACOWorker.toString();
                var body = [
                    '/* draco decoder */',
                    jsContent,
                    '',
                    '/* worker */',
                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))
                ].join('\n');
                this.workerSourceURL = URL.createObjectURL(new Blob([body]));
            });
            return this.decoderPending;
        },
        _getWorker: function (taskID, taskCost) {
            return this._initDecoder().then(() => {
                if (this.workerPool.length < this.workerLimit) {
                    var worker = new Worker(this.workerSourceURL);
                    worker._callbacks = {};
                    worker._taskCosts = {};
                    worker._taskLoad = 0;
                    worker.postMessage({
                        type: 'init',
                        decoderConfig: this.decoderConfig
                    });
                    worker.onmessage = function (e) {
                        var message = e.data;
                        switch (message.type) {
                        case 'decode':
                            worker._callbacks[message.id].resolve(message);
                            break;
                        case 'error':
                            worker._callbacks[message.id].reject(message);
                            break;
                        default:
                            console.error('THREE.DRACOLoader: Unexpected message, "' + message.type + '"');
                        }
                    };
                    this.workerPool.push(worker);
                } else {
                    this.workerPool.sort(function (a, b) {
                        return a._taskLoad > b._taskLoad ? -1 : 1;
                    });
                }
                var worker = this.workerPool[this.workerPool.length - 1];
                worker._taskCosts[taskID] = taskCost;
                worker._taskLoad += taskCost;
                return worker;
            });
        },
        _releaseTask: function (worker, taskID) {
            worker._taskLoad -= worker._taskCosts[taskID];
            delete worker._callbacks[taskID];
            delete worker._taskCosts[taskID];
        },
        debug: function () {
            console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));
        },
        dispose: function () {
            for (var i = 0; i < this.workerPool.length; ++i) {
                this.workerPool[i].terminate();
            }
            this.workerPool.length = 0;
            return this;
        }
    });
    DRACOLoader.DRACOWorker = function () {
        var decoderConfig;
        var decoderPending;
        onmessage = function (e) {
            var message = e.data;
            switch (message.type) {
            case 'init':
                decoderConfig = message.decoderConfig;
                decoderPending = new Promise(function (resolve) {
                    decoderConfig.onModuleLoaded = function (draco) {
                        resolve({ draco: draco });
                    };
                    DracoDecoderModule(decoderConfig);
                });
                break;
            case 'decode':
                var buffer = message.buffer;
                var taskConfig = message.taskConfig;
                decoderPending.then(module => {
                    var draco = module.draco;
                    var decoder = new draco.Decoder();
                    var decoderBuffer = new draco.DecoderBuffer();
                    decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);
                    try {
                        var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);
                        var buffers = geometry.attributes.map(attr => attr.array.buffer);
                        if (geometry.index)
                            buffers.push(geometry.index.array.buffer);
                        self.postMessage({
                            type: 'decode',
                            id: message.id,
                            geometry
                        }, buffers);
                    } catch (error) {
                        console.error(error);
                        self.postMessage({
                            type: 'error',
                            id: message.id,
                            error: error.message
                        });
                    } finally {
                        draco.destroy(decoderBuffer);
                        draco.destroy(decoder);
                    }
                });
                break;
            }
        };
        function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {
            var attributeIDs = taskConfig.attributeIDs;
            var attributeTypes = taskConfig.attributeTypes;
            var dracoGeometry;
            var decodingStatus;
            var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);
            if (geometryType === draco.TRIANGULAR_MESH) {
                dracoGeometry = new draco.Mesh();
                decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);
            } else if (geometryType === draco.POINT_CLOUD) {
                dracoGeometry = new draco.PointCloud();
                decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);
            } else {
                throw new Error('THREE.DRACOLoader: Unexpected geometry type.');
            }
            if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {
                throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());
            }
            var geometry = {
                index: null,
                attributes: []
            };
            for (var attributeName in attributeIDs) {
                var attributeType = self[attributeTypes[attributeName]];
                var attribute;
                var attributeID;
                if (taskConfig.useUniqueIDs) {
                    attributeID = attributeIDs[attributeName];
                    attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);
                } else {
                    attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);
                    if (attributeID === -1)
                        continue;
                    attribute = decoder.GetAttribute(dracoGeometry, attributeID);
                }
                geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));
            }
            if (geometryType === draco.TRIANGULAR_MESH) {
                var numFaces = dracoGeometry.num_faces();
                var numIndices = numFaces * 3;
                var index = new Uint32Array(numIndices);
                var indexArray = new draco.DracoInt32Array();
                for (var i = 0; i < numFaces; ++i) {
                    decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);
                    for (var j = 0; j < 3; ++j) {
                        index[i * 3 + j] = indexArray.GetValue(j);
                    }
                }
                geometry.index = {
                    array: index,
                    itemSize: 1
                };
                draco.destroy(indexArray);
            }
            draco.destroy(dracoGeometry);
            return geometry;
        }
        function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {
            var numComponents = attribute.num_components();
            var numPoints = dracoGeometry.num_points();
            var numValues = numPoints * numComponents;
            var dracoArray;
            var array;
            switch (attributeType) {
            case Float32Array:
                dracoArray = new draco.DracoFloat32Array();
                decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Float32Array(numValues);
                break;
            case Int8Array:
                dracoArray = new draco.DracoInt8Array();
                decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Int8Array(numValues);
                break;
            case Int16Array:
                dracoArray = new draco.DracoInt16Array();
                decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Int16Array(numValues);
                break;
            case Int32Array:
                dracoArray = new draco.DracoInt32Array();
                decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Int32Array(numValues);
                break;
            case Uint8Array:
                dracoArray = new draco.DracoUInt8Array();
                decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Uint8Array(numValues);
                break;
            case Uint16Array:
                dracoArray = new draco.DracoUInt16Array();
                decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Uint16Array(numValues);
                break;
            case Uint32Array:
                dracoArray = new draco.DracoUInt32Array();
                decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);
                array = new Uint32Array(numValues);
                break;
            default:
                throw new Error('THREE.DRACOLoader: Unexpected attribute type.');
            }
            for (var i = 0; i < numValues; i++) {
                array[i] = dracoArray.GetValue(i);
            }
            draco.destroy(dracoArray);
            return {
                name: attributeName,
                array: array,
                itemSize: numComponents
            };
        }
    };
    DRACOLoader.taskCache = new WeakMap();
    DRACOLoader.setDecoderPath = function () {
        console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');
    };
    DRACOLoader.setDecoderConfig = function () {
        console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');
    };
    DRACOLoader.releaseDecoderModule = function () {
        console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');
    };
    DRACOLoader.getDecoderModule = function () {
        console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');
    };
    return DRACOLoader;
});
define('skylark-zlib/zlib',[
	"skylark-langx/skylark"
],function(skylark) {
	return skylark.attach("intg.Zlib",{
		CompressionMethod : {
		  DEFLATE: 8,
		  RESERVED: 15

		}
	})
});

define('skylark-zlib/Inflate',[
  "./zlib"
],function(Zlib) {
  /**
   * @constructor
   * @param {!(Uint8Array|Array)} input deflated buffer.
   * @param {Object=} opt_params option parameters.
   *
   * opt_params は以下のプロパティを指定する事ができます。
   *   - index: input buffer の deflate コンテナの開始位置.
   *   - blockSize: バッファのブロックサイズ.
   *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.
   *   - bufferType: Inflate.BufferType の値によってバッファの管理方法を指定する.
   *       Inflate.BufferType は RawInflate.BufferType のエイリアス.
   */
  var Inflate = function(input, opt_params) {
    /** @type {number} */
    var bufferSize;
    /** @type {Inflate.BufferType} */
    var bufferType;
    /** @type {number} */
    var cmf;
    /** @type {number} */
    var flg;

    /** @type {!(Uint8Array|Array)} */
    this.input = input;
    /** @type {number} */
    this.ip = 0;
    /** @type {RawInflate} */
    this.rawinflate;
    /** @type {(boolean|undefined)} verify flag. */
    this.verify;

    // option parameters
    if (opt_params || !(opt_params = {})) {
      if (opt_params['index']) {
        this.ip = opt_params['index'];
      }
      if (opt_params['verify']) {
        this.verify = opt_params['verify'];
      }
    }

    // Compression Method and Flags
    cmf = input[this.ip++];
    flg = input[this.ip++];

    // compression method
    switch (cmf & 0x0f) {
      case Zlib.CompressionMethod.DEFLATE:
        this.method = Zlib.CompressionMethod.DEFLATE;
        break;
      default:
        throw new Error('unsupported compression method');
    }

    // fcheck
    if (((cmf << 8) + flg) % 31 !== 0) {
      throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
    }

    // fdict (not supported)
    if (flg & 0x20) {
      throw new Error('fdict flag is not supported');
    }

    // RawInflate
    this.rawinflate = new RawInflate(input, {
      'index': this.ip,
      'bufferSize': opt_params['bufferSize'],
      'bufferType': opt_params['bufferType'],
      'resize': opt_params['resize']
    });
  }

  /**
   * @enum {number}
   */
  Inflate.BufferType = RawInflate.BufferType;

  /**
   * decompress.
   * @return {!(Uint8Array|Array)} inflated buffer.
   */
  Inflate.prototype.decompress = function() {
    /** @type {!(Array|Uint8Array)} input buffer. */
    var input = this.input;
    /** @type {!(Uint8Array|Array)} inflated buffer. */
    var buffer;
    /** @type {number} adler-32 checksum */
    var adler32;

    buffer = this.rawinflate.decompress();
    this.ip = this.rawinflate.ip;

    // verify adler-32
    if (this.verify) {
      adler32 = (
        input[this.ip++] << 24 | input[this.ip++] << 16 |
        input[this.ip++] << 8 | input[this.ip++]
      ) >>> 0;

      if (adler32 !== Adler32(buffer)) {
        throw new Error('invalid adler-32 checksum');
      }
    }

    return buffer;
  };

  return Zlib.Inflate = Inflate;
});

define('skylark-threejs-ex/loaders/FBXLoader',[
    "skylark-threejs",
    'skylark-zlib/Inflate',
    '../curves/NURBSCurve'
], function (
    THREE, 
    Inflate, 
    NURBSCurve
) {
    'use strict';
    var FBXLoader = function () {
        var fbxTree;
        var connections;
        var sceneGraph;
        function FBXLoader(manager) {
            THREE.Loader.call(this, manager);
        }
        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: FBXLoader,
            load: function (url, onLoad, onProgress, onError) {
                var self = this;
                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;
                var loader = new THREE.FileLoader(this.manager);
                loader.setPath(self.path);
                loader.setResponseType('arraybuffer');
                loader.load(url, function (buffer) {
                    try {
                        onLoad(self.parse(buffer, path));
                    } catch (error) {
                        setTimeout(function () {
                            if (onError)
                                onError(error);
                            self.manager.itemError(url);
                        }, 0);
                    }
                }, onProgress, onError);
            },
            parse: function (FBXBuffer, path) {
                if (isFbxFormatBinary(FBXBuffer)) {
                    fbxTree = new BinaryParser().parse(FBXBuffer);
                } else {
                    var FBXText = convertArrayBufferToString(FBXBuffer);
                    if (!isFbxFormatASCII(FBXText)) {
                        throw new Error('THREE.FBXLoader: Unknown format.');
                    }
                    if (getFbxVersion(FBXText) < 7000) {
                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));
                    }
                    fbxTree = new TextParser().parse(FBXText);
                }
                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);
            }
        });
        function FBXTreeParser(textureLoader, manager) {
            this.textureLoader = textureLoader;
            this.manager = manager;
        }
        FBXTreeParser.prototype = {
            constructor: FBXTreeParser,
            parse: function () {
                connections = this.parseConnections();
                var images = this.parseImages();
                var textures = this.parseTextures(images);
                var materials = this.parseMaterials(textures);
                var deformers = this.parseDeformers();
                var geometryMap = new GeometryParser().parse(deformers);
                this.parseScene(deformers, geometryMap, materials);
                return sceneGraph;
            },
            parseConnections: function () {
                var connectionMap = new Map();
                if ('Connections' in fbxTree) {
                    var rawConnections = fbxTree.Connections.connections;
                    rawConnections.forEach(function (rawConnection) {
                        var fromID = rawConnection[0];
                        var toID = rawConnection[1];
                        var relationship = rawConnection[2];
                        if (!connectionMap.has(fromID)) {
                            connectionMap.set(fromID, {
                                parents: [],
                                children: []
                            });
                        }
                        var parentRelationship = {
                            ID: toID,
                            relationship: relationship
                        };
                        connectionMap.get(fromID).parents.push(parentRelationship);
                        if (!connectionMap.has(toID)) {
                            connectionMap.set(toID, {
                                parents: [],
                                children: []
                            });
                        }
                        var childRelationship = {
                            ID: fromID,
                            relationship: relationship
                        };
                        connectionMap.get(toID).children.push(childRelationship);
                    });
                }
                return connectionMap;
            },
            parseImages: function () {
                var images = {};
                var blobs = {};
                if ('Video' in fbxTree.Objects) {
                    var videoNodes = fbxTree.Objects.Video;
                    for (var nodeID in videoNodes) {
                        var videoNode = videoNodes[nodeID];
                        var id = parseInt(nodeID);
                        images[id] = videoNode.RelativeFilename || videoNode.Filename;
                        if ('Content' in videoNode) {
                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;
                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';
                            if (arrayBufferContent || base64Content) {
                                var image = this.parseImage(videoNodes[nodeID]);
                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;
                            }
                        }
                    }
                }
                for (var id in images) {
                    var filename = images[id];
                    if (blobs[filename] !== undefined)
                        images[id] = blobs[filename];
                    else
                        images[id] = images[id].split('\\').pop();
                }
                return images;
            },
            parseImage: function (videoNode) {
                var content = videoNode.Content;
                var fileName = videoNode.RelativeFilename || videoNode.Filename;
                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();
                var type;
                switch (extension) {
                case 'bmp':
                    type = 'image/bmp';
                    break;
                case 'jpg':
                case 'jpeg':
                    type = 'image/jpeg';
                    break;
                case 'png':
                    type = 'image/png';
                    break;
                case 'tif':
                    type = 'image/tiff';
                    break;
                case 'tga':
                    if (this.manager.getHandler('.tga') === null) {
                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);
                    }
                    type = 'image/tga';
                    break;
                default:
                    console.warn('FBXLoader: Image type "' + extension + '" is not supported.');
                    return;
                }
                if (typeof content === 'string') {
                    return 'data:' + type + ';base64,' + content;
                } else {
                    var array = new Uint8Array(content);
                    return window.URL.createObjectURL(new Blob([array], { type: type }));
                }
            },
            parseTextures: function (images) {
                var textureMap = new Map();
                if ('Texture' in fbxTree.Objects) {
                    var textureNodes = fbxTree.Objects.undefined;
                    for (var nodeID in textureNodes) {
                        var texture = this.parseTexture(textureNodes[nodeID], images);
                        textureMap.set(parseInt(nodeID), texture);
                    }
                }
                return textureMap;
            },
            parseTexture: function (textureNode, images) {
                var texture = this.loadTexture(textureNode, images);
                texture.ID = textureNode.id;
                texture.name = textureNode.attrName;
                var wrapModeU = textureNode.WrapModeU;
                var wrapModeV = textureNode.WrapModeV;
                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;
                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;
                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                if ('Scaling' in textureNode) {
                    var values = textureNode.Scaling.value;
                    texture.repeat.x = values[0];
                    texture.repeat.y = values[1];
                }
                return texture;
            },
            loadTexture: function (textureNode, images) {
                var fileName;
                var currentPath = this.textureLoader.path;
                var children = connections.get(textureNode.id).children;
                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {
                    fileName = images[children[0].ID];
                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {
                        this.textureLoader.setPath(undefined);
                    }
                }
                var texture;
                var extension = textureNode.FileName.slice(-3).toLowerCase();
                if (extension === 'tga') {
                    var loader = this.manager.getHandler('.tga');
                    if (loader === null) {
                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);
                        texture = new THREE.Texture();
                    } else {
                        texture = loader.load(fileName);
                    }
                } else if (extension === 'psd') {
                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);
                    texture = new THREE.Texture();
                } else {
                    texture = this.textureLoader.load(fileName);
                }
                this.textureLoader.setPath(currentPath);
                return texture;
            },
            parseMaterials: function (textureMap) {
                var materialMap = new Map();
                if ('Material' in fbxTree.Objects) {
                    var materialNodes = fbxTree.Objects.Material;
                    for (var nodeID in materialNodes) {
                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);
                        if (material !== null)
                            materialMap.set(parseInt(nodeID), material);
                    }
                }
                return materialMap;
            },
            parseMaterial: function (materialNode, textureMap) {
                var ID = materialNode.id;
                var name = materialNode.attrName;
                var type = materialNode.ShadingModel;
                if (typeof type === 'object') {
                    type = type.value;
                }
                if (!connections.has(ID))
                    return null;
                var parameters = this.parseParameters(materialNode, textureMap, ID);
                var material;
                switch (type.toLowerCase()) {
                case 'phong':
                    material = new THREE.MeshPhongMaterial();
                    break;
                case 'lambert':
                    material = new THREE.MeshLambertMaterial();
                    break;
                default:
                    console.warn('THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type);
                    material = new THREE.MeshPhongMaterial();
                    break;
                }
                material.setValues(parameters);
                material.name = name;
                return material;
            },
            parseParameters: function (materialNode, textureMap, ID) {
                var parameters = {};
                if (materialNode.BumpFactor) {
                    parameters.bumpScale = materialNode.BumpFactor.value;
                }
                if (materialNode.Diffuse) {
                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);
                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {
                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);
                }
                if (materialNode.DisplacementFactor) {
                    parameters.displacementScale = materialNode.DisplacementFactor.value;
                }
                if (materialNode.Emissive) {
                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);
                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {
                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);
                }
                if (materialNode.EmissiveFactor) {
                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);
                }
                if (materialNode.Opacity) {
                    parameters.opacity = parseFloat(materialNode.Opacity.value);
                }
                if (parameters.opacity < 1) {
                    parameters.transparent = true;
                }
                if (materialNode.ReflectionFactor) {
                    parameters.reflectivity = materialNode.ReflectionFactor.value;
                }
                if (materialNode.Shininess) {
                    parameters.shininess = materialNode.Shininess.value;
                }
                if (materialNode.Specular) {
                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);
                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {
                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);
                }
                var self = this;
                connections.get(ID).children.forEach(function (child) {
                    var type = child.relationship;
                    switch (type) {
                    case 'Bump':
                        parameters.bumpMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'Maya|TEX_ao_map':
                        parameters.aoMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'DiffuseColor':
                    case 'Maya|TEX_color_map':
                        parameters.map = self.getTexture(textureMap, child.ID);
                        parameters.map.encoding = THREE.sRGBEncoding;
                        break;
                    case 'DisplacementColor':
                        parameters.displacementMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'EmissiveColor':
                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);
                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;
                        break;
                    case 'NormalMap':
                    case 'Maya|TEX_normal_map':
                        parameters.normalMap = self.getTexture(textureMap, child.ID);
                        break;
                    case 'ReflectionColor':
                        parameters.envMap = self.getTexture(textureMap, child.ID);
                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;
                        parameters.envMap.encoding = THREE.sRGBEncoding;
                        break;
                    case 'SpecularColor':
                        parameters.specularMap = self.getTexture(textureMap, child.ID);
                        parameters.specularMap.encoding = THREE.sRGBEncoding;
                        break;
                    case 'TransparentColor':
                        parameters.alphaMap = self.getTexture(textureMap, child.ID);
                        parameters.transparent = true;
                        break;
                    case 'AmbientColor':
                    case 'ShininessExponent':
                    case 'SpecularFactor':
                    case 'VectorDisplacementColor':
                    default:
                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);
                        break;
                    }
                });
                return parameters;
            },
            getTexture: function (textureMap, id) {
                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {
                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');
                    id = connections.get(id).children[0].ID;
                }
                return textureMap.get(id);
            },
            parseDeformers: function () {
                var skeletons = {};
                var morphTargets = {};
                if ('Deformer' in fbxTree.Objects) {
                    var DeformerNodes = fbxTree.Objects.Deformer;
                    for (var nodeID in DeformerNodes) {
                        var deformerNode = DeformerNodes[nodeID];
                        var relationships = connections.get(parseInt(nodeID));
                        if (deformerNode.attrType === 'Skin') {
                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);
                            skeleton.ID = nodeID;
                            if (relationships.parents.length > 1)
                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');
                            skeleton.geometryID = relationships.parents[0].ID;
                            skeletons[nodeID] = skeleton;
                        } else if (deformerNode.attrType === 'BlendShape') {
                            var morphTarget = { id: nodeID };
                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);
                            morphTarget.id = nodeID;
                            if (relationships.parents.length > 1)
                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');
                            morphTargets[nodeID] = morphTarget;
                        }
                    }
                }
                return {
                    skeletons: skeletons,
                    morphTargets: morphTargets
                };
            },
            parseSkeleton: function (relationships, deformerNodes) {
                var rawBones = [];
                relationships.children.forEach(function (child) {
                    var boneNode = deformerNodes[child.ID];
                    if (boneNode.attrType !== 'Cluster')
                        return;
                    var rawBone = {
                        ID: child.ID,
                        indices: [],
                        weights: [],
                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)
                    };
                    if ('Indexes' in boneNode) {
                        rawBone.indices = boneNode.Indexes.a;
                        rawBone.weights = boneNode.Weights.a;
                    }
                    rawBones.push(rawBone);
                });
                return {
                    rawBones: rawBones,
                    bones: []
                };
            },
            parseMorphTargets: function (relationships, deformerNodes) {
                var rawMorphTargets = [];
                for (var i = 0; i < relationships.children.length; i++) {
                    var child = relationships.children[i];
                    var morphTargetNode = deformerNodes[child.ID];
                    var rawMorphTarget = {
                        name: morphTargetNode.attrName,
                        initialWeight: morphTargetNode.DeformPercent,
                        id: morphTargetNode.id,
                        fullWeights: morphTargetNode.FullWeights.a
                    };
                    if (morphTargetNode.attrType !== 'BlendShapeChannel')
                        return;
                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {
                        return child.relationship === undefined;
                    })[0].ID;
                    rawMorphTargets.push(rawMorphTarget);
                }
                return rawMorphTargets;
            },
            parseScene: function (deformers, geometryMap, materialMap) {
                sceneGraph = new THREE.Group();
                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);
                var modelNodes = fbxTree.Objects.Model;
                var self = this;
                modelMap.forEach(function (model) {
                    var modelNode = modelNodes[model.ID];
                    self.setLookAtProperties(model, modelNode);
                    var parentConnections = connections.get(model.ID).parents;
                    parentConnections.forEach(function (connection) {
                        var parent = modelMap.get(connection.ID);
                        if (parent !== undefined)
                            parent.add(model);
                    });
                    if (model.parent === null) {
                        sceneGraph.add(model);
                    }
                });
                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);
                this.createAmbientLight();
                this.setupMorphMaterials();
                sceneGraph.traverse(function (node) {
                    if (node.userData.transformData) {
                        if (node.parent)
                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;
                        var transform = generateTransform(node.userData.transformData);
                        node.applyMatrix4(transform);
                    }
                });
                var animations = new AnimationParser().parse();
                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {
                    sceneGraph.children[0].animations = animations;
                    sceneGraph = sceneGraph.children[0];
                }
                sceneGraph.animations = animations;
            },
            parseModels: function (skeletons, geometryMap, materialMap) {
                var modelMap = new Map();
                var modelNodes = fbxTree.Objects.Model;
                for (var nodeID in modelNodes) {
                    var id = parseInt(nodeID);
                    var node = modelNodes[nodeID];
                    var relationships = connections.get(id);
                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);
                    if (!model) {
                        switch (node.attrType) {
                        case 'Camera':
                            model = this.createCamera(relationships);
                            break;
                        case 'Light':
                            model = this.createLight(relationships);
                            break;
                        case 'Mesh':
                            model = this.createMesh(relationships, geometryMap, materialMap);
                            break;
                        case 'NurbsCurve':
                            model = this.createCurve(relationships, geometryMap);
                            break;
                        case 'LimbNode':
                        case 'Root':
                            model = new THREE.Bone();
                            break;
                        case 'Null':
                        default:
                            model = new THREE.Group();
                            break;
                        }
                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';
                        model.ID = id;
                    }
                    this.getTransformData(model, node);
                    modelMap.set(id, model);
                }
                return modelMap;
            },
            buildSkeleton: function (relationships, skeletons, id, name) {
                var bone = null;
                relationships.parents.forEach(function (parent) {
                    for (var ID in skeletons) {
                        var skeleton = skeletons[ID];
                        skeleton.rawBones.forEach(function (rawBone, i) {
                            if (rawBone.ID === parent.ID) {
                                var subBone = bone;
                                bone = new THREE.Bone();
                                bone.matrixWorld.copy(rawBone.transformLink);
                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';
                                bone.ID = id;
                                skeleton.bones[i] = bone;
                                if (subBone !== null) {
                                    bone.add(subBone);
                                }
                            }
                        });
                    }
                });
                return bone;
            },
            createCamera: function (relationships) {
                var model;
                var cameraAttribute;
                relationships.children.forEach(function (child) {
                    var attr = fbxTree.Objects.NodeAttribute[child.ID];
                    if (attr !== undefined) {
                        cameraAttribute = attr;
                    }
                });
                if (cameraAttribute === undefined) {
                    model = new THREE.Object3D();
                } else {
                    var type = 0;
                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {
                        type = 1;
                    }
                    var nearClippingPlane = 1;
                    if (cameraAttribute.NearPlane !== undefined) {
                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;
                    }
                    var farClippingPlane = 1000;
                    if (cameraAttribute.FarPlane !== undefined) {
                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;
                    }
                    var width = window.innerWidth;
                    var height = window.innerHeight;
                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {
                        width = cameraAttribute.AspectWidth.value;
                        height = cameraAttribute.AspectHeight.value;
                    }
                    var aspect = width / height;
                    var fov = 45;
                    if (cameraAttribute.FieldOfView !== undefined) {
                        fov = cameraAttribute.FieldOfView.value;
                    }
                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;
                    switch (type) {
                    case 0:
                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);
                        if (focalLength !== null)
                            model.setFocalLength(focalLength);
                        break;
                    case 1:
                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);
                        break;
                    default:
                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');
                        model = new THREE.Object3D();
                        break;
                    }
                }
                return model;
            },
            createLight: function (relationships) {
                var model;
                var lightAttribute;
                relationships.children.forEach(function (child) {
                    var attr = fbxTree.Objects.NodeAttribute[child.ID];
                    if (attr !== undefined) {
                        lightAttribute = attr;
                    }
                });
                if (lightAttribute === undefined) {
                    model = new THREE.Object3D();
                } else {
                    var type;
                    if (lightAttribute.LightType === undefined) {
                        type = 0;
                    } else {
                        type = lightAttribute.LightType.value;
                    }
                    var color = 16777215;
                    if (lightAttribute.undefined !== undefined) {
                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);
                    }
                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;
                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {
                        intensity = 0;
                    }
                    var distance = 0;
                    if (lightAttribute.FarAttenuationEnd !== undefined) {
                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {
                            distance = 0;
                        } else {
                            distance = lightAttribute.FarAttenuationEnd.value;
                        }
                    }
                    var decay = 1;
                    switch (type) {
                    case 0:
                        model = new THREE.PointLight(color, intensity, distance, decay);
                        break;
                    case 1:
                        model = new THREE.DirectionalLight(color, intensity);
                        break;
                    case 2:
                        var angle = Math.PI / 3;
                        if (lightAttribute.InnerAngle !== undefined) {
                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);
                        }
                        var penumbra = 0;
                        if (lightAttribute.OuterAngle !== undefined) {
                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);
                            penumbra = Math.max(penumbra, 1);
                        }
                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);
                        break;
                    default:
                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');
                        model = new THREE.PointLight(color, intensity);
                        break;
                    }
                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {
                        model.castShadow = true;
                    }
                }
                return model;
            },
            createMesh: function (relationships, geometryMap, materialMap) {
                var model;
                var geometry = null;
                var material = null;
                var materials = [];
                relationships.children.forEach(function (child) {
                    if (geometryMap.has(child.ID)) {
                        geometry = geometryMap.get(child.ID);
                    }
                    if (materialMap.has(child.ID)) {
                        materials.push(materialMap.get(child.ID));
                    }
                });
                if (materials.length > 1) {
                    material = materials;
                } else if (materials.length > 0) {
                    material = materials[0];
                } else {
                    material = new THREE.MeshPhongMaterial({ color: 13421772 });
                    materials.push(material);
                }
                if ('color' in geometry.attributes) {
                    materials.forEach(function (material) {
                        material.vertexColors = true;
                    });
                }
                if (geometry.FBX_Deformer) {
                    materials.forEach(function (material) {
                        material.skinning = true;
                    });
                    model = new THREE.SkinnedMesh(geometry, material);
                    model.normalizeSkinWeights();
                } else {
                    model = new THREE.Mesh(geometry, material);
                }
                return model;
            },
            createCurve: function (relationships, geometryMap) {
                var geometry = relationships.children.reduce(function (geo, child) {
                    if (geometryMap.has(child.ID))
                        geo = geometryMap.get(child.ID);
                    return geo;
                }, null);
                var material = new THREE.LineBasicMaterial({
                    color: 3342591,
                    linewidth: 1
                });
                return new THREE.Line(geometry, material);
            },
            getTransformData: function (model, modelNode) {
                var transformData = {};
                if ('InheritType' in modelNode)
                    transformData.inheritType = parseInt(modelNode.InheritType.value);
                if ('RotationOrder' in modelNode)
                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
                else
                    transformData.eulerOrder = 'ZYX';
                if ('Lcl_Translation' in modelNode)
                    transformData.translation = modelNode.Lcl_Translation.value;
                if ('PreRotation' in modelNode)
                    transformData.preRotation = modelNode.PreRotation.value;
                if ('Lcl_Rotation' in modelNode)
                    transformData.rotation = modelNode.Lcl_Rotation.value;
                if ('PostRotation' in modelNode)
                    transformData.postRotation = modelNode.PostRotation.value;
                if ('Lcl_Scaling' in modelNode)
                    transformData.scale = modelNode.Lcl_Scaling.value;
                if ('ScalingOffset' in modelNode)
                    transformData.scalingOffset = modelNode.ScalingOffset.value;
                if ('ScalingPivot' in modelNode)
                    transformData.scalingPivot = modelNode.ScalingPivot.value;
                if ('RotationOffset' in modelNode)
                    transformData.rotationOffset = modelNode.RotationOffset.value;
                if ('RotationPivot' in modelNode)
                    transformData.rotationPivot = modelNode.RotationPivot.value;
                model.userData.transformData = transformData;
            },
            setLookAtProperties: function (model, modelNode) {
                if ('LookAtProperty' in modelNode) {
                    var children = connections.get(model.ID).children;
                    children.forEach(function (child) {
                        if (child.relationship === 'LookAtProperty') {
                            var lookAtTarget = fbxTree.Objects.Model[child.ID];
                            if ('Lcl_Translation' in lookAtTarget) {
                                var pos = lookAtTarget.Lcl_Translation.value;
                                if (model.target !== undefined) {
                                    model.target.position.fromArray(pos);
                                    sceneGraph.add(model.target);
                                } else {
                                    model.lookAt(new THREE.Vector3().fromArray(pos));
                                }
                            }
                        }
                    });
                }
            },
            bindSkeleton: function (skeletons, geometryMap, modelMap) {
                var bindMatrices = this.parsePoseNodes();
                for (var ID in skeletons) {
                    var skeleton = skeletons[ID];
                    var parents = connections.get(parseInt(skeleton.ID)).parents;
                    parents.forEach(function (parent) {
                        if (geometryMap.has(parent.ID)) {
                            var geoID = parent.ID;
                            var geoRelationships = connections.get(geoID);
                            geoRelationships.parents.forEach(function (geoConnParent) {
                                if (modelMap.has(geoConnParent.ID)) {
                                    var model = modelMap.get(geoConnParent.ID);
                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);
                                }
                            });
                        }
                    });
                }
            },
            parsePoseNodes: function () {
                var bindMatrices = {};
                if ('Pose' in fbxTree.Objects) {
                    var BindPoseNode = fbxTree.Objects.Pose;
                    for (var nodeID in BindPoseNode) {
                        if (BindPoseNode[nodeID].attrType === 'BindPose') {
                            var poseNodes = BindPoseNode[nodeID].PoseNode;
                            if (Array.isArray(poseNodes)) {
                                poseNodes.forEach(function (poseNode) {
                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);
                                });
                            } else {
                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);
                            }
                        }
                    }
                }
                return bindMatrices;
            },
            createAmbientLight: function () {
                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {
                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;
                    var r = ambientColor[0];
                    var g = ambientColor[1];
                    var b = ambientColor[2];
                    if (r !== 0 || g !== 0 || b !== 0) {
                        var color = new THREE.Color(r, g, b);
                        sceneGraph.add(new THREE.AmbientLight(color, 1));
                    }
                }
            },
            setupMorphMaterials: function () {
                var self = this;
                sceneGraph.traverse(function (child) {
                    if (child.isMesh) {
                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {
                            if (Array.isArray(child.material)) {
                                child.material.forEach(function (material, i) {
                                    self.setupMorphMaterial(child, material, i);
                                });
                            } else {
                                self.setupMorphMaterial(child, child.material);
                            }
                        }
                    }
                });
            },
            setupMorphMaterial: function (child, material, index) {
                var uuid = child.uuid;
                var matUuid = material.uuid;
                var sharedMat = false;
                sceneGraph.traverse(function (node) {
                    if (node.isMesh) {
                        if (Array.isArray(node.material)) {
                            node.material.forEach(function (mat) {
                                if (mat.uuid === matUuid && node.uuid !== uuid)
                                    sharedMat = true;
                            });
                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)
                            sharedMat = true;
                    }
                });
                if (sharedMat === true) {
                    var clonedMat = material.clone();
                    clonedMat.morphTargets = true;
                    if (index === undefined)
                        child.material = clonedMat;
                    else
                        child.material[index] = clonedMat;
                } else
                    material.morphTargets = true;
            }
        };
        function GeometryParser() {
        }
        GeometryParser.prototype = {
            constructor: GeometryParser,
            parse: function (deformers) {
                var geometryMap = new Map();
                if ('Geometry' in fbxTree.Objects) {
                    var geoNodes = fbxTree.Objects.Geometry;
                    for (var nodeID in geoNodes) {
                        var relationships = connections.get(parseInt(nodeID));
                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);
                        geometryMap.set(parseInt(nodeID), geo);
                    }
                }
                return geometryMap;
            },
            parseGeometry: function (relationships, geoNode, deformers) {
                switch (geoNode.attrType) {
                case 'Mesh':
                    return this.parseMeshGeometry(relationships, geoNode, deformers);
                    break;
                case 'NurbsCurve':
                    return this.parseNurbsGeometry(geoNode);
                    break;
                }
            },
            parseMeshGeometry: function (relationships, geoNode, deformers) {
                var skeletons = deformers.skeletons;
                var morphTargets = [];
                var modelNodes = relationships.parents.map(function (parent) {
                    return fbxTree.Objects.Model[parent.ID];
                });
                if (modelNodes.length === 0)
                    return;
                var skeleton = relationships.children.reduce(function (skeleton, child) {
                    if (skeletons[child.ID] !== undefined)
                        skeleton = skeletons[child.ID];
                    return skeleton;
                }, null);
                relationships.children.forEach(function (child) {
                    if (deformers.morphTargets[child.ID] !== undefined) {
                        morphTargets.push(deformers.morphTargets[child.ID]);
                    }
                });
                var modelNode = modelNodes[0];
                var transformData = {};
                if ('RotationOrder' in modelNode)
                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
                if ('InheritType' in modelNode)
                    transformData.inheritType = parseInt(modelNode.InheritType.value);
                if ('GeometricTranslation' in modelNode)
                    transformData.translation = modelNode.GeometricTranslation.value;
                if ('GeometricRotation' in modelNode)
                    transformData.rotation = modelNode.GeometricRotation.value;
                if ('GeometricScaling' in modelNode)
                    transformData.scale = modelNode.GeometricScaling.value;
                var transform = generateTransform(transformData);
                return this.genGeometry(geoNode, skeleton, morphTargets, transform);
            },
            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {
                var geo = new THREE.BufferGeometry();
                if (geoNode.attrName)
                    geo.name = geoNode.attrName;
                var geoInfo = this.parseGeoNode(geoNode, skeleton);
                var buffers = this.genBuffers(geoInfo);
                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);
                positionAttribute.applyMatrix4(preTransform);
                geo.setAttribute('position', positionAttribute);
                if (buffers.colors.length > 0) {
                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));
                }
                if (skeleton) {
                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));
                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));
                    geo.FBX_Deformer = skeleton;
                }
                if (buffers.normal.length > 0) {
                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);
                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);
                    normalAttribute.applyNormalMatrix(normalMatrix);
                    geo.setAttribute('normal', normalAttribute);
                }
                buffers.uvs.forEach(function (uvBuffer, i) {
                    var name = 'uv' + (i + 1).toString();
                    if (i === 0) {
                        name = 'uv';
                    }
                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));
                });
                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {
                    var prevMaterialIndex = buffers.materialIndex[0];
                    var startIndex = 0;
                    buffers.materialIndex.forEach(function (currentIndex, i) {
                        if (currentIndex !== prevMaterialIndex) {
                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);
                            prevMaterialIndex = currentIndex;
                            startIndex = i;
                        }
                    });
                    if (geo.groups.length > 0) {
                        var lastGroup = geo.groups[geo.groups.length - 1];
                        var lastIndex = lastGroup.start + lastGroup.count;
                        if (lastIndex !== buffers.materialIndex.length) {
                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);
                        }
                    }
                    if (geo.groups.length === 0) {
                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);
                    }
                }
                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);
                return geo;
            },
            parseGeoNode: function (geoNode, skeleton) {
                var geoInfo = {};
                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];
                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];
                if (geoNode.LayerElementColor) {
                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);
                }
                if (geoNode.LayerElementMaterial) {
                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);
                }
                if (geoNode.LayerElementNormal) {
                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);
                }
                if (geoNode.LayerElementUV) {
                    geoInfo.uv = [];
                    var i = 0;
                    while (geoNode.LayerElementUV[i]) {
                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));
                        i++;
                    }
                }
                geoInfo.weightTable = {};
                if (skeleton !== null) {
                    geoInfo.skeleton = skeleton;
                    skeleton.rawBones.forEach(function (rawBone, i) {
                        rawBone.indices.forEach(function (index, j) {
                            if (geoInfo.weightTable[index] === undefined)
                                geoInfo.weightTable[index] = [];
                            geoInfo.weightTable[index].push({
                                id: i,
                                weight: rawBone.weights[j]
                            });
                        });
                    });
                }
                return geoInfo;
            },
            genBuffers: function (geoInfo) {
                var buffers = {
                    vertex: [],
                    normal: [],
                    colors: [],
                    uvs: [],
                    materialIndex: [],
                    vertexWeights: [],
                    weightsIndices: []
                };
                var polygonIndex = 0;
                var faceLength = 0;
                var displayedWeightsWarning = false;
                var facePositionIndexes = [];
                var faceNormals = [];
                var faceColors = [];
                var faceUVs = [];
                var faceWeights = [];
                var faceWeightIndices = [];
                var self = this;
                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {
                    var endOfFace = false;
                    if (vertexIndex < 0) {
                        vertexIndex = vertexIndex ^ -1;
                        endOfFace = true;
                    }
                    var weightIndices = [];
                    var weights = [];
                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);
                    if (geoInfo.color) {
                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);
                        faceColors.push(data[0], data[1], data[2]);
                    }
                    if (geoInfo.skeleton) {
                        if (geoInfo.weightTable[vertexIndex] !== undefined) {
                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {
                                weights.push(wt.weight);
                                weightIndices.push(wt.id);
                            });
                        }
                        if (weights.length > 4) {
                            if (!displayedWeightsWarning) {
                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');
                                displayedWeightsWarning = true;
                            }
                            var wIndex = [
                                0,
                                0,
                                0,
                                0
                            ];
                            var Weight = [
                                0,
                                0,
                                0,
                                0
                            ];
                            weights.forEach(function (weight, weightIndex) {
                                var currentWeight = weight;
                                var currentIndex = weightIndices[weightIndex];
                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {
                                    if (currentWeight > comparedWeight) {
                                        comparedWeightArray[comparedWeightIndex] = currentWeight;
                                        currentWeight = comparedWeight;
                                        var tmp = wIndex[comparedWeightIndex];
                                        wIndex[comparedWeightIndex] = currentIndex;
                                        currentIndex = tmp;
                                    }
                                });
                            });
                            weightIndices = wIndex;
                            weights = Weight;
                        }
                        while (weights.length < 4) {
                            weights.push(0);
                            weightIndices.push(0);
                        }
                        for (var i = 0; i < 4; ++i) {
                            faceWeights.push(weights[i]);
                            faceWeightIndices.push(weightIndices[i]);
                        }
                    }
                    if (geoInfo.normal) {
                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);
                        faceNormals.push(data[0], data[1], data[2]);
                    }
                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {
                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];
                    }
                    if (geoInfo.uv) {
                        geoInfo.uv.forEach(function (uv, i) {
                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);
                            if (faceUVs[i] === undefined) {
                                faceUVs[i] = [];
                            }
                            faceUVs[i].push(data[0]);
                            faceUVs[i].push(data[1]);
                        });
                    }
                    faceLength++;
                    if (endOfFace) {
                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);
                        polygonIndex++;
                        faceLength = 0;
                        facePositionIndexes = [];
                        faceNormals = [];
                        faceColors = [];
                        faceUVs = [];
                        faceWeights = [];
                        faceWeightIndices = [];
                    }
                });
                return buffers;
            },
            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {
                for (var i = 2; i < faceLength; i++) {
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);
                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);
                    if (geoInfo.skeleton) {
                        buffers.vertexWeights.push(faceWeights[0]);
                        buffers.vertexWeights.push(faceWeights[1]);
                        buffers.vertexWeights.push(faceWeights[2]);
                        buffers.vertexWeights.push(faceWeights[3]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);
                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);
                        buffers.vertexWeights.push(faceWeights[i * 4]);
                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);
                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);
                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);
                        buffers.weightsIndices.push(faceWeightIndices[0]);
                        buffers.weightsIndices.push(faceWeightIndices[1]);
                        buffers.weightsIndices.push(faceWeightIndices[2]);
                        buffers.weightsIndices.push(faceWeightIndices[3]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);
                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);
                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);
                    }
                    if (geoInfo.color) {
                        buffers.colors.push(faceColors[0]);
                        buffers.colors.push(faceColors[1]);
                        buffers.colors.push(faceColors[2]);
                        buffers.colors.push(faceColors[(i - 1) * 3]);
                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);
                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);
                        buffers.colors.push(faceColors[i * 3]);
                        buffers.colors.push(faceColors[i * 3 + 1]);
                        buffers.colors.push(faceColors[i * 3 + 2]);
                    }
                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {
                        buffers.materialIndex.push(materialIndex);
                        buffers.materialIndex.push(materialIndex);
                        buffers.materialIndex.push(materialIndex);
                    }
                    if (geoInfo.normal) {
                        buffers.normal.push(faceNormals[0]);
                        buffers.normal.push(faceNormals[1]);
                        buffers.normal.push(faceNormals[2]);
                        buffers.normal.push(faceNormals[(i - 1) * 3]);
                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);
                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);
                        buffers.normal.push(faceNormals[i * 3]);
                        buffers.normal.push(faceNormals[i * 3 + 1]);
                        buffers.normal.push(faceNormals[i * 3 + 2]);
                    }
                    if (geoInfo.uv) {
                        geoInfo.uv.forEach(function (uv, j) {
                            if (buffers.uvs[j] === undefined)
                                buffers.uvs[j] = [];
                            buffers.uvs[j].push(faceUVs[j][0]);
                            buffers.uvs[j].push(faceUVs[j][1]);
                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);
                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);
                            buffers.uvs[j].push(faceUVs[j][i * 2]);
                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);
                        });
                    }
                }
            },
            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {
                if (morphTargets.length === 0)
                    return;
                parentGeo.morphTargetsRelative = true;
                parentGeo.morphAttributes.position = [];
                var self = this;
                morphTargets.forEach(function (morphTarget) {
                    morphTarget.rawTargets.forEach(function (rawTarget) {
                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];
                        if (morphGeoNode !== undefined) {
                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);
                        }
                    });
                });
            },
            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {
                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];
                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];
                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];
                var length = parentGeo.attributes.position.count * 3;
                var morphPositions = new Float32Array(length);
                for (var i = 0; i < indices.length; i++) {
                    var morphIndex = indices[i] * 3;
                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];
                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];
                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];
                }
                var morphGeoInfo = {
                    vertexIndices: vertexIndices,
                    vertexPositions: morphPositions
                };
                var morphBuffers = this.genBuffers(morphGeoInfo);
                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);
                positionAttribute.name = name || morphGeoNode.attrName;
                positionAttribute.applyMatrix4(preTransform);
                parentGeo.morphAttributes.position.push(positionAttribute);
            },
            parseNormals: function (NormalNode) {
                var mappingType = NormalNode.MappingInformationType;
                var referenceType = NormalNode.ReferenceInformationType;
                var buffer = NormalNode.Normals.a;
                var indexBuffer = [];
                if (referenceType === 'IndexToDirect') {
                    if ('NormalIndex' in NormalNode) {
                        indexBuffer = NormalNode.NormalIndex.a;
                    } else if ('NormalsIndex' in NormalNode) {
                        indexBuffer = NormalNode.NormalsIndex.a;
                    }
                }
                return {
                    dataSize: 3,
                    buffer: buffer,
                    indices: indexBuffer,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseUVs: function (UVNode) {
                var mappingType = UVNode.MappingInformationType;
                var referenceType = UVNode.ReferenceInformationType;
                var buffer = UVNode.UV.a;
                var indexBuffer = [];
                if (referenceType === 'IndexToDirect') {
                    indexBuffer = UVNode.UVIndex.a;
                }
                return {
                    dataSize: 2,
                    buffer: buffer,
                    indices: indexBuffer,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseVertexColors: function (ColorNode) {
                var mappingType = ColorNode.MappingInformationType;
                var referenceType = ColorNode.ReferenceInformationType;
                var buffer = ColorNode.Colors.a;
                var indexBuffer = [];
                if (referenceType === 'IndexToDirect') {
                    indexBuffer = ColorNode.ColorIndex.a;
                }
                return {
                    dataSize: 4,
                    buffer: buffer,
                    indices: indexBuffer,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseMaterialIndices: function (MaterialNode) {
                var mappingType = MaterialNode.MappingInformationType;
                var referenceType = MaterialNode.ReferenceInformationType;
                if (mappingType === 'NoMappingInformation') {
                    return {
                        dataSize: 1,
                        buffer: [0],
                        indices: [0],
                        mappingType: 'AllSame',
                        referenceType: referenceType
                    };
                }
                var materialIndexBuffer = MaterialNode.Materials.a;
                var materialIndices = [];
                for (var i = 0; i < materialIndexBuffer.length; ++i) {
                    materialIndices.push(i);
                }
                return {
                    dataSize: 1,
                    buffer: materialIndexBuffer,
                    indices: materialIndices,
                    mappingType: mappingType,
                    referenceType: referenceType
                };
            },
            parseNurbsGeometry: function (geoNode) {
                if (c.NURBSCurve === undefined) {
                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');
                    return new THREE.BufferGeometry();
                }
                var order = parseInt(geoNode.Order);
                if (isNaN(order)) {
                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);
                    return new THREE.BufferGeometry();
                }
                var degree = order - 1;
                var knots = geoNode.KnotVector.a;
                var controlPoints = [];
                var pointsValues = geoNode.Points.a;
                for (var i = 0, l = pointsValues.length; i < l; i += 4) {
                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));
                }
                var startKnot, endKnot;
                if (geoNode.Form === 'Closed') {
                    controlPoints.push(controlPoints[0]);
                } else if (geoNode.Form === 'Periodic') {
                    startKnot = degree;
                    endKnot = knots.length - 1 - startKnot;
                    for (var i = 0; i < degree; ++i) {
                        controlPoints.push(controlPoints[i]);
                    }
                }
                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);
                var vertices = curve.getPoints(controlPoints.length * 7);
                var positions = new Float32Array(vertices.length * 3);
                vertices.forEach(function (vertex, i) {
                    vertex.toArray(positions, i * 3);
                });
                var geometry = new THREE.BufferGeometry();
                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
                return geometry;
            }
        };
        function AnimationParser() {
        }
        AnimationParser.prototype = {
            constructor: AnimationParser,
            parse: function () {
                var animationClips = [];
                var rawClips = this.parseClips();
                if (rawClips !== undefined) {
                    for (var key in rawClips) {
                        var rawClip = rawClips[key];
                        var clip = this.addClip(rawClip);
                        animationClips.push(clip);
                    }
                }
                return animationClips;
            },
            parseClips: function () {
                if (fbxTree.Objects.AnimationCurve === undefined)
                    return undefined;
                var curveNodesMap = this.parseAnimationCurveNodes();
                this.parseAnimationCurves(curveNodesMap);
                var layersMap = this.parseAnimationLayers(curveNodesMap);
                var rawClips = this.parseAnimStacks(layersMap);
                return rawClips;
            },
            parseAnimationCurveNodes: function () {
                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;
                var curveNodesMap = new Map();
                for (var nodeID in rawCurveNodes) {
                    var rawCurveNode = rawCurveNodes[nodeID];
                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {
                        var curveNode = {
                            id: rawCurveNode.id,
                            attr: rawCurveNode.attrName,
                            curves: {}
                        };
                        curveNodesMap.set(curveNode.id, curveNode);
                    }
                }
                return curveNodesMap;
            },
            parseAnimationCurves: function (curveNodesMap) {
                var rawCurves = fbxTree.Objects.AnimationCurve;
                for (var nodeID in rawCurves) {
                    var animationCurve = {
                        id: rawCurves[nodeID].id,
                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),
                        values: rawCurves[nodeID].KeyValueFloat.a
                    };
                    var relationships = connections.get(animationCurve.id);
                    if (relationships !== undefined) {
                        var animationCurveID = relationships.parents[0].ID;
                        var animationCurveRelationship = relationships.parents[0].relationship;
                        if (animationCurveRelationship.match(/X/)) {
                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;
                        } else if (animationCurveRelationship.match(/Y/)) {
                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;
                        } else if (animationCurveRelationship.match(/Z/)) {
                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;
                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {
                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;
                        }
                    }
                }
            },
            parseAnimationLayers: function (curveNodesMap) {
                var rawLayers = fbxTree.Objects.AnimationLayer;
                var layersMap = new Map();
                for (var nodeID in rawLayers) {
                    var layerCurveNodes = [];
                    var connection = connections.get(parseInt(nodeID));
                    if (connection !== undefined) {
                        var children = connection.children;
                        children.forEach(function (child, i) {
                            if (curveNodesMap.has(child.ID)) {
                                var curveNode = curveNodesMap.get(child.ID);
                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {
                                    if (layerCurveNodes[i] === undefined) {
                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {
                                            return parent.relationship !== undefined;
                                        })[0].ID;
                                        if (modelID !== undefined) {
                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];
                                            var node = {
                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',
                                                ID: rawModel.id,
                                                initialPosition: [
                                                    0,
                                                    0,
                                                    0
                                                ],
                                                initialRotation: [
                                                    0,
                                                    0,
                                                    0
                                                ],
                                                initialScale: [
                                                    1,
                                                    1,
                                                    1
                                                ]
                                            };
                                            sceneGraph.traverse(function (child) {
                                                if (child.ID === rawModel.id) {
                                                    node.transform = child.matrix;
                                                    if (child.userData.transformData)
                                                        node.eulerOrder = child.userData.transformData.eulerOrder;
                                                }
                                            });
                                            if (!node.transform)
                                                node.transform = new THREE.Matrix4();
                                            if ('PreRotation' in rawModel)
                                                node.preRotation = rawModel.PreRotation.value;
                                            if ('PostRotation' in rawModel)
                                                node.postRotation = rawModel.PostRotation.value;
                                            layerCurveNodes[i] = node;
                                        }
                                    }
                                    if (layerCurveNodes[i])
                                        layerCurveNodes[i][curveNode.attr] = curveNode;
                                } else if (curveNode.curves.morph !== undefined) {
                                    if (layerCurveNodes[i] === undefined) {
                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {
                                            return parent.relationship !== undefined;
                                        })[0].ID;
                                        var morpherID = connections.get(deformerID).parents[0].ID;
                                        var geoID = connections.get(morpherID).parents[0].ID;
                                        var modelID = connections.get(geoID).parents[0].ID;
                                        var rawModel = fbxTree.Objects.Model[modelID];
                                        var node = {
                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',
                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName
                                        };
                                        layerCurveNodes[i] = node;
                                    }
                                    layerCurveNodes[i][curveNode.attr] = curveNode;
                                }
                            }
                        });
                        layersMap.set(parseInt(nodeID), layerCurveNodes);
                    }
                }
                return layersMap;
            },
            parseAnimStacks: function (layersMap) {
                var rawStacks = fbxTree.Objects.AnimationStack;
                var rawClips = {};
                for (var nodeID in rawStacks) {
                    var children = connections.get(parseInt(nodeID)).children;
                    if (children.length > 1) {
                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');
                    }
                    var layer = layersMap.get(children[0].ID);
                    rawClips[nodeID] = {
                        name: rawStacks[nodeID].attrName,
                        layer: layer
                    };
                }
                return rawClips;
            },
            addClip: function (rawClip) {
                var tracks = [];
                var self = this;
                rawClip.layer.forEach(function (rawTracks) {
                    tracks = tracks.concat(self.generateTracks(rawTracks));
                });
                return new THREE.AnimationClip(rawClip.name, -1, tracks);
            },
            generateTracks: function (rawTracks) {
                var tracks = [];
                var initialPosition = new THREE.Vector3();
                var initialRotation = new THREE.Quaternion();
                var initialScale = new THREE.Vector3();
                if (rawTracks.transform)
                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);
                initialPosition = initialPosition.toArray();
                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();
                initialScale = initialScale.toArray();
                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {
                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');
                    if (positionTrack !== undefined)
                        tracks.push(positionTrack);
                }
                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {
                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);
                    if (rotationTrack !== undefined)
                        tracks.push(rotationTrack);
                }
                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {
                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');
                    if (scaleTrack !== undefined)
                        tracks.push(scaleTrack);
                }
                if (rawTracks.DeformPercent !== undefined) {
                    var morphTrack = this.generateMorphTrack(rawTracks);
                    if (morphTrack !== undefined)
                        tracks.push(morphTrack);
                }
                return tracks;
            },
            generateVectorTrack: function (modelName, curves, initialValue, type) {
                var times = this.getTimesForAllAxes(curves);
                var values = this.getKeyframeTrackValues(times, curves, initialValue);
                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);
            },
            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {
                if (curves.x !== undefined) {
                    this.interpolateRotations(curves.x);
                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);
                }
                if (curves.y !== undefined) {
                    this.interpolateRotations(curves.y);
                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);
                }
                if (curves.z !== undefined) {
                    this.interpolateRotations(curves.z);
                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);
                }
                var times = this.getTimesForAllAxes(curves);
                var values = this.getKeyframeTrackValues(times, curves, initialValue);
                if (preRotation !== undefined) {
                    preRotation = preRotation.map(THREE.MathUtils.degToRad);
                    preRotation.push(eulerOrder);
                    preRotation = new THREE.Euler().fromArray(preRotation);
                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);
                }
                if (postRotation !== undefined) {
                    postRotation = postRotation.map(THREE.MathUtils.degToRad);
                    postRotation.push(eulerOrder);
                    postRotation = new THREE.Euler().fromArray(postRotation);
                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();
                }
                var quaternion = new THREE.Quaternion();
                var euler = new THREE.Euler();
                var quaternionValues = [];
                for (var i = 0; i < values.length; i += 3) {
                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);
                    quaternion.setFromEuler(euler);
                    if (preRotation !== undefined)
                        quaternion.premultiply(preRotation);
                    if (postRotation !== undefined)
                        quaternion.multiply(postRotation);
                    quaternion.toArray(quaternionValues, i / 3 * 4);
                }
                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);
            },
            generateMorphTrack: function (rawTracks) {
                var curves = rawTracks.DeformPercent.curves.morph;
                var values = curves.values.map(function (val) {
                    return val / 100;
                });
                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];
                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);
            },
            getTimesForAllAxes: function (curves) {
                var times = [];
                if (curves.x !== undefined)
                    times = times.concat(curves.x.times);
                if (curves.y !== undefined)
                    times = times.concat(curves.y.times);
                if (curves.z !== undefined)
                    times = times.concat(curves.z.times);
                times = times.sort(function (a, b) {
                    return a - b;
                }).filter(function (elem, index, array) {
                    return array.indexOf(elem) == index;
                });
                return times;
            },
            getKeyframeTrackValues: function (times, curves, initialValue) {
                var prevValue = initialValue;
                var values = [];
                var xIndex = -1;
                var yIndex = -1;
                var zIndex = -1;
                times.forEach(function (time) {
                    if (curves.x)
                        xIndex = curves.x.times.indexOf(time);
                    if (curves.y)
                        yIndex = curves.y.times.indexOf(time);
                    if (curves.z)
                        zIndex = curves.z.times.indexOf(time);
                    if (xIndex !== -1) {
                        var xValue = curves.x.values[xIndex];
                        values.push(xValue);
                        prevValue[0] = xValue;
                    } else {
                        values.push(prevValue[0]);
                    }
                    if (yIndex !== -1) {
                        var yValue = curves.y.values[yIndex];
                        values.push(yValue);
                        prevValue[1] = yValue;
                    } else {
                        values.push(prevValue[1]);
                    }
                    if (zIndex !== -1) {
                        var zValue = curves.z.values[zIndex];
                        values.push(zValue);
                        prevValue[2] = zValue;
                    } else {
                        values.push(prevValue[2]);
                    }
                });
                return values;
            },
            interpolateRotations: function (curve) {
                for (var i = 1; i < curve.values.length; i++) {
                    var initialValue = curve.values[i - 1];
                    var valuesSpan = curve.values[i] - initialValue;
                    var absoluteSpan = Math.abs(valuesSpan);
                    if (absoluteSpan >= 180) {
                        var numSubIntervals = absoluteSpan / 180;
                        var step = valuesSpan / numSubIntervals;
                        var nextValue = initialValue + step;
                        var initialTime = curve.times[i - 1];
                        var timeSpan = curve.times[i] - initialTime;
                        var interval = timeSpan / numSubIntervals;
                        var nextTime = initialTime + interval;
                        var interpolatedTimes = [];
                        var interpolatedValues = [];
                        while (nextTime < curve.times[i]) {
                            interpolatedTimes.push(nextTime);
                            nextTime += interval;
                            interpolatedValues.push(nextValue);
                            nextValue += step;
                        }
                        curve.times = inject(curve.times, i, interpolatedTimes);
                        curve.values = inject(curve.values, i, interpolatedValues);
                    }
                }
            }
        };
        function TextParser() {
        }
        TextParser.prototype = {
            constructor: TextParser,
            getPrevNode: function () {
                return this.nodeStack[this.currentIndent - 2];
            },
            getCurrentNode: function () {
                return this.nodeStack[this.currentIndent - 1];
            },
            getCurrentProp: function () {
                return this.currentProp;
            },
            pushStack: function (node) {
                this.nodeStack.push(node);
                this.currentIndent += 1;
            },
            popStack: function () {
                this.nodeStack.pop();
                this.currentIndent -= 1;
            },
            setCurrentProp: function (val, name) {
                this.currentProp = val;
                this.currentPropName = name;
            },
            parse: function (text) {
                this.currentIndent = 0;
                this.allNodes = new FBXTree();
                this.nodeStack = [];
                this.currentProp = [];
                this.currentPropName = '';
                var self = this;
                var split = text.split(/[\r\n]+/);
                split.forEach(function (line, i) {
                    var matchComment = line.match(/^[\s\t]*;/);
                    var matchEmpty = line.match(/^[\s\t]*$/);
                    if (matchComment || matchEmpty)
                        return;
                    var matchBeginning = line.match('^\\t{' + self.currentIndent + '}(\\w+):(.*){', '');
                    var matchProperty = line.match('^\\t{' + self.currentIndent + '}(\\w+):[\\s\\t\\r\\n](.*)');
                    var matchEnd = line.match('^\\t{' + (self.currentIndent - 1) + '}}');
                    if (matchBeginning) {
                        self.parseNodeBegin(line, matchBeginning);
                    } else if (matchProperty) {
                        self.parseNodeProperty(line, matchProperty, split[++i]);
                    } else if (matchEnd) {
                        self.popStack();
                    } else if (line.match(/^[^\s\t}]/)) {
                        self.parseNodePropertyContinued(line);
                    }
                });
                return this.allNodes;
            },
            parseNodeBegin: function (line, property) {
                var nodeName = property[1].trim().replace(/^"/, '').replace(/"$/, '');
                var nodeAttrs = property[2].split(',').map(function (attr) {
                    return attr.trim().replace(/^"/, '').replace(/"$/, '');
                });
                var node = { name: nodeName };
                var attrs = this.parseNodeAttr(nodeAttrs);
                var currentNode = this.getCurrentNode();
                if (this.currentIndent === 0) {
                    this.allNodes.add(nodeName, node);
                } else {
                    if (nodeName in currentNode) {
                        if (nodeName === 'PoseNode') {
                            currentNode.PoseNode.push(node);
                        } else if (currentNode[nodeName].id !== undefined) {
                            currentNode[nodeName] = {};
                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];
                        }
                        if (attrs.id !== '')
                            currentNode[nodeName][attrs.id] = node;
                    } else if (typeof attrs.id === 'number') {
                        currentNode[nodeName] = {};
                        currentNode[nodeName][attrs.id] = node;
                    } else if (nodeName !== 'Properties70') {
                        if (nodeName === 'PoseNode')
                            currentNode[nodeName] = [node];
                        else
                            currentNode[nodeName] = node;
                    }
                }
                if (typeof attrs.id === 'number')
                    node.id = attrs.id;
                if (attrs.name !== '')
                    node.attrName = attrs.name;
                if (attrs.type !== '')
                    node.attrType = attrs.type;
                this.pushStack(node);
            },
            parseNodeAttr: function (attrs) {
                var id = attrs[0];
                if (attrs[0] !== '') {
                    id = parseInt(attrs[0]);
                    if (isNaN(id)) {
                        id = attrs[0];
                    }
                }
                var name = '', type = '';
                if (attrs.length > 1) {
                    name = attrs[1].replace(/^(\w+)::/, '');
                    type = attrs[2];
                }
                return {
                    id: id,
                    name: name,
                    type: type
                };
            },
            parseNodeProperty: function (line, property, contentLine) {
                var propName = property[1].replace(/^"/, '').replace(/"$/, '').trim();
                var propValue = property[2].replace(/^"/, '').replace(/"$/, '').trim();
                if (propName === 'Content' && propValue === ',') {
                    propValue = contentLine.replace(/"/g, '').replace(/,$/, '').trim();
                }
                var currentNode = this.getCurrentNode();
                var parentName = currentNode.name;
                if (parentName === 'Properties70') {
                    this.parseNodeSpecialProperty(line, propName, propValue);
                    return;
                }
                if (propName === 'C') {
                    var connProps = propValue.split(',').slice(1);
                    var from = parseInt(connProps[0]);
                    var to = parseInt(connProps[1]);
                    var rest = propValue.split(',').slice(3);
                    rest = rest.map(function (elem) {
                        return elem.trim().replace(/^"/, '');
                    });
                    propName = 'connections';
                    propValue = [
                        from,
                        to
                    ];
                    append(propValue, rest);
                    if (currentNode[propName] === undefined) {
                        currentNode[propName] = [];
                    }
                }
                if (propName === 'Node')
                    currentNode.id = propValue;
                if (propName in currentNode && Array.isArray(currentNode[propName])) {
                    currentNode[propName].push(propValue);
                } else {
                    if (propName !== 'a')
                        currentNode[propName] = propValue;
                    else
                        currentNode.a = propValue;
                }
                this.setCurrentProp(currentNode, propName);
                if (propName === 'a' && propValue.slice(-1) !== ',') {
                    currentNode.a = parseNumberArray(propValue);
                }
            },
            parseNodePropertyContinued: function (line) {
                var currentNode = this.getCurrentNode();
                currentNode.a += line;
                if (line.slice(-1) !== ',') {
                    currentNode.a = parseNumberArray(currentNode.a);
                }
            },
            parseNodeSpecialProperty: function (line, propName, propValue) {
                var props = propValue.split('",').map(function (prop) {
                    return prop.trim().replace(/^\"/, '').replace(/\s/, '_');
                });
                var innerPropName = props[0];
                var innerPropType1 = props[1];
                var innerPropType2 = props[2];
                var innerPropFlag = props[3];
                var innerPropValue = props[4];
                switch (innerPropType1) {
                case 'int':
                case 'enum':
                case 'bool':
                case 'ULongLong':
                case 'double':
                case 'Number':
                case 'FieldOfView':
                    innerPropValue = parseFloat(innerPropValue);
                    break;
                case 'Color':
                case 'ColorRGB':
                case 'Vector3D':
                case 'Lcl_Translation':
                case 'Lcl_Rotation':
                case 'Lcl_Scaling':
                    innerPropValue = parseNumberArray(innerPropValue);
                    break;
                }
                this.getPrevNode()[innerPropName] = {
                    'type': innerPropType1,
                    'type2': innerPropType2,
                    'flag': innerPropFlag,
                    'value': innerPropValue
                };
                this.setCurrentProp(this.getPrevNode(), innerPropName);
            }
        };
        function BinaryParser() {
        }
        BinaryParser.prototype = {
            constructor: BinaryParser,
            parse: function (buffer) {
                var reader = new BinaryReader(buffer);
                reader.skip(23);
                var version = reader.getUint32();
                console.log('THREE.FBXLoader: FBX binary version: ' + version);
                var allNodes = new FBXTree();
                while (!this.endOfContent(reader)) {
                    var node = this.parseNode(reader, version);
                    if (node !== null)
                        allNodes.add(node.name, node);
                }
                return allNodes;
            },
            endOfContent: function (reader) {
                if (reader.size() % 16 === 0) {
                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();
                } else {
                    return reader.getOffset() + 160 + 16 >= reader.size();
                }
            },
            parseNode: function (reader, version) {
                var node = {};
                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();
                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();
                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();
                var nameLen = reader.getUint8();
                var name = reader.getString(nameLen);
                if (endOffset === 0)
                    return null;
                var propertyList = [];
                for (var i = 0; i < numProperties; i++) {
                    propertyList.push(this.parseProperty(reader));
                }
                var id = propertyList.length > 0 ? propertyList[0] : '';
                var attrName = propertyList.length > 1 ? propertyList[1] : '';
                var attrType = propertyList.length > 2 ? propertyList[2] : '';
                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;
                while (endOffset > reader.getOffset()) {
                    var subNode = this.parseNode(reader, version);
                    if (subNode !== null)
                        this.parseSubNode(name, node, subNode);
                }
                node.propertyList = propertyList;
                if (typeof id === 'number')
                    node.id = id;
                if (attrName !== '')
                    node.attrName = attrName;
                if (attrType !== '')
                    node.attrType = attrType;
                if (name !== '')
                    node.name = name;
                return node;
            },
            parseSubNode: function (name, node, subNode) {
                if (subNode.singleProperty === true) {
                    var value = subNode.propertyList[0];
                    if (Array.isArray(value)) {
                        node[subNode.name] = subNode;
                        subNode.a = value;
                    } else {
                        node[subNode.name] = value;
                    }
                } else if (name === 'Connections' && subNode.name === 'C') {
                    var array = [];
                    subNode.propertyList.forEach(function (property, i) {
                        if (i !== 0)
                            array.push(property);
                    });
                    if (node.connections === undefined) {
                        node.connections = [];
                    }
                    node.connections.push(array);
                } else if (subNode.name === 'Properties70') {
                    var keys = Object.keys(subNode);
                    keys.forEach(function (key) {
                        node[key] = subNode[key];
                    });
                } else if (name === 'Properties70' && subNode.name === 'P') {
                    var innerPropName = subNode.propertyList[0];
                    var innerPropType1 = subNode.propertyList[1];
                    var innerPropType2 = subNode.propertyList[2];
                    var innerPropFlag = subNode.propertyList[3];
                    var innerPropValue;
                    if (innerPropName.indexOf('Lcl ') === 0)
                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');
                    if (innerPropType1.indexOf('Lcl ') === 0)
                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');
                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {
                        innerPropValue = [
                            subNode.propertyList[4],
                            subNode.propertyList[5],
                            subNode.propertyList[6]
                        ];
                    } else {
                        innerPropValue = subNode.propertyList[4];
                    }
                    node[innerPropName] = {
                        'type': innerPropType1,
                        'type2': innerPropType2,
                        'flag': innerPropFlag,
                        'value': innerPropValue
                    };
                } else if (node[subNode.name] === undefined) {
                    if (typeof subNode.id === 'number') {
                        node[subNode.name] = {};
                        node[subNode.name][subNode.id] = subNode;
                    } else {
                        node[subNode.name] = subNode;
                    }
                } else {
                    if (subNode.name === 'PoseNode') {
                        if (!Array.isArray(node[subNode.name])) {
                            node[subNode.name] = [node[subNode.name]];
                        }
                        node[subNode.name].push(subNode);
                    } else if (node[subNode.name][subNode.id] === undefined) {
                        node[subNode.name][subNode.id] = subNode;
                    }
                }
            },
            parseProperty: function (reader) {
                var type = reader.getString(1);
                switch (type) {
                case 'C':
                    return reader.getBoolean();
                case 'D':
                    return reader.getFloat64();
                case 'F':
                    return reader.getFloat32();
                case 'I':
                    return reader.getInt32();
                case 'L':
                    return reader.getInt64();
                case 'R':
                    var length = reader.getUint32();
                    return reader.getArrayBuffer(length);
                case 'S':
                    var length = reader.getUint32();
                    return reader.getString(length);
                case 'Y':
                    return reader.getInt16();
                case 'b':
                case 'c':
                case 'd':
                case 'f':
                case 'i':
                case 'l':
                    var arrayLength = reader.getUint32();
                    var encoding = reader.getUint32();
                    var compressedLength = reader.getUint32();
                    if (encoding === 0) {
                        switch (type) {
                        case 'b':
                        case 'c':
                            return reader.getBooleanArray(arrayLength);
                        case 'd':
                            return reader.getFloat64Array(arrayLength);
                        case 'f':
                            return reader.getFloat32Array(arrayLength);
                        case 'i':
                            return reader.getInt32Array(arrayLength);
                        case 'l':
                            return reader.getInt64Array(arrayLength);
                        }
                    }
                    //if (typeof b.Zlib === 'undefined') {
                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');
                    //}
                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));
                    var reader2 = new BinaryReader(inflate.decompress().buffer);
                    switch (type) {
                    case 'b':
                    case 'c':
                        return reader2.getBooleanArray(arrayLength);
                    case 'd':
                        return reader2.getFloat64Array(arrayLength);
                    case 'f':
                        return reader2.getFloat32Array(arrayLength);
                    case 'i':
                        return reader2.getInt32Array(arrayLength);
                    case 'l':
                        return reader2.getInt64Array(arrayLength);
                    }
                default:
                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);
                }
            }
        };
        function BinaryReader(buffer, littleEndian) {
            this.dv = new DataView(buffer);
            this.offset = 0;
            this.littleEndian = littleEndian !== undefined ? littleEndian : true;
        }
        BinaryReader.prototype = {
            constructor: BinaryReader,
            getOffset: function () {
                return this.offset;
            },
            size: function () {
                return this.dv.buffer.byteLength;
            },
            skip: function (length) {
                this.offset += length;
            },
            getBoolean: function () {
                return (this.getUint8() & 1) === 1;
            },
            getBooleanArray: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getBoolean());
                }
                return a;
            },
            getUint8: function () {
                var value = this.dv.getUint8(this.offset);
                this.offset += 1;
                return value;
            },
            getInt16: function () {
                var value = this.dv.getInt16(this.offset, this.littleEndian);
                this.offset += 2;
                return value;
            },
            getInt32: function () {
                var value = this.dv.getInt32(this.offset, this.littleEndian);
                this.offset += 4;
                return value;
            },
            getInt32Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getInt32());
                }
                return a;
            },
            getUint32: function () {
                var value = this.dv.getUint32(this.offset, this.littleEndian);
                this.offset += 4;
                return value;
            },
            getInt64: function () {
                var low, high;
                if (this.littleEndian) {
                    low = this.getUint32();
                    high = this.getUint32();
                } else {
                    high = this.getUint32();
                    low = this.getUint32();
                }
                if (high & 2147483648) {
                    high = ~high & 4294967295;
                    low = ~low & 4294967295;
                    if (low === 4294967295)
                        high = high + 1 & 4294967295;
                    low = low + 1 & 4294967295;
                    return -(high * 4294967296 + low);
                }
                return high * 4294967296 + low;
            },
            getInt64Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getInt64());
                }
                return a;
            },
            getUint64: function () {
                var low, high;
                if (this.littleEndian) {
                    low = this.getUint32();
                    high = this.getUint32();
                } else {
                    high = this.getUint32();
                    low = this.getUint32();
                }
                return high * 4294967296 + low;
            },
            getFloat32: function () {
                var value = this.dv.getFloat32(this.offset, this.littleEndian);
                this.offset += 4;
                return value;
            },
            getFloat32Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getFloat32());
                }
                return a;
            },
            getFloat64: function () {
                var value = this.dv.getFloat64(this.offset, this.littleEndian);
                this.offset += 8;
                return value;
            },
            getFloat64Array: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a.push(this.getFloat64());
                }
                return a;
            },
            getArrayBuffer: function (size) {
                var value = this.dv.buffer.slice(this.offset, this.offset + size);
                this.offset += size;
                return value;
            },
            getString: function (size) {
                var a = [];
                for (var i = 0; i < size; i++) {
                    a[i] = this.getUint8();
                }
                var nullByte = a.indexOf(0);
                if (nullByte >= 0)
                    a = a.slice(0, nullByte);
                return THREE.LoaderUtils.decodeText(new Uint8Array(a));
            }
        };
        function FBXTree() {
        }
        FBXTree.prototype = {
            constructor: FBXTree,
            add: function (key, val) {
                this[key] = val;
            }
        };
        function isFbxFormatBinary(buffer) {
            var CORRECT = 'Kaydara FBX Binary  \0';
            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);
        }
        function isFbxFormatASCII(text) {
            var CORRECT = [
                'K',
                'a',
                'y',
                'd',
                'a',
                'r',
                'a',
                '\\',
                'F',
                'B',
                'X',
                '\\',
                'B',
                'i',
                'n',
                'a',
                'r',
                'y',
                '\\',
                '\\'
            ];
            var cursor = 0;
            function read(offset) {
                var result = text[offset - 1];
                text = text.slice(cursor + offset);
                cursor++;
                return result;
            }
            for (var i = 0; i < CORRECT.length; ++i) {
                var num = read(1);
                if (num === CORRECT[i]) {
                    return false;
                }
            }
            return true;
        }
        function getFbxVersion(text) {
            var versionRegExp = /FBXVersion: (\d+)/;
            var match = text.match(versionRegExp);
            if (match) {
                var version = parseInt(match[1]);
                return version;
            }
            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');
        }
        function convertFBXTimeToSeconds(time) {
            return time / 46186158000;
        }
        var dataArray = [];
        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
            var index;
            switch (infoObject.mappingType) {
            case 'ByPolygonVertex':
                index = polygonVertexIndex;
                break;
            case 'ByPolygon':
                index = polygonIndex;
                break;
            case 'ByVertice':
                index = vertexIndex;
                break;
            case 'AllSame':
                index = infoObject.indices[0];
                break;
            default:
                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);
            }
            if (infoObject.referenceType === 'IndexToDirect')
                index = infoObject.indices[index];
            var from = index * infoObject.dataSize;
            var to = from + infoObject.dataSize;
            return slice(dataArray, infoObject.buffer, from, to);
        }
        var tempEuler = new THREE.Euler();
        var tempVec = new THREE.Vector3();
        function generateTransform(transformData) {
            var lTranslationM = new THREE.Matrix4();
            var lPreRotationM = new THREE.Matrix4();
            var lRotationM = new THREE.Matrix4();
            var lPostRotationM = new THREE.Matrix4();
            var lScalingM = new THREE.Matrix4();
            var lScalingPivotM = new THREE.Matrix4();
            var lScalingOffsetM = new THREE.Matrix4();
            var lRotationOffsetM = new THREE.Matrix4();
            var lRotationPivotM = new THREE.Matrix4();
            var lParentGX = new THREE.Matrix4();
            var lGlobalT = new THREE.Matrix4();
            var inheritType = transformData.inheritType ? transformData.inheritType : 0;
            if (transformData.translation)
                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));
            if (transformData.preRotation) {
                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);
                array.push(transformData.eulerOrder);
                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
            }
            if (transformData.rotation) {
                var array = transformData.rotation.map(THREE.MathUtils.degToRad);
                array.push(transformData.eulerOrder);
                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
            }
            if (transformData.postRotation) {
                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);
                array.push(transformData.eulerOrder);
                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
            }
            if (transformData.scale)
                lScalingM.scale(tempVec.fromArray(transformData.scale));
            if (transformData.scalingOffset)
                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));
            if (transformData.scalingPivot)
                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));
            if (transformData.rotationOffset)
                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));
            if (transformData.rotationPivot)
                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));
            if (transformData.parentMatrixWorld)
                lParentGX = transformData.parentMatrixWorld;
            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);
            var lParentGRM = new THREE.Matrix4();
            lParentGX.extractRotation(lParentGRM);
            var lParentTM = new THREE.Matrix4();
            var lLSM;
            var lParentGSM;
            var lParentGRSM;
            lParentTM.copyPosition(lParentGX);
            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);
            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);
            lLSM = lScalingM;
            var lGlobalRS;
            if (inheritType === 0) {
                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);
            } else if (inheritType === 1) {
                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);
            } else {
                var lParentLSM = new THREE.Matrix4().copy(lScalingM);
                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));
                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);
            }
            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));
            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);
            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);
            lGlobalT.copyPosition(lGlobalTranslation);
            lTransform = lGlobalT.multiply(lGlobalRS);
            return lTransform;
        }
        function getEulerOrder(order) {
            order = order || 0;
            var enums = [
                'ZYX',
                'YZX',
                'XZY',
                'ZXY',
                'YXZ',
                'XYZ'
            ];
            if (order === 6) {
                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');
                return enums[0];
            }
            return enums[order];
        }
        function parseNumberArray(value) {
            var array = value.split(',').map(function (val) {
                return parseFloat(val);
            });
            return array;
        }
        function convertArrayBufferToString(buffer, from, to) {
            if (from === undefined)
                from = 0;
            if (to === undefined)
                to = buffer.byteLength;
            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));
        }
        function append(a, b) {
            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {
                a[j] = b[i];
            }
        }
        function slice(a, b, from, to) {
            for (var i = from, j = 0; i < to; i++, j++) {
                a[j] = b[i];
            }
            return a;
        }
        function inject(a1, index, a2) {
            return a1.slice(0, index).concat(a2).concat(a1.slice(index));
        }
        return FBXLoader;
    }();
    return FBXLoader;
});
define('skylark-threejs-ex/loaders/GCodeLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var GCodeLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.splitLayer = false;
    };
    GCodeLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: GCodeLoader,
        load: function (url, onLoad, onProgress, onError) {
            var self = this;
            var loader = new THREE.FileLoader(self.manager);
            loader.setPath(self.path);
            loader.load(url, function (text) {
                onLoad(self.parse(text));
            }, onProgress, onError);
        },
        parse: function (data) {
            var state = {
                x: 0,
                y: 0,
                z: 0,
                e: 0,
                f: 0,
                extruding: false,
                relative: false
            };
            var layers = [];
            var currentLayer = undefined;
            var pathMaterial = new THREE.LineBasicMaterial({ color: 16711680 });
            pathMaterial.name = 'path';
            var extrudingMaterial = new THREE.LineBasicMaterial({ color: 65280 });
            extrudingMaterial.name = 'extruded';
            function newLayer(line) {
                currentLayer = {
                    vertex: [],
                    pathVertex: [],
                    z: line.z
                };
                layers.push(currentLayer);
            }
            function addSegment(p1, p2) {
                if (currentLayer === undefined) {
                    newLayer(p1);
                }
                if (line.extruding) {
                    currentLayer.vertex.push(p1.x, p1.y, p1.z);
                    currentLayer.vertex.push(p2.x, p2.y, p2.z);
                } else {
                    currentLayer.pathVertex.push(p1.x, p1.y, p1.z);
                    currentLayer.pathVertex.push(p2.x, p2.y, p2.z);
                }
            }
            function delta(v1, v2) {
                return state.relative ? v2 : v2 - v1;
            }
            function absolute(v1, v2) {
                return state.relative ? v1 + v2 : v2;
            }
            var lines = data.replace(/;.+/g, '').split('\n');
            for (var i = 0; i < lines.length; i++) {
                var tokens = lines[i].split(' ');
                var cmd = tokens[0].toUpperCase();
                var args = {};
                tokens.splice(1).forEach(function (token) {
                    if (token[0] !== undefined) {
                        var key = token[0].toLowerCase();
                        var value = parseFloat(token.substring(1));
                        args[key] = value;
                    }
                });
                if (cmd === 'G0' || cmd === 'G1') {
                    var line = {
                        x: args.x !== undefined ? absolute(state.x, args.x) : state.x,
                        y: args.y !== undefined ? absolute(state.y, args.y) : state.y,
                        z: args.z !== undefined ? absolute(state.z, args.z) : state.z,
                        e: args.e !== undefined ? absolute(state.e, args.e) : state.e,
                        f: args.f !== undefined ? absolute(state.f, args.f) : state.f
                    };
                    if (delta(state.e, line.e) > 0) {
                        line.extruding = delta(state.e, line.e) > 0;
                        if (currentLayer == undefined || line.z != currentLayer.z) {
                            newLayer(line);
                        }
                    }
                    addSegment(state, line);
                    state = line;
                } else if (cmd === 'G2' || cmd === 'G3') {
                } else if (cmd === 'G90') {
                    state.relative = false;
                } else if (cmd === 'G91') {
                    state.relative = true;
                } else if (cmd === 'G92') {
                    var line = state;
                    line.x = args.x !== undefined ? args.x : line.x;
                    line.y = args.y !== undefined ? args.y : line.y;
                    line.z = args.z !== undefined ? args.z : line.z;
                    line.e = args.e !== undefined ? args.e : line.e;
                    state = line;
                } else {
                }
            }
            function addObject(vertex, extruding) {
                var geometry = new THREE.BufferGeometry();
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertex, 3));
                var segments = new THREE.LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);
                segments.name = 'layer' + i;
                object.add(segments);
            }
            var object = new THREE.Group();
            object.name = 'gcode';
            if (this.splitLayer) {
                for (var i = 0; i < layers.length; i++) {
                    var layer = layers[i];
                    addObject(layer.vertex, true);
                    addObject(layer.pathVertex, false);
                }
            } else {
                var vertex = [], pathVertex = [];
                for (var i = 0; i < layers.length; i++) {
                    var layer = layers[i];
                    vertex = vertex.concat(layer.vertex);
                    pathVertex = pathVertex.concat(layer.pathVertex);
                }
                addObject(vertex, true);
                addObject(pathVertex, false);
            }
            object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));
            return object;
        }
    });
    return GCodeLoader;
});
define('skylark-threejs-ex/loaders/GLTFLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var GLTFLoader = function () {
        function GLTFLoader(manager) {
            THREE.Loader.call(this, manager);
            this.dracoLoader = null;
            this.ddsLoader = null;
        }
        GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: GLTFLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var resourcePath;
                if (this.resourcePath !== '') {
                    resourcePath = this.resourcePath;
                } else if (this.path !== '') {
                    resourcePath = this.path;
                } else {
                    resourcePath = THREE.LoaderUtils.extractUrlBase(url);
                }
                scope.manager.itemStart(url);
                var _onError = function (e) {
                    if (onError) {
                        onError(e);
                    } else {
                        console.error(e);
                    }
                    scope.manager.itemError(url);
                    scope.manager.itemEnd(url);
                };
                var loader = new THREE.FileLoader(scope.manager);
                loader.setPath(this.path);
                loader.setResponseType('arraybuffer');
                if (scope.crossOrigin === 'use-credentials') {
                    loader.setWithCredentials(true);
                }
                loader.load(url, function (data) {
                    try {
                        scope.parse(data, resourcePath, function (gltf) {
                            onLoad(gltf);
                            scope.manager.itemEnd(url);
                        }, _onError);
                    } catch (e) {
                        _onError(e);
                    }
                }, onProgress, _onError);
            },
            setDRACOLoader: function (dracoLoader) {
                this.dracoLoader = dracoLoader;
                return this;
            },
            setDDSLoader: function (ddsLoader) {
                this.ddsLoader = ddsLoader;
                return this;
            },
            parse: function (data, path, onLoad, onError) {
                var content;
                var extensions = {};
                if (typeof data === 'string') {
                    content = data;
                } else {
                    var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));
                    if (magic === BINARY_EXTENSION_HEADER_MAGIC) {
                        try {
                            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);
                        } catch (error) {
                            if (onError)
                                onError(error);
                            return;
                        }
                        content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;
                    } else {
                        content = THREE.LoaderUtils.decodeText(new Uint8Array(data));
                    }
                }
                var json = JSON.parse(content);
                if (json.asset === undefined || json.asset.version[0] < 2) {
                    if (onError)
                        onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));
                    return;
                }
                if (json.extensionsUsed) {
                    for (var i = 0; i < json.extensionsUsed.length; ++i) {
                        var extensionName = json.extensionsUsed[i];
                        var extensionsRequired = json.extensionsRequired || [];
                        switch (extensionName) {
                        case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:
                            extensions[extensionName] = new GLTFLightsExtension(json);
                            break;
                        case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:
                            extensions[extensionName] = new GLTFMaterialsClearcoatExtension();
                            break;
                        case EXTENSIONS.KHR_MATERIALS_UNLIT:
                            extensions[extensionName] = new GLTFMaterialsUnlitExtension();
                            break;
                        case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                            extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();
                            break;
                        case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
                            extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);
                            break;
                        case EXTENSIONS.MSFT_TEXTURE_DDS:
                            extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);
                            break;
                        case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
                            extensions[extensionName] = new GLTFTextureTransformExtension();
                            break;
                        case EXTENSIONS.KHR_MESH_QUANTIZATION:
                            extensions[extensionName] = new GLTFMeshQuantizationExtension();
                            break;
                        default:
                            if (extensionsRequired.indexOf(extensionName) >= 0) {
                                console.warn('THREE.GLTFLoader: Unknown extension "' + extensionName + '".');
                            }
                        }
                    }
                }
                var parser = new GLTFParser(json, extensions, {
                    path: path || this.resourcePath || '',
                    crossOrigin: this.crossOrigin,
                    manager: this.manager
                });
                parser.parse(onLoad, onError);
            }
        });
        function GLTFRegistry() {
            var objects = {};
            return {
                get: function (key) {
                    return objects[key];
                },
                add: function (key, object) {
                    objects[key] = object;
                },
                remove: function (key) {
                    delete objects[key];
                },
                removeAll: function () {
                    objects = {};
                }
            };
        }
        var EXTENSIONS = {
            KHR_BINARY_GLTF: 'KHR_binary_glTF',
            KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',
            KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',
            KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',
            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',
            KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',
            KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',
            KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',
            MSFT_TEXTURE_DDS: 'MSFT_texture_dds'
        };
        function GLTFTextureDDSExtension(ddsLoader) {
            if (!ddsLoader) {
                throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader');
            }
            this.name = EXTENSIONS.MSFT_TEXTURE_DDS;
            this.ddsLoader = ddsLoader;
        }
        function GLTFLightsExtension(json) {
            this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;
            var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};
            this.lightDefs = extension.lights || [];
        }
        GLTFLightsExtension.prototype.loadLight = function (lightIndex) {
            var lightDef = this.lightDefs[lightIndex];
            var lightNode;
            var color = new THREE.Color(16777215);
            if (lightDef.color !== undefined)
                color.fromArray(lightDef.color);
            var range = lightDef.range !== undefined ? lightDef.range : 0;
            switch (lightDef.type) {
            case 'directional':
                lightNode = new THREE.DirectionalLight(color);
                lightNode.target.position.set(0, 0, -1);
                lightNode.add(lightNode.target);
                break;
            case 'point':
                lightNode = new THREE.PointLight(color);
                lightNode.distance = range;
                break;
            case 'spot':
                lightNode = new THREE.SpotLight(color);
                lightNode.distance = range;
                lightDef.spot = lightDef.spot || {};
                lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;
                lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4;
                lightNode.angle = lightDef.spot.outerConeAngle;
                lightNode.penumbra = 1 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
                lightNode.target.position.set(0, 0, -1);
                lightNode.add(lightNode.target);
                break;
            default:
                throw new Error('THREE.GLTFLoader: Unexpected light type, "' + lightDef.type + '".');
            }
            lightNode.position.set(0, 0, 0);
            lightNode.decay = 2;
            if (lightDef.intensity !== undefined)
                lightNode.intensity = lightDef.intensity;
            lightNode.name = lightDef.name || 'light_' + lightIndex;
            return Promise.resolve(lightNode);
        };
        function GLTFMaterialsUnlitExtension() {
            this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;
        }
        GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {
            return THREE.MeshBasicMaterial;
        };
        GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {
            var pending = [];
            materialParams.color = new THREE.Color(1, 1, 1);
            materialParams.opacity = 1;
            var metallicRoughness = materialDef.pbrMetallicRoughness;
            if (metallicRoughness) {
                if (Array.isArray(metallicRoughness.baseColorFactor)) {
                    var array = metallicRoughness.baseColorFactor;
                    materialParams.color.fromArray(array);
                    materialParams.opacity = array[3];
                }
                if (metallicRoughness.baseColorTexture !== undefined) {
                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));
                }
            }
            return Promise.all(pending);
        };
        function GLTFMaterialsClearcoatExtension() {
            this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;
        }
        GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {
            return THREE.MeshPhysicalMaterial;
        };
        GLTFMaterialsClearcoatExtension.prototype.extendParams = function (materialParams, materialDef, parser) {
            var pending = [];
            var extension = materialDef.extensions[this.name];
            if (extension.clearcoatFactor !== undefined) {
                materialParams.clearcoat = extension.clearcoatFactor;
            }
            if (extension.clearcoatTexture !== undefined) {
                pending.push(parser.assignTexture(materialParams, 'clearcoatMap', extension.clearcoatTexture));
            }
            if (extension.clearcoatRoughnessFactor !== undefined) {
                materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;
            }
            if (extension.clearcoatRoughnessTexture !== undefined) {
                pending.push(parser.assignTexture(materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture));
            }
            if (extension.clearcoatNormalTexture !== undefined) {
                pending.push(parser.assignTexture(materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture));
                if (extension.clearcoatNormalTexture.scale !== undefined) {
                    var scale = extension.clearcoatNormalTexture.scale;
                    materialParams.clearcoatNormalScale = new THREE.Vector2(scale, scale);
                }
            }
            return Promise.all(pending);
        };
        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
        var BINARY_EXTENSION_HEADER_LENGTH = 12;
        var BINARY_EXTENSION_CHUNK_TYPES = {
            JSON: 1313821514,
            BIN: 5130562
        };
        function GLTFBinaryExtension(data) {
            this.name = EXTENSIONS.KHR_BINARY_GLTF;
            this.content = null;
            this.body = null;
            var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);
            this.header = {
                magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),
                version: headerView.getUint32(4, true),
                length: headerView.getUint32(8, true)
            };
            if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {
                throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');
            } else if (this.header.version < 2) {
                throw new Error('THREE.GLTFLoader: Legacy binary file detected.');
            }
            var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);
            var chunkIndex = 0;
            while (chunkIndex < chunkView.byteLength) {
                var chunkLength = chunkView.getUint32(chunkIndex, true);
                chunkIndex += 4;
                var chunkType = chunkView.getUint32(chunkIndex, true);
                chunkIndex += 4;
                if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {
                    var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);
                    this.content = THREE.LoaderUtils.decodeText(contentArray);
                } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {
                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
                    this.body = data.slice(byteOffset, byteOffset + chunkLength);
                }
                chunkIndex += chunkLength;
            }
            if (this.content === null) {
                throw new Error('THREE.GLTFLoader: JSON content not found.');
            }
        }
        function GLTFDracoMeshCompressionExtension(json, dracoLoader) {
            if (!dracoLoader) {
                throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');
            }
            this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
            this.json = json;
            this.dracoLoader = dracoLoader;
            this.dracoLoader.preload();
        }
        GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {
            var json = this.json;
            var dracoLoader = this.dracoLoader;
            var bufferViewIndex = primitive.extensions[this.name].bufferView;
            var gltfAttributeMap = primitive.extensions[this.name].attributes;
            var threeAttributeMap = {};
            var attributeNormalizedMap = {};
            var attributeTypeMap = {};
            for (var attributeName in gltfAttributeMap) {
                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();
                threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];
            }
            for (attributeName in primitive.attributes) {
                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();
                if (gltfAttributeMap[attributeName] !== undefined) {
                    var accessorDef = json.accessors[primitive.attributes[attributeName]];
                    var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
                    attributeTypeMap[threeAttributeName] = componentType;
                    attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;
                }
            }
            return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {
                return new Promise(function (resolve) {
                    dracoLoader.decodeDracoFile(bufferView, function (geometry) {
                        for (var attributeName in geometry.attributes) {
                            var attribute = geometry.attributes[attributeName];
                            var normalized = attributeNormalizedMap[attributeName];
                            if (normalized !== undefined)
                                attribute.normalized = normalized;
                        }
                        resolve(geometry);
                    }, threeAttributeMap, attributeTypeMap);
                });
            });
        };
        function GLTFTextureTransformExtension() {
            this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;
        }
        GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {
            texture = texture.clone();
            if (transform.offset !== undefined) {
                texture.offset.fromArray(transform.offset);
            }
            if (transform.rotation !== undefined) {
                texture.rotation = transform.rotation;
            }
            if (transform.scale !== undefined) {
                texture.repeat.fromArray(transform.scale);
            }
            if (transform.texCoord !== undefined) {
                console.warn('THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.');
            }
            texture.needsUpdate = true;
            return texture;
        };
        function GLTFMeshStandardSGMaterial(params) {
            THREE.MeshStandardMaterial.call(this);
            this.isGLTFSpecularGlossinessMaterial = true;
            var specularMapParsFragmentChunk = [
                '#ifdef USE_SPECULARMAP',
                '\tuniform sampler2D specularMap;',
                '#endif'
            ].join('\n');
            var glossinessMapParsFragmentChunk = [
                '#ifdef USE_GLOSSINESSMAP',
                '\tuniform sampler2D glossinessMap;',
                '#endif'
            ].join('\n');
            var specularMapFragmentChunk = [
                'vec3 specularFactor = specular;',
                '#ifdef USE_SPECULARMAP',
                '\tvec4 texelSpecular = texture2D( specularMap, vUv );',
                '\ttexelSpecular = sRGBToLinear( texelSpecular );',
                '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                '\tspecularFactor *= texelSpecular.rgb;',
                '#endif'
            ].join('\n');
            var glossinessMapFragmentChunk = [
                'float glossinessFactor = glossiness;',
                '#ifdef USE_GLOSSINESSMAP',
                '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                '\tglossinessFactor *= texelGlossiness.a;',
                '#endif'
            ].join('\n');
            var lightPhysicalFragmentChunk = [
                'PhysicalMaterial material;',
                'material.diffuseColor = diffuseColor.rgb;',
                'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',
                'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',
                'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',
                'material.specularRoughness += geometryRoughness;',
                'material.specularRoughness = min( material.specularRoughness, 1.0 );',
                'material.specularColor = specularFactor.rgb;'
            ].join('\n');
            var uniforms = {
                specular: { value: new THREE.Color().setHex(16777215) },
                glossiness: { value: 1 },
                specularMap: { value: null },
                glossinessMap: { value: null }
            };
            this._extraUniforms = uniforms;
            this.onBeforeCompile = function (shader) {
                for (var uniformName in uniforms) {
                    shader.uniforms[uniformName] = uniforms[uniformName];
                }
                shader.fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;');
                shader.fragmentShader = shader.fragmentShader.replace('uniform float metalness;', 'uniform float glossiness;');
                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_fragment>', specularMapFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk);
                shader.fragmentShader = shader.fragmentShader.replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);
            };
            Object.defineProperties(this, {
                specular: {
                    get: function () {
                        return uniforms.specular.value;
                    },
                    set: function (v) {
                        uniforms.specular.value = v;
                    }
                },
                specularMap: {
                    get: function () {
                        return uniforms.specularMap.value;
                    },
                    set: function (v) {
                        uniforms.specularMap.value = v;
                    }
                },
                glossiness: {
                    get: function () {
                        return uniforms.glossiness.value;
                    },
                    set: function (v) {
                        uniforms.glossiness.value = v;
                    }
                },
                glossinessMap: {
                    get: function () {
                        return uniforms.glossinessMap.value;
                    },
                    set: function (v) {
                        uniforms.glossinessMap.value = v;
                        if (v) {
                            this.defines.USE_GLOSSINESSMAP = '';
                            this.defines.USE_ROUGHNESSMAP = '';
                        } else {
                            delete this.defines.USE_ROUGHNESSMAP;
                            delete this.defines.USE_GLOSSINESSMAP;
                        }
                    }
                }
            });
            delete this.metalness;
            delete this.roughness;
            delete this.metalnessMap;
            delete this.roughnessMap;
            this.setValues(params);
        }
        GLTFMeshStandardSGMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);
        GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;
        GLTFMeshStandardSGMaterial.prototype.copy = function (source) {
            THREE.MeshStandardMaterial.prototype.copy.call(this, source);
            this.specularMap = source.specularMap;
            this.specular.copy(source.specular);
            this.glossinessMap = source.glossinessMap;
            this.glossiness = source.glossiness;
            delete this.metalness;
            delete this.roughness;
            delete this.metalnessMap;
            delete this.roughnessMap;
            return this;
        };
        function GLTFMaterialsPbrSpecularGlossinessExtension() {
            return {
                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
                specularGlossinessParams: [
                    'color',
                    'map',
                    'lightMap',
                    'lightMapIntensity',
                    'aoMap',
                    'aoMapIntensity',
                    'emissive',
                    'emissiveIntensity',
                    'emissiveMap',
                    'bumpMap',
                    'bumpScale',
                    'normalMap',
                    'normalMapType',
                    'displacementMap',
                    'displacementScale',
                    'displacementBias',
                    'specularMap',
                    'specular',
                    'glossinessMap',
                    'glossiness',
                    'alphaMap',
                    'envMap',
                    'envMapIntensity',
                    'refractionRatio'
                ],
                getMaterialType: function () {
                    return GLTFMeshStandardSGMaterial;
                },
                extendParams: function (materialParams, materialDef, parser) {
                    var pbrSpecularGlossiness = materialDef.extensions[this.name];
                    materialParams.color = new THREE.Color(1, 1, 1);
                    materialParams.opacity = 1;
                    var pending = [];
                    if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {
                        var array = pbrSpecularGlossiness.diffuseFactor;
                        materialParams.color.fromArray(array);
                        materialParams.opacity = array[3];
                    }
                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {
                        pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));
                    }
                    materialParams.emissive = new THREE.Color(0, 0, 0);
                    materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1;
                    materialParams.specular = new THREE.Color(1, 1, 1);
                    if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {
                        materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);
                    }
                    if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {
                        var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;
                        pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));
                        pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));
                    }
                    return Promise.all(pending);
                },
                createMaterial: function (materialParams) {
                    var material = new GLTFMeshStandardSGMaterial(materialParams);
                    material.fog = true;
                    material.color = materialParams.color;
                    material.map = materialParams.map === undefined ? null : materialParams.map;
                    material.lightMap = null;
                    material.lightMapIntensity = 1;
                    material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;
                    material.aoMapIntensity = 1;
                    material.emissive = materialParams.emissive;
                    material.emissiveIntensity = 1;
                    material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;
                    material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;
                    material.bumpScale = 1;
                    material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;
                    material.normalMapType = THREE.TangentSpaceNormalMap;
                    if (materialParams.normalScale)
                        material.normalScale = materialParams.normalScale;
                    material.displacementMap = null;
                    material.displacementScale = 1;
                    material.displacementBias = 0;
                    material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;
                    material.specular = materialParams.specular;
                    material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;
                    material.glossiness = materialParams.glossiness;
                    material.alphaMap = null;
                    material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;
                    material.envMapIntensity = 1;
                    material.refractionRatio = 0.98;
                    return material;
                }
            };
        }
        function GLTFMeshQuantizationExtension() {
            this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;
        }
        function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
            THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
        }
        GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);
        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;
        GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {
            var result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;
            for (var i = 0; i !== valueSize; i++) {
                result[i] = values[offset + i];
            }
            return result;
        };
        GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;
        GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;
        GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {
            var result = this.resultBuffer;
            var values = this.sampleValues;
            var stride = this.valueSize;
            var stride2 = stride * 2;
            var stride3 = stride * 3;
            var td = t1 - t0;
            var p = (t - t0) / td;
            var pp = p * p;
            var ppp = pp * p;
            var offset1 = i1 * stride3;
            var offset0 = offset1 - stride3;
            var s2 = -2 * ppp + 3 * pp;
            var s3 = ppp - pp;
            var s0 = 1 - s2;
            var s1 = s3 - pp + p;
            for (var i = 0; i !== stride; i++) {
                var p0 = values[offset0 + i + stride];
                var m0 = values[offset0 + i + stride2] * td;
                var p1 = values[offset1 + i + stride];
                var m1 = values[offset1 + i] * td;
                result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;
            }
            return result;
        };
        var WEBGL_CONSTANTS = {
            FLOAT: 5126,
            FLOAT_MAT3: 35675,
            FLOAT_MAT4: 35676,
            FLOAT_VEC2: 35664,
            FLOAT_VEC3: 35665,
            FLOAT_VEC4: 35666,
            LINEAR: 9729,
            REPEAT: 10497,
            SAMPLER_2D: 35678,
            POINTS: 0,
            LINES: 1,
            LINE_LOOP: 2,
            LINE_STRIP: 3,
            TRIANGLES: 4,
            TRIANGLE_STRIP: 5,
            TRIANGLE_FAN: 6,
            UNSIGNED_BYTE: 5121,
            UNSIGNED_SHORT: 5123
        };
        var WEBGL_COMPONENT_TYPES = {
            5120: Int8Array,
            5121: Uint8Array,
            5122: Int16Array,
            5123: Uint16Array,
            5125: Uint32Array,
            5126: Float32Array
        };
        var WEBGL_FILTERS = {
            9728: THREE.NearestFilter,
            9729: THREE.LinearFilter,
            9984: THREE.NearestMipmapNearestFilter,
            9985: THREE.LinearMipmapNearestFilter,
            9986: THREE.NearestMipmapLinearFilter,
            9987: THREE.LinearMipmapLinearFilter
        };
        var WEBGL_WRAPPINGS = {
            33071: THREE.ClampToEdgeWrapping,
            33648: THREE.MirroredRepeatWrapping,
            10497: THREE.RepeatWrapping
        };
        var WEBGL_TYPE_SIZES = {
            'SCALAR': 1,
            'VEC2': 2,
            'VEC3': 3,
            'VEC4': 4,
            'MAT2': 4,
            'MAT3': 9,
            'MAT4': 16
        };
        var ATTRIBUTES = {
            POSITION: 'position',
            NORMAL: 'normal',
            TANGENT: 'tangent',
            TEXCOORD_0: 'uv',
            TEXCOORD_1: 'uv2',
            COLOR_0: 'color',
            WEIGHTS_0: 'skinWeight',
            JOINTS_0: 'skinIndex'
        };
        var PATH_PROPERTIES = {
            scale: 'scale',
            translation: 'position',
            rotation: 'quaternion',
            weights: 'morphTargetInfluences'
        };
        var INTERPOLATION = {
            CUBICSPLINE: undefined,
            LINEAR: THREE.InterpolateLinear,
            STEP: THREE.InterpolateDiscrete
        };
        var ALPHA_MODES = {
            OPAQUE: 'OPAQUE',
            MASK: 'MASK',
            BLEND: 'BLEND'
        };
        var MIME_TYPE_FORMATS = {
            'image/png': THREE.RGBAFormat,
            'image/jpeg': THREE.RGBFormat
        };
        function resolveURL(url, path) {
            if (typeof url !== 'string' || url === '')
                return '';
            if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
                path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
            }
            if (/^(https?:)?\/\//i.test(url))
                return url;
            if (/^data:.*,.*$/i.test(url))
                return url;
            if (/^blob:.*$/i.test(url))
                return url;
            return path + url;
        }
        function createDefaultMaterial(cache) {
            if (cache['DefaultMaterial'] === undefined) {
                cache['DefaultMaterial'] = new THREE.MeshStandardMaterial({
                    color: 16777215,
                    emissive: 0,
                    metalness: 1,
                    roughness: 1,
                    transparent: false,
                    depthTest: true,
                    side: THREE.FrontSide
                });
            }
            return cache['DefaultMaterial'];
        }
        function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {
            for (var name in objectDef.extensions) {
                if (knownExtensions[name] === undefined) {
                    object.userData.gltfExtensions = object.userData.gltfExtensions || {};
                    object.userData.gltfExtensions[name] = objectDef.extensions[name];
                }
            }
        }
        function assignExtrasToUserData(object, gltfDef) {
            if (gltfDef.extras !== undefined) {
                if (typeof gltfDef.extras === 'object') {
                    Object.assign(object.userData, gltfDef.extras);
                } else {
                    console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);
                }
            }
        }
        function addMorphTargets(geometry, targets, parser) {
            var hasMorphPosition = false;
            var hasMorphNormal = false;
            for (var i = 0, il = targets.length; i < il; i++) {
                var target = targets[i];
                if (target.POSITION !== undefined)
                    hasMorphPosition = true;
                if (target.NORMAL !== undefined)
                    hasMorphNormal = true;
                if (hasMorphPosition && hasMorphNormal)
                    break;
            }
            if (!hasMorphPosition && !hasMorphNormal)
                return Promise.resolve(geometry);
            var pendingPositionAccessors = [];
            var pendingNormalAccessors = [];
            for (var i = 0, il = targets.length; i < il; i++) {
                var target = targets[i];
                if (hasMorphPosition) {
                    var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;
                    pendingPositionAccessors.push(pendingAccessor);
                }
                if (hasMorphNormal) {
                    var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;
                    pendingNormalAccessors.push(pendingAccessor);
                }
            }
            return Promise.all([
                Promise.all(pendingPositionAccessors),
                Promise.all(pendingNormalAccessors)
            ]).then(function (accessors) {
                var morphPositions = accessors[0];
                var morphNormals = accessors[1];
                if (hasMorphPosition)
                    geometry.morphAttributes.position = morphPositions;
                if (hasMorphNormal)
                    geometry.morphAttributes.normal = morphNormals;
                geometry.morphTargetsRelative = true;
                return geometry;
            });
        }
        function updateMorphTargets(mesh, meshDef) {
            mesh.updateMorphTargets();
            if (meshDef.weights !== undefined) {
                for (var i = 0, il = meshDef.weights.length; i < il; i++) {
                    mesh.morphTargetInfluences[i] = meshDef.weights[i];
                }
            }
            if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {
                var targetNames = meshDef.extras.targetNames;
                if (mesh.morphTargetInfluences.length === targetNames.length) {
                    mesh.morphTargetDictionary = {};
                    for (var i = 0, il = targetNames.length; i < il; i++) {
                        mesh.morphTargetDictionary[targetNames[i]] = i;
                    }
                } else {
                    console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');
                }
            }
        }
        function createPrimitiveKey(primitiveDef) {
            var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];
            var geometryKey;
            if (dracoExtension) {
                geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);
            } else {
                geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;
            }
            return geometryKey;
        }
        function createAttributesKey(attributes) {
            var attributesKey = '';
            var keys = Object.keys(attributes).sort();
            for (var i = 0, il = keys.length; i < il; i++) {
                attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';
            }
            return attributesKey;
        }
        function GLTFParser(json, extensions, options) {
            this.json = json || {};
            this.extensions = extensions || {};
            this.options = options || {};
            this.cache = new GLTFRegistry();
            this.primitiveCache = {};
            this.textureLoader = new THREE.TextureLoader(this.options.manager);
            this.textureLoader.setCrossOrigin(this.options.crossOrigin);
            this.fileLoader = new THREE.FileLoader(this.options.manager);
            this.fileLoader.setResponseType('arraybuffer');
            if (this.options.crossOrigin === 'use-credentials') {
                this.fileLoader.setWithCredentials(true);
            }
        }
        GLTFParser.prototype.parse = function (onLoad, onError) {
            var parser = this;
            var json = this.json;
            var extensions = this.extensions;
            this.cache.removeAll();
            this.markDefs();
            Promise.all([
                this.getDependencies('scene'),
                this.getDependencies('animation'),
                this.getDependencies('camera')
            ]).then(function (dependencies) {
                var result = {
                    scene: dependencies[0][json.scene || 0],
                    scenes: dependencies[0],
                    animations: dependencies[1],
                    cameras: dependencies[2],
                    asset: json.asset,
                    parser: parser,
                    userData: {}
                };
                addUnknownExtensionsToUserData(extensions, result, json);
                assignExtrasToUserData(result, json);
                onLoad(result);
            }).catch(onError);
        };
        GLTFParser.prototype.markDefs = function () {
            var nodeDefs = this.json.nodes || [];
            var skinDefs = this.json.skins || [];
            var meshDefs = this.json.meshes || [];
            var meshReferences = {};
            var meshUses = {};
            for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {
                var joints = skinDefs[skinIndex].joints;
                for (var i = 0, il = joints.length; i < il; i++) {
                    nodeDefs[joints[i]].isBone = true;
                }
            }
            for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {
                var nodeDef = nodeDefs[nodeIndex];
                if (nodeDef.mesh !== undefined) {
                    if (meshReferences[nodeDef.mesh] === undefined) {
                        meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;
                    }
                    meshReferences[nodeDef.mesh]++;
                    if (nodeDef.skin !== undefined) {
                        meshDefs[nodeDef.mesh].isSkinnedMesh = true;
                    }
                }
            }
            this.json.meshReferences = meshReferences;
            this.json.meshUses = meshUses;
        };
        GLTFParser.prototype.getDependency = function (type, index) {
            var cacheKey = type + ':' + index;
            var dependency = this.cache.get(cacheKey);
            if (!dependency) {
                switch (type) {
                case 'scene':
                    dependency = this.loadScene(index);
                    break;
                case 'node':
                    dependency = this.loadNode(index);
                    break;
                case 'mesh':
                    dependency = this.loadMesh(index);
                    break;
                case 'accessor':
                    dependency = this.loadAccessor(index);
                    break;
                case 'bufferView':
                    dependency = this.loadBufferView(index);
                    break;
                case 'buffer':
                    dependency = this.loadBuffer(index);
                    break;
                case 'material':
                    dependency = this.loadMaterial(index);
                    break;
                case 'texture':
                    dependency = this.loadTexture(index);
                    break;
                case 'skin':
                    dependency = this.loadSkin(index);
                    break;
                case 'animation':
                    dependency = this.loadAnimation(index);
                    break;
                case 'camera':
                    dependency = this.loadCamera(index);
                    break;
                case 'light':
                    dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);
                    break;
                default:
                    throw new Error('Unknown type: ' + type);
                }
                this.cache.add(cacheKey, dependency);
            }
            return dependency;
        };
        GLTFParser.prototype.getDependencies = function (type) {
            var dependencies = this.cache.get(type);
            if (!dependencies) {
                var parser = this;
                var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];
                dependencies = Promise.all(defs.map(function (def, index) {
                    return parser.getDependency(type, index);
                }));
                this.cache.add(type, dependencies);
            }
            return dependencies;
        };
        GLTFParser.prototype.loadBuffer = function (bufferIndex) {
            var bufferDef = this.json.buffers[bufferIndex];
            var loader = this.fileLoader;
            if (bufferDef.type && bufferDef.type !== 'arraybuffer') {
                throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');
            }
            if (bufferDef.uri === undefined && bufferIndex === 0) {
                return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);
            }
            var options = this.options;
            return new Promise(function (resolve, reject) {
                loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {
                    reject(new Error('THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".'));
                });
            });
        };
        GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {
            var bufferViewDef = this.json.bufferViews[bufferViewIndex];
            return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {
                var byteLength = bufferViewDef.byteLength || 0;
                var byteOffset = bufferViewDef.byteOffset || 0;
                return buffer.slice(byteOffset, byteOffset + byteLength);
            });
        };
        GLTFParser.prototype.loadAccessor = function (accessorIndex) {
            var parser = this;
            var json = this.json;
            var accessorDef = this.json.accessors[accessorIndex];
            if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {
                return Promise.resolve(null);
            }
            var pendingBufferViews = [];
            if (accessorDef.bufferView !== undefined) {
                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));
            } else {
                pendingBufferViews.push(null);
            }
            if (accessorDef.sparse !== undefined) {
                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));
                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));
            }
            return Promise.all(pendingBufferViews).then(function (bufferViews) {
                var bufferView = bufferViews[0];
                var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];
                var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];
                var elementBytes = TypedArray.BYTES_PER_ELEMENT;
                var itemBytes = elementBytes * itemSize;
                var byteOffset = accessorDef.byteOffset || 0;
                var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;
                var normalized = accessorDef.normalized === true;
                var array, bufferAttribute;
                if (byteStride && byteStride !== itemBytes) {
                    var ibSlice = Math.floor(byteOffset / byteStride);
                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;
                    var ib = parser.cache.get(ibCacheKey);
                    if (!ib) {
                        array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);
                        ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);
                        parser.cache.add(ibCacheKey, ib);
                    }
                    bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);
                } else {
                    if (bufferView === null) {
                        array = new TypedArray(accessorDef.count * itemSize);
                    } else {
                        array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);
                    }
                    bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);
                }
                if (accessorDef.sparse !== undefined) {
                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];
                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;
                    var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);
                    var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);
                    if (bufferView !== null) {
                        bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);
                    }
                    for (var i = 0, il = sparseIndices.length; i < il; i++) {
                        var index = sparseIndices[i];
                        bufferAttribute.setX(index, sparseValues[i * itemSize]);
                        if (itemSize >= 2)
                            bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);
                        if (itemSize >= 3)
                            bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);
                        if (itemSize >= 4)
                            bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);
                        if (itemSize >= 5)
                            throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');
                    }
                }
                return bufferAttribute;
            });
        };
        GLTFParser.prototype.loadTexture = function (textureIndex) {
            var parser = this;
            var json = this.json;
            var options = this.options;
            var textureLoader = this.textureLoader;
            var URL = self.URL || self.webkitURL;
            var textureDef = json.textures[textureIndex];
            var textureExtensions = textureDef.extensions || {};
            var source;
            if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {
                source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];
            } else {
                source = json.images[textureDef.source];
            }
            var sourceURI = source.uri;
            var isObjectURL = false;
            if (source.bufferView !== undefined) {
                sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {
                    isObjectURL = true;
                    var blob = new Blob([bufferView], { type: source.mimeType });
                    sourceURI = URL.createObjectURL(blob);
                    return sourceURI;
                });
            }
            return Promise.resolve(sourceURI).then(function (sourceURI) {
                var loader = options.manager.getHandler(sourceURI);
                if (!loader) {
                    loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;
                }
                return new Promise(function (resolve, reject) {
                    loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);
                });
            }).then(function (texture) {
                if (isObjectURL === true) {
                    URL.revokeObjectURL(sourceURI);
                }
                texture.flipY = false;
                if (textureDef.name)
                    texture.name = textureDef.name;
                if (source.mimeType in MIME_TYPE_FORMATS) {
                    texture.format = MIME_TYPE_FORMATS[source.mimeType];
                }
                var samplers = json.samplers || {};
                var sampler = samplers[textureDef.sampler] || {};
                texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;
                texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;
                texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;
                texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;
                return texture;
            });
        };
        GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {
            var parser = this;
            return this.getDependency('texture', mapDef.index).then(function (texture) {
                if (!texture.isCompressedTexture) {
                    switch (mapName) {
                    case 'aoMap':
                    case 'emissiveMap':
                    case 'metalnessMap':
                    case 'normalMap':
                    case 'roughnessMap':
                        texture.format = THREE.RGBFormat;
                        break;
                    }
                }
                if (mapDef.texCoord !== undefined && mapDef.texCoord != 0 && !(mapName === 'aoMap' && mapDef.texCoord == 1)) {
                    console.warn('THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.');
                }
                if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {
                    var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;
                    if (transform) {
                        texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);
                    }
                }
                materialParams[mapName] = texture;
            });
        };
        GLTFParser.prototype.assignFinalMaterial = function (mesh) {
            var geometry = mesh.geometry;
            var material = mesh.material;
            var useVertexTangents = geometry.attributes.tangent !== undefined;
            var useVertexColors = geometry.attributes.color !== undefined;
            var useFlatShading = geometry.attributes.normal === undefined;
            var useSkinning = mesh.isSkinnedMesh === true;
            var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;
            var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;
            if (mesh.isPoints) {
                var cacheKey = 'PointsMaterial:' + material.uuid;
                var pointsMaterial = this.cache.get(cacheKey);
                if (!pointsMaterial) {
                    pointsMaterial = new THREE.PointsMaterial();
                    THREE.Material.prototype.copy.call(pointsMaterial, material);
                    pointsMaterial.color.copy(material.color);
                    pointsMaterial.map = material.map;
                    pointsMaterial.sizeAttenuation = false;
                    this.cache.add(cacheKey, pointsMaterial);
                }
                material = pointsMaterial;
            } else if (mesh.isLine) {
                var cacheKey = 'LineBasicMaterial:' + material.uuid;
                var lineMaterial = this.cache.get(cacheKey);
                if (!lineMaterial) {
                    lineMaterial = new THREE.LineBasicMaterial();
                    THREE.Material.prototype.copy.call(lineMaterial, material);
                    lineMaterial.color.copy(material.color);
                    this.cache.add(cacheKey, lineMaterial);
                }
                material = lineMaterial;
            }
            if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {
                var cacheKey = 'ClonedMaterial:' + material.uuid + ':';
                if (material.isGLTFSpecularGlossinessMaterial)
                    cacheKey += 'specular-glossiness:';
                if (useSkinning)
                    cacheKey += 'skinning:';
                if (useVertexTangents)
                    cacheKey += 'vertex-tangents:';
                if (useVertexColors)
                    cacheKey += 'vertex-colors:';
                if (useFlatShading)
                    cacheKey += 'flat-shading:';
                if (useMorphTargets)
                    cacheKey += 'morph-targets:';
                if (useMorphNormals)
                    cacheKey += 'morph-normals:';
                var cachedMaterial = this.cache.get(cacheKey);
                if (!cachedMaterial) {
                    cachedMaterial = material.clone();
                    if (useSkinning)
                        cachedMaterial.skinning = true;
                    if (useVertexTangents)
                        cachedMaterial.vertexTangents = true;
                    if (useVertexColors)
                        cachedMaterial.vertexColors = true;
                    if (useFlatShading)
                        cachedMaterial.flatShading = true;
                    if (useMorphTargets)
                        cachedMaterial.morphTargets = true;
                    if (useMorphNormals)
                        cachedMaterial.morphNormals = true;
                    this.cache.add(cacheKey, cachedMaterial);
                }
                material = cachedMaterial;
            }
            if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {
                geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));
            }
            if (material.normalScale && !useVertexTangents) {
                material.normalScale.y = -material.normalScale.y;
            }
            if (material.clearcoatNormalScale && !useVertexTangents) {
                material.clearcoatNormalScale.y = -material.clearcoatNormalScale.y;
            }
            mesh.material = material;
        };
        GLTFParser.prototype.loadMaterial = function (materialIndex) {
            var parser = this;
            var json = this.json;
            var extensions = this.extensions;
            var materialDef = json.materials[materialIndex];
            var materialType;
            var materialParams = {};
            var materialExtensions = materialDef.extensions || {};
            var pending = [];
            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {
                var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];
                materialType = sgExtension.getMaterialType();
                pending.push(sgExtension.extendParams(materialParams, materialDef, parser));
            } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {
                var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];
                materialType = kmuExtension.getMaterialType();
                pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));
            } else {
                materialType = THREE.MeshStandardMaterial;
                var metallicRoughness = materialDef.pbrMetallicRoughness || {};
                materialParams.color = new THREE.Color(1, 1, 1);
                materialParams.opacity = 1;
                if (Array.isArray(metallicRoughness.baseColorFactor)) {
                    var array = metallicRoughness.baseColorFactor;
                    materialParams.color.fromArray(array);
                    materialParams.opacity = array[3];
                }
                if (metallicRoughness.baseColorTexture !== undefined) {
                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));
                }
                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1;
                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1;
                if (metallicRoughness.metallicRoughnessTexture !== undefined) {
                    pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));
                    pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));
                }
            }
            if (materialDef.doubleSided === true) {
                materialParams.side = THREE.DoubleSide;
            }
            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;
            if (alphaMode === ALPHA_MODES.BLEND) {
                materialParams.transparent = true;
                materialParams.depthWrite = false;
            } else {
                materialParams.transparent = false;
                if (alphaMode === ALPHA_MODES.MASK) {
                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;
                }
            }
            if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {
                pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));
                materialParams.normalScale = new THREE.Vector2(1, 1);
                if (materialDef.normalTexture.scale !== undefined) {
                    materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);
                }
            }
            if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {
                pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));
                if (materialDef.occlusionTexture.strength !== undefined) {
                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;
                }
            }
            if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {
                materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);
            }
            if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {
                pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));
            }
            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {
                var clearcoatExtension = extensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT];
                materialType = clearcoatExtension.getMaterialType();
                pending.push(clearcoatExtension.extendParams(materialParams, { extensions: materialExtensions }, parser));
            }
            return Promise.all(pending).then(function () {
                var material;
                if (materialType === GLTFMeshStandardSGMaterial) {
                    material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);
                } else {
                    material = new materialType(materialParams);
                }
                if (materialDef.name)
                    material.name = materialDef.name;
                if (material.map)
                    material.map.encoding = THREE.sRGBEncoding;
                if (material.emissiveMap)
                    material.emissiveMap.encoding = THREE.sRGBEncoding;
                assignExtrasToUserData(material, materialDef);
                if (materialDef.extensions)
                    addUnknownExtensionsToUserData(extensions, material, materialDef);
                return material;
            });
        };
        function computeBounds(geometry, primitiveDef, parser) {
            var attributes = primitiveDef.attributes;
            var box = new THREE.Box3();
            if (attributes.POSITION !== undefined) {
                var accessor = parser.json.accessors[attributes.POSITION];
                var min = accessor.min;
                var max = accessor.max;
                if (min !== undefined && max !== undefined) {
                    box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));
                } else {
                    console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');
                    return;
                }
            } else {
                return;
            }
            var targets = primitiveDef.targets;
            if (targets !== undefined) {
                var maxDisplacement = new THREE.Vector3();
                var vector = new THREE.Vector3();
                for (var i = 0, il = targets.length; i < il; i++) {
                    var target = targets[i];
                    if (target.POSITION !== undefined) {
                        var accessor = parser.json.accessors[target.POSITION];
                        var min = accessor.min;
                        var max = accessor.max;
                        if (min !== undefined && max !== undefined) {
                            vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));
                            vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));
                            vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));
                            maxDisplacement.max(vector);
                        } else {
                            console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');
                        }
                    }
                }
                box.expandByVector(maxDisplacement);
            }
            geometry.boundingBox = box;
            var sphere = new THREE.Sphere();
            box.getCenter(sphere.center);
            sphere.radius = box.min.distanceTo(box.max) / 2;
            geometry.boundingSphere = sphere;
        }
        function addPrimitiveAttributes(geometry, primitiveDef, parser) {
            var attributes = primitiveDef.attributes;
            var pending = [];
            function assignAttributeAccessor(accessorIndex, attributeName) {
                return parser.getDependency('accessor', accessorIndex).then(function (accessor) {
                    geometry.setAttribute(attributeName, accessor);
                });
            }
            for (var gltfAttributeName in attributes) {
                var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();
                if (threeAttributeName in geometry.attributes)
                    continue;
                pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));
            }
            if (primitiveDef.indices !== undefined && !geometry.index) {
                var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {
                    geometry.setIndex(accessor);
                });
                pending.push(accessor);
            }
            assignExtrasToUserData(geometry, primitiveDef);
            computeBounds(geometry, primitiveDef, parser);
            return Promise.all(pending).then(function () {
                return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;
            });
        }
        function toTrianglesDrawMode(geometry, drawMode) {
            var index = geometry.getIndex();
            if (index === null) {
                var indices = [];
                var position = geometry.getAttribute('position');
                if (position !== undefined) {
                    for (var i = 0; i < position.count; i++) {
                        indices.push(i);
                    }
                    geometry.setIndex(indices);
                    index = geometry.getIndex();
                } else {
                    console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');
                    return geometry;
                }
            }
            var numberOfTriangles = index.count - 2;
            var newIndices = [];
            if (drawMode === THREE.TriangleFanDrawMode) {
                for (var i = 1; i <= numberOfTriangles; i++) {
                    newIndices.push(index.getX(0));
                    newIndices.push(index.getX(i));
                    newIndices.push(index.getX(i + 1));
                }
            } else {
                for (var i = 0; i < numberOfTriangles; i++) {
                    if (i % 2 === 0) {
                        newIndices.push(index.getX(i));
                        newIndices.push(index.getX(i + 1));
                        newIndices.push(index.getX(i + 2));
                    } else {
                        newIndices.push(index.getX(i + 2));
                        newIndices.push(index.getX(i + 1));
                        newIndices.push(index.getX(i));
                    }
                }
            }
            if (newIndices.length / 3 !== numberOfTriangles) {
                console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');
            }
            var newGeometry = geometry.clone();
            newGeometry.setIndex(newIndices);
            return newGeometry;
        }
        GLTFParser.prototype.loadGeometries = function (primitives) {
            var parser = this;
            var extensions = this.extensions;
            var cache = this.primitiveCache;
            function createDracoPrimitive(primitive) {
                return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {
                    return addPrimitiveAttributes(geometry, primitive, parser);
                });
            }
            var pending = [];
            for (var i = 0, il = primitives.length; i < il; i++) {
                var primitive = primitives[i];
                var cacheKey = createPrimitiveKey(primitive);
                var cached = cache[cacheKey];
                if (cached) {
                    pending.push(cached.promise);
                } else {
                    var geometryPromise;
                    if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {
                        geometryPromise = createDracoPrimitive(primitive);
                    } else {
                        geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);
                    }
                    cache[cacheKey] = {
                        primitive: primitive,
                        promise: geometryPromise
                    };
                    pending.push(geometryPromise);
                }
            }
            return Promise.all(pending);
        };
        GLTFParser.prototype.loadMesh = function (meshIndex) {
            var parser = this;
            var json = this.json;
            var meshDef = json.meshes[meshIndex];
            var primitives = meshDef.primitives;
            var pending = [];
            for (var i = 0, il = primitives.length; i < il; i++) {
                var material = primitives[i].material === undefined ? createDefaultMaterial(this.cache) : this.getDependency('material', primitives[i].material);
                pending.push(material);
            }
            pending.push(parser.loadGeometries(primitives));
            return Promise.all(pending).then(function (results) {
                var materials = results.slice(0, results.length - 1);
                var geometries = results[results.length - 1];
                var meshes = [];
                for (var i = 0, il = geometries.length; i < il; i++) {
                    var geometry = geometries[i];
                    var primitive = primitives[i];
                    var mesh;
                    var material = materials[i];
                    if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {
                        mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);
                        if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {
                            mesh.normalizeSkinWeights();
                        }
                        if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {
                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleStripDrawMode);
                        } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {
                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleFanDrawMode);
                        }
                    } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {
                        mesh = new THREE.LineSegments(geometry, material);
                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {
                        mesh = new THREE.Line(geometry, material);
                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {
                        mesh = new THREE.LineLoop(geometry, material);
                    } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {
                        mesh = new THREE.Points(geometry, material);
                    } else {
                        throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);
                    }
                    if (Object.keys(mesh.geometry.morphAttributes).length > 0) {
                        updateMorphTargets(mesh, meshDef);
                    }
                    mesh.name = meshDef.name || 'mesh_' + meshIndex;
                    if (geometries.length > 1)
                        mesh.name += '_' + i;
                    assignExtrasToUserData(mesh, meshDef);
                    parser.assignFinalMaterial(mesh);
                    meshes.push(mesh);
                }
                if (meshes.length === 1) {
                    return meshes[0];
                }
                var group = new THREE.Group();
                for (var i = 0, il = meshes.length; i < il; i++) {
                    group.add(meshes[i]);
                }
                return group;
            });
        };
        GLTFParser.prototype.loadCamera = function (cameraIndex) {
            var camera;
            var cameraDef = this.json.cameras[cameraIndex];
            var params = cameraDef[cameraDef.type];
            if (!params) {
                console.warn('THREE.GLTFLoader: Missing camera parameters.');
                return;
            }
            if (cameraDef.type === 'perspective') {
                camera = new THREE.PerspectiveCamera(THREE.MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2000000);
            } else if (cameraDef.type === 'orthographic') {
                camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);
            }
            if (cameraDef.name)
                camera.name = cameraDef.name;
            assignExtrasToUserData(camera, cameraDef);
            return Promise.resolve(camera);
        };
        GLTFParser.prototype.loadSkin = function (skinIndex) {
            var skinDef = this.json.skins[skinIndex];
            var skinEntry = { joints: skinDef.joints };
            if (skinDef.inverseBindMatrices === undefined) {
                return Promise.resolve(skinEntry);
            }
            return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {
                skinEntry.inverseBindMatrices = accessor;
                return skinEntry;
            });
        };
        GLTFParser.prototype.loadAnimation = function (animationIndex) {
            var json = this.json;
            var animationDef = json.animations[animationIndex];
            var pendingNodes = [];
            var pendingInputAccessors = [];
            var pendingOutputAccessors = [];
            var pendingSamplers = [];
            var pendingTargets = [];
            for (var i = 0, il = animationDef.channels.length; i < il; i++) {
                var channel = animationDef.channels[i];
                var sampler = animationDef.samplers[channel.sampler];
                var target = channel.target;
                var name = target.node !== undefined ? target.node : target.id;
                var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;
                var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;
                pendingNodes.push(this.getDependency('node', name));
                pendingInputAccessors.push(this.getDependency('accessor', input));
                pendingOutputAccessors.push(this.getDependency('accessor', output));
                pendingSamplers.push(sampler);
                pendingTargets.push(target);
            }
            return Promise.all([
                Promise.all(pendingNodes),
                Promise.all(pendingInputAccessors),
                Promise.all(pendingOutputAccessors),
                Promise.all(pendingSamplers),
                Promise.all(pendingTargets)
            ]).then(function (dependencies) {
                var nodes = dependencies[0];
                var inputAccessors = dependencies[1];
                var outputAccessors = dependencies[2];
                var samplers = dependencies[3];
                var targets = dependencies[4];
                var tracks = [];
                for (var i = 0, il = nodes.length; i < il; i++) {
                    var node = nodes[i];
                    var inputAccessor = inputAccessors[i];
                    var outputAccessor = outputAccessors[i];
                    var sampler = samplers[i];
                    var target = targets[i];
                    if (node === undefined)
                        continue;
                    node.updateMatrix();
                    node.matrixAutoUpdate = true;
                    var TypedKeyframeTrack;
                    switch (PATH_PROPERTIES[target.path]) {
                    case PATH_PROPERTIES.weights:
                        TypedKeyframeTrack = THREE.NumberKeyframeTrack;
                        break;
                    case PATH_PROPERTIES.rotation:
                        TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;
                        break;
                    case PATH_PROPERTIES.position:
                    case PATH_PROPERTIES.scale:
                    default:
                        TypedKeyframeTrack = THREE.VectorKeyframeTrack;
                        break;
                    }
                    var targetName = node.name ? node.name : node.uuid;
                    var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;
                    var targetNames = [];
                    if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {
                        node.traverse(function (object) {
                            if (object.isMesh === true && object.morphTargetInfluences) {
                                targetNames.push(object.name ? object.name : object.uuid);
                            }
                        });
                    } else {
                        targetNames.push(targetName);
                    }
                    var outputArray = outputAccessor.array;
                    if (outputAccessor.normalized) {
                        var scale;
                        if (outputArray.constructor === Int8Array) {
                            scale = 1 / 127;
                        } else if (outputArray.constructor === Uint8Array) {
                            scale = 1 / 255;
                        } else if (outputArray.constructor == Int16Array) {
                            scale = 1 / 32767;
                        } else if (outputArray.constructor === Uint16Array) {
                            scale = 1 / 65535;
                        } else {
                            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');
                        }
                        var scaled = new Float32Array(outputArray.length);
                        for (var j = 0, jl = outputArray.length; j < jl; j++) {
                            scaled[j] = outputArray[j] * scale;
                        }
                        outputArray = scaled;
                    }
                    for (var j = 0, jl = targetNames.length; j < jl; j++) {
                        var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);
                        if (sampler.interpolation === 'CUBICSPLINE') {
                            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {
                                return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);
                            };
                            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;
                        }
                        tracks.push(track);
                    }
                }
                var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;
                return new THREE.AnimationClip(name, undefined, tracks);
            });
        };
        GLTFParser.prototype.loadNode = function (nodeIndex) {
            var json = this.json;
            var extensions = this.extensions;
            var parser = this;
            var meshReferences = json.meshReferences;
            var meshUses = json.meshUses;
            var nodeDef = json.nodes[nodeIndex];
            return function () {
                var pending = [];
                if (nodeDef.mesh !== undefined) {
                    pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {
                        var node;
                        if (meshReferences[nodeDef.mesh] > 1) {
                            var instanceNum = meshUses[nodeDef.mesh]++;
                            node = mesh.clone();
                            node.name += '_instance_' + instanceNum;
                        } else {
                            node = mesh;
                        }
                        if (nodeDef.weights !== undefined) {
                            node.traverse(function (o) {
                                if (!o.isMesh)
                                    return;
                                for (var i = 0, il = nodeDef.weights.length; i < il; i++) {
                                    o.morphTargetInfluences[i] = nodeDef.weights[i];
                                }
                            });
                        }
                        return node;
                    }));
                }
                if (nodeDef.camera !== undefined) {
                    pending.push(parser.getDependency('camera', nodeDef.camera));
                }
                if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {
                    pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));
                }
                return Promise.all(pending);
            }().then(function (objects) {
                var node;
                if (nodeDef.isBone === true) {
                    node = new THREE.Bone();
                } else if (objects.length > 1) {
                    node = new THREE.Group();
                } else if (objects.length === 1) {
                    node = objects[0];
                } else {
                    node = new THREE.Object3D();
                }
                if (node !== objects[0]) {
                    for (var i = 0, il = objects.length; i < il; i++) {
                        node.add(objects[i]);
                    }
                }
                if (nodeDef.name) {
                    node.userData.name = nodeDef.name;
                    node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);
                }
                assignExtrasToUserData(node, nodeDef);
                if (nodeDef.extensions)
                    addUnknownExtensionsToUserData(extensions, node, nodeDef);
                if (nodeDef.matrix !== undefined) {
                    var matrix = new THREE.Matrix4();
                    matrix.fromArray(nodeDef.matrix);
                    node.applyMatrix4(matrix);
                } else {
                    if (nodeDef.translation !== undefined) {
                        node.position.fromArray(nodeDef.translation);
                    }
                    if (nodeDef.rotation !== undefined) {
                        node.quaternion.fromArray(nodeDef.rotation);
                    }
                    if (nodeDef.scale !== undefined) {
                        node.scale.fromArray(nodeDef.scale);
                    }
                }
                return node;
            });
        };
        GLTFParser.prototype.loadScene = function () {
            function buildNodeHierachy(nodeId, parentObject, json, parser) {
                var nodeDef = json.nodes[nodeId];
                return parser.getDependency('node', nodeId).then(function (node) {
                    if (nodeDef.skin === undefined)
                        return node;
                    var skinEntry;
                    return parser.getDependency('skin', nodeDef.skin).then(function (skin) {
                        skinEntry = skin;
                        var pendingJoints = [];
                        for (var i = 0, il = skinEntry.joints.length; i < il; i++) {
                            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));
                        }
                        return Promise.all(pendingJoints);
                    }).then(function (jointNodes) {
                        node.traverse(function (mesh) {
                            if (!mesh.isMesh)
                                return;
                            var bones = [];
                            var boneInverses = [];
                            for (var j = 0, jl = jointNodes.length; j < jl; j++) {
                                var jointNode = jointNodes[j];
                                if (jointNode) {
                                    bones.push(jointNode);
                                    var mat = new THREE.Matrix4();
                                    if (skinEntry.inverseBindMatrices !== undefined) {
                                        mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);
                                    }
                                    boneInverses.push(mat);
                                } else {
                                    console.warn('THREE.GLTFLoader: Joint "%s" could not be found.', skinEntry.joints[j]);
                                }
                            }
                            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);
                        });
                        return node;
                    });
                }).then(function (node) {
                    parentObject.add(node);
                    var pending = [];
                    if (nodeDef.children) {
                        var children = nodeDef.children;
                        for (var i = 0, il = children.length; i < il; i++) {
                            var child = children[i];
                            pending.push(buildNodeHierachy(child, node, json, parser));
                        }
                    }
                    return Promise.all(pending);
                });
            }
            return function loadScene(sceneIndex) {
                var json = this.json;
                var extensions = this.extensions;
                var sceneDef = this.json.scenes[sceneIndex];
                var parser = this;
                var scene = new THREE.Group();
                if (sceneDef.name)
                    scene.name = sceneDef.name;
                assignExtrasToUserData(scene, sceneDef);
                if (sceneDef.extensions)
                    addUnknownExtensionsToUserData(extensions, scene, sceneDef);
                var nodeIds = sceneDef.nodes || [];
                var pending = [];
                for (var i = 0, il = nodeIds.length; i < il; i++) {
                    pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));
                }
                return Promise.all(pending).then(function () {
                    return scene;
                });
            };
        }();
        return GLTFLoader;
    }();
    return GLTFLoader ;
});
define('skylark-threejs-ex/loaders/MTLLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var MTLLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: MTLLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text, path));
            }, onProgress, onError);
        },
        setMaterialOptions: function (value) {
            this.materialOptions = value;
            return this;
        },
        parse: function (text, path) {
            var lines = text.split('\n');
            var info = {};
            var delimiter_pattern = /\s+/;
            var materialsInfo = {};
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                line = line.trim();
                if (line.length === 0 || line.charAt(0) === '#') {
                    continue;
                }
                var pos = line.indexOf(' ');
                var key = pos >= 0 ? line.substring(0, pos) : line;
                key = key.toLowerCase();
                var value = pos >= 0 ? line.substring(pos + 1) : '';
                value = value.trim();
                if (key === 'newmtl') {
                    info = { name: value };
                    materialsInfo[value] = info;
                } else {
                    if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {
                        var ss = value.split(delimiter_pattern, 3);
                        info[key] = [
                            parseFloat(ss[0]),
                            parseFloat(ss[1]),
                            parseFloat(ss[2])
                        ];
                    } else {
                        info[key] = value;
                    }
                }
            }
            var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);
            materialCreator.setCrossOrigin(this.crossOrigin);
            materialCreator.setManager(this.manager);
            materialCreator.setMaterials(materialsInfo);
            return materialCreator;
        }
    });
    MTLLoader.MaterialCreator = function (baseUrl, options) {
        this.baseUrl = baseUrl || '';
        this.options = options;
        this.materialsInfo = {};
        this.materials = {};
        this.materialsArray = [];
        this.nameLookup = {};
        this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;
        this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;
    };
    MTLLoader.MaterialCreator.prototype = {
        constructor: MTLLoader.MaterialCreator,
        crossOrigin: 'anonymous',
        setCrossOrigin: function (value) {
            this.crossOrigin = value;
            return this;
        },
        setManager: function (value) {
            this.manager = value;
        },
        setMaterials: function (materialsInfo) {
            this.materialsInfo = this.convert(materialsInfo);
            this.materials = {};
            this.materialsArray = [];
            this.nameLookup = {};
        },
        convert: function (materialsInfo) {
            if (!this.options)
                return materialsInfo;
            var converted = {};
            for (var mn in materialsInfo) {
                var mat = materialsInfo[mn];
                var covmat = {};
                converted[mn] = covmat;
                for (var prop in mat) {
                    var save = true;
                    var value = mat[prop];
                    var lprop = prop.toLowerCase();
                    switch (lprop) {
                    case 'kd':
                    case 'ka':
                    case 'ks':
                        if (this.options && this.options.normalizeRGB) {
                            value = [
                                value[0] / 255,
                                value[1] / 255,
                                value[2] / 255
                            ];
                        }
                        if (this.options && this.options.ignoreZeroRGBs) {
                            if (value[0] === 0 && value[1] === 0 && value[2] === 0) {
                                save = false;
                            }
                        }
                        break;
                    default:
                        break;
                    }
                    if (save) {
                        covmat[lprop] = value;
                    }
                }
            }
            return converted;
        },
        preload: function () {
            for (var mn in this.materialsInfo) {
                this.create(mn);
            }
        },
        getIndex: function (materialName) {
            return this.nameLookup[materialName];
        },
        getAsArray: function () {
            var index = 0;
            for (var mn in this.materialsInfo) {
                this.materialsArray[index] = this.create(mn);
                this.nameLookup[mn] = index;
                index++;
            }
            return this.materialsArray;
        },
        create: function (materialName) {
            if (this.materials[materialName] === undefined) {
                this.createMaterial_(materialName);
            }
            return this.materials[materialName];
        },
        createMaterial_: function (materialName) {
            var scope = this;
            var mat = this.materialsInfo[materialName];
            var params = {
                name: materialName,
                side: this.side
            };
            function resolveURL(baseUrl, url) {
                if (typeof url !== 'string' || url === '')
                    return '';
                if (/^https?:\/\//i.test(url))
                    return url;
                return baseUrl + url;
            }
            function setMapForType(mapType, value) {
                if (params[mapType])
                    return;
                var texParams = scope.getTextureParams(value, params);
                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));
                map.repeat.copy(texParams.scale);
                map.offset.copy(texParams.offset);
                map.wrapS = scope.wrap;
                map.wrapT = scope.wrap;
                params[mapType] = map;
            }
            for (var prop in mat) {
                var value = mat[prop];
                var n;
                if (value === '')
                    continue;
                switch (prop.toLowerCase()) {
                case 'kd':
                    params.color = new THREE.Color().fromArray(value);
                    break;
                case 'ks':
                    params.specular = new THREE.Color().fromArray(value);
                    break;
                case 'ke':
                    params.emissive = new THREE.Color().fromArray(value);
                    break;
                case 'map_kd':
                    setMapForType('map', value);
                    break;
                case 'map_ks':
                    setMapForType('specularMap', value);
                    break;
                case 'map_ke':
                    setMapForType('emissiveMap', value);
                    break;
                case 'norm':
                    setMapForType('normalMap', value);
                    break;
                case 'map_bump':
                case 'bump':
                    setMapForType('bumpMap', value);
                    break;
                case 'map_d':
                    setMapForType('alphaMap', value);
                    params.transparent = true;
                    break;
                case 'ns':
                    params.shininess = parseFloat(value);
                    break;
                case 'd':
                    n = parseFloat(value);
                    if (n < 1) {
                        params.opacity = n;
                        params.transparent = true;
                    }
                    break;
                case 'tr':
                    n = parseFloat(value);
                    if (this.options && this.options.invertTrProperty)
                        n = 1 - n;
                    if (n > 0) {
                        params.opacity = 1 - n;
                        params.transparent = true;
                    }
                    break;
                default:
                    break;
                }
            }
            this.materials[materialName] = new THREE.MeshPhongMaterial(params);
            return this.materials[materialName];
        },
        getTextureParams: function (value, matParams) {
            var texParams = {
                scale: new THREE.Vector2(1, 1),
                offset: new THREE.Vector2(0, 0)
            };
            var items = value.split(/\s+/);
            var pos;
            pos = items.indexOf('-bm');
            if (pos >= 0) {
                matParams.bumpScale = parseFloat(items[pos + 1]);
                items.splice(pos, 2);
            }
            pos = items.indexOf('-s');
            if (pos >= 0) {
                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));
                items.splice(pos, 4);
            }
            pos = items.indexOf('-o');
            if (pos >= 0) {
                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));
                items.splice(pos, 4);
            }
            texParams.url = items.join(' ').trim();
            return texParams;
        },
        loadTexture: function (url, mapping, onLoad, onProgress, onError) {
            var texture;
            var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;
            var loader = manager.getHandler(url);
            if (loader === null) {
                loader = new THREE.TextureLoader(manager);
            }
            if (loader.setCrossOrigin)
                loader.setCrossOrigin(this.crossOrigin);
            texture = loader.load(url, onLoad, onProgress, onError);
            if (mapping !== undefined)
                texture.mapping = mapping;
            return texture;
        }
    };
    return MTLLoader ;
});
define('skylark-threejs-ex/loaders/OBJLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var OBJLoader = function () {
        var object_pattern = /^[og]\s*(.+)?/;
        var material_library_pattern = /^mtllib /;
        var material_use_pattern = /^usemtl /;
        var map_use_pattern = /^usemap /;
        function ParserState() {
            var state = {
                objects: [],
                object: {},
                vertices: [],
                normals: [],
                colors: [],
                uvs: [],
                materials: {},
                materialLibraries: [],
                startObject: function (name, fromDeclaration) {
                    if (this.object && this.object.fromDeclaration === false) {
                        this.object.name = name;
                        this.object.fromDeclaration = fromDeclaration !== false;
                        return;
                    }
                    var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;
                    if (this.object && typeof this.object._finalize === 'function') {
                        this.object._finalize(true);
                    }
                    this.object = {
                        name: name || '',
                        fromDeclaration: fromDeclaration !== false,
                        geometry: {
                            vertices: [],
                            normals: [],
                            colors: [],
                            uvs: []
                        },
                        materials: [],
                        smooth: true,
                        startMaterial: function (name, libraries) {
                            var previous = this._finalize(false);
                            if (previous && (previous.inherited || previous.groupCount <= 0)) {
                                this.materials.splice(previous.index, 1);
                            }
                            var material = {
                                index: this.materials.length,
                                name: name || '',
                                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',
                                smooth: previous !== undefined ? previous.smooth : this.smooth,
                                groupStart: previous !== undefined ? previous.groupEnd : 0,
                                groupEnd: -1,
                                groupCount: -1,
                                inherited: false,
                                clone: function (index) {
                                    var cloned = {
                                        index: typeof index === 'number' ? index : this.index,
                                        name: this.name,
                                        mtllib: this.mtllib,
                                        smooth: this.smooth,
                                        groupStart: 0,
                                        groupEnd: -1,
                                        groupCount: -1,
                                        inherited: false
                                    };
                                    cloned.clone = this.clone.bind(cloned);
                                    return cloned;
                                }
                            };
                            this.materials.push(material);
                            return material;
                        },
                        currentMaterial: function () {
                            if (this.materials.length > 0) {
                                return this.materials[this.materials.length - 1];
                            }
                            return undefined;
                        },
                        _finalize: function (end) {
                            var lastMultiMaterial = this.currentMaterial();
                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {
                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
                                lastMultiMaterial.inherited = false;
                            }
                            if (end && this.materials.length > 1) {
                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {
                                    if (this.materials[mi].groupCount <= 0) {
                                        this.materials.splice(mi, 1);
                                    }
                                }
                            }
                            if (end && this.materials.length === 0) {
                                this.materials.push({
                                    name: '',
                                    smooth: this.smooth
                                });
                            }
                            return lastMultiMaterial;
                        }
                    };
                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {
                        var declared = previousMaterial.clone(0);
                        declared.inherited = true;
                        this.object.materials.push(declared);
                    }
                    this.objects.push(this.object);
                },
                finalize: function () {
                    if (this.object && typeof this.object._finalize === 'function') {
                        this.object._finalize(true);
                    }
                },
                parseVertexIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 3) * 3;
                },
                parseNormalIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 3) * 3;
                },
                parseUVIndex: function (value, len) {
                    var index = parseInt(value, 10);
                    return (index >= 0 ? index - 1 : index + len / 2) * 2;
                },
                addVertex: function (a, b, c) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                    dst.push(src[b + 0], src[b + 1], src[b + 2]);
                    dst.push(src[c + 0], src[c + 1], src[c + 2]);
                },
                addVertexPoint: function (a) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                },
                addVertexLine: function (a) {
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                },
                addNormal: function (a, b, c) {
                    var src = this.normals;
                    var dst = this.object.geometry.normals;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                    dst.push(src[b + 0], src[b + 1], src[b + 2]);
                    dst.push(src[c + 0], src[c + 1], src[c + 2]);
                },
                addColor: function (a, b, c) {
                    var src = this.colors;
                    var dst = this.object.geometry.colors;
                    dst.push(src[a + 0], src[a + 1], src[a + 2]);
                    dst.push(src[b + 0], src[b + 1], src[b + 2]);
                    dst.push(src[c + 0], src[c + 1], src[c + 2]);
                },
                addUV: function (a, b, c) {
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
                    dst.push(src[a + 0], src[a + 1]);
                    dst.push(src[b + 0], src[b + 1]);
                    dst.push(src[c + 0], src[c + 1]);
                },
                addUVLine: function (a) {
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
                    dst.push(src[a + 0], src[a + 1]);
                },
                addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {
                    var vLen = this.vertices.length;
                    var ia = this.parseVertexIndex(a, vLen);
                    var ib = this.parseVertexIndex(b, vLen);
                    var ic = this.parseVertexIndex(c, vLen);
                    this.addVertex(ia, ib, ic);
                    if (this.colors.length > 0) {
                        this.addColor(ia, ib, ic);
                    }
                    if (ua !== undefined && ua !== '') {
                        var uvLen = this.uvs.length;
                        ia = this.parseUVIndex(ua, uvLen);
                        ib = this.parseUVIndex(ub, uvLen);
                        ic = this.parseUVIndex(uc, uvLen);
                        this.addUV(ia, ib, ic);
                    }
                    if (na !== undefined && na !== '') {
                        var nLen = this.normals.length;
                        ia = this.parseNormalIndex(na, nLen);
                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);
                        this.addNormal(ia, ib, ic);
                    }
                },
                addPointGeometry: function (vertices) {
                    this.object.geometry.type = 'Points';
                    var vLen = this.vertices.length;
                    for (var vi = 0, l = vertices.length; vi < l; vi++) {
                        this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));
                    }
                },
                addLineGeometry: function (vertices, uvs) {
                    this.object.geometry.type = 'Line';
                    var vLen = this.vertices.length;
                    var uvLen = this.uvs.length;
                    for (var vi = 0, l = vertices.length; vi < l; vi++) {
                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
                    }
                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {
                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));
                    }
                }
            };
            state.startObject('', false);
            return state;
        }
        function OBJLoader(manager) {
            THREE.Loader.call(this, manager);
            this.materials = null;
        }
        OBJLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: OBJLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new THREE.FileLoader(scope.manager);
                loader.setPath(this.path);
                loader.load(url, function (text) {
                    onLoad(scope.parse(text));
                }, onProgress, onError);
            },
            setMaterials: function (materials) {
                this.materials = materials;
                return this;
            },
            parse: function (text) {
                var state = new ParserState();
                if (text.indexOf('\r\n') !== -1) {
                    text = text.replace(/\r\n/g, '\n');
                }
                if (text.indexOf('\\\n') !== -1) {
                    text = text.replace(/\\\n/g, '');
                }
                var lines = text.split('\n');
                var line = '', lineFirstChar = '';
                var lineLength = 0;
                var result = [];
                var trimLeft = typeof ''.trimLeft === 'function';
                for (var i = 0, l = lines.length; i < l; i++) {
                    line = lines[i];
                    line = trimLeft ? line.trimLeft() : line.trim();
                    lineLength = line.length;
                    if (lineLength === 0)
                        continue;
                    lineFirstChar = line.charAt(0);
                    if (lineFirstChar === '#')
                        continue;
                    if (lineFirstChar === 'v') {
                        var data = line.split(/\s+/);
                        switch (data[0]) {
                        case 'v':
                            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));
                            if (data.length >= 7) {
                                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));
                            }
                            break;
                        case 'vn':
                            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));
                            break;
                        case 'vt':
                            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));
                            break;
                        }
                    } else if (lineFirstChar === 'f') {
                        var lineData = line.substr(1).trim();
                        var vertexData = lineData.split(/\s+/);
                        var faceVertices = [];
                        for (var j = 0, jl = vertexData.length; j < jl; j++) {
                            var vertex = vertexData[j];
                            if (vertex.length > 0) {
                                var vertexParts = vertex.split('/');
                                faceVertices.push(vertexParts);
                            }
                        }
                        var v1 = faceVertices[0];
                        for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {
                            var v2 = faceVertices[j];
                            var v3 = faceVertices[j + 1];
                            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);
                        }
                    } else if (lineFirstChar === 'l') {
                        var lineParts = line.substring(1).trim().split(' ');
                        var lineVertices = [], lineUVs = [];
                        if (line.indexOf('/') === -1) {
                            lineVertices = lineParts;
                        } else {
                            for (var li = 0, llen = lineParts.length; li < llen; li++) {
                                var parts = lineParts[li].split('/');
                                if (parts[0] !== '')
                                    lineVertices.push(parts[0]);
                                if (parts[1] !== '')
                                    lineUVs.push(parts[1]);
                            }
                        }
                        state.addLineGeometry(lineVertices, lineUVs);
                    } else if (lineFirstChar === 'p') {
                        var lineData = line.substr(1).trim();
                        var pointData = lineData.split(' ');
                        state.addPointGeometry(pointData);
                    } else if ((result = object_pattern.exec(line)) !== null) {
                        var name = (' ' + result[0].substr(1).trim()).substr(1);
                        state.startObject(name);
                    } else if (material_use_pattern.test(line)) {
                        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);
                    } else if (material_library_pattern.test(line)) {
                        state.materialLibraries.push(line.substring(7).trim());
                    } else if (map_use_pattern.test(line)) {
                        console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');
                    } else if (lineFirstChar === 's') {
                        result = line.split(' ');
                        if (result.length > 1) {
                            var value = result[1].trim().toLowerCase();
                            state.object.smooth = value !== '0' && value !== 'off';
                        } else {
                            state.object.smooth = true;
                        }
                        var material = state.object.currentMaterial();
                        if (material)
                            material.smooth = state.object.smooth;
                    } else {
                        if (line === '\0')
                            continue;
                        console.warn('THREE.OBJLoader: Unexpected line: "' + line + '"');
                    }
                }
                state.finalize();
                var container = new THREE.Group();
                container.materialLibraries = [].concat(state.materialLibraries);
                for (var i = 0, l = state.objects.length; i < l; i++) {
                    var object = state.objects[i];
                    var geometry = object.geometry;
                    var materials = object.materials;
                    var isLine = geometry.type === 'Line';
                    var isPoints = geometry.type === 'Points';
                    var hasVertexColors = false;
                    if (geometry.vertices.length === 0)
                        continue;
                    var buffergeometry = new THREE.BufferGeometry();
                    buffergeometry.setAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));
                    if (geometry.normals.length > 0) {
                        buffergeometry.setAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));
                    } else {
                        buffergeometry.computeVertexNormals();
                    }
                    if (geometry.colors.length > 0) {
                        hasVertexColors = true;
                        buffergeometry.setAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));
                    }
                    if (geometry.uvs.length > 0) {
                        buffergeometry.setAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));
                    }
                    var createdMaterials = [];
                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {
                        var sourceMaterial = materials[mi];
                        var materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;
                        var material = state.materials[materialHash];
                        if (this.materials !== null) {
                            material = this.materials.create(sourceMaterial.name);
                            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {
                                var materialLine = new THREE.LineBasicMaterial();
                                THREE.Material.prototype.copy.call(materialLine, material);
                                materialLine.color.copy(material.color);
                                material = materialLine;
                            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {
                                var materialPoints = new THREE.PointsMaterial({
                                    size: 10,
                                    sizeAttenuation: false
                                });
                                THREE.Material.prototype.copy.call(materialPoints, material);
                                materialPoints.color.copy(material.color);
                                materialPoints.map = material.map;
                                material = materialPoints;
                            }
                        }
                        if (material === undefined) {
                            if (isLine) {
                                material = new THREE.LineBasicMaterial();
                            } else if (isPoints) {
                                material = new THREE.PointsMaterial({
                                    size: 1,
                                    sizeAttenuation: false
                                });
                            } else {
                                material = new THREE.MeshPhongMaterial();
                            }
                            material.name = sourceMaterial.name;
                            material.flatShading = sourceMaterial.smooth ? false : true;
                            material.vertexColors = hasVertexColors;
                            state.materials[materialHash] = material;
                        }
                        createdMaterials.push(material);
                    }
                    var mesh;
                    if (createdMaterials.length > 1) {
                        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {
                            var sourceMaterial = materials[mi];
                            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
                        }
                        if (isLine) {
                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);
                        } else if (isPoints) {
                            mesh = new THREE.Points(buffergeometry, createdMaterials);
                        } else {
                            mesh = new THREE.Mesh(buffergeometry, createdMaterials);
                        }
                    } else {
                        if (isLine) {
                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);
                        } else if (isPoints) {
                            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);
                        } else {
                            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);
                        }
                    }
                    mesh.name = object.name;
                    container.add(mesh);
                }
                return container;
            }
        });
        return OBJLoader;
    }();
    return OBJLoader;
});
define('skylark-threejs-ex/loaders/obj2/OBJLoader2Parser',[],function () {
    'use strict';
    const OBJLoader2Parser = function () {
        this.logging = {
            enabled: false,
            debug: false
        };
        let scope = this;
        this.callbacks = {
            onProgress: function (text) {
                scope._onProgress(text);
            },
            onAssetAvailable: function (payload) {
                scope._onAssetAvailable(payload);
            },
            onError: function (errorMessage) {
                scope._onError(errorMessage);
            },
            onLoad: function (object3d, message) {
                scope._onLoad(object3d, message);
            }
        };
        this.contentRef = null;
        this.legacyMode = false;
        this.materials = {};
        this.materialPerSmoothingGroup = false;
        this.useOAsMesh = false;
        this.useIndices = false;
        this.disregardNormals = false;
        this.vertices = [];
        this.colors = [];
        this.normals = [];
        this.uvs = [];
        this.rawMesh = {
            objectName: '',
            groupName: '',
            activeMtlName: '',
            mtllibName: '',
            faceType: -1,
            subGroups: [],
            subGroupInUse: null,
            smoothingGroup: {
                splitMaterials: false,
                normalized: -1,
                real: -1
            },
            counts: {
                doubleIndicesCount: 0,
                faceCount: 0,
                mtlCount: 0,
                smoothingGroupCount: 0
            }
        };
        this.inputObjectCount = 1;
        this.outputObjectCount = 1;
        this.globalCounts = {
            vertices: 0,
            faces: 0,
            doubleIndicesCount: 0,
            lineByte: 0,
            currentByte: 0,
            totalBytes: 0
        };
    };
    OBJLoader2Parser.prototype = {
        constructor: OBJLoader2Parser,
        _resetRawMesh: function () {
            this.rawMesh.subGroups = [];
            this.rawMesh.subGroupInUse = null;
            this.rawMesh.smoothingGroup.normalized = -1;
            this.rawMesh.smoothingGroup.real = -1;
            this._pushSmoothingGroup(1);
            this.rawMesh.counts.doubleIndicesCount = 0;
            this.rawMesh.counts.faceCount = 0;
            this.rawMesh.counts.mtlCount = 0;
            this.rawMesh.counts.smoothingGroupCount = 0;
        },
        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {
            this.materialPerSmoothingGroup = materialPerSmoothingGroup === true;
            return this;
        },
        setUseOAsMesh: function (useOAsMesh) {
            this.useOAsMesh = useOAsMesh === true;
            return this;
        },
        setUseIndices: function (useIndices) {
            this.useIndices = useIndices === true;
            return this;
        },
        setDisregardNormals: function (disregardNormals) {
            this.disregardNormals = disregardNormals === true;
            return this;
        },
        setMaterials: function (materials) {
            this.materials = Object.assign({}, materials);
        },
        setCallbackOnAssetAvailable: function (onAssetAvailable) {
            if (onAssetAvailable !== null && onAssetAvailable !== undefined && onAssetAvailable instanceof Function) {
                this.callbacks.onAssetAvailable = onAssetAvailable;
            }
            return this;
        },
        setCallbackOnProgress: function (onProgress) {
            if (onProgress !== null && onProgress !== undefined && onProgress instanceof Function) {
                this.callbacks.onProgress = onProgress;
            }
            return this;
        },
        setCallbackOnError: function (onError) {
            if (onError !== null && onError !== undefined && onError instanceof Function) {
                this.callbacks.onError = onError;
            }
            return this;
        },
        setCallbackOnLoad: function (onLoad) {
            if (onLoad !== null && onLoad !== undefined && onLoad instanceof Function) {
                this.callbacks.onLoad = onLoad;
            }
            return this;
        },
        _onProgress: function (text) {
            let message = text ? text : '';
            if (this.logging.enabled && this.logging.debug) {
                console.log(message);
            }
        },
        _onError: function (errorMessage) {
            if (this.logging.enabled && this.logging.debug) {
                console.error(errorMessage);
            }
        },
        _onAssetAvailable: function (payload) {
            let errorMessage = 'OBJLoader2Parser does not provide implementation for onAssetAvailable. Aborting...';
            this.callbacks.onError(errorMessage);
            throw errorMessage;
        },
        _onLoad: function (object3d, message) {
            console.log('You reached parser default onLoad callback: ' + message);
        },
        setLogging: function (enabled, debug) {
            this.logging.enabled = enabled === true;
            this.logging.debug = debug === true;
            return this;
        },
        _configure: function () {
            this._pushSmoothingGroup(1);
            if (this.logging.enabled) {
                let matKeys = Object.keys(this.materials);
                let matNames = matKeys.length > 0 ? '\n\tmaterialNames:\n\t\t- ' + matKeys.join('\n\t\t- ') : '\n\tmaterialNames: None';
                let printedConfig = 'OBJLoader.Parser configuration:' + matNames + '\n\tmaterialPerSmoothingGroup: ' + this.materialPerSmoothingGroup + '\n\tuseOAsMesh: ' + this.useOAsMesh + '\n\tuseIndices: ' + this.useIndices + '\n\tdisregardNormals: ' + this.disregardNormals;
                printedConfig += '\n\tcallbacks.onProgress: ' + this.callbacks.onProgress.name;
                printedConfig += '\n\tcallbacks.onAssetAvailable: ' + this.callbacks.onAssetAvailable.name;
                printedConfig += '\n\tcallbacks.onError: ' + this.callbacks.onError.name;
                console.info(printedConfig);
            }
        },
        execute: function (arrayBuffer) {
            if (this.logging.enabled)
                console.time('OBJLoader2Parser.execute');
            this._configure();
            let arrayBufferView = new Uint8Array(arrayBuffer);
            this.contentRef = arrayBufferView;
            let length = arrayBufferView.byteLength;
            this.globalCounts.totalBytes = length;
            let buffer = new Array(128);
            for (let code, word = '', bufferPointer = 0, slashesCount = 0, i = 0; i < length; i++) {
                code = arrayBufferView[i];
                switch (code) {
                case 32:
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    break;
                case 47:
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    slashesCount++;
                    word = '';
                    break;
                case 10:
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    this.globalCounts.lineByte = this.globalCounts.currentByte;
                    this.globalCounts.currentByte = i;
                    this._processLine(buffer, bufferPointer, slashesCount);
                    bufferPointer = 0;
                    slashesCount = 0;
                    break;
                case 13:
                    break;
                default:
                    word += String.fromCharCode(code);
                    break;
                }
            }
            this._finalizeParsing();
            if (this.logging.enabled)
                console.timeEnd('OBJLoader2Parser.execute');
        },
        executeLegacy: function (text) {
            if (this.logging.enabled)
                console.time('OBJLoader2Parser.executeLegacy');
            this._configure();
            this.legacyMode = true;
            this.contentRef = text;
            let length = text.length;
            this.globalCounts.totalBytes = length;
            let buffer = new Array(128);
            for (let char, word = '', bufferPointer = 0, slashesCount = 0, i = 0; i < length; i++) {
                char = text[i];
                switch (char) {
                case ' ':
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    break;
                case '/':
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    slashesCount++;
                    word = '';
                    break;
                case '\n':
                    if (word.length > 0)
                        buffer[bufferPointer++] = word;
                    word = '';
                    this.globalCounts.lineByte = this.globalCounts.currentByte;
                    this.globalCounts.currentByte = i;
                    this._processLine(buffer, bufferPointer, slashesCount);
                    bufferPointer = 0;
                    slashesCount = 0;
                    break;
                case '\r':
                    break;
                default:
                    word += char;
                }
            }
            this._finalizeParsing();
            if (this.logging.enabled)
                console.timeEnd('OBJLoader2Parser.executeLegacy');
        },
        _processLine: function (buffer, bufferPointer, slashesCount) {
            if (bufferPointer < 1)
                return;
            let reconstructString = function (content, legacyMode, start, stop) {
                let line = '';
                if (stop > start) {
                    let i;
                    if (legacyMode) {
                        for (i = start; i < stop; i++)
                            line += content[i];
                    } else {
                        for (i = start; i < stop; i++)
                            line += String.fromCharCode(content[i]);
                    }
                    line = line.trim();
                }
                return line;
            };
            let bufferLength, length, i, lineDesignation;
            lineDesignation = buffer[0];
            switch (lineDesignation) {
            case 'v':
                this.vertices.push(parseFloat(buffer[1]));
                this.vertices.push(parseFloat(buffer[2]));
                this.vertices.push(parseFloat(buffer[3]));
                if (bufferPointer > 4) {
                    this.colors.push(parseFloat(buffer[4]));
                    this.colors.push(parseFloat(buffer[5]));
                    this.colors.push(parseFloat(buffer[6]));
                }
                break;
            case 'vt':
                this.uvs.push(parseFloat(buffer[1]));
                this.uvs.push(parseFloat(buffer[2]));
                break;
            case 'vn':
                this.normals.push(parseFloat(buffer[1]));
                this.normals.push(parseFloat(buffer[2]));
                this.normals.push(parseFloat(buffer[3]));
                break;
            case 'f':
                bufferLength = bufferPointer - 1;
                if (slashesCount === 0) {
                    this._checkFaceType(0);
                    for (i = 2, length = bufferLength; i < length; i++) {
                        this._buildFace(buffer[1]);
                        this._buildFace(buffer[i]);
                        this._buildFace(buffer[i + 1]);
                    }
                } else if (bufferLength === slashesCount * 2) {
                    this._checkFaceType(1);
                    for (i = 3, length = bufferLength - 2; i < length; i += 2) {
                        this._buildFace(buffer[1], buffer[2]);
                        this._buildFace(buffer[i], buffer[i + 1]);
                        this._buildFace(buffer[i + 2], buffer[i + 3]);
                    }
                } else if (bufferLength * 2 === slashesCount * 3) {
                    this._checkFaceType(2);
                    for (i = 4, length = bufferLength - 3; i < length; i += 3) {
                        this._buildFace(buffer[1], buffer[2], buffer[3]);
                        this._buildFace(buffer[i], buffer[i + 1], buffer[i + 2]);
                        this._buildFace(buffer[i + 3], buffer[i + 4], buffer[i + 5]);
                    }
                } else {
                    this._checkFaceType(3);
                    for (i = 3, length = bufferLength - 2; i < length; i += 2) {
                        this._buildFace(buffer[1], undefined, buffer[2]);
                        this._buildFace(buffer[i], undefined, buffer[i + 1]);
                        this._buildFace(buffer[i + 2], undefined, buffer[i + 3]);
                    }
                }
                break;
            case 'l':
            case 'p':
                bufferLength = bufferPointer - 1;
                if (bufferLength === slashesCount * 2) {
                    this._checkFaceType(4);
                    for (i = 1, length = bufferLength + 1; i < length; i += 2)
                        this._buildFace(buffer[i], buffer[i + 1]);
                } else {
                    this._checkFaceType(lineDesignation === 'l' ? 5 : 6);
                    for (i = 1, length = bufferLength + 1; i < length; i++)
                        this._buildFace(buffer[i]);
                }
                break;
            case 's':
                this._pushSmoothingGroup(buffer[1]);
                break;
            case 'g':
                this._processCompletedMesh();
                this.rawMesh.groupName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 2, this.globalCounts.currentByte);
                break;
            case 'o':
                if (this.useOAsMesh)
                    this._processCompletedMesh();
                this.rawMesh.objectName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 2, this.globalCounts.currentByte);
                break;
            case 'mtllib':
                this.rawMesh.mtllibName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 7, this.globalCounts.currentByte);
                break;
            case 'usemtl':
                let mtlName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 7, this.globalCounts.currentByte);
                if (mtlName !== '' && this.rawMesh.activeMtlName !== mtlName) {
                    this.rawMesh.activeMtlName = mtlName;
                    this.rawMesh.counts.mtlCount++;
                    this._checkSubGroup();
                }
                break;
            default:
                break;
            }
        },
        _pushSmoothingGroup: function (smoothingGroup) {
            let smoothingGroupInt = parseInt(smoothingGroup);
            if (isNaN(smoothingGroupInt)) {
                smoothingGroupInt = smoothingGroup === 'off' ? 0 : 1;
            }
            let smoothCheck = this.rawMesh.smoothingGroup.normalized;
            this.rawMesh.smoothingGroup.normalized = this.rawMesh.smoothingGroup.splitMaterials ? smoothingGroupInt : smoothingGroupInt === 0 ? 0 : 1;
            this.rawMesh.smoothingGroup.real = smoothingGroupInt;
            if (smoothCheck !== smoothingGroupInt) {
                this.rawMesh.counts.smoothingGroupCount++;
                this._checkSubGroup();
            }
        },
        _checkFaceType: function (faceType) {
            if (this.rawMesh.faceType !== faceType) {
                this._processCompletedMesh();
                this.rawMesh.faceType = faceType;
                this._checkSubGroup();
            }
        },
        _checkSubGroup: function () {
            let index = this.rawMesh.activeMtlName + '|' + this.rawMesh.smoothingGroup.normalized;
            this.rawMesh.subGroupInUse = this.rawMesh.subGroups[index];
            if (this.rawMesh.subGroupInUse === undefined || this.rawMesh.subGroupInUse === null) {
                this.rawMesh.subGroupInUse = {
                    index: index,
                    objectName: this.rawMesh.objectName,
                    groupName: this.rawMesh.groupName,
                    materialName: this.rawMesh.activeMtlName,
                    smoothingGroup: this.rawMesh.smoothingGroup.normalized,
                    vertices: [],
                    indexMappingsCount: 0,
                    indexMappings: [],
                    indices: [],
                    colors: [],
                    uvs: [],
                    normals: []
                };
                this.rawMesh.subGroups[index] = this.rawMesh.subGroupInUse;
            }
        },
        _buildFace: function (faceIndexV, faceIndexU, faceIndexN) {
            let subGroupInUse = this.rawMesh.subGroupInUse;
            let scope = this;
            let updateSubGroupInUse = function () {
                let faceIndexVi = parseInt(faceIndexV);
                let indexPointerV = 3 * (faceIndexVi > 0 ? faceIndexVi - 1 : faceIndexVi + scope.vertices.length / 3);
                let indexPointerC = scope.colors.length > 0 ? indexPointerV : null;
                let vertices = subGroupInUse.vertices;
                vertices.push(scope.vertices[indexPointerV++]);
                vertices.push(scope.vertices[indexPointerV++]);
                vertices.push(scope.vertices[indexPointerV]);
                if (indexPointerC !== null) {
                    let colors = subGroupInUse.colors;
                    colors.push(scope.colors[indexPointerC++]);
                    colors.push(scope.colors[indexPointerC++]);
                    colors.push(scope.colors[indexPointerC]);
                }
                if (faceIndexU) {
                    let faceIndexUi = parseInt(faceIndexU);
                    let indexPointerU = 2 * (faceIndexUi > 0 ? faceIndexUi - 1 : faceIndexUi + scope.uvs.length / 2);
                    let uvs = subGroupInUse.uvs;
                    uvs.push(scope.uvs[indexPointerU++]);
                    uvs.push(scope.uvs[indexPointerU]);
                }
                if (faceIndexN && !scope.disregardNormals) {
                    let faceIndexNi = parseInt(faceIndexN);
                    let indexPointerN = 3 * (faceIndexNi > 0 ? faceIndexNi - 1 : faceIndexNi + scope.normals.length / 3);
                    let normals = subGroupInUse.normals;
                    normals.push(scope.normals[indexPointerN++]);
                    normals.push(scope.normals[indexPointerN++]);
                    normals.push(scope.normals[indexPointerN]);
                }
            };
            if (this.useIndices) {
                if (this.disregardNormals)
                    faceIndexN = undefined;
                let mappingName = faceIndexV + (faceIndexU ? '_' + faceIndexU : '_n') + (faceIndexN ? '_' + faceIndexN : '_n');
                let indicesPointer = subGroupInUse.indexMappings[mappingName];
                if (indicesPointer === undefined || indicesPointer === null) {
                    indicesPointer = this.rawMesh.subGroupInUse.vertices.length / 3;
                    updateSubGroupInUse();
                    subGroupInUse.indexMappings[mappingName] = indicesPointer;
                    subGroupInUse.indexMappingsCount++;
                } else {
                    this.rawMesh.counts.doubleIndicesCount++;
                }
                subGroupInUse.indices.push(indicesPointer);
            } else {
                updateSubGroupInUse();
            }
            this.rawMesh.counts.faceCount++;
        },
        _createRawMeshReport: function (inputObjectCount) {
            return 'Input Object number: ' + inputObjectCount + '\n\tObject name: ' + this.rawMesh.objectName + '\n\tGroup name: ' + this.rawMesh.groupName + '\n\tMtllib name: ' + this.rawMesh.mtllibName + '\n\tVertex count: ' + this.vertices.length / 3 + '\n\tNormal count: ' + this.normals.length / 3 + '\n\tUV count: ' + this.uvs.length / 2 + '\n\tSmoothingGroup count: ' + this.rawMesh.counts.smoothingGroupCount + '\n\tMaterial count: ' + this.rawMesh.counts.mtlCount + '\n\tReal MeshOutputGroup count: ' + this.rawMesh.subGroups.length;
        },
        _finalizeRawMesh: function () {
            let meshOutputGroupTemp = [];
            let meshOutputGroup;
            let absoluteVertexCount = 0;
            let absoluteIndexMappingsCount = 0;
            let absoluteIndexCount = 0;
            let absoluteColorCount = 0;
            let absoluteNormalCount = 0;
            let absoluteUvCount = 0;
            let indices;
            for (let name in this.rawMesh.subGroups) {
                meshOutputGroup = this.rawMesh.subGroups[name];
                if (meshOutputGroup.vertices.length > 0) {
                    indices = meshOutputGroup.indices;
                    if (indices.length > 0 && absoluteIndexMappingsCount > 0) {
                        for (let i = 0; i < indices.length; i++) {
                            indices[i] = indices[i] + absoluteIndexMappingsCount;
                        }
                    }
                    meshOutputGroupTemp.push(meshOutputGroup);
                    absoluteVertexCount += meshOutputGroup.vertices.length;
                    absoluteIndexMappingsCount += meshOutputGroup.indexMappingsCount;
                    absoluteIndexCount += meshOutputGroup.indices.length;
                    absoluteColorCount += meshOutputGroup.colors.length;
                    absoluteUvCount += meshOutputGroup.uvs.length;
                    absoluteNormalCount += meshOutputGroup.normals.length;
                }
            }
            let result = null;
            if (meshOutputGroupTemp.length > 0) {
                result = {
                    name: this.rawMesh.groupName !== '' ? this.rawMesh.groupName : this.rawMesh.objectName,
                    subGroups: meshOutputGroupTemp,
                    absoluteVertexCount: absoluteVertexCount,
                    absoluteIndexCount: absoluteIndexCount,
                    absoluteColorCount: absoluteColorCount,
                    absoluteNormalCount: absoluteNormalCount,
                    absoluteUvCount: absoluteUvCount,
                    faceCount: this.rawMesh.counts.faceCount,
                    doubleIndicesCount: this.rawMesh.counts.doubleIndicesCount
                };
            }
            return result;
        },
        _processCompletedMesh: function () {
            let result = this._finalizeRawMesh();
            let haveMesh = result !== null;
            if (haveMesh) {
                if (this.colors.length > 0 && this.colors.length !== this.vertices.length) {
                    this.callbacks.onError('Vertex Colors were detected, but vertex count and color count do not match!');
                }
                if (this.logging.enabled && this.logging.debug)
                    console.debug(this._createRawMeshReport(this.inputObjectCount));
                this.inputObjectCount++;
                this._buildMesh(result);
                let progressBytesPercent = this.globalCounts.currentByte / this.globalCounts.totalBytes;
                this._onProgress('Completed [o: ' + this.rawMesh.objectName + ' g:' + this.rawMesh.groupName + '' + '] Total progress: ' + (progressBytesPercent * 100).toFixed(2) + '%');
                this._resetRawMesh();
            }
            return haveMesh;
        },
        _buildMesh: function (result) {
            let meshOutputGroups = result.subGroups;
            let vertexFA = new Float32Array(result.absoluteVertexCount);
            this.globalCounts.vertices += result.absoluteVertexCount / 3;
            this.globalCounts.faces += result.faceCount;
            this.globalCounts.doubleIndicesCount += result.doubleIndicesCount;
            let indexUA = result.absoluteIndexCount > 0 ? new Uint32Array(result.absoluteIndexCount) : null;
            let colorFA = result.absoluteColorCount > 0 ? new Float32Array(result.absoluteColorCount) : null;
            let normalFA = result.absoluteNormalCount > 0 ? new Float32Array(result.absoluteNormalCount) : null;
            let uvFA = result.absoluteUvCount > 0 ? new Float32Array(result.absoluteUvCount) : null;
            let haveVertexColors = colorFA !== null;
            let meshOutputGroup;
            let materialNames = [];
            let createMultiMaterial = meshOutputGroups.length > 1;
            let materialIndex = 0;
            let materialIndexMapping = [];
            let selectedMaterialIndex;
            let materialGroup;
            let materialGroups = [];
            let vertexFAOffset = 0;
            let indexUAOffset = 0;
            let colorFAOffset = 0;
            let normalFAOffset = 0;
            let uvFAOffset = 0;
            let materialGroupOffset = 0;
            let materialGroupLength = 0;
            let materialOrg, material, materialName, materialNameOrg;
            for (let oodIndex in meshOutputGroups) {
                if (!meshOutputGroups.hasOwnProperty(oodIndex))
                    continue;
                meshOutputGroup = meshOutputGroups[oodIndex];
                materialNameOrg = meshOutputGroup.materialName;
                if (this.rawMesh.faceType < 4) {
                    materialName = materialNameOrg + (haveVertexColors ? '_vertexColor' : '') + (meshOutputGroup.smoothingGroup === 0 ? '_flat' : '');
                } else {
                    materialName = this.rawMesh.faceType === 6 ? 'defaultPointMaterial' : 'defaultLineMaterial';
                }
                materialOrg = this.materials[materialNameOrg];
                material = this.materials[materialName];
                if ((materialOrg === undefined || materialOrg === null) && (material === undefined || material === null)) {
                    materialName = haveVertexColors ? 'defaultVertexColorMaterial' : 'defaultMaterial';
                    material = this.materials[materialName];
                    if (this.logging.enabled) {
                        console.info('object_group "' + meshOutputGroup.objectName + '_' + meshOutputGroup.groupName + '" was defined with unresolvable material "' + materialNameOrg + '"! Assigning "' + materialName + '".');
                    }
                }
                if (material === undefined || material === null) {
                    let materialCloneInstructions = {
                        materialNameOrg: materialNameOrg,
                        materialName: materialName,
                        materialProperties: {
                            vertexColors: haveVertexColors ? 2 : 0,
                            flatShading: meshOutputGroup.smoothingGroup === 0
                        }
                    };
                    let payload = {
                        cmd: 'assetAvailable',
                        type: 'material',
                        materials: { materialCloneInstructions: materialCloneInstructions }
                    };
                    this.callbacks.onAssetAvailable(payload);
                    let matCheck = this.materials[materialName];
                    if (matCheck === undefined || matCheck === null) {
                        this.materials[materialName] = materialCloneInstructions;
                    }
                }
                if (createMultiMaterial) {
                    selectedMaterialIndex = materialIndexMapping[materialName];
                    if (!selectedMaterialIndex) {
                        selectedMaterialIndex = materialIndex;
                        materialIndexMapping[materialName] = materialIndex;
                        materialNames.push(materialName);
                        materialIndex++;
                    }
                    materialGroupLength = this.useIndices ? meshOutputGroup.indices.length : meshOutputGroup.vertices.length / 3;
                    materialGroup = {
                        start: materialGroupOffset,
                        count: materialGroupLength,
                        index: selectedMaterialIndex
                    };
                    materialGroups.push(materialGroup);
                    materialGroupOffset += materialGroupLength;
                } else {
                    materialNames.push(materialName);
                }
                vertexFA.set(meshOutputGroup.vertices, vertexFAOffset);
                vertexFAOffset += meshOutputGroup.vertices.length;
                if (indexUA) {
                    indexUA.set(meshOutputGroup.indices, indexUAOffset);
                    indexUAOffset += meshOutputGroup.indices.length;
                }
                if (colorFA) {
                    colorFA.set(meshOutputGroup.colors, colorFAOffset);
                    colorFAOffset += meshOutputGroup.colors.length;
                }
                if (normalFA) {
                    normalFA.set(meshOutputGroup.normals, normalFAOffset);
                    normalFAOffset += meshOutputGroup.normals.length;
                }
                if (uvFA) {
                    uvFA.set(meshOutputGroup.uvs, uvFAOffset);
                    uvFAOffset += meshOutputGroup.uvs.length;
                }
                if (this.logging.enabled && this.logging.debug) {
                    let materialIndexLine = selectedMaterialIndex === undefined || selectedMaterialIndex === null ? '' : '\n\t\tmaterialIndex: ' + selectedMaterialIndex;
                    let createdReport = '\tOutput Object no.: ' + this.outputObjectCount + '\n\t\tgroupName: ' + meshOutputGroup.groupName + '\n\t\tIndex: ' + meshOutputGroup.index + '\n\t\tfaceType: ' + this.rawMesh.faceType + '\n\t\tmaterialName: ' + meshOutputGroup.materialName + '\n\t\tsmoothingGroup: ' + meshOutputGroup.smoothingGroup + materialIndexLine + '\n\t\tobjectName: ' + meshOutputGroup.objectName + '\n\t\t#vertices: ' + meshOutputGroup.vertices.length / 3 + '\n\t\t#indices: ' + meshOutputGroup.indices.length + '\n\t\t#colors: ' + meshOutputGroup.colors.length / 3 + '\n\t\t#uvs: ' + meshOutputGroup.uvs.length / 2 + '\n\t\t#normals: ' + meshOutputGroup.normals.length / 3;
                    console.debug(createdReport);
                }
            }
            this.outputObjectCount++;
            this.callbacks.onAssetAvailable({
                cmd: 'assetAvailable',
                type: 'mesh',
                progress: { numericalValue: this.globalCounts.currentByte / this.globalCounts.totalBytes },
                params: { meshName: result.name },
                materials: {
                    multiMaterial: createMultiMaterial,
                    materialNames: materialNames,
                    materialGroups: materialGroups
                },
                buffers: {
                    vertices: vertexFA,
                    indices: indexUA,
                    colors: colorFA,
                    normals: normalFA,
                    uvs: uvFA
                },
                geometryType: this.rawMesh.faceType < 4 ? 0 : this.rawMesh.faceType === 6 ? 2 : 1
            }, [vertexFA.buffer], indexUA !== null ? [indexUA.buffer] : null, colorFA !== null ? [colorFA.buffer] : null, normalFA !== null ? [normalFA.buffer] : null, uvFA !== null ? [uvFA.buffer] : null);
        },
        _finalizeParsing: function () {
            if (this.logging.enabled)
                console.info('Global output object count: ' + this.outputObjectCount);
            if (this._processCompletedMesh() && this.logging.enabled) {
                let parserFinalReport = 'Overall counts: ' + '\n\tVertices: ' + this.globalCounts.vertices + '\n\tFaces: ' + this.globalCounts.faces + '\n\tMultiple definitions: ' + this.globalCounts.doubleIndicesCount;
                console.info(parserFinalReport);
            }
        }
    };

    return OBJLoader2Parser;
});
define('skylark-threejs-ex/loaders/obj2/shared/MeshReceiver',[
    'skylark-threejs'
], function (THREE) {
    'use strict';
    const MeshReceiver = function (materialHandler) {
        this.logging = {
            enabled: false,
            debug: false
        };
        this.callbacks = {
            onProgress: null,
            onMeshAlter: null
        };
        this.materialHandler = materialHandler;
    };
    MeshReceiver.prototype = {
        constructor: MeshReceiver,
        setLogging: function (enabled, debug) {
            this.logging.enabled = enabled === true;
            this.logging.debug = debug === true;
        },
        _setCallbacks: function (onProgress, onMeshAlter) {
            if (onProgress !== null && onProgress !== undefined && onProgress instanceof Function) {
                this.callbacks.onProgress = onProgress;
            }
            if (onMeshAlter !== null && onMeshAlter !== undefined && onMeshAlter instanceof Function) {
                this.callbacks.onMeshAlter = onMeshAlter;
            }
        },
        buildMeshes: function (meshPayload) {
            let meshName = meshPayload.params.meshName;
            let buffers = meshPayload.buffers;
            let bufferGeometry = new THREE.BufferGeometry();
            if (buffers.vertices !== undefined && buffers.vertices !== null) {
                bufferGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(buffers.vertices), 3));
            }
            if (buffers.indices !== undefined && buffers.indices !== null) {
                bufferGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(buffers.indices), 1));
            }
            if (buffers.colors !== undefined && buffers.colors !== null) {
                bufferGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(buffers.colors), 3));
            }
            if (buffers.normals !== undefined && buffers.normals !== null) {
                bufferGeometry.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffers.normals), 3));
            } else {
                bufferGeometry.computeVertexNormals();
            }
            if (buffers.uvs !== undefined && buffers.uvs !== null) {
                bufferGeometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(buffers.uvs), 2));
            }
            if (buffers.skinIndex !== undefined && buffers.skinIndex !== null) {
                bufferGeometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Uint16Array(buffers.skinIndex), 4));
            }
            if (buffers.skinWeight !== undefined && buffers.skinWeight !== null) {
                bufferGeometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(buffers.skinWeight), 4));
            }
            let material, materialName, key;
            let materialNames = meshPayload.materials.materialNames;
            let createMultiMaterial = meshPayload.materials.multiMaterial;
            let multiMaterials = [];
            for (key in materialNames) {
                materialName = materialNames[key];
                material = this.materialHandler.getMaterial(materialName);
                if (createMultiMaterial)
                    multiMaterials.push(material);
            }
            if (createMultiMaterial) {
                material = multiMaterials;
                let materialGroups = meshPayload.materials.materialGroups;
                let materialGroup;
                for (key in materialGroups) {
                    materialGroup = materialGroups[key];
                    bufferGeometry.addGroup(materialGroup.start, materialGroup.count, materialGroup.index);
                }
            }
            let meshes = [];
            let mesh;
            let callbackOnMeshAlterResult;
            let useOrgMesh = true;
            let geometryType = meshPayload.geometryType === null ? 0 : meshPayload.geometryType;
            if (this.callbacks.onMeshAlter) {
                callbackOnMeshAlterResult = this.callbacks.onMeshAlter({
                    detail: {
                        meshName: meshName,
                        bufferGeometry: bufferGeometry,
                        material: material,
                        geometryType: geometryType
                    }
                });
            }
            if (callbackOnMeshAlterResult) {
                if (callbackOnMeshAlterResult.isDisregardMesh()) {
                    useOrgMesh = false;
                } else if (callbackOnMeshAlterResult.providesAlteredMeshes()) {
                    for (let i in callbackOnMeshAlterResult.meshes) {
                        meshes.push(callbackOnMeshAlterResult.meshes[i]);
                    }
                    useOrgMesh = false;
                }
            }
            if (useOrgMesh) {
                if (meshPayload.computeBoundingSphere)
                    bufferGeometry.computeBoundingSphere();
                if (geometryType === 0) {
                    mesh = new THREE.Mesh(bufferGeometry, material);
                } else if (geometryType === 1) {
                    mesh = new THREE.LineSegments(bufferGeometry, material);
                } else {
                    mesh = new THREE.Points(bufferGeometry, material);
                }
                mesh.name = meshName;
                meshes.push(mesh);
            }
            let progressMessage = meshPayload.params.meshName;
            if (meshes.length > 0) {
                let meshNames = [];
                for (let i in meshes) {
                    mesh = meshes[i];
                    meshNames[i] = mesh.name;
                }
                progressMessage += ': Adding mesh(es) (' + meshNames.length + ': ' + meshNames + ') from input mesh: ' + meshName;
                progressMessage += ' (' + (meshPayload.progress.numericalValue * 100).toFixed(2) + '%)';
            } else {
                progressMessage += ': Not adding mesh: ' + meshName;
                progressMessage += ' (' + (meshPayload.progress.numericalValue * 100).toFixed(2) + '%)';
            }
            if (this.callbacks.onProgress) {
                this.callbacks.onProgress('progress', progressMessage, meshPayload.progress.numericalValue);
            }
            return meshes;
        }
    };

    return  MeshReceiver;
});
define('skylark-threejs-ex/loaders/obj2/shared/MaterialHandler',[
    'skylark-threejs'
], function (THREE) {
    'use strict';
    const MaterialHandler = function () {
        this.logging = {
            enabled: false,
            debug: false
        };
        this.callbacks = { onLoadMaterials: null };
        this.materials = {};
    };
    MaterialHandler.prototype = {
        constructor: MaterialHandler,
        setLogging: function (enabled, debug) {
            this.logging.enabled = enabled === true;
            this.logging.debug = debug === true;
        },
        _setCallbacks: function (onLoadMaterials) {
            if (onLoadMaterials !== undefined && onLoadMaterials !== null && onLoadMaterials instanceof Function) {
                this.callbacks.onLoadMaterials = onLoadMaterials;
            }
        },
        createDefaultMaterials: function (overrideExisting) {
            let defaultMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });
            defaultMaterial.name = 'defaultMaterial';
            let defaultVertexColorMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });
            defaultVertexColorMaterial.name = 'defaultVertexColorMaterial';
            defaultVertexColorMaterial.vertexColors = THREE.VertexColors;
            let defaultLineMaterial = new THREE.LineBasicMaterial();
            defaultLineMaterial.name = 'defaultLineMaterial';
            let defaultPointMaterial = new THREE.PointsMaterial({ size: 0.1 });
            defaultPointMaterial.name = 'defaultPointMaterial';
            let runtimeMaterials = {};
            runtimeMaterials[defaultMaterial.name] = defaultMaterial;
            runtimeMaterials[defaultVertexColorMaterial.name] = defaultVertexColorMaterial;
            runtimeMaterials[defaultLineMaterial.name] = defaultLineMaterial;
            runtimeMaterials[defaultPointMaterial.name] = defaultPointMaterial;
            this.addMaterials(runtimeMaterials, overrideExisting);
        },
        addPayloadMaterials: function (materialPayload) {
            let material, materialName;
            let materialCloneInstructions = materialPayload.materials.materialCloneInstructions;
            let newMaterials = {};
            if (materialCloneInstructions !== undefined && materialCloneInstructions !== null) {
                let materialNameOrg = materialCloneInstructions.materialNameOrg;
                materialNameOrg = materialNameOrg !== undefined && materialNameOrg !== null ? materialNameOrg : '';
                let materialOrg = this.materials[materialNameOrg];
                if (materialOrg) {
                    material = materialOrg.clone();
                    materialName = materialCloneInstructions.materialName;
                    material.name = materialName;
                    Object.assign(material, materialCloneInstructions.materialProperties);
                    this.materials[materialName] = material;
                    newMaterials[materialName] = material;
                } else {
                    if (this.logging.enabled) {
                        console.info('Requested material "' + materialNameOrg + '" is not available!');
                    }
                }
            }
            let materials = materialPayload.materials.serializedMaterials;
            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {
                let loader = new THREE.MaterialLoader();
                let materialJson;
                for (materialName in materials) {
                    materialJson = materials[materialName];
                    if (materialJson !== undefined && materialJson !== null) {
                        material = loader.parse(materialJson);
                        if (this.logging.enabled) {
                            console.info('De-serialized material with name "' + materialName + '" will be added.');
                        }
                        this.materials[materialName] = material;
                        newMaterials[materialName] = material;
                    }
                }
            }
            materials = materialPayload.materials.runtimeMaterials;
            newMaterials = this.addMaterials(materials, true, newMaterials);
            return newMaterials;
        },
        addMaterials: function (materials, overrideExisting, newMaterials) {
            if (newMaterials === undefined || newMaterials === null) {
                newMaterials = {};
            }
            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {
                let material;
                let existingMaterial;
                let add;
                for (let materialName in materials) {
                    material = materials[materialName];
                    add = overrideExisting === true;
                    if (!add) {
                        existingMaterial = this.materials[materialName];
                        add = existingMaterial === null || existingMaterial === undefined;
                    }
                    if (add) {
                        this.materials[materialName] = material;
                        newMaterials[materialName] = material;
                    }
                    if (this.logging.enabled && this.logging.debug) {
                        console.info('Material with name "' + materialName + '" was added.');
                    }
                }
            }
            if (this.callbacks.onLoadMaterials) {
                this.callbacks.onLoadMaterials(newMaterials);
            }
            return newMaterials;
        },
        getMaterials: function () {
            return this.materials;
        },
        getMaterial: function (materialName) {
            return this.materials[materialName];
        },
        getMaterialsJSON: function () {
            let materialsJSON = {};
            let material;
            for (let materialName in this.materials) {
                material = this.materials[materialName];
                materialsJSON[materialName] = material.toJSON();
            }
            return materialsJSON;
        },
        clearMaterials: function () {
            this.materials = {};
        }
    };
    return MaterialHandler;
});
define('skylark-threejs-ex/loaders/OBJLoader2',[
    "skylark-threejs",
    './obj2/OBJLoader2Parser',
    './obj2/shared/MeshReceiver',
    './obj2/shared/MaterialHandler'
], function (
    THREE, 
    OBJLoader2Parser, 
    MeshReceiver, 
    MaterialHandler
) {
    'use strict';
    const OBJLoader2 = function (manager) {
        THREE.Loader.call(this, manager);
        this.parser = new OBJLoader2Parser();
        this.modelName = '';
        this.instanceNo = 0;
        this.baseObject3d = new THREE.Object3D();
        this.materialHandler = new MaterialHandler();
        this.meshReceiver = new MeshReceiver(this.materialHandler);
        let scope = this;
        let defaultOnAssetAvailable = function (payload) {
            scope._onAssetAvailable(payload);
        };
        this.parser.setCallbackOnAssetAvailable(defaultOnAssetAvailable);
    };
    OBJLoader2.OBJLOADER2_VERSION = '3.2.0';
    console.info('Using OBJLoader2 version: ' + OBJLoader2.OBJLOADER2_VERSION);
    OBJLoader2.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: OBJLoader2,
        setLogging: function (enabled, debug) {
            this.parser.setLogging(enabled, debug);
            return this;
        },
        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {
            this.parser.setMaterialPerSmoothingGroup(materialPerSmoothingGroup);
            return this;
        },
        setUseOAsMesh: function (useOAsMesh) {
            this.parser.setUseOAsMesh(useOAsMesh);
            return this;
        },
        setUseIndices: function (useIndices) {
            this.parser.setUseIndices(useIndices);
            return this;
        },
        setDisregardNormals: function (disregardNormals) {
            this.parser.setDisregardNormals(disregardNormals);
            return this;
        },
        setModelName: function (modelName) {
            this.modelName = modelName ? modelName : this.modelName;
            return this;
        },
        setBaseObject3d: function (baseObject3d) {
            this.baseObject3d = baseObject3d === undefined || baseObject3d === null ? this.baseObject3d : baseObject3d;
            return this;
        },
        addMaterials: function (materials, overrideExisting) {
            this.materialHandler.addMaterials(materials, overrideExisting);
            return this;
        },
        setCallbackOnAssetAvailable: function (onAssetAvailable) {
            this.parser.setCallbackOnAssetAvailable(onAssetAvailable);
            return this;
        },
        setCallbackOnProgress: function (onProgress) {
            this.parser.setCallbackOnProgress(onProgress);
            return this;
        },
        setCallbackOnError: function (onError) {
            this.parser.setCallbackOnError(onError);
            return this;
        },
        setCallbackOnLoad: function (onLoad) {
            this.parser.setCallbackOnLoad(onLoad);
            return this;
        },
        setCallbackOnMeshAlter: function (onMeshAlter) {
            this.meshReceiver._setCallbacks(this.parser.callbacks.onProgress, onMeshAlter);
            return this;
        },
        setCallbackOnLoadMaterials: function (onLoadMaterials) {
            this.materialHandler._setCallbacks(onLoadMaterials);
            return this;
        },
        load: function (url, onLoad, onFileLoadProgress, onError, onMeshAlter) {
            let scope = this;
            if (onLoad === null || onLoad === undefined || !(onLoad instanceof Function)) {
                let errorMessage = 'onLoad is not a function! Aborting...';
                scope.parser.callbacks.onError(errorMessage);
                throw errorMessage;
            } else {
                this.parser.setCallbackOnLoad(onLoad);
            }
            if (onError === null || onError === undefined || !(onError instanceof Function)) {
                onError = function (event) {
                    let errorMessage = event;
                    if (event.currentTarget && event.currentTarget.statusText !== null) {
                        errorMessage = 'Error occurred while downloading!\nurl: ' + event.currentTarget.responseURL + '\nstatus: ' + event.currentTarget.statusText;
                    }
                    scope.parser.callbacks.onError(errorMessage);
                };
            }
            if (!url) {
                onError('An invalid url was provided. Unable to continue!');
            }
            let urlFull = new URL(url, window.location.href).href;
            let filename = urlFull;
            let urlParts = urlFull.split('/');
            if (urlParts.length > 2) {
                filename = urlParts[urlParts.length - 1];
                this.path = urlParts.slice(0, urlParts.length - 1).join('/') + '/';
            }
            if (onFileLoadProgress === null || onFileLoadProgress === undefined || !(onFileLoadProgress instanceof Function)) {
                let numericalValueRef = 0;
                let numericalValue = 0;
                onFileLoadProgress = function (event) {
                    if (!event.lengthComputable)
                        return;
                    numericalValue = event.loaded / event.total;
                    if (numericalValue > numericalValueRef) {
                        numericalValueRef = numericalValue;
                        let output = 'Download of "' + url + '": ' + (numericalValue * 100).toFixed(2) + '%';
                        scope.parser.callbacks.onProgress('progressLoad', output, numericalValue);
                    }
                };
            }
            this.setCallbackOnMeshAlter(onMeshAlter);
            let fileLoaderOnLoad = function (content) {
                scope.parser.callbacks.onLoad(scope.parse(content), 'OBJLoader2#load: Parsing completed');
            };
            let fileLoader = new THREE.FileLoader(this.manager);
            fileLoader.setPath(this.path || this.resourcePath);
            fileLoader.setResponseType('arraybuffer');
            fileLoader.load(filename, fileLoaderOnLoad, onFileLoadProgress, onError);
        },
        parse: function (content) {
            if (content === null || content === undefined) {
                throw 'Provided content is not a valid ArrayBuffer or String. Unable to continue parsing';
            }
            if (this.parser.logging.enabled) {
                console.time('OBJLoader parse: ' + this.modelName);
            }
            this.materialHandler.createDefaultMaterials(false);
            this.parser.setMaterials(this.materialHandler.getMaterials());
            if (content instanceof ArrayBuffer || content instanceof Uint8Array) {
                if (this.parser.logging.enabled)
                    console.info('Parsing arrayBuffer...');
                this.parser.execute(content);
            } else if (typeof content === 'string' || content instanceof String) {
                if (this.parser.logging.enabled)
                    console.info('Parsing text...');
                this.parser.executeLegacy(content);
            } else {
                this.parser.callbacks.onError('Provided content was neither of type String nor Uint8Array! Aborting...');
            }
            if (this.parser.logging.enabled) {
                console.timeEnd('OBJLoader parse: ' + this.modelName);
            }
            return this.baseObject3d;
        },
        _onAssetAvailable: function (payload) {
            if (payload.cmd !== 'assetAvailable')
                return;
            if (payload.type === 'mesh') {
                let meshes = this.meshReceiver.buildMeshes(payload);
                for (let mesh of meshes) {
                    this.baseObject3d.add(mesh);
                }
            } else if (payload.type === 'material') {
                this.materialHandler.addPayloadMaterials(payload);
            }
        }
    });
    return OBJLoader2;
});
define('skylark-threejs-ex/loaders/PCDLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PCDLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.littleEndian = true;
    };
    PCDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: PCDLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (data) {
                try {
                    onLoad(scope.parse(data, url));
                } catch (e) {
                    if (onError) {
                        onError(e);
                    } else {
                        throw e;
                    }
                }
            }, onProgress, onError);
        },
        parse: function (data, url) {
            function decompressLZF(inData, outLength) {
                var inLength = inData.length;
                var outData = new Uint8Array(outLength);
                var inPtr = 0;
                var outPtr = 0;
                var ctrl;
                var len;
                var ref;
                do {
                    ctrl = inData[inPtr++];
                    if (ctrl < 1 << 5) {
                        ctrl++;
                        if (outPtr + ctrl > outLength)
                            throw new Error('Output buffer is not large enough');
                        if (inPtr + ctrl > inLength)
                            throw new Error('Invalid compressed data');
                        do {
                            outData[outPtr++] = inData[inPtr++];
                        } while (--ctrl);
                    } else {
                        len = ctrl >> 5;
                        ref = outPtr - ((ctrl & 31) << 8) - 1;
                        if (inPtr >= inLength)
                            throw new Error('Invalid compressed data');
                        if (len === 7) {
                            len += inData[inPtr++];
                            if (inPtr >= inLength)
                                throw new Error('Invalid compressed data');
                        }
                        ref -= inData[inPtr++];
                        if (outPtr + len + 2 > outLength)
                            throw new Error('Output buffer is not large enough');
                        if (ref < 0)
                            throw new Error('Invalid compressed data');
                        if (ref >= outPtr)
                            throw new Error('Invalid compressed data');
                        do {
                            outData[outPtr++] = outData[ref++];
                        } while (--len + 2);
                    }
                } while (inPtr < inLength);
                return outData;
            }
            function parseHeader(data) {
                var PCDheader = {};
                var result1 = data.search(/[\r\n]DATA\s(\S*)\s/i);
                var result2 = /[\r\n]DATA\s(\S*)\s/i.exec(data.substr(result1 - 1));
                PCDheader.data = result2[1];
                PCDheader.headerLen = result2[0].length + result1;
                PCDheader.str = data.substr(0, PCDheader.headerLen);
                PCDheader.str = PCDheader.str.replace(/\#.*/gi, '');
                PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);
                PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);
                PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);
                PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);
                PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);
                PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);
                PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);
                PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);
                PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str);
                if (PCDheader.version !== null)
                    PCDheader.version = parseFloat(PCDheader.version[1]);
                if (PCDheader.fields !== null)
                    PCDheader.fields = PCDheader.fields[1].split(' ');
                if (PCDheader.type !== null)
                    PCDheader.type = PCDheader.type[1].split(' ');
                if (PCDheader.width !== null)
                    PCDheader.width = parseInt(PCDheader.width[1]);
                if (PCDheader.height !== null)
                    PCDheader.height = parseInt(PCDheader.height[1]);
                if (PCDheader.viewpoint !== null)
                    PCDheader.viewpoint = PCDheader.viewpoint[1];
                if (PCDheader.points !== null)
                    PCDheader.points = parseInt(PCDheader.points[1], 10);
                if (PCDheader.points === null)
                    PCDheader.points = PCDheader.width * PCDheader.height;
                if (PCDheader.size !== null) {
                    PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {
                        return parseInt(x, 10);
                    });
                }
                if (PCDheader.count !== null) {
                    PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {
                        return parseInt(x, 10);
                    });
                } else {
                    PCDheader.count = [];
                    for (var i = 0, l = PCDheader.fields.length; i < l; i++) {
                        PCDheader.count.push(1);
                    }
                }
                PCDheader.offset = {};
                var sizeSum = 0;
                for (var i = 0, l = PCDheader.fields.length; i < l; i++) {
                    if (PCDheader.data === 'ascii') {
                        PCDheader.offset[PCDheader.fields[i]] = i;
                    } else {
                        PCDheader.offset[PCDheader.fields[i]] = sizeSum;
                        sizeSum += PCDheader.size[i];
                    }
                }
                PCDheader.rowSize = sizeSum;
                return PCDheader;
            }
            var textData = THREE.LoaderUtils.decodeText(new Uint8Array(data));
            var PCDheader = parseHeader(textData);
            var position = [];
            var normal = [];
            var color = [];
            if (PCDheader.data === 'ascii') {
                var offset = PCDheader.offset;
                var pcdData = textData.substr(PCDheader.headerLen);
                var lines = pcdData.split('\n');
                for (var i = 0, l = lines.length; i < l; i++) {
                    if (lines[i] === '')
                        continue;
                    var line = lines[i].split(' ');
                    if (offset.x !== undefined) {
                        position.push(parseFloat(line[offset.x]));
                        position.push(parseFloat(line[offset.y]));
                        position.push(parseFloat(line[offset.z]));
                    }
                    if (offset.rgb !== undefined) {
                        var rgb = parseFloat(line[offset.rgb]);
                        var r = rgb >> 16 & 255;
                        var g = rgb >> 8 & 255;
                        var b = rgb >> 0 & 255;
                        color.push(r / 255, g / 255, b / 255);
                    }
                    if (offset.normal_x !== undefined) {
                        normal.push(parseFloat(line[offset.normal_x]));
                        normal.push(parseFloat(line[offset.normal_y]));
                        normal.push(parseFloat(line[offset.normal_z]));
                    }
                }
            }
            if (PCDheader.data === 'binary_compressed') {
                var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));
                var compressedSize = sizes[0];
                var decompressedSize = sizes[1];
                var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);
                var dataview = new DataView(decompressed.buffer);
                var offset = PCDheader.offset;
                for (var i = 0; i < PCDheader.points; i++) {
                    if (offset.x !== undefined) {
                        position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));
                        position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));
                        position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));
                    }
                    if (offset.rgb !== undefined) {
                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);
                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);
                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);
                    }
                    if (offset.normal_x !== undefined) {
                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));
                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));
                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));
                    }
                }
            }
            if (PCDheader.data === 'binary') {
                var dataview = new DataView(data, PCDheader.headerLen);
                var offset = PCDheader.offset;
                for (var i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {
                    if (offset.x !== undefined) {
                        position.push(dataview.getFloat32(row + offset.x, this.littleEndian));
                        position.push(dataview.getFloat32(row + offset.y, this.littleEndian));
                        position.push(dataview.getFloat32(row + offset.z, this.littleEndian));
                    }
                    if (offset.rgb !== undefined) {
                        color.push(dataview.getUint8(row + offset.rgb + 2) / 255);
                        color.push(dataview.getUint8(row + offset.rgb + 1) / 255);
                        color.push(dataview.getUint8(row + offset.rgb + 0) / 255);
                    }
                    if (offset.normal_x !== undefined) {
                        normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));
                        normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));
                        normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));
                    }
                }
            }
            var geometry = new THREE.BufferGeometry();
            if (position.length > 0)
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
            if (normal.length > 0)
                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal, 3));
            if (color.length > 0)
                geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));
            geometry.computeBoundingSphere();
            var material = new THREE.PointsMaterial({ size: 0.005 });
            if (color.length > 0) {
                material.vertexColors = true;
            } else {
                material.color.setHex(Math.random() * 16777215);
            }
            var mesh = new THREE.Points(geometry, material);
            var name = url.split('').reverse().join('');
            name = /([^\/]*)/.exec(name);
            name = name[1].split('').reverse().join('');
            mesh.name = name;
            return mesh;
        }
    });
    return PCDLoader;
});
define('skylark-threejs-ex/loaders/PLYLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PLYLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.propertyNameMapping = {};
    };
    PLYLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: PLYLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        setPropertyNameMapping: function (mapping) {
            this.propertyNameMapping = mapping;
        },
        parse: function (data) {
            function parseHeader(data) {
                var patternHeader = /ply([\s\S]*)end_header\r?\n/;
                var headerText = '';
                var headerLength = 0;
                var result = patternHeader.exec(data);
                if (result !== null) {
                    headerText = result[1];
                    headerLength = result[0].length;
                }
                var header = {
                    comments: [],
                    elements: [],
                    headerLength: headerLength
                };
                var lines = headerText.split('\n');
                var currentElement;
                var lineType, lineValues;
                function make_ply_element_property(propertValues, propertyNameMapping) {
                    var property = { type: propertValues[0] };
                    if (property.type === 'list') {
                        property.name = propertValues[3];
                        property.countType = propertValues[1];
                        property.itemType = propertValues[2];
                    } else {
                        property.name = propertValues[1];
                    }
                    if (property.name in propertyNameMapping) {
                        property.name = propertyNameMapping[property.name];
                    }
                    return property;
                }
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    line = line.trim();
                    if (line === '')
                        continue;
                    lineValues = line.split(/\s+/);
                    lineType = lineValues.shift();
                    line = lineValues.join(' ');
                    switch (lineType) {
                    case 'format':
                        header.format = lineValues[0];
                        header.version = lineValues[1];
                        break;
                    case 'comment':
                        header.comments.push(line);
                        break;
                    case 'element':
                        if (currentElement !== undefined) {
                            header.elements.push(currentElement);
                        }
                        currentElement = {};
                        currentElement.name = lineValues[0];
                        currentElement.count = parseInt(lineValues[1]);
                        currentElement.properties = [];
                        break;
                    case 'property':
                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));
                        break;
                    default:
                        console.log('unhandled', lineType, lineValues);
                    }
                }
                if (currentElement !== undefined) {
                    header.elements.push(currentElement);
                }
                return header;
            }
            function parseASCIINumber(n, type) {
                switch (type) {
                case 'char':
                case 'uchar':
                case 'short':
                case 'ushort':
                case 'int':
                case 'uint':
                case 'int8':
                case 'uint8':
                case 'int16':
                case 'uint16':
                case 'int32':
                case 'uint32':
                    return parseInt(n);
                case 'float':
                case 'double':
                case 'float32':
                case 'float64':
                    return parseFloat(n);
                }
            }
            function parseASCIIElement(properties, line) {
                var values = line.split(/\s+/);
                var element = {};
                for (var i = 0; i < properties.length; i++) {
                    if (properties[i].type === 'list') {
                        var list = [];
                        var n = parseASCIINumber(values.shift(), properties[i].countType);
                        for (var j = 0; j < n; j++) {
                            list.push(parseASCIINumber(values.shift(), properties[i].itemType));
                        }
                        element[properties[i].name] = list;
                    } else {
                        element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);
                    }
                }
                return element;
            }
            function parseASCII(data, header) {
                var buffer = {
                    indices: [],
                    vertices: [],
                    normals: [],
                    uvs: [],
                    faceVertexUvs: [],
                    colors: []
                };
                var result;
                var patternBody = /end_header\s([\s\S]*)$/;
                var body = '';
                if ((result = patternBody.exec(data)) !== null) {
                    body = result[1];
                }
                var lines = body.split('\n');
                var currentElement = 0;
                var currentElementCount = 0;
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    line = line.trim();
                    if (line === '') {
                        continue;
                    }
                    if (currentElementCount >= header.elements[currentElement].count) {
                        currentElement++;
                        currentElementCount = 0;
                    }
                    var element = parseASCIIElement(header.elements[currentElement].properties, line);
                    handleElement(buffer, header.elements[currentElement].name, element);
                    currentElementCount++;
                }
                return postProcess(buffer);
            }
            function postProcess(buffer) {
                var geometry = new THREE.BufferGeometry();
                if (buffer.indices.length > 0) {
                    geometry.setIndex(buffer.indices);
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3));
                if (buffer.normals.length > 0) {
                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3));
                }
                if (buffer.uvs.length > 0) {
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2));
                }
                if (buffer.colors.length > 0) {
                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3));
                }
                if (buffer.faceVertexUvs.length > 0) {
                    geometry = geometry.toNonIndexed();
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2));
                }
                geometry.computeBoundingSphere();
                return geometry;
            }
            function handleElement(buffer, elementName, element) {
                if (elementName === 'vertex') {
                    buffer.vertices.push(element.x, element.y, element.z);
                    if ('nx' in element && 'ny' in element && 'nz' in element) {
                        buffer.normals.push(element.nx, element.ny, element.nz);
                    }
                    if ('s' in element && 't' in element) {
                        buffer.uvs.push(element.s, element.t);
                    }
                    if ('red' in element && 'green' in element && 'blue' in element) {
                        buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);
                    }
                } else if (elementName === 'face') {
                    var vertex_indices = element.vertex_indices || element.vertex_index;
                    var texcoord = element.texcoord;
                    if (vertex_indices.length === 3) {
                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);
                        if (texcoord && texcoord.length === 6) {
                            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);
                            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);
                            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);
                        }
                    } else if (vertex_indices.length === 4) {
                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);
                        buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);
                    }
                }
            }
            function binaryRead(dataview, at, type, little_endian) {
                switch (type) {
                case 'int8':
                case 'char':
                    return [
                        dataview.getInt8(at),
                        1
                    ];
                case 'uint8':
                case 'uchar':
                    return [
                        dataview.getUint8(at),
                        1
                    ];
                case 'int16':
                case 'short':
                    return [
                        dataview.getInt16(at, little_endian),
                        2
                    ];
                case 'uint16':
                case 'ushort':
                    return [
                        dataview.getUint16(at, little_endian),
                        2
                    ];
                case 'int32':
                case 'int':
                    return [
                        dataview.getInt32(at, little_endian),
                        4
                    ];
                case 'uint32':
                case 'uint':
                    return [
                        dataview.getUint32(at, little_endian),
                        4
                    ];
                case 'float32':
                case 'float':
                    return [
                        dataview.getFloat32(at, little_endian),
                        4
                    ];
                case 'float64':
                case 'double':
                    return [
                        dataview.getFloat64(at, little_endian),
                        8
                    ];
                }
            }
            function binaryReadElement(dataview, at, properties, little_endian) {
                var element = {};
                var result, read = 0;
                for (var i = 0; i < properties.length; i++) {
                    if (properties[i].type === 'list') {
                        var list = [];
                        result = binaryRead(dataview, at + read, properties[i].countType, little_endian);
                        var n = result[0];
                        read += result[1];
                        for (var j = 0; j < n; j++) {
                            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);
                            list.push(result[0]);
                            read += result[1];
                        }
                        element[properties[i].name] = list;
                    } else {
                        result = binaryRead(dataview, at + read, properties[i].type, little_endian);
                        element[properties[i].name] = result[0];
                        read += result[1];
                    }
                }
                return [
                    element,
                    read
                ];
            }
            function parseBinary(data, header) {
                var buffer = {
                    indices: [],
                    vertices: [],
                    normals: [],
                    uvs: [],
                    faceVertexUvs: [],
                    colors: []
                };
                var little_endian = header.format === 'binary_little_endian';
                var body = new DataView(data, header.headerLength);
                var result, loc = 0;
                for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {
                    for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {
                        result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);
                        loc += result[1];
                        var element = result[0];
                        handleElement(buffer, header.elements[currentElement].name, element);
                    }
                }
                return postProcess(buffer);
            }
            var geometry;
            var scope = this;
            if (data instanceof ArrayBuffer) {
                var text = THREE.LoaderUtils.decodeText(new Uint8Array(data));
                var header = parseHeader(text);
                geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);
            } else {
                geometry = parseASCII(data, parseHeader(data));
            }
            return geometry;
        }
    });
    return PLYLoader;
});
define('skylark-threejs-ex/loaders/PRWMLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PRWMLoader = function () {
        var bigEndianPlatform = null;
        function isBigEndianPlatform() {
            if (bigEndianPlatform === null) {
                var buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);
                uint8Array[0] = 170;
                uint8Array[1] = 187;
                bigEndianPlatform = uint16Array[0] === 43707;
            }
            return bigEndianPlatform;
        }
        var InvertedEncodingTypes = [
            null,
            Float32Array,
            null,
            Int8Array,
            Int16Array,
            null,
            Int32Array,
            Uint8Array,
            Uint16Array,
            null,
            Uint32Array
        ];
        var getMethods = {
            Uint16Array: 'getUint16',
            Uint32Array: 'getUint32',
            Int16Array: 'getInt16',
            Int32Array: 'getInt32',
            Float32Array: 'getFloat32',
            Float64Array: 'getFloat64'
        };
        function copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {
            var bytesPerElement = viewType.BYTES_PER_ELEMENT, result;
            if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {
                result = new viewType(sourceArrayBuffer, position, length);
            } else {
                var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian, i = 0;
                result = new viewType(length);
                for (; i < length; i++) {
                    result[i] = readView[getMethod](i * bytesPerElement, littleEndian);
                }
            }
            return result;
        }
        function decodePrwm(buffer) {
            var array = new Uint8Array(buffer), version = array[0], flags = array[1], indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31, valuesNumber = 0, indicesNumber = 0;
            if (bigEndian) {
                valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];
                indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];
            } else {
                valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);
                indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);
            }
            if (version === 0) {
                throw new Error('PRWM decoder: Invalid format version: 0');
            } else if (version !== 1) {
                throw new Error('PRWM decoder: Unsupported format version: ' + version);
            }
            if (!indexedGeometry) {
                if (indicesType !== 0) {
                    throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');
                } else if (indicesNumber !== 0) {
                    throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');
                }
            }
            var pos = 8;
            var attributes = {}, attributeName, char, attributeType, cardinality, encodingType, arrayType, values, indices, i;
            for (i = 0; i < attributesNumber; i++) {
                attributeName = '';
                while (pos < array.length) {
                    char = array[pos];
                    pos++;
                    if (char === 0) {
                        break;
                    } else {
                        attributeName += String.fromCharCode(char);
                    }
                }
                flags = array[pos];
                attributeType = flags >> 7 & 1;
                cardinality = (flags >> 4 & 3) + 1;
                encodingType = flags & 15;
                arrayType = InvertedEncodingTypes[encodingType];
                pos++;
                pos = Math.ceil(pos / 4) * 4;
                values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);
                pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;
                attributes[attributeName] = {
                    type: attributeType,
                    cardinality: cardinality,
                    values: values
                };
            }
            pos = Math.ceil(pos / 4) * 4;
            indices = null;
            if (indexedGeometry) {
                indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);
            }
            return {
                version: version,
                attributes: attributes,
                indices: indices
            };
        }
        function PRWMLoader(manager) {
            THREE.Loader.call(this, manager);
        }
        PRWMLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: PRWMLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new THREE.FileLoader(scope.manager);
                loader.setPath(scope.path);
                loader.setResponseType('arraybuffer');
                url = url.replace(/\*/g, isBigEndianPlatform() ? 'be' : 'le');
                loader.load(url, function (arrayBuffer) {
                    onLoad(scope.parse(arrayBuffer));
                }, onProgress, onError);
            },
            parse: function (arrayBuffer) {
                var data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new THREE.BufferGeometry(), attribute, i;
                for (i = 0; i < attributesKey.length; i++) {
                    attribute = data.attributes[attributesKey[i]];
                    bufferGeometry.setAttribute(attributesKey[i], new THREE.BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));
                }
                if (data.indices !== null) {
                    bufferGeometry.setIndex(new THREE.BufferAttribute(data.indices, 1));
                }
                return bufferGeometry;
            }
        });
        PRWMLoader.isBigEndianPlatform = function () {
            return isBigEndianPlatform();
        };
        return PRWMLoader;
    }();
    return PRWMLoader;
});
define('skylark-threejs-ex/loaders/STLLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var STLLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    STLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: STLLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                try {
                    onLoad(scope.parse(text));
                } catch (exception) {
                    if (onError) {
                        onError(exception);
                    }
                }
            }, onProgress, onError);
        },
        parse: function (data) {
            function isBinary(data) {
                var expect, face_size, n_faces, reader;
                reader = new DataView(data);
                face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;
                n_faces = reader.getUint32(80, true);
                expect = 80 + 32 / 8 + n_faces * face_size;
                if (expect === reader.byteLength) {
                    return true;
                }
                var solid = [
                    115,
                    111,
                    108,
                    105,
                    100
                ];
                for (var off = 0; off < 5; off++) {
                    if (matchDataViewAt(solid, reader, off))
                        return false;
                }
                return true;
            }
            function matchDataViewAt(query, reader, offset) {
                for (var i = 0, il = query.length; i < il; i++) {
                    if (query[i] !== reader.getUint8(offset + i, false))
                        return false;
                }
                return true;
            }
            function parseBinary(data) {
                var reader = new DataView(data);
                var faces = reader.getUint32(80, true);
                var r, g, b, hasColors = false, colors;
                var defaultR, defaultG, defaultB, alpha;
                for (var index = 0; index < 80 - 10; index++) {
                    if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {
                        hasColors = true;
                        colors = new Float32Array(faces * 3 * 3);
                        defaultR = reader.getUint8(index + 6) / 255;
                        defaultG = reader.getUint8(index + 7) / 255;
                        defaultB = reader.getUint8(index + 8) / 255;
                        alpha = reader.getUint8(index + 9) / 255;
                    }
                }
                var dataOffset = 84;
                var faceLength = 12 * 4 + 2;
                var geometry = new THREE.BufferGeometry();
                var vertices = new Float32Array(faces * 3 * 3);
                var normals = new Float32Array(faces * 3 * 3);
                for (var face = 0; face < faces; face++) {
                    var start = dataOffset + face * faceLength;
                    var normalX = reader.getFloat32(start, true);
                    var normalY = reader.getFloat32(start + 4, true);
                    var normalZ = reader.getFloat32(start + 8, true);
                    if (hasColors) {
                        var packedColor = reader.getUint16(start + 48, true);
                        if ((packedColor & 32768) === 0) {
                            r = (packedColor & 31) / 31;
                            g = (packedColor >> 5 & 31) / 31;
                            b = (packedColor >> 10 & 31) / 31;
                        } else {
                            r = defaultR;
                            g = defaultG;
                            b = defaultB;
                        }
                    }
                    for (var i = 1; i <= 3; i++) {
                        var vertexstart = start + i * 12;
                        var componentIdx = face * 3 * 3 + (i - 1) * 3;
                        vertices[componentIdx] = reader.getFloat32(vertexstart, true);
                        vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);
                        vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);
                        normals[componentIdx] = normalX;
                        normals[componentIdx + 1] = normalY;
                        normals[componentIdx + 2] = normalZ;
                        if (hasColors) {
                            colors[componentIdx] = r;
                            colors[componentIdx + 1] = g;
                            colors[componentIdx + 2] = b;
                        }
                    }
                }
                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
                geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
                if (hasColors) {
                    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
                    geometry.hasColors = true;
                    geometry.alpha = alpha;
                }
                return geometry;
            }
            function parseASCII(data) {
                var geometry = new THREE.BufferGeometry();
                var patternSolid = /solid([\s\S]*?)endsolid/g;
                var patternFace = /facet([\s\S]*?)endfacet/g;
                var faceCounter = 0;
                var patternFloat = /[\s]+([+-]?(?:\d*)(?:\.\d*)?(?:[eE][+-]?\d+)?)/.source;
                var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');
                var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');
                var vertices = [];
                var normals = [];
                var normal = new THREE.Vector3();
                var result;
                var groupCount = 0;
                var startVertex = 0;
                var endVertex = 0;
                while ((result = patternSolid.exec(data)) !== null) {
                    startVertex = endVertex;
                    var solid = result[0];
                    while ((result = patternFace.exec(solid)) !== null) {
                        var vertexCountPerFace = 0;
                        var normalCountPerFace = 0;
                        var text = result[0];
                        while ((result = patternNormal.exec(text)) !== null) {
                            normal.x = parseFloat(result[1]);
                            normal.y = parseFloat(result[2]);
                            normal.z = parseFloat(result[3]);
                            normalCountPerFace++;
                        }
                        while ((result = patternVertex.exec(text)) !== null) {
                            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                            normals.push(normal.x, normal.y, normal.z);
                            vertexCountPerFace++;
                            endVertex++;
                        }
                        if (normalCountPerFace !== 1) {
                            console.error("THREE.STLLoader: Something isn't right with the normal of face number " + faceCounter);
                        }
                        if (vertexCountPerFace !== 3) {
                            console.error("THREE.STLLoader: Something isn't right with the vertices of face number " + faceCounter);
                        }
                        faceCounter++;
                    }
                    var start = startVertex;
                    var count = endVertex - startVertex;
                    geometry.addGroup(start, count, groupCount);
                    groupCount++;
                }
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
                return geometry;
            }
            function ensureString(buffer) {
                if (typeof buffer !== 'string') {
                    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer));
                }
                return buffer;
            }
            function ensureBinary(buffer) {
                if (typeof buffer === 'string') {
                    var array_buffer = new Uint8Array(buffer.length);
                    for (var i = 0; i < buffer.length; i++) {
                        array_buffer[i] = buffer.charCodeAt(i) & 255;
                    }
                    return array_buffer.buffer || array_buffer;
                } else {
                    return buffer;
                }
            }
            var binData = ensureBinary(data);
            return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));
        }
    });
    return STLLoader;
});
define('skylark-threejs-ex/loaders/SVGLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SVGLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.defaultDPI = 90;
        this.defaultUnit = 'px';
    };
    SVGLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: SVGLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        parse: function (text) {
            var scope = this;
            function parseNode(node, style) {
                if (node.nodeType !== 1)
                    return;
                var transform = getNodeTransform(node);
                var path = null;
                switch (node.nodeName) {
                case 'svg':
                    break;
                case 'g':
                    style = parseStyle(node, style);
                    break;
                case 'path':
                    style = parseStyle(node, style);
                    if (node.hasAttribute('d'))
                        path = parsePathNode(node);
                    break;
                case 'rect':
                    style = parseStyle(node, style);
                    path = parseRectNode(node);
                    break;
                case 'polygon':
                    style = parseStyle(node, style);
                    path = parsePolygonNode(node);
                    break;
                case 'polyline':
                    style = parseStyle(node, style);
                    path = parsePolylineNode(node);
                    break;
                case 'circle':
                    style = parseStyle(node, style);
                    path = parseCircleNode(node);
                    break;
                case 'ellipse':
                    style = parseStyle(node, style);
                    path = parseEllipseNode(node);
                    break;
                case 'line':
                    style = parseStyle(node, style);
                    path = parseLineNode(node);
                    break;
                default:
                    console.log(node);
                }
                if (path) {
                    if (style.fill !== undefined && style.fill !== 'none') {
                        path.color.setStyle(style.fill);
                    }
                    transformPath(path, currentTransform);
                    paths.push(path);
                    path.userData = {
                        node: node,
                        style: style
                    };
                }
                var nodes = node.childNodes;
                for (var i = 0; i < nodes.length; i++) {
                    parseNode(nodes[i], style);
                }
                if (transform) {
                    transformStack.pop();
                    if (transformStack.length > 0) {
                        currentTransform.copy(transformStack[transformStack.length - 1]);
                    } else {
                        currentTransform.identity();
                    }
                }
            }
            function parsePathNode(node) {
                var path = new THREE.ShapePath();
                var point = new THREE.Vector2();
                var control = new THREE.Vector2();
                var firstPoint = new THREE.Vector2();
                var isFirstPoint = true;
                var doSetFirstPoint = false;
                var d = node.getAttribute('d');
                var commands = d.match(/[a-df-z][^a-df-z]*/ig);
                for (var i = 0, l = commands.length; i < l; i++) {
                    var command = commands[i];
                    var type = command.charAt(0);
                    var data = command.substr(1).trim();
                    if (isFirstPoint === true) {
                        doSetFirstPoint = true;
                        isFirstPoint = false;
                    }
                    switch (type) {
                    case 'M':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x = numbers[j + 0];
                            point.y = numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            if (j === 0) {
                                path.moveTo(point.x, point.y);
                            } else {
                                path.lineTo(point.x, point.y);
                            }
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'H':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.x = numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'V':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.y = numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'L':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x = numbers[j + 0];
                            point.y = numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'C':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {
                            path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);
                            control.x = numbers[j + 2];
                            control.y = numbers[j + 3];
                            point.x = numbers[j + 4];
                            point.y = numbers[j + 5];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'S':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);
                            control.x = numbers[j + 0];
                            control.y = numbers[j + 1];
                            point.x = numbers[j + 2];
                            point.y = numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'Q':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);
                            control.x = numbers[j + 0];
                            control.y = numbers[j + 1];
                            point.x = numbers[j + 2];
                            point.y = numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'T':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            var rx = getReflection(point.x, control.x);
                            var ry = getReflection(point.y, control.y);
                            path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);
                            control.x = rx;
                            control.y = ry;
                            point.x = numbers[j + 0];
                            point.y = numbers[j + 1];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'A':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {
                            var start = point.clone();
                            point.x = numbers[j + 5];
                            point.y = numbers[j + 6];
                            control.x = point.x;
                            control.y = point.y;
                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'm':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x += numbers[j + 0];
                            point.y += numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            if (j === 0) {
                                path.moveTo(point.x, point.y);
                            } else {
                                path.lineTo(point.x, point.y);
                            }
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'h':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.x += numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'v':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j++) {
                            point.y += numbers[j];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'l':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            point.x += numbers[j + 0];
                            point.y += numbers[j + 1];
                            control.x = point.x;
                            control.y = point.y;
                            path.lineTo(point.x, point.y);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'c':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {
                            path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);
                            control.x = point.x + numbers[j + 2];
                            control.y = point.y + numbers[j + 3];
                            point.x += numbers[j + 4];
                            point.y += numbers[j + 5];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 's':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);
                            control.x = point.x + numbers[j + 0];
                            control.y = point.y + numbers[j + 1];
                            point.x += numbers[j + 2];
                            point.y += numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'q':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {
                            path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);
                            control.x = point.x + numbers[j + 0];
                            control.y = point.y + numbers[j + 1];
                            point.x += numbers[j + 2];
                            point.y += numbers[j + 3];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 't':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {
                            var rx = getReflection(point.x, control.x);
                            var ry = getReflection(point.y, control.y);
                            path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);
                            control.x = rx;
                            control.y = ry;
                            point.x = point.x + numbers[j + 0];
                            point.y = point.y + numbers[j + 1];
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'a':
                        var numbers = parseFloats(data);
                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {
                            var start = point.clone();
                            point.x += numbers[j + 5];
                            point.y += numbers[j + 6];
                            control.x = point.x;
                            control.y = point.y;
                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);
                            if (j === 0 && doSetFirstPoint === true)
                                firstPoint.copy(point);
                        }
                        break;
                    case 'Z':
                    case 'z':
                        path.currentPath.autoClose = true;
                        if (path.currentPath.curves.length > 0) {
                            point.copy(firstPoint);
                            path.currentPath.currentPoint.copy(point);
                            isFirstPoint = true;
                        }
                        break;
                    default:
                        console.warn(command);
                    }
                    doSetFirstPoint = false;
                }
                return path;
            }
            function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {
                x_axis_rotation = x_axis_rotation * Math.PI / 180;
                rx = Math.abs(rx);
                ry = Math.abs(ry);
                var dx2 = (start.x - end.x) / 2;
                var dy2 = (start.y - end.y) / 2;
                var x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;
                var y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;
                var rxs = rx * rx;
                var rys = ry * ry;
                var x1ps = x1p * x1p;
                var y1ps = y1p * y1p;
                var cr = x1ps / rxs + y1ps / rys;
                if (cr > 1) {
                    var s = Math.sqrt(cr);
                    rx = s * rx;
                    ry = s * ry;
                    rxs = rx * rx;
                    rys = ry * ry;
                }
                var dq = rxs * y1ps + rys * x1ps;
                var pq = (rxs * rys - dq) / dq;
                var q = Math.sqrt(Math.max(0, pq));
                if (large_arc_flag === sweep_flag)
                    q = -q;
                var cxp = q * rx * y1p / ry;
                var cyp = -q * ry * x1p / rx;
                var cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;
                var cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;
                var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);
                var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);
                path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);
            }
            function svgAngle(ux, uy, vx, vy) {
                var dot = ux * vx + uy * vy;
                var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);
                var ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));
                if (ux * vy - uy * vx < 0)
                    ang = -ang;
                return ang;
            }
            function parseRectNode(node) {
                var x = parseFloatWithUnits(node.getAttribute('x') || 0);
                var y = parseFloatWithUnits(node.getAttribute('y') || 0);
                var rx = parseFloatWithUnits(node.getAttribute('rx') || 0);
                var ry = parseFloatWithUnits(node.getAttribute('ry') || 0);
                var w = parseFloatWithUnits(node.getAttribute('width'));
                var h = parseFloatWithUnits(node.getAttribute('height'));
                var path = new THREE.ShapePath();
                path.moveTo(x + 2 * rx, y);
                path.lineTo(x + w - 2 * rx, y);
                if (rx !== 0 || ry !== 0)
                    path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);
                path.lineTo(x + w, y + h - 2 * ry);
                if (rx !== 0 || ry !== 0)
                    path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);
                path.lineTo(x + 2 * rx, y + h);
                if (rx !== 0 || ry !== 0) {
                    path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);
                }
                path.lineTo(x, y + 2 * ry);
                if (rx !== 0 || ry !== 0) {
                    path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);
                }
                return path;
            }
            function parsePolygonNode(node) {
                function iterator(match, a, b) {
                    var x = parseFloatWithUnits(a);
                    var y = parseFloatWithUnits(b);
                    if (index === 0) {
                        path.moveTo(x, y);
                    } else {
                        path.lineTo(x, y);
                    }
                    index++;
                }
                var regex = /(-?[\d\.?]+)[,|\s](-?[\d\.?]+)/g;
                var path = new THREE.ShapePath();
                var index = 0;
                node.getAttribute('points').replace(regex, iterator);
                path.currentPath.autoClose = true;
                return path;
            }
            function parsePolylineNode(node) {
                function iterator(match, a, b) {
                    var x = parseFloatWithUnits(a);
                    var y = parseFloatWithUnits(b);
                    if (index === 0) {
                        path.moveTo(x, y);
                    } else {
                        path.lineTo(x, y);
                    }
                    index++;
                }
                var regex = /(-?[\d\.?]+)[,|\s](-?[\d\.?]+)/g;
                var path = new THREE.ShapePath();
                var index = 0;
                node.getAttribute('points').replace(regex, iterator);
                path.currentPath.autoClose = false;
                return path;
            }
            function parseCircleNode(node) {
                var x = parseFloatWithUnits(node.getAttribute('cx'));
                var y = parseFloatWithUnits(node.getAttribute('cy'));
                var r = parseFloatWithUnits(node.getAttribute('r'));
                var subpath = new THREE.Path();
                subpath.absarc(x, y, r, 0, Math.PI * 2);
                var path = new THREE.ShapePath();
                path.subPaths.push(subpath);
                return path;
            }
            function parseEllipseNode(node) {
                var x = parseFloatWithUnits(node.getAttribute('cx'));
                var y = parseFloatWithUnits(node.getAttribute('cy'));
                var rx = parseFloatWithUnits(node.getAttribute('rx'));
                var ry = parseFloatWithUnits(node.getAttribute('ry'));
                var subpath = new THREE.Path();
                subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);
                var path = new THREE.ShapePath();
                path.subPaths.push(subpath);
                return path;
            }
            function parseLineNode(node) {
                var x1 = parseFloatWithUnits(node.getAttribute('x1'));
                var y1 = parseFloatWithUnits(node.getAttribute('y1'));
                var x2 = parseFloatWithUnits(node.getAttribute('x2'));
                var y2 = parseFloatWithUnits(node.getAttribute('y2'));
                var path = new THREE.ShapePath();
                path.moveTo(x1, y1);
                path.lineTo(x2, y2);
                path.currentPath.autoClose = false;
                return path;
            }
            function parseStyle(node, style) {
                style = Object.assign({}, style);
                function addStyle(svgName, jsName, adjustFunction) {
                    if (adjustFunction === undefined)
                        adjustFunction = function copy(v) {
                            return v;
                        };
                    if (node.hasAttribute(svgName))
                        style[jsName] = adjustFunction(node.getAttribute(svgName));
                    if (node.style && node.style[svgName] !== '')
                        style[jsName] = adjustFunction(node.style[svgName]);
                }
                function clamp(v) {
                    return Math.max(0, Math.min(1, parseFloatWithUnits(v)));
                }
                function positive(v) {
                    return Math.max(0, parseFloatWithUnits(v));
                }
                addStyle('fill', 'fill');
                addStyle('fill-opacity', 'fillOpacity', clamp);
                addStyle('stroke', 'stroke');
                addStyle('stroke-opacity', 'strokeOpacity', clamp);
                addStyle('stroke-width', 'strokeWidth', positive);
                addStyle('stroke-linejoin', 'strokeLineJoin');
                addStyle('stroke-linecap', 'strokeLineCap');
                addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);
                return style;
            }
            function getReflection(a, b) {
                return a - (b - a);
            }
            function parseFloats(string) {
                var array = string.split(/[\s,]+|(?=\s?[+\-])/);
                for (var i = 0; i < array.length; i++) {
                    var number = array[i];
                    if (number.indexOf('.') !== number.lastIndexOf('.')) {
                        var split = number.split('.');
                        for (var s = 2; s < split.length; s++) {
                            array.splice(i + s - 1, 0, '0.' + split[s]);
                        }
                    }
                    array[i] = parseFloatWithUnits(number);
                }
                return array;
            }
            var units = [
                'mm',
                'cm',
                'in',
                'pt',
                'pc',
                'px'
            ];
            var unitConversion = {
                'mm': {
                    'mm': 1,
                    'cm': 0.1,
                    'in': 1 / 25.4,
                    'pt': 72 / 25.4,
                    'pc': 6 / 25.4,
                    'px': -1
                },
                'cm': {
                    'mm': 10,
                    'cm': 1,
                    'in': 1 / 2.54,
                    'pt': 72 / 2.54,
                    'pc': 6 / 2.54,
                    'px': -1
                },
                'in': {
                    'mm': 25.4,
                    'cm': 2.54,
                    'in': 1,
                    'pt': 72,
                    'pc': 6,
                    'px': -1
                },
                'pt': {
                    'mm': 25.4 / 72,
                    'cm': 2.54 / 72,
                    'in': 1 / 72,
                    'pt': 1,
                    'pc': 6 / 72,
                    'px': -1
                },
                'pc': {
                    'mm': 25.4 / 6,
                    'cm': 2.54 / 6,
                    'in': 1 / 6,
                    'pt': 72 / 6,
                    'pc': 1,
                    'px': -1
                },
                'px': { 'px': 1 }
            };
            function parseFloatWithUnits(string) {
                var theUnit = 'px';
                if (typeof string === 'string' || string instanceof String) {
                    for (var i = 0, n = units.length; i < n; i++) {
                        var u = units[i];
                        if (string.endsWith(u)) {
                            theUnit = u;
                            string = string.substring(0, string.length - u.length);
                            break;
                        }
                    }
                }
                var scale = undefined;
                if (theUnit === 'px' && scope.defaultUnit !== 'px') {
                    scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;
                } else {
                    scale = unitConversion[theUnit][scope.defaultUnit];
                    if (scale < 0) {
                        scale = unitConversion[theUnit]['in'] * scope.defaultDPI;
                    }
                }
                return scale * parseFloat(string);
            }
            function getNodeTransform(node) {
                if (!node.hasAttribute('transform')) {
                    return null;
                }
                var transform = parseNodeTransform(node);
                if (transformStack.length > 0) {
                    transform.premultiply(transformStack[transformStack.length - 1]);
                }
                currentTransform.copy(transform);
                transformStack.push(transform);
                return transform;
            }
            function parseNodeTransform(node) {
                var transform = new THREE.Matrix3();
                var currentTransform = tempTransform0;
                var transformsTexts = node.getAttribute('transform').split(')');
                for (var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {
                    var transformText = transformsTexts[tIndex].trim();
                    if (transformText === '')
                        continue;
                    var openParPos = transformText.indexOf('(');
                    var closeParPos = transformText.length;
                    if (openParPos > 0 && openParPos < closeParPos) {
                        var transformType = transformText.substr(0, openParPos);
                        var array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));
                        currentTransform.identity();
                        switch (transformType) {
                        case 'translate':
                            if (array.length >= 1) {
                                var tx = array[0];
                                var ty = tx;
                                if (array.length >= 2) {
                                    ty = array[1];
                                }
                                currentTransform.translate(tx, ty);
                            }
                            break;
                        case 'rotate':
                            if (array.length >= 1) {
                                var angle = 0;
                                var cx = 0;
                                var cy = 0;
                                angle = -array[0] * Math.PI / 180;
                                if (array.length >= 3) {
                                    cx = array[1];
                                    cy = array[2];
                                }
                                tempTransform1.identity().translate(-cx, -cy);
                                tempTransform2.identity().rotate(angle);
                                tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);
                                tempTransform1.identity().translate(cx, cy);
                                currentTransform.multiplyMatrices(tempTransform1, tempTransform3);
                            }
                            break;
                        case 'scale':
                            if (array.length >= 1) {
                                var scaleX = array[0];
                                var scaleY = scaleX;
                                if (array.length >= 2) {
                                    scaleY = array[1];
                                }
                                currentTransform.scale(scaleX, scaleY);
                            }
                            break;
                        case 'skewX':
                            if (array.length === 1) {
                                currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);
                            }
                            break;
                        case 'skewY':
                            if (array.length === 1) {
                                currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);
                            }
                            break;
                        case 'matrix':
                            if (array.length === 6) {
                                currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);
                            }
                            break;
                        }
                    }
                    transform.premultiply(currentTransform);
                }
                return transform;
            }
            function transformPath(path, m) {
                function transfVec2(v2) {
                    tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);
                    v2.set(tempV3.x, tempV3.y);
                }
                var isRotated = isTransformRotated(m);
                var subPaths = path.subPaths;
                for (var i = 0, n = subPaths.length; i < n; i++) {
                    var subPath = subPaths[i];
                    var curves = subPath.curves;
                    for (var j = 0; j < curves.length; j++) {
                        var curve = curves[j];
                        if (curve.isLineCurve) {
                            transfVec2(curve.v1);
                            transfVec2(curve.v2);
                        } else if (curve.isCubicBezierCurve) {
                            transfVec2(curve.v0);
                            transfVec2(curve.v1);
                            transfVec2(curve.v2);
                            transfVec2(curve.v3);
                        } else if (curve.isQuadraticBezierCurve) {
                            transfVec2(curve.v0);
                            transfVec2(curve.v1);
                            transfVec2(curve.v2);
                        } else if (curve.isEllipseCurve) {
                            if (isRotated) {
                                console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');
                            }
                            tempV2.set(curve.aX, curve.aY);
                            transfVec2(tempV2);
                            curve.aX = tempV2.x;
                            curve.aY = tempV2.y;
                            curve.xRadius *= getTransformScaleX(m);
                            curve.yRadius *= getTransformScaleY(m);
                        }
                    }
                }
            }
            function isTransformRotated(m) {
                return m.elements[1] !== 0 || m.elements[3] !== 0;
            }
            function getTransformScaleX(m) {
                var te = m.elements;
                return Math.sqrt(te[0] * te[0] + te[1] * te[1]);
            }
            function getTransformScaleY(m) {
                var te = m.elements;
                return Math.sqrt(te[3] * te[3] + te[4] * te[4]);
            }
            var paths = [];
            var transformStack = [];
            var tempTransform0 = new THREE.Matrix3();
            var tempTransform1 = new THREE.Matrix3();
            var tempTransform2 = new THREE.Matrix3();
            var tempTransform3 = new THREE.Matrix3();
            var tempV2 = new THREE.Vector2();
            var tempV3 = new THREE.Vector3();
            var currentTransform = new THREE.Matrix3();
            var xml = new DOMParser().parseFromString(text, 'image/svg+xml');
            parseNode(xml.documentElement, {
                fill: '#000',
                fillOpacity: 1,
                strokeOpacity: 1,
                strokeWidth: 1,
                strokeLineJoin: 'miter',
                strokeLineCap: 'butt',
                strokeMiterLimit: 4
            });
            var data = {
                paths: paths,
                xml: xml.documentElement
            };
            return data;
        }
    });
    SVGLoader.getStrokeStyle = function (width, color, lineJoin, lineCap, miterLimit) {
        width = width !== undefined ? width : 1;
        color = color !== undefined ? color : '#000';
        lineJoin = lineJoin !== undefined ? lineJoin : 'miter';
        lineCap = lineCap !== undefined ? lineCap : 'butt';
        miterLimit = miterLimit !== undefined ? miterLimit : 4;
        return {
            strokeColor: color,
            strokeWidth: width,
            strokeLineJoin: lineJoin,
            strokeLineCap: lineCap,
            strokeMiterLimit: miterLimit
        };
    };
    SVGLoader.pointsToStroke = function (points, style, arcDivisions, minDistance) {
        var vertices = [];
        var normals = [];
        var uvs = [];
        if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {
            return null;
        }
        var geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
        geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
        return geometry;
    };
    SVGLoader.pointsToStrokeWithBuffers = function () {
        var tempV2_1 = new THREE.Vector2();
        var tempV2_2 = new THREE.Vector2();
        var tempV2_3 = new THREE.Vector2();
        var tempV2_4 = new THREE.Vector2();
        var tempV2_5 = new THREE.Vector2();
        var tempV2_6 = new THREE.Vector2();
        var tempV2_7 = new THREE.Vector2();
        var lastPointL = new THREE.Vector2();
        var lastPointR = new THREE.Vector2();
        var point0L = new THREE.Vector2();
        var point0R = new THREE.Vector2();
        var currentPointL = new THREE.Vector2();
        var currentPointR = new THREE.Vector2();
        var nextPointL = new THREE.Vector2();
        var nextPointR = new THREE.Vector2();
        var innerPoint = new THREE.Vector2();
        var outerPoint = new THREE.Vector2();
        return function (points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {
            arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;
            minDistance = minDistance !== undefined ? minDistance : 0.001;
            vertexOffset = vertexOffset !== undefined ? vertexOffset : 0;
            points = removeDuplicatedPoints(points);
            var numPoints = points.length;
            if (numPoints < 2)
                return 0;
            var isClosed = points[0].equals(points[numPoints - 1]);
            var currentPoint;
            var previousPoint = points[0];
            var nextPoint;
            var strokeWidth2 = style.strokeWidth / 2;
            var deltaU = 1 / (numPoints - 1);
            var u0 = 0;
            var innerSideModified;
            var joinIsOnLeftSide;
            var isMiter;
            var initialJoinIsOnLeftSide = false;
            var numVertices = 0;
            var currentCoordinate = vertexOffset * 3;
            var currentCoordinateUV = vertexOffset * 2;
            getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);
            lastPointL.copy(points[0]).sub(tempV2_1);
            lastPointR.copy(points[0]).add(tempV2_1);
            point0L.copy(lastPointL);
            point0R.copy(lastPointR);
            for (var iPoint = 1; iPoint < numPoints; iPoint++) {
                currentPoint = points[iPoint];
                if (iPoint === numPoints - 1) {
                    if (isClosed) {
                        nextPoint = points[1];
                    } else
                        nextPoint = undefined;
                } else {
                    nextPoint = points[iPoint + 1];
                }
                var normal1 = tempV2_1;
                getNormal(previousPoint, currentPoint, normal1);
                tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);
                currentPointL.copy(currentPoint).sub(tempV2_3);
                currentPointR.copy(currentPoint).add(tempV2_3);
                var u1 = u0 + deltaU;
                innerSideModified = false;
                if (nextPoint !== undefined) {
                    getNormal(currentPoint, nextPoint, tempV2_2);
                    tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);
                    nextPointL.copy(currentPoint).sub(tempV2_3);
                    nextPointR.copy(currentPoint).add(tempV2_3);
                    joinIsOnLeftSide = true;
                    tempV2_3.subVectors(nextPoint, previousPoint);
                    if (normal1.dot(tempV2_3) < 0) {
                        joinIsOnLeftSide = false;
                    }
                    if (iPoint === 1)
                        initialJoinIsOnLeftSide = joinIsOnLeftSide;
                    tempV2_3.subVectors(nextPoint, currentPoint);
                    tempV2_3.normalize();
                    var dot = Math.abs(normal1.dot(tempV2_3));
                    if (dot !== 0) {
                        var miterSide = strokeWidth2 / dot;
                        tempV2_3.multiplyScalar(-miterSide);
                        tempV2_4.subVectors(currentPoint, previousPoint);
                        tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);
                        innerPoint.copy(tempV2_5).negate();
                        var miterLength2 = tempV2_5.length();
                        var segmentLengthPrev = tempV2_4.length();
                        tempV2_4.divideScalar(segmentLengthPrev);
                        tempV2_6.subVectors(nextPoint, currentPoint);
                        var segmentLengthNext = tempV2_6.length();
                        tempV2_6.divideScalar(segmentLengthNext);
                        if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {
                            innerSideModified = true;
                        }
                        outerPoint.copy(tempV2_5).add(currentPoint);
                        innerPoint.add(currentPoint);
                        isMiter = false;
                        if (innerSideModified) {
                            if (joinIsOnLeftSide) {
                                nextPointR.copy(innerPoint);
                                currentPointR.copy(innerPoint);
                            } else {
                                nextPointL.copy(innerPoint);
                                currentPointL.copy(innerPoint);
                            }
                        } else {
                            makeSegmentTriangles();
                        }
                        switch (style.strokeLineJoin) {
                        case 'bevel':
                            makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);
                            break;
                        case 'round':
                            createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);
                            if (joinIsOnLeftSide) {
                                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);
                            } else {
                                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);
                            }
                            break;
                        case 'miter':
                        case 'miter-clip':
                        default:
                            var miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;
                            if (miterFraction < 1) {
                                if (style.strokeLineJoin !== 'miter-clip') {
                                    makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);
                                    break;
                                } else {
                                    createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);
                                    if (joinIsOnLeftSide) {
                                        tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);
                                        tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);
                                        addVertex(currentPointL, u1, 0);
                                        addVertex(tempV2_6, u1, 0);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_6, u1, 0);
                                        addVertex(tempV2_7, u1, 0);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_7, u1, 0);
                                        addVertex(nextPointL, u1, 0);
                                    } else {
                                        tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);
                                        tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);
                                        addVertex(currentPointR, u1, 1);
                                        addVertex(tempV2_6, u1, 1);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_6, u1, 1);
                                        addVertex(tempV2_7, u1, 1);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(tempV2_7, u1, 1);
                                        addVertex(nextPointR, u1, 1);
                                    }
                                }
                            } else {
                                if (innerSideModified) {
                                    if (joinIsOnLeftSide) {
                                        addVertex(lastPointR, u0, 1);
                                        addVertex(lastPointL, u0, 0);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(lastPointR, u0, 1);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(innerPoint, u1, 1);
                                    } else {
                                        addVertex(lastPointR, u0, 1);
                                        addVertex(lastPointL, u0, 0);
                                        addVertex(outerPoint, u1, 1);
                                        addVertex(lastPointL, u0, 0);
                                        addVertex(innerPoint, u1, 0);
                                        addVertex(outerPoint, u1, 1);
                                    }
                                    if (joinIsOnLeftSide) {
                                        nextPointL.copy(outerPoint);
                                    } else {
                                        nextPointR.copy(outerPoint);
                                    }
                                } else {
                                    if (joinIsOnLeftSide) {
                                        addVertex(currentPointL, u1, 0);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(outerPoint, u1, 0);
                                        addVertex(nextPointL, u1, 0);
                                    } else {
                                        addVertex(currentPointR, u1, 1);
                                        addVertex(outerPoint, u1, 1);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(currentPoint, u1, 0.5);
                                        addVertex(outerPoint, u1, 1);
                                        addVertex(nextPointR, u1, 1);
                                    }
                                }
                                isMiter = true;
                            }
                            break;
                        }
                    } else {
                        makeSegmentTriangles();
                    }
                } else {
                    makeSegmentTriangles();
                }
                if (!isClosed && iPoint === numPoints - 1) {
                    addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);
                }
                u0 = u1;
                previousPoint = currentPoint;
                lastPointL.copy(nextPointL);
                lastPointR.copy(nextPointR);
            }
            if (!isClosed) {
                addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);
            } else if (innerSideModified && vertices) {
                var lastOuter = outerPoint;
                var lastInner = innerPoint;
                if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {
                    lastOuter = innerPoint;
                    lastInner = outerPoint;
                }
                if (joinIsOnLeftSide) {
                    if (isMiter || initialJoinIsOnLeftSide) {
                        lastInner.toArray(vertices, 0 * 3);
                        lastInner.toArray(vertices, 3 * 3);
                        if (isMiter) {
                            lastOuter.toArray(vertices, 1 * 3);
                        }
                    }
                } else {
                    if (isMiter || !initialJoinIsOnLeftSide) {
                        lastInner.toArray(vertices, 1 * 3);
                        lastInner.toArray(vertices, 3 * 3);
                        if (isMiter) {
                            lastOuter.toArray(vertices, 0 * 3);
                        }
                    }
                }
            }
            return numVertices;
            function getNormal(p1, p2, result) {
                result.subVectors(p2, p1);
                return result.set(-result.y, result.x).normalize();
            }
            function addVertex(position, u, v) {
                if (vertices) {
                    vertices[currentCoordinate] = position.x;
                    vertices[currentCoordinate + 1] = position.y;
                    vertices[currentCoordinate + 2] = 0;
                    if (normals) {
                        normals[currentCoordinate] = 0;
                        normals[currentCoordinate + 1] = 0;
                        normals[currentCoordinate + 2] = 1;
                    }
                    currentCoordinate += 3;
                    if (uvs) {
                        uvs[currentCoordinateUV] = u;
                        uvs[currentCoordinateUV + 1] = v;
                        currentCoordinateUV += 2;
                    }
                }
                numVertices += 3;
            }
            function makeCircularSector(center, p1, p2, u, v) {
                tempV2_1.copy(p1).sub(center).normalize();
                tempV2_2.copy(p2).sub(center).normalize();
                var angle = Math.PI;
                var dot = tempV2_1.dot(tempV2_2);
                if (Math.abs(dot) < 1)
                    angle = Math.abs(Math.acos(dot));
                angle /= arcDivisions;
                tempV2_3.copy(p1);
                for (var i = 0, il = arcDivisions - 1; i < il; i++) {
                    tempV2_4.copy(tempV2_3).rotateAround(center, angle);
                    addVertex(tempV2_3, u, v);
                    addVertex(tempV2_4, u, v);
                    addVertex(center, u, 0.5);
                    tempV2_3.copy(tempV2_4);
                }
                addVertex(tempV2_4, u, v);
                addVertex(p2, u, v);
                addVertex(center, u, 0.5);
            }
            function makeSegmentTriangles() {
                addVertex(lastPointR, u0, 1);
                addVertex(lastPointL, u0, 0);
                addVertex(currentPointL, u1, 0);
                addVertex(lastPointR, u0, 1);
                addVertex(currentPointL, u1, 1);
                addVertex(currentPointR, u1, 0);
            }
            function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {
                if (innerSideModified) {
                    if (joinIsOnLeftSide) {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointL, u1, 0);
                        addVertex(lastPointR, u0, 1);
                        addVertex(currentPointL, u1, 0);
                        addVertex(innerPoint, u1, 1);
                        addVertex(currentPointL, u, 0);
                        addVertex(nextPointL, u, 0);
                        addVertex(innerPoint, u, 0.5);
                    } else {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(innerPoint, u1, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(currentPointR, u, 1);
                        addVertex(nextPointR, u, 0);
                        addVertex(innerPoint, u, 0.5);
                    }
                } else {
                    if (joinIsOnLeftSide) {
                        addVertex(currentPointL, u, 0);
                        addVertex(nextPointL, u, 0);
                        addVertex(currentPoint, u, 0.5);
                    } else {
                        addVertex(currentPointR, u, 1);
                        addVertex(nextPointR, u, 0);
                        addVertex(currentPoint, u, 0.5);
                    }
                }
            }
            function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {
                if (innerSideModified) {
                    if (joinIsOnLeftSide) {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointL, u1, 0);
                        addVertex(lastPointR, u0, 1);
                        addVertex(currentPointL, u1, 0);
                        addVertex(innerPoint, u1, 1);
                        addVertex(currentPointL, u0, 0);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(innerPoint, u1, 1);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(nextPointL, u0, 0);
                        addVertex(innerPoint, u1, 1);
                    } else {
                        addVertex(lastPointR, u0, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(lastPointL, u0, 0);
                        addVertex(innerPoint, u1, 0);
                        addVertex(currentPointR, u1, 1);
                        addVertex(currentPointR, u0, 1);
                        addVertex(innerPoint, u1, 0);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(currentPoint, u1, 0.5);
                        addVertex(innerPoint, u1, 0);
                        addVertex(nextPointR, u0, 1);
                    }
                }
            }
            function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {
                switch (style.strokeLineCap) {
                case 'round':
                    if (start) {
                        makeCircularSector(center, p2, p1, u, 0.5);
                    } else {
                        makeCircularSector(center, p1, p2, u, 0.5);
                    }
                    break;
                case 'square':
                    if (start) {
                        tempV2_1.subVectors(p1, center);
                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);
                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);
                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);
                        if (joinIsOnLeftSide) {
                            tempV2_3.toArray(vertices, 1 * 3);
                            tempV2_4.toArray(vertices, 0 * 3);
                            tempV2_4.toArray(vertices, 3 * 3);
                        } else {
                            tempV2_3.toArray(vertices, 1 * 3);
                            tempV2_3.toArray(vertices, 3 * 3);
                            tempV2_4.toArray(vertices, 0 * 3);
                        }
                    } else {
                        tempV2_1.subVectors(p2, center);
                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);
                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);
                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);
                        var vl = vertices.length;
                        if (joinIsOnLeftSide) {
                            tempV2_3.toArray(vertices, vl - 1 * 3);
                            tempV2_4.toArray(vertices, vl - 2 * 3);
                            tempV2_4.toArray(vertices, vl - 4 * 3);
                        } else {
                            tempV2_3.toArray(vertices, vl - 2 * 3);
                            tempV2_4.toArray(vertices, vl - 1 * 3);
                            tempV2_4.toArray(vertices, vl - 4 * 3);
                        }
                    }
                    break;
                case 'butt':
                default:
                    break;
                }
            }
            function removeDuplicatedPoints(points) {
                var dupPoints = false;
                for (var i = 1, n = points.length - 1; i < n; i++) {
                    if (points[i].distanceTo(points[i + 1]) < minDistance) {
                        dupPoints = true;
                        break;
                    }
                }
                if (!dupPoints)
                    return points;
                var newPoints = [];
                newPoints.push(points[0]);
                for (var i = 1, n = points.length - 1; i < n; i++) {
                    if (points[i].distanceTo(points[i + 1]) >= minDistance) {
                        newPoints.push(points[i]);
                    }
                }
                newPoints.push(points[points.length - 1]);
                return newPoints;
            }
        };
    }();
    return SVGLoader;
});
define('skylark-threejs-ex/loaders/TDSLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var TDSLoader = function (manager) {
        THREE.Loader.call(this, manager);
        this.debug = false;
        this.group = null;
        this.position = 0;
        this.materials = [];
        this.meshes = [];
    };
    TDSLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: TDSLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
            var loader = new THREE.FileLoader(this.manager);
            loader.setPath(this.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (data) {
                onLoad(scope.parse(data, path));
            }, onProgress, onError);
        },
        parse: function (arraybuffer, path) {
            this.group = new THREE.Group();
            this.position = 0;
            this.materials = [];
            this.meshes = [];
            this.readFile(arraybuffer, path);
            for (var i = 0; i < this.meshes.length; i++) {
                this.group.add(this.meshes[i]);
            }
            return this.group;
        },
        readFile: function (arraybuffer, path) {
            var data = new DataView(arraybuffer);
            var chunk = this.readChunk(data);
            if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {
                var next = this.nextChunk(data, chunk);
                while (next !== 0) {
                    if (next === M3D_VERSION) {
                        var version = this.readDWord(data);
                        this.debugMessage('3DS file version: ' + version);
                    } else if (next === MDATA) {
                        this.resetPosition(data);
                        this.readMeshData(data, path);
                    } else {
                        this.debugMessage('Unknown main chunk: ' + next.toString(16));
                    }
                    next = this.nextChunk(data, chunk);
                }
            }
            this.debugMessage('Parsed ' + this.meshes.length + ' meshes');
        },
        readMeshData: function (data, path) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            while (next !== 0) {
                if (next === MESH_VERSION) {
                    var version = +this.readDWord(data);
                    this.debugMessage('Mesh Version: ' + version);
                } else if (next === MASTER_SCALE) {
                    var scale = this.readFloat(data);
                    this.debugMessage('Master scale: ' + scale);
                    this.group.scale.set(scale, scale, scale);
                } else if (next === NAMED_OBJECT) {
                    this.debugMessage('Named Object');
                    this.resetPosition(data);
                    this.readNamedObject(data);
                } else if (next === MAT_ENTRY) {
                    this.debugMessage('Material');
                    this.resetPosition(data);
                    this.readMaterialEntry(data, path);
                } else {
                    this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
        },
        readNamedObject: function (data) {
            var chunk = this.readChunk(data);
            var name = this.readString(data, 64);
            chunk.cur = this.position;
            var next = this.nextChunk(data, chunk);
            while (next !== 0) {
                if (next === N_TRI_OBJECT) {
                    this.resetPosition(data);
                    var mesh = this.readMesh(data);
                    mesh.name = name;
                    this.meshes.push(mesh);
                } else {
                    this.debugMessage('Unknown named object chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
        },
        readMaterialEntry: function (data, path) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            var material = new THREE.MeshPhongMaterial();
            while (next !== 0) {
                if (next === MAT_NAME) {
                    material.name = this.readString(data, 64);
                    this.debugMessage('   Name: ' + material.name);
                } else if (next === MAT_WIRE) {
                    this.debugMessage('   Wireframe');
                    material.wireframe = true;
                } else if (next === MAT_WIRE_SIZE) {
                    var value = this.readByte(data);
                    material.wireframeLinewidth = value;
                    this.debugMessage('   Wireframe Thickness: ' + value);
                } else if (next === MAT_TWO_SIDE) {
                    material.side = THREE.DoubleSide;
                    this.debugMessage('   DoubleSided');
                } else if (next === MAT_ADDITIVE) {
                    this.debugMessage('   Additive Blending');
                    material.blending = THREE.AdditiveBlending;
                } else if (next === MAT_DIFFUSE) {
                    this.debugMessage('   Diffuse Color');
                    material.color = this.readColor(data);
                } else if (next === MAT_SPECULAR) {
                    this.debugMessage('   Specular Color');
                    material.specular = this.readColor(data);
                } else if (next === MAT_AMBIENT) {
                    this.debugMessage('   Ambient color');
                    material.color = this.readColor(data);
                } else if (next === MAT_SHININESS) {
                    var shininess = this.readWord(data);
                    material.shininess = shininess;
                    this.debugMessage('   Shininess : ' + shininess);
                } else if (next === MAT_TRANSPARENCY) {
                    var opacity = this.readWord(data);
                    material.opacity = opacity * 0.01;
                    this.debugMessage('  Opacity : ' + opacity);
                    material.transparent = opacity < 100 ? true : false;
                } else if (next === MAT_TEXMAP) {
                    this.debugMessage('   ColorMap');
                    this.resetPosition(data);
                    material.map = this.readMap(data, path);
                } else if (next === MAT_BUMPMAP) {
                    this.debugMessage('   BumpMap');
                    this.resetPosition(data);
                    material.bumpMap = this.readMap(data, path);
                } else if (next === MAT_OPACMAP) {
                    this.debugMessage('   OpacityMap');
                    this.resetPosition(data);
                    material.alphaMap = this.readMap(data, path);
                } else if (next === MAT_SPECMAP) {
                    this.debugMessage('   SpecularMap');
                    this.resetPosition(data);
                    material.specularMap = this.readMap(data, path);
                } else {
                    this.debugMessage('   Unknown material chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
            this.materials[material.name] = material;
        },
        readMesh: function (data) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            var geometry = new THREE.BufferGeometry();
            var uvs = [];
            var material = new THREE.MeshPhongMaterial();
            var mesh = new THREE.Mesh(geometry, material);
            mesh.name = 'mesh';
            while (next !== 0) {
                if (next === POINT_ARRAY) {
                    var points = this.readWord(data);
                    this.debugMessage('   Vertex: ' + points);
                    var vertices = [];
                    for (var i = 0; i < points; i++) {
                        vertices.push(this.readFloat(data));
                        vertices.push(this.readFloat(data));
                        vertices.push(this.readFloat(data));
                    }
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
                } else if (next === FACE_ARRAY) {
                    this.resetPosition(data);
                    this.readFaceArray(data, mesh);
                } else if (next === TEX_VERTS) {
                    var texels = this.readWord(data);
                    this.debugMessage('   UV: ' + texels);
                    var uvs = [];
                    for (var i = 0; i < texels; i++) {
                        uvs.push(this.readFloat(data));
                        uvs.push(this.readFloat(data));
                    }
                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
                } else if (next === MESH_MATRIX) {
                    this.debugMessage('   Tranformation Matrix (TODO)');
                    var values = [];
                    for (var i = 0; i < 12; i++) {
                        values[i] = this.readFloat(data);
                    }
                    var matrix = new THREE.Matrix4();
                    matrix.elements[0] = values[0];
                    matrix.elements[1] = values[6];
                    matrix.elements[2] = values[3];
                    matrix.elements[3] = values[9];
                    matrix.elements[4] = values[2];
                    matrix.elements[5] = values[8];
                    matrix.elements[6] = values[5];
                    matrix.elements[7] = values[11];
                    matrix.elements[8] = values[1];
                    matrix.elements[9] = values[7];
                    matrix.elements[10] = values[4];
                    matrix.elements[11] = values[10];
                    matrix.elements[12] = 0;
                    matrix.elements[13] = 0;
                    matrix.elements[14] = 0;
                    matrix.elements[15] = 1;
                    matrix.transpose();
                    var inverse = new THREE.Matrix4();
                    inverse.getInverse(matrix);
                    geometry.applyMatrix4(inverse);
                    matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);
                } else {
                    this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
            geometry.computeVertexNormals();
            return mesh;
        },
        readFaceArray: function (data, mesh) {
            var chunk = this.readChunk(data);
            var faces = this.readWord(data);
            this.debugMessage('   Faces: ' + faces);
            var index = [];
            for (var i = 0; i < faces; ++i) {
                index.push(this.readWord(data), this.readWord(data), this.readWord(data));
                this.readWord(data);
            }
            mesh.geometry.setIndex(index);
            while (this.position < chunk.end) {
                var chunk = this.readChunk(data);
                if (chunk.id === MSH_MAT_GROUP) {
                    this.debugMessage('      Material Group');
                    this.resetPosition(data);
                    var group = this.readMaterialGroup(data);
                    var material = this.materials[group.name];
                    if (material !== undefined) {
                        mesh.material = material;
                        if (material.name === '') {
                            material.name = mesh.name;
                        }
                    }
                } else {
                    this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));
                }
                this.endChunk(chunk);
            }
            this.endChunk(chunk);
        },
        readMap: function (data, path) {
            var chunk = this.readChunk(data);
            var next = this.nextChunk(data, chunk);
            var texture = {};
            var loader = new THREE.TextureLoader(this.manager);
            loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
            while (next !== 0) {
                if (next === MAT_MAPNAME) {
                    var name = this.readString(data, 128);
                    texture = loader.load(name);
                    this.debugMessage('      File: ' + path + name);
                } else if (next === MAT_MAP_UOFFSET) {
                    texture.offset.x = this.readFloat(data);
                    this.debugMessage('      OffsetX: ' + texture.offset.x);
                } else if (next === MAT_MAP_VOFFSET) {
                    texture.offset.y = this.readFloat(data);
                    this.debugMessage('      OffsetY: ' + texture.offset.y);
                } else if (next === MAT_MAP_USCALE) {
                    texture.repeat.x = this.readFloat(data);
                    this.debugMessage('      RepeatX: ' + texture.repeat.x);
                } else if (next === MAT_MAP_VSCALE) {
                    texture.repeat.y = this.readFloat(data);
                    this.debugMessage('      RepeatY: ' + texture.repeat.y);
                } else {
                    this.debugMessage('      Unknown map chunk: ' + next.toString(16));
                }
                next = this.nextChunk(data, chunk);
            }
            this.endChunk(chunk);
            return texture;
        },
        readMaterialGroup: function (data) {
            this.readChunk(data);
            var name = this.readString(data, 64);
            var numFaces = this.readWord(data);
            this.debugMessage('         Name: ' + name);
            this.debugMessage('         Faces: ' + numFaces);
            var index = [];
            for (var i = 0; i < numFaces; ++i) {
                index.push(this.readWord(data));
            }
            return {
                name: name,
                index: index
            };
        },
        readColor: function (data) {
            var chunk = this.readChunk(data);
            var color = new THREE.Color();
            if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {
                var r = this.readByte(data);
                var g = this.readByte(data);
                var b = this.readByte(data);
                color.setRGB(r / 255, g / 255, b / 255);
                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);
            } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {
                var r = this.readFloat(data);
                var g = this.readFloat(data);
                var b = this.readFloat(data);
                color.setRGB(r, g, b);
                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);
            } else {
                this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));
            }
            this.endChunk(chunk);
            return color;
        },
        readChunk: function (data) {
            var chunk = {};
            chunk.cur = this.position;
            chunk.id = this.readWord(data);
            chunk.size = this.readDWord(data);
            chunk.end = chunk.cur + chunk.size;
            chunk.cur += 6;
            return chunk;
        },
        endChunk: function (chunk) {
            this.position = chunk.end;
        },
        nextChunk: function (data, chunk) {
            if (chunk.cur >= chunk.end) {
                return 0;
            }
            this.position = chunk.cur;
            try {
                var next = this.readChunk(data);
                chunk.cur += next.size;
                return next.id;
            } catch (e) {
                this.debugMessage('Unable to read chunk at ' + this.position);
                return 0;
            }
        },
        resetPosition: function () {
            this.position -= 6;
        },
        readByte: function (data) {
            var v = data.getUint8(this.position, true);
            this.position += 1;
            return v;
        },
        readFloat: function (data) {
            try {
                var v = data.getFloat32(this.position, true);
                this.position += 4;
                return v;
            } catch (e) {
                this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);
            }
        },
        readInt: function (data) {
            var v = data.getInt32(this.position, true);
            this.position += 4;
            return v;
        },
        readShort: function (data) {
            var v = data.getInt16(this.position, true);
            this.position += 2;
            return v;
        },
        readDWord: function (data) {
            var v = data.getUint32(this.position, true);
            this.position += 4;
            return v;
        },
        readWord: function (data) {
            var v = data.getUint16(this.position, true);
            this.position += 2;
            return v;
        },
        readString: function (data, maxLength) {
            var s = '';
            for (var i = 0; i < maxLength; i++) {
                var c = this.readByte(data);
                if (!c) {
                    break;
                }
                s += String.fromCharCode(c);
            }
            return s;
        },
        debugMessage: function (message) {
            if (this.debug) {
                console.log(message);
            }
        }
    });
    var M3DMAGIC = 19789;
    var MLIBMAGIC = 15786;
    var CMAGIC = 49725;
    var M3D_VERSION = 2;
    var COLOR_F = 16;
    var COLOR_24 = 17;
    var LIN_COLOR_24 = 18;
    var LIN_COLOR_F = 19;
    var MDATA = 15677;
    var MESH_VERSION = 15678;
    var MASTER_SCALE = 256;
    var MAT_ENTRY = 45055;
    var MAT_NAME = 40960;
    var MAT_AMBIENT = 40976;
    var MAT_DIFFUSE = 40992;
    var MAT_SPECULAR = 41008;
    var MAT_SHININESS = 41024;
    var MAT_TRANSPARENCY = 41040;
    var MAT_TWO_SIDE = 41089;
    var MAT_ADDITIVE = 41091;
    var MAT_WIRE = 41093;
    var MAT_WIRE_SIZE = 41095;
    var MAT_TEXMAP = 41472;
    var MAT_OPACMAP = 41488;
    var MAT_BUMPMAP = 41520;
    var MAT_SPECMAP = 41476;
    var MAT_MAPNAME = 41728;
    var MAT_MAP_USCALE = 41812;
    var MAT_MAP_VSCALE = 41814;
    var MAT_MAP_UOFFSET = 41816;
    var MAT_MAP_VOFFSET = 41818;
    var NAMED_OBJECT = 16384;
    var N_TRI_OBJECT = 16640;
    var POINT_ARRAY = 16656;
    var FACE_ARRAY = 16672;
    var MSH_MAT_GROUP = 16688;
    var TEX_VERTS = 16704;
    var MESH_MATRIX = 16736;

    return TDSLoader;
});
define('skylark-threejs-ex/loaders/VRMLLoader',[
    "skylark-threejs",
//    '../libs/chevrotain.module.min'
], function (THREE, chevrotain) {
    'use strict';
    var VRMLLoader = function () {
        if (typeof chevrotain === 'undefined') {
            throw Error('THREE.VRMLLoader: External library chevrotain.min.js required.');
        }
        function VRMLLoader(manager) {
            THREE.Loader.call(this, manager);
        }
        VRMLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
            constructor: VRMLLoader,
            load: function (url, onLoad, onProgress, onError) {
                var scope = this;
                var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
                var loader = new THREE.FileLoader(this.manager);
                loader.setPath(scope.path);
                loader.load(url, function (text) {
                    onLoad(scope.parse(text, path));
                }, onProgress, onError);
            },
            parse: function (data, path) {
                var nodeMap = {};
                function generateVRMLTree(data) {
                    var tokenData = createTokens();
                    var lexer = new VRMLLexer(tokenData.tokens);
                    var parser = new VRMLParser(tokenData.tokenVocabulary);
                    var visitor = createVisitor(parser.getBaseCstVisitorConstructor());
                    var lexingResult = lexer.lex(data);
                    parser.input = lexingResult.tokens;
                    var cstOutput = parser.vrml();
                    if (parser.errors.length > 0) {
                        console.error(parser.errors);
                        throw Error('THREE.VRMLLoader: Parsing errors detected.');
                    }
                    var ast = visitor.visit(cstOutput);
                    return ast;
                }
                function createTokens() {
                    var createToken = chevrotain.createToken;
                    var RouteIdentifier = createToken({
                        name: 'RouteIdentifier',
                        pattern: /[^\x30-\x39\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d][^\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d]*[\.][^\x30-\x39\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d][^\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d]*/
                    });
                    var Identifier = createToken({
                        name: 'Identifier',
                        pattern: /[^\x30-\x39\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d][^\0-\x20\x22\x27\x23\x2b\x2c\x2d\x2e\x5b\x5d\x5c\x7b\x7d]*/,
                        longer_alt: RouteIdentifier
                    });
                    var nodeTypes = [
                        'Anchor',
                        'Billboard',
                        'Collision',
                        'Group',
                        'Transform',
                        'Inline',
                        'LOD',
                        'Switch',
                        'AudioClip',
                        'DirectionalLight',
                        'PointLight',
                        'Script',
                        'Shape',
                        'Sound',
                        'SpotLight',
                        'WorldInfo',
                        'CylinderSensor',
                        'PlaneSensor',
                        'ProximitySensor',
                        'SphereSensor',
                        'TimeSensor',
                        'TouchSensor',
                        'VisibilitySensor',
                        'Box',
                        'Cone',
                        'Cylinder',
                        'ElevationGrid',
                        'Extrusion',
                        'IndexedFaceSet',
                        'IndexedLineSet',
                        'PointSet',
                        'Sphere',
                        'Color',
                        'Coordinate',
                        'Normal',
                        'TextureCoordinate',
                        'Appearance',
                        'FontStyle',
                        'ImageTexture',
                        'Material',
                        'MovieTexture',
                        'PixelTexture',
                        'TextureTransform',
                        'ColorInterpolator',
                        'CoordinateInterpolator',
                        'NormalInterpolator',
                        'OrientationInterpolator',
                        'PositionInterpolator',
                        'ScalarInterpolator',
                        'Background',
                        'Fog',
                        'NavigationInfo',
                        'Viewpoint',
                        'Text'
                    ];
                    var Version = createToken({
                        name: 'Version',
                        pattern: /#VRML.*/,
                        longer_alt: Identifier
                    });
                    var NodeName = createToken({
                        name: 'NodeName',
                        pattern: new RegExp(nodeTypes.join('|')),
                        longer_alt: Identifier
                    });
                    var DEF = createToken({
                        name: 'DEF',
                        pattern: /DEF/,
                        longer_alt: Identifier
                    });
                    var USE = createToken({
                        name: 'USE',
                        pattern: /USE/,
                        longer_alt: Identifier
                    });
                    var ROUTE = createToken({
                        name: 'ROUTE',
                        pattern: /ROUTE/,
                        longer_alt: Identifier
                    });
                    var TO = createToken({
                        name: 'TO',
                        pattern: /TO/,
                        longer_alt: Identifier
                    });
                    var StringLiteral = createToken({
                        name: 'StringLiteral',
                        pattern: /"(:?[^\\"\n\r]+|\\(:?[bfnrtv"\\/]|u[0-9a-fA-F]{4}))*"/
                    });
                    var HexLiteral = createToken({
                        name: 'HexLiteral',
                        pattern: /0[xX][0-9a-fA-F]+/
                    });
                    var NumberLiteral = createToken({
                        name: 'NumberLiteral',
                        pattern: /[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?/
                    });
                    var TrueLiteral = createToken({
                        name: 'TrueLiteral',
                        pattern: /TRUE/
                    });
                    var FalseLiteral = createToken({
                        name: 'FalseLiteral',
                        pattern: /FALSE/
                    });
                    var NullLiteral = createToken({
                        name: 'NullLiteral',
                        pattern: /NULL/
                    });
                    var LSquare = createToken({
                        name: 'LSquare',
                        pattern: /\[/
                    });
                    var RSquare = createToken({
                        name: 'RSquare',
                        pattern: /]/
                    });
                    var LCurly = createToken({
                        name: 'LCurly',
                        pattern: /{/
                    });
                    var RCurly = createToken({
                        name: 'RCurly',
                        pattern: /}/
                    });
                    var Comment = createToken({
                        name: 'Comment',
                        pattern: /#.*/,
                        group: chevrotain.Lexer.SKIPPED
                    });
                    var WhiteSpace = createToken({
                        name: 'WhiteSpace',
                        pattern: /[ ,\s]/,
                        group: chevrotain.Lexer.SKIPPED
                    });
                    var tokens = [
                        WhiteSpace,
                        NodeName,
                        DEF,
                        USE,
                        ROUTE,
                        TO,
                        TrueLiteral,
                        FalseLiteral,
                        NullLiteral,
                        Version,
                        Identifier,
                        RouteIdentifier,
                        StringLiteral,
                        HexLiteral,
                        NumberLiteral,
                        LSquare,
                        RSquare,
                        LCurly,
                        RCurly,
                        Comment
                    ];
                    var tokenVocabulary = {};
                    for (var i = 0, l = tokens.length; i < l; i++) {
                        var token = tokens[i];
                        tokenVocabulary[token.name] = token;
                    }
                    return {
                        tokens: tokens,
                        tokenVocabulary: tokenVocabulary
                    };
                }
                function createVisitor(BaseVRMLVisitor) {
                    function VRMLToASTVisitor() {
                        BaseVRMLVisitor.call(this);
                        this.validateVisitor();
                    }
                    VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {
                        constructor: VRMLToASTVisitor,
                        vrml: function (ctx) {
                            var data = {
                                version: this.visit(ctx.version),
                                nodes: [],
                                routes: []
                            };
                            for (var i = 0, l = ctx.node.length; i < l; i++) {
                                var node = ctx.node[i];
                                data.nodes.push(this.visit(node));
                            }
                            if (ctx.route) {
                                for (var i = 0, l = ctx.route.length; i < l; i++) {
                                    var route = ctx.route[i];
                                    data.routes.push(this.visit(route));
                                }
                            }
                            return data;
                        },
                        version: function (ctx) {
                            return ctx.Version[0].image;
                        },
                        node: function (ctx) {
                            var data = {
                                name: ctx.NodeName[0].image,
                                fields: []
                            };
                            if (ctx.field) {
                                for (var i = 0, l = ctx.field.length; i < l; i++) {
                                    var field = ctx.field[i];
                                    data.fields.push(this.visit(field));
                                }
                            }
                            if (ctx.def) {
                                data.DEF = this.visit(ctx.def[0]);
                            }
                            return data;
                        },
                        field: function (ctx) {
                            var data = {
                                name: ctx.Identifier[0].image,
                                type: null,
                                values: null
                            };
                            var result;
                            if (ctx.singleFieldValue) {
                                result = this.visit(ctx.singleFieldValue[0]);
                            }
                            if (ctx.multiFieldValue) {
                                result = this.visit(ctx.multiFieldValue[0]);
                            }
                            data.type = result.type;
                            data.values = result.values;
                            return data;
                        },
                        def: function (ctx) {
                            return ctx.Identifier[0].image;
                        },
                        use: function (ctx) {
                            return { USE: ctx.Identifier[0].image };
                        },
                        singleFieldValue: function (ctx) {
                            return processField(this, ctx);
                        },
                        multiFieldValue: function (ctx) {
                            return processField(this, ctx);
                        },
                        route: function (ctx) {
                            var data = {
                                FROM: ctx.RouteIdentifier[0].image,
                                TO: ctx.RouteIdentifier[1].image
                            };
                            return data;
                        }
                    });
                    function processField(scope, ctx) {
                        var field = {
                            type: null,
                            values: []
                        };
                        if (ctx.node) {
                            field.type = 'node';
                            for (var i = 0, l = ctx.node.length; i < l; i++) {
                                var node = ctx.node[i];
                                field.values.push(scope.visit(node));
                            }
                        }
                        if (ctx.use) {
                            field.type = 'use';
                            for (var i = 0, l = ctx.use.length; i < l; i++) {
                                var use = ctx.use[i];
                                field.values.push(scope.visit(use));
                            }
                        }
                        if (ctx.StringLiteral) {
                            field.type = 'string';
                            for (var i = 0, l = ctx.StringLiteral.length; i < l; i++) {
                                var stringLiteral = ctx.StringLiteral[i];
                                field.values.push(stringLiteral.image.replace(/'|"/g, ''));
                            }
                        }
                        if (ctx.NumberLiteral) {
                            field.type = 'number';
                            for (var i = 0, l = ctx.NumberLiteral.length; i < l; i++) {
                                var numberLiteral = ctx.NumberLiteral[i];
                                field.values.push(parseFloat(numberLiteral.image));
                            }
                        }
                        if (ctx.HexLiteral) {
                            field.type = 'hex';
                            for (var i = 0, l = ctx.HexLiteral.length; i < l; i++) {
                                var hexLiteral = ctx.HexLiteral[i];
                                field.values.push(hexLiteral.image);
                            }
                        }
                        if (ctx.TrueLiteral) {
                            field.type = 'boolean';
                            for (var i = 0, l = ctx.TrueLiteral.length; i < l; i++) {
                                var trueLiteral = ctx.TrueLiteral[i];
                                if (trueLiteral.image === 'TRUE')
                                    field.values.push(true);
                            }
                        }
                        if (ctx.FalseLiteral) {
                            field.type = 'boolean';
                            for (var i = 0, l = ctx.FalseLiteral.length; i < l; i++) {
                                var falseLiteral = ctx.FalseLiteral[i];
                                if (falseLiteral.image === 'FALSE')
                                    field.values.push(false);
                            }
                        }
                        if (ctx.NullLiteral) {
                            field.type = 'null';
                            ctx.NullLiteral.forEach(function () {
                                field.values.push(null);
                            });
                        }
                        return field;
                    }
                    return new VRMLToASTVisitor();
                }
                function parseTree(tree) {
                    var nodes = tree.nodes;
                    var scene = new THREE.Scene();
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        var node = nodes[i];
                        buildNodeMap(node);
                    }
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        var node = nodes[i];
                        var object = getNode(node);
                        if (object instanceof THREE.Object3D)
                            scene.add(object);
                    }
                    return scene;
                }
                function buildNodeMap(node) {
                    if (node.DEF) {
                        nodeMap[node.DEF] = node;
                    }
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        if (field.type === 'node') {
                            var fieldValues = field.values;
                            for (var j = 0, jl = fieldValues.length; j < jl; j++) {
                                buildNodeMap(fieldValues[j]);
                            }
                        }
                    }
                }
                function getNode(node) {
                    if (node.USE) {
                        return resolveUSE(node.USE);
                    }
                    if (node.build !== undefined)
                        return node.build;
                    node.build = buildNode(node);
                    return node.build;
                }
                function buildNode(node) {
                    var nodeName = node.name;
                    var build;
                    switch (nodeName) {
                    case 'Group':
                    case 'Transform':
                        build = buildGroupingNode(node);
                        break;
                    case 'Background':
                        build = buildBackgroundNode(node);
                        break;
                    case 'Shape':
                        build = buildShapeNode(node);
                        break;
                    case 'Appearance':
                        build = buildAppearanceNode(node);
                        break;
                    case 'Material':
                        build = buildMaterialNode(node);
                        break;
                    case 'ImageTexture':
                        build = buildImageTextureNode(node);
                        break;
                    case 'PixelTexture':
                        build = buildPixelTextureNode(node);
                        break;
                    case 'TextureTransform':
                        build = buildTextureTransformNode(node);
                        break;
                    case 'IndexedFaceSet':
                        build = buildIndexedFaceSetNode(node);
                        break;
                    case 'IndexedLineSet':
                        build = buildIndexedLineSetNode(node);
                        break;
                    case 'PointSet':
                        build = buildPointSetNode(node);
                        break;
                    case 'Box':
                        build = buildBoxNode(node);
                        break;
                    case 'Cone':
                        build = buildConeNode(node);
                        break;
                    case 'Cylinder':
                        build = buildCylinderNode(node);
                        break;
                    case 'Sphere':
                        build = buildSphereNode(node);
                        break;
                    case 'Color':
                    case 'Coordinate':
                    case 'Normal':
                    case 'TextureCoordinate':
                        build = buildGeometricNode(node);
                        break;
                    case 'Anchor':
                    case 'Billboard':
                    case 'Collision':
                    case 'Inline':
                    case 'LOD':
                    case 'Switch':
                    case 'AudioClip':
                    case 'DirectionalLight':
                    case 'PointLight':
                    case 'Script':
                    case 'Sound':
                    case 'SpotLight':
                    case 'WorldInfo':
                    case 'CylinderSensor':
                    case 'PlaneSensor':
                    case 'ProximitySensor':
                    case 'SphereSensor':
                    case 'TimeSensor':
                    case 'TouchSensor':
                    case 'VisibilitySensor':
                    case 'ElevationGrid':
                    case 'Extrusion':
                    case 'Text':
                    case 'FontStyle':
                    case 'MovieTexture':
                    case 'ColorInterpolator':
                    case 'CoordinateInterpolator':
                    case 'NormalInterpolator':
                    case 'OrientationInterpolator':
                    case 'PositionInterpolator':
                    case 'ScalarInterpolator':
                    case 'Fog':
                    case 'NavigationInfo':
                    case 'Viewpoint':
                        break;
                    default:
                        console.warn('THREE.VRMLLoader: Unknown node:', nodeName);
                        break;
                    }
                    return build;
                }
                function buildGroupingNode(node) {
                    var object = new THREE.Group();
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'center':
                            break;
                        case 'children':
                            parseFieldChildren(fieldValues, object);
                            break;
                        case 'rotation':
                            var axis = new THREE.Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);
                            var angle = fieldValues[3];
                            object.quaternion.setFromAxisAngle(axis, angle);
                            break;
                        case 'scale':
                            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'scaleOrientation':
                            break;
                        case 'translation':
                            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'bboxCenter':
                            break;
                        case 'bboxSize':
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    return object;
                }
                function buildBackgroundNode(node) {
                    var group = new THREE.Group();
                    var groundAngle, groundColor;
                    var skyAngle, skyColor;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'groundAngle':
                            groundAngle = fieldValues;
                            break;
                        case 'groundColor':
                            groundColor = fieldValues;
                            break;
                        case 'backUrl':
                            break;
                        case 'bottomUrl':
                            break;
                        case 'frontUrl':
                            break;
                        case 'leftUrl':
                            break;
                        case 'rightUrl':
                            break;
                        case 'topUrl':
                            break;
                        case 'skyAngle':
                            skyAngle = fieldValues;
                            break;
                        case 'skyColor':
                            skyColor = fieldValues;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var radius = 10000;
                    if (skyColor) {
                        var skyGeometry = new THREE.SphereBufferGeometry(radius, 32, 16);
                        var skyMaterial = new THREE.MeshBasicMaterial({
                            fog: false,
                            side: THREE.BackSide,
                            depthWrite: false,
                            depthTest: false
                        });
                        if (skyColor.length > 3) {
                            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);
                            skyMaterial.vertexColors = true;
                        } else {
                            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);
                        }
                        var sky = new THREE.Mesh(skyGeometry, skyMaterial);
                        group.add(sky);
                    }
                    if (groundColor) {
                        if (groundColor.length > 0) {
                            var groundGeometry = new THREE.SphereBufferGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);
                            var groundMaterial = new THREE.MeshBasicMaterial({
                                fog: false,
                                side: THREE.BackSide,
                                vertexColors: true,
                                depthWrite: false,
                                depthTest: false
                            });
                            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);
                            var ground = new THREE.Mesh(groundGeometry, groundMaterial);
                            group.add(ground);
                        }
                    }
                    group.renderOrder = -Infinity;
                    return group;
                }
                function buildShapeNode(node) {
                    var fields = node.fields;
                    var material = new THREE.MeshBasicMaterial({ color: 0 });
                    var geometry;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'appearance':
                            if (fieldValues[0] !== null) {
                                material = getNode(fieldValues[0]);
                            }
                            break;
                        case 'geometry':
                            if (fieldValues[0] !== null) {
                                geometry = getNode(fieldValues[0]);
                            }
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var object;
                    if (geometry && geometry.attributes.position) {
                        var type = geometry._type;
                        if (type === 'points') {
                            var pointsMaterial = new THREE.PointsMaterial({ color: 16777215 });
                            if (geometry.attributes.color !== undefined) {
                                pointsMaterial.vertexColors = true;
                            } else {
                                if (material.isMeshPhongMaterial) {
                                    pointsMaterial.color.copy(material.emissive);
                                }
                            }
                            object = new THREE.Points(geometry, pointsMaterial);
                        } else if (type === 'line') {
                            var lineMaterial = new THREE.LineBasicMaterial({ color: 16777215 });
                            if (geometry.attributes.color !== undefined) {
                                lineMaterial.vertexColors = true;
                            } else {
                                if (material.isMeshPhongMaterial) {
                                    lineMaterial.color.copy(material.emissive);
                                }
                            }
                            object = new THREE.LineSegments(geometry, lineMaterial);
                        } else {
                            if (geometry._solid !== undefined) {
                                material.side = geometry._solid ? THREE.FrontSide : THREE.DoubleSide;
                            }
                            if (geometry.attributes.color !== undefined) {
                                material.vertexColors = true;
                            }
                            object = new THREE.Mesh(geometry, material);
                        }
                    } else {
                        object = new THREE.Object3D();
                        object.visible = false;
                    }
                    return object;
                }
                function buildAppearanceNode(node) {
                    var material = new THREE.MeshPhongMaterial();
                    var transformData;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'material':
                            if (fieldValues[0] !== null) {
                                var materialData = getNode(fieldValues[0]);
                                if (materialData.diffuseColor)
                                    material.color.copy(materialData.diffuseColor);
                                if (materialData.emissiveColor)
                                    material.emissive.copy(materialData.emissiveColor);
                                if (materialData.shininess)
                                    material.shininess = materialData.shininess;
                                if (materialData.specularColor)
                                    material.specular.copy(materialData.specularColor);
                                if (materialData.transparency)
                                    material.opacity = 1 - materialData.transparency;
                                if (materialData.transparency > 0)
                                    material.transparent = true;
                            } else {
                                material = new THREE.MeshBasicMaterial({ color: 0 });
                            }
                            break;
                        case 'texture':
                            var textureNode = fieldValues[0];
                            if (textureNode !== null) {
                                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {
                                    material.map = getNode(textureNode);
                                } else {
                                }
                            }
                            break;
                        case 'textureTransform':
                            if (fieldValues[0] !== null) {
                                transformData = getNode(fieldValues[0]);
                            }
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (material.map) {
                        if (material.map.__type) {
                            switch (material.map.__type) {
                            case TEXTURE_TYPE.INTENSITY_ALPHA:
                                material.opacity = 1;
                                break;
                            case TEXTURE_TYPE.RGB:
                                material.color.set(16777215);
                                break;
                            case TEXTURE_TYPE.RGBA:
                                material.color.set(16777215);
                                material.opacity = 1;
                                break;
                            default:
                            }
                            delete material.map.__type;
                        }
                        if (transformData) {
                            material.map.center.copy(transformData.center);
                            material.map.rotation = transformData.rotation;
                            material.map.repeat.copy(transformData.scale);
                            material.map.offset.copy(transformData.translation);
                        }
                    }
                    return material;
                }
                function buildMaterialNode(node) {
                    var materialData = {};
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'ambientIntensity':
                            break;
                        case 'diffuseColor':
                            materialData.diffuseColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'emissiveColor':
                            materialData.emissiveColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'shininess':
                            materialData.shininess = fieldValues[0];
                            break;
                        case 'specularColor':
                            materialData.emissiveColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);
                            break;
                        case 'transparency':
                            materialData.transparency = fieldValues[0];
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    return materialData;
                }
                function parseHexColor(hex, textureType, color) {
                    switch (textureType) {
                    case TEXTURE_TYPE.INTENSITY:
                        var value = parseInt(hex);
                        color.r = value;
                        color.g = value;
                        color.b = value;
                        break;
                    case TEXTURE_TYPE.INTENSITY_ALPHA:
                        var value = parseInt('0x' + hex.substring(2, 4));
                        color.r = value;
                        color.g = value;
                        color.b = value;
                        color.a = parseInt('0x' + hex.substring(4, 6));
                        break;
                    case TEXTURE_TYPE.RGB:
                        color.r = parseInt('0x' + hex.substring(2, 4));
                        color.g = parseInt('0x' + hex.substring(4, 6));
                        color.b = parseInt('0x' + hex.substring(6, 8));
                        break;
                    case TEXTURE_TYPE.RGBA:
                        color.r = parseInt('0x' + hex.substring(2, 4));
                        color.g = parseInt('0x' + hex.substring(4, 6));
                        color.b = parseInt('0x' + hex.substring(6, 8));
                        color.a = parseInt('0x' + hex.substring(8, 10));
                        break;
                    default:
                    }
                }
                function getTextureType(num_components) {
                    var type;
                    switch (num_components) {
                    case 1:
                        type = TEXTURE_TYPE.INTENSITY;
                        break;
                    case 2:
                        type = TEXTURE_TYPE.INTENSITY_ALPHA;
                        break;
                    case 3:
                        type = TEXTURE_TYPE.RGB;
                        break;
                    case 4:
                        type = TEXTURE_TYPE.RGBA;
                        break;
                    default:
                    }
                    return type;
                }
                function buildPixelTextureNode(node) {
                    var texture;
                    var wrapS = THREE.RepeatWrapping;
                    var wrapT = THREE.RepeatWrapping;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'image':
                            var width = fieldValues[0];
                            var height = fieldValues[1];
                            var num_components = fieldValues[2];
                            var useAlpha = num_components === 2 || num_components === 4;
                            var textureType = getTextureType(num_components);
                            var size = (useAlpha === true ? 4 : 3) * (width * height);
                            var data = new Uint8Array(size);
                            var color = {
                                r: 0,
                                g: 0,
                                b: 0,
                                a: 0
                            };
                            for (var j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {
                                parseHexColor(fieldValues[j], textureType, color);
                                if (useAlpha === true) {
                                    var stride = k * 4;
                                    data[stride + 0] = color.r;
                                    data[stride + 1] = color.g;
                                    data[stride + 2] = color.b;
                                    data[stride + 3] = color.a;
                                } else {
                                    var stride = k * 3;
                                    data[stride + 0] = color.r;
                                    data[stride + 1] = color.g;
                                    data[stride + 2] = color.b;
                                }
                            }
                            texture = new THREE.DataTexture(data, width, height, useAlpha === true ? THREE.RGBAFormat : THREE.RGBFormat);
                            texture.__type = textureType;
                            break;
                        case 'repeatS':
                            if (fieldValues[0] === false)
                                wrapS = THREE.ClampToEdgeWrapping;
                            break;
                        case 'repeatT':
                            if (fieldValues[0] === false)
                                wrapT = THREE.ClampToEdgeWrapping;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (texture) {
                        texture.wrapS = wrapS;
                        texture.wrapT = wrapT;
                    }
                    return texture;
                }
                function buildImageTextureNode(node) {
                    var texture;
                    var wrapS = THREE.RepeatWrapping;
                    var wrapT = THREE.RepeatWrapping;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'url':
                            var url = fieldValues[0];
                            if (url)
                                texture = textureLoader.load(url);
                            break;
                        case 'repeatS':
                            if (fieldValues[0] === false)
                                wrapS = THREE.ClampToEdgeWrapping;
                            break;
                        case 'repeatT':
                            if (fieldValues[0] === false)
                                wrapT = THREE.ClampToEdgeWrapping;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (texture) {
                        texture.wrapS = wrapS;
                        texture.wrapT = wrapT;
                    }
                    return texture;
                }
                function buildTextureTransformNode(node) {
                    var transformData = {
                        center: new THREE.Vector2(),
                        rotation: new THREE.Vector2(),
                        scale: new THREE.Vector2(),
                        translation: new THREE.Vector2()
                    };
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'center':
                            transformData.center.set(fieldValues[0], fieldValues[1]);
                            break;
                        case 'rotation':
                            transformData.rotation = fieldValues[0];
                            break;
                        case 'scale':
                            transformData.scale.set(fieldValues[0], fieldValues[1]);
                            break;
                        case 'translation':
                            transformData.translation.set(fieldValues[0], fieldValues[1]);
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    return transformData;
                }
                function buildGeometricNode(node) {
                    return node.fields[0].values;
                }
                function buildIndexedFaceSetNode(node) {
                    var color, coord, normal, texCoord;
                    var ccw = true, solid = true, creaseAngle = 0;
                    var colorIndex, coordIndex, normalIndex, texCoordIndex;
                    var colorPerVertex = true, normalPerVertex = true;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'color':
                            var colorNode = fieldValues[0];
                            if (colorNode !== null) {
                                color = getNode(colorNode);
                            }
                            break;
                        case 'coord':
                            var coordNode = fieldValues[0];
                            if (coordNode !== null) {
                                coord = getNode(coordNode);
                            }
                            break;
                        case 'normal':
                            var normalNode = fieldValues[0];
                            if (normalNode !== null) {
                                normal = getNode(normalNode);
                            }
                            break;
                        case 'texCoord':
                            var texCoordNode = fieldValues[0];
                            if (texCoordNode !== null) {
                                texCoord = getNode(texCoordNode);
                            }
                            break;
                        case 'ccw':
                            ccw = fieldValues[0];
                            break;
                        case 'colorIndex':
                            colorIndex = fieldValues;
                            break;
                        case 'colorPerVertex':
                            colorPerVertex = fieldValues[0];
                            break;
                        case 'convex':
                            break;
                        case 'coordIndex':
                            coordIndex = fieldValues;
                            break;
                        case 'creaseAngle':
                            creaseAngle = fieldValues[0];
                            break;
                        case 'normalIndex':
                            normalIndex = fieldValues;
                            break;
                        case 'normalPerVertex':
                            normalPerVertex = fieldValues[0];
                            break;
                        case 'solid':
                            solid = fieldValues[0];
                            break;
                        case 'texCoordIndex':
                            texCoordIndex = fieldValues;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    if (coordIndex === undefined) {
                        console.warn('THREE.VRMLLoader: Missing coordIndex.');
                        return new THREE.BufferGeometry();
                    }
                    var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);
                    var positionAttribute;
                    var colorAttribute;
                    var normalAttribute;
                    var uvAttribute;
                    if (color) {
                        if (colorPerVertex === true) {
                            if (colorIndex && colorIndex.length > 0) {
                                var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);
                                colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);
                            } else {
                                colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(color, 3));
                            }
                        } else {
                            if (colorIndex && colorIndex.length > 0) {
                                var flattenFaceColors = flattenData(color, colorIndex);
                                var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);
                                colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);
                            } else {
                                var triangulatedFaceColors = triangulateFaceData(color, coordIndex);
                                colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);
                            }
                        }
                    }
                    if (normal) {
                        if (normalPerVertex === true) {
                            if (normalIndex && normalIndex.length > 0) {
                                var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);
                                normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);
                            } else {
                                normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(normal, 3));
                            }
                        } else {
                            if (normalIndex && normalIndex.length > 0) {
                                var flattenFaceNormals = flattenData(normal, normalIndex);
                                var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);
                                normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);
                            } else {
                                var triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);
                                normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);
                            }
                        }
                    } else {
                        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);
                    }
                    if (texCoord) {
                        if (texCoordIndex && texCoordIndex.length > 0) {
                            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);
                            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);
                        } else {
                            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(texCoord, 2));
                        }
                    }
                    var geometry = new THREE.BufferGeometry();
                    positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(coord, 3));
                    geometry.setAttribute('position', positionAttribute);
                    geometry.setAttribute('normal', normalAttribute);
                    if (colorAttribute)
                        geometry.setAttribute('color', colorAttribute);
                    if (uvAttribute)
                        geometry.setAttribute('uv', uvAttribute);
                    geometry._solid = solid;
                    geometry._type = 'mesh';
                    return geometry;
                }
                function buildIndexedLineSetNode(node) {
                    var color, coord;
                    var colorIndex, coordIndex;
                    var colorPerVertex = true;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'color':
                            var colorNode = fieldValues[0];
                            if (colorNode !== null) {
                                color = getNode(colorNode);
                            }
                            break;
                        case 'coord':
                            var coordNode = fieldValues[0];
                            if (coordNode !== null) {
                                coord = getNode(coordNode);
                            }
                            break;
                        case 'colorIndex':
                            colorIndex = fieldValues;
                            break;
                        case 'colorPerVertex':
                            colorPerVertex = fieldValues[0];
                            break;
                        case 'coordIndex':
                            coordIndex = fieldValues;
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var colorAttribute;
                    var expandedLineIndex = expandLineIndex(coordIndex);
                    if (color) {
                        if (colorPerVertex === true) {
                            if (colorIndex.length > 0) {
                                var expandedColorIndex = expandLineIndex(colorIndex);
                                colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);
                            } else {
                                colorAttribute = toNonIndexedAttribute(expandedLineIndex, new THREE.Float32BufferAttribute(color, 3));
                            }
                        } else {
                            if (colorIndex.length > 0) {
                                var flattenLineColors = flattenData(color, colorIndex);
                                var expandedLineColors = expandLineData(flattenLineColors, coordIndex);
                                colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);
                            } else {
                                var expandedLineColors = expandLineData(color, coordIndex);
                                colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);
                            }
                        }
                    }
                    var geometry = new THREE.BufferGeometry();
                    var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new THREE.Float32BufferAttribute(coord, 3));
                    geometry.setAttribute('position', positionAttribute);
                    if (colorAttribute)
                        geometry.setAttribute('color', colorAttribute);
                    geometry._type = 'line';
                    return geometry;
                }
                function buildPointSetNode(node) {
                    var geometry;
                    var color, coord;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'color':
                            var colorNode = fieldValues[0];
                            if (colorNode !== null) {
                                color = getNode(colorNode);
                            }
                            break;
                        case 'coord':
                            var coordNode = fieldValues[0];
                            if (coordNode !== null) {
                                coord = getNode(coordNode);
                            }
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.BufferGeometry();
                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(coord, 3));
                    if (color)
                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));
                    geometry._type = 'points';
                    return geometry;
                }
                function buildBoxNode(node) {
                    var size = new THREE.Vector3(2, 2, 2);
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'size':
                            size.x = fieldValues[0];
                            size.y = fieldValues[1];
                            size.z = fieldValues[2];
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.BoxBufferGeometry(size.x, size.y, size.z);
                    return geometry;
                }
                function buildConeNode(node) {
                    var radius = 1, height = 2, openEnded = false;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'bottom':
                            openEnded = !fieldValues[0];
                            break;
                        case 'bottomRadius':
                            radius = fieldValues[0];
                            break;
                        case 'height':
                            height = fieldValues[0];
                            break;
                        case 'side':
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.ConeBufferGeometry(radius, height, 16, 1, openEnded);
                    return geometry;
                }
                function buildCylinderNode(node) {
                    var radius = 1, height = 2;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'bottom':
                            break;
                        case 'radius':
                            radius = fieldValues[0];
                            break;
                        case 'height':
                            height = fieldValues[0];
                            break;
                        case 'side':
                            break;
                        case 'top':
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.CylinderBufferGeometry(radius, radius, height, 16, 1);
                    return geometry;
                }
                function buildSphereNode(node) {
                    var radius = 1;
                    var fields = node.fields;
                    for (var i = 0, l = fields.length; i < l; i++) {
                        var field = fields[i];
                        var fieldName = field.name;
                        var fieldValues = field.values;
                        switch (fieldName) {
                        case 'radius':
                            radius = fieldValues[0];
                            break;
                        default:
                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);
                            break;
                        }
                    }
                    var geometry = new THREE.SphereBufferGeometry(radius, 16, 16);
                    return geometry;
                }
                function resolveUSE(identifier) {
                    var node = nodeMap[identifier];
                    var build = getNode(node);
                    return build.isObject3D || build.isMaterial ? build.clone() : build;
                }
                function parseFieldChildren(children, owner) {
                    for (var i = 0, l = children.length; i < l; i++) {
                        var object = getNode(children[i]);
                        if (object instanceof THREE.Object3D)
                            owner.add(object);
                    }
                }
                function triangulateFaceIndex(index, ccw) {
                    var indices = [];
                    var start = 0;
                    for (var i = 0, l = index.length; i < l; i++) {
                        var i1 = index[start];
                        var i2 = index[i + (ccw ? 1 : 2)];
                        var i3 = index[i + (ccw ? 2 : 1)];
                        indices.push(i1, i2, i3);
                        if (index[i + 3] === -1 || i + 3 >= l) {
                            i += 3;
                            start = i + 1;
                        }
                    }
                    return indices;
                }
                function triangulateFaceData(data, index) {
                    var triangulatedData = [];
                    var start = 0;
                    for (var i = 0, l = index.length; i < l; i++) {
                        var stride = start * 3;
                        var x = data[stride];
                        var y = data[stride + 1];
                        var z = data[stride + 2];
                        triangulatedData.push(x, y, z);
                        if (index[i + 3] === -1 || i + 3 >= l) {
                            i += 3;
                            start++;
                        }
                    }
                    return triangulatedData;
                }
                function flattenData(data, index) {
                    var flattenData = [];
                    for (var i = 0, l = index.length; i < l; i++) {
                        var i1 = index[i];
                        var stride = i1 * 3;
                        var x = data[stride];
                        var y = data[stride + 1];
                        var z = data[stride + 2];
                        flattenData.push(x, y, z);
                    }
                    return flattenData;
                }
                function expandLineIndex(index) {
                    var indices = [];
                    for (var i = 0, l = index.length; i < l; i++) {
                        var i1 = index[i];
                        var i2 = index[i + 1];
                        indices.push(i1, i2);
                        if (index[i + 2] === -1 || i + 2 >= l) {
                            i += 2;
                        }
                    }
                    return indices;
                }
                function expandLineData(data, index) {
                    var triangulatedData = [];
                    var start = 0;
                    for (var i = 0, l = index.length; i < l; i++) {
                        var stride = start * 3;
                        var x = data[stride];
                        var y = data[stride + 1];
                        var z = data[stride + 2];
                        triangulatedData.push(x, y, z);
                        if (index[i + 2] === -1 || i + 2 >= l) {
                            i += 2;
                            start++;
                        }
                    }
                    return triangulatedData;
                }
                var vA = new THREE.Vector3();
                var vB = new THREE.Vector3();
                var vC = new THREE.Vector3();
                var uvA = new THREE.Vector2();
                var uvB = new THREE.Vector2();
                var uvC = new THREE.Vector2();
                function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {
                    var array = [];
                    for (var i = 0, l = coordIndex.length; i < l; i += 3) {
                        var a = index[i];
                        var b = index[i + 1];
                        var c = index[i + 2];
                        if (itemSize === 2) {
                            uvA.fromArray(data, a * itemSize);
                            uvB.fromArray(data, b * itemSize);
                            uvC.fromArray(data, c * itemSize);
                            array.push(uvA.x, uvA.y);
                            array.push(uvB.x, uvB.y);
                            array.push(uvC.x, uvC.y);
                        } else {
                            vA.fromArray(data, a * itemSize);
                            vB.fromArray(data, b * itemSize);
                            vC.fromArray(data, c * itemSize);
                            array.push(vA.x, vA.y, vA.z);
                            array.push(vB.x, vB.y, vB.z);
                            array.push(vC.x, vC.y, vC.z);
                        }
                    }
                    return new THREE.Float32BufferAttribute(array, itemSize);
                }
                function computeAttributeFromFaceData(index, faceData) {
                    var array = [];
                    for (var i = 0, j = 0, l = index.length; i < l; i += 3, j++) {
                        vA.fromArray(faceData, j * 3);
                        array.push(vA.x, vA.y, vA.z);
                        array.push(vA.x, vA.y, vA.z);
                        array.push(vA.x, vA.y, vA.z);
                    }
                    return new THREE.Float32BufferAttribute(array, 3);
                }
                function computeAttributeFromLineData(index, lineData) {
                    var array = [];
                    for (var i = 0, j = 0, l = index.length; i < l; i += 2, j++) {
                        vA.fromArray(lineData, j * 3);
                        array.push(vA.x, vA.y, vA.z);
                        array.push(vA.x, vA.y, vA.z);
                    }
                    return new THREE.Float32BufferAttribute(array, 3);
                }
                function toNonIndexedAttribute(indices, attribute) {
                    var array = attribute.array;
                    var itemSize = attribute.itemSize;
                    var array2 = new array.constructor(indices.length * itemSize);
                    var index = 0, index2 = 0;
                    for (var i = 0, l = indices.length; i < l; i++) {
                        index = indices[i] * itemSize;
                        for (var j = 0; j < itemSize; j++) {
                            array2[index2++] = array[index++];
                        }
                    }
                    return new THREE.Float32BufferAttribute(array2, itemSize);
                }
                var ab = new THREE.Vector3();
                var cb = new THREE.Vector3();
                function computeNormalAttribute(index, coord, creaseAngle) {
                    var faces = [];
                    var vertexNormals = {};
                    for (var i = 0, l = index.length; i < l; i += 3) {
                        var a = index[i];
                        var b = index[i + 1];
                        var c = index[i + 2];
                        var face = new Face(a, b, c);
                        vA.fromArray(coord, a * 3);
                        vB.fromArray(coord, b * 3);
                        vC.fromArray(coord, c * 3);
                        cb.subVectors(vC, vB);
                        ab.subVectors(vA, vB);
                        cb.cross(ab);
                        cb.normalize();
                        face.normal.copy(cb);
                        if (vertexNormals[a] === undefined)
                            vertexNormals[a] = [];
                        if (vertexNormals[b] === undefined)
                            vertexNormals[b] = [];
                        if (vertexNormals[c] === undefined)
                            vertexNormals[c] = [];
                        vertexNormals[a].push(face.normal);
                        vertexNormals[b].push(face.normal);
                        vertexNormals[c].push(face.normal);
                        faces.push(face);
                    }
                    var normals = [];
                    for (var i = 0, l = faces.length; i < l; i++) {
                        var face = faces[i];
                        var nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);
                        var nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);
                        var nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);
                        vA.fromArray(coord, face.a * 3);
                        vB.fromArray(coord, face.b * 3);
                        vC.fromArray(coord, face.c * 3);
                        normals.push(nA.x, nA.y, nA.z);
                        normals.push(nB.x, nB.y, nB.z);
                        normals.push(nC.x, nC.y, nC.z);
                    }
                    return new THREE.Float32BufferAttribute(normals, 3);
                }
                function weightedNormal(normals, vector, creaseAngle) {
                    var normal = new THREE.Vector3();
                    if (creaseAngle === 0) {
                        normal.copy(vector);
                    } else {
                        for (var i = 0, l = normals.length; i < l; i++) {
                            if (normals[i].angleTo(vector) < creaseAngle) {
                                normal.add(normals[i]);
                            }
                        }
                    }
                    return normal.normalize();
                }
                function toColorArray(colors) {
                    var array = [];
                    for (var i = 0, l = colors.length; i < l; i += 3) {
                        array.push(new THREE.Color(colors[i], colors[i + 1], colors[i + 2]));
                    }
                    return array;
                }
                function paintFaces(geometry, radius, angles, colors, topDown) {
                    var thresholds = [];
                    var startAngle = topDown === true ? 0 : Math.PI;
                    for (var i = 0, l = colors.length; i < l; i++) {
                        var angle = i === 0 ? 0 : angles[i - 1];
                        angle = topDown === true ? angle : startAngle - angle;
                        var point = new THREE.Vector3();
                        point.setFromSphericalCoords(radius, angle, 0);
                        thresholds.push(point);
                    }
                    var indices = geometry.index;
                    var positionAttribute = geometry.attributes.position;
                    var colorAttribute = new THREE.BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);
                    var position = new THREE.Vector3();
                    var color = new THREE.Color();
                    for (var i = 0; i < indices.count; i++) {
                        var index = indices.getX(i);
                        position.fromBufferAttribute(positionAttribute, index);
                        var thresholdIndexA, thresholdIndexB;
                        var t = 1;
                        for (var j = 1; j < thresholds.length; j++) {
                            thresholdIndexA = j - 1;
                            thresholdIndexB = j;
                            var thresholdA = thresholds[thresholdIndexA];
                            var thresholdB = thresholds[thresholdIndexB];
                            if (topDown === true) {
                                if (position.y <= thresholdA.y && position.y > thresholdB.y) {
                                    t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);
                                    break;
                                }
                            } else {
                                if (position.y >= thresholdA.y && position.y < thresholdB.y) {
                                    t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);
                                    break;
                                }
                            }
                        }
                        var colorA = colors[thresholdIndexA];
                        var colorB = colors[thresholdIndexB];
                        color.copy(colorA).lerp(colorB, t);
                        colorAttribute.setXYZ(index, color.r, color.g, color.b);
                    }
                    geometry.setAttribute('color', colorAttribute);
                }
                var textureLoader = new THREE.TextureLoader(this.manager);
                textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
                var tree = generateVRMLTree(data);
                if (tree.version.indexOf('V2.0') === -1) {
                    throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');
                }
                var scene = parseTree(tree);
                return scene;
            }
        });
        function VRMLLexer(tokens) {
            this.lexer = new chevrotain.Lexer(tokens);
        }
        VRMLLexer.prototype = {
            constructor: VRMLLexer,
            lex: function (inputText) {
                var lexingResult = this.lexer.tokenize(inputText);
                if (lexingResult.errors.length > 0) {
                    console.error(lexingResult.errors);
                    throw Error('THREE.VRMLLexer: Lexing errors detected.');
                }
                return lexingResult;
            }
        };
        function VRMLParser(tokenVocabulary) {
            chevrotain.Parser.call(this, tokenVocabulary);
            var $ = this;
            var Version = tokenVocabulary['Version'];
            var LCurly = tokenVocabulary['LCurly'];
            var RCurly = tokenVocabulary['RCurly'];
            var LSquare = tokenVocabulary['LSquare'];
            var RSquare = tokenVocabulary['RSquare'];
            var Identifier = tokenVocabulary['Identifier'];
            var RouteIdentifier = tokenVocabulary['RouteIdentifier'];
            var StringLiteral = tokenVocabulary['StringLiteral'];
            var HexLiteral = tokenVocabulary['HexLiteral'];
            var NumberLiteral = tokenVocabulary['NumberLiteral'];
            var TrueLiteral = tokenVocabulary['TrueLiteral'];
            var FalseLiteral = tokenVocabulary['FalseLiteral'];
            var NullLiteral = tokenVocabulary['NullLiteral'];
            var DEF = tokenVocabulary['DEF'];
            var USE = tokenVocabulary['USE'];
            var ROUTE = tokenVocabulary['ROUTE'];
            var TO = tokenVocabulary['TO'];
            var NodeName = tokenVocabulary['NodeName'];
            $.RULE('vrml', function () {
                $.SUBRULE($.version);
                $.AT_LEAST_ONE(function () {
                    $.SUBRULE($.node);
                });
                $.MANY(function () {
                    $.SUBRULE($.route);
                });
            });
            $.RULE('version', function () {
                $.CONSUME(Version);
            });
            $.RULE('node', function () {
                $.OPTION(function () {
                    $.SUBRULE($.def);
                });
                $.CONSUME(NodeName);
                $.CONSUME(LCurly);
                $.MANY(function () {
                    $.SUBRULE($.field);
                });
                $.CONSUME(RCurly);
            });
            $.RULE('field', function () {
                $.CONSUME(Identifier);
                $.OR2([
                    {
                        ALT: function () {
                            $.SUBRULE($.singleFieldValue);
                        }
                    },
                    {
                        ALT: function () {
                            $.SUBRULE($.multiFieldValue);
                        }
                    }
                ]);
            });
            $.RULE('def', function () {
                $.CONSUME(DEF);
                $.CONSUME(Identifier);
            });
            $.RULE('use', function () {
                $.CONSUME(USE);
                $.CONSUME(Identifier);
            });
            $.RULE('singleFieldValue', function () {
                $.AT_LEAST_ONE(function () {
                    $.OR([
                        {
                            ALT: function () {
                                $.SUBRULE($.node);
                            }
                        },
                        {
                            ALT: function () {
                                $.SUBRULE($.use);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(StringLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(HexLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NumberLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(TrueLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(FalseLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NullLiteral);
                            }
                        }
                    ]);
                });
            });
            $.RULE('multiFieldValue', function () {
                $.CONSUME(LSquare);
                $.MANY(function () {
                    $.OR([
                        {
                            ALT: function () {
                                $.SUBRULE($.node);
                            }
                        },
                        {
                            ALT: function () {
                                $.SUBRULE($.use);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(StringLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(HexLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NumberLiteral);
                            }
                        },
                        {
                            ALT: function () {
                                $.CONSUME(NullLiteral);
                            }
                        }
                    ]);
                });
                $.CONSUME(RSquare);
            });
            $.RULE('route', function () {
                $.CONSUME(ROUTE);
                $.CONSUME(RouteIdentifier);
                $.CONSUME(TO);
                $.CONSUME2(RouteIdentifier);
            });
            this.performSelfAnalysis();
        }
        VRMLParser.prototype = Object.create(chevrotain.Parser.prototype);
        VRMLParser.prototype.constructor = VRMLParser;
        function Face(a, b, c) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.normal = new THREE.Vector3();
        }
        var TEXTURE_TYPE = {
            INTENSITY: 1,
            INTENSITY_ALPHA: 2,
            RGB: 3,
            RGBA: 4
        };
        return VRMLLoader;
    }();
    return VRMLLoader;
});
define('skylark-threejs-ex/loaders/VTKLoader',[
    "skylark-threejs",
    'skylark-zlib/Inflate'
], function (
    THREE, 
    Inflate
) {
    'use strict';
    var VTKLoader = function (manager) {
        THREE.Loader.call(this, manager);
    };
    VTKLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {
        constructor: VTKLoader,
        load: function (url, onLoad, onProgress, onError) {
            var scope = this;
            var loader = new THREE.FileLoader(scope.manager);
            loader.setPath(scope.path);
            loader.setResponseType('arraybuffer');
            loader.load(url, function (text) {
                onLoad(scope.parse(text));
            }, onProgress, onError);
        },
        parse: function (data) {
            function parseASCII(data) {
                var indices = [];
                var positions = [];
                var colors = [];
                var normals = [];
                var result;
                var patWord = /^[^\d.\s-]+/;
                var pat3Floats = /(\-?\d+\.?[\d\-\+e]*)\s+(\-?\d+\.?[\d\-\+e]*)\s+(\-?\d+\.?[\d\-\+e]*)/g;
                var patConnectivity = /^(\d+)\s+([\s\d]*)/;
                var patPOINTS = /^POINTS /;
                var patPOLYGONS = /^POLYGONS /;
                var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;
                var patPOINT_DATA = /^POINT_DATA[ ]+(\d+)/;
                var patCELL_DATA = /^CELL_DATA[ ]+(\d+)/;
                var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\w+)[ ]+3/;
                var patNORMALS = /^NORMALS[ ]+(\w+)[ ]+(\w+)/;
                var inPointsSection = false;
                var inPolygonsSection = false;
                var inTriangleStripSection = false;
                var inPointDataSection = false;
                var inCellDataSection = false;
                var inColorSection = false;
                var inNormalsSection = false;
                var lines = data.split('\n');
                for (var i in lines) {
                    var line = lines[i].trim();
                    if (line.indexOf('DATASET') === 0) {
                        var dataset = line.split(' ')[1];
                        if (dataset !== 'POLYDATA')
                            throw new Error('Unsupported DATASET type: ' + dataset);
                    } else if (inPointsSection) {
                        while ((result = pat3Floats.exec(line)) !== null) {
                            if (patWord.exec(line) !== null)
                                break;
                            var x = parseFloat(result[1]);
                            var y = parseFloat(result[2]);
                            var z = parseFloat(result[3]);
                            positions.push(x, y, z);
                        }
                    } else if (inPolygonsSection) {
                        if ((result = patConnectivity.exec(line)) !== null) {
                            var numVertices = parseInt(result[1]);
                            var inds = result[2].split(/\s+/);
                            if (numVertices >= 3) {
                                var i0 = parseInt(inds[0]);
                                var i1, i2;
                                var k = 1;
                                for (var j = 0; j < numVertices - 2; ++j) {
                                    i1 = parseInt(inds[k]);
                                    i2 = parseInt(inds[k + 1]);
                                    indices.push(i0, i1, i2);
                                    k++;
                                }
                            }
                        }
                    } else if (inTriangleStripSection) {
                        if ((result = patConnectivity.exec(line)) !== null) {
                            var numVertices = parseInt(result[1]);
                            var inds = result[2].split(/\s+/);
                            if (numVertices >= 3) {
                                var i0, i1, i2;
                                for (var j = 0; j < numVertices - 2; j++) {
                                    if (j % 2 === 1) {
                                        i0 = parseInt(inds[j]);
                                        i1 = parseInt(inds[j + 2]);
                                        i2 = parseInt(inds[j + 1]);
                                        indices.push(i0, i1, i2);
                                    } else {
                                        i0 = parseInt(inds[j]);
                                        i1 = parseInt(inds[j + 1]);
                                        i2 = parseInt(inds[j + 2]);
                                        indices.push(i0, i1, i2);
                                    }
                                }
                            }
                        }
                    } else if (inPointDataSection || inCellDataSection) {
                        if (inColorSection) {
                            while ((result = pat3Floats.exec(line)) !== null) {
                                if (patWord.exec(line) !== null)
                                    break;
                                var r = parseFloat(result[1]);
                                var g = parseFloat(result[2]);
                                var b = parseFloat(result[3]);
                                colors.push(r, g, b);
                            }
                        } else if (inNormalsSection) {
                            while ((result = pat3Floats.exec(line)) !== null) {
                                if (patWord.exec(line) !== null)
                                    break;
                                var nx = parseFloat(result[1]);
                                var ny = parseFloat(result[2]);
                                var nz = parseFloat(result[3]);
                                normals.push(nx, ny, nz);
                            }
                        }
                    }
                    if (patPOLYGONS.exec(line) !== null) {
                        inPolygonsSection = true;
                        inPointsSection = false;
                        inTriangleStripSection = false;
                    } else if (patPOINTS.exec(line) !== null) {
                        inPolygonsSection = false;
                        inPointsSection = true;
                        inTriangleStripSection = false;
                    } else if (patTRIANGLE_STRIPS.exec(line) !== null) {
                        inPolygonsSection = false;
                        inPointsSection = false;
                        inTriangleStripSection = true;
                    } else if (patPOINT_DATA.exec(line) !== null) {
                        inPointDataSection = true;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    } else if (patCELL_DATA.exec(line) !== null) {
                        inCellDataSection = true;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    } else if (patCOLOR_SCALARS.exec(line) !== null) {
                        inColorSection = true;
                        inNormalsSection = false;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    } else if (patNORMALS.exec(line) !== null) {
                        inNormalsSection = true;
                        inColorSection = false;
                        inPointsSection = false;
                        inPolygonsSection = false;
                        inTriangleStripSection = false;
                    }
                }
                var geometry = new THREE.BufferGeometry();
                geometry.setIndex(indices);
                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
                if (normals.length === positions.length) {
                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
                }
                if (colors.length !== indices.length) {
                    if (colors.length === positions.length) {
                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
                    }
                } else {
                    geometry = geometry.toNonIndexed();
                    var numTriangles = geometry.attributes.position.count / 3;
                    if (colors.length === numTriangles * 3) {
                        var newColors = [];
                        for (var i = 0; i < numTriangles; i++) {
                            var r = colors[3 * i + 0];
                            var g = colors[3 * i + 1];
                            var b = colors[3 * i + 2];
                            newColors.push(r, g, b);
                            newColors.push(r, g, b);
                            newColors.push(r, g, b);
                        }
                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));
                    }
                }
                return geometry;
            }
            function parseBinary(data) {
                var count, pointIndex, i, numberOfPoints, s;
                var buffer = new Uint8Array(data);
                var dataView = new DataView(data);
                var points = [];
                var normals = [];
                var indices = [];
                var vtk = [];
                var index = 0;
                function findString(buffer, start) {
                    var index = start;
                    var c = buffer[index];
                    var s = [];
                    while (c !== 10) {
                        s.push(String.fromCharCode(c));
                        index++;
                        c = buffer[index];
                    }
                    return {
                        start: start,
                        end: index,
                        next: index + 1,
                        parsedString: s.join('')
                    };
                }
                var state, line;
                while (true) {
                    state = findString(buffer, index);
                    line = state.parsedString;
                    if (line.indexOf('DATASET') === 0) {
                        var dataset = line.split(' ')[1];
                        if (dataset !== 'POLYDATA')
                            throw new Error('Unsupported DATASET type: ' + dataset);
                    } else if (line.indexOf('POINTS') === 0) {
                        vtk.push(line);
                        numberOfPoints = parseInt(line.split(' ')[1], 10);
                        count = numberOfPoints * 4 * 3;
                        points = new Float32Array(numberOfPoints * 3);
                        pointIndex = state.next;
                        for (i = 0; i < numberOfPoints; i++) {
                            points[3 * i] = dataView.getFloat32(pointIndex, false);
                            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);
                            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);
                            pointIndex = pointIndex + 12;
                        }
                        state.next = state.next + count + 1;
                    } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {
                        var numberOfStrips = parseInt(line.split(' ')[1], 10);
                        var size = parseInt(line.split(' ')[2], 10);
                        count = size * 4;
                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);
                        var indicesIndex = 0;
                        pointIndex = state.next;
                        for (i = 0; i < numberOfStrips; i++) {
                            var indexCount = dataView.getInt32(pointIndex, false);
                            var strip = [];
                            pointIndex += 4;
                            for (s = 0; s < indexCount; s++) {
                                strip.push(dataView.getInt32(pointIndex, false));
                                pointIndex += 4;
                            }
                            for (var j = 0; j < indexCount - 2; j++) {
                                if (j % 2) {
                                    indices[indicesIndex++] = strip[j];
                                    indices[indicesIndex++] = strip[j + 2];
                                    indices[indicesIndex++] = strip[j + 1];
                                } else {
                                    indices[indicesIndex++] = strip[j];
                                    indices[indicesIndex++] = strip[j + 1];
                                    indices[indicesIndex++] = strip[j + 2];
                                }
                            }
                        }
                        state.next = state.next + count + 1;
                    } else if (line.indexOf('POLYGONS') === 0) {
                        var numberOfStrips = parseInt(line.split(' ')[1], 10);
                        var size = parseInt(line.split(' ')[2], 10);
                        count = size * 4;
                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);
                        var indicesIndex = 0;
                        pointIndex = state.next;
                        for (i = 0; i < numberOfStrips; i++) {
                            var indexCount = dataView.getInt32(pointIndex, false);
                            var strip = [];
                            pointIndex += 4;
                            for (s = 0; s < indexCount; s++) {
                                strip.push(dataView.getInt32(pointIndex, false));
                                pointIndex += 4;
                            }
                            for (var j = 1; j < indexCount - 1; j++) {
                                indices[indicesIndex++] = strip[0];
                                indices[indicesIndex++] = strip[j];
                                indices[indicesIndex++] = strip[j + 1];
                            }
                        }
                        state.next = state.next + count + 1;
                    } else if (line.indexOf('POINT_DATA') === 0) {
                        numberOfPoints = parseInt(line.split(' ')[1], 10);
                        state = findString(buffer, state.next);
                        count = numberOfPoints * 4 * 3;
                        normals = new Float32Array(numberOfPoints * 3);
                        pointIndex = state.next;
                        for (i = 0; i < numberOfPoints; i++) {
                            normals[3 * i] = dataView.getFloat32(pointIndex, false);
                            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);
                            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);
                            pointIndex += 12;
                        }
                        state.next = state.next + count;
                    }
                    index = state.next;
                    if (index >= buffer.byteLength) {
                        break;
                    }
                }
                var geometry = new THREE.BufferGeometry();
                geometry.setIndex(new THREE.BufferAttribute(indices, 1));
                geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));
                if (normals.length === points.length) {
                    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
                }
                return geometry;
            }
            function Float32Concat(first, second) {
                var firstLength = first.length, result = new Float32Array(firstLength + second.length);
                result.set(first);
                result.set(second, firstLength);
                return result;
            }
            function Int32Concat(first, second) {
                var firstLength = first.length, result = new Int32Array(firstLength + second.length);
                result.set(first);
                result.set(second, firstLength);
                return result;
            }
            function parseXML(stringFile) {
                function xmlToJson(xml) {
                    var obj = {};
                    if (xml.nodeType === 1) {
                        if (xml.attributes) {
                            if (xml.attributes.length > 0) {
                                obj['attributes'] = {};
                                for (var j = 0; j < xml.attributes.length; j++) {
                                    var attribute = xml.attributes.item(j);
                                    obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();
                                }
                            }
                        }
                    } else if (xml.nodeType === 3) {
                        obj = xml.nodeValue.trim();
                    }
                    if (xml.hasChildNodes()) {
                        for (var i = 0; i < xml.childNodes.length; i++) {
                            var item = xml.childNodes.item(i);
                            var nodeName = item.nodeName;
                            if (typeof obj[nodeName] === 'undefined') {
                                var tmp = xmlToJson(item);
                                if (tmp !== '')
                                    obj[nodeName] = tmp;
                            } else {
                                if (typeof obj[nodeName].push === 'undefined') {
                                    var old = obj[nodeName];
                                    obj[nodeName] = [old];
                                }
                                var tmp = xmlToJson(item);
                                if (tmp !== '')
                                    obj[nodeName].push(tmp);
                            }
                        }
                    }
                    return obj;
                }
                function Base64toByteArray(b64) {
                    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
                    var i;
                    var lookup = [];
                    var revLookup = [];
                    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                    var len = code.length;
                    for (i = 0; i < len; i++) {
                        lookup[i] = code[i];
                    }
                    for (i = 0; i < len; ++i) {
                        revLookup[code.charCodeAt(i)] = i;
                    }
                    revLookup['-'.charCodeAt(0)] = 62;
                    revLookup['_'.charCodeAt(0)] = 63;
                    var j, l, tmp, placeHolders, arr;
                    var len = b64.length;
                    if (len % 4 > 0) {
                        throw new Error('Invalid string. Length must be a multiple of 4');
                    }
                    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
                    arr = new Arr(len * 3 / 4 - placeHolders);
                    l = placeHolders > 0 ? len - 4 : len;
                    var L = 0;
                    for (i = 0, j = 0; i < l; i += 4, j += 3) {
                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                        arr[L++] = (tmp & 16711680) >> 16;
                        arr[L++] = (tmp & 65280) >> 8;
                        arr[L++] = tmp & 255;
                    }
                    if (placeHolders === 2) {
                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                        arr[L++] = tmp & 255;
                    } else if (placeHolders === 1) {
                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                        arr[L++] = tmp >> 8 & 255;
                        arr[L++] = tmp & 255;
                    }
                    return arr;
                }
                function parseDataArray(ele, compressed) {
                    var numBytes = 0;
                    if (json.attributes.header_type === 'UInt64') {
                        numBytes = 8;
                    } else if (json.attributes.header_type === 'UInt32') {
                        numBytes = 4;
                    }
                    if (ele.attributes.format === 'binary' && compressed) {
                        var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;
                        if (ele.attributes.type === 'Float32') {
                            var txt = new Float32Array();
                        } else if (ele.attributes.type === 'Int64') {
                            var txt = new Int32Array();
                        }
                        rawData = ele['#text'];
                        byteData = Base64toByteArray(rawData);
                        blocks = byteData[0];
                        for (var i = 1; i < numBytes - 1; i++) {
                            blocks = blocks | byteData[i] << i * numBytes;
                        }
                        headerSize = (blocks + 3) * numBytes;
                        padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;
                        headerSize = headerSize + padding;
                        dataOffsets = [];
                        currentOffset = headerSize;
                        dataOffsets.push(currentOffset);
                        cSizeStart = 3 * numBytes;
                        for (var i = 0; i < blocks; i++) {
                            var currentBlockSize = byteData[i * numBytes + cSizeStart];
                            for (var j = 1; j < numBytes - 1; j++) {
                                currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;
                            }
                            currentOffset = currentOffset + currentBlockSize;
                            dataOffsets.push(currentOffset);
                        }
                        for (var i = 0; i < dataOffsets.length - 1; i++) {
                            var inflate = new Inflate(byteData.slice(dataOffsets[i], dataOffsets[i + 1]), {
                                resize: true,
                                verify: true
                            });
                            content = inflate.decompress();
                            content = content.buffer;
                            if (ele.attributes.type === 'Float32') {
                                content = new Float32Array(content);
                                txt = Float32Concat(txt, content);
                            } else if (ele.attributes.type === 'Int64') {
                                content = new Int32Array(content);
                                txt = Int32Concat(txt, content);
                            }
                        }
                        delete ele['#text'];
                        if (ele.attributes.type === 'Int64') {
                            if (ele.attributes.format === 'binary') {
                                txt = txt.filter(function (el, idx) {
                                    if (idx % 2 !== 1)
                                        return true;
                                });
                            }
                        }
                    } else {
                        if (ele.attributes.format === 'binary' && !compressed) {
                            var content = Base64toByteArray(ele['#text']);
                            content = content.slice(numBytes).buffer;
                        } else {
                            if (ele['#text']) {
                                var content = ele['#text'].split(/\s+/).filter(function (el) {
                                    if (el !== '')
                                        return el;
                                });
                            } else {
                                var content = new Int32Array(0).buffer;
                            }
                        }
                        delete ele['#text'];
                        if (ele.attributes.type === 'Float32') {
                            var txt = new Float32Array(content);
                        } else if (ele.attributes.type === 'Int32') {
                            var txt = new Int32Array(content);
                        } else if (ele.attributes.type === 'Int64') {
                            var txt = new Int32Array(content);
                            if (ele.attributes.format === 'binary') {
                                txt = txt.filter(function (el, idx) {
                                    if (idx % 2 !== 1)
                                        return true;
                                });
                            }
                        }
                    }
                    return txt;
                }
                var dom = null;
                if (window.DOMParser) {
                    try {
                        dom = new DOMParser().parseFromString(stringFile, 'text/xml');
                    } catch (e) {
                        dom = null;
                    }
                } else if (window.ActiveXObject) {
                    try {
                        dom = new ActiveXObject('Microsoft.XMLDOM');
                        dom.async = false;
                        if (!dom.loadXML()) {
                            throw new Error(dom.parseError.reason + dom.parseError.srcText);
                        }
                    } catch (e) {
                        dom = null;
                    }
                } else {
                    throw new Error('Cannot parse xml string!');
                }
                var doc = dom.documentElement;
                var json = xmlToJson(doc);
                var points = [];
                var normals = [];
                var indices = [];
                if (json.PolyData) {
                    var piece = json.PolyData.Piece;
                    var compressed = json.attributes.hasOwnProperty('compressor');
                    var sections = [
                        'PointData',
                        'Points',
                        'Strips',
                        'Polys'
                    ];
                    var sectionIndex = 0, numberOfSections = sections.length;
                    while (sectionIndex < numberOfSections) {
                        var section = piece[sections[sectionIndex]];
                        if (section && section.DataArray) {
                            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {
                                var arr = section.DataArray;
                            } else {
                                var arr = [section.DataArray];
                            }
                            var dataArrayIndex = 0, numberOfDataArrays = arr.length;
                            while (dataArrayIndex < numberOfDataArrays) {
                                if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {
                                    arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);
                                }
                                dataArrayIndex++;
                            }
                            switch (sections[sectionIndex]) {
                            case 'PointData':
                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);
                                var normalsName = section.attributes.Normals;
                                if (numberOfPoints > 0) {
                                    for (var i = 0, len = arr.length; i < len; i++) {
                                        if (normalsName === arr[i].attributes.Name) {
                                            var components = arr[i].attributes.NumberOfComponents;
                                            normals = new Float32Array(numberOfPoints * components);
                                            normals.set(arr[i].text, 0);
                                        }
                                    }
                                }
                                break;
                            case 'Points':
                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);
                                if (numberOfPoints > 0) {
                                    var components = section.DataArray.attributes.NumberOfComponents;
                                    points = new Float32Array(numberOfPoints * components);
                                    points.set(section.DataArray.text, 0);
                                }
                                break;
                            case 'Strips':
                                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);
                                if (numberOfStrips > 0) {
                                    var connectivity = new Int32Array(section.DataArray[0].text.length);
                                    var offset = new Int32Array(section.DataArray[1].text.length);
                                    connectivity.set(section.DataArray[0].text, 0);
                                    offset.set(section.DataArray[1].text, 0);
                                    var size = numberOfStrips + connectivity.length;
                                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);
                                    var indicesIndex = 0;
                                    for (var i = 0, len = numberOfStrips; i < len; i++) {
                                        var strip = [];
                                        for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {
                                            strip.push(connectivity[s]);
                                            if (i > 0)
                                                len0 = offset[i - 1];
                                        }
                                        for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {
                                            if (j % 2) {
                                                indices[indicesIndex++] = strip[j];
                                                indices[indicesIndex++] = strip[j + 2];
                                                indices[indicesIndex++] = strip[j + 1];
                                            } else {
                                                indices[indicesIndex++] = strip[j];
                                                indices[indicesIndex++] = strip[j + 1];
                                                indices[indicesIndex++] = strip[j + 2];
                                            }
                                            if (i > 0)
                                                len0 = offset[i - 1];
                                        }
                                    }
                                }
                                break;
                            case 'Polys':
                                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);
                                if (numberOfPolys > 0) {
                                    var connectivity = new Int32Array(section.DataArray[0].text.length);
                                    var offset = new Int32Array(section.DataArray[1].text.length);
                                    connectivity.set(section.DataArray[0].text, 0);
                                    offset.set(section.DataArray[1].text, 0);
                                    var size = numberOfPolys + connectivity.length;
                                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);
                                    var indicesIndex = 0, connectivityIndex = 0;
                                    var i = 0, len = numberOfPolys, len0 = 0;
                                    while (i < len) {
                                        var poly = [];
                                        var s = 0, len1 = offset[i];
                                        while (s < len1 - len0) {
                                            poly.push(connectivity[connectivityIndex++]);
                                            s++;
                                        }
                                        var j = 1;
                                        while (j < len1 - len0 - 1) {
                                            indices[indicesIndex++] = poly[0];
                                            indices[indicesIndex++] = poly[j];
                                            indices[indicesIndex++] = poly[j + 1];
                                            j++;
                                        }
                                        i++;
                                        len0 = offset[i - 1];
                                    }
                                }
                                break;
                            default:
                                break;
                            }
                        }
                        sectionIndex++;
                    }
                    var geometry = new THREE.BufferGeometry();
                    geometry.setIndex(new THREE.BufferAttribute(indices, 1));
                    geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));
                    if (normals.length === points.length) {
                        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
                    }
                    return geometry;
                } else {
                    throw new Error('Unsupported DATASET type');
                }
            }
            function getStringFile(data) {
                var stringFile = '';
                var charArray = new Uint8Array(data);
                var i = 0;
                var len = charArray.length;
                while (len--) {
                    stringFile += String.fromCharCode(charArray[i++]);
                }
                return stringFile;
            }
            var meta = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\n');
            if (meta[0].indexOf('xml') !== -1) {
                return parseXML(getStringFile(data));
            } else if (meta[2].includes('ASCII')) {
                return parseASCII(getStringFile(data));
            } else {
                return parseBinary(data);
            }
        }
    });

    return VTKLoader;
});
define('skylark-threejs-ex/loaders/XLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var XLoader = function () {
        var classCallCheck = function (instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        };
        var createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var XboneInf = function XboneInf() {
            classCallCheck(this, XboneInf);
            this.boneName = '';
            this.BoneIndex = 0;
            this.Indeces = [];
            this.Weights = [];
            this.initMatrix = null;
            this.OffsetMatrix = null;
        };
        var XAnimationInfo = function XAnimationInfo() {
            classCallCheck(this, XAnimationInfo);
            this.animeName = '';
            this.boneName = '';
            this.targetBone = null;
            this.keyType = 4;
            this.frameStartLv = 0;
            this.keyFrames = [];
            this.InverseMx = null;
        };
        var XAnimationObj = function () {
            function XAnimationObj(_flags) {
                classCallCheck(this, XAnimationObj);
                this.fps = 30;
                this.name = 'xanimation';
                this.length = 0;
                this.hierarchy = [];
                this.putFlags = _flags;
                if (this.putFlags.putPos === undefined) {
                    this.putFlags.putPos = true;
                }
                if (this.putFlags.putRot === undefined) {
                    this.putFlags.putRot = true;
                }
                if (this.putFlags.putScl === undefined) {
                    this.putFlags.putScl = true;
                }
            }
            createClass(XAnimationObj, [
                {
                    key: 'make',
                    value: function make(XAnimationInfoArray) {
                        for (var i = 0; i < XAnimationInfoArray.length; i++) {
                            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));
                        }
                        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;
                    }
                },
                {
                    key: 'clone',
                    value: function clone() {
                        return Object.assign({}, this);
                    }
                },
                {
                    key: 'makeBonekeys',
                    value: function makeBonekeys(XAnimationInfo) {
                        var refObj = {};
                        refObj.name = XAnimationInfo.boneName;
                        refObj.parent = '';
                        refObj.keys = this.keyFrameRefactor(XAnimationInfo);
                        refObj.copy = function () {
                            return Object.assign({}, this);
                        };
                        return refObj;
                    }
                },
                {
                    key: 'keyFrameRefactor',
                    value: function keyFrameRefactor(XAnimationInfo) {
                        var keys = [];
                        for (var i = 0; i < XAnimationInfo.keyFrames.length; i++) {
                            var keyframe = {};
                            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;
                            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {
                                keyframe.pos = XAnimationInfo.keyFrames[i].pos;
                            }
                            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {
                                keyframe.rot = XAnimationInfo.keyFrames[i].rot;
                            }
                            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {
                                keyframe.scl = XAnimationInfo.keyFrames[i].scl;
                            }
                            if (XAnimationInfo.keyFrames[i].matrix) {
                                keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;
                                if (this.putFlags.putPos) {
                                    keyframe.pos = new THREE.Vector3().setFromMatrixPosition(keyframe.matrix);
                                }
                                if (this.putFlags.putRot) {
                                    keyframe.rot = new THREE.Quaternion().setFromRotationMatrix(keyframe.matrix);
                                }
                                if (this.putFlags.putScl) {
                                    keyframe.scl = new THREE.Vector3().setFromMatrixScale(keyframe.matrix);
                                }
                            }
                            keys.push(keyframe);
                        }
                        return keys;
                    }
                }
            ]);
            return XAnimationObj;
        }();
        var XKeyFrameInfo = function XKeyFrameInfo() {
            classCallCheck(this, XKeyFrameInfo);
            this.index = 0;
            this.Frame = 0;
            this.time = 0;
            this.matrix = null;
        };
        var XLoader = function () {
            function XLoader(manager) {
                THREE.Loader.call(this, manager);
                classCallCheck(this, XLoader);
                this.debug = false;
                this.texloader = new THREE.TextureLoader(this.manager);
                this.url = '';
                this._putMatLength = 0;
                this._nowMat = null;
                this._nowFrameName = '';
                this.frameHierarchie = [];
                this.Hierarchies = {};
                this.HieStack = [];
                this._currentObject = {};
                this._currentFrame = {};
                this._data = null;
                this.onLoad = null;
                this.IsUvYReverse = true;
                this.Meshes = [];
                this.animations = [];
                this.animTicksPerSecond = 30;
                this._currentGeo = null;
                this._currentAnime = null;
                this._currentAnimeFrames = null;
            }
            createClass(XLoader, [
                {
                    key: '_setArgOption',
                    value: function _setArgOption(_arg) {
                        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        if (!_arg) {
                            return;
                        }
                        for (var i = _start; i < _arg.length; i++) {
                            switch (i) {
                            case 0:
                                this.url = _arg[i];
                                break;
                            case 1:
                                this.options = _arg[i];
                                break;
                            }
                        }
                        if (this.options === undefined) {
                            this.options = {};
                        }
                    }
                },
                {
                    key: 'load',
                    value: function load(_arg, onLoad, onProgress, onError) {
                        var _this = this;
                        this._setArgOption(_arg);
                        var loader = new THREE.FileLoader(this.manager);
                        loader.setPath(this.path);
                        loader.setResponseType('arraybuffer');
                        loader.load(this.url, function (response) {
                            _this.parse(response, onLoad);
                        }, onProgress, onError);
                    }
                },
                {
                    key: '_readLine',
                    value: function _readLine(line) {
                        var readed = 0;
                        while (true) {
                            var find = -1;
                            find = line.indexOf('//', readed);
                            if (find === -1) {
                                find = line.indexOf('#', readed);
                            }
                            if (find > -1 && find < 2) {
                                var foundNewLine = -1;
                                foundNewLine = line.indexOf('\r\n', readed);
                                if (foundNewLine > 0) {
                                    readed = foundNewLine + 2;
                                } else {
                                    foundNewLine = line.indexOf('\r', readed);
                                    if (foundNewLine > 0) {
                                        readed = foundNewLine + 1;
                                    } else {
                                        readed = line.indexOf('\n', readed) + 1;
                                    }
                                }
                            } else {
                                break;
                            }
                        }
                        return line.substr(readed);
                    }
                },
                {
                    key: '_readLine',
                    value: function _readLine(line) {
                        var readed = 0;
                        while (true) {
                            var find = -1;
                            find = line.indexOf('//', readed);
                            if (find === -1) {
                                find = line.indexOf('#', readed);
                            }
                            if (find > -1 && find < 2) {
                                var foundNewLine = -1;
                                foundNewLine = line.indexOf('\r\n', readed);
                                if (foundNewLine > 0) {
                                    readed = foundNewLine + 2;
                                } else {
                                    foundNewLine = line.indexOf('\r', readed);
                                    if (foundNewLine > 0) {
                                        readed = foundNewLine + 1;
                                    } else {
                                        readed = line.indexOf('\n', readed) + 1;
                                    }
                                }
                            } else {
                                break;
                            }
                        }
                        return line.substr(readed);
                    }
                },
                {
                    key: '_isBinary',
                    value: function _isBinary(binData) {
                        var reader = new DataView(binData);
                        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;
                        var n_faces = reader.getUint32(80, true);
                        var expect = 80 + 32 / 8 + n_faces * face_size;
                        if (expect === reader.byteLength) {
                            return true;
                        }
                        var fileLength = reader.byteLength;
                        for (var index = 0; index < fileLength; index++) {
                            if (reader.getUint8(index, false) > 127) {
                                return true;
                            }
                        }
                        return false;
                    }
                },
                {
                    key: '_ensureBinary',
                    value: function _ensureBinary(buf) {
                        if (typeof buf === 'string') {
                            var array_buffer = new Uint8Array(buf.length);
                            for (var i = 0; i < buf.length; i++) {
                                array_buffer[i] = buf.charCodeAt(i) & 255;
                            }
                            return array_buffer.buffer || array_buffer;
                        } else {
                            return buf;
                        }
                    }
                },
                {
                    key: '_ensureString',
                    value: function _ensureString(buf) {
                        if (typeof buf !== 'string') {
                            return THREE.LoaderUtils.decodeText(new Uint8Array(buf));
                        } else {
                            return buf;
                        }
                    }
                },
                {
                    key: 'parse',
                    value: function _parse(data, onLoad) {
                        var binData = this._ensureBinary(data);
                        this._data = this._ensureString(data);
                        this.onLoad = onLoad;
                        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();
                    }
                },
                {
                    key: '_parseBinary',
                    value: function _parseBinary(data) {
                        return this._parseASCII(THREE.LoaderUtils.decodeText(new Uint8Array(data)));
                    }
                },
                {
                    key: '_parseASCII',
                    value: function _parseASCII() {
                        var path;
                        if (this.resourcePath !== '') {
                            path = this.resourcePath;
                        } else if (this.path !== '') {
                            path = this.path;
                        } else {
                            path = THREE.LoaderUtils.extractUrlBase(this.url);
                        }
                        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);
                        var endRead = 16;
                        this.Hierarchies.children = [];
                        this._hierarchieParse(this.Hierarchies, endRead);
                        this._changeRoot();
                        this._currentObject = this.Hierarchies.children.shift();
                        this._mainloop();
                    }
                },
                {
                    key: '_hierarchieParse',
                    value: function _hierarchieParse(_parent, _end) {
                        var endRead = _end;
                        while (true) {
                            var find1 = this._data.indexOf('{', endRead) + 1;
                            var findEnd = this._data.indexOf('}', endRead);
                            var findNext = this._data.indexOf('{', find1) + 1;
                            if (find1 > 0 && findEnd > find1) {
                                var _currentObject = {};
                                _currentObject.children = [];
                                var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();
                                var word = nameData.split(/ /g);
                                if (word.length > 0) {
                                    _currentObject.type = word[0];
                                    if (word.length >= 2) {
                                        _currentObject.name = word[1];
                                    } else {
                                        _currentObject.name = word[0] + this.Hierarchies.children.length;
                                    }
                                } else {
                                    _currentObject.name = nameData;
                                    _currentObject.type = '';
                                }
                                if (_currentObject.type === 'Animation') {
                                    _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();
                                    var refs = this._hierarchieParse(_currentObject, findEnd + 1);
                                    endRead = refs.end;
                                    _currentObject.children = refs.parent.children;
                                } else {
                                    var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);
                                    _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();
                                    if (findNext <= 0 || findEnd < findNext) {
                                        endRead = findEnd + 1;
                                    } else {
                                        var nextStart = Math.max(DataEnder + 1, find1);
                                        var _refs = this._hierarchieParse(_currentObject, nextStart);
                                        endRead = _refs.end;
                                        _currentObject.children = _refs.parent.children;
                                    }
                                }
                                _currentObject.parent = _parent;
                                if (_currentObject.type != 'template') {
                                    _parent.children.push(_currentObject);
                                }
                            } else {
                                endRead = find1 === -1 ? this._data.length : findEnd + 1;
                                break;
                            }
                        }
                        return {
                            parent: _parent,
                            end: endRead
                        };
                    }
                },
                {
                    key: '_mainloop',
                    value: function _mainloop() {
                        var _this2 = this;
                        this._mainProc();
                        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {
                            setTimeout(function () {
                                _this2._mainloop();
                            }, 1);
                        } else {
                            setTimeout(function () {
                                _this2.onLoad({
                                    models: _this2.Meshes,
                                    animations: _this2.animations
                                });
                            }, 1);
                        }
                    }
                },
                {
                    key: '_mainProc',
                    value: function _mainProc() {
                        var breakFlag = false;
                        while (true) {
                            if (!this._currentObject.worked) {
                                switch (this._currentObject.type) {
                                case 'template':
                                    break;
                                case 'AnimTicksPerSecond':
                                    this.animTicksPerSecond = parseInt(this._currentObject.data);
                                    break;
                                case 'Frame':
                                    this._setFrame();
                                    break;
                                case 'FrameTransformMatrix':
                                    this._setFrameTransformMatrix();
                                    break;
                                case 'Mesh':
                                    this._changeRoot();
                                    this._currentGeo = {};
                                    this._currentGeo.name = this._currentObject.name.trim();
                                    this._currentGeo.parentName = this._getParentName(this._currentObject).trim();
                                    this._currentGeo.VertexSetedBoneCount = [];
                                    this._currentGeo.GeometryData = {
                                        vertices: [],
                                        normals: [],
                                        uvs: [],
                                        skinIndices: [],
                                        skinWeights: [],
                                        indices: [],
                                        materialIndices: []
                                    };
                                    this._currentGeo.Materials = [];
                                    this._currentGeo.normalVectors = [];
                                    this._currentGeo.BoneInfs = [];
                                    this._currentGeo.baseFrame = this._currentFrame;
                                    this._makeBoneFrom_CurrentFrame();
                                    this._readVertexDatas();
                                    breakFlag = true;
                                    break;
                                case 'MeshNormals':
                                    this._readVertexDatas();
                                    break;
                                case 'MeshTextureCoords':
                                    this._setMeshTextureCoords();
                                    break;
                                case 'VertexDuplicationIndices':
                                    break;
                                case 'MeshMaterialList':
                                    this._setMeshMaterialList();
                                    break;
                                case 'Material':
                                    this._setMaterial();
                                    break;
                                case 'SkinWeights':
                                    this._setSkinWeights();
                                    break;
                                case 'AnimationSet':
                                    this._changeRoot();
                                    this._currentAnime = {};
                                    this._currentAnime.name = this._currentObject.name.trim();
                                    this._currentAnime.AnimeFrames = [];
                                    break;
                                case 'Animation':
                                    if (this._currentAnimeFrames) {
                                        this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);
                                    }
                                    this._currentAnimeFrames = new XAnimationInfo();
                                    this._currentAnimeFrames.boneName = this._currentObject.data.trim();
                                    break;
                                case 'AnimationKey':
                                    this._readAnimationKey();
                                    breakFlag = true;
                                    break;
                                }
                                this._currentObject.worked = true;
                            }
                            if (this._currentObject.children.length > 0) {
                                this._currentObject = this._currentObject.children.shift();
                                if (this.debug) {
                                    console.log('processing ' + this._currentObject.name);
                                }
                                if (breakFlag)
                                    break;
                            } else {
                                if (this._currentObject.worked) {
                                    if (this._currentObject.parent && !this._currentObject.parent.parent) {
                                        this._changeRoot();
                                    }
                                }
                                if (this._currentObject.parent) {
                                    this._currentObject = this._currentObject.parent;
                                } else {
                                    breakFlag = true;
                                }
                                if (breakFlag)
                                    break;
                            }
                        }
                        return;
                    }
                },
                {
                    key: '_changeRoot',
                    value: function _changeRoot() {
                        if (this._currentGeo != null && this._currentGeo.name) {
                            this._makeOutputGeometry();
                        }
                        this._currentGeo = {};
                        if (this._currentAnime != null && this._currentAnime.name) {
                            if (this._currentAnimeFrames) {
                                this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);
                                this._currentAnimeFrames = null;
                            }
                            this._makeOutputAnimation();
                        }
                        this._currentAnime = {};
                    }
                },
                {
                    key: '_getParentName',
                    value: function _getParentName(_obj) {
                        if (_obj.parent) {
                            if (_obj.parent.name) {
                                return _obj.parent.name;
                            } else {
                                return this._getParentName(_obj.parent);
                            }
                        } else {
                            return '';
                        }
                    }
                },
                {
                    key: '_setFrame',
                    value: function _setFrame() {
                        this._nowFrameName = this._currentObject.name.trim();
                        this._currentFrame = {};
                        this._currentFrame.name = this._nowFrameName;
                        this._currentFrame.children = [];
                        if (this._currentObject.parent && this._currentObject.parent.name) {
                            this._currentFrame.parentName = this._currentObject.parent.name;
                        }
                        this.frameHierarchie.push(this._nowFrameName);
                        this.HieStack[this._nowFrameName] = this._currentFrame;
                    }
                },
                {
                    key: '_setFrameTransformMatrix',
                    value: function _setFrameTransformMatrix() {
                        this._currentFrame.FrameTransformMatrix = new THREE.Matrix4();
                        var data = this._currentObject.data.split(',');
                        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);
                        this._makeBoneFrom_CurrentFrame();
                    }
                },
                {
                    key: '_makeBoneFrom_CurrentFrame',
                    value: function _makeBoneFrom_CurrentFrame() {
                        if (!this._currentFrame.FrameTransformMatrix) {
                            return;
                        }
                        var b = new THREE.Bone();
                        b.name = this._currentFrame.name;
                        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);
                        b.matrixWorld = b.matrix;
                        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;
                        this._currentFrame.putBone = b;
                        if (this._currentFrame.parentName) {
                            for (var frame in this.HieStack) {
                                if (this.HieStack[frame].name === this._currentFrame.parentName) {
                                    this.HieStack[frame].putBone.add(this._currentFrame.putBone);
                                }
                            }
                        }
                    }
                },
                {
                    key: '_readVertexDatas',
                    value: function _readVertexDatas() {
                        var endRead = 0;
                        var mode = 0;
                        var mode_local = 0;
                        var maxLength = 0;
                        while (true) {
                            var changeMode = false;
                            if (mode_local === 0) {
                                var refO = this._readInt1(endRead);
                                endRead = refO.endRead;
                                mode_local = 1;
                                maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;
                                if (maxLength <= 0) {
                                    maxLength = this._currentObject.data.length;
                                }
                            } else {
                                var find = 0;
                                switch (mode) {
                                case 0:
                                    find = this._currentObject.data.indexOf(',', endRead) + 1;
                                    break;
                                case 1:
                                    find = this._currentObject.data.indexOf(';,', endRead) + 1;
                                    break;
                                }
                                if (find === 0 || find > maxLength) {
                                    find = maxLength;
                                    mode_local = 0;
                                    changeMode = true;
                                }
                                switch (this._currentObject.type) {
                                case 'Mesh':
                                    switch (mode) {
                                    case 0:
                                        this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));
                                        break;
                                    case 1:
                                        this._readFace1(this._currentObject.data.substr(endRead, find - endRead));
                                        break;
                                    }
                                    break;
                                case 'MeshNormals':
                                    switch (mode) {
                                    case 0:
                                        this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));
                                        break;
                                    }
                                    break;
                                }
                                endRead = find + 1;
                                if (changeMode) {
                                    mode++;
                                }
                            }
                            if (endRead >= this._currentObject.data.length) {
                                break;
                            }
                        }
                    }
                },
                {
                    key: '_readInt1',
                    value: function _readInt1(start) {
                        var find = this._currentObject.data.indexOf(';', start);
                        return {
                            refI: parseInt(this._currentObject.data.substr(start, find - start)),
                            endRead: find + 1
                        };
                    }
                },
                {
                    key: '_readVertex1',
                    value: function _readVertex1(line) {
                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');
                        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));
                        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);
                        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);
                        this._currentGeo.VertexSetedBoneCount.push(0);
                    }
                },
                {
                    key: '_readFace1',
                    value: function _readFace1(line) {
                        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');
                        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));
                    }
                },
                {
                    key: '_readNormalVector1',
                    value: function _readNormalVector1(line) {
                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');
                        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));
                    }
                },
                {
                    key: '_buildGeometry',
                    value: function _buildGeometry() {
                        var bufferGeometry = new THREE.BufferGeometry();
                        var position = [];
                        var normals = [];
                        var uvs = [];
                        var skinIndices = [];
                        var skinWeights = [];
                        var data = this._currentGeo.GeometryData;
                        for (var i = 0, l = data.indices.length; i < l; i++) {
                            var stride2 = data.indices[i] * 2;
                            var stride3 = data.indices[i] * 3;
                            var stride4 = data.indices[i] * 4;
                            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);
                            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);
                            skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);
                            skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);
                            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);
                        }
                        bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
                        bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
                        bufferGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
                        bufferGeometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));
                        bufferGeometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));
                        this._computeGroups(bufferGeometry, data.materialIndices);
                        return bufferGeometry;
                    }
                },
                {
                    key: '_computeGroups',
                    value: function _computeGroups(bufferGeometry, materialIndices) {
                        var group;
                        var groups = [];
                        var materialIndex = undefined;
                        for (var i = 0; i < materialIndices.length; i++) {
                            var currentMaterialIndex = materialIndices[i];
                            if (currentMaterialIndex !== materialIndex) {
                                materialIndex = currentMaterialIndex;
                                if (group !== undefined) {
                                    group.count = i * 3 - group.start;
                                    groups.push(group);
                                }
                                group = {
                                    start: i * 3,
                                    materialIndex: materialIndex
                                };
                            }
                        }
                        if (group !== undefined) {
                            group.count = i * 3 - group.start;
                            groups.push(group);
                        }
                        bufferGeometry.groups = groups;
                    }
                },
                {
                    key: '_setMeshTextureCoords',
                    value: function _setMeshTextureCoords() {
                        var endRead = 0;
                        var mode = 0;
                        var mode_local = 0;
                        while (true) {
                            switch (mode) {
                            case 0:
                                if (mode_local === 0) {
                                    var refO = this._readInt1(0);
                                    endRead = refO.endRead;
                                    mode_local = 1;
                                } else {
                                    var find = this._currentObject.data.indexOf(',', endRead) + 1;
                                    if (find === 0) {
                                        find = this._currentObject.data.length;
                                        mode = 2;
                                        mode_local = 0;
                                    }
                                    var line = this._currentObject.data.substr(endRead, find - endRead);
                                    var data = this._readLine(line.trim()).split(';');
                                    if (this.IsUvYReverse) {
                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));
                                    } else {
                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));
                                    }
                                    endRead = find + 1;
                                }
                                break;
                            }
                            if (endRead >= this._currentObject.data.length) {
                                break;
                            }
                        }
                    }
                },
                {
                    key: '_setMeshMaterialList',
                    value: function _setMeshMaterialList() {
                        var endRead = 0;
                        var mode = 0;
                        var mode_local = 0;
                        while (true) {
                            if (mode_local < 2) {
                                var refO = this._readInt1(endRead);
                                endRead = refO.endRead;
                                mode_local++;
                            } else {
                                var find = this._currentObject.data.indexOf(';', endRead);
                                if (find === -1) {
                                    find = this._currentObject.data.length;
                                    mode = 3;
                                    mode_local = 0;
                                }
                                var line = this._currentObject.data.substr(endRead, find - endRead);
                                var data = this._readLine(line.trim()).split(',');
                                for (var i = 0; i < data.length; i++) {
                                    this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);
                                }
                                endRead = this._currentObject.data.length;
                            }
                            if (endRead >= this._currentObject.data.length || mode >= 3) {
                                break;
                            }
                        }
                    }
                },
                {
                    key: '_setMaterial',
                    value: function _setMaterial() {
                        var _nowMat = new THREE.MeshPhongMaterial({ color: Math.random() * 16777215 });
                        _nowMat.side = THREE.FrontSide;
                        _nowMat.name = this._currentObject.name;
                        var endRead = 0;
                        var find = this._currentObject.data.indexOf(';;', endRead);
                        var line = this._currentObject.data.substr(endRead, find - endRead);
                        var data = this._readLine(line.trim()).split(';');
                        _nowMat.color.r = parseFloat(data[0]);
                        _nowMat.color.g = parseFloat(data[1]);
                        _nowMat.color.b = parseFloat(data[2]);
                        endRead = find + 2;
                        find = this._currentObject.data.indexOf(';', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        _nowMat.shininess = parseFloat(this._readLine(line));
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';;', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data2 = this._readLine(line.trim()).split(';');
                        _nowMat.specular.r = parseFloat(data2[0]);
                        _nowMat.specular.g = parseFloat(data2[1]);
                        _nowMat.specular.b = parseFloat(data2[2]);
                        endRead = find + 2;
                        find = this._currentObject.data.indexOf(';;', endRead);
                        if (find === -1) {
                            find = this._currentObject.data.length;
                        }
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data3 = this._readLine(line.trim()).split(';');
                        _nowMat.emissive.r = parseFloat(data3[0]);
                        _nowMat.emissive.g = parseFloat(data3[1]);
                        _nowMat.emissive.b = parseFloat(data3[2]);
                        var localObject = null;
                        while (true) {
                            if (this._currentObject.children.length > 0) {
                                localObject = this._currentObject.children.shift();
                                if (this.debug) {
                                    console.log('processing ' + localObject.name);
                                }
                                var fileName = localObject.data.substr(1, localObject.data.length - 2);
                                switch (localObject.type) {
                                case 'TextureFilename':
                                    _nowMat.map = this.texloader.load(fileName);
                                    break;
                                case 'BumpMapFilename':
                                    _nowMat.bumpMap = this.texloader.load(fileName);
                                    _nowMat.bumpScale = 0.05;
                                    break;
                                case 'NormalMapFilename':
                                    _nowMat.normalMap = this.texloader.load(fileName);
                                    _nowMat.normalScale = new THREE.Vector2(2, 2);
                                    break;
                                case 'EmissiveMapFilename':
                                    _nowMat.emissiveMap = this.texloader.load(fileName);
                                    break;
                                case 'LightMapFilename':
                                    _nowMat.lightMap = this.texloader.load(fileName);
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                        this._currentGeo.Materials.push(_nowMat);
                    }
                },
                {
                    key: '_setSkinWeights',
                    value: function _setSkinWeights() {
                        var boneInf = new XboneInf();
                        var endRead = 0;
                        var find = this._currentObject.data.indexOf(';', endRead);
                        var line = this._currentObject.data.substr(endRead, find - endRead);
                        endRead = find + 1;
                        boneInf.boneName = line.substr(1, line.length - 2);
                        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;
                        find = this._currentObject.data.indexOf(';', endRead);
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data = this._readLine(line.trim()).split(',');
                        for (var i = 0; i < data.length; i++) {
                            boneInf.Indeces.push(parseInt(data[i]));
                        }
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';', endRead);
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data2 = this._readLine(line.trim()).split(',');
                        for (var _i = 0; _i < data2.length; _i++) {
                            boneInf.Weights.push(parseFloat(data2[_i]));
                        }
                        endRead = find + 1;
                        find = this._currentObject.data.indexOf(';', endRead);
                        if (find <= 0) {
                            find = this._currentObject.data.length;
                        }
                        line = this._currentObject.data.substr(endRead, find - endRead);
                        var data3 = this._readLine(line.trim()).split(',');
                        boneInf.OffsetMatrix = new THREE.Matrix4();
                        this._ParseMatrixData(boneInf.OffsetMatrix, data3);
                        this._currentGeo.BoneInfs.push(boneInf);
                    }
                },
                {
                    key: '_makePutBoneList',
                    value: function _makePutBoneList(_RootName, _bones) {
                        var putting = false;
                        for (var frame in this.HieStack) {
                            if (this.HieStack[frame].name === _RootName || putting) {
                                putting = true;
                                var b = new THREE.Bone();
                                b.name = this.HieStack[frame].name;
                                b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);
                                b.matrixWorld = b.matrix;
                                b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;
                                b.pos = new THREE.Vector3().setFromMatrixPosition(FrameTransformMatrix).toArray();
                                b.rotq = new THREE.Quaternion().setFromRotationMatrix(FrameTransformMatrix).toArray();
                                b.scl = new THREE.Vector3().setFromMatrixScale(FrameTransformMatrix).toArray();
                                if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {
                                    for (var i = 0; i < _bones.length; i++) {
                                        if (this.HieStack[frame].parentName === _bones[i].name) {
                                            _bones[i].add(b);
                                            b.parent = i;
                                            break;
                                        }
                                    }
                                }
                                _bones.push(b);
                            }
                        }
                    }
                },
                {
                    key: '_makeOutputGeometry',
                    value: function _makeOutputGeometry() {
                        var mesh = null;
                        if (this._currentGeo.BoneInfs.length > 0) {
                            var putBones = [];
                            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);
                            for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {
                                var boneIndex = 0;
                                for (var bb = 0; bb < putBones.length; bb++) {
                                    if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {
                                        boneIndex = bb;
                                        putBones[bb].OffsetMatrix = new THREE.Matrix4();
                                        putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);
                                        break;
                                    }
                                }
                                for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {
                                    var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];
                                    var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];
                                    var stride = nowVertexID * 4;
                                    switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {
                                    case 0:
                                        this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride] = nowVal;
                                        break;
                                    case 1:
                                        this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;
                                        break;
                                    case 2:
                                        this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;
                                        break;
                                    case 3:
                                        this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;
                                        this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;
                                        break;
                                    }
                                    this._currentGeo.VertexSetedBoneCount[nowVertexID]++;
                                    if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {
                                        console.log('warn! over 4 bone weight! :' + nowVertexID);
                                    }
                                }
                            }
                            for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {
                                this._currentGeo.Materials[sk].skinning = true;
                            }
                            var offsetList = [];
                            for (var _bi = 0; _bi < putBones.length; _bi++) {
                                if (putBones[_bi].OffsetMatrix) {
                                    offsetList.push(putBones[_bi].OffsetMatrix);
                                } else {
                                    offsetList.push(new THREE.Matrix4());
                                }
                            }
                            var bufferGeometry = this._buildGeometry();
                            mesh = new THREE.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);
                            this._initSkeleton(mesh, putBones, offsetList);
                        } else {
                            var _bufferGeometry = this._buildGeometry();
                            mesh = new THREE.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);
                        }
                        mesh.name = this._currentGeo.name;
                        var worldBaseMx = new THREE.Matrix4();
                        var currentMxFrame = this._currentGeo.baseFrame.putBone;
                        if (currentMxFrame && currentMxFrame.parent) {
                            while (true) {
                                currentMxFrame = currentMxFrame.parent;
                                if (currentMxFrame) {
                                    worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);
                                } else {
                                    break;
                                }
                            }
                            mesh.applyMatrix4(worldBaseMx);
                        }
                        this.Meshes.push(mesh);
                    }
                },
                {
                    key: '_initSkeleton',
                    value: function _initSkeleton(mesh, boneList, boneInverses) {
                        var bones = [], bone, gbone;
                        var i, il;
                        for (i = 0, il = boneList.length; i < il; i++) {
                            gbone = boneList[i];
                            bone = new THREE.Bone();
                            bones.push(bone);
                            bone.name = gbone.name;
                            bone.position.fromArray(gbone.pos);
                            bone.quaternion.fromArray(gbone.rotq);
                            if (gbone.scl !== undefined)
                                bone.scale.fromArray(gbone.scl);
                        }
                        for (i = 0, il = boneList.length; i < il; i++) {
                            gbone = boneList[i];
                            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {
                                bones[gbone.parent].add(bones[i]);
                            } else {
                                mesh.add(bones[i]);
                            }
                        }
                        mesh.updateMatrixWorld(true);
                        var skeleton = new THREE.Skeleton(bones, boneInverses);
                        mesh.bind(skeleton, mesh.matrixWorld);
                    }
                },
                {
                    key: '_readAnimationKey',
                    value: function _readAnimationKey() {
                        var endRead = 0;
                        var find = this._currentObject.data.indexOf(';', endRead);
                        var line = this._currentObject.data.substr(endRead, find - endRead);
                        endRead = find + 1;
                        var nowKeyType = parseInt(this._readLine(line));
                        find = this._currentObject.data.indexOf(';', endRead);
                        endRead = find + 1;
                        line = this._currentObject.data.substr(endRead);
                        var data = this._readLine(line.trim()).split(';;,');
                        for (var i = 0; i < data.length; i++) {
                            var data2 = data[i].split(';');
                            var keyInfo = new XKeyFrameInfo();
                            keyInfo.type = nowKeyType;
                            keyInfo.Frame = parseInt(data2[0]);
                            keyInfo.index = this._currentAnimeFrames.keyFrames.length;
                            keyInfo.time = keyInfo.Frame;
                            if (nowKeyType != 4) {
                                var frameFound = false;
                                for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {
                                    if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {
                                        keyInfo = this._currentAnimeFrames.keyFrames[mm];
                                        frameFound = true;
                                        break;
                                    }
                                }
                                var frameValue = data2[2].split(',');
                                switch (nowKeyType) {
                                case 0:
                                    keyInfo.rot = new THREE.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);
                                    break;
                                case 1:
                                    keyInfo.scl = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));
                                    break;
                                case 2:
                                    keyInfo.pos = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));
                                    break;
                                }
                                if (!frameFound) {
                                    this._currentAnimeFrames.keyFrames.push(keyInfo);
                                }
                            } else {
                                keyInfo.matrix = new THREE.Matrix4();
                                this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));
                                this._currentAnimeFrames.keyFrames.push(keyInfo);
                            }
                        }
                    }
                },
                {
                    key: '_makeOutputAnimation',
                    value: function _makeOutputAnimation() {
                        var animationObj = new XAnimationObj(this.options);
                        animationObj.fps = this.animTicksPerSecond;
                        animationObj.name = this._currentAnime.name;
                        animationObj.make(this._currentAnime.AnimeFrames);
                        this.animations.push(animationObj);
                    }
                },
                {
                    key: 'assignAnimation',
                    value: function assignAnimation(_model, _animation) {
                        var model = _model;
                        var animation = _animation;
                        if (!model) {
                            model = this.Meshes[0];
                        }
                        if (!animation) {
                            animation = this.animations[0];
                        }
                        if (!model || !animation) {
                            return null;
                        }
                        var put = {};
                        put.fps = animation.fps;
                        put.name = animation.name;
                        put.length = animation.length;
                        put.hierarchy = [];
                        for (var b = 0; b < model.skeleton.bones.length; b++) {
                            var findAnimation = false;
                            for (var i = 0; i < animation.hierarchy.length; i++) {
                                if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {
                                    findAnimation = true;
                                    var c_key = animation.hierarchy[i].copy();
                                    c_key.parent = -1;
                                    if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {
                                        for (var bb = 0; bb < put.hierarchy.length; bb++) {
                                            if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {
                                                c_key.parent = bb;
                                                c_key.parentName = model.skeleton.bones[b].parent.name;
                                            }
                                        }
                                    }
                                    put.hierarchy.push(c_key);
                                    break;
                                }
                            }
                            if (!findAnimation) {
                                var _c_key = animation.hierarchy[0].copy();
                                _c_key.name = model.skeleton.bones[b].name;
                                _c_key.parent = -1;
                                for (var k = 0; k < _c_key.keys.length; k++) {
                                    if (_c_key.keys[k].pos) {
                                        _c_key.keys[k].pos.set(0, 0, 0);
                                    }
                                    if (_c_key.keys[k].scl) {
                                        _c_key.keys[k].scl.set(1, 1, 1);
                                    }
                                    if (_c_key.keys[k].rot) {
                                        _c_key.keys[k].rot.set(0, 0, 0, 1);
                                    }
                                }
                                put.hierarchy.push(_c_key);
                            }
                        }
                        if (!model.geometry.animations) {
                            model.geometry.animations = [];
                        }
                        model.geometry.animations.push(THREE.AnimationClip.parseAnimation(put, model.skeleton.bones));
                        if (!model.animationMixer) {
                            model.animationMixer = new THREE.AnimationMixer(model);
                        }
                        return put;
                    }
                },
                {
                    key: '_ParseMatrixData',
                    value: function _ParseMatrixData(targetMatrix, data) {
                        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));
                    }
                }
            ]);
            return XLoader;
        }();
        return XLoader;
    }();

    return XLoader;
});
define('skylark-threejs-ex/loaders/DDSLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var DDSLoader = function (manager) {
        THREE.CompressedTextureLoader.call(this, manager);
    };
    DDSLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {
        constructor: DDSLoader,
        parse: function (buffer, loadMipmaps) {
            var dds = {
                mipmaps: [],
                width: 0,
                height: 0,
                format: null,
                mipmapCount: 1
            };
            var DDS_MAGIC = 542327876;
            var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;
            var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;
            var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;
            var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;
            function fourCCToInt32(value) {
                return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);
            }
            function int32ToFourCC(value) {
                return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);
            }
            function loadARGBMip(buffer, dataOffset, width, height) {
                var dataLength = width * height * 4;
                var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);
                var byteArray = new Uint8Array(dataLength);
                var dst = 0;
                var src = 0;
                for (var y = 0; y < height; y++) {
                    for (var x = 0; x < width; x++) {
                        var b = srcBuffer[src];
                        src++;
                        var g = srcBuffer[src];
                        src++;
                        var r = srcBuffer[src];
                        src++;
                        var a = srcBuffer[src];
                        src++;
                        byteArray[dst] = r;
                        dst++;
                        byteArray[dst] = g;
                        dst++;
                        byteArray[dst] = b;
                        dst++;
                        byteArray[dst] = a;
                        dst++;
                    }
                }
                return byteArray;
            }
            var FOURCC_DXT1 = fourCCToInt32('DXT1');
            var FOURCC_DXT3 = fourCCToInt32('DXT3');
            var FOURCC_DXT5 = fourCCToInt32('DXT5');
            var FOURCC_ETC1 = fourCCToInt32('ETC1');
            var headerLengthInt = 31;
            var off_magic = 0;
            var off_size = 1;
            var off_flags = 2;
            var off_height = 3;
            var off_width = 4;
            var off_mipmapCount = 7;
            var off_pfFlags = 20;
            var off_pfFourCC = 21;
            var off_RGBBitCount = 22;
            var off_RBitMask = 23;
            var off_GBitMask = 24;
            var off_BBitMask = 25;
            var off_ABitMask = 26;
            var off_caps = 27;
            var off_caps2 = 28;
            var off_caps3 = 29;
            var off_caps4 = 30;
            var header = new Int32Array(buffer, 0, headerLengthInt);
            if (header[off_magic] !== DDS_MAGIC) {
                console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');
                return dds;
            }
            if (!header[off_pfFlags] & DDPF_FOURCC) {
                console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');
                return dds;
            }
            var blockBytes;
            var fourCC = header[off_pfFourCC];
            var isRGBAUncompressed = false;
            switch (fourCC) {
            case FOURCC_DXT1:
                blockBytes = 8;
                dds.format = THREE.RGB_S3TC_DXT1_Format;
                break;
            case FOURCC_DXT3:
                blockBytes = 16;
                dds.format = THREE.RGBA_S3TC_DXT3_Format;
                break;
            case FOURCC_DXT5:
                blockBytes = 16;
                dds.format = THREE.RGBA_S3TC_DXT5_Format;
                break;
            case FOURCC_ETC1:
                blockBytes = 8;
                dds.format = THREE.RGB_ETC1_Format;
                break;
            default:
                if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {
                    isRGBAUncompressed = true;
                    blockBytes = 64;
                    dds.format = THREE.RGBAFormat;
                } else {
                    console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));
                    return dds;
                }
            }
            dds.mipmapCount = 1;
            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {
                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);
            }
            var caps2 = header[off_caps2];
            dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;
            if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {
                console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');
                return dds;
            }
            dds.width = header[off_width];
            dds.height = header[off_height];
            var dataOffset = header[off_size] + 4;
            var faces = dds.isCubemap ? 6 : 1;
            for (var face = 0; face < faces; face++) {
                var width = dds.width;
                var height = dds.height;
                for (var i = 0; i < dds.mipmapCount; i++) {
                    if (isRGBAUncompressed) {
                        var byteArray = loadARGBMip(buffer, dataOffset, width, height);
                        var dataLength = byteArray.length;
                    } else {
                        var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;
                        var byteArray = new Uint8Array(buffer, dataOffset, dataLength);
                    }
                    var mipmap = {
                        'data': byteArray,
                        'width': width,
                        'height': height
                    };
                    dds.mipmaps.push(mipmap);
                    dataOffset += dataLength;
                    width = Math.max(width >> 1, 1);
                    height = Math.max(height >> 1, 1);
                }
            }
            return dds;
        }
    });
    return DDSLoader;
});
define('skylark-threejs-ex/loaders/PVRLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PVRLoader = function (manager) {
        THREE.CompressedTextureLoader.call(this, manager);
    };
    PVRLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {
        constructor: PVRLoader,
        parse: function (buffer, loadMipmaps) {
            var headerLengthInt = 13;
            var header = new Uint32Array(buffer, 0, headerLengthInt);
            var pvrDatas = {
                buffer: buffer,
                header: header,
                loadMipmaps: loadMipmaps
            };
            if (header[0] === 55727696) {
                return PVRLoader._parseV3(pvrDatas);
            } else if (header[11] === 559044176) {
                return PVRLoader._parseV2(pvrDatas);
            } else {
                console.error('THREE.PVRLoader: Unknown PVR format.');
            }
        }
    });
    PVRLoader._parseV3 = function (pvrDatas) {
        var header = pvrDatas.header;
        var bpp, format;
        var metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];
        switch (pixelFormat) {
        case 0:
            bpp = 2;
            format = THREE.RGB_PVRTC_2BPPV1_Format;
            break;
        case 1:
            bpp = 2;
            format = THREE.RGBA_PVRTC_2BPPV1_Format;
            break;
        case 2:
            bpp = 4;
            format = THREE.RGB_PVRTC_4BPPV1_Format;
            break;
        case 3:
            bpp = 4;
            format = THREE.RGBA_PVRTC_4BPPV1_Format;
            break;
        default:
            console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);
        }
        pvrDatas.dataPtr = 52 + metaLen;
        pvrDatas.bpp = bpp;
        pvrDatas.format = format;
        pvrDatas.width = width;
        pvrDatas.height = height;
        pvrDatas.numSurfaces = numFaces;
        pvrDatas.numMipmaps = numMipmaps;
        pvrDatas.isCubemap = numFaces === 6;
        return PVRLoader._extract(pvrDatas);
    };
    PVRLoader._parseV2 = function (pvrDatas) {
        var header = pvrDatas.header;
        var headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];
        var TYPE_MASK = 255;
        var PVRTC_2 = 24, PVRTC_4 = 25;
        var formatFlags = flags & TYPE_MASK;
        var bpp, format;
        var _hasAlpha = bitmaskAlpha > 0;
        if (formatFlags === PVRTC_4) {
            format = _hasAlpha ? THREE.RGBA_PVRTC_4BPPV1_Format : THREE.RGB_PVRTC_4BPPV1_Format;
            bpp = 4;
        } else if (formatFlags === PVRTC_2) {
            format = _hasAlpha ? THREE.RGBA_PVRTC_2BPPV1_Format : THREE.RGB_PVRTC_2BPPV1_Format;
            bpp = 2;
        } else {
            console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);
        }
        pvrDatas.dataPtr = headerLength;
        pvrDatas.bpp = bpp;
        pvrDatas.format = format;
        pvrDatas.width = width;
        pvrDatas.height = height;
        pvrDatas.numSurfaces = numSurfs;
        pvrDatas.numMipmaps = numMipmaps + 1;
        pvrDatas.isCubemap = numSurfs === 6;
        return PVRLoader._extract(pvrDatas);
    };
    PVRLoader._extract = function (pvrDatas) {
        var pvr = {
            mipmaps: [],
            width: pvrDatas.width,
            height: pvrDatas.height,
            format: pvrDatas.format,
            mipmapCount: pvrDatas.numMipmaps,
            isCubemap: pvrDatas.isCubemap
        };
        var buffer = pvrDatas.buffer;
        var dataOffset = pvrDatas.dataPtr, bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;
        if (bpp === 2) {
            blockWidth = 8;
            blockHeight = 4;
        } else {
            blockWidth = 4;
            blockHeight = 4;
        }
        blockSize = blockWidth * blockHeight * bpp / 8;
        pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;
        var mipLevel = 0;
        while (mipLevel < pvrDatas.numMipmaps) {
            var sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;
            widthBlocks = sWidth / blockWidth;
            heightBlocks = sHeight / blockHeight;
            if (widthBlocks < 2)
                widthBlocks = 2;
            if (heightBlocks < 2)
                heightBlocks = 2;
            dataSize = widthBlocks * heightBlocks * blockSize;
            for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {
                var byteArray = new Uint8Array(buffer, dataOffset, dataSize);
                var mipmap = {
                    data: byteArray,
                    width: sWidth,
                    height: sHeight
                };
                pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;
                dataOffset += dataSize;
            }
            mipLevel++;
        }
        return pvr;
    };
    return PVRLoader;
});
define('skylark-threejs-ex/loaders/KTXLoader',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var KTXLoader = function (manager) {
        THREE.CompressedTextureLoader.call(this, manager);
    };
    KTXLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {
        constructor: KTXLoader,
        parse: function (buffer, loadMipmaps) {
            var ktx = new KhronosTextureContainer(buffer, 1);
            return {
                mipmaps: ktx.mipmaps(loadMipmaps),
                width: ktx.pixelWidth,
                height: ktx.pixelHeight,
                format: ktx.glInternalFormat,
                isCubemap: ktx.numberOfFaces === 6,
                mipmapCount: ktx.numberOfMipmapLevels
            };
        }
    });
    var KhronosTextureContainer = function () {
        function KhronosTextureContainer(arrayBuffer, facesExpected) {
            this.arrayBuffer = arrayBuffer;
            var identifier = new Uint8Array(this.arrayBuffer, 0, 12);
            if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {
                console.error('texture missing KTX identifier');
                return;
            }
            var dataSize = Uint32Array.BYTES_PER_ELEMENT;
            var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);
            var endianness = headerDataView.getUint32(0, true);
            var littleEndian = endianness === 67305985;
            this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);
            this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);
            this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);
            this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);
            this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);
            this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);
            this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);
            this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);
            this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);
            this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);
            this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);
            this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);
            if (this.glType !== 0) {
                console.warn('only compressed formats currently supported');
                return;
            } else {
                this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);
            }
            if (this.pixelHeight === 0 || this.pixelDepth !== 0) {
                console.warn('only 2D textures currently supported');
                return;
            }
            if (this.numberOfArrayElements !== 0) {
                console.warn('texture arrays not currently supported');
                return;
            }
            if (this.numberOfFaces !== facesExpected) {
                console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);
                return;
            }
            this.loadType = KhronosTextureContainer.COMPRESSED_2D;
        }
        KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {
            var mipmaps = [];
            var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;
            var width = this.pixelWidth;
            var height = this.pixelHeight;
            var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;
            for (var level = 0; level < mipmapCount; level++) {
                var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];
                dataOffset += 4;
                for (var face = 0; face < this.numberOfFaces; face++) {
                    var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);
                    mipmaps.push({
                        'data': byteArray,
                        'width': width,
                        'height': height
                    });
                    dataOffset += imageSize;
                    dataOffset += 3 - (imageSize + 3) % 4;
                }
                width = Math.max(1, width * 0.5);
                height = Math.max(1, height * 0.5);
            }
            return mipmaps;
        };
        KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4;
        KhronosTextureContainer.COMPRESSED_2D = 0;
        KhronosTextureContainer.COMPRESSED_3D = 1;
        KhronosTextureContainer.TEX_2D = 2;
        KhronosTextureContainer.TEX_3D = 3;
        return KhronosTextureContainer;
    }();
    return KTXLoader;
});
define('skylark-threejs-ex/modifiers/SimplifyModifier',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SimplifyModifier = function () {
    };
    (function () {
        var cb = new THREE.Vector3(), ab = new THREE.Vector3();
        function pushIfUnique(array, object) {
            if (array.indexOf(object) === -1)
                array.push(object);
        }
        function removeFromArray(array, object) {
            var k = array.indexOf(object);
            if (k > -1)
                array.splice(k, 1);
        }
        function computeEdgeCollapseCost(u, v) {
            var edgelength = v.position.distanceTo(u.position);
            var curvature = 0;
            var sideFaces = [];
            var i, il = u.faces.length, face, sideFace;
            for (i = 0; i < il; i++) {
                face = u.faces[i];
                if (face.hasVertex(v)) {
                    sideFaces.push(face);
                }
            }
            for (i = 0; i < il; i++) {
                var minCurvature = 1;
                face = u.faces[i];
                for (var j = 0; j < sideFaces.length; j++) {
                    sideFace = sideFaces[j];
                    var dotProd = face.normal.dot(sideFace.normal);
                    minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);
                }
                curvature = Math.max(curvature, minCurvature);
            }
            var borders = 0;
            if (sideFaces.length < 2) {
                curvature = 1;
            }
            var amt = edgelength * curvature + borders;
            return amt;
        }
        function computeEdgeCostAtVertex(v) {
            if (v.neighbors.length === 0) {
                v.collapseNeighbor = null;
                v.collapseCost = -0.01;
                return;
            }
            v.collapseCost = 100000;
            v.collapseNeighbor = null;
            for (var i = 0; i < v.neighbors.length; i++) {
                var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);
                if (!v.collapseNeighbor) {
                    v.collapseNeighbor = v.neighbors[i];
                    v.collapseCost = collapseCost;
                    v.minCost = collapseCost;
                    v.totalCost = 0;
                    v.costCount = 0;
                }
                v.costCount++;
                v.totalCost += collapseCost;
                if (collapseCost < v.minCost) {
                    v.collapseNeighbor = v.neighbors[i];
                    v.minCost = collapseCost;
                }
            }
            v.collapseCost = v.totalCost / v.costCount;
        }
        function removeVertex(v, vertices) {
            console.assert(v.faces.length === 0);
            while (v.neighbors.length) {
                var n = v.neighbors.pop();
                removeFromArray(n.neighbors, v);
            }
            removeFromArray(vertices, v);
        }
        function removeFace(f, faces) {
            removeFromArray(faces, f);
            if (f.v1)
                removeFromArray(f.v1.faces, f);
            if (f.v2)
                removeFromArray(f.v2.faces, f);
            if (f.v3)
                removeFromArray(f.v3.faces, f);
            var vs = [
                f.v1,
                f.v2,
                f.v3
            ];
            var v1, v2;
            for (var i = 0; i < 3; i++) {
                v1 = vs[i];
                v2 = vs[(i + 1) % 3];
                if (!v1 || !v2)
                    continue;
                v1.removeIfNonNeighbor(v2);
                v2.removeIfNonNeighbor(v1);
            }
        }
        function collapse(vertices, faces, u, v) {
            if (!v) {
                removeVertex(u, vertices);
                return;
            }
            var i;
            var tmpVertices = [];
            for (i = 0; i < u.neighbors.length; i++) {
                tmpVertices.push(u.neighbors[i]);
            }
            for (i = u.faces.length - 1; i >= 0; i--) {
                if (u.faces[i].hasVertex(v)) {
                    removeFace(u.faces[i], faces);
                }
            }
            for (i = u.faces.length - 1; i >= 0; i--) {
                u.faces[i].replaceVertex(u, v);
            }
            removeVertex(u, vertices);
            for (i = 0; i < tmpVertices.length; i++) {
                computeEdgeCostAtVertex(tmpVertices[i]);
            }
        }
        function minimumCostEdge(vertices) {
            var least = vertices[0];
            for (var i = 0; i < vertices.length; i++) {
                if (vertices[i].collapseCost < least.collapseCost) {
                    least = vertices[i];
                }
            }
            return least;
        }
        function Triangle(v1, v2, v3, a, b, c) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.v1 = v1;
            this.v2 = v2;
            this.v3 = v3;
            this.normal = new THREE.Vector3();
            this.computeNormal();
            v1.faces.push(this);
            v1.addUniqueNeighbor(v2);
            v1.addUniqueNeighbor(v3);
            v2.faces.push(this);
            v2.addUniqueNeighbor(v1);
            v2.addUniqueNeighbor(v3);
            v3.faces.push(this);
            v3.addUniqueNeighbor(v1);
            v3.addUniqueNeighbor(v2);
        }
        Triangle.prototype.computeNormal = function () {
            var vA = this.v1.position;
            var vB = this.v2.position;
            var vC = this.v3.position;
            cb.subVectors(vC, vB);
            ab.subVectors(vA, vB);
            cb.cross(ab).normalize();
            this.normal.copy(cb);
        };
        Triangle.prototype.hasVertex = function (v) {
            return v === this.v1 || v === this.v2 || v === this.v3;
        };
        Triangle.prototype.replaceVertex = function (oldv, newv) {
            if (oldv === this.v1)
                this.v1 = newv;
            else if (oldv === this.v2)
                this.v2 = newv;
            else if (oldv === this.v3)
                this.v3 = newv;
            removeFromArray(oldv.faces, this);
            newv.faces.push(this);
            oldv.removeIfNonNeighbor(this.v1);
            this.v1.removeIfNonNeighbor(oldv);
            oldv.removeIfNonNeighbor(this.v2);
            this.v2.removeIfNonNeighbor(oldv);
            oldv.removeIfNonNeighbor(this.v3);
            this.v3.removeIfNonNeighbor(oldv);
            this.v1.addUniqueNeighbor(this.v2);
            this.v1.addUniqueNeighbor(this.v3);
            this.v2.addUniqueNeighbor(this.v1);
            this.v2.addUniqueNeighbor(this.v3);
            this.v3.addUniqueNeighbor(this.v1);
            this.v3.addUniqueNeighbor(this.v2);
            this.computeNormal();
        };
        function Vertex(v, id) {
            this.position = v;
            this.id = id;
            this.faces = [];
            this.neighbors = [];
            this.collapseCost = 0;
            this.collapseNeighbor = null;
        }
        Vertex.prototype.addUniqueNeighbor = function (vertex) {
            pushIfUnique(this.neighbors, vertex);
        };
        Vertex.prototype.removeIfNonNeighbor = function (n) {
            var neighbors = this.neighbors;
            var faces = this.faces;
            var offset = neighbors.indexOf(n);
            if (offset === -1)
                return;
            for (var i = 0; i < faces.length; i++) {
                if (faces[i].hasVertex(n))
                    return;
            }
            neighbors.splice(offset, 1);
        };
        SimplifyModifier.prototype.modify = function (geometry, count) {
            if (geometry.isBufferGeometry) {
                geometry = new THREE.Geometry().fromBufferGeometry(geometry);
            }
            geometry.mergeVertices();
            var oldVertices = geometry.vertices;
            var oldFaces = geometry.faces;
            var vertices = [];
            var faces = [];
            var i, il;
            for (i = 0, il = oldVertices.length; i < il; i++) {
                var vertex = new Vertex(oldVertices[i], i);
                vertices.push(vertex);
            }
            for (i = 0, il = oldFaces.length; i < il; i++) {
                var face = oldFaces[i];
                var a = face.a;
                var b = face.b;
                var c = face.c;
                var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);
                faces.push(triangle);
            }
            for (i = 0, il = vertices.length; i < il; i++) {
                computeEdgeCostAtVertex(vertices[i]);
            }
            var nextVertex;
            var z = count;
            while (z--) {
                nextVertex = minimumCostEdge(vertices);
                if (!nextVertex) {
                    console.log('THREE.SimplifyModifier: No next vertex');
                    break;
                }
                collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);
            }
            var simplifiedGeometry = new THREE.BufferGeometry();
            var position = [];
            var index = [];
            for (i = 0; i < vertices.length; i++) {
                var vertex = vertices[i].position;
                position.push(vertex.x, vertex.y, vertex.z);
            }
            for (i = 0; i < faces.length; i++) {
                var face = faces[i];
                var a = vertices.indexOf(face.v1);
                var b = vertices.indexOf(face.v2);
                var c = vertices.indexOf(face.v3);
                index.push(a, b, c);
            }
            simplifiedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));
            simplifiedGeometry.setIndex(index);
            return simplifiedGeometry;
        };
    }());
    return SimplifyModifier;
});
define('skylark-threejs-ex/modifiers/SubdivisionModifier',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var SubdivisionModifier = function (subdivisions) {
        this.subdivisions = subdivisions === undefined ? 1 : subdivisions;
    };
    SubdivisionModifier.prototype.modify = function (geometry) {
        if (geometry.isBufferGeometry) {
            geometry = new THREE.Geometry().fromBufferGeometry(geometry);
        } else {
            geometry = geometry.clone();
        }
        geometry.mergeVertices();
        var repeats = this.subdivisions;
        while (repeats-- > 0) {
            this.smooth(geometry);
        }
        geometry.computeFaceNormals();
        geometry.computeVertexNormals();
        return geometry;
    };
    (function () {
        var ABC = [
            'a',
            'b',
            'c'
        ];
        function getEdge(a, b, map) {
            var vertexIndexA = Math.min(a, b);
            var vertexIndexB = Math.max(a, b);
            var key = vertexIndexA + '_' + vertexIndexB;
            return map[key];
        }
        function processEdge(a, b, vertices, map, face, metaVertices) {
            var vertexIndexA = Math.min(a, b);
            var vertexIndexB = Math.max(a, b);
            var key = vertexIndexA + '_' + vertexIndexB;
            var edge;
            if (key in map) {
                edge = map[key];
            } else {
                var vertexA = vertices[vertexIndexA];
                var vertexB = vertices[vertexIndexB];
                edge = {
                    a: vertexA,
                    b: vertexB,
                    newEdge: null,
                    faces: []
                };
                map[key] = edge;
            }
            edge.faces.push(face);
            metaVertices[a].edges.push(edge);
            metaVertices[b].edges.push(edge);
        }
        function generateLookups(vertices, faces, metaVertices, edges) {
            var i, il, face;
            for (i = 0, il = vertices.length; i < il; i++) {
                metaVertices[i] = { edges: [] };
            }
            for (i = 0, il = faces.length; i < il; i++) {
                face = faces[i];
                processEdge(face.a, face.b, vertices, edges, face, metaVertices);
                processEdge(face.b, face.c, vertices, edges, face, metaVertices);
                processEdge(face.c, face.a, vertices, edges, face, metaVertices);
            }
        }
        function newFace(newFaces, a, b, c, materialIndex) {
            newFaces.push(new THREE.Face3(a, b, c, undefined, undefined, materialIndex));
        }
        function midpoint(a, b) {
            return Math.abs(b - a) / 2 + Math.min(a, b);
        }
        function newUv(newUvs, a, b, c) {
            newUvs.push([
                THREE.clone(),
                b.clone(),
                c.clone()
            ]);
        }
        SubdivisionModifier.prototype.smooth = function (geometry) {
            var tmp = new THREE.Vector3();
            var oldVertices, oldFaces, oldUvs;
            var newVertices, newFaces, newUVs = [];
            var n, i, il, j, k;
            var metaVertices, sourceEdges;
            var sourceEdges, newEdgeVertices, newSourceVertices;
            oldVertices = geometry.vertices;
            oldFaces = geometry.faces;
            oldUvs = geometry.faceVertexUvs;
            var hasUvs = oldUvs[0] !== undefined && oldUvs[0].length > 0;
            if (hasUvs) {
                for (var j = 0; j < oldUvs.length; j++) {
                    newUVs.push([]);
                }
            }
            metaVertices = new Array(oldVertices.length);
            sourceEdges = {};
            generateLookups(oldVertices, oldFaces, metaVertices, sourceEdges);
            newEdgeVertices = [];
            var other, currentEdge, newEdge, face;
            var edgeVertexWeight, adjacentVertexWeight, connectedFaces;
            for (i in sourceEdges) {
                currentEdge = sourceEdges[i];
                newEdge = new THREE.Vector3();
                edgeVertexWeight = 3 / 8;
                adjacentVertexWeight = 1 / 8;
                connectedFaces = currentEdge.faces.length;
                if (connectedFaces != 2) {
                    edgeVertexWeight = 0.5;
                    adjacentVertexWeight = 0;
                    if (connectedFaces != 1) {
                    }
                }
                newEdge.addVectors(currentEdge.a, currentEdge.b).multiplyScalar(edgeVertexWeight);
                tmp.set(0, 0, 0);
                for (j = 0; j < connectedFaces; j++) {
                    face = currentEdge.faces[j];
                    for (k = 0; k < 3; k++) {
                        other = oldVertices[face[ABC[k]]];
                        if (other !== currentEdge.a && other !== currentEdge.b)
                            break;
                    }
                    tmp.add(other);
                }
                tmp.multiplyScalar(adjacentVertexWeight);
                newEdge.add(tmp);
                currentEdge.newEdge = newEdgeVertices.length;
                newEdgeVertices.push(newEdge);
            }
            var beta, sourceVertexWeight, connectingVertexWeight;
            var connectingEdge, connectingEdges, oldVertex, newSourceVertex;
            newSourceVertices = [];
            for (i = 0, il = oldVertices.length; i < il; i++) {
                oldVertex = oldVertices[i];
                connectingEdges = metaVertices[i].edges;
                n = connectingEdges.length;
                if (n == 3) {
                    beta = 3 / 16;
                } else if (n > 3) {
                    beta = 3 / (8 * n);
                }
                sourceVertexWeight = 1 - n * beta;
                connectingVertexWeight = beta;
                if (n <= 2) {
                    if (n == 2) {
                        sourceVertexWeight = 3 / 4;
                        connectingVertexWeight = 1 / 8;
                    } else if (n == 1) {
                    } else if (n == 0) {
                    }
                }
                newSourceVertex = oldVertex.clone().multiplyScalar(sourceVertexWeight);
                tmp.set(0, 0, 0);
                for (j = 0; j < n; j++) {
                    connectingEdge = connectingEdges[j];
                    other = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;
                    tmp.add(other);
                }
                tmp.multiplyScalar(connectingVertexWeight);
                newSourceVertex.add(tmp);
                newSourceVertices.push(newSourceVertex);
            }
            newVertices = newSourceVertices.concat(newEdgeVertices);
            var sl = newSourceVertices.length, edge1, edge2, edge3;
            newFaces = [];
            var uv, x0, x1, x2;
            var x3 = new THREE.Vector2();
            var x4 = new THREE.Vector2();
            var x5 = new THREE.Vector2();
            for (i = 0, il = oldFaces.length; i < il; i++) {
                face = oldFaces[i];
                edge1 = getEdge(face.a, face.b, sourceEdges).newEdge + sl;
                edge2 = getEdge(face.b, face.c, sourceEdges).newEdge + sl;
                edge3 = getEdge(face.c, face.a, sourceEdges).newEdge + sl;
                newFace(newFaces, edge1, edge2, edge3, face.materialIndex);
                newFace(newFaces, face.a, edge1, edge3, face.materialIndex);
                newFace(newFaces, face.b, edge2, edge1, face.materialIndex);
                newFace(newFaces, face.c, edge3, edge2, face.materialIndex);
                if (hasUvs) {
                    for (var j = 0; j < oldUvs.length; j++) {
                        uv = oldUvs[j][i];
                        x0 = uv[0];
                        x1 = uv[1];
                        x2 = uv[2];
                        x3.set(midpoint(x0.x, x1.x), midpoint(x0.y, x1.y));
                        x4.set(midpoint(x1.x, x2.x), midpoint(x1.y, x2.y));
                        x5.set(midpoint(x0.x, x2.x), midpoint(x0.y, x2.y));
                        newUv(newUVs[j], x3, x4, x5);
                        newUv(newUVs[j], x0, x3, x5);
                        newUv(newUVs[j], x1, x4, x3);
                        newUv(newUVs[j], x2, x5, x4);
                    }
                }
            }
            geometry.vertices = newVertices;
            geometry.faces = newFaces;
            if (hasUvs)
                geometry.faceVertexUvs = newUVs;
        };
    }());
    return SubdivisionModifier;
});
define('skylark-threejs-ex/exporters/ColladaExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var ColladaExporter = function () {
    };
    ColladaExporter.prototype = {
        constructor: ColladaExporter,
        parse: function (object, onDone, options) {
            options = options || {};
            options = Object.assign({
                version: '1.4.1',
                author: null,
                textureDirectory: ''
            }, options);
            if (options.textureDirectory !== '') {
                options.textureDirectory = `${ options.textureDirectory }/`.replace(/\\/g, '/').replace(/\/+/g, '/');
            }
            var version = options.version;
            if (version !== '1.4.1' && version !== '1.5.0') {
                console.warn(`ColladaExporter : Version ${ version } not supported for export. Only 1.4.1 and 1.5.0.`);
                return null;
            }
            function format(urdf) {
                var IS_END_TAG = /^<\//;
                var IS_SELF_CLOSING = /(\?>$)|(\/>$)/;
                var HAS_TEXT = /<[^>]+>[^<]*<\/[^<]+>/;
                var pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';
                var tagnum = 0;
                return urdf.match(/(<[^>]+>[^<]+<\/[^<]+>)|(<[^>]+>)/g).map(tag => {
                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {
                        tagnum--;
                    }
                    var res = `${ pad('  ', tagnum) }${ tag }`;
                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {
                        tagnum++;
                    }
                    return res;
                }).join('\n');
            }
            function base64ToBuffer(str) {
                var b = atob(str);
                var buf = new Uint8Array(b.length);
                for (var i = 0, l = buf.length; i < l; i++) {
                    buf[i] = b.charCodeAt(i);
                }
                return buf;
            }
            var canvas, ctx;
            function imageToData(image, ext) {
                canvas = canvas || document.createElement('canvas');
                ctx = ctx || canvas.getContext('2d');
                canvas.width = image.naturalWidth;
                canvas.height = image.naturalHeight;
                ctx.drawImage(image, 0, 0);
                var base64data = canvas.toDataURL(`image/${ ext }`, 1).replace(/^data:image\/(png|jpg);base64,/, '');
                return base64ToBuffer(base64data);
            }
            var getFuncs = [
                'getX',
                'getY',
                'getZ',
                'getW'
            ];
            function attrBufferToArray(attr) {
                if (attr.isInterleavedBufferAttribute) {
                    var arr = new attr.array.constructor(attr.count * attr.itemSize);
                    var size = attr.itemSize;
                    for (var i = 0, l = attr.count; i < l; i++) {
                        for (var j = 0; j < size; j++) {
                            arr[i * size + j] = attr[getFuncs[j]](i);
                        }
                    }
                    return arr;
                } else {
                    return attr.array;
                }
            }
            function subArray(arr, st, ct) {
                if (Array.isArray(arr))
                    return arr.slice(st, st + ct);
                else
                    return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);
            }
            function getAttribute(attr, name, params, type) {
                var array = attrBufferToArray(attr);
                var res = `<source id="${ name }">` + `<float_array id="${ name }-array" count="${ array.length }">` + array.join(' ') + '</float_array>' + '<technique_common>' + `<accessor source="#${ name }-array" count="${ Math.floor(array.length / attr.itemSize) }" stride="${ attr.itemSize }">` + params.map(n => `<param name="${ n }" type="${ type }" />`).join('') + '</accessor>' + '</technique_common>' + '</source>';
                return res;
            }
            var transMat;
            function getTransform(o) {
                o.updateMatrix();
                transMat = transMat || new THREE.Matrix4();
                transMat.copy(o.matrix);
                transMat.transpose();
                return `<matrix>${ transMat.toArray().join(' ') }</matrix>`;
            }
            function processGeometry(g) {
                var info = geometryInfo.get(g);
                if (!info) {
                    var bufferGeometry = g;
                    if (bufferGeometry instanceof THREE.Geometry) {
                        bufferGeometry = new THREE.BufferGeometry().fromGeometry(bufferGeometry);
                    }
                    var meshid = `Mesh${ libraryGeometries.length + 1 }`;
                    var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;
                    var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{
                            start: 0,
                            count: indexCount,
                            materialIndex: 0
                        }];
                    var gname = g.name ? ` name="${ g.name }"` : '';
                    var gnode = `<geometry id="${ meshid }"${ gname }><mesh>`;
                    var posName = `${ meshid }-position`;
                    var vertName = `${ meshid }-vertices`;
                    gnode += getAttribute(bufferGeometry.attributes.position, posName, [
                        'X',
                        'Y',
                        'Z'
                    ], 'float');
                    gnode += `<vertices id="${ vertName }"><input semantic="POSITION" source="#${ posName }" /></vertices>`;
                    var triangleInputs = `<input semantic="VERTEX" source="#${ vertName }" offset="0" />`;
                    if ('normal' in bufferGeometry.attributes) {
                        var normName = `${ meshid }-normal`;
                        gnode += getAttribute(bufferGeometry.attributes.normal, normName, [
                            'X',
                            'Y',
                            'Z'
                        ], 'float');
                        triangleInputs += `<input semantic="NORMAL" source="#${ normName }" offset="0" />`;
                    }
                    if ('uv' in bufferGeometry.attributes) {
                        var uvName = `${ meshid }-texcoord`;
                        gnode += getAttribute(bufferGeometry.attributes.uv, uvName, [
                            'S',
                            'T'
                        ], 'float');
                        triangleInputs += `<input semantic="TEXCOORD" source="#${ uvName }" offset="0" set="0" />`;
                    }
                    if ('color' in bufferGeometry.attributes) {
                        var colName = `${ meshid }-color`;
                        gnode += getAttribute(bufferGeometry.attributes.color, colName, [
                            'X',
                            'Y',
                            'Z'
                        ], 'uint8');
                        triangleInputs += `<input semantic="COLOR" source="#${ colName }" offset="0" />`;
                    }
                    var indexArray = null;
                    if (bufferGeometry.index) {
                        indexArray = attrBufferToArray(bufferGeometry.index);
                    } else {
                        indexArray = new Array(indexCount);
                        for (var i = 0, l = indexArray.length; i < l; i++)
                            indexArray[i] = i;
                    }
                    for (var i = 0, l = groups.length; i < l; i++) {
                        var group = groups[i];
                        var subarr = subArray(indexArray, group.start, group.count);
                        var polycount = subarr.length / 3;
                        gnode += `<triangles material="MESH_MATERIAL_${ group.materialIndex }" count="${ polycount }">`;
                        gnode += triangleInputs;
                        gnode += `<p>${ subarr.join(' ') }</p>`;
                        gnode += '</triangles>';
                    }
                    gnode += `</mesh></geometry>`;
                    libraryGeometries.push(gnode);
                    info = {
                        meshid: meshid,
                        bufferGeometry: bufferGeometry
                    };
                    geometryInfo.set(g, info);
                }
                return info;
            }
            function processTexture(tex) {
                var texid = imageMap.get(tex);
                if (texid == null) {
                    texid = `image-${ libraryImages.length + 1 }`;
                    var ext = 'png';
                    var name = tex.name || texid;
                    var imageNode = `<image id="${ texid }" name="${ name }">`;
                    if (version === '1.5.0') {
                        imageNode += `<init_from><ref>${ options.textureDirectory }${ name }.${ ext }</ref></init_from>`;
                    } else {
                        imageNode += `<init_from>${ options.textureDirectory }${ name }.${ ext }</init_from>`;
                    }
                    imageNode += '</image>';
                    libraryImages.push(imageNode);
                    imageMap.set(tex, texid);
                    textures.push({
                        directory: options.textureDirectory,
                        name,
                        ext,
                        data: imageToData(tex.image, ext),
                        original: tex
                    });
                }
                return texid;
            }
            function processMaterial(m) {
                var matid = materialMap.get(m);
                if (matid == null) {
                    matid = `Mat${ libraryEffects.length + 1 }`;
                    var type = 'phong';
                    if (m instanceof THREE.MeshLambertMaterial) {
                        type = 'lambert';
                    } else if (m instanceof THREE.MeshBasicMaterial) {
                        type = 'constant';
                        if (m.map !== null) {
                            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');
                        }
                    }
                    var emissive = m.emissive ? m.emissive : new THREE.Color(0, 0, 0);
                    var diffuse = m.color ? m.color : new THREE.Color(0, 0, 0);
                    var specular = m.specular ? m.specular : new THREE.Color(1, 1, 1);
                    var shininess = m.shininess || 0;
                    var reflectivity = m.reflectivity || 0;
                    var transparencyNode = '';
                    if (m.transparent === true) {
                        transparencyNode += `<transparent>` + (m.map ? `<texture texture="diffuse-sampler"></texture>` : '<float>1</float>') + '</transparent>';
                        if (m.opacity < 1) {
                            transparencyNode += `<transparency><float>${ m.opacity }</float></transparency>`;
                        }
                    }
                    var techniqueNode = `<technique sid="common"><${ type }>` + '<emission>' + (m.emissiveMap ? '<texture texture="emissive-sampler" texcoord="TEXCOORD" />' : `<color sid="emission">${ emissive.r } ${ emissive.g } ${ emissive.b } 1</color>`) + '</emission>' + (type !== 'constant' ? '<diffuse>' + (m.map ? '<texture texture="diffuse-sampler" texcoord="TEXCOORD" />' : `<color sid="diffuse">${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color>`) + '</diffuse>' : '') + (type !== 'constant' ? '<bump>' + (m.normalMap ? '<texture texture="bump-sampler" texcoord="TEXCOORD" />' : '') + '</bump>' : '') + (type === 'phong' ? `<specular><color sid="specular">${ specular.r } ${ specular.g } ${ specular.b } 1</color></specular>` + '<shininess>' + (m.specularMap ? '<texture texture="specular-sampler" texcoord="TEXCOORD" />' : `<float sid="shininess">${ shininess }</float>`) + '</shininess>' : '') + `<reflective><color>${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color></reflective>` + `<reflectivity><float>${ reflectivity }</float></reflectivity>` + transparencyNode + `</${ type }></technique>`;
                    var effectnode = `<effect id="${ matid }-effect">` + '<profile_COMMON>' + (m.map ? '<newparam sid="diffuse-surface"><surface type="2D">' + `<init_from>${ processTexture(m.map) }</init_from>` + '</surface></newparam>' + '<newparam sid="diffuse-sampler"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>' : '') + (m.specularMap ? '<newparam sid="specular-surface"><surface type="2D">' + `<init_from>${ processTexture(m.specularMap) }</init_from>` + '</surface></newparam>' + '<newparam sid="specular-sampler"><sampler2D><source>specular-surface</source></sampler2D></newparam>' : '') + (m.emissiveMap ? '<newparam sid="emissive-surface"><surface type="2D">' + `<init_from>${ processTexture(m.emissiveMap) }</init_from>` + '</surface></newparam>' + '<newparam sid="emissive-sampler"><sampler2D><source>emissive-surface</source></sampler2D></newparam>' : '') + (m.normalMap ? '<newparam sid="bump-surface"><surface type="2D">' + `<init_from>${ processTexture(m.normalMap) }</init_from>` + '</surface></newparam>' + '<newparam sid="bump-sampler"><sampler2D><source>bump-surface</source></sampler2D></newparam>' : '') + techniqueNode + (m.side === THREE.DoubleSide ? `<extra><technique profile="THREEJS"><double_sided sid="double_sided" type="int">1</double_sided></technique></extra>` : '') + '</profile_COMMON>' + '</effect>';
                    var materialName = m.name ? ` name="${ m.name }"` : '';
                    var materialNode = `<material id="${ matid }"${ materialName }><instance_effect url="#${ matid }-effect" /></material>`;
                    libraryMaterials.push(materialNode);
                    libraryEffects.push(effectnode);
                    materialMap.set(m, matid);
                }
                return matid;
            }
            function processObject(o) {
                var node = `<node name="${ o.name }">`;
                node += getTransform(o);
                if (o instanceof THREE.Mesh && o.geometry != null) {
                    var geomInfo = processGeometry(o.geometry);
                    var meshid = geomInfo.meshid;
                    var geometry = geomInfo.bufferGeometry;
                    var matids = null;
                    var matidsArray = [];
                    var mat = o.material || new THREE.MeshBasicMaterial();
                    var materials = Array.isArray(mat) ? mat : [mat];
                    if (geometry.groups.length > materials.length) {
                        matidsArray = new Array(geometry.groups.length);
                    } else {
                        matidsArray = new Array(materials.length);
                    }
                    matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));
                    node += `<instance_geometry url="#${ meshid }">` + (matids != null ? '<bind_material><technique_common>' + matids.map((id, i) => `<instance_material symbol="MESH_MATERIAL_${ i }" target="#${ id }" >` + '<bind_vertex_input semantic="TEXCOORD" input_semantic="TEXCOORD" input_set="0" />' + '</instance_material>').join('') + '</technique_common></bind_material>' : '') + '</instance_geometry>';
                }
                o.children.forEach(c => node += processObject(c));
                node += '</node>';
                return node;
            }
            var geometryInfo = new WeakMap();
            var materialMap = new WeakMap();
            var imageMap = new WeakMap();
            var textures = [];
            var libraryImages = [];
            var libraryGeometries = [];
            var libraryEffects = [];
            var libraryMaterials = [];
            var libraryVisualScenes = processObject(object);
            var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';
            var dae = '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>' + `<COLLADA xmlns="${ specLink }" version="${ version }">` + '<asset>' + ('<contributor>' + '<authoring_tool>three.js Collada Exporter</authoring_tool>' + (options.author !== null ? `<author>${ options.author }</author>` : '') + '</contributor>' + `<created>${ new Date().toISOString() }</created>` + `<modified>${ new Date().toISOString() }</modified>` + '<up_axis>Y_UP</up_axis>') + '</asset>';
            dae += `<library_images>${ libraryImages.join('') }</library_images>`;
            dae += `<library_effects>${ libraryEffects.join('') }</library_effects>`;
            dae += `<library_materials>${ libraryMaterials.join('') }</library_materials>`;
            dae += `<library_geometries>${ libraryGeometries.join('') }</library_geometries>`;
            dae += `<library_visual_scenes><visual_scene id="Scene" name="scene">${ libraryVisualScenes }</visual_scene></library_visual_scenes>`;
            dae += '<scene><instance_visual_scene url="#Scene"/></scene>';
            dae += '</COLLADA>';
            var res = {
                data: format(dae),
                textures
            };
            if (typeof onDone === 'function') {
                requestAnimationFrame(() => onDone(res));
            }
            return res;
        }
    };
    return ColladaExporter;
});
define('skylark-threejs-ex/exporters/DRACOExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var DRACOExporter = function () {
    };
    DRACOExporter.prototype = {
        constructor: DRACOExporter,
        parse: function (geometry, options) {
            if (DracoEncoderModule === undefined) {
                throw new Error('THREE.DRACOExporter: required the draco_decoder to work.');
            }
            if (options === undefined) {
                options = {
                    decodeSpeed: 5,
                    encodeSpeed: 5,
                    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,
                    quantization: [
                        16,
                        8,
                        8,
                        8,
                        8
                    ],
                    exportUvs: true,
                    exportNormals: true,
                    exportColor: false
                };
            }
            var dracoEncoder = DracoEncoderModule();
            var encoder = new dracoEncoder.Encoder();
            var builder = new dracoEncoder.MeshBuilder();
            var mesh = new dracoEncoder.Mesh();
            if (geometry.isGeometry === true) {
                var bufferGeometry = new THREE.BufferGeometry();
                bufferGeometry.fromGeometry(geometry);
                geometry = bufferGeometry;
            }
            if (geometry.isBufferGeometry !== true) {
                throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or BufferGeometry instance.');
            }
            var vertices = geometry.getAttribute('position');
            builder.AddFloatAttributeToMesh(mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);
            var faces = geometry.getIndex();
            if (faces !== null) {
                builder.AddFacesToMesh(mesh, faces.count, faces.array);
            } else {
                var faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);
                for (var i = 0; i < faces.length; i++) {
                    faces[i] = i;
                }
                builder.AddFacesToMesh(mesh, vertices.count, faces);
            }
            if (options.exportNormals === true) {
                var normals = geometry.getAttribute('normal');
                if (normals !== undefined) {
                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);
                }
            }
            if (options.exportUvs === true) {
                var uvs = geometry.getAttribute('uv');
                if (uvs !== undefined) {
                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);
                }
            }
            if (options.exportColor === true) {
                var colors = geometry.getAttribute('color');
                if (colors !== undefined) {
                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);
                }
            }
            var encodedData = new dracoEncoder.DracoInt8Array();
            encoder.SetSpeedOptions(options.encodeSpeed || 5, options.decodeSpeed || 5);
            if (options.encoderMethod !== undefined) {
                encoder.SetEncodingMethod(options.encoderMethod);
            }
            if (options.quantization !== undefined) {
                for (var i = 0; i < 5; i++) {
                    if (options.quantization[i] !== undefined) {
                        encoder.SetAttributeQuantization(i, options.quantization[i]);
                    }
                }
            }
            var length = encoder.EncodeMeshToDracoBuffer(mesh, encodedData);
            dracoEncoder.destroy(mesh);
            if (length === 0) {
                throw new Error('THREE.DRACOExporter: Draco encoding failed.');
            }
            var outputData = new Int8Array(new ArrayBuffer(length));
            for (var i = 0; i < length; i++) {
                outputData[i] = encodedData.GetValue(i);
            }
            dracoEncoder.destroy(encodedData);
            dracoEncoder.destroy(encoder);
            dracoEncoder.destroy(builder);
            return outputData;
        }
    };
    DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;
    DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;
    DRACOExporter.POINT_CLOUD = 0;
    DRACOExporter.TRIANGULAR_MESH = 1;
    DRACOExporter.INVALID = -1;
    DRACOExporter.POSITION = 0;
    DRACOExporter.NORMAL = 1;
    DRACOExporter.COLOR = 2;
    DRACOExporter.TEX_COORD = 3;
    DRACOExporter.GENERIC = 4;

    return DRACOExporter;
});
define('skylark-threejs-ex/exporters/GLTFExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var WEBGL_CONSTANTS = {
        POINTS: 0,
        LINES: 1,
        LINE_LOOP: 2,
        LINE_STRIP: 3,
        TRIANGLES: 4,
        TRIANGLE_STRIP: 5,
        TRIANGLE_FAN: 6,
        UNSIGNED_BYTE: 5121,
        UNSIGNED_SHORT: 5123,
        FLOAT: 5126,
        UNSIGNED_INT: 5125,
        ARRAY_BUFFER: 34962,
        ELEMENT_ARRAY_BUFFER: 34963,
        NEAREST: 9728,
        LINEAR: 9729,
        NEAREST_MIPMAP_NEAREST: 9984,
        LINEAR_MIPMAP_NEAREST: 9985,
        NEAREST_MIPMAP_LINEAR: 9986,
        LINEAR_MIPMAP_LINEAR: 9987,
        CLAMP_TO_EDGE: 33071,
        MIRRORED_REPEAT: 33648,
        REPEAT: 10497
    };
    var THREE_TO_WEBGL = {};
    THREE_TO_WEBGL[THREE.NearestFilter] = WEBGL_CONSTANTS.NEAREST;
    THREE_TO_WEBGL[THREE.NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;
    THREE_TO_WEBGL[THREE.NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;
    THREE_TO_WEBGL[THREE.LinearFilter] = WEBGL_CONSTANTS.LINEAR;
    THREE_TO_WEBGL[THREE.LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;
    THREE_TO_WEBGL[THREE.LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;
    THREE_TO_WEBGL[THREE.ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;
    THREE_TO_WEBGL[THREE.RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;
    THREE_TO_WEBGL[THREE.MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;
    var PATH_PROPERTIES = {
        scale: 'scale',
        position: 'translation',
        quaternion: 'rotation',
        morphTargetInfluences: 'weights'
    };
    var GLTFExporter = function () {
    };
    GLTFExporter.prototype = {
        constructor: GLTFExporter,
        parse: function (input, onDone, options) {
            var DEFAULT_OPTIONS = {
                binary: false,
                trs: false,
                onlyVisible: true,
                truncateDrawRange: true,
                embedImages: true,
                maxTextureSize: Infinity,
                animations: [],
                forceIndices: false,
                forcePowerOfTwoTextures: false,
                includeCustomExtensions: false
            };
            options = Object.assign({}, DEFAULT_OPTIONS, options);
            if (options.animations.length > 0) {
                options.trs = true;
            }
            var outputJSON = {
                asset: {
                    version: '2.0',
                    generator: 'GLTFExporter'
                }
            };
            var byteOffset = 0;
            var buffers = [];
            var pending = [];
            var nodeMap = new Map();
            var skins = [];
            var extensionsUsed = {};
            var cachedData = {
                meshes: new Map(),
                attributes: new Map(),
                attributesNormalized: new Map(),
                materials: new Map(),
                textures: new Map(),
                images: new Map()
            };
            var cachedCanvas;
            var uids = new Map();
            var uid = 0;
            function getUID(object) {
                if (!uids.has(object))
                    uids.set(object, uid++);
                return uids.get(object);
            }
            function equalArray(array1, array2) {
                return array1.length === array2.length && array1.every(function (element, index) {
                    return element === array2[index];
                });
            }
            function stringToArrayBuffer(text) {
                if (window.TextEncoder !== undefined) {
                    return new TextEncoder().encode(text).buffer;
                }
                var array = new Uint8Array(new ArrayBuffer(text.length));
                for (var i = 0, il = text.length; i < il; i++) {
                    var value = text.charCodeAt(i);
                    array[i] = value > 255 ? 32 : value;
                }
                return array.buffer;
            }
            function getMinMax(attribute, start, count) {
                var output = {
                    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),
                    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)
                };
                for (var i = start; i < start + count; i++) {
                    for (var a = 0; a < attribute.itemSize; a++) {
                        var value = attribute.array[i * attribute.itemSize + a];
                        output.min[a] = Math.min(output.min[a], value);
                        output.max[a] = Math.max(output.max[a], value);
                    }
                }
                return output;
            }
            function isPowerOfTwo(image) {
                return THREE.MathUtils.isPowerOfTwo(image.width) && THREE.MathUtils.isPowerOfTwo(image.height);
            }
            function isNormalizedNormalAttribute(normal) {
                if (cachedData.attributesNormalized.has(normal)) {
                    return false;
                }
                var v = new THREE.Vector3();
                for (var i = 0, il = normal.count; i < il; i++) {
                    if (Math.abs(v.fromArray(normal.array, i * 3).length() - 1) > 0.0005)
                        return false;
                }
                return true;
            }
            function createNormalizedNormalAttribute(normal) {
                if (cachedData.attributesNormalized.has(normal)) {
                    return cachedData.attributesNormalized.get(normal);
                }
                var attribute = normal.clone();
                var v = new THREE.Vector3();
                for (var i = 0, il = attribute.count; i < il; i++) {
                    v.fromArray(attribute.array, i * 3);
                    if (v.x === 0 && v.y === 0 && v.z === 0) {
                        v.setX(1);
                    } else {
                        v.normalize();
                    }
                    v.toArray(attribute.array, i * 3);
                }
                cachedData.attributesNormalized.set(normal, attribute);
                return attribute;
            }
            function getPaddedBufferSize(bufferSize) {
                return Math.ceil(bufferSize / 4) * 4;
            }
            function getPaddedArrayBuffer(arrayBuffer, paddingByte) {
                paddingByte = paddingByte || 0;
                var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);
                if (paddedLength !== arrayBuffer.byteLength) {
                    var array = new Uint8Array(paddedLength);
                    array.set(new Uint8Array(arrayBuffer));
                    if (paddingByte !== 0) {
                        for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {
                            array[i] = paddingByte;
                        }
                    }
                    return array.buffer;
                }
                return arrayBuffer;
            }
            function serializeUserData(object, gltfProperty) {
                if (Object.keys(object.userData).length === 0) {
                    return;
                }
                try {
                    var json = JSON.parse(JSON.stringify(object.userData));
                    if (options.includeCustomExtensions && json.gltfExtensions) {
                        if (gltfProperty.extensions === undefined) {
                            gltfProperty.extensions = {};
                        }
                        for (var extensionName in json.gltfExtensions) {
                            gltfProperty.extensions[extensionName] = json.gltfExtensions[extensionName];
                            extensionsUsed[extensionName] = true;
                        }
                        delete json.gltfExtensions;
                    }
                    if (Object.keys(json).length > 0) {
                        gltfProperty.extras = json;
                    }
                } catch (error) {
                    console.warn("THREE.GLTFExporter: userData of '" + object.name + "' " + "won't be serialized because of JSON.stringify error - " + error.message);
                }
            }
            function applyTextureTransform(mapDef, texture) {
                var didTransform = false;
                var transformDef = {};
                if (texture.offset.x !== 0 || texture.offset.y !== 0) {
                    transformDef.offset = texture.offset.toArray();
                    didTransform = true;
                }
                if (texture.rotation !== 0) {
                    transformDef.rotation = texture.rotation;
                    didTransform = true;
                }
                if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {
                    transformDef.scale = texture.repeat.toArray();
                    didTransform = true;
                }
                if (didTransform) {
                    mapDef.extensions = mapDef.extensions || {};
                    mapDef.extensions['KHR_texture_transform'] = transformDef;
                    extensionsUsed['KHR_texture_transform'] = true;
                }
            }
            function processBuffer(buffer) {
                if (!outputJSON.buffers) {
                    outputJSON.buffers = [{ byteLength: 0 }];
                }
                buffers.push(buffer);
                return 0;
            }
            function processBufferView(attribute, componentType, start, count, target) {
                if (!outputJSON.bufferViews) {
                    outputJSON.bufferViews = [];
                }
                var componentSize;
                if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {
                    componentSize = 1;
                } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {
                    componentSize = 2;
                } else {
                    componentSize = 4;
                }
                var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);
                var dataView = new DataView(new ArrayBuffer(byteLength));
                var offset = 0;
                for (var i = start; i < start + count; i++) {
                    for (var a = 0; a < attribute.itemSize; a++) {
                        var value = attribute.array[i * attribute.itemSize + a];
                        if (componentType === WEBGL_CONSTANTS.FLOAT) {
                            dataView.setFloat32(offset, value, true);
                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {
                            dataView.setUint32(offset, value, true);
                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {
                            dataView.setUint16(offset, value, true);
                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {
                            dataView.setUint8(offset, value);
                        }
                        offset += componentSize;
                    }
                }
                var gltfBufferView = {
                    buffer: processBuffer(dataView.buffer),
                    byteOffset: byteOffset,
                    byteLength: byteLength
                };
                if (target !== undefined)
                    gltfBufferView.target = target;
                if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {
                    gltfBufferView.byteStride = attribute.itemSize * componentSize;
                }
                byteOffset += byteLength;
                outputJSON.bufferViews.push(gltfBufferView);
                var output = {
                    id: outputJSON.bufferViews.length - 1,
                    byteLength: 0
                };
                return output;
            }
            function processBufferViewImage(blob) {
                if (!outputJSON.bufferViews) {
                    outputJSON.bufferViews = [];
                }
                return new Promise(function (resolve) {
                    var reader = new window.FileReader();
                    reader.readAsArrayBuffer(blob);
                    reader.onloadend = function () {
                        var buffer = getPaddedArrayBuffer(reader.result);
                        var bufferView = {
                            buffer: processBuffer(buffer),
                            byteOffset: byteOffset,
                            byteLength: buffer.byteLength
                        };
                        byteOffset += buffer.byteLength;
                        outputJSON.bufferViews.push(bufferView);
                        resolve(outputJSON.bufferViews.length - 1);
                    };
                });
            }
            function processAccessor(attribute, geometry, start, count) {
                var types = {
                    1: 'SCALAR',
                    2: 'VEC2',
                    3: 'VEC3',
                    4: 'VEC4',
                    16: 'MAT4'
                };
                var componentType;
                if (attribute.array.constructor === Float32Array) {
                    componentType = WEBGL_CONSTANTS.FLOAT;
                } else if (attribute.array.constructor === Uint32Array) {
                    componentType = WEBGL_CONSTANTS.UNSIGNED_INT;
                } else if (attribute.array.constructor === Uint16Array) {
                    componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;
                } else if (attribute.array.constructor === Uint8Array) {
                    componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;
                } else {
                    throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');
                }
                if (start === undefined)
                    start = 0;
                if (count === undefined)
                    count = attribute.count;
                if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {
                    var end = start + count;
                    var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;
                    start = Math.max(start, geometry.drawRange.start);
                    count = Math.min(end, end2) - start;
                    if (count < 0)
                        count = 0;
                }
                if (count === 0) {
                    return null;
                }
                var minMax = getMinMax(attribute, start, count);
                var bufferViewTarget;
                if (geometry !== undefined) {
                    bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;
                }
                var bufferView = processBufferView(attribute, componentType, start, count, bufferViewTarget);
                var gltfAccessor = {
                    bufferView: bufferView.id,
                    byteOffset: bufferView.byteOffset,
                    componentType: componentType,
                    count: count,
                    max: minMax.max,
                    min: minMax.min,
                    type: types[attribute.itemSize]
                };
                if (!outputJSON.accessors) {
                    outputJSON.accessors = [];
                }
                outputJSON.accessors.push(gltfAccessor);
                return outputJSON.accessors.length - 1;
            }
            function processImage(image, format, flipY) {
                if (!cachedData.images.has(image)) {
                    cachedData.images.set(image, {});
                }
                var cachedImages = cachedData.images.get(image);
                var mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';
                var key = mimeType + ':flipY/' + flipY.toString();
                if (cachedImages[key] !== undefined) {
                    return cachedImages[key];
                }
                if (!outputJSON.images) {
                    outputJSON.images = [];
                }
                var gltfImage = { mimeType: mimeType };
                if (options.embedImages) {
                    var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');
                    canvas.width = Math.min(image.width, options.maxTextureSize);
                    canvas.height = Math.min(image.height, options.maxTextureSize);
                    if (options.forcePowerOfTwoTextures && !isPowerOfTwo(canvas)) {
                        console.warn('GLTFExporter: Resized non-power-of-two image.', image);
                        canvas.width = THREE.MathUtils.floorPowerOfTwo(canvas.width);
                        canvas.height = THREE.MathUtils.floorPowerOfTwo(canvas.height);
                    }
                    var ctx = canvas.getContext('2d');
                    if (flipY === true) {
                        ctx.translate(0, canvas.height);
                        ctx.scale(1, -1);
                    }
                    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
                    if (options.binary === true) {
                        pending.push(new Promise(function (resolve) {
                            canvas.toBlob(function (blob) {
                                processBufferViewImage(blob).then(function (bufferViewIndex) {
                                    gltfImage.bufferView = bufferViewIndex;
                                    resolve();
                                });
                            }, mimeType);
                        }));
                    } else {
                        gltfImage.uri = canvas.toDataURL(mimeType);
                    }
                } else {
                    gltfImage.uri = image.src;
                }
                outputJSON.images.push(gltfImage);
                var index = outputJSON.images.length - 1;
                cachedImages[key] = index;
                return index;
            }
            function processSampler(map) {
                if (!outputJSON.samplers) {
                    outputJSON.samplers = [];
                }
                var gltfSampler = {
                    magFilter: THREE_TO_WEBGL[map.magFilter],
                    minFilter: THREE_TO_WEBGL[map.minFilter],
                    wrapS: THREE_TO_WEBGL[map.wrapS],
                    wrapT: THREE_TO_WEBGL[map.wrapT]
                };
                outputJSON.samplers.push(gltfSampler);
                return outputJSON.samplers.length - 1;
            }
            function processTexture(map) {
                if (cachedData.textures.has(map)) {
                    return cachedData.textures.get(map);
                }
                if (!outputJSON.textures) {
                    outputJSON.textures = [];
                }
                var gltfTexture = {
                    sampler: processSampler(map),
                    source: processImage(map.image, map.format, map.flipY)
                };
                if (map.name) {
                    gltfTexture.name = map.name;
                }
                outputJSON.textures.push(gltfTexture);
                var index = outputJSON.textures.length - 1;
                cachedData.textures.set(map, index);
                return index;
            }
            function processMaterial(material) {
                if (cachedData.materials.has(material)) {
                    return cachedData.materials.get(material);
                }
                if (material.isShaderMaterial) {
                    console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');
                    return null;
                }
                if (!outputJSON.materials) {
                    outputJSON.materials = [];
                }
                var gltfMaterial = { pbrMetallicRoughness: {} };
                if (material.isMeshBasicMaterial) {
                    gltfMaterial.extensions = { KHR_materials_unlit: {} };
                    extensionsUsed['KHR_materials_unlit'] = true;
                } else if (material.isGLTFSpecularGlossinessMaterial) {
                    gltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };
                    extensionsUsed['KHR_materials_pbrSpecularGlossiness'] = true;
                } else if (!material.isMeshStandardMaterial) {
                    console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');
                }
                var color = material.color.toArray().concat([material.opacity]);
                if (!equalArray(color, [
                        1,
                        1,
                        1,
                        1
                    ])) {
                    gltfMaterial.pbrMetallicRoughness.baseColorFactor = color;
                }
                if (material.isMeshStandardMaterial) {
                    gltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;
                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;
                } else if (material.isMeshBasicMaterial) {
                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0;
                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;
                } else {
                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;
                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;
                }
                if (material.isGLTFSpecularGlossinessMaterial) {
                    if (gltfMaterial.pbrMetallicRoughness.baseColorFactor) {
                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;
                    }
                    var specularFactor = [
                        1,
                        1,
                        1
                    ];
                    material.specular.toArray(specularFactor, 0);
                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;
                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;
                }
                if (material.metalnessMap || material.roughnessMap) {
                    if (material.metalnessMap === material.roughnessMap) {
                        var metalRoughMapDef = { index: processTexture(material.metalnessMap) };
                        applyTextureTransform(metalRoughMapDef, material.metalnessMap);
                        gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;
                    } else {
                        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');
                    }
                }
                if (material.map) {
                    var baseColorMapDef = { index: processTexture(material.map) };
                    applyTextureTransform(baseColorMapDef, material.map);
                    if (material.isGLTFSpecularGlossinessMaterial) {
                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;
                    }
                    gltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;
                }
                if (material.isGLTFSpecularGlossinessMaterial && material.specularMap) {
                    var specularMapDef = { index: processTexture(material.specularMap) };
                    applyTextureTransform(specularMapDef, material.specularMap);
                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;
                }
                if (material.emissive) {
                    var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();
                    if (!equalArray(emissive, [
                            0,
                            0,
                            0
                        ])) {
                        gltfMaterial.emissiveFactor = emissive;
                    }
                    if (material.emissiveMap) {
                        var emissiveMapDef = { index: processTexture(material.emissiveMap) };
                        applyTextureTransform(emissiveMapDef, material.emissiveMap);
                        gltfMaterial.emissiveTexture = emissiveMapDef;
                    }
                }
                if (material.normalMap) {
                    var normalMapDef = { index: processTexture(material.normalMap) };
                    if (material.normalScale && material.normalScale.x !== -1) {
                        if (material.normalScale.x !== material.normalScale.y) {
                            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');
                        }
                        normalMapDef.scale = material.normalScale.x;
                    }
                    applyTextureTransform(normalMapDef, material.normalMap);
                    gltfMaterial.normalTexture = normalMapDef;
                }
                if (material.aoMap) {
                    var occlusionMapDef = {
                        index: processTexture(material.aoMap),
                        texCoord: 1
                    };
                    if (material.aoMapIntensity !== 1) {
                        occlusionMapDef.strength = material.aoMapIntensity;
                    }
                    applyTextureTransform(occlusionMapDef, material.aoMap);
                    gltfMaterial.occlusionTexture = occlusionMapDef;
                }
                if (material.transparent) {
                    gltfMaterial.alphaMode = 'BLEND';
                } else {
                    if (material.alphaTest > 0) {
                        gltfMaterial.alphaMode = 'MASK';
                        gltfMaterial.alphaCutoff = material.alphaTest;
                    }
                }
                if (material.side === THREE.DoubleSide) {
                    gltfMaterial.doubleSided = true;
                }
                if (material.name !== '') {
                    gltfMaterial.name = material.name;
                }
                serializeUserData(material, gltfMaterial);
                outputJSON.materials.push(gltfMaterial);
                var index = outputJSON.materials.length - 1;
                cachedData.materials.set(material, index);
                return index;
            }
            function processMesh(mesh) {
                var meshCacheKeyParts = [mesh.geometry.uuid];
                if (Array.isArray(mesh.material)) {
                    for (var i = 0, l = mesh.material.length; i < l; i++) {
                        meshCacheKeyParts.push(mesh.material[i].uuid);
                    }
                } else {
                    meshCacheKeyParts.push(mesh.material.uuid);
                }
                var meshCacheKey = meshCacheKeyParts.join(':');
                if (cachedData.meshes.has(meshCacheKey)) {
                    return cachedData.meshes.get(meshCacheKey);
                }
                var geometry = mesh.geometry;
                var mode;
                if (mesh.isLineSegments) {
                    mode = WEBGL_CONSTANTS.LINES;
                } else if (mesh.isLineLoop) {
                    mode = WEBGL_CONSTANTS.LINE_LOOP;
                } else if (mesh.isLine) {
                    mode = WEBGL_CONSTANTS.LINE_STRIP;
                } else if (mesh.isPoints) {
                    mode = WEBGL_CONSTANTS.POINTS;
                } else {
                    mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;
                }
                if (!geometry.isBufferGeometry) {
                    console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.');
                    geometry = new THREE.BufferGeometry().setFromObject(mesh);
                }
                var gltfMesh = {};
                var attributes = {};
                var primitives = [];
                var targets = [];
                var nameConversion = {
                    uv: 'TEXCOORD_0',
                    uv2: 'TEXCOORD_1',
                    color: 'COLOR_0',
                    skinWeight: 'WEIGHTS_0',
                    skinIndex: 'JOINTS_0'
                };
                var originalNormal = geometry.getAttribute('normal');
                if (originalNormal !== undefined && !isNormalizedNormalAttribute(originalNormal)) {
                    console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');
                    geometry.setAttribute('normal', createNormalizedNormalAttribute(originalNormal));
                }
                var modifiedAttribute = null;
                for (var attributeName in geometry.attributes) {
                    if (attributeName.substr(0, 5) === 'morph')
                        continue;
                    var attribute = geometry.attributes[attributeName];
                    attributeName = nameConversion[attributeName] || attributeName.toUpperCase();
                    var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\d+|COLOR_\d+|JOINTS_\d+|WEIGHTS_\d+)$/;
                    if (!validVertexAttributes.test(attributeName)) {
                        attributeName = '_' + attributeName;
                    }
                    if (cachedData.attributes.has(getUID(attribute))) {
                        attributes[attributeName] = cachedData.attributes.get(getUID(attribute));
                        continue;
                    }
                    modifiedAttribute = null;
                    var array = attribute.array;
                    if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {
                        console.warn('GLTFExporter: Attribute "skinIndex" converted to type UNSIGNED_SHORT.');
                        modifiedAttribute = new THREE.BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);
                    }
                    var accessor = processAccessor(modifiedAttribute || attribute, geometry);
                    if (accessor !== null) {
                        attributes[attributeName] = accessor;
                        cachedData.attributes.set(getUID(attribute), accessor);
                    }
                }
                if (originalNormal !== undefined)
                    geometry.setAttribute('normal', originalNormal);
                if (Object.keys(attributes).length === 0) {
                    return null;
                }
                if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {
                    var weights = [];
                    var targetNames = [];
                    var reverseDictionary = {};
                    if (mesh.morphTargetDictionary !== undefined) {
                        for (var key in mesh.morphTargetDictionary) {
                            reverseDictionary[mesh.morphTargetDictionary[key]] = key;
                        }
                    }
                    for (var i = 0; i < mesh.morphTargetInfluences.length; ++i) {
                        var target = {};
                        var warned = false;
                        for (var attributeName in geometry.morphAttributes) {
                            if (attributeName !== 'position' && attributeName !== 'normal') {
                                if (!warned) {
                                    console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');
                                    warned = true;
                                }
                                continue;
                            }
                            var attribute = geometry.morphAttributes[attributeName][i];
                            var gltfAttributeName = attributeName.toUpperCase();
                            var baseAttribute = geometry.attributes[attributeName];
                            if (cachedData.attributes.has(getUID(attribute))) {
                                target[gltfAttributeName] = cachedData.attributes.get(getUID(attribute));
                                continue;
                            }
                            var relativeAttribute = attribute.clone();
                            if (!geometry.morphTargetsRelative) {
                                for (var j = 0, jl = attribute.count; j < jl; j++) {
                                    relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));
                                }
                            }
                            target[gltfAttributeName] = processAccessor(relativeAttribute, geometry);
                            cachedData.attributes.set(getUID(baseAttribute), target[gltfAttributeName]);
                        }
                        targets.push(target);
                        weights.push(mesh.morphTargetInfluences[i]);
                        if (mesh.morphTargetDictionary !== undefined)
                            targetNames.push(reverseDictionary[i]);
                    }
                    gltfMesh.weights = weights;
                    if (targetNames.length > 0) {
                        gltfMesh.extras = {};
                        gltfMesh.extras.targetNames = targetNames;
                    }
                }
                var forceIndices = options.forceIndices;
                var isMultiMaterial = Array.isArray(mesh.material);
                if (isMultiMaterial && geometry.groups.length === 0)
                    return null;
                if (!forceIndices && geometry.index === null && isMultiMaterial) {
                    console.warn('THREE.GLTFExporter: Creating index for non-indexed multi-material mesh.');
                    forceIndices = true;
                }
                var didForceIndices = false;
                if (geometry.index === null && forceIndices) {
                    var indices = [];
                    for (var i = 0, il = geometry.attributes.position.count; i < il; i++) {
                        indices[i] = i;
                    }
                    geometry.setIndex(indices);
                    didForceIndices = true;
                }
                var materials = isMultiMaterial ? mesh.material : [mesh.material];
                var groups = isMultiMaterial ? geometry.groups : [{
                        materialIndex: 0,
                        start: undefined,
                        count: undefined
                    }];
                for (var i = 0, il = groups.length; i < il; i++) {
                    var primitive = {
                        mode: mode,
                        attributes: attributes
                    };
                    serializeUserData(geometry, primitive);
                    if (targets.length > 0)
                        primitive.targets = targets;
                    if (geometry.index !== null) {
                        var cacheKey = getUID(geometry.index);
                        if (groups[i].start !== undefined || groups[i].count !== undefined) {
                            cacheKey += ':' + groups[i].start + ':' + groups[i].count;
                        }
                        if (cachedData.attributes.has(cacheKey)) {
                            primitive.indices = cachedData.attributes.get(cacheKey);
                        } else {
                            primitive.indices = processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);
                            cachedData.attributes.set(cacheKey, primitive.indices);
                        }
                        if (primitive.indices === null)
                            delete primitive.indices;
                    }
                    var material = processMaterial(materials[groups[i].materialIndex]);
                    if (material !== null) {
                        primitive.material = material;
                    }
                    primitives.push(primitive);
                }
                if (didForceIndices) {
                    geometry.setIndex(null);
                }
                gltfMesh.primitives = primitives;
                if (!outputJSON.meshes) {
                    outputJSON.meshes = [];
                }
                outputJSON.meshes.push(gltfMesh);
                var index = outputJSON.meshes.length - 1;
                cachedData.meshes.set(meshCacheKey, index);
                return index;
            }
            function processCamera(camera) {
                if (!outputJSON.cameras) {
                    outputJSON.cameras = [];
                }
                var isOrtho = camera.isOrthographicCamera;
                var gltfCamera = { type: isOrtho ? 'orthographic' : 'perspective' };
                if (isOrtho) {
                    gltfCamera.orthographic = {
                        xmag: camera.right * 2,
                        ymag: camera.top * 2,
                        zfar: camera.far <= 0 ? 0.001 : camera.far,
                        znear: camera.near < 0 ? 0 : camera.near
                    };
                } else {
                    gltfCamera.perspective = {
                        aspectRatio: camera.aspect,
                        yfov: THREE.MathUtils.degToRad(camera.fov),
                        zfar: camera.far <= 0 ? 0.001 : camera.far,
                        znear: camera.near < 0 ? 0 : camera.near
                    };
                }
                if (camera.name !== '') {
                    gltfCamera.name = camera.type;
                }
                outputJSON.cameras.push(gltfCamera);
                return outputJSON.cameras.length - 1;
            }
            function processAnimation(clip, root) {
                if (!outputJSON.animations) {
                    outputJSON.animations = [];
                }
                clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);
                var tracks = clip.tracks;
                var channels = [];
                var samplers = [];
                for (var i = 0; i < tracks.length; ++i) {
                    var track = tracks[i];
                    var trackBinding = THREE.PropertyBinding.parseTrackName(track.name);
                    var trackNode = THREE.PropertyBinding.findNode(root, trackBinding.nodeName);
                    var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];
                    if (trackBinding.objectName === 'bones') {
                        if (trackNode.isSkinnedMesh === true) {
                            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);
                        } else {
                            trackNode = undefined;
                        }
                    }
                    if (!trackNode || !trackProperty) {
                        console.warn('THREE.GLTFExporter: Could not export animation track "%s".', track.name);
                        return null;
                    }
                    var inputItemSize = 1;
                    var outputItemSize = track.values.length / track.times.length;
                    if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {
                        outputItemSize /= trackNode.morphTargetInfluences.length;
                    }
                    var interpolation;
                    if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {
                        interpolation = 'CUBICSPLINE';
                        outputItemSize /= 3;
                    } else if (track.getInterpolation() === THREE.InterpolateDiscrete) {
                        interpolation = 'STEP';
                    } else {
                        interpolation = 'LINEAR';
                    }
                    samplers.push({
                        input: processAccessor(new THREE.BufferAttribute(track.times, inputItemSize)),
                        output: processAccessor(new THREE.BufferAttribute(track.values, outputItemSize)),
                        interpolation: interpolation
                    });
                    channels.push({
                        sampler: samplers.length - 1,
                        target: {
                            node: nodeMap.get(trackNode),
                            path: trackProperty
                        }
                    });
                }
                outputJSON.animations.push({
                    name: clip.name || 'clip_' + outputJSON.animations.length,
                    samplers: samplers,
                    channels: channels
                });
                return outputJSON.animations.length - 1;
            }
            function processSkin(object) {
                var node = outputJSON.nodes[nodeMap.get(object)];
                var skeleton = object.skeleton;
                if (skeleton === undefined)
                    return null;
                var rootJoint = object.skeleton.bones[0];
                if (rootJoint === undefined)
                    return null;
                var joints = [];
                var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);
                for (var i = 0; i < skeleton.bones.length; ++i) {
                    joints.push(nodeMap.get(skeleton.bones[i]));
                    skeleton.boneInverses[i].toArray(inverseBindMatrices, i * 16);
                }
                if (outputJSON.skins === undefined) {
                    outputJSON.skins = [];
                }
                outputJSON.skins.push({
                    inverseBindMatrices: processAccessor(new THREE.BufferAttribute(inverseBindMatrices, 16)),
                    joints: joints,
                    skeleton: nodeMap.get(rootJoint)
                });
                var skinIndex = node.skin = outputJSON.skins.length - 1;
                return skinIndex;
            }
            function processLight(light) {
                var lightDef = {};
                if (light.name)
                    lightDef.name = light.name;
                lightDef.color = light.color.toArray();
                lightDef.intensity = light.intensity;
                if (light.isDirectionalLight) {
                    lightDef.type = 'directional';
                } else if (light.isPointLight) {
                    lightDef.type = 'point';
                    if (light.distance > 0)
                        lightDef.range = light.distance;
                } else if (light.isSpotLight) {
                    lightDef.type = 'spot';
                    if (light.distance > 0)
                        lightDef.range = light.distance;
                    lightDef.spot = {};
                    lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;
                    lightDef.spot.outerConeAngle = light.angle;
                }
                if (light.decay !== undefined && light.decay !== 2) {
                    console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');
                }
                if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {
                    console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');
                }
                var lights = outputJSON.extensions['KHR_lights_punctual'].lights;
                lights.push(lightDef);
                return lights.length - 1;
            }
            function processNode(object) {
                if (!outputJSON.nodes) {
                    outputJSON.nodes = [];
                }
                var gltfNode = {};
                if (options.trs) {
                    var rotation = object.quaternion.toArray();
                    var position = object.position.toArray();
                    var scale = object.scale.toArray();
                    if (!equalArray(rotation, [
                            0,
                            0,
                            0,
                            1
                        ])) {
                        gltfNode.rotation = rotation;
                    }
                    if (!equalArray(position, [
                            0,
                            0,
                            0
                        ])) {
                        gltfNode.translation = position;
                    }
                    if (!equalArray(scale, [
                            1,
                            1,
                            1
                        ])) {
                        gltfNode.scale = scale;
                    }
                } else {
                    if (object.matrixAutoUpdate) {
                        object.updateMatrix();
                    }
                    if (!equalArray(object.matrix.elements, [
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            1
                        ])) {
                        gltfNode.matrix = object.matrix.elements;
                    }
                }
                if (object.name !== '') {
                    gltfNode.name = String(object.name);
                }
                serializeUserData(object, gltfNode);
                if (object.isMesh || object.isLine || object.isPoints) {
                    var mesh = processMesh(object);
                    if (mesh !== null) {
                        gltfNode.mesh = mesh;
                    }
                } else if (object.isCamera) {
                    gltfNode.camera = processCamera(object);
                } else if (object.isDirectionalLight || object.isPointLight || object.isSpotLight) {
                    if (!extensionsUsed['KHR_lights_punctual']) {
                        outputJSON.extensions = outputJSON.extensions || {};
                        outputJSON.extensions['KHR_lights_punctual'] = { lights: [] };
                        extensionsUsed['KHR_lights_punctual'] = true;
                    }
                    gltfNode.extensions = gltfNode.extensions || {};
                    gltfNode.extensions['KHR_lights_punctual'] = { light: processLight(object) };
                } else if (object.isLight) {
                    console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object);
                    return null;
                }
                if (object.isSkinnedMesh) {
                    skins.push(object);
                }
                if (object.children.length > 0) {
                    var children = [];
                    for (var i = 0, l = object.children.length; i < l; i++) {
                        var child = object.children[i];
                        if (child.visible || options.onlyVisible === false) {
                            var node = processNode(child);
                            if (node !== null) {
                                children.push(node);
                            }
                        }
                    }
                    if (children.length > 0) {
                        gltfNode.children = children;
                    }
                }
                outputJSON.nodes.push(gltfNode);
                var nodeIndex = outputJSON.nodes.length - 1;
                nodeMap.set(object, nodeIndex);
                return nodeIndex;
            }
            function processScene(scene) {
                if (!outputJSON.scenes) {
                    outputJSON.scenes = [];
                    outputJSON.scene = 0;
                }
                var gltfScene = {};
                if (scene.name !== '') {
                    gltfScene.name = scene.name;
                }
                outputJSON.scenes.push(gltfScene);
                var nodes = [];
                for (var i = 0, l = scene.children.length; i < l; i++) {
                    var child = scene.children[i];
                    if (child.visible || options.onlyVisible === false) {
                        var node = processNode(child);
                        if (node !== null) {
                            nodes.push(node);
                        }
                    }
                }
                if (nodes.length > 0) {
                    gltfScene.nodes = nodes;
                }
                serializeUserData(scene, gltfScene);
            }
            function processObjects(objects) {
                var scene = new THREE.Scene();
                scene.name = 'AuxScene';
                for (var i = 0; i < objects.length; i++) {
                    scene.children.push(objects[i]);
                }
                processScene(scene);
            }
            function processInput(input) {
                input = input instanceof Array ? input : [input];
                var objectsWithoutScene = [];
                for (var i = 0; i < input.length; i++) {
                    if (input[i] instanceof THREE.Scene) {
                        processScene(input[i]);
                    } else {
                        objectsWithoutScene.push(input[i]);
                    }
                }
                if (objectsWithoutScene.length > 0) {
                    processObjects(objectsWithoutScene);
                }
                for (var i = 0; i < skins.length; ++i) {
                    processSkin(skins[i]);
                }
                for (var i = 0; i < options.animations.length; ++i) {
                    processAnimation(options.animations[i], input[0]);
                }
            }
            processInput(input);
            Promise.all(pending).then(function () {
                var blob = new Blob(buffers, { type: 'application/octet-stream' });
                var extensionsUsedList = Object.keys(extensionsUsed);
                if (extensionsUsedList.length > 0)
                    outputJSON.extensionsUsed = extensionsUsedList;
                if (outputJSON.buffers && outputJSON.buffers.length > 0)
                    outputJSON.buffers[0].byteLength = blob.size;
                if (options.binary === true) {
                    var GLB_HEADER_BYTES = 12;
                    var GLB_HEADER_MAGIC = 1179937895;
                    var GLB_VERSION = 2;
                    var GLB_CHUNK_PREFIX_BYTES = 8;
                    var GLB_CHUNK_TYPE_JSON = 1313821514;
                    var GLB_CHUNK_TYPE_BIN = 5130562;
                    var reader = new window.FileReader();
                    reader.readAsArrayBuffer(blob);
                    reader.onloadend = function () {
                        var binaryChunk = getPaddedArrayBuffer(reader.result);
                        var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));
                        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);
                        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);
                        var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)), 32);
                        var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));
                        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);
                        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);
                        var header = new ArrayBuffer(GLB_HEADER_BYTES);
                        var headerView = new DataView(header);
                        headerView.setUint32(0, GLB_HEADER_MAGIC, true);
                        headerView.setUint32(4, GLB_VERSION, true);
                        var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;
                        headerView.setUint32(8, totalByteLength, true);
                        var glbBlob = new Blob([
                            header,
                            jsonChunkPrefix,
                            jsonChunk,
                            binaryChunkPrefix,
                            binaryChunk
                        ], { type: 'application/octet-stream' });
                        var glbReader = new window.FileReader();
                        glbReader.readAsArrayBuffer(glbBlob);
                        glbReader.onloadend = function () {
                            onDone(glbReader.result);
                        };
                    };
                } else {
                    if (outputJSON.buffers && outputJSON.buffers.length > 0) {
                        var reader = new window.FileReader();
                        reader.readAsDataURL(blob);
                        reader.onloadend = function () {
                            var base64data = reader.result;
                            outputJSON.buffers[0].uri = base64data;
                            onDone(outputJSON);
                        };
                    } else {
                        onDone(outputJSON);
                    }
                }
            });
        }
    };
    GLTFExporter.Utils = {
        insertKeyframe: function (track, time) {
            var tolerance = 0.001;
            var valueSize = track.getValueSize();
            var times = new track.TimeBufferType(track.times.length + 1);
            var values = new track.ValueBufferType(track.values.length + valueSize);
            var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));
            var index;
            if (track.times.length === 0) {
                times[0] = time;
                for (var i = 0; i < valueSize; i++) {
                    values[i] = 0;
                }
                index = 0;
            } else if (time < track.times[0]) {
                if (Math.abs(track.times[0] - time) < tolerance)
                    return 0;
                times[0] = time;
                times.set(track.times, 1);
                values.set(interpolant.evaluate(time), 0);
                values.set(track.values, valueSize);
                index = 0;
            } else if (time > track.times[track.times.length - 1]) {
                if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {
                    return track.times.length - 1;
                }
                times[times.length - 1] = time;
                times.set(track.times, 0);
                values.set(track.values, 0);
                values.set(interpolant.evaluate(time), track.values.length);
                index = times.length - 1;
            } else {
                for (var i = 0; i < track.times.length; i++) {
                    if (Math.abs(track.times[i] - time) < tolerance)
                        return i;
                    if (track.times[i] < time && track.times[i + 1] > time) {
                        times.set(track.times.slice(0, i + 1), 0);
                        times[i + 1] = time;
                        times.set(track.times.slice(i + 1), i + 2);
                        values.set(track.values.slice(0, (i + 1) * valueSize), 0);
                        values.set(interpolant.evaluate(time), (i + 1) * valueSize);
                        values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);
                        index = i + 1;
                        break;
                    }
                }
            }
            track.times = times;
            track.values = values;
            return index;
        },
        mergeMorphTargetTracks: function (clip, root) {
            var tracks = [];
            var mergedTracks = {};
            var sourceTracks = clip.tracks;
            for (var i = 0; i < sourceTracks.length; ++i) {
                var sourceTrack = sourceTracks[i];
                var sourceTrackBinding = THREE.PropertyBinding.parseTrackName(sourceTrack.name);
                var sourceTrackNode = THREE.PropertyBinding.findNode(root, sourceTrackBinding.nodeName);
                if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {
                    tracks.push(sourceTrack);
                    continue;
                }
                if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {
                    if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
                        throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');
                    }
                    console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');
                    sourceTrack = sourceTrack.clone();
                    sourceTrack.setInterpolation(THREE.InterpolateLinear);
                }
                var targetCount = sourceTrackNode.morphTargetInfluences.length;
                var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];
                if (targetIndex === undefined) {
                    throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);
                }
                var mergedTrack;
                if (mergedTracks[sourceTrackNode.uuid] === undefined) {
                    mergedTrack = sourceTrack.clone();
                    var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);
                    for (var j = 0; j < mergedTrack.times.length; j++) {
                        values[j * targetCount + targetIndex] = mergedTrack.values[j];
                    }
                    mergedTrack.name = '.morphTargetInfluences';
                    mergedTrack.values = values;
                    mergedTracks[sourceTrackNode.uuid] = mergedTrack;
                    tracks.push(mergedTrack);
                    continue;
                }
                var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));
                mergedTrack = mergedTracks[sourceTrackNode.uuid];
                for (var j = 0; j < mergedTrack.times.length; j++) {
                    mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);
                }
                for (var j = 0; j < sourceTrack.times.length; j++) {
                    var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);
                    mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];
                }
            }
            clip.tracks = tracks;
            return clip;
        }
    };
    return GLTFExporter;
});
define('skylark-threejs-ex/utils/mmdparser',[],function(){


	/**
	 * @author Takahiro / https://github.com/takahirox
	 *
	 * Simple CharsetEncoder.
	 */

	function CharsetEncoder() {
	}

	/*
	 * Converts from Shift_JIS Uint8Array data to Unicode strings.
	 */
	CharsetEncoder.prototype.s2u = function ( uint8Array ) {

		var t = this.s2uTable;
		var str = '';
		var p = 0;

		while ( p < uint8Array.length ) {

			var key = uint8Array[ p ++ ];

			if ( ! ( ( key >= 0x00 && key <= 0x7e ) ||
	          ( key >= 0xa1 && key <= 0xdf ) ) &&
	       p < uint8Array.length ) {

				key = ( key << 8 ) | uint8Array[ p ++ ];

			}

			if ( t[ key ] === undefined ) {

				throw 'unknown char code ' + key + '.';

			}

			str += String.fromCharCode( t[ key ] );

		}

		return str;

	};

	CharsetEncoder.prototype.s2uTable = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		10: 10,
		11: 11,
		12: 12,
		13: 13,
		14: 14,
		15: 15,
		16: 16,
		17: 17,
		18: 18,
		19: 19,
		20: 20,
		21: 21,
		22: 22,
		23: 23,
		24: 24,
		25: 25,
		26: 26,
		27: 27,
		28: 28,
		29: 29,
		30: 30,
		31: 31,
		32: 32,
		33: 33,
		34: 34,
		35: 35,
		36: 36,
		37: 37,
		38: 38,
		39: 39,
		40: 40,
		41: 41,
		42: 42,
		43: 43,
		44: 44,
		45: 45,
		46: 46,
		47: 47,
		48: 48,
		49: 49,
		50: 50,
		51: 51,
		52: 52,
		53: 53,
		54: 54,
		55: 55,
		56: 56,
		57: 57,
		58: 58,
		59: 59,
		60: 60,
		61: 61,
		62: 62,
		63: 63,
		64: 64,
		65: 65,
		66: 66,
		67: 67,
		68: 68,
		69: 69,
		70: 70,
		71: 71,
		72: 72,
		73: 73,
		74: 74,
		75: 75,
		76: 76,
		77: 77,
		78: 78,
		79: 79,
		80: 80,
		81: 81,
		82: 82,
		83: 83,
		84: 84,
		85: 85,
		86: 86,
		87: 87,
		88: 88,
		89: 89,
		90: 90,
		91: 91,
		92: 92,
		93: 93,
		94: 94,
		95: 95,
		96: 96,
		97: 97,
		98: 98,
		99: 99,
		100: 100,
		101: 101,
		102: 102,
		103: 103,
		104: 104,
		105: 105,
		106: 106,
		107: 107,
		108: 108,
		109: 109,
		110: 110,
		111: 111,
		112: 112,
		113: 113,
		114: 114,
		115: 115,
		116: 116,
		117: 117,
		118: 118,
		119: 119,
		120: 120,
		121: 121,
		122: 122,
		123: 123,
		124: 124,
		125: 125,
		126: 126,
		161: 65377,
		162: 65378,
		163: 65379,
		164: 65380,
		165: 65381,
		166: 65382,
		167: 65383,
		168: 65384,
		169: 65385,
		170: 65386,
		171: 65387,
		172: 65388,
		173: 65389,
		174: 65390,
		175: 65391,
		176: 65392,
		177: 65393,
		178: 65394,
		179: 65395,
		180: 65396,
		181: 65397,
		182: 65398,
		183: 65399,
		184: 65400,
		185: 65401,
		186: 65402,
		187: 65403,
		188: 65404,
		189: 65405,
		190: 65406,
		191: 65407,
		192: 65408,
		193: 65409,
		194: 65410,
		195: 65411,
		196: 65412,
		197: 65413,
		198: 65414,
		199: 65415,
		200: 65416,
		201: 65417,
		202: 65418,
		203: 65419,
		204: 65420,
		205: 65421,
		206: 65422,
		207: 65423,
		208: 65424,
		209: 65425,
		210: 65426,
		211: 65427,
		212: 65428,
		213: 65429,
		214: 65430,
		215: 65431,
		216: 65432,
		217: 65433,
		218: 65434,
		219: 65435,
		220: 65436,
		221: 65437,
		222: 65438,
		223: 65439,
		33088: 12288,
		33089: 12289,
		33090: 12290,
		33091: 65292,
		33092: 65294,
		33093: 12539,
		33094: 65306,
		33095: 65307,
		33096: 65311,
		33097: 65281,
		33098: 12443,
		33099: 12444,
		33100: 180,
		33101: 65344,
		33102: 168,
		33103: 65342,
		33104: 65507,
		33105: 65343,
		33106: 12541,
		33107: 12542,
		33108: 12445,
		33109: 12446,
		33110: 12291,
		33111: 20189,
		33112: 12293,
		33113: 12294,
		33114: 12295,
		33115: 12540,
		33116: 8213,
		33117: 8208,
		33118: 65295,
		33119: 65340,
		33120: 65374,
		33121: 8741,
		33122: 65372,
		33123: 8230,
		33124: 8229,
		33125: 8216,
		33126: 8217,
		33127: 8220,
		33128: 8221,
		33129: 65288,
		33130: 65289,
		33131: 12308,
		33132: 12309,
		33133: 65339,
		33134: 65341,
		33135: 65371,
		33136: 65373,
		33137: 12296,
		33138: 12297,
		33139: 12298,
		33140: 12299,
		33141: 12300,
		33142: 12301,
		33143: 12302,
		33144: 12303,
		33145: 12304,
		33146: 12305,
		33147: 65291,
		33148: 65293,
		33149: 177,
		33150: 215,
		33152: 247,
		33153: 65309,
		33154: 8800,
		33155: 65308,
		33156: 65310,
		33157: 8806,
		33158: 8807,
		33159: 8734,
		33160: 8756,
		33161: 9794,
		33162: 9792,
		33163: 176,
		33164: 8242,
		33165: 8243,
		33166: 8451,
		33167: 65509,
		33168: 65284,
		33169: 65504,
		33170: 65505,
		33171: 65285,
		33172: 65283,
		33173: 65286,
		33174: 65290,
		33175: 65312,
		33176: 167,
		33177: 9734,
		33178: 9733,
		33179: 9675,
		33180: 9679,
		33181: 9678,
		33182: 9671,
		33183: 9670,
		33184: 9633,
		33185: 9632,
		33186: 9651,
		33187: 9650,
		33188: 9661,
		33189: 9660,
		33190: 8251,
		33191: 12306,
		33192: 8594,
		33193: 8592,
		33194: 8593,
		33195: 8595,
		33196: 12307,
		33208: 8712,
		33209: 8715,
		33210: 8838,
		33211: 8839,
		33212: 8834,
		33213: 8835,
		33214: 8746,
		33215: 8745,
		33224: 8743,
		33225: 8744,
		33226: 65506,
		33227: 8658,
		33228: 8660,
		33229: 8704,
		33230: 8707,
		33242: 8736,
		33243: 8869,
		33244: 8978,
		33245: 8706,
		33246: 8711,
		33247: 8801,
		33248: 8786,
		33249: 8810,
		33250: 8811,
		33251: 8730,
		33252: 8765,
		33253: 8733,
		33254: 8757,
		33255: 8747,
		33256: 8748,
		33264: 8491,
		33265: 8240,
		33266: 9839,
		33267: 9837,
		33268: 9834,
		33269: 8224,
		33270: 8225,
		33271: 182,
		33276: 9711,
		33359: 65296,
		33360: 65297,
		33361: 65298,
		33362: 65299,
		33363: 65300,
		33364: 65301,
		33365: 65302,
		33366: 65303,
		33367: 65304,
		33368: 65305,
		33376: 65313,
		33377: 65314,
		33378: 65315,
		33379: 65316,
		33380: 65317,
		33381: 65318,
		33382: 65319,
		33383: 65320,
		33384: 65321,
		33385: 65322,
		33386: 65323,
		33387: 65324,
		33388: 65325,
		33389: 65326,
		33390: 65327,
		33391: 65328,
		33392: 65329,
		33393: 65330,
		33394: 65331,
		33395: 65332,
		33396: 65333,
		33397: 65334,
		33398: 65335,
		33399: 65336,
		33400: 65337,
		33401: 65338,
		33409: 65345,
		33410: 65346,
		33411: 65347,
		33412: 65348,
		33413: 65349,
		33414: 65350,
		33415: 65351,
		33416: 65352,
		33417: 65353,
		33418: 65354,
		33419: 65355,
		33420: 65356,
		33421: 65357,
		33422: 65358,
		33423: 65359,
		33424: 65360,
		33425: 65361,
		33426: 65362,
		33427: 65363,
		33428: 65364,
		33429: 65365,
		33430: 65366,
		33431: 65367,
		33432: 65368,
		33433: 65369,
		33434: 65370,
		33439: 12353,
		33440: 12354,
		33441: 12355,
		33442: 12356,
		33443: 12357,
		33444: 12358,
		33445: 12359,
		33446: 12360,
		33447: 12361,
		33448: 12362,
		33449: 12363,
		33450: 12364,
		33451: 12365,
		33452: 12366,
		33453: 12367,
		33454: 12368,
		33455: 12369,
		33456: 12370,
		33457: 12371,
		33458: 12372,
		33459: 12373,
		33460: 12374,
		33461: 12375,
		33462: 12376,
		33463: 12377,
		33464: 12378,
		33465: 12379,
		33466: 12380,
		33467: 12381,
		33468: 12382,
		33469: 12383,
		33470: 12384,
		33471: 12385,
		33472: 12386,
		33473: 12387,
		33474: 12388,
		33475: 12389,
		33476: 12390,
		33477: 12391,
		33478: 12392,
		33479: 12393,
		33480: 12394,
		33481: 12395,
		33482: 12396,
		33483: 12397,
		33484: 12398,
		33485: 12399,
		33486: 12400,
		33487: 12401,
		33488: 12402,
		33489: 12403,
		33490: 12404,
		33491: 12405,
		33492: 12406,
		33493: 12407,
		33494: 12408,
		33495: 12409,
		33496: 12410,
		33497: 12411,
		33498: 12412,
		33499: 12413,
		33500: 12414,
		33501: 12415,
		33502: 12416,
		33503: 12417,
		33504: 12418,
		33505: 12419,
		33506: 12420,
		33507: 12421,
		33508: 12422,
		33509: 12423,
		33510: 12424,
		33511: 12425,
		33512: 12426,
		33513: 12427,
		33514: 12428,
		33515: 12429,
		33516: 12430,
		33517: 12431,
		33518: 12432,
		33519: 12433,
		33520: 12434,
		33521: 12435,
		33600: 12449,
		33601: 12450,
		33602: 12451,
		33603: 12452,
		33604: 12453,
		33605: 12454,
		33606: 12455,
		33607: 12456,
		33608: 12457,
		33609: 12458,
		33610: 12459,
		33611: 12460,
		33612: 12461,
		33613: 12462,
		33614: 12463,
		33615: 12464,
		33616: 12465,
		33617: 12466,
		33618: 12467,
		33619: 12468,
		33620: 12469,
		33621: 12470,
		33622: 12471,
		33623: 12472,
		33624: 12473,
		33625: 12474,
		33626: 12475,
		33627: 12476,
		33628: 12477,
		33629: 12478,
		33630: 12479,
		33631: 12480,
		33632: 12481,
		33633: 12482,
		33634: 12483,
		33635: 12484,
		33636: 12485,
		33637: 12486,
		33638: 12487,
		33639: 12488,
		33640: 12489,
		33641: 12490,
		33642: 12491,
		33643: 12492,
		33644: 12493,
		33645: 12494,
		33646: 12495,
		33647: 12496,
		33648: 12497,
		33649: 12498,
		33650: 12499,
		33651: 12500,
		33652: 12501,
		33653: 12502,
		33654: 12503,
		33655: 12504,
		33656: 12505,
		33657: 12506,
		33658: 12507,
		33659: 12508,
		33660: 12509,
		33661: 12510,
		33662: 12511,
		33664: 12512,
		33665: 12513,
		33666: 12514,
		33667: 12515,
		33668: 12516,
		33669: 12517,
		33670: 12518,
		33671: 12519,
		33672: 12520,
		33673: 12521,
		33674: 12522,
		33675: 12523,
		33676: 12524,
		33677: 12525,
		33678: 12526,
		33679: 12527,
		33680: 12528,
		33681: 12529,
		33682: 12530,
		33683: 12531,
		33684: 12532,
		33685: 12533,
		33686: 12534,
		33695: 913,
		33696: 914,
		33697: 915,
		33698: 916,
		33699: 917,
		33700: 918,
		33701: 919,
		33702: 920,
		33703: 921,
		33704: 922,
		33705: 923,
		33706: 924,
		33707: 925,
		33708: 926,
		33709: 927,
		33710: 928,
		33711: 929,
		33712: 931,
		33713: 932,
		33714: 933,
		33715: 934,
		33716: 935,
		33717: 936,
		33718: 937,
		33727: 945,
		33728: 946,
		33729: 947,
		33730: 948,
		33731: 949,
		33732: 950,
		33733: 951,
		33734: 952,
		33735: 953,
		33736: 954,
		33737: 955,
		33738: 956,
		33739: 957,
		33740: 958,
		33741: 959,
		33742: 960,
		33743: 961,
		33744: 963,
		33745: 964,
		33746: 965,
		33747: 966,
		33748: 967,
		33749: 968,
		33750: 969,
		33856: 1040,
		33857: 1041,
		33858: 1042,
		33859: 1043,
		33860: 1044,
		33861: 1045,
		33862: 1025,
		33863: 1046,
		33864: 1047,
		33865: 1048,
		33866: 1049,
		33867: 1050,
		33868: 1051,
		33869: 1052,
		33870: 1053,
		33871: 1054,
		33872: 1055,
		33873: 1056,
		33874: 1057,
		33875: 1058,
		33876: 1059,
		33877: 1060,
		33878: 1061,
		33879: 1062,
		33880: 1063,
		33881: 1064,
		33882: 1065,
		33883: 1066,
		33884: 1067,
		33885: 1068,
		33886: 1069,
		33887: 1070,
		33888: 1071,
		33904: 1072,
		33905: 1073,
		33906: 1074,
		33907: 1075,
		33908: 1076,
		33909: 1077,
		33910: 1105,
		33911: 1078,
		33912: 1079,
		33913: 1080,
		33914: 1081,
		33915: 1082,
		33916: 1083,
		33917: 1084,
		33918: 1085,
		33920: 1086,
		33921: 1087,
		33922: 1088,
		33923: 1089,
		33924: 1090,
		33925: 1091,
		33926: 1092,
		33927: 1093,
		33928: 1094,
		33929: 1095,
		33930: 1096,
		33931: 1097,
		33932: 1098,
		33933: 1099,
		33934: 1100,
		33935: 1101,
		33936: 1102,
		33937: 1103,
		33951: 9472,
		33952: 9474,
		33953: 9484,
		33954: 9488,
		33955: 9496,
		33956: 9492,
		33957: 9500,
		33958: 9516,
		33959: 9508,
		33960: 9524,
		33961: 9532,
		33962: 9473,
		33963: 9475,
		33964: 9487,
		33965: 9491,
		33966: 9499,
		33967: 9495,
		33968: 9507,
		33969: 9523,
		33970: 9515,
		33971: 9531,
		33972: 9547,
		33973: 9504,
		33974: 9519,
		33975: 9512,
		33976: 9527,
		33977: 9535,
		33978: 9501,
		33979: 9520,
		33980: 9509,
		33981: 9528,
		33982: 9538,
		34624: 9312,
		34625: 9313,
		34626: 9314,
		34627: 9315,
		34628: 9316,
		34629: 9317,
		34630: 9318,
		34631: 9319,
		34632: 9320,
		34633: 9321,
		34634: 9322,
		34635: 9323,
		34636: 9324,
		34637: 9325,
		34638: 9326,
		34639: 9327,
		34640: 9328,
		34641: 9329,
		34642: 9330,
		34643: 9331,
		34644: 8544,
		34645: 8545,
		34646: 8546,
		34647: 8547,
		34648: 8548,
		34649: 8549,
		34650: 8550,
		34651: 8551,
		34652: 8552,
		34653: 8553,
		34655: 13129,
		34656: 13076,
		34657: 13090,
		34658: 13133,
		34659: 13080,
		34660: 13095,
		34661: 13059,
		34662: 13110,
		34663: 13137,
		34664: 13143,
		34665: 13069,
		34666: 13094,
		34667: 13091,
		34668: 13099,
		34669: 13130,
		34670: 13115,
		34671: 13212,
		34672: 13213,
		34673: 13214,
		34674: 13198,
		34675: 13199,
		34676: 13252,
		34677: 13217,
		34686: 13179,
		34688: 12317,
		34689: 12319,
		34690: 8470,
		34691: 13261,
		34692: 8481,
		34693: 12964,
		34694: 12965,
		34695: 12966,
		34696: 12967,
		34697: 12968,
		34698: 12849,
		34699: 12850,
		34700: 12857,
		34701: 13182,
		34702: 13181,
		34703: 13180,
		34704: 8786,
		34705: 8801,
		34706: 8747,
		34707: 8750,
		34708: 8721,
		34709: 8730,
		34710: 8869,
		34711: 8736,
		34712: 8735,
		34713: 8895,
		34714: 8757,
		34715: 8745,
		34716: 8746,
		34975: 20124,
		34976: 21782,
		34977: 23043,
		34978: 38463,
		34979: 21696,
		34980: 24859,
		34981: 25384,
		34982: 23030,
		34983: 36898,
		34984: 33909,
		34985: 33564,
		34986: 31312,
		34987: 24746,
		34988: 25569,
		34989: 28197,
		34990: 26093,
		34991: 33894,
		34992: 33446,
		34993: 39925,
		34994: 26771,
		34995: 22311,
		34996: 26017,
		34997: 25201,
		34998: 23451,
		34999: 22992,
		35000: 34427,
		35001: 39156,
		35002: 32098,
		35003: 32190,
		35004: 39822,
		35005: 25110,
		35006: 31903,
		35007: 34999,
		35008: 23433,
		35009: 24245,
		35010: 25353,
		35011: 26263,
		35012: 26696,
		35013: 38343,
		35014: 38797,
		35015: 26447,
		35016: 20197,
		35017: 20234,
		35018: 20301,
		35019: 20381,
		35020: 20553,
		35021: 22258,
		35022: 22839,
		35023: 22996,
		35024: 23041,
		35025: 23561,
		35026: 24799,
		35027: 24847,
		35028: 24944,
		35029: 26131,
		35030: 26885,
		35031: 28858,
		35032: 30031,
		35033: 30064,
		35034: 31227,
		35035: 32173,
		35036: 32239,
		35037: 32963,
		35038: 33806,
		35039: 34915,
		35040: 35586,
		35041: 36949,
		35042: 36986,
		35043: 21307,
		35044: 20117,
		35045: 20133,
		35046: 22495,
		35047: 32946,
		35048: 37057,
		35049: 30959,
		35050: 19968,
		35051: 22769,
		35052: 28322,
		35053: 36920,
		35054: 31282,
		35055: 33576,
		35056: 33419,
		35057: 39983,
		35058: 20801,
		35059: 21360,
		35060: 21693,
		35061: 21729,
		35062: 22240,
		35063: 23035,
		35064: 24341,
		35065: 39154,
		35066: 28139,
		35067: 32996,
		35068: 34093,
		35136: 38498,
		35137: 38512,
		35138: 38560,
		35139: 38907,
		35140: 21515,
		35141: 21491,
		35142: 23431,
		35143: 28879,
		35144: 32701,
		35145: 36802,
		35146: 38632,
		35147: 21359,
		35148: 40284,
		35149: 31418,
		35150: 19985,
		35151: 30867,
		35152: 33276,
		35153: 28198,
		35154: 22040,
		35155: 21764,
		35156: 27421,
		35157: 34074,
		35158: 39995,
		35159: 23013,
		35160: 21417,
		35161: 28006,
		35162: 29916,
		35163: 38287,
		35164: 22082,
		35165: 20113,
		35166: 36939,
		35167: 38642,
		35168: 33615,
		35169: 39180,
		35170: 21473,
		35171: 21942,
		35172: 23344,
		35173: 24433,
		35174: 26144,
		35175: 26355,
		35176: 26628,
		35177: 27704,
		35178: 27891,
		35179: 27945,
		35180: 29787,
		35181: 30408,
		35182: 31310,
		35183: 38964,
		35184: 33521,
		35185: 34907,
		35186: 35424,
		35187: 37613,
		35188: 28082,
		35189: 30123,
		35190: 30410,
		35191: 39365,
		35192: 24742,
		35193: 35585,
		35194: 36234,
		35195: 38322,
		35196: 27022,
		35197: 21421,
		35198: 20870,
		35200: 22290,
		35201: 22576,
		35202: 22852,
		35203: 23476,
		35204: 24310,
		35205: 24616,
		35206: 25513,
		35207: 25588,
		35208: 27839,
		35209: 28436,
		35210: 28814,
		35211: 28948,
		35212: 29017,
		35213: 29141,
		35214: 29503,
		35215: 32257,
		35216: 33398,
		35217: 33489,
		35218: 34199,
		35219: 36960,
		35220: 37467,
		35221: 40219,
		35222: 22633,
		35223: 26044,
		35224: 27738,
		35225: 29989,
		35226: 20985,
		35227: 22830,
		35228: 22885,
		35229: 24448,
		35230: 24540,
		35231: 25276,
		35232: 26106,
		35233: 27178,
		35234: 27431,
		35235: 27572,
		35236: 29579,
		35237: 32705,
		35238: 35158,
		35239: 40236,
		35240: 40206,
		35241: 40644,
		35242: 23713,
		35243: 27798,
		35244: 33659,
		35245: 20740,
		35246: 23627,
		35247: 25014,
		35248: 33222,
		35249: 26742,
		35250: 29281,
		35251: 20057,
		35252: 20474,
		35253: 21368,
		35254: 24681,
		35255: 28201,
		35256: 31311,
		35257: 38899,
		35258: 19979,
		35259: 21270,
		35260: 20206,
		35261: 20309,
		35262: 20285,
		35263: 20385,
		35264: 20339,
		35265: 21152,
		35266: 21487,
		35267: 22025,
		35268: 22799,
		35269: 23233,
		35270: 23478,
		35271: 23521,
		35272: 31185,
		35273: 26247,
		35274: 26524,
		35275: 26550,
		35276: 27468,
		35277: 27827,
		35278: 28779,
		35279: 29634,
		35280: 31117,
		35281: 31166,
		35282: 31292,
		35283: 31623,
		35284: 33457,
		35285: 33499,
		35286: 33540,
		35287: 33655,
		35288: 33775,
		35289: 33747,
		35290: 34662,
		35291: 35506,
		35292: 22057,
		35293: 36008,
		35294: 36838,
		35295: 36942,
		35296: 38686,
		35297: 34442,
		35298: 20420,
		35299: 23784,
		35300: 25105,
		35301: 29273,
		35302: 30011,
		35303: 33253,
		35304: 33469,
		35305: 34558,
		35306: 36032,
		35307: 38597,
		35308: 39187,
		35309: 39381,
		35310: 20171,
		35311: 20250,
		35312: 35299,
		35313: 22238,
		35314: 22602,
		35315: 22730,
		35316: 24315,
		35317: 24555,
		35318: 24618,
		35319: 24724,
		35320: 24674,
		35321: 25040,
		35322: 25106,
		35323: 25296,
		35324: 25913,
		35392: 39745,
		35393: 26214,
		35394: 26800,
		35395: 28023,
		35396: 28784,
		35397: 30028,
		35398: 30342,
		35399: 32117,
		35400: 33445,
		35401: 34809,
		35402: 38283,
		35403: 38542,
		35404: 35997,
		35405: 20977,
		35406: 21182,
		35407: 22806,
		35408: 21683,
		35409: 23475,
		35410: 23830,
		35411: 24936,
		35412: 27010,
		35413: 28079,
		35414: 30861,
		35415: 33995,
		35416: 34903,
		35417: 35442,
		35418: 37799,
		35419: 39608,
		35420: 28012,
		35421: 39336,
		35422: 34521,
		35423: 22435,
		35424: 26623,
		35425: 34510,
		35426: 37390,
		35427: 21123,
		35428: 22151,
		35429: 21508,
		35430: 24275,
		35431: 25313,
		35432: 25785,
		35433: 26684,
		35434: 26680,
		35435: 27579,
		35436: 29554,
		35437: 30906,
		35438: 31339,
		35439: 35226,
		35440: 35282,
		35441: 36203,
		35442: 36611,
		35443: 37101,
		35444: 38307,
		35445: 38548,
		35446: 38761,
		35447: 23398,
		35448: 23731,
		35449: 27005,
		35450: 38989,
		35451: 38990,
		35452: 25499,
		35453: 31520,
		35454: 27179,
		35456: 27263,
		35457: 26806,
		35458: 39949,
		35459: 28511,
		35460: 21106,
		35461: 21917,
		35462: 24688,
		35463: 25324,
		35464: 27963,
		35465: 28167,
		35466: 28369,
		35467: 33883,
		35468: 35088,
		35469: 36676,
		35470: 19988,
		35471: 39993,
		35472: 21494,
		35473: 26907,
		35474: 27194,
		35475: 38788,
		35476: 26666,
		35477: 20828,
		35478: 31427,
		35479: 33970,
		35480: 37340,
		35481: 37772,
		35482: 22107,
		35483: 40232,
		35484: 26658,
		35485: 33541,
		35486: 33841,
		35487: 31909,
		35488: 21000,
		35489: 33477,
		35490: 29926,
		35491: 20094,
		35492: 20355,
		35493: 20896,
		35494: 23506,
		35495: 21002,
		35496: 21208,
		35497: 21223,
		35498: 24059,
		35499: 21914,
		35500: 22570,
		35501: 23014,
		35502: 23436,
		35503: 23448,
		35504: 23515,
		35505: 24178,
		35506: 24185,
		35507: 24739,
		35508: 24863,
		35509: 24931,
		35510: 25022,
		35511: 25563,
		35512: 25954,
		35513: 26577,
		35514: 26707,
		35515: 26874,
		35516: 27454,
		35517: 27475,
		35518: 27735,
		35519: 28450,
		35520: 28567,
		35521: 28485,
		35522: 29872,
		35523: 29976,
		35524: 30435,
		35525: 30475,
		35526: 31487,
		35527: 31649,
		35528: 31777,
		35529: 32233,
		35530: 32566,
		35531: 32752,
		35532: 32925,
		35533: 33382,
		35534: 33694,
		35535: 35251,
		35536: 35532,
		35537: 36011,
		35538: 36996,
		35539: 37969,
		35540: 38291,
		35541: 38289,
		35542: 38306,
		35543: 38501,
		35544: 38867,
		35545: 39208,
		35546: 33304,
		35547: 20024,
		35548: 21547,
		35549: 23736,
		35550: 24012,
		35551: 29609,
		35552: 30284,
		35553: 30524,
		35554: 23721,
		35555: 32747,
		35556: 36107,
		35557: 38593,
		35558: 38929,
		35559: 38996,
		35560: 39000,
		35561: 20225,
		35562: 20238,
		35563: 21361,
		35564: 21916,
		35565: 22120,
		35566: 22522,
		35567: 22855,
		35568: 23305,
		35569: 23492,
		35570: 23696,
		35571: 24076,
		35572: 24190,
		35573: 24524,
		35574: 25582,
		35575: 26426,
		35576: 26071,
		35577: 26082,
		35578: 26399,
		35579: 26827,
		35580: 26820,
		35648: 27231,
		35649: 24112,
		35650: 27589,
		35651: 27671,
		35652: 27773,
		35653: 30079,
		35654: 31048,
		35655: 23395,
		35656: 31232,
		35657: 32000,
		35658: 24509,
		35659: 35215,
		35660: 35352,
		35661: 36020,
		35662: 36215,
		35663: 36556,
		35664: 36637,
		35665: 39138,
		35666: 39438,
		35667: 39740,
		35668: 20096,
		35669: 20605,
		35670: 20736,
		35671: 22931,
		35672: 23452,
		35673: 25135,
		35674: 25216,
		35675: 25836,
		35676: 27450,
		35677: 29344,
		35678: 30097,
		35679: 31047,
		35680: 32681,
		35681: 34811,
		35682: 35516,
		35683: 35696,
		35684: 25516,
		35685: 33738,
		35686: 38816,
		35687: 21513,
		35688: 21507,
		35689: 21931,
		35690: 26708,
		35691: 27224,
		35692: 35440,
		35693: 30759,
		35694: 26485,
		35695: 40653,
		35696: 21364,
		35697: 23458,
		35698: 33050,
		35699: 34384,
		35700: 36870,
		35701: 19992,
		35702: 20037,
		35703: 20167,
		35704: 20241,
		35705: 21450,
		35706: 21560,
		35707: 23470,
		35708: 24339,
		35709: 24613,
		35710: 25937,
		35712: 26429,
		35713: 27714,
		35714: 27762,
		35715: 27875,
		35716: 28792,
		35717: 29699,
		35718: 31350,
		35719: 31406,
		35720: 31496,
		35721: 32026,
		35722: 31998,
		35723: 32102,
		35724: 26087,
		35725: 29275,
		35726: 21435,
		35727: 23621,
		35728: 24040,
		35729: 25298,
		35730: 25312,
		35731: 25369,
		35732: 28192,
		35733: 34394,
		35734: 35377,
		35735: 36317,
		35736: 37624,
		35737: 28417,
		35738: 31142,
		35739: 39770,
		35740: 20136,
		35741: 20139,
		35742: 20140,
		35743: 20379,
		35744: 20384,
		35745: 20689,
		35746: 20807,
		35747: 31478,
		35748: 20849,
		35749: 20982,
		35750: 21332,
		35751: 21281,
		35752: 21375,
		35753: 21483,
		35754: 21932,
		35755: 22659,
		35756: 23777,
		35757: 24375,
		35758: 24394,
		35759: 24623,
		35760: 24656,
		35761: 24685,
		35762: 25375,
		35763: 25945,
		35764: 27211,
		35765: 27841,
		35766: 29378,
		35767: 29421,
		35768: 30703,
		35769: 33016,
		35770: 33029,
		35771: 33288,
		35772: 34126,
		35773: 37111,
		35774: 37857,
		35775: 38911,
		35776: 39255,
		35777: 39514,
		35778: 20208,
		35779: 20957,
		35780: 23597,
		35781: 26241,
		35782: 26989,
		35783: 23616,
		35784: 26354,
		35785: 26997,
		35786: 29577,
		35787: 26704,
		35788: 31873,
		35789: 20677,
		35790: 21220,
		35791: 22343,
		35792: 24062,
		35793: 37670,
		35794: 26020,
		35795: 27427,
		35796: 27453,
		35797: 29748,
		35798: 31105,
		35799: 31165,
		35800: 31563,
		35801: 32202,
		35802: 33465,
		35803: 33740,
		35804: 34943,
		35805: 35167,
		35806: 35641,
		35807: 36817,
		35808: 37329,
		35809: 21535,
		35810: 37504,
		35811: 20061,
		35812: 20534,
		35813: 21477,
		35814: 21306,
		35815: 29399,
		35816: 29590,
		35817: 30697,
		35818: 33510,
		35819: 36527,
		35820: 39366,
		35821: 39368,
		35822: 39378,
		35823: 20855,
		35824: 24858,
		35825: 34398,
		35826: 21936,
		35827: 31354,
		35828: 20598,
		35829: 23507,
		35830: 36935,
		35831: 38533,
		35832: 20018,
		35833: 27355,
		35834: 37351,
		35835: 23633,
		35836: 23624,
		35904: 25496,
		35905: 31391,
		35906: 27795,
		35907: 38772,
		35908: 36705,
		35909: 31402,
		35910: 29066,
		35911: 38536,
		35912: 31874,
		35913: 26647,
		35914: 32368,
		35915: 26705,
		35916: 37740,
		35917: 21234,
		35918: 21531,
		35919: 34219,
		35920: 35347,
		35921: 32676,
		35922: 36557,
		35923: 37089,
		35924: 21350,
		35925: 34952,
		35926: 31041,
		35927: 20418,
		35928: 20670,
		35929: 21009,
		35930: 20804,
		35931: 21843,
		35932: 22317,
		35933: 29674,
		35934: 22411,
		35935: 22865,
		35936: 24418,
		35937: 24452,
		35938: 24693,
		35939: 24950,
		35940: 24935,
		35941: 25001,
		35942: 25522,
		35943: 25658,
		35944: 25964,
		35945: 26223,
		35946: 26690,
		35947: 28179,
		35948: 30054,
		35949: 31293,
		35950: 31995,
		35951: 32076,
		35952: 32153,
		35953: 32331,
		35954: 32619,
		35955: 33550,
		35956: 33610,
		35957: 34509,
		35958: 35336,
		35959: 35427,
		35960: 35686,
		35961: 36605,
		35962: 38938,
		35963: 40335,
		35964: 33464,
		35965: 36814,
		35966: 39912,
		35968: 21127,
		35969: 25119,
		35970: 25731,
		35971: 28608,
		35972: 38553,
		35973: 26689,
		35974: 20625,
		35975: 27424,
		35976: 27770,
		35977: 28500,
		35978: 31348,
		35979: 32080,
		35980: 34880,
		35981: 35363,
		35982: 26376,
		35983: 20214,
		35984: 20537,
		35985: 20518,
		35986: 20581,
		35987: 20860,
		35988: 21048,
		35989: 21091,
		35990: 21927,
		35991: 22287,
		35992: 22533,
		35993: 23244,
		35994: 24314,
		35995: 25010,
		35996: 25080,
		35997: 25331,
		35998: 25458,
		35999: 26908,
		36000: 27177,
		36001: 29309,
		36002: 29356,
		36003: 29486,
		36004: 30740,
		36005: 30831,
		36006: 32121,
		36007: 30476,
		36008: 32937,
		36009: 35211,
		36010: 35609,
		36011: 36066,
		36012: 36562,
		36013: 36963,
		36014: 37749,
		36015: 38522,
		36016: 38997,
		36017: 39443,
		36018: 40568,
		36019: 20803,
		36020: 21407,
		36021: 21427,
		36022: 24187,
		36023: 24358,
		36024: 28187,
		36025: 28304,
		36026: 29572,
		36027: 29694,
		36028: 32067,
		36029: 33335,
		36030: 35328,
		36031: 35578,
		36032: 38480,
		36033: 20046,
		36034: 20491,
		36035: 21476,
		36036: 21628,
		36037: 22266,
		36038: 22993,
		36039: 23396,
		36040: 24049,
		36041: 24235,
		36042: 24359,
		36043: 25144,
		36044: 25925,
		36045: 26543,
		36046: 28246,
		36047: 29392,
		36048: 31946,
		36049: 34996,
		36050: 32929,
		36051: 32993,
		36052: 33776,
		36053: 34382,
		36054: 35463,
		36055: 36328,
		36056: 37431,
		36057: 38599,
		36058: 39015,
		36059: 40723,
		36060: 20116,
		36061: 20114,
		36062: 20237,
		36063: 21320,
		36064: 21577,
		36065: 21566,
		36066: 23087,
		36067: 24460,
		36068: 24481,
		36069: 24735,
		36070: 26791,
		36071: 27278,
		36072: 29786,
		36073: 30849,
		36074: 35486,
		36075: 35492,
		36076: 35703,
		36077: 37264,
		36078: 20062,
		36079: 39881,
		36080: 20132,
		36081: 20348,
		36082: 20399,
		36083: 20505,
		36084: 20502,
		36085: 20809,
		36086: 20844,
		36087: 21151,
		36088: 21177,
		36089: 21246,
		36090: 21402,
		36091: 21475,
		36092: 21521,
		36160: 21518,
		36161: 21897,
		36162: 22353,
		36163: 22434,
		36164: 22909,
		36165: 23380,
		36166: 23389,
		36167: 23439,
		36168: 24037,
		36169: 24039,
		36170: 24055,
		36171: 24184,
		36172: 24195,
		36173: 24218,
		36174: 24247,
		36175: 24344,
		36176: 24658,
		36177: 24908,
		36178: 25239,
		36179: 25304,
		36180: 25511,
		36181: 25915,
		36182: 26114,
		36183: 26179,
		36184: 26356,
		36185: 26477,
		36186: 26657,
		36187: 26775,
		36188: 27083,
		36189: 27743,
		36190: 27946,
		36191: 28009,
		36192: 28207,
		36193: 28317,
		36194: 30002,
		36195: 30343,
		36196: 30828,
		36197: 31295,
		36198: 31968,
		36199: 32005,
		36200: 32024,
		36201: 32094,
		36202: 32177,
		36203: 32789,
		36204: 32771,
		36205: 32943,
		36206: 32945,
		36207: 33108,
		36208: 33167,
		36209: 33322,
		36210: 33618,
		36211: 34892,
		36212: 34913,
		36213: 35611,
		36214: 36002,
		36215: 36092,
		36216: 37066,
		36217: 37237,
		36218: 37489,
		36219: 30783,
		36220: 37628,
		36221: 38308,
		36222: 38477,
		36224: 38917,
		36225: 39321,
		36226: 39640,
		36227: 40251,
		36228: 21083,
		36229: 21163,
		36230: 21495,
		36231: 21512,
		36232: 22741,
		36233: 25335,
		36234: 28640,
		36235: 35946,
		36236: 36703,
		36237: 40633,
		36238: 20811,
		36239: 21051,
		36240: 21578,
		36241: 22269,
		36242: 31296,
		36243: 37239,
		36244: 40288,
		36245: 40658,
		36246: 29508,
		36247: 28425,
		36248: 33136,
		36249: 29969,
		36250: 24573,
		36251: 24794,
		36252: 39592,
		36253: 29403,
		36254: 36796,
		36255: 27492,
		36256: 38915,
		36257: 20170,
		36258: 22256,
		36259: 22372,
		36260: 22718,
		36261: 23130,
		36262: 24680,
		36263: 25031,
		36264: 26127,
		36265: 26118,
		36266: 26681,
		36267: 26801,
		36268: 28151,
		36269: 30165,
		36270: 32058,
		36271: 33390,
		36272: 39746,
		36273: 20123,
		36274: 20304,
		36275: 21449,
		36276: 21766,
		36277: 23919,
		36278: 24038,
		36279: 24046,
		36280: 26619,
		36281: 27801,
		36282: 29811,
		36283: 30722,
		36284: 35408,
		36285: 37782,
		36286: 35039,
		36287: 22352,
		36288: 24231,
		36289: 25387,
		36290: 20661,
		36291: 20652,
		36292: 20877,
		36293: 26368,
		36294: 21705,
		36295: 22622,
		36296: 22971,
		36297: 23472,
		36298: 24425,
		36299: 25165,
		36300: 25505,
		36301: 26685,
		36302: 27507,
		36303: 28168,
		36304: 28797,
		36305: 37319,
		36306: 29312,
		36307: 30741,
		36308: 30758,
		36309: 31085,
		36310: 25998,
		36311: 32048,
		36312: 33756,
		36313: 35009,
		36314: 36617,
		36315: 38555,
		36316: 21092,
		36317: 22312,
		36318: 26448,
		36319: 32618,
		36320: 36001,
		36321: 20916,
		36322: 22338,
		36323: 38442,
		36324: 22586,
		36325: 27018,
		36326: 32948,
		36327: 21682,
		36328: 23822,
		36329: 22524,
		36330: 30869,
		36331: 40442,
		36332: 20316,
		36333: 21066,
		36334: 21643,
		36335: 25662,
		36336: 26152,
		36337: 26388,
		36338: 26613,
		36339: 31364,
		36340: 31574,
		36341: 32034,
		36342: 37679,
		36343: 26716,
		36344: 39853,
		36345: 31545,
		36346: 21273,
		36347: 20874,
		36348: 21047,
		36416: 23519,
		36417: 25334,
		36418: 25774,
		36419: 25830,
		36420: 26413,
		36421: 27578,
		36422: 34217,
		36423: 38609,
		36424: 30352,
		36425: 39894,
		36426: 25420,
		36427: 37638,
		36428: 39851,
		36429: 30399,
		36430: 26194,
		36431: 19977,
		36432: 20632,
		36433: 21442,
		36434: 23665,
		36435: 24808,
		36436: 25746,
		36437: 25955,
		36438: 26719,
		36439: 29158,
		36440: 29642,
		36441: 29987,
		36442: 31639,
		36443: 32386,
		36444: 34453,
		36445: 35715,
		36446: 36059,
		36447: 37240,
		36448: 39184,
		36449: 26028,
		36450: 26283,
		36451: 27531,
		36452: 20181,
		36453: 20180,
		36454: 20282,
		36455: 20351,
		36456: 21050,
		36457: 21496,
		36458: 21490,
		36459: 21987,
		36460: 22235,
		36461: 22763,
		36462: 22987,
		36463: 22985,
		36464: 23039,
		36465: 23376,
		36466: 23629,
		36467: 24066,
		36468: 24107,
		36469: 24535,
		36470: 24605,
		36471: 25351,
		36472: 25903,
		36473: 23388,
		36474: 26031,
		36475: 26045,
		36476: 26088,
		36477: 26525,
		36478: 27490,
		36480: 27515,
		36481: 27663,
		36482: 29509,
		36483: 31049,
		36484: 31169,
		36485: 31992,
		36486: 32025,
		36487: 32043,
		36488: 32930,
		36489: 33026,
		36490: 33267,
		36491: 35222,
		36492: 35422,
		36493: 35433,
		36494: 35430,
		36495: 35468,
		36496: 35566,
		36497: 36039,
		36498: 36060,
		36499: 38604,
		36500: 39164,
		36501: 27503,
		36502: 20107,
		36503: 20284,
		36504: 20365,
		36505: 20816,
		36506: 23383,
		36507: 23546,
		36508: 24904,
		36509: 25345,
		36510: 26178,
		36511: 27425,
		36512: 28363,
		36513: 27835,
		36514: 29246,
		36515: 29885,
		36516: 30164,
		36517: 30913,
		36518: 31034,
		36519: 32780,
		36520: 32819,
		36521: 33258,
		36522: 33940,
		36523: 36766,
		36524: 27728,
		36525: 40575,
		36526: 24335,
		36527: 35672,
		36528: 40235,
		36529: 31482,
		36530: 36600,
		36531: 23437,
		36532: 38635,
		36533: 19971,
		36534: 21489,
		36535: 22519,
		36536: 22833,
		36537: 23241,
		36538: 23460,
		36539: 24713,
		36540: 28287,
		36541: 28422,
		36542: 30142,
		36543: 36074,
		36544: 23455,
		36545: 34048,
		36546: 31712,
		36547: 20594,
		36548: 26612,
		36549: 33437,
		36550: 23649,
		36551: 34122,
		36552: 32286,
		36553: 33294,
		36554: 20889,
		36555: 23556,
		36556: 25448,
		36557: 36198,
		36558: 26012,
		36559: 29038,
		36560: 31038,
		36561: 32023,
		36562: 32773,
		36563: 35613,
		36564: 36554,
		36565: 36974,
		36566: 34503,
		36567: 37034,
		36568: 20511,
		36569: 21242,
		36570: 23610,
		36571: 26451,
		36572: 28796,
		36573: 29237,
		36574: 37196,
		36575: 37320,
		36576: 37675,
		36577: 33509,
		36578: 23490,
		36579: 24369,
		36580: 24825,
		36581: 20027,
		36582: 21462,
		36583: 23432,
		36584: 25163,
		36585: 26417,
		36586: 27530,
		36587: 29417,
		36588: 29664,
		36589: 31278,
		36590: 33131,
		36591: 36259,
		36592: 37202,
		36593: 39318,
		36594: 20754,
		36595: 21463,
		36596: 21610,
		36597: 23551,
		36598: 25480,
		36599: 27193,
		36600: 32172,
		36601: 38656,
		36602: 22234,
		36603: 21454,
		36604: 21608,
		36672: 23447,
		36673: 23601,
		36674: 24030,
		36675: 20462,
		36676: 24833,
		36677: 25342,
		36678: 27954,
		36679: 31168,
		36680: 31179,
		36681: 32066,
		36682: 32333,
		36683: 32722,
		36684: 33261,
		36685: 33311,
		36686: 33936,
		36687: 34886,
		36688: 35186,
		36689: 35728,
		36690: 36468,
		36691: 36655,
		36692: 36913,
		36693: 37195,
		36694: 37228,
		36695: 38598,
		36696: 37276,
		36697: 20160,
		36698: 20303,
		36699: 20805,
		36700: 21313,
		36701: 24467,
		36702: 25102,
		36703: 26580,
		36704: 27713,
		36705: 28171,
		36706: 29539,
		36707: 32294,
		36708: 37325,
		36709: 37507,
		36710: 21460,
		36711: 22809,
		36712: 23487,
		36713: 28113,
		36714: 31069,
		36715: 32302,
		36716: 31899,
		36717: 22654,
		36718: 29087,
		36719: 20986,
		36720: 34899,
		36721: 36848,
		36722: 20426,
		36723: 23803,
		36724: 26149,
		36725: 30636,
		36726: 31459,
		36727: 33308,
		36728: 39423,
		36729: 20934,
		36730: 24490,
		36731: 26092,
		36732: 26991,
		36733: 27529,
		36734: 28147,
		36736: 28310,
		36737: 28516,
		36738: 30462,
		36739: 32020,
		36740: 24033,
		36741: 36981,
		36742: 37255,
		36743: 38918,
		36744: 20966,
		36745: 21021,
		36746: 25152,
		36747: 26257,
		36748: 26329,
		36749: 28186,
		36750: 24246,
		36751: 32210,
		36752: 32626,
		36753: 26360,
		36754: 34223,
		36755: 34295,
		36756: 35576,
		36757: 21161,
		36758: 21465,
		36759: 22899,
		36760: 24207,
		36761: 24464,
		36762: 24661,
		36763: 37604,
		36764: 38500,
		36765: 20663,
		36766: 20767,
		36767: 21213,
		36768: 21280,
		36769: 21319,
		36770: 21484,
		36771: 21736,
		36772: 21830,
		36773: 21809,
		36774: 22039,
		36775: 22888,
		36776: 22974,
		36777: 23100,
		36778: 23477,
		36779: 23558,
		36780: 23567,
		36781: 23569,
		36782: 23578,
		36783: 24196,
		36784: 24202,
		36785: 24288,
		36786: 24432,
		36787: 25215,
		36788: 25220,
		36789: 25307,
		36790: 25484,
		36791: 25463,
		36792: 26119,
		36793: 26124,
		36794: 26157,
		36795: 26230,
		36796: 26494,
		36797: 26786,
		36798: 27167,
		36799: 27189,
		36800: 27836,
		36801: 28040,
		36802: 28169,
		36803: 28248,
		36804: 28988,
		36805: 28966,
		36806: 29031,
		36807: 30151,
		36808: 30465,
		36809: 30813,
		36810: 30977,
		36811: 31077,
		36812: 31216,
		36813: 31456,
		36814: 31505,
		36815: 31911,
		36816: 32057,
		36817: 32918,
		36818: 33750,
		36819: 33931,
		36820: 34121,
		36821: 34909,
		36822: 35059,
		36823: 35359,
		36824: 35388,
		36825: 35412,
		36826: 35443,
		36827: 35937,
		36828: 36062,
		36829: 37284,
		36830: 37478,
		36831: 37758,
		36832: 37912,
		36833: 38556,
		36834: 38808,
		36835: 19978,
		36836: 19976,
		36837: 19998,
		36838: 20055,
		36839: 20887,
		36840: 21104,
		36841: 22478,
		36842: 22580,
		36843: 22732,
		36844: 23330,
		36845: 24120,
		36846: 24773,
		36847: 25854,
		36848: 26465,
		36849: 26454,
		36850: 27972,
		36851: 29366,
		36852: 30067,
		36853: 31331,
		36854: 33976,
		36855: 35698,
		36856: 37304,
		36857: 37664,
		36858: 22065,
		36859: 22516,
		36860: 39166,
		36928: 25325,
		36929: 26893,
		36930: 27542,
		36931: 29165,
		36932: 32340,
		36933: 32887,
		36934: 33394,
		36935: 35302,
		36936: 39135,
		36937: 34645,
		36938: 36785,
		36939: 23611,
		36940: 20280,
		36941: 20449,
		36942: 20405,
		36943: 21767,
		36944: 23072,
		36945: 23517,
		36946: 23529,
		36947: 24515,
		36948: 24910,
		36949: 25391,
		36950: 26032,
		36951: 26187,
		36952: 26862,
		36953: 27035,
		36954: 28024,
		36955: 28145,
		36956: 30003,
		36957: 30137,
		36958: 30495,
		36959: 31070,
		36960: 31206,
		36961: 32051,
		36962: 33251,
		36963: 33455,
		36964: 34218,
		36965: 35242,
		36966: 35386,
		36967: 36523,
		36968: 36763,
		36969: 36914,
		36970: 37341,
		36971: 38663,
		36972: 20154,
		36973: 20161,
		36974: 20995,
		36975: 22645,
		36976: 22764,
		36977: 23563,
		36978: 29978,
		36979: 23613,
		36980: 33102,
		36981: 35338,
		36982: 36805,
		36983: 38499,
		36984: 38765,
		36985: 31525,
		36986: 35535,
		36987: 38920,
		36988: 37218,
		36989: 22259,
		36990: 21416,
		36992: 36887,
		36993: 21561,
		36994: 22402,
		36995: 24101,
		36996: 25512,
		36997: 27700,
		36998: 28810,
		36999: 30561,
		37000: 31883,
		37001: 32736,
		37002: 34928,
		37003: 36930,
		37004: 37204,
		37005: 37648,
		37006: 37656,
		37007: 38543,
		37008: 29790,
		37009: 39620,
		37010: 23815,
		37011: 23913,
		37012: 25968,
		37013: 26530,
		37014: 36264,
		37015: 38619,
		37016: 25454,
		37017: 26441,
		37018: 26905,
		37019: 33733,
		37020: 38935,
		37021: 38592,
		37022: 35070,
		37023: 28548,
		37024: 25722,
		37025: 23544,
		37026: 19990,
		37027: 28716,
		37028: 30045,
		37029: 26159,
		37030: 20932,
		37031: 21046,
		37032: 21218,
		37033: 22995,
		37034: 24449,
		37035: 24615,
		37036: 25104,
		37037: 25919,
		37038: 25972,
		37039: 26143,
		37040: 26228,
		37041: 26866,
		37042: 26646,
		37043: 27491,
		37044: 28165,
		37045: 29298,
		37046: 29983,
		37047: 30427,
		37048: 31934,
		37049: 32854,
		37050: 22768,
		37051: 35069,
		37052: 35199,
		37053: 35488,
		37054: 35475,
		37055: 35531,
		37056: 36893,
		37057: 37266,
		37058: 38738,
		37059: 38745,
		37060: 25993,
		37061: 31246,
		37062: 33030,
		37063: 38587,
		37064: 24109,
		37065: 24796,
		37066: 25114,
		37067: 26021,
		37068: 26132,
		37069: 26512,
		37070: 30707,
		37071: 31309,
		37072: 31821,
		37073: 32318,
		37074: 33034,
		37075: 36012,
		37076: 36196,
		37077: 36321,
		37078: 36447,
		37079: 30889,
		37080: 20999,
		37081: 25305,
		37082: 25509,
		37083: 25666,
		37084: 25240,
		37085: 35373,
		37086: 31363,
		37087: 31680,
		37088: 35500,
		37089: 38634,
		37090: 32118,
		37091: 33292,
		37092: 34633,
		37093: 20185,
		37094: 20808,
		37095: 21315,
		37096: 21344,
		37097: 23459,
		37098: 23554,
		37099: 23574,
		37100: 24029,
		37101: 25126,
		37102: 25159,
		37103: 25776,
		37104: 26643,
		37105: 26676,
		37106: 27849,
		37107: 27973,
		37108: 27927,
		37109: 26579,
		37110: 28508,
		37111: 29006,
		37112: 29053,
		37113: 26059,
		37114: 31359,
		37115: 31661,
		37116: 32218,
		37184: 32330,
		37185: 32680,
		37186: 33146,
		37187: 33307,
		37188: 33337,
		37189: 34214,
		37190: 35438,
		37191: 36046,
		37192: 36341,
		37193: 36984,
		37194: 36983,
		37195: 37549,
		37196: 37521,
		37197: 38275,
		37198: 39854,
		37199: 21069,
		37200: 21892,
		37201: 28472,
		37202: 28982,
		37203: 20840,
		37204: 31109,
		37205: 32341,
		37206: 33203,
		37207: 31950,
		37208: 22092,
		37209: 22609,
		37210: 23720,
		37211: 25514,
		37212: 26366,
		37213: 26365,
		37214: 26970,
		37215: 29401,
		37216: 30095,
		37217: 30094,
		37218: 30990,
		37219: 31062,
		37220: 31199,
		37221: 31895,
		37222: 32032,
		37223: 32068,
		37224: 34311,
		37225: 35380,
		37226: 38459,
		37227: 36961,
		37228: 40736,
		37229: 20711,
		37230: 21109,
		37231: 21452,
		37232: 21474,
		37233: 20489,
		37234: 21930,
		37235: 22766,
		37236: 22863,
		37237: 29245,
		37238: 23435,
		37239: 23652,
		37240: 21277,
		37241: 24803,
		37242: 24819,
		37243: 25436,
		37244: 25475,
		37245: 25407,
		37246: 25531,
		37248: 25805,
		37249: 26089,
		37250: 26361,
		37251: 24035,
		37252: 27085,
		37253: 27133,
		37254: 28437,
		37255: 29157,
		37256: 20105,
		37257: 30185,
		37258: 30456,
		37259: 31379,
		37260: 31967,
		37261: 32207,
		37262: 32156,
		37263: 32865,
		37264: 33609,
		37265: 33624,
		37266: 33900,
		37267: 33980,
		37268: 34299,
		37269: 35013,
		37270: 36208,
		37271: 36865,
		37272: 36973,
		37273: 37783,
		37274: 38684,
		37275: 39442,
		37276: 20687,
		37277: 22679,
		37278: 24974,
		37279: 33235,
		37280: 34101,
		37281: 36104,
		37282: 36896,
		37283: 20419,
		37284: 20596,
		37285: 21063,
		37286: 21363,
		37287: 24687,
		37288: 25417,
		37289: 26463,
		37290: 28204,
		37291: 36275,
		37292: 36895,
		37293: 20439,
		37294: 23646,
		37295: 36042,
		37296: 26063,
		37297: 32154,
		37298: 21330,
		37299: 34966,
		37300: 20854,
		37301: 25539,
		37302: 23384,
		37303: 23403,
		37304: 23562,
		37305: 25613,
		37306: 26449,
		37307: 36956,
		37308: 20182,
		37309: 22810,
		37310: 22826,
		37311: 27760,
		37312: 35409,
		37313: 21822,
		37314: 22549,
		37315: 22949,
		37316: 24816,
		37317: 25171,
		37318: 26561,
		37319: 33333,
		37320: 26965,
		37321: 38464,
		37322: 39364,
		37323: 39464,
		37324: 20307,
		37325: 22534,
		37326: 23550,
		37327: 32784,
		37328: 23729,
		37329: 24111,
		37330: 24453,
		37331: 24608,
		37332: 24907,
		37333: 25140,
		37334: 26367,
		37335: 27888,
		37336: 28382,
		37337: 32974,
		37338: 33151,
		37339: 33492,
		37340: 34955,
		37341: 36024,
		37342: 36864,
		37343: 36910,
		37344: 38538,
		37345: 40667,
		37346: 39899,
		37347: 20195,
		37348: 21488,
		37349: 22823,
		37350: 31532,
		37351: 37261,
		37352: 38988,
		37353: 40441,
		37354: 28381,
		37355: 28711,
		37356: 21331,
		37357: 21828,
		37358: 23429,
		37359: 25176,
		37360: 25246,
		37361: 25299,
		37362: 27810,
		37363: 28655,
		37364: 29730,
		37365: 35351,
		37366: 37944,
		37367: 28609,
		37368: 35582,
		37369: 33592,
		37370: 20967,
		37371: 34552,
		37372: 21482,
		37440: 21481,
		37441: 20294,
		37442: 36948,
		37443: 36784,
		37444: 22890,
		37445: 33073,
		37446: 24061,
		37447: 31466,
		37448: 36799,
		37449: 26842,
		37450: 35895,
		37451: 29432,
		37452: 40008,
		37453: 27197,
		37454: 35504,
		37455: 20025,
		37456: 21336,
		37457: 22022,
		37458: 22374,
		37459: 25285,
		37460: 25506,
		37461: 26086,
		37462: 27470,
		37463: 28129,
		37464: 28251,
		37465: 28845,
		37466: 30701,
		37467: 31471,
		37468: 31658,
		37469: 32187,
		37470: 32829,
		37471: 32966,
		37472: 34507,
		37473: 35477,
		37474: 37723,
		37475: 22243,
		37476: 22727,
		37477: 24382,
		37478: 26029,
		37479: 26262,
		37480: 27264,
		37481: 27573,
		37482: 30007,
		37483: 35527,
		37484: 20516,
		37485: 30693,
		37486: 22320,
		37487: 24347,
		37488: 24677,
		37489: 26234,
		37490: 27744,
		37491: 30196,
		37492: 31258,
		37493: 32622,
		37494: 33268,
		37495: 34584,
		37496: 36933,
		37497: 39347,
		37498: 31689,
		37499: 30044,
		37500: 31481,
		37501: 31569,
		37502: 33988,
		37504: 36880,
		37505: 31209,
		37506: 31378,
		37507: 33590,
		37508: 23265,
		37509: 30528,
		37510: 20013,
		37511: 20210,
		37512: 23449,
		37513: 24544,
		37514: 25277,
		37515: 26172,
		37516: 26609,
		37517: 27880,
		37518: 34411,
		37519: 34935,
		37520: 35387,
		37521: 37198,
		37522: 37619,
		37523: 39376,
		37524: 27159,
		37525: 28710,
		37526: 29482,
		37527: 33511,
		37528: 33879,
		37529: 36015,
		37530: 19969,
		37531: 20806,
		37532: 20939,
		37533: 21899,
		37534: 23541,
		37535: 24086,
		37536: 24115,
		37537: 24193,
		37538: 24340,
		37539: 24373,
		37540: 24427,
		37541: 24500,
		37542: 25074,
		37543: 25361,
		37544: 26274,
		37545: 26397,
		37546: 28526,
		37547: 29266,
		37548: 30010,
		37549: 30522,
		37550: 32884,
		37551: 33081,
		37552: 33144,
		37553: 34678,
		37554: 35519,
		37555: 35548,
		37556: 36229,
		37557: 36339,
		37558: 37530,
		37559: 38263,
		37560: 38914,
		37561: 40165,
		37562: 21189,
		37563: 25431,
		37564: 30452,
		37565: 26389,
		37566: 27784,
		37567: 29645,
		37568: 36035,
		37569: 37806,
		37570: 38515,
		37571: 27941,
		37572: 22684,
		37573: 26894,
		37574: 27084,
		37575: 36861,
		37576: 37786,
		37577: 30171,
		37578: 36890,
		37579: 22618,
		37580: 26626,
		37581: 25524,
		37582: 27131,
		37583: 20291,
		37584: 28460,
		37585: 26584,
		37586: 36795,
		37587: 34086,
		37588: 32180,
		37589: 37716,
		37590: 26943,
		37591: 28528,
		37592: 22378,
		37593: 22775,
		37594: 23340,
		37595: 32044,
		37596: 29226,
		37597: 21514,
		37598: 37347,
		37599: 40372,
		37600: 20141,
		37601: 20302,
		37602: 20572,
		37603: 20597,
		37604: 21059,
		37605: 35998,
		37606: 21576,
		37607: 22564,
		37608: 23450,
		37609: 24093,
		37610: 24213,
		37611: 24237,
		37612: 24311,
		37613: 24351,
		37614: 24716,
		37615: 25269,
		37616: 25402,
		37617: 25552,
		37618: 26799,
		37619: 27712,
		37620: 30855,
		37621: 31118,
		37622: 31243,
		37623: 32224,
		37624: 33351,
		37625: 35330,
		37626: 35558,
		37627: 36420,
		37628: 36883,
		37696: 37048,
		37697: 37165,
		37698: 37336,
		37699: 40718,
		37700: 27877,
		37701: 25688,
		37702: 25826,
		37703: 25973,
		37704: 28404,
		37705: 30340,
		37706: 31515,
		37707: 36969,
		37708: 37841,
		37709: 28346,
		37710: 21746,
		37711: 24505,
		37712: 25764,
		37713: 36685,
		37714: 36845,
		37715: 37444,
		37716: 20856,
		37717: 22635,
		37718: 22825,
		37719: 23637,
		37720: 24215,
		37721: 28155,
		37722: 32399,
		37723: 29980,
		37724: 36028,
		37725: 36578,
		37726: 39003,
		37727: 28857,
		37728: 20253,
		37729: 27583,
		37730: 28593,
		37731: 30000,
		37732: 38651,
		37733: 20814,
		37734: 21520,
		37735: 22581,
		37736: 22615,
		37737: 22956,
		37738: 23648,
		37739: 24466,
		37740: 26007,
		37741: 26460,
		37742: 28193,
		37743: 30331,
		37744: 33759,
		37745: 36077,
		37746: 36884,
		37747: 37117,
		37748: 37709,
		37749: 30757,
		37750: 30778,
		37751: 21162,
		37752: 24230,
		37753: 22303,
		37754: 22900,
		37755: 24594,
		37756: 20498,
		37757: 20826,
		37758: 20908,
		37760: 20941,
		37761: 20992,
		37762: 21776,
		37763: 22612,
		37764: 22616,
		37765: 22871,
		37766: 23445,
		37767: 23798,
		37768: 23947,
		37769: 24764,
		37770: 25237,
		37771: 25645,
		37772: 26481,
		37773: 26691,
		37774: 26812,
		37775: 26847,
		37776: 30423,
		37777: 28120,
		37778: 28271,
		37779: 28059,
		37780: 28783,
		37781: 29128,
		37782: 24403,
		37783: 30168,
		37784: 31095,
		37785: 31561,
		37786: 31572,
		37787: 31570,
		37788: 31958,
		37789: 32113,
		37790: 21040,
		37791: 33891,
		37792: 34153,
		37793: 34276,
		37794: 35342,
		37795: 35588,
		37796: 35910,
		37797: 36367,
		37798: 36867,
		37799: 36879,
		37800: 37913,
		37801: 38518,
		37802: 38957,
		37803: 39472,
		37804: 38360,
		37805: 20685,
		37806: 21205,
		37807: 21516,
		37808: 22530,
		37809: 23566,
		37810: 24999,
		37811: 25758,
		37812: 27934,
		37813: 30643,
		37814: 31461,
		37815: 33012,
		37816: 33796,
		37817: 36947,
		37818: 37509,
		37819: 23776,
		37820: 40199,
		37821: 21311,
		37822: 24471,
		37823: 24499,
		37824: 28060,
		37825: 29305,
		37826: 30563,
		37827: 31167,
		37828: 31716,
		37829: 27602,
		37830: 29420,
		37831: 35501,
		37832: 26627,
		37833: 27233,
		37834: 20984,
		37835: 31361,
		37836: 26932,
		37837: 23626,
		37838: 40182,
		37839: 33515,
		37840: 23493,
		37841: 37193,
		37842: 28702,
		37843: 22136,
		37844: 23663,
		37845: 24775,
		37846: 25958,
		37847: 27788,
		37848: 35930,
		37849: 36929,
		37850: 38931,
		37851: 21585,
		37852: 26311,
		37853: 37389,
		37854: 22856,
		37855: 37027,
		37856: 20869,
		37857: 20045,
		37858: 20970,
		37859: 34201,
		37860: 35598,
		37861: 28760,
		37862: 25466,
		37863: 37707,
		37864: 26978,
		37865: 39348,
		37866: 32260,
		37867: 30071,
		37868: 21335,
		37869: 26976,
		37870: 36575,
		37871: 38627,
		37872: 27741,
		37873: 20108,
		37874: 23612,
		37875: 24336,
		37876: 36841,
		37877: 21250,
		37878: 36049,
		37879: 32905,
		37880: 34425,
		37881: 24319,
		37882: 26085,
		37883: 20083,
		37884: 20837,
		37952: 22914,
		37953: 23615,
		37954: 38894,
		37955: 20219,
		37956: 22922,
		37957: 24525,
		37958: 35469,
		37959: 28641,
		37960: 31152,
		37961: 31074,
		37962: 23527,
		37963: 33905,
		37964: 29483,
		37965: 29105,
		37966: 24180,
		37967: 24565,
		37968: 25467,
		37969: 25754,
		37970: 29123,
		37971: 31896,
		37972: 20035,
		37973: 24316,
		37974: 20043,
		37975: 22492,
		37976: 22178,
		37977: 24745,
		37978: 28611,
		37979: 32013,
		37980: 33021,
		37981: 33075,
		37982: 33215,
		37983: 36786,
		37984: 35223,
		37985: 34468,
		37986: 24052,
		37987: 25226,
		37988: 25773,
		37989: 35207,
		37990: 26487,
		37991: 27874,
		37992: 27966,
		37993: 29750,
		37994: 30772,
		37995: 23110,
		37996: 32629,
		37997: 33453,
		37998: 39340,
		37999: 20467,
		38000: 24259,
		38001: 25309,
		38002: 25490,
		38003: 25943,
		38004: 26479,
		38005: 30403,
		38006: 29260,
		38007: 32972,
		38008: 32954,
		38009: 36649,
		38010: 37197,
		38011: 20493,
		38012: 22521,
		38013: 23186,
		38014: 26757,
		38016: 26995,
		38017: 29028,
		38018: 29437,
		38019: 36023,
		38020: 22770,
		38021: 36064,
		38022: 38506,
		38023: 36889,
		38024: 34687,
		38025: 31204,
		38026: 30695,
		38027: 33833,
		38028: 20271,
		38029: 21093,
		38030: 21338,
		38031: 25293,
		38032: 26575,
		38033: 27850,
		38034: 30333,
		38035: 31636,
		38036: 31893,
		38037: 33334,
		38038: 34180,
		38039: 36843,
		38040: 26333,
		38041: 28448,
		38042: 29190,
		38043: 32283,
		38044: 33707,
		38045: 39361,
		38046: 40614,
		38047: 20989,
		38048: 31665,
		38049: 30834,
		38050: 31672,
		38051: 32903,
		38052: 31560,
		38053: 27368,
		38054: 24161,
		38055: 32908,
		38056: 30033,
		38057: 30048,
		38058: 20843,
		38059: 37474,
		38060: 28300,
		38061: 30330,
		38062: 37271,
		38063: 39658,
		38064: 20240,
		38065: 32624,
		38066: 25244,
		38067: 31567,
		38068: 38309,
		38069: 40169,
		38070: 22138,
		38071: 22617,
		38072: 34532,
		38073: 38588,
		38074: 20276,
		38075: 21028,
		38076: 21322,
		38077: 21453,
		38078: 21467,
		38079: 24070,
		38080: 25644,
		38081: 26001,
		38082: 26495,
		38083: 27710,
		38084: 27726,
		38085: 29256,
		38086: 29359,
		38087: 29677,
		38088: 30036,
		38089: 32321,
		38090: 33324,
		38091: 34281,
		38092: 36009,
		38093: 31684,
		38094: 37318,
		38095: 29033,
		38096: 38930,
		38097: 39151,
		38098: 25405,
		38099: 26217,
		38100: 30058,
		38101: 30436,
		38102: 30928,
		38103: 34115,
		38104: 34542,
		38105: 21290,
		38106: 21329,
		38107: 21542,
		38108: 22915,
		38109: 24199,
		38110: 24444,
		38111: 24754,
		38112: 25161,
		38113: 25209,
		38114: 25259,
		38115: 26000,
		38116: 27604,
		38117: 27852,
		38118: 30130,
		38119: 30382,
		38120: 30865,
		38121: 31192,
		38122: 32203,
		38123: 32631,
		38124: 32933,
		38125: 34987,
		38126: 35513,
		38127: 36027,
		38128: 36991,
		38129: 38750,
		38130: 39131,
		38131: 27147,
		38132: 31800,
		38133: 20633,
		38134: 23614,
		38135: 24494,
		38136: 26503,
		38137: 27608,
		38138: 29749,
		38139: 30473,
		38140: 32654,
		38208: 40763,
		38209: 26570,
		38210: 31255,
		38211: 21305,
		38212: 30091,
		38213: 39661,
		38214: 24422,
		38215: 33181,
		38216: 33777,
		38217: 32920,
		38218: 24380,
		38219: 24517,
		38220: 30050,
		38221: 31558,
		38222: 36924,
		38223: 26727,
		38224: 23019,
		38225: 23195,
		38226: 32016,
		38227: 30334,
		38228: 35628,
		38229: 20469,
		38230: 24426,
		38231: 27161,
		38232: 27703,
		38233: 28418,
		38234: 29922,
		38235: 31080,
		38236: 34920,
		38237: 35413,
		38238: 35961,
		38239: 24287,
		38240: 25551,
		38241: 30149,
		38242: 31186,
		38243: 33495,
		38244: 37672,
		38245: 37618,
		38246: 33948,
		38247: 34541,
		38248: 39981,
		38249: 21697,
		38250: 24428,
		38251: 25996,
		38252: 27996,
		38253: 28693,
		38254: 36007,
		38255: 36051,
		38256: 38971,
		38257: 25935,
		38258: 29942,
		38259: 19981,
		38260: 20184,
		38261: 22496,
		38262: 22827,
		38263: 23142,
		38264: 23500,
		38265: 20904,
		38266: 24067,
		38267: 24220,
		38268: 24598,
		38269: 25206,
		38270: 25975,
		38272: 26023,
		38273: 26222,
		38274: 28014,
		38275: 29238,
		38276: 31526,
		38277: 33104,
		38278: 33178,
		38279: 33433,
		38280: 35676,
		38281: 36000,
		38282: 36070,
		38283: 36212,
		38284: 38428,
		38285: 38468,
		38286: 20398,
		38287: 25771,
		38288: 27494,
		38289: 33310,
		38290: 33889,
		38291: 34154,
		38292: 37096,
		38293: 23553,
		38294: 26963,
		38295: 39080,
		38296: 33914,
		38297: 34135,
		38298: 20239,
		38299: 21103,
		38300: 24489,
		38301: 24133,
		38302: 26381,
		38303: 31119,
		38304: 33145,
		38305: 35079,
		38306: 35206,
		38307: 28149,
		38308: 24343,
		38309: 25173,
		38310: 27832,
		38311: 20175,
		38312: 29289,
		38313: 39826,
		38314: 20998,
		38315: 21563,
		38316: 22132,
		38317: 22707,
		38318: 24996,
		38319: 25198,
		38320: 28954,
		38321: 22894,
		38322: 31881,
		38323: 31966,
		38324: 32027,
		38325: 38640,
		38326: 25991,
		38327: 32862,
		38328: 19993,
		38329: 20341,
		38330: 20853,
		38331: 22592,
		38332: 24163,
		38333: 24179,
		38334: 24330,
		38335: 26564,
		38336: 20006,
		38337: 34109,
		38338: 38281,
		38339: 38491,
		38340: 31859,
		38341: 38913,
		38342: 20731,
		38343: 22721,
		38344: 30294,
		38345: 30887,
		38346: 21029,
		38347: 30629,
		38348: 34065,
		38349: 31622,
		38350: 20559,
		38351: 22793,
		38352: 29255,
		38353: 31687,
		38354: 32232,
		38355: 36794,
		38356: 36820,
		38357: 36941,
		38358: 20415,
		38359: 21193,
		38360: 23081,
		38361: 24321,
		38362: 38829,
		38363: 20445,
		38364: 33303,
		38365: 37610,
		38366: 22275,
		38367: 25429,
		38368: 27497,
		38369: 29995,
		38370: 35036,
		38371: 36628,
		38372: 31298,
		38373: 21215,
		38374: 22675,
		38375: 24917,
		38376: 25098,
		38377: 26286,
		38378: 27597,
		38379: 31807,
		38380: 33769,
		38381: 20515,
		38382: 20472,
		38383: 21253,
		38384: 21574,
		38385: 22577,
		38386: 22857,
		38387: 23453,
		38388: 23792,
		38389: 23791,
		38390: 23849,
		38391: 24214,
		38392: 25265,
		38393: 25447,
		38394: 25918,
		38395: 26041,
		38396: 26379,
		38464: 27861,
		38465: 27873,
		38466: 28921,
		38467: 30770,
		38468: 32299,
		38469: 32990,
		38470: 33459,
		38471: 33804,
		38472: 34028,
		38473: 34562,
		38474: 35090,
		38475: 35370,
		38476: 35914,
		38477: 37030,
		38478: 37586,
		38479: 39165,
		38480: 40179,
		38481: 40300,
		38482: 20047,
		38483: 20129,
		38484: 20621,
		38485: 21078,
		38486: 22346,
		38487: 22952,
		38488: 24125,
		38489: 24536,
		38490: 24537,
		38491: 25151,
		38492: 26292,
		38493: 26395,
		38494: 26576,
		38495: 26834,
		38496: 20882,
		38497: 32033,
		38498: 32938,
		38499: 33192,
		38500: 35584,
		38501: 35980,
		38502: 36031,
		38503: 37502,
		38504: 38450,
		38505: 21536,
		38506: 38956,
		38507: 21271,
		38508: 20693,
		38509: 21340,
		38510: 22696,
		38511: 25778,
		38512: 26420,
		38513: 29287,
		38514: 30566,
		38515: 31302,
		38516: 37350,
		38517: 21187,
		38518: 27809,
		38519: 27526,
		38520: 22528,
		38521: 24140,
		38522: 22868,
		38523: 26412,
		38524: 32763,
		38525: 20961,
		38526: 30406,
		38528: 25705,
		38529: 30952,
		38530: 39764,
		38531: 40635,
		38532: 22475,
		38533: 22969,
		38534: 26151,
		38535: 26522,
		38536: 27598,
		38537: 21737,
		38538: 27097,
		38539: 24149,
		38540: 33180,
		38541: 26517,
		38542: 39850,
		38543: 26622,
		38544: 40018,
		38545: 26717,
		38546: 20134,
		38547: 20451,
		38548: 21448,
		38549: 25273,
		38550: 26411,
		38551: 27819,
		38552: 36804,
		38553: 20397,
		38554: 32365,
		38555: 40639,
		38556: 19975,
		38557: 24930,
		38558: 28288,
		38559: 28459,
		38560: 34067,
		38561: 21619,
		38562: 26410,
		38563: 39749,
		38564: 24051,
		38565: 31637,
		38566: 23724,
		38567: 23494,
		38568: 34588,
		38569: 28234,
		38570: 34001,
		38571: 31252,
		38572: 33032,
		38573: 22937,
		38574: 31885,
		38575: 27665,
		38576: 30496,
		38577: 21209,
		38578: 22818,
		38579: 28961,
		38580: 29279,
		38581: 30683,
		38582: 38695,
		38583: 40289,
		38584: 26891,
		38585: 23167,
		38586: 23064,
		38587: 20901,
		38588: 21517,
		38589: 21629,
		38590: 26126,
		38591: 30431,
		38592: 36855,
		38593: 37528,
		38594: 40180,
		38595: 23018,
		38596: 29277,
		38597: 28357,
		38598: 20813,
		38599: 26825,
		38600: 32191,
		38601: 32236,
		38602: 38754,
		38603: 40634,
		38604: 25720,
		38605: 27169,
		38606: 33538,
		38607: 22916,
		38608: 23391,
		38609: 27611,
		38610: 29467,
		38611: 30450,
		38612: 32178,
		38613: 32791,
		38614: 33945,
		38615: 20786,
		38616: 26408,
		38617: 40665,
		38618: 30446,
		38619: 26466,
		38620: 21247,
		38621: 39173,
		38622: 23588,
		38623: 25147,
		38624: 31870,
		38625: 36016,
		38626: 21839,
		38627: 24758,
		38628: 32011,
		38629: 38272,
		38630: 21249,
		38631: 20063,
		38632: 20918,
		38633: 22812,
		38634: 29242,
		38635: 32822,
		38636: 37326,
		38637: 24357,
		38638: 30690,
		38639: 21380,
		38640: 24441,
		38641: 32004,
		38642: 34220,
		38643: 35379,
		38644: 36493,
		38645: 38742,
		38646: 26611,
		38647: 34222,
		38648: 37971,
		38649: 24841,
		38650: 24840,
		38651: 27833,
		38652: 30290,
		38720: 35565,
		38721: 36664,
		38722: 21807,
		38723: 20305,
		38724: 20778,
		38725: 21191,
		38726: 21451,
		38727: 23461,
		38728: 24189,
		38729: 24736,
		38730: 24962,
		38731: 25558,
		38732: 26377,
		38733: 26586,
		38734: 28263,
		38735: 28044,
		38736: 29494,
		38737: 29495,
		38738: 30001,
		38739: 31056,
		38740: 35029,
		38741: 35480,
		38742: 36938,
		38743: 37009,
		38744: 37109,
		38745: 38596,
		38746: 34701,
		38747: 22805,
		38748: 20104,
		38749: 20313,
		38750: 19982,
		38751: 35465,
		38752: 36671,
		38753: 38928,
		38754: 20653,
		38755: 24188,
		38756: 22934,
		38757: 23481,
		38758: 24248,
		38759: 25562,
		38760: 25594,
		38761: 25793,
		38762: 26332,
		38763: 26954,
		38764: 27096,
		38765: 27915,
		38766: 28342,
		38767: 29076,
		38768: 29992,
		38769: 31407,
		38770: 32650,
		38771: 32768,
		38772: 33865,
		38773: 33993,
		38774: 35201,
		38775: 35617,
		38776: 36362,
		38777: 36965,
		38778: 38525,
		38779: 39178,
		38780: 24958,
		38781: 25233,
		38782: 27442,
		38784: 27779,
		38785: 28020,
		38786: 32716,
		38787: 32764,
		38788: 28096,
		38789: 32645,
		38790: 34746,
		38791: 35064,
		38792: 26469,
		38793: 33713,
		38794: 38972,
		38795: 38647,
		38796: 27931,
		38797: 32097,
		38798: 33853,
		38799: 37226,
		38800: 20081,
		38801: 21365,
		38802: 23888,
		38803: 27396,
		38804: 28651,
		38805: 34253,
		38806: 34349,
		38807: 35239,
		38808: 21033,
		38809: 21519,
		38810: 23653,
		38811: 26446,
		38812: 26792,
		38813: 29702,
		38814: 29827,
		38815: 30178,
		38816: 35023,
		38817: 35041,
		38818: 37324,
		38819: 38626,
		38820: 38520,
		38821: 24459,
		38822: 29575,
		38823: 31435,
		38824: 33870,
		38825: 25504,
		38826: 30053,
		38827: 21129,
		38828: 27969,
		38829: 28316,
		38830: 29705,
		38831: 30041,
		38832: 30827,
		38833: 31890,
		38834: 38534,
		38835: 31452,
		38836: 40845,
		38837: 20406,
		38838: 24942,
		38839: 26053,
		38840: 34396,
		38841: 20102,
		38842: 20142,
		38843: 20698,
		38844: 20001,
		38845: 20940,
		38846: 23534,
		38847: 26009,
		38848: 26753,
		38849: 28092,
		38850: 29471,
		38851: 30274,
		38852: 30637,
		38853: 31260,
		38854: 31975,
		38855: 33391,
		38856: 35538,
		38857: 36988,
		38858: 37327,
		38859: 38517,
		38860: 38936,
		38861: 21147,
		38862: 32209,
		38863: 20523,
		38864: 21400,
		38865: 26519,
		38866: 28107,
		38867: 29136,
		38868: 29747,
		38869: 33256,
		38870: 36650,
		38871: 38563,
		38872: 40023,
		38873: 40607,
		38874: 29792,
		38875: 22593,
		38876: 28057,
		38877: 32047,
		38878: 39006,
		38879: 20196,
		38880: 20278,
		38881: 20363,
		38882: 20919,
		38883: 21169,
		38884: 23994,
		38885: 24604,
		38886: 29618,
		38887: 31036,
		38888: 33491,
		38889: 37428,
		38890: 38583,
		38891: 38646,
		38892: 38666,
		38893: 40599,
		38894: 40802,
		38895: 26278,
		38896: 27508,
		38897: 21015,
		38898: 21155,
		38899: 28872,
		38900: 35010,
		38901: 24265,
		38902: 24651,
		38903: 24976,
		38904: 28451,
		38905: 29001,
		38906: 31806,
		38907: 32244,
		38908: 32879,
		38976: 34030,
		38977: 36899,
		38978: 37676,
		38979: 21570,
		38980: 39791,
		38981: 27347,
		38982: 28809,
		38983: 36034,
		38984: 36335,
		38985: 38706,
		38986: 21172,
		38987: 23105,
		38988: 24266,
		38989: 24324,
		38990: 26391,
		38991: 27004,
		38992: 27028,
		38993: 28010,
		38994: 28431,
		38995: 29282,
		38996: 29436,
		38997: 31725,
		38998: 32769,
		38999: 32894,
		39000: 34635,
		39001: 37070,
		39002: 20845,
		39003: 40595,
		39004: 31108,
		39005: 32907,
		39006: 37682,
		39007: 35542,
		39008: 20525,
		39009: 21644,
		39010: 35441,
		39011: 27498,
		39012: 36036,
		39013: 33031,
		39014: 24785,
		39015: 26528,
		39016: 40434,
		39017: 20121,
		39018: 20120,
		39019: 39952,
		39020: 35435,
		39021: 34241,
		39022: 34152,
		39023: 26880,
		39024: 28286,
		39025: 30871,
		39026: 33109,
		39071: 24332,
		39072: 19984,
		39073: 19989,
		39074: 20010,
		39075: 20017,
		39076: 20022,
		39077: 20028,
		39078: 20031,
		39079: 20034,
		39080: 20054,
		39081: 20056,
		39082: 20098,
		39083: 20101,
		39084: 35947,
		39085: 20106,
		39086: 33298,
		39087: 24333,
		39088: 20110,
		39089: 20126,
		39090: 20127,
		39091: 20128,
		39092: 20130,
		39093: 20144,
		39094: 20147,
		39095: 20150,
		39096: 20174,
		39097: 20173,
		39098: 20164,
		39099: 20166,
		39100: 20162,
		39101: 20183,
		39102: 20190,
		39103: 20205,
		39104: 20191,
		39105: 20215,
		39106: 20233,
		39107: 20314,
		39108: 20272,
		39109: 20315,
		39110: 20317,
		39111: 20311,
		39112: 20295,
		39113: 20342,
		39114: 20360,
		39115: 20367,
		39116: 20376,
		39117: 20347,
		39118: 20329,
		39119: 20336,
		39120: 20369,
		39121: 20335,
		39122: 20358,
		39123: 20374,
		39124: 20760,
		39125: 20436,
		39126: 20447,
		39127: 20430,
		39128: 20440,
		39129: 20443,
		39130: 20433,
		39131: 20442,
		39132: 20432,
		39133: 20452,
		39134: 20453,
		39135: 20506,
		39136: 20520,
		39137: 20500,
		39138: 20522,
		39139: 20517,
		39140: 20485,
		39141: 20252,
		39142: 20470,
		39143: 20513,
		39144: 20521,
		39145: 20524,
		39146: 20478,
		39147: 20463,
		39148: 20497,
		39149: 20486,
		39150: 20547,
		39151: 20551,
		39152: 26371,
		39153: 20565,
		39154: 20560,
		39155: 20552,
		39156: 20570,
		39157: 20566,
		39158: 20588,
		39159: 20600,
		39160: 20608,
		39161: 20634,
		39162: 20613,
		39163: 20660,
		39164: 20658,
		39232: 20681,
		39233: 20682,
		39234: 20659,
		39235: 20674,
		39236: 20694,
		39237: 20702,
		39238: 20709,
		39239: 20717,
		39240: 20707,
		39241: 20718,
		39242: 20729,
		39243: 20725,
		39244: 20745,
		39245: 20737,
		39246: 20738,
		39247: 20758,
		39248: 20757,
		39249: 20756,
		39250: 20762,
		39251: 20769,
		39252: 20794,
		39253: 20791,
		39254: 20796,
		39255: 20795,
		39256: 20799,
		39257: 20800,
		39258: 20818,
		39259: 20812,
		39260: 20820,
		39261: 20834,
		39262: 31480,
		39263: 20841,
		39264: 20842,
		39265: 20846,
		39266: 20864,
		39267: 20866,
		39268: 22232,
		39269: 20876,
		39270: 20873,
		39271: 20879,
		39272: 20881,
		39273: 20883,
		39274: 20885,
		39275: 20886,
		39276: 20900,
		39277: 20902,
		39278: 20898,
		39279: 20905,
		39280: 20906,
		39281: 20907,
		39282: 20915,
		39283: 20913,
		39284: 20914,
		39285: 20912,
		39286: 20917,
		39287: 20925,
		39288: 20933,
		39289: 20937,
		39290: 20955,
		39291: 20960,
		39292: 34389,
		39293: 20969,
		39294: 20973,
		39296: 20976,
		39297: 20981,
		39298: 20990,
		39299: 20996,
		39300: 21003,
		39301: 21012,
		39302: 21006,
		39303: 21031,
		39304: 21034,
		39305: 21038,
		39306: 21043,
		39307: 21049,
		39308: 21071,
		39309: 21060,
		39310: 21067,
		39311: 21068,
		39312: 21086,
		39313: 21076,
		39314: 21098,
		39315: 21108,
		39316: 21097,
		39317: 21107,
		39318: 21119,
		39319: 21117,
		39320: 21133,
		39321: 21140,
		39322: 21138,
		39323: 21105,
		39324: 21128,
		39325: 21137,
		39326: 36776,
		39327: 36775,
		39328: 21164,
		39329: 21165,
		39330: 21180,
		39331: 21173,
		39332: 21185,
		39333: 21197,
		39334: 21207,
		39335: 21214,
		39336: 21219,
		39337: 21222,
		39338: 39149,
		39339: 21216,
		39340: 21235,
		39341: 21237,
		39342: 21240,
		39343: 21241,
		39344: 21254,
		39345: 21256,
		39346: 30008,
		39347: 21261,
		39348: 21264,
		39349: 21263,
		39350: 21269,
		39351: 21274,
		39352: 21283,
		39353: 21295,
		39354: 21297,
		39355: 21299,
		39356: 21304,
		39357: 21312,
		39358: 21318,
		39359: 21317,
		39360: 19991,
		39361: 21321,
		39362: 21325,
		39363: 20950,
		39364: 21342,
		39365: 21353,
		39366: 21358,
		39367: 22808,
		39368: 21371,
		39369: 21367,
		39370: 21378,
		39371: 21398,
		39372: 21408,
		39373: 21414,
		39374: 21413,
		39375: 21422,
		39376: 21424,
		39377: 21430,
		39378: 21443,
		39379: 31762,
		39380: 38617,
		39381: 21471,
		39382: 26364,
		39383: 29166,
		39384: 21486,
		39385: 21480,
		39386: 21485,
		39387: 21498,
		39388: 21505,
		39389: 21565,
		39390: 21568,
		39391: 21548,
		39392: 21549,
		39393: 21564,
		39394: 21550,
		39395: 21558,
		39396: 21545,
		39397: 21533,
		39398: 21582,
		39399: 21647,
		39400: 21621,
		39401: 21646,
		39402: 21599,
		39403: 21617,
		39404: 21623,
		39405: 21616,
		39406: 21650,
		39407: 21627,
		39408: 21632,
		39409: 21622,
		39410: 21636,
		39411: 21648,
		39412: 21638,
		39413: 21703,
		39414: 21666,
		39415: 21688,
		39416: 21669,
		39417: 21676,
		39418: 21700,
		39419: 21704,
		39420: 21672,
		39488: 21675,
		39489: 21698,
		39490: 21668,
		39491: 21694,
		39492: 21692,
		39493: 21720,
		39494: 21733,
		39495: 21734,
		39496: 21775,
		39497: 21780,
		39498: 21757,
		39499: 21742,
		39500: 21741,
		39501: 21754,
		39502: 21730,
		39503: 21817,
		39504: 21824,
		39505: 21859,
		39506: 21836,
		39507: 21806,
		39508: 21852,
		39509: 21829,
		39510: 21846,
		39511: 21847,
		39512: 21816,
		39513: 21811,
		39514: 21853,
		39515: 21913,
		39516: 21888,
		39517: 21679,
		39518: 21898,
		39519: 21919,
		39520: 21883,
		39521: 21886,
		39522: 21912,
		39523: 21918,
		39524: 21934,
		39525: 21884,
		39526: 21891,
		39527: 21929,
		39528: 21895,
		39529: 21928,
		39530: 21978,
		39531: 21957,
		39532: 21983,
		39533: 21956,
		39534: 21980,
		39535: 21988,
		39536: 21972,
		39537: 22036,
		39538: 22007,
		39539: 22038,
		39540: 22014,
		39541: 22013,
		39542: 22043,
		39543: 22009,
		39544: 22094,
		39545: 22096,
		39546: 29151,
		39547: 22068,
		39548: 22070,
		39549: 22066,
		39550: 22072,
		39552: 22123,
		39553: 22116,
		39554: 22063,
		39555: 22124,
		39556: 22122,
		39557: 22150,
		39558: 22144,
		39559: 22154,
		39560: 22176,
		39561: 22164,
		39562: 22159,
		39563: 22181,
		39564: 22190,
		39565: 22198,
		39566: 22196,
		39567: 22210,
		39568: 22204,
		39569: 22209,
		39570: 22211,
		39571: 22208,
		39572: 22216,
		39573: 22222,
		39574: 22225,
		39575: 22227,
		39576: 22231,
		39577: 22254,
		39578: 22265,
		39579: 22272,
		39580: 22271,
		39581: 22276,
		39582: 22281,
		39583: 22280,
		39584: 22283,
		39585: 22285,
		39586: 22291,
		39587: 22296,
		39588: 22294,
		39589: 21959,
		39590: 22300,
		39591: 22310,
		39592: 22327,
		39593: 22328,
		39594: 22350,
		39595: 22331,
		39596: 22336,
		39597: 22351,
		39598: 22377,
		39599: 22464,
		39600: 22408,
		39601: 22369,
		39602: 22399,
		39603: 22409,
		39604: 22419,
		39605: 22432,
		39606: 22451,
		39607: 22436,
		39608: 22442,
		39609: 22448,
		39610: 22467,
		39611: 22470,
		39612: 22484,
		39613: 22482,
		39614: 22483,
		39615: 22538,
		39616: 22486,
		39617: 22499,
		39618: 22539,
		39619: 22553,
		39620: 22557,
		39621: 22642,
		39622: 22561,
		39623: 22626,
		39624: 22603,
		39625: 22640,
		39626: 27584,
		39627: 22610,
		39628: 22589,
		39629: 22649,
		39630: 22661,
		39631: 22713,
		39632: 22687,
		39633: 22699,
		39634: 22714,
		39635: 22750,
		39636: 22715,
		39637: 22712,
		39638: 22702,
		39639: 22725,
		39640: 22739,
		39641: 22737,
		39642: 22743,
		39643: 22745,
		39644: 22744,
		39645: 22757,
		39646: 22748,
		39647: 22756,
		39648: 22751,
		39649: 22767,
		39650: 22778,
		39651: 22777,
		39652: 22779,
		39653: 22780,
		39654: 22781,
		39655: 22786,
		39656: 22794,
		39657: 22800,
		39658: 22811,
		39659: 26790,
		39660: 22821,
		39661: 22828,
		39662: 22829,
		39663: 22834,
		39664: 22840,
		39665: 22846,
		39666: 31442,
		39667: 22869,
		39668: 22864,
		39669: 22862,
		39670: 22874,
		39671: 22872,
		39672: 22882,
		39673: 22880,
		39674: 22887,
		39675: 22892,
		39676: 22889,
		39744: 22904,
		39745: 22913,
		39746: 22941,
		39747: 20318,
		39748: 20395,
		39749: 22947,
		39750: 22962,
		39751: 22982,
		39752: 23016,
		39753: 23004,
		39754: 22925,
		39755: 23001,
		39756: 23002,
		39757: 23077,
		39758: 23071,
		39759: 23057,
		39760: 23068,
		39761: 23049,
		39762: 23066,
		39763: 23104,
		39764: 23148,
		39765: 23113,
		39766: 23093,
		39767: 23094,
		39768: 23138,
		39769: 23146,
		39770: 23194,
		39771: 23228,
		39772: 23230,
		39773: 23243,
		39774: 23234,
		39775: 23229,
		39776: 23267,
		39777: 23255,
		39778: 23270,
		39779: 23273,
		39780: 23254,
		39781: 23290,
		39782: 23291,
		39783: 23308,
		39784: 23307,
		39785: 23318,
		39786: 23346,
		39787: 23248,
		39788: 23338,
		39789: 23350,
		39790: 23358,
		39791: 23363,
		39792: 23365,
		39793: 23360,
		39794: 23377,
		39795: 23381,
		39796: 23386,
		39797: 23387,
		39798: 23397,
		39799: 23401,
		39800: 23408,
		39801: 23411,
		39802: 23413,
		39803: 23416,
		39804: 25992,
		39805: 23418,
		39806: 23424,
		39808: 23427,
		39809: 23462,
		39810: 23480,
		39811: 23491,
		39812: 23495,
		39813: 23497,
		39814: 23508,
		39815: 23504,
		39816: 23524,
		39817: 23526,
		39818: 23522,
		39819: 23518,
		39820: 23525,
		39821: 23531,
		39822: 23536,
		39823: 23542,
		39824: 23539,
		39825: 23557,
		39826: 23559,
		39827: 23560,
		39828: 23565,
		39829: 23571,
		39830: 23584,
		39831: 23586,
		39832: 23592,
		39833: 23608,
		39834: 23609,
		39835: 23617,
		39836: 23622,
		39837: 23630,
		39838: 23635,
		39839: 23632,
		39840: 23631,
		39841: 23409,
		39842: 23660,
		39843: 23662,
		39844: 20066,
		39845: 23670,
		39846: 23673,
		39847: 23692,
		39848: 23697,
		39849: 23700,
		39850: 22939,
		39851: 23723,
		39852: 23739,
		39853: 23734,
		39854: 23740,
		39855: 23735,
		39856: 23749,
		39857: 23742,
		39858: 23751,
		39859: 23769,
		39860: 23785,
		39861: 23805,
		39862: 23802,
		39863: 23789,
		39864: 23948,
		39865: 23786,
		39866: 23819,
		39867: 23829,
		39868: 23831,
		39869: 23900,
		39870: 23839,
		39871: 23835,
		39872: 23825,
		39873: 23828,
		39874: 23842,
		39875: 23834,
		39876: 23833,
		39877: 23832,
		39878: 23884,
		39879: 23890,
		39880: 23886,
		39881: 23883,
		39882: 23916,
		39883: 23923,
		39884: 23926,
		39885: 23943,
		39886: 23940,
		39887: 23938,
		39888: 23970,
		39889: 23965,
		39890: 23980,
		39891: 23982,
		39892: 23997,
		39893: 23952,
		39894: 23991,
		39895: 23996,
		39896: 24009,
		39897: 24013,
		39898: 24019,
		39899: 24018,
		39900: 24022,
		39901: 24027,
		39902: 24043,
		39903: 24050,
		39904: 24053,
		39905: 24075,
		39906: 24090,
		39907: 24089,
		39908: 24081,
		39909: 24091,
		39910: 24118,
		39911: 24119,
		39912: 24132,
		39913: 24131,
		39914: 24128,
		39915: 24142,
		39916: 24151,
		39917: 24148,
		39918: 24159,
		39919: 24162,
		39920: 24164,
		39921: 24135,
		39922: 24181,
		39923: 24182,
		39924: 24186,
		39925: 40636,
		39926: 24191,
		39927: 24224,
		39928: 24257,
		39929: 24258,
		39930: 24264,
		39931: 24272,
		39932: 24271,
		40000: 24278,
		40001: 24291,
		40002: 24285,
		40003: 24282,
		40004: 24283,
		40005: 24290,
		40006: 24289,
		40007: 24296,
		40008: 24297,
		40009: 24300,
		40010: 24305,
		40011: 24307,
		40012: 24304,
		40013: 24308,
		40014: 24312,
		40015: 24318,
		40016: 24323,
		40017: 24329,
		40018: 24413,
		40019: 24412,
		40020: 24331,
		40021: 24337,
		40022: 24342,
		40023: 24361,
		40024: 24365,
		40025: 24376,
		40026: 24385,
		40027: 24392,
		40028: 24396,
		40029: 24398,
		40030: 24367,
		40031: 24401,
		40032: 24406,
		40033: 24407,
		40034: 24409,
		40035: 24417,
		40036: 24429,
		40037: 24435,
		40038: 24439,
		40039: 24451,
		40040: 24450,
		40041: 24447,
		40042: 24458,
		40043: 24456,
		40044: 24465,
		40045: 24455,
		40046: 24478,
		40047: 24473,
		40048: 24472,
		40049: 24480,
		40050: 24488,
		40051: 24493,
		40052: 24508,
		40053: 24534,
		40054: 24571,
		40055: 24548,
		40056: 24568,
		40057: 24561,
		40058: 24541,
		40059: 24755,
		40060: 24575,
		40061: 24609,
		40062: 24672,
		40064: 24601,
		40065: 24592,
		40066: 24617,
		40067: 24590,
		40068: 24625,
		40069: 24603,
		40070: 24597,
		40071: 24619,
		40072: 24614,
		40073: 24591,
		40074: 24634,
		40075: 24666,
		40076: 24641,
		40077: 24682,
		40078: 24695,
		40079: 24671,
		40080: 24650,
		40081: 24646,
		40082: 24653,
		40083: 24675,
		40084: 24643,
		40085: 24676,
		40086: 24642,
		40087: 24684,
		40088: 24683,
		40089: 24665,
		40090: 24705,
		40091: 24717,
		40092: 24807,
		40093: 24707,
		40094: 24730,
		40095: 24708,
		40096: 24731,
		40097: 24726,
		40098: 24727,
		40099: 24722,
		40100: 24743,
		40101: 24715,
		40102: 24801,
		40103: 24760,
		40104: 24800,
		40105: 24787,
		40106: 24756,
		40107: 24560,
		40108: 24765,
		40109: 24774,
		40110: 24757,
		40111: 24792,
		40112: 24909,
		40113: 24853,
		40114: 24838,
		40115: 24822,
		40116: 24823,
		40117: 24832,
		40118: 24820,
		40119: 24826,
		40120: 24835,
		40121: 24865,
		40122: 24827,
		40123: 24817,
		40124: 24845,
		40125: 24846,
		40126: 24903,
		40127: 24894,
		40128: 24872,
		40129: 24871,
		40130: 24906,
		40131: 24895,
		40132: 24892,
		40133: 24876,
		40134: 24884,
		40135: 24893,
		40136: 24898,
		40137: 24900,
		40138: 24947,
		40139: 24951,
		40140: 24920,
		40141: 24921,
		40142: 24922,
		40143: 24939,
		40144: 24948,
		40145: 24943,
		40146: 24933,
		40147: 24945,
		40148: 24927,
		40149: 24925,
		40150: 24915,
		40151: 24949,
		40152: 24985,
		40153: 24982,
		40154: 24967,
		40155: 25004,
		40156: 24980,
		40157: 24986,
		40158: 24970,
		40159: 24977,
		40160: 25003,
		40161: 25006,
		40162: 25036,
		40163: 25034,
		40164: 25033,
		40165: 25079,
		40166: 25032,
		40167: 25027,
		40168: 25030,
		40169: 25018,
		40170: 25035,
		40171: 32633,
		40172: 25037,
		40173: 25062,
		40174: 25059,
		40175: 25078,
		40176: 25082,
		40177: 25076,
		40178: 25087,
		40179: 25085,
		40180: 25084,
		40181: 25086,
		40182: 25088,
		40183: 25096,
		40184: 25097,
		40185: 25101,
		40186: 25100,
		40187: 25108,
		40188: 25115,
		40256: 25118,
		40257: 25121,
		40258: 25130,
		40259: 25134,
		40260: 25136,
		40261: 25138,
		40262: 25139,
		40263: 25153,
		40264: 25166,
		40265: 25182,
		40266: 25187,
		40267: 25179,
		40268: 25184,
		40269: 25192,
		40270: 25212,
		40271: 25218,
		40272: 25225,
		40273: 25214,
		40274: 25234,
		40275: 25235,
		40276: 25238,
		40277: 25300,
		40278: 25219,
		40279: 25236,
		40280: 25303,
		40281: 25297,
		40282: 25275,
		40283: 25295,
		40284: 25343,
		40285: 25286,
		40286: 25812,
		40287: 25288,
		40288: 25308,
		40289: 25292,
		40290: 25290,
		40291: 25282,
		40292: 25287,
		40293: 25243,
		40294: 25289,
		40295: 25356,
		40296: 25326,
		40297: 25329,
		40298: 25383,
		40299: 25346,
		40300: 25352,
		40301: 25327,
		40302: 25333,
		40303: 25424,
		40304: 25406,
		40305: 25421,
		40306: 25628,
		40307: 25423,
		40308: 25494,
		40309: 25486,
		40310: 25472,
		40311: 25515,
		40312: 25462,
		40313: 25507,
		40314: 25487,
		40315: 25481,
		40316: 25503,
		40317: 25525,
		40318: 25451,
		40320: 25449,
		40321: 25534,
		40322: 25577,
		40323: 25536,
		40324: 25542,
		40325: 25571,
		40326: 25545,
		40327: 25554,
		40328: 25590,
		40329: 25540,
		40330: 25622,
		40331: 25652,
		40332: 25606,
		40333: 25619,
		40334: 25638,
		40335: 25654,
		40336: 25885,
		40337: 25623,
		40338: 25640,
		40339: 25615,
		40340: 25703,
		40341: 25711,
		40342: 25718,
		40343: 25678,
		40344: 25898,
		40345: 25749,
		40346: 25747,
		40347: 25765,
		40348: 25769,
		40349: 25736,
		40350: 25788,
		40351: 25818,
		40352: 25810,
		40353: 25797,
		40354: 25799,
		40355: 25787,
		40356: 25816,
		40357: 25794,
		40358: 25841,
		40359: 25831,
		40360: 33289,
		40361: 25824,
		40362: 25825,
		40363: 25260,
		40364: 25827,
		40365: 25839,
		40366: 25900,
		40367: 25846,
		40368: 25844,
		40369: 25842,
		40370: 25850,
		40371: 25856,
		40372: 25853,
		40373: 25880,
		40374: 25884,
		40375: 25861,
		40376: 25892,
		40377: 25891,
		40378: 25899,
		40379: 25908,
		40380: 25909,
		40381: 25911,
		40382: 25910,
		40383: 25912,
		40384: 30027,
		40385: 25928,
		40386: 25942,
		40387: 25941,
		40388: 25933,
		40389: 25944,
		40390: 25950,
		40391: 25949,
		40392: 25970,
		40393: 25976,
		40394: 25986,
		40395: 25987,
		40396: 35722,
		40397: 26011,
		40398: 26015,
		40399: 26027,
		40400: 26039,
		40401: 26051,
		40402: 26054,
		40403: 26049,
		40404: 26052,
		40405: 26060,
		40406: 26066,
		40407: 26075,
		40408: 26073,
		40409: 26080,
		40410: 26081,
		40411: 26097,
		40412: 26482,
		40413: 26122,
		40414: 26115,
		40415: 26107,
		40416: 26483,
		40417: 26165,
		40418: 26166,
		40419: 26164,
		40420: 26140,
		40421: 26191,
		40422: 26180,
		40423: 26185,
		40424: 26177,
		40425: 26206,
		40426: 26205,
		40427: 26212,
		40428: 26215,
		40429: 26216,
		40430: 26207,
		40431: 26210,
		40432: 26224,
		40433: 26243,
		40434: 26248,
		40435: 26254,
		40436: 26249,
		40437: 26244,
		40438: 26264,
		40439: 26269,
		40440: 26305,
		40441: 26297,
		40442: 26313,
		40443: 26302,
		40444: 26300,
		40512: 26308,
		40513: 26296,
		40514: 26326,
		40515: 26330,
		40516: 26336,
		40517: 26175,
		40518: 26342,
		40519: 26345,
		40520: 26352,
		40521: 26357,
		40522: 26359,
		40523: 26383,
		40524: 26390,
		40525: 26398,
		40526: 26406,
		40527: 26407,
		40528: 38712,
		40529: 26414,
		40530: 26431,
		40531: 26422,
		40532: 26433,
		40533: 26424,
		40534: 26423,
		40535: 26438,
		40536: 26462,
		40537: 26464,
		40538: 26457,
		40539: 26467,
		40540: 26468,
		40541: 26505,
		40542: 26480,
		40543: 26537,
		40544: 26492,
		40545: 26474,
		40546: 26508,
		40547: 26507,
		40548: 26534,
		40549: 26529,
		40550: 26501,
		40551: 26551,
		40552: 26607,
		40553: 26548,
		40554: 26604,
		40555: 26547,
		40556: 26601,
		40557: 26552,
		40558: 26596,
		40559: 26590,
		40560: 26589,
		40561: 26594,
		40562: 26606,
		40563: 26553,
		40564: 26574,
		40565: 26566,
		40566: 26599,
		40567: 27292,
		40568: 26654,
		40569: 26694,
		40570: 26665,
		40571: 26688,
		40572: 26701,
		40573: 26674,
		40574: 26702,
		40576: 26803,
		40577: 26667,
		40578: 26713,
		40579: 26723,
		40580: 26743,
		40581: 26751,
		40582: 26783,
		40583: 26767,
		40584: 26797,
		40585: 26772,
		40586: 26781,
		40587: 26779,
		40588: 26755,
		40589: 27310,
		40590: 26809,
		40591: 26740,
		40592: 26805,
		40593: 26784,
		40594: 26810,
		40595: 26895,
		40596: 26765,
		40597: 26750,
		40598: 26881,
		40599: 26826,
		40600: 26888,
		40601: 26840,
		40602: 26914,
		40603: 26918,
		40604: 26849,
		40605: 26892,
		40606: 26829,
		40607: 26836,
		40608: 26855,
		40609: 26837,
		40610: 26934,
		40611: 26898,
		40612: 26884,
		40613: 26839,
		40614: 26851,
		40615: 26917,
		40616: 26873,
		40617: 26848,
		40618: 26863,
		40619: 26920,
		40620: 26922,
		40621: 26906,
		40622: 26915,
		40623: 26913,
		40624: 26822,
		40625: 27001,
		40626: 26999,
		40627: 26972,
		40628: 27000,
		40629: 26987,
		40630: 26964,
		40631: 27006,
		40632: 26990,
		40633: 26937,
		40634: 26996,
		40635: 26941,
		40636: 26969,
		40637: 26928,
		40638: 26977,
		40639: 26974,
		40640: 26973,
		40641: 27009,
		40642: 26986,
		40643: 27058,
		40644: 27054,
		40645: 27088,
		40646: 27071,
		40647: 27073,
		40648: 27091,
		40649: 27070,
		40650: 27086,
		40651: 23528,
		40652: 27082,
		40653: 27101,
		40654: 27067,
		40655: 27075,
		40656: 27047,
		40657: 27182,
		40658: 27025,
		40659: 27040,
		40660: 27036,
		40661: 27029,
		40662: 27060,
		40663: 27102,
		40664: 27112,
		40665: 27138,
		40666: 27163,
		40667: 27135,
		40668: 27402,
		40669: 27129,
		40670: 27122,
		40671: 27111,
		40672: 27141,
		40673: 27057,
		40674: 27166,
		40675: 27117,
		40676: 27156,
		40677: 27115,
		40678: 27146,
		40679: 27154,
		40680: 27329,
		40681: 27171,
		40682: 27155,
		40683: 27204,
		40684: 27148,
		40685: 27250,
		40686: 27190,
		40687: 27256,
		40688: 27207,
		40689: 27234,
		40690: 27225,
		40691: 27238,
		40692: 27208,
		40693: 27192,
		40694: 27170,
		40695: 27280,
		40696: 27277,
		40697: 27296,
		40698: 27268,
		40699: 27298,
		40700: 27299,
		40768: 27287,
		40769: 34327,
		40770: 27323,
		40771: 27331,
		40772: 27330,
		40773: 27320,
		40774: 27315,
		40775: 27308,
		40776: 27358,
		40777: 27345,
		40778: 27359,
		40779: 27306,
		40780: 27354,
		40781: 27370,
		40782: 27387,
		40783: 27397,
		40784: 34326,
		40785: 27386,
		40786: 27410,
		40787: 27414,
		40788: 39729,
		40789: 27423,
		40790: 27448,
		40791: 27447,
		40792: 30428,
		40793: 27449,
		40794: 39150,
		40795: 27463,
		40796: 27459,
		40797: 27465,
		40798: 27472,
		40799: 27481,
		40800: 27476,
		40801: 27483,
		40802: 27487,
		40803: 27489,
		40804: 27512,
		40805: 27513,
		40806: 27519,
		40807: 27520,
		40808: 27524,
		40809: 27523,
		40810: 27533,
		40811: 27544,
		40812: 27541,
		40813: 27550,
		40814: 27556,
		40815: 27562,
		40816: 27563,
		40817: 27567,
		40818: 27570,
		40819: 27569,
		40820: 27571,
		40821: 27575,
		40822: 27580,
		40823: 27590,
		40824: 27595,
		40825: 27603,
		40826: 27615,
		40827: 27628,
		40828: 27627,
		40829: 27635,
		40830: 27631,
		40832: 40638,
		40833: 27656,
		40834: 27667,
		40835: 27668,
		40836: 27675,
		40837: 27684,
		40838: 27683,
		40839: 27742,
		40840: 27733,
		40841: 27746,
		40842: 27754,
		40843: 27778,
		40844: 27789,
		40845: 27802,
		40846: 27777,
		40847: 27803,
		40848: 27774,
		40849: 27752,
		40850: 27763,
		40851: 27794,
		40852: 27792,
		40853: 27844,
		40854: 27889,
		40855: 27859,
		40856: 27837,
		40857: 27863,
		40858: 27845,
		40859: 27869,
		40860: 27822,
		40861: 27825,
		40862: 27838,
		40863: 27834,
		40864: 27867,
		40865: 27887,
		40866: 27865,
		40867: 27882,
		40868: 27935,
		40869: 34893,
		40870: 27958,
		40871: 27947,
		40872: 27965,
		40873: 27960,
		40874: 27929,
		40875: 27957,
		40876: 27955,
		40877: 27922,
		40878: 27916,
		40879: 28003,
		40880: 28051,
		40881: 28004,
		40882: 27994,
		40883: 28025,
		40884: 27993,
		40885: 28046,
		40886: 28053,
		40887: 28644,
		40888: 28037,
		40889: 28153,
		40890: 28181,
		40891: 28170,
		40892: 28085,
		40893: 28103,
		40894: 28134,
		40895: 28088,
		40896: 28102,
		40897: 28140,
		40898: 28126,
		40899: 28108,
		40900: 28136,
		40901: 28114,
		40902: 28101,
		40903: 28154,
		40904: 28121,
		40905: 28132,
		40906: 28117,
		40907: 28138,
		40908: 28142,
		40909: 28205,
		40910: 28270,
		40911: 28206,
		40912: 28185,
		40913: 28274,
		40914: 28255,
		40915: 28222,
		40916: 28195,
		40917: 28267,
		40918: 28203,
		40919: 28278,
		40920: 28237,
		40921: 28191,
		40922: 28227,
		40923: 28218,
		40924: 28238,
		40925: 28196,
		40926: 28415,
		40927: 28189,
		40928: 28216,
		40929: 28290,
		40930: 28330,
		40931: 28312,
		40932: 28361,
		40933: 28343,
		40934: 28371,
		40935: 28349,
		40936: 28335,
		40937: 28356,
		40938: 28338,
		40939: 28372,
		40940: 28373,
		40941: 28303,
		40942: 28325,
		40943: 28354,
		40944: 28319,
		40945: 28481,
		40946: 28433,
		40947: 28748,
		40948: 28396,
		40949: 28408,
		40950: 28414,
		40951: 28479,
		40952: 28402,
		40953: 28465,
		40954: 28399,
		40955: 28466,
		40956: 28364,
		57408: 28478,
		57409: 28435,
		57410: 28407,
		57411: 28550,
		57412: 28538,
		57413: 28536,
		57414: 28545,
		57415: 28544,
		57416: 28527,
		57417: 28507,
		57418: 28659,
		57419: 28525,
		57420: 28546,
		57421: 28540,
		57422: 28504,
		57423: 28558,
		57424: 28561,
		57425: 28610,
		57426: 28518,
		57427: 28595,
		57428: 28579,
		57429: 28577,
		57430: 28580,
		57431: 28601,
		57432: 28614,
		57433: 28586,
		57434: 28639,
		57435: 28629,
		57436: 28652,
		57437: 28628,
		57438: 28632,
		57439: 28657,
		57440: 28654,
		57441: 28635,
		57442: 28681,
		57443: 28683,
		57444: 28666,
		57445: 28689,
		57446: 28673,
		57447: 28687,
		57448: 28670,
		57449: 28699,
		57450: 28698,
		57451: 28532,
		57452: 28701,
		57453: 28696,
		57454: 28703,
		57455: 28720,
		57456: 28734,
		57457: 28722,
		57458: 28753,
		57459: 28771,
		57460: 28825,
		57461: 28818,
		57462: 28847,
		57463: 28913,
		57464: 28844,
		57465: 28856,
		57466: 28851,
		57467: 28846,
		57468: 28895,
		57469: 28875,
		57470: 28893,
		57472: 28889,
		57473: 28937,
		57474: 28925,
		57475: 28956,
		57476: 28953,
		57477: 29029,
		57478: 29013,
		57479: 29064,
		57480: 29030,
		57481: 29026,
		57482: 29004,
		57483: 29014,
		57484: 29036,
		57485: 29071,
		57486: 29179,
		57487: 29060,
		57488: 29077,
		57489: 29096,
		57490: 29100,
		57491: 29143,
		57492: 29113,
		57493: 29118,
		57494: 29138,
		57495: 29129,
		57496: 29140,
		57497: 29134,
		57498: 29152,
		57499: 29164,
		57500: 29159,
		57501: 29173,
		57502: 29180,
		57503: 29177,
		57504: 29183,
		57505: 29197,
		57506: 29200,
		57507: 29211,
		57508: 29224,
		57509: 29229,
		57510: 29228,
		57511: 29232,
		57512: 29234,
		57513: 29243,
		57514: 29244,
		57515: 29247,
		57516: 29248,
		57517: 29254,
		57518: 29259,
		57519: 29272,
		57520: 29300,
		57521: 29310,
		57522: 29314,
		57523: 29313,
		57524: 29319,
		57525: 29330,
		57526: 29334,
		57527: 29346,
		57528: 29351,
		57529: 29369,
		57530: 29362,
		57531: 29379,
		57532: 29382,
		57533: 29380,
		57534: 29390,
		57535: 29394,
		57536: 29410,
		57537: 29408,
		57538: 29409,
		57539: 29433,
		57540: 29431,
		57541: 20495,
		57542: 29463,
		57543: 29450,
		57544: 29468,
		57545: 29462,
		57546: 29469,
		57547: 29492,
		57548: 29487,
		57549: 29481,
		57550: 29477,
		57551: 29502,
		57552: 29518,
		57553: 29519,
		57554: 40664,
		57555: 29527,
		57556: 29546,
		57557: 29544,
		57558: 29552,
		57559: 29560,
		57560: 29557,
		57561: 29563,
		57562: 29562,
		57563: 29640,
		57564: 29619,
		57565: 29646,
		57566: 29627,
		57567: 29632,
		57568: 29669,
		57569: 29678,
		57570: 29662,
		57571: 29858,
		57572: 29701,
		57573: 29807,
		57574: 29733,
		57575: 29688,
		57576: 29746,
		57577: 29754,
		57578: 29781,
		57579: 29759,
		57580: 29791,
		57581: 29785,
		57582: 29761,
		57583: 29788,
		57584: 29801,
		57585: 29808,
		57586: 29795,
		57587: 29802,
		57588: 29814,
		57589: 29822,
		57590: 29835,
		57591: 29854,
		57592: 29863,
		57593: 29898,
		57594: 29903,
		57595: 29908,
		57596: 29681,
		57664: 29920,
		57665: 29923,
		57666: 29927,
		57667: 29929,
		57668: 29934,
		57669: 29938,
		57670: 29936,
		57671: 29937,
		57672: 29944,
		57673: 29943,
		57674: 29956,
		57675: 29955,
		57676: 29957,
		57677: 29964,
		57678: 29966,
		57679: 29965,
		57680: 29973,
		57681: 29971,
		57682: 29982,
		57683: 29990,
		57684: 29996,
		57685: 30012,
		57686: 30020,
		57687: 30029,
		57688: 30026,
		57689: 30025,
		57690: 30043,
		57691: 30022,
		57692: 30042,
		57693: 30057,
		57694: 30052,
		57695: 30055,
		57696: 30059,
		57697: 30061,
		57698: 30072,
		57699: 30070,
		57700: 30086,
		57701: 30087,
		57702: 30068,
		57703: 30090,
		57704: 30089,
		57705: 30082,
		57706: 30100,
		57707: 30106,
		57708: 30109,
		57709: 30117,
		57710: 30115,
		57711: 30146,
		57712: 30131,
		57713: 30147,
		57714: 30133,
		57715: 30141,
		57716: 30136,
		57717: 30140,
		57718: 30129,
		57719: 30157,
		57720: 30154,
		57721: 30162,
		57722: 30169,
		57723: 30179,
		57724: 30174,
		57725: 30206,
		57726: 30207,
		57728: 30204,
		57729: 30209,
		57730: 30192,
		57731: 30202,
		57732: 30194,
		57733: 30195,
		57734: 30219,
		57735: 30221,
		57736: 30217,
		57737: 30239,
		57738: 30247,
		57739: 30240,
		57740: 30241,
		57741: 30242,
		57742: 30244,
		57743: 30260,
		57744: 30256,
		57745: 30267,
		57746: 30279,
		57747: 30280,
		57748: 30278,
		57749: 30300,
		57750: 30296,
		57751: 30305,
		57752: 30306,
		57753: 30312,
		57754: 30313,
		57755: 30314,
		57756: 30311,
		57757: 30316,
		57758: 30320,
		57759: 30322,
		57760: 30326,
		57761: 30328,
		57762: 30332,
		57763: 30336,
		57764: 30339,
		57765: 30344,
		57766: 30347,
		57767: 30350,
		57768: 30358,
		57769: 30355,
		57770: 30361,
		57771: 30362,
		57772: 30384,
		57773: 30388,
		57774: 30392,
		57775: 30393,
		57776: 30394,
		57777: 30402,
		57778: 30413,
		57779: 30422,
		57780: 30418,
		57781: 30430,
		57782: 30433,
		57783: 30437,
		57784: 30439,
		57785: 30442,
		57786: 34351,
		57787: 30459,
		57788: 30472,
		57789: 30471,
		57790: 30468,
		57791: 30505,
		57792: 30500,
		57793: 30494,
		57794: 30501,
		57795: 30502,
		57796: 30491,
		57797: 30519,
		57798: 30520,
		57799: 30535,
		57800: 30554,
		57801: 30568,
		57802: 30571,
		57803: 30555,
		57804: 30565,
		57805: 30591,
		57806: 30590,
		57807: 30585,
		57808: 30606,
		57809: 30603,
		57810: 30609,
		57811: 30624,
		57812: 30622,
		57813: 30640,
		57814: 30646,
		57815: 30649,
		57816: 30655,
		57817: 30652,
		57818: 30653,
		57819: 30651,
		57820: 30663,
		57821: 30669,
		57822: 30679,
		57823: 30682,
		57824: 30684,
		57825: 30691,
		57826: 30702,
		57827: 30716,
		57828: 30732,
		57829: 30738,
		57830: 31014,
		57831: 30752,
		57832: 31018,
		57833: 30789,
		57834: 30862,
		57835: 30836,
		57836: 30854,
		57837: 30844,
		57838: 30874,
		57839: 30860,
		57840: 30883,
		57841: 30901,
		57842: 30890,
		57843: 30895,
		57844: 30929,
		57845: 30918,
		57846: 30923,
		57847: 30932,
		57848: 30910,
		57849: 30908,
		57850: 30917,
		57851: 30922,
		57852: 30956,
		57920: 30951,
		57921: 30938,
		57922: 30973,
		57923: 30964,
		57924: 30983,
		57925: 30994,
		57926: 30993,
		57927: 31001,
		57928: 31020,
		57929: 31019,
		57930: 31040,
		57931: 31072,
		57932: 31063,
		57933: 31071,
		57934: 31066,
		57935: 31061,
		57936: 31059,
		57937: 31098,
		57938: 31103,
		57939: 31114,
		57940: 31133,
		57941: 31143,
		57942: 40779,
		57943: 31146,
		57944: 31150,
		57945: 31155,
		57946: 31161,
		57947: 31162,
		57948: 31177,
		57949: 31189,
		57950: 31207,
		57951: 31212,
		57952: 31201,
		57953: 31203,
		57954: 31240,
		57955: 31245,
		57956: 31256,
		57957: 31257,
		57958: 31264,
		57959: 31263,
		57960: 31104,
		57961: 31281,
		57962: 31291,
		57963: 31294,
		57964: 31287,
		57965: 31299,
		57966: 31319,
		57967: 31305,
		57968: 31329,
		57969: 31330,
		57970: 31337,
		57971: 40861,
		57972: 31344,
		57973: 31353,
		57974: 31357,
		57975: 31368,
		57976: 31383,
		57977: 31381,
		57978: 31384,
		57979: 31382,
		57980: 31401,
		57981: 31432,
		57982: 31408,
		57984: 31414,
		57985: 31429,
		57986: 31428,
		57987: 31423,
		57988: 36995,
		57989: 31431,
		57990: 31434,
		57991: 31437,
		57992: 31439,
		57993: 31445,
		57994: 31443,
		57995: 31449,
		57996: 31450,
		57997: 31453,
		57998: 31457,
		57999: 31458,
		58000: 31462,
		58001: 31469,
		58002: 31472,
		58003: 31490,
		58004: 31503,
		58005: 31498,
		58006: 31494,
		58007: 31539,
		58008: 31512,
		58009: 31513,
		58010: 31518,
		58011: 31541,
		58012: 31528,
		58013: 31542,
		58014: 31568,
		58015: 31610,
		58016: 31492,
		58017: 31565,
		58018: 31499,
		58019: 31564,
		58020: 31557,
		58021: 31605,
		58022: 31589,
		58023: 31604,
		58024: 31591,
		58025: 31600,
		58026: 31601,
		58027: 31596,
		58028: 31598,
		58029: 31645,
		58030: 31640,
		58031: 31647,
		58032: 31629,
		58033: 31644,
		58034: 31642,
		58035: 31627,
		58036: 31634,
		58037: 31631,
		58038: 31581,
		58039: 31641,
		58040: 31691,
		58041: 31681,
		58042: 31692,
		58043: 31695,
		58044: 31668,
		58045: 31686,
		58046: 31709,
		58047: 31721,
		58048: 31761,
		58049: 31764,
		58050: 31718,
		58051: 31717,
		58052: 31840,
		58053: 31744,
		58054: 31751,
		58055: 31763,
		58056: 31731,
		58057: 31735,
		58058: 31767,
		58059: 31757,
		58060: 31734,
		58061: 31779,
		58062: 31783,
		58063: 31786,
		58064: 31775,
		58065: 31799,
		58066: 31787,
		58067: 31805,
		58068: 31820,
		58069: 31811,
		58070: 31828,
		58071: 31823,
		58072: 31808,
		58073: 31824,
		58074: 31832,
		58075: 31839,
		58076: 31844,
		58077: 31830,
		58078: 31845,
		58079: 31852,
		58080: 31861,
		58081: 31875,
		58082: 31888,
		58083: 31908,
		58084: 31917,
		58085: 31906,
		58086: 31915,
		58087: 31905,
		58088: 31912,
		58089: 31923,
		58090: 31922,
		58091: 31921,
		58092: 31918,
		58093: 31929,
		58094: 31933,
		58095: 31936,
		58096: 31941,
		58097: 31938,
		58098: 31960,
		58099: 31954,
		58100: 31964,
		58101: 31970,
		58102: 39739,
		58103: 31983,
		58104: 31986,
		58105: 31988,
		58106: 31990,
		58107: 31994,
		58108: 32006,
		58176: 32002,
		58177: 32028,
		58178: 32021,
		58179: 32010,
		58180: 32069,
		58181: 32075,
		58182: 32046,
		58183: 32050,
		58184: 32063,
		58185: 32053,
		58186: 32070,
		58187: 32115,
		58188: 32086,
		58189: 32078,
		58190: 32114,
		58191: 32104,
		58192: 32110,
		58193: 32079,
		58194: 32099,
		58195: 32147,
		58196: 32137,
		58197: 32091,
		58198: 32143,
		58199: 32125,
		58200: 32155,
		58201: 32186,
		58202: 32174,
		58203: 32163,
		58204: 32181,
		58205: 32199,
		58206: 32189,
		58207: 32171,
		58208: 32317,
		58209: 32162,
		58210: 32175,
		58211: 32220,
		58212: 32184,
		58213: 32159,
		58214: 32176,
		58215: 32216,
		58216: 32221,
		58217: 32228,
		58218: 32222,
		58219: 32251,
		58220: 32242,
		58221: 32225,
		58222: 32261,
		58223: 32266,
		58224: 32291,
		58225: 32289,
		58226: 32274,
		58227: 32305,
		58228: 32287,
		58229: 32265,
		58230: 32267,
		58231: 32290,
		58232: 32326,
		58233: 32358,
		58234: 32315,
		58235: 32309,
		58236: 32313,
		58237: 32323,
		58238: 32311,
		58240: 32306,
		58241: 32314,
		58242: 32359,
		58243: 32349,
		58244: 32342,
		58245: 32350,
		58246: 32345,
		58247: 32346,
		58248: 32377,
		58249: 32362,
		58250: 32361,
		58251: 32380,
		58252: 32379,
		58253: 32387,
		58254: 32213,
		58255: 32381,
		58256: 36782,
		58257: 32383,
		58258: 32392,
		58259: 32393,
		58260: 32396,
		58261: 32402,
		58262: 32400,
		58263: 32403,
		58264: 32404,
		58265: 32406,
		58266: 32398,
		58267: 32411,
		58268: 32412,
		58269: 32568,
		58270: 32570,
		58271: 32581,
		58272: 32588,
		58273: 32589,
		58274: 32590,
		58275: 32592,
		58276: 32593,
		58277: 32597,
		58278: 32596,
		58279: 32600,
		58280: 32607,
		58281: 32608,
		58282: 32616,
		58283: 32617,
		58284: 32615,
		58285: 32632,
		58286: 32642,
		58287: 32646,
		58288: 32643,
		58289: 32648,
		58290: 32647,
		58291: 32652,
		58292: 32660,
		58293: 32670,
		58294: 32669,
		58295: 32666,
		58296: 32675,
		58297: 32687,
		58298: 32690,
		58299: 32697,
		58300: 32686,
		58301: 32694,
		58302: 32696,
		58303: 35697,
		58304: 32709,
		58305: 32710,
		58306: 32714,
		58307: 32725,
		58308: 32724,
		58309: 32737,
		58310: 32742,
		58311: 32745,
		58312: 32755,
		58313: 32761,
		58314: 39132,
		58315: 32774,
		58316: 32772,
		58317: 32779,
		58318: 32786,
		58319: 32792,
		58320: 32793,
		58321: 32796,
		58322: 32801,
		58323: 32808,
		58324: 32831,
		58325: 32827,
		58326: 32842,
		58327: 32838,
		58328: 32850,
		58329: 32856,
		58330: 32858,
		58331: 32863,
		58332: 32866,
		58333: 32872,
		58334: 32883,
		58335: 32882,
		58336: 32880,
		58337: 32886,
		58338: 32889,
		58339: 32893,
		58340: 32895,
		58341: 32900,
		58342: 32902,
		58343: 32901,
		58344: 32923,
		58345: 32915,
		58346: 32922,
		58347: 32941,
		58348: 20880,
		58349: 32940,
		58350: 32987,
		58351: 32997,
		58352: 32985,
		58353: 32989,
		58354: 32964,
		58355: 32986,
		58356: 32982,
		58357: 33033,
		58358: 33007,
		58359: 33009,
		58360: 33051,
		58361: 33065,
		58362: 33059,
		58363: 33071,
		58364: 33099,
		58432: 38539,
		58433: 33094,
		58434: 33086,
		58435: 33107,
		58436: 33105,
		58437: 33020,
		58438: 33137,
		58439: 33134,
		58440: 33125,
		58441: 33126,
		58442: 33140,
		58443: 33155,
		58444: 33160,
		58445: 33162,
		58446: 33152,
		58447: 33154,
		58448: 33184,
		58449: 33173,
		58450: 33188,
		58451: 33187,
		58452: 33119,
		58453: 33171,
		58454: 33193,
		58455: 33200,
		58456: 33205,
		58457: 33214,
		58458: 33208,
		58459: 33213,
		58460: 33216,
		58461: 33218,
		58462: 33210,
		58463: 33225,
		58464: 33229,
		58465: 33233,
		58466: 33241,
		58467: 33240,
		58468: 33224,
		58469: 33242,
		58470: 33247,
		58471: 33248,
		58472: 33255,
		58473: 33274,
		58474: 33275,
		58475: 33278,
		58476: 33281,
		58477: 33282,
		58478: 33285,
		58479: 33287,
		58480: 33290,
		58481: 33293,
		58482: 33296,
		58483: 33302,
		58484: 33321,
		58485: 33323,
		58486: 33336,
		58487: 33331,
		58488: 33344,
		58489: 33369,
		58490: 33368,
		58491: 33373,
		58492: 33370,
		58493: 33375,
		58494: 33380,
		58496: 33378,
		58497: 33384,
		58498: 33386,
		58499: 33387,
		58500: 33326,
		58501: 33393,
		58502: 33399,
		58503: 33400,
		58504: 33406,
		58505: 33421,
		58506: 33426,
		58507: 33451,
		58508: 33439,
		58509: 33467,
		58510: 33452,
		58511: 33505,
		58512: 33507,
		58513: 33503,
		58514: 33490,
		58515: 33524,
		58516: 33523,
		58517: 33530,
		58518: 33683,
		58519: 33539,
		58520: 33531,
		58521: 33529,
		58522: 33502,
		58523: 33542,
		58524: 33500,
		58525: 33545,
		58526: 33497,
		58527: 33589,
		58528: 33588,
		58529: 33558,
		58530: 33586,
		58531: 33585,
		58532: 33600,
		58533: 33593,
		58534: 33616,
		58535: 33605,
		58536: 33583,
		58537: 33579,
		58538: 33559,
		58539: 33560,
		58540: 33669,
		58541: 33690,
		58542: 33706,
		58543: 33695,
		58544: 33698,
		58545: 33686,
		58546: 33571,
		58547: 33678,
		58548: 33671,
		58549: 33674,
		58550: 33660,
		58551: 33717,
		58552: 33651,
		58553: 33653,
		58554: 33696,
		58555: 33673,
		58556: 33704,
		58557: 33780,
		58558: 33811,
		58559: 33771,
		58560: 33742,
		58561: 33789,
		58562: 33795,
		58563: 33752,
		58564: 33803,
		58565: 33729,
		58566: 33783,
		58567: 33799,
		58568: 33760,
		58569: 33778,
		58570: 33805,
		58571: 33826,
		58572: 33824,
		58573: 33725,
		58574: 33848,
		58575: 34054,
		58576: 33787,
		58577: 33901,
		58578: 33834,
		58579: 33852,
		58580: 34138,
		58581: 33924,
		58582: 33911,
		58583: 33899,
		58584: 33965,
		58585: 33902,
		58586: 33922,
		58587: 33897,
		58588: 33862,
		58589: 33836,
		58590: 33903,
		58591: 33913,
		58592: 33845,
		58593: 33994,
		58594: 33890,
		58595: 33977,
		58596: 33983,
		58597: 33951,
		58598: 34009,
		58599: 33997,
		58600: 33979,
		58601: 34010,
		58602: 34000,
		58603: 33985,
		58604: 33990,
		58605: 34006,
		58606: 33953,
		58607: 34081,
		58608: 34047,
		58609: 34036,
		58610: 34071,
		58611: 34072,
		58612: 34092,
		58613: 34079,
		58614: 34069,
		58615: 34068,
		58616: 34044,
		58617: 34112,
		58618: 34147,
		58619: 34136,
		58620: 34120,
		58688: 34113,
		58689: 34306,
		58690: 34123,
		58691: 34133,
		58692: 34176,
		58693: 34212,
		58694: 34184,
		58695: 34193,
		58696: 34186,
		58697: 34216,
		58698: 34157,
		58699: 34196,
		58700: 34203,
		58701: 34282,
		58702: 34183,
		58703: 34204,
		58704: 34167,
		58705: 34174,
		58706: 34192,
		58707: 34249,
		58708: 34234,
		58709: 34255,
		58710: 34233,
		58711: 34256,
		58712: 34261,
		58713: 34269,
		58714: 34277,
		58715: 34268,
		58716: 34297,
		58717: 34314,
		58718: 34323,
		58719: 34315,
		58720: 34302,
		58721: 34298,
		58722: 34310,
		58723: 34338,
		58724: 34330,
		58725: 34352,
		58726: 34367,
		58727: 34381,
		58728: 20053,
		58729: 34388,
		58730: 34399,
		58731: 34407,
		58732: 34417,
		58733: 34451,
		58734: 34467,
		58735: 34473,
		58736: 34474,
		58737: 34443,
		58738: 34444,
		58739: 34486,
		58740: 34479,
		58741: 34500,
		58742: 34502,
		58743: 34480,
		58744: 34505,
		58745: 34851,
		58746: 34475,
		58747: 34516,
		58748: 34526,
		58749: 34537,
		58750: 34540,
		58752: 34527,
		58753: 34523,
		58754: 34543,
		58755: 34578,
		58756: 34566,
		58757: 34568,
		58758: 34560,
		58759: 34563,
		58760: 34555,
		58761: 34577,
		58762: 34569,
		58763: 34573,
		58764: 34553,
		58765: 34570,
		58766: 34612,
		58767: 34623,
		58768: 34615,
		58769: 34619,
		58770: 34597,
		58771: 34601,
		58772: 34586,
		58773: 34656,
		58774: 34655,
		58775: 34680,
		58776: 34636,
		58777: 34638,
		58778: 34676,
		58779: 34647,
		58780: 34664,
		58781: 34670,
		58782: 34649,
		58783: 34643,
		58784: 34659,
		58785: 34666,
		58786: 34821,
		58787: 34722,
		58788: 34719,
		58789: 34690,
		58790: 34735,
		58791: 34763,
		58792: 34749,
		58793: 34752,
		58794: 34768,
		58795: 38614,
		58796: 34731,
		58797: 34756,
		58798: 34739,
		58799: 34759,
		58800: 34758,
		58801: 34747,
		58802: 34799,
		58803: 34802,
		58804: 34784,
		58805: 34831,
		58806: 34829,
		58807: 34814,
		58808: 34806,
		58809: 34807,
		58810: 34830,
		58811: 34770,
		58812: 34833,
		58813: 34838,
		58814: 34837,
		58815: 34850,
		58816: 34849,
		58817: 34865,
		58818: 34870,
		58819: 34873,
		58820: 34855,
		58821: 34875,
		58822: 34884,
		58823: 34882,
		58824: 34898,
		58825: 34905,
		58826: 34910,
		58827: 34914,
		58828: 34923,
		58829: 34945,
		58830: 34942,
		58831: 34974,
		58832: 34933,
		58833: 34941,
		58834: 34997,
		58835: 34930,
		58836: 34946,
		58837: 34967,
		58838: 34962,
		58839: 34990,
		58840: 34969,
		58841: 34978,
		58842: 34957,
		58843: 34980,
		58844: 34992,
		58845: 35007,
		58846: 34993,
		58847: 35011,
		58848: 35012,
		58849: 35028,
		58850: 35032,
		58851: 35033,
		58852: 35037,
		58853: 35065,
		58854: 35074,
		58855: 35068,
		58856: 35060,
		58857: 35048,
		58858: 35058,
		58859: 35076,
		58860: 35084,
		58861: 35082,
		58862: 35091,
		58863: 35139,
		58864: 35102,
		58865: 35109,
		58866: 35114,
		58867: 35115,
		58868: 35137,
		58869: 35140,
		58870: 35131,
		58871: 35126,
		58872: 35128,
		58873: 35148,
		58874: 35101,
		58875: 35168,
		58876: 35166,
		58944: 35174,
		58945: 35172,
		58946: 35181,
		58947: 35178,
		58948: 35183,
		58949: 35188,
		58950: 35191,
		58951: 35198,
		58952: 35203,
		58953: 35208,
		58954: 35210,
		58955: 35219,
		58956: 35224,
		58957: 35233,
		58958: 35241,
		58959: 35238,
		58960: 35244,
		58961: 35247,
		58962: 35250,
		58963: 35258,
		58964: 35261,
		58965: 35263,
		58966: 35264,
		58967: 35290,
		58968: 35292,
		58969: 35293,
		58970: 35303,
		58971: 35316,
		58972: 35320,
		58973: 35331,
		58974: 35350,
		58975: 35344,
		58976: 35340,
		58977: 35355,
		58978: 35357,
		58979: 35365,
		58980: 35382,
		58981: 35393,
		58982: 35419,
		58983: 35410,
		58984: 35398,
		58985: 35400,
		58986: 35452,
		58987: 35437,
		58988: 35436,
		58989: 35426,
		58990: 35461,
		58991: 35458,
		58992: 35460,
		58993: 35496,
		58994: 35489,
		58995: 35473,
		58996: 35493,
		58997: 35494,
		58998: 35482,
		58999: 35491,
		59000: 35524,
		59001: 35533,
		59002: 35522,
		59003: 35546,
		59004: 35563,
		59005: 35571,
		59006: 35559,
		59008: 35556,
		59009: 35569,
		59010: 35604,
		59011: 35552,
		59012: 35554,
		59013: 35575,
		59014: 35550,
		59015: 35547,
		59016: 35596,
		59017: 35591,
		59018: 35610,
		59019: 35553,
		59020: 35606,
		59021: 35600,
		59022: 35607,
		59023: 35616,
		59024: 35635,
		59025: 38827,
		59026: 35622,
		59027: 35627,
		59028: 35646,
		59029: 35624,
		59030: 35649,
		59031: 35660,
		59032: 35663,
		59033: 35662,
		59034: 35657,
		59035: 35670,
		59036: 35675,
		59037: 35674,
		59038: 35691,
		59039: 35679,
		59040: 35692,
		59041: 35695,
		59042: 35700,
		59043: 35709,
		59044: 35712,
		59045: 35724,
		59046: 35726,
		59047: 35730,
		59048: 35731,
		59049: 35734,
		59050: 35737,
		59051: 35738,
		59052: 35898,
		59053: 35905,
		59054: 35903,
		59055: 35912,
		59056: 35916,
		59057: 35918,
		59058: 35920,
		59059: 35925,
		59060: 35938,
		59061: 35948,
		59062: 35960,
		59063: 35962,
		59064: 35970,
		59065: 35977,
		59066: 35973,
		59067: 35978,
		59068: 35981,
		59069: 35982,
		59070: 35988,
		59071: 35964,
		59072: 35992,
		59073: 25117,
		59074: 36013,
		59075: 36010,
		59076: 36029,
		59077: 36018,
		59078: 36019,
		59079: 36014,
		59080: 36022,
		59081: 36040,
		59082: 36033,
		59083: 36068,
		59084: 36067,
		59085: 36058,
		59086: 36093,
		59087: 36090,
		59088: 36091,
		59089: 36100,
		59090: 36101,
		59091: 36106,
		59092: 36103,
		59093: 36111,
		59094: 36109,
		59095: 36112,
		59096: 40782,
		59097: 36115,
		59098: 36045,
		59099: 36116,
		59100: 36118,
		59101: 36199,
		59102: 36205,
		59103: 36209,
		59104: 36211,
		59105: 36225,
		59106: 36249,
		59107: 36290,
		59108: 36286,
		59109: 36282,
		59110: 36303,
		59111: 36314,
		59112: 36310,
		59113: 36300,
		59114: 36315,
		59115: 36299,
		59116: 36330,
		59117: 36331,
		59118: 36319,
		59119: 36323,
		59120: 36348,
		59121: 36360,
		59122: 36361,
		59123: 36351,
		59124: 36381,
		59125: 36382,
		59126: 36368,
		59127: 36383,
		59128: 36418,
		59129: 36405,
		59130: 36400,
		59131: 36404,
		59132: 36426,
		59200: 36423,
		59201: 36425,
		59202: 36428,
		59203: 36432,
		59204: 36424,
		59205: 36441,
		59206: 36452,
		59207: 36448,
		59208: 36394,
		59209: 36451,
		59210: 36437,
		59211: 36470,
		59212: 36466,
		59213: 36476,
		59214: 36481,
		59215: 36487,
		59216: 36485,
		59217: 36484,
		59218: 36491,
		59219: 36490,
		59220: 36499,
		59221: 36497,
		59222: 36500,
		59223: 36505,
		59224: 36522,
		59225: 36513,
		59226: 36524,
		59227: 36528,
		59228: 36550,
		59229: 36529,
		59230: 36542,
		59231: 36549,
		59232: 36552,
		59233: 36555,
		59234: 36571,
		59235: 36579,
		59236: 36604,
		59237: 36603,
		59238: 36587,
		59239: 36606,
		59240: 36618,
		59241: 36613,
		59242: 36629,
		59243: 36626,
		59244: 36633,
		59245: 36627,
		59246: 36636,
		59247: 36639,
		59248: 36635,
		59249: 36620,
		59250: 36646,
		59251: 36659,
		59252: 36667,
		59253: 36665,
		59254: 36677,
		59255: 36674,
		59256: 36670,
		59257: 36684,
		59258: 36681,
		59259: 36678,
		59260: 36686,
		59261: 36695,
		59262: 36700,
		59264: 36706,
		59265: 36707,
		59266: 36708,
		59267: 36764,
		59268: 36767,
		59269: 36771,
		59270: 36781,
		59271: 36783,
		59272: 36791,
		59273: 36826,
		59274: 36837,
		59275: 36834,
		59276: 36842,
		59277: 36847,
		59278: 36999,
		59279: 36852,
		59280: 36869,
		59281: 36857,
		59282: 36858,
		59283: 36881,
		59284: 36885,
		59285: 36897,
		59286: 36877,
		59287: 36894,
		59288: 36886,
		59289: 36875,
		59290: 36903,
		59291: 36918,
		59292: 36917,
		59293: 36921,
		59294: 36856,
		59295: 36943,
		59296: 36944,
		59297: 36945,
		59298: 36946,
		59299: 36878,
		59300: 36937,
		59301: 36926,
		59302: 36950,
		59303: 36952,
		59304: 36958,
		59305: 36968,
		59306: 36975,
		59307: 36982,
		59308: 38568,
		59309: 36978,
		59310: 36994,
		59311: 36989,
		59312: 36993,
		59313: 36992,
		59314: 37002,
		59315: 37001,
		59316: 37007,
		59317: 37032,
		59318: 37039,
		59319: 37041,
		59320: 37045,
		59321: 37090,
		59322: 37092,
		59323: 25160,
		59324: 37083,
		59325: 37122,
		59326: 37138,
		59327: 37145,
		59328: 37170,
		59329: 37168,
		59330: 37194,
		59331: 37206,
		59332: 37208,
		59333: 37219,
		59334: 37221,
		59335: 37225,
		59336: 37235,
		59337: 37234,
		59338: 37259,
		59339: 37257,
		59340: 37250,
		59341: 37282,
		59342: 37291,
		59343: 37295,
		59344: 37290,
		59345: 37301,
		59346: 37300,
		59347: 37306,
		59348: 37312,
		59349: 37313,
		59350: 37321,
		59351: 37323,
		59352: 37328,
		59353: 37334,
		59354: 37343,
		59355: 37345,
		59356: 37339,
		59357: 37372,
		59358: 37365,
		59359: 37366,
		59360: 37406,
		59361: 37375,
		59362: 37396,
		59363: 37420,
		59364: 37397,
		59365: 37393,
		59366: 37470,
		59367: 37463,
		59368: 37445,
		59369: 37449,
		59370: 37476,
		59371: 37448,
		59372: 37525,
		59373: 37439,
		59374: 37451,
		59375: 37456,
		59376: 37532,
		59377: 37526,
		59378: 37523,
		59379: 37531,
		59380: 37466,
		59381: 37583,
		59382: 37561,
		59383: 37559,
		59384: 37609,
		59385: 37647,
		59386: 37626,
		59387: 37700,
		59388: 37678,
		59456: 37657,
		59457: 37666,
		59458: 37658,
		59459: 37667,
		59460: 37690,
		59461: 37685,
		59462: 37691,
		59463: 37724,
		59464: 37728,
		59465: 37756,
		59466: 37742,
		59467: 37718,
		59468: 37808,
		59469: 37804,
		59470: 37805,
		59471: 37780,
		59472: 37817,
		59473: 37846,
		59474: 37847,
		59475: 37864,
		59476: 37861,
		59477: 37848,
		59478: 37827,
		59479: 37853,
		59480: 37840,
		59481: 37832,
		59482: 37860,
		59483: 37914,
		59484: 37908,
		59485: 37907,
		59486: 37891,
		59487: 37895,
		59488: 37904,
		59489: 37942,
		59490: 37931,
		59491: 37941,
		59492: 37921,
		59493: 37946,
		59494: 37953,
		59495: 37970,
		59496: 37956,
		59497: 37979,
		59498: 37984,
		59499: 37986,
		59500: 37982,
		59501: 37994,
		59502: 37417,
		59503: 38000,
		59504: 38005,
		59505: 38007,
		59506: 38013,
		59507: 37978,
		59508: 38012,
		59509: 38014,
		59510: 38017,
		59511: 38015,
		59512: 38274,
		59513: 38279,
		59514: 38282,
		59515: 38292,
		59516: 38294,
		59517: 38296,
		59518: 38297,
		59520: 38304,
		59521: 38312,
		59522: 38311,
		59523: 38317,
		59524: 38332,
		59525: 38331,
		59526: 38329,
		59527: 38334,
		59528: 38346,
		59529: 28662,
		59530: 38339,
		59531: 38349,
		59532: 38348,
		59533: 38357,
		59534: 38356,
		59535: 38358,
		59536: 38364,
		59537: 38369,
		59538: 38373,
		59539: 38370,
		59540: 38433,
		59541: 38440,
		59542: 38446,
		59543: 38447,
		59544: 38466,
		59545: 38476,
		59546: 38479,
		59547: 38475,
		59548: 38519,
		59549: 38492,
		59550: 38494,
		59551: 38493,
		59552: 38495,
		59553: 38502,
		59554: 38514,
		59555: 38508,
		59556: 38541,
		59557: 38552,
		59558: 38549,
		59559: 38551,
		59560: 38570,
		59561: 38567,
		59562: 38577,
		59563: 38578,
		59564: 38576,
		59565: 38580,
		59566: 38582,
		59567: 38584,
		59568: 38585,
		59569: 38606,
		59570: 38603,
		59571: 38601,
		59572: 38605,
		59573: 35149,
		59574: 38620,
		59575: 38669,
		59576: 38613,
		59577: 38649,
		59578: 38660,
		59579: 38662,
		59580: 38664,
		59581: 38675,
		59582: 38670,
		59583: 38673,
		59584: 38671,
		59585: 38678,
		59586: 38681,
		59587: 38692,
		59588: 38698,
		59589: 38704,
		59590: 38713,
		59591: 38717,
		59592: 38718,
		59593: 38724,
		59594: 38726,
		59595: 38728,
		59596: 38722,
		59597: 38729,
		59598: 38748,
		59599: 38752,
		59600: 38756,
		59601: 38758,
		59602: 38760,
		59603: 21202,
		59604: 38763,
		59605: 38769,
		59606: 38777,
		59607: 38789,
		59608: 38780,
		59609: 38785,
		59610: 38778,
		59611: 38790,
		59612: 38795,
		59613: 38799,
		59614: 38800,
		59615: 38812,
		59616: 38824,
		59617: 38822,
		59618: 38819,
		59619: 38835,
		59620: 38836,
		59621: 38851,
		59622: 38854,
		59623: 38856,
		59624: 38859,
		59625: 38876,
		59626: 38893,
		59627: 40783,
		59628: 38898,
		59629: 31455,
		59630: 38902,
		59631: 38901,
		59632: 38927,
		59633: 38924,
		59634: 38968,
		59635: 38948,
		59636: 38945,
		59637: 38967,
		59638: 38973,
		59639: 38982,
		59640: 38991,
		59641: 38987,
		59642: 39019,
		59643: 39023,
		59644: 39024,
		59712: 39025,
		59713: 39028,
		59714: 39027,
		59715: 39082,
		59716: 39087,
		59717: 39089,
		59718: 39094,
		59719: 39108,
		59720: 39107,
		59721: 39110,
		59722: 39145,
		59723: 39147,
		59724: 39171,
		59725: 39177,
		59726: 39186,
		59727: 39188,
		59728: 39192,
		59729: 39201,
		59730: 39197,
		59731: 39198,
		59732: 39204,
		59733: 39200,
		59734: 39212,
		59735: 39214,
		59736: 39229,
		59737: 39230,
		59738: 39234,
		59739: 39241,
		59740: 39237,
		59741: 39248,
		59742: 39243,
		59743: 39249,
		59744: 39250,
		59745: 39244,
		59746: 39253,
		59747: 39319,
		59748: 39320,
		59749: 39333,
		59750: 39341,
		59751: 39342,
		59752: 39356,
		59753: 39391,
		59754: 39387,
		59755: 39389,
		59756: 39384,
		59757: 39377,
		59758: 39405,
		59759: 39406,
		59760: 39409,
		59761: 39410,
		59762: 39419,
		59763: 39416,
		59764: 39425,
		59765: 39439,
		59766: 39429,
		59767: 39394,
		59768: 39449,
		59769: 39467,
		59770: 39479,
		59771: 39493,
		59772: 39490,
		59773: 39488,
		59774: 39491,
		59776: 39486,
		59777: 39509,
		59778: 39501,
		59779: 39515,
		59780: 39511,
		59781: 39519,
		59782: 39522,
		59783: 39525,
		59784: 39524,
		59785: 39529,
		59786: 39531,
		59787: 39530,
		59788: 39597,
		59789: 39600,
		59790: 39612,
		59791: 39616,
		59792: 39631,
		59793: 39633,
		59794: 39635,
		59795: 39636,
		59796: 39646,
		59797: 39647,
		59798: 39650,
		59799: 39651,
		59800: 39654,
		59801: 39663,
		59802: 39659,
		59803: 39662,
		59804: 39668,
		59805: 39665,
		59806: 39671,
		59807: 39675,
		59808: 39686,
		59809: 39704,
		59810: 39706,
		59811: 39711,
		59812: 39714,
		59813: 39715,
		59814: 39717,
		59815: 39719,
		59816: 39720,
		59817: 39721,
		59818: 39722,
		59819: 39726,
		59820: 39727,
		59821: 39730,
		59822: 39748,
		59823: 39747,
		59824: 39759,
		59825: 39757,
		59826: 39758,
		59827: 39761,
		59828: 39768,
		59829: 39796,
		59830: 39827,
		59831: 39811,
		59832: 39825,
		59833: 39830,
		59834: 39831,
		59835: 39839,
		59836: 39840,
		59837: 39848,
		59838: 39860,
		59839: 39872,
		59840: 39882,
		59841: 39865,
		59842: 39878,
		59843: 39887,
		59844: 39889,
		59845: 39890,
		59846: 39907,
		59847: 39906,
		59848: 39908,
		59849: 39892,
		59850: 39905,
		59851: 39994,
		59852: 39922,
		59853: 39921,
		59854: 39920,
		59855: 39957,
		59856: 39956,
		59857: 39945,
		59858: 39955,
		59859: 39948,
		59860: 39942,
		59861: 39944,
		59862: 39954,
		59863: 39946,
		59864: 39940,
		59865: 39982,
		59866: 39963,
		59867: 39973,
		59868: 39972,
		59869: 39969,
		59870: 39984,
		59871: 40007,
		59872: 39986,
		59873: 40006,
		59874: 39998,
		59875: 40026,
		59876: 40032,
		59877: 40039,
		59878: 40054,
		59879: 40056,
		59880: 40167,
		59881: 40172,
		59882: 40176,
		59883: 40201,
		59884: 40200,
		59885: 40171,
		59886: 40195,
		59887: 40198,
		59888: 40234,
		59889: 40230,
		59890: 40367,
		59891: 40227,
		59892: 40223,
		59893: 40260,
		59894: 40213,
		59895: 40210,
		59896: 40257,
		59897: 40255,
		59898: 40254,
		59899: 40262,
		59900: 40264,
		59968: 40285,
		59969: 40286,
		59970: 40292,
		59971: 40273,
		59972: 40272,
		59973: 40281,
		59974: 40306,
		59975: 40329,
		59976: 40327,
		59977: 40363,
		59978: 40303,
		59979: 40314,
		59980: 40346,
		59981: 40356,
		59982: 40361,
		59983: 40370,
		59984: 40388,
		59985: 40385,
		59986: 40379,
		59987: 40376,
		59988: 40378,
		59989: 40390,
		59990: 40399,
		59991: 40386,
		59992: 40409,
		59993: 40403,
		59994: 40440,
		59995: 40422,
		59996: 40429,
		59997: 40431,
		59998: 40445,
		59999: 40474,
		60000: 40475,
		60001: 40478,
		60002: 40565,
		60003: 40569,
		60004: 40573,
		60005: 40577,
		60006: 40584,
		60007: 40587,
		60008: 40588,
		60009: 40594,
		60010: 40597,
		60011: 40593,
		60012: 40605,
		60013: 40613,
		60014: 40617,
		60015: 40632,
		60016: 40618,
		60017: 40621,
		60018: 38753,
		60019: 40652,
		60020: 40654,
		60021: 40655,
		60022: 40656,
		60023: 40660,
		60024: 40668,
		60025: 40670,
		60026: 40669,
		60027: 40672,
		60028: 40677,
		60029: 40680,
		60030: 40687,
		60032: 40692,
		60033: 40694,
		60034: 40695,
		60035: 40697,
		60036: 40699,
		60037: 40700,
		60038: 40701,
		60039: 40711,
		60040: 40712,
		60041: 30391,
		60042: 40725,
		60043: 40737,
		60044: 40748,
		60045: 40766,
		60046: 40778,
		60047: 40786,
		60048: 40788,
		60049: 40803,
		60050: 40799,
		60051: 40800,
		60052: 40801,
		60053: 40806,
		60054: 40807,
		60055: 40812,
		60056: 40810,
		60057: 40823,
		60058: 40818,
		60059: 40822,
		60060: 40853,
		60061: 40860,
		60062: 40864,
		60063: 22575,
		60064: 27079,
		60065: 36953,
		60066: 29796,
		60067: 20956,
		60068: 29081,
		60736: 32394,
		60737: 35100,
		60738: 37704,
		60739: 37512,
		60740: 34012,
		60741: 20425,
		60742: 28859,
		60743: 26161,
		60744: 26824,
		60745: 37625,
		60746: 26363,
		60747: 24389,
		60748: 20008,
		60749: 20193,
		60750: 20220,
		60751: 20224,
		60752: 20227,
		60753: 20281,
		60754: 20310,
		60755: 20370,
		60756: 20362,
		60757: 20378,
		60758: 20372,
		60759: 20429,
		60760: 20544,
		60761: 20514,
		60762: 20479,
		60763: 20510,
		60764: 20550,
		60765: 20592,
		60766: 20546,
		60767: 20628,
		60768: 20724,
		60769: 20696,
		60770: 20810,
		60771: 20836,
		60772: 20893,
		60773: 20926,
		60774: 20972,
		60775: 21013,
		60776: 21148,
		60777: 21158,
		60778: 21184,
		60779: 21211,
		60780: 21248,
		60781: 21255,
		60782: 21284,
		60783: 21362,
		60784: 21395,
		60785: 21426,
		60786: 21469,
		60787: 64014,
		60788: 21660,
		60789: 21642,
		60790: 21673,
		60791: 21759,
		60792: 21894,
		60793: 22361,
		60794: 22373,
		60795: 22444,
		60796: 22472,
		60797: 22471,
		60798: 64015,
		60800: 64016,
		60801: 22686,
		60802: 22706,
		60803: 22795,
		60804: 22867,
		60805: 22875,
		60806: 22877,
		60807: 22883,
		60808: 22948,
		60809: 22970,
		60810: 23382,
		60811: 23488,
		60812: 29999,
		60813: 23512,
		60814: 23532,
		60815: 23582,
		60816: 23718,
		60817: 23738,
		60818: 23797,
		60819: 23847,
		60820: 23891,
		60821: 64017,
		60822: 23874,
		60823: 23917,
		60824: 23992,
		60825: 23993,
		60826: 24016,
		60827: 24353,
		60828: 24372,
		60829: 24423,
		60830: 24503,
		60831: 24542,
		60832: 24669,
		60833: 24709,
		60834: 24714,
		60835: 24798,
		60836: 24789,
		60837: 24864,
		60838: 24818,
		60839: 24849,
		60840: 24887,
		60841: 24880,
		60842: 24984,
		60843: 25107,
		60844: 25254,
		60845: 25589,
		60846: 25696,
		60847: 25757,
		60848: 25806,
		60849: 25934,
		60850: 26112,
		60851: 26133,
		60852: 26171,
		60853: 26121,
		60854: 26158,
		60855: 26142,
		60856: 26148,
		60857: 26213,
		60858: 26199,
		60859: 26201,
		60860: 64018,
		60861: 26227,
		60862: 26265,
		60863: 26272,
		60864: 26290,
		60865: 26303,
		60866: 26362,
		60867: 26382,
		60868: 63785,
		60869: 26470,
		60870: 26555,
		60871: 26706,
		60872: 26560,
		60873: 26625,
		60874: 26692,
		60875: 26831,
		60876: 64019,
		60877: 26984,
		60878: 64020,
		60879: 27032,
		60880: 27106,
		60881: 27184,
		60882: 27243,
		60883: 27206,
		60884: 27251,
		60885: 27262,
		60886: 27362,
		60887: 27364,
		60888: 27606,
		60889: 27711,
		60890: 27740,
		60891: 27782,
		60892: 27759,
		60893: 27866,
		60894: 27908,
		60895: 28039,
		60896: 28015,
		60897: 28054,
		60898: 28076,
		60899: 28111,
		60900: 28152,
		60901: 28146,
		60902: 28156,
		60903: 28217,
		60904: 28252,
		60905: 28199,
		60906: 28220,
		60907: 28351,
		60908: 28552,
		60909: 28597,
		60910: 28661,
		60911: 28677,
		60912: 28679,
		60913: 28712,
		60914: 28805,
		60915: 28843,
		60916: 28943,
		60917: 28932,
		60918: 29020,
		60919: 28998,
		60920: 28999,
		60921: 64021,
		60922: 29121,
		60923: 29182,
		60924: 29361,
		60992: 29374,
		60993: 29476,
		60994: 64022,
		60995: 29559,
		60996: 29629,
		60997: 29641,
		60998: 29654,
		60999: 29667,
		61000: 29650,
		61001: 29703,
		61002: 29685,
		61003: 29734,
		61004: 29738,
		61005: 29737,
		61006: 29742,
		61007: 29794,
		61008: 29833,
		61009: 29855,
		61010: 29953,
		61011: 30063,
		61012: 30338,
		61013: 30364,
		61014: 30366,
		61015: 30363,
		61016: 30374,
		61017: 64023,
		61018: 30534,
		61019: 21167,
		61020: 30753,
		61021: 30798,
		61022: 30820,
		61023: 30842,
		61024: 31024,
		61025: 64024,
		61026: 64025,
		61027: 64026,
		61028: 31124,
		61029: 64027,
		61030: 31131,
		61031: 31441,
		61032: 31463,
		61033: 64028,
		61034: 31467,
		61035: 31646,
		61036: 64029,
		61037: 32072,
		61038: 32092,
		61039: 32183,
		61040: 32160,
		61041: 32214,
		61042: 32338,
		61043: 32583,
		61044: 32673,
		61045: 64030,
		61046: 33537,
		61047: 33634,
		61048: 33663,
		61049: 33735,
		61050: 33782,
		61051: 33864,
		61052: 33972,
		61053: 34131,
		61054: 34137,
		61056: 34155,
		61057: 64031,
		61058: 34224,
		61059: 64032,
		61060: 64033,
		61061: 34823,
		61062: 35061,
		61063: 35346,
		61064: 35383,
		61065: 35449,
		61066: 35495,
		61067: 35518,
		61068: 35551,
		61069: 64034,
		61070: 35574,
		61071: 35667,
		61072: 35711,
		61073: 36080,
		61074: 36084,
		61075: 36114,
		61076: 36214,
		61077: 64035,
		61078: 36559,
		61079: 64036,
		61080: 64037,
		61081: 36967,
		61082: 37086,
		61083: 64038,
		61084: 37141,
		61085: 37159,
		61086: 37338,
		61087: 37335,
		61088: 37342,
		61089: 37357,
		61090: 37358,
		61091: 37348,
		61092: 37349,
		61093: 37382,
		61094: 37392,
		61095: 37386,
		61096: 37434,
		61097: 37440,
		61098: 37436,
		61099: 37454,
		61100: 37465,
		61101: 37457,
		61102: 37433,
		61103: 37479,
		61104: 37543,
		61105: 37495,
		61106: 37496,
		61107: 37607,
		61108: 37591,
		61109: 37593,
		61110: 37584,
		61111: 64039,
		61112: 37589,
		61113: 37600,
		61114: 37587,
		61115: 37669,
		61116: 37665,
		61117: 37627,
		61118: 64040,
		61119: 37662,
		61120: 37631,
		61121: 37661,
		61122: 37634,
		61123: 37744,
		61124: 37719,
		61125: 37796,
		61126: 37830,
		61127: 37854,
		61128: 37880,
		61129: 37937,
		61130: 37957,
		61131: 37960,
		61132: 38290,
		61133: 63964,
		61134: 64041,
		61135: 38557,
		61136: 38575,
		61137: 38707,
		61138: 38715,
		61139: 38723,
		61140: 38733,
		61141: 38735,
		61142: 38737,
		61143: 38741,
		61144: 38999,
		61145: 39013,
		61146: 64042,
		61147: 64043,
		61148: 39207,
		61149: 64044,
		61150: 39326,
		61151: 39502,
		61152: 39641,
		61153: 39644,
		61154: 39797,
		61155: 39794,
		61156: 39823,
		61157: 39857,
		61158: 39867,
		61159: 39936,
		61160: 40304,
		61161: 40299,
		61162: 64045,
		61163: 40473,
		61164: 40657,
		61167: 8560,
		61168: 8561,
		61169: 8562,
		61170: 8563,
		61171: 8564,
		61172: 8565,
		61173: 8566,
		61174: 8567,
		61175: 8568,
		61176: 8569,
		61177: 65506,
		61178: 65508,
		61179: 65287,
		61180: 65282,
		61504: 57344,
		61505: 57345,
		61506: 57346,
		61507: 57347,
		61508: 57348,
		61509: 57349,
		61510: 57350,
		61511: 57351,
		61512: 57352,
		61513: 57353,
		61514: 57354,
		61515: 57355,
		61516: 57356,
		61517: 57357,
		61518: 57358,
		61519: 57359,
		61520: 57360,
		61521: 57361,
		61522: 57362,
		61523: 57363,
		61524: 57364,
		61525: 57365,
		61526: 57366,
		61527: 57367,
		61528: 57368,
		61529: 57369,
		61530: 57370,
		61531: 57371,
		61532: 57372,
		61533: 57373,
		61534: 57374,
		61535: 57375,
		61536: 57376,
		61537: 57377,
		61538: 57378,
		61539: 57379,
		61540: 57380,
		61541: 57381,
		61542: 57382,
		61543: 57383,
		61544: 57384,
		61545: 57385,
		61546: 57386,
		61547: 57387,
		61548: 57388,
		61549: 57389,
		61550: 57390,
		61551: 57391,
		61552: 57392,
		61553: 57393,
		61554: 57394,
		61555: 57395,
		61556: 57396,
		61557: 57397,
		61558: 57398,
		61559: 57399,
		61560: 57400,
		61561: 57401,
		61562: 57402,
		61563: 57403,
		61564: 57404,
		61565: 57405,
		61566: 57406,
		61568: 57407,
		61569: 57408,
		61570: 57409,
		61571: 57410,
		61572: 57411,
		61573: 57412,
		61574: 57413,
		61575: 57414,
		61576: 57415,
		61577: 57416,
		61578: 57417,
		61579: 57418,
		61580: 57419,
		61581: 57420,
		61582: 57421,
		61583: 57422,
		61584: 57423,
		61585: 57424,
		61586: 57425,
		61587: 57426,
		61588: 57427,
		61589: 57428,
		61590: 57429,
		61591: 57430,
		61592: 57431,
		61593: 57432,
		61594: 57433,
		61595: 57434,
		61596: 57435,
		61597: 57436,
		61598: 57437,
		61599: 57438,
		61600: 57439,
		61601: 57440,
		61602: 57441,
		61603: 57442,
		61604: 57443,
		61605: 57444,
		61606: 57445,
		61607: 57446,
		61608: 57447,
		61609: 57448,
		61610: 57449,
		61611: 57450,
		61612: 57451,
		61613: 57452,
		61614: 57453,
		61615: 57454,
		61616: 57455,
		61617: 57456,
		61618: 57457,
		61619: 57458,
		61620: 57459,
		61621: 57460,
		61622: 57461,
		61623: 57462,
		61624: 57463,
		61625: 57464,
		61626: 57465,
		61627: 57466,
		61628: 57467,
		61629: 57468,
		61630: 57469,
		61631: 57470,
		61632: 57471,
		61633: 57472,
		61634: 57473,
		61635: 57474,
		61636: 57475,
		61637: 57476,
		61638: 57477,
		61639: 57478,
		61640: 57479,
		61641: 57480,
		61642: 57481,
		61643: 57482,
		61644: 57483,
		61645: 57484,
		61646: 57485,
		61647: 57486,
		61648: 57487,
		61649: 57488,
		61650: 57489,
		61651: 57490,
		61652: 57491,
		61653: 57492,
		61654: 57493,
		61655: 57494,
		61656: 57495,
		61657: 57496,
		61658: 57497,
		61659: 57498,
		61660: 57499,
		61661: 57500,
		61662: 57501,
		61663: 57502,
		61664: 57503,
		61665: 57504,
		61666: 57505,
		61667: 57506,
		61668: 57507,
		61669: 57508,
		61670: 57509,
		61671: 57510,
		61672: 57511,
		61673: 57512,
		61674: 57513,
		61675: 57514,
		61676: 57515,
		61677: 57516,
		61678: 57517,
		61679: 57518,
		61680: 57519,
		61681: 57520,
		61682: 57521,
		61683: 57522,
		61684: 57523,
		61685: 57524,
		61686: 57525,
		61687: 57526,
		61688: 57527,
		61689: 57528,
		61690: 57529,
		61691: 57530,
		61692: 57531,
		61760: 57532,
		61761: 57533,
		61762: 57534,
		61763: 57535,
		61764: 57536,
		61765: 57537,
		61766: 57538,
		61767: 57539,
		61768: 57540,
		61769: 57541,
		61770: 57542,
		61771: 57543,
		61772: 57544,
		61773: 57545,
		61774: 57546,
		61775: 57547,
		61776: 57548,
		61777: 57549,
		61778: 57550,
		61779: 57551,
		61780: 57552,
		61781: 57553,
		61782: 57554,
		61783: 57555,
		61784: 57556,
		61785: 57557,
		61786: 57558,
		61787: 57559,
		61788: 57560,
		61789: 57561,
		61790: 57562,
		61791: 57563,
		61792: 57564,
		61793: 57565,
		61794: 57566,
		61795: 57567,
		61796: 57568,
		61797: 57569,
		61798: 57570,
		61799: 57571,
		61800: 57572,
		61801: 57573,
		61802: 57574,
		61803: 57575,
		61804: 57576,
		61805: 57577,
		61806: 57578,
		61807: 57579,
		61808: 57580,
		61809: 57581,
		61810: 57582,
		61811: 57583,
		61812: 57584,
		61813: 57585,
		61814: 57586,
		61815: 57587,
		61816: 57588,
		61817: 57589,
		61818: 57590,
		61819: 57591,
		61820: 57592,
		61821: 57593,
		61822: 57594,
		61824: 57595,
		61825: 57596,
		61826: 57597,
		61827: 57598,
		61828: 57599,
		61829: 57600,
		61830: 57601,
		61831: 57602,
		61832: 57603,
		61833: 57604,
		61834: 57605,
		61835: 57606,
		61836: 57607,
		61837: 57608,
		61838: 57609,
		61839: 57610,
		61840: 57611,
		61841: 57612,
		61842: 57613,
		61843: 57614,
		61844: 57615,
		61845: 57616,
		61846: 57617,
		61847: 57618,
		61848: 57619,
		61849: 57620,
		61850: 57621,
		61851: 57622,
		61852: 57623,
		61853: 57624,
		61854: 57625,
		61855: 57626,
		61856: 57627,
		61857: 57628,
		61858: 57629,
		61859: 57630,
		61860: 57631,
		61861: 57632,
		61862: 57633,
		61863: 57634,
		61864: 57635,
		61865: 57636,
		61866: 57637,
		61867: 57638,
		61868: 57639,
		61869: 57640,
		61870: 57641,
		61871: 57642,
		61872: 57643,
		61873: 57644,
		61874: 57645,
		61875: 57646,
		61876: 57647,
		61877: 57648,
		61878: 57649,
		61879: 57650,
		61880: 57651,
		61881: 57652,
		61882: 57653,
		61883: 57654,
		61884: 57655,
		61885: 57656,
		61886: 57657,
		61887: 57658,
		61888: 57659,
		61889: 57660,
		61890: 57661,
		61891: 57662,
		61892: 57663,
		61893: 57664,
		61894: 57665,
		61895: 57666,
		61896: 57667,
		61897: 57668,
		61898: 57669,
		61899: 57670,
		61900: 57671,
		61901: 57672,
		61902: 57673,
		61903: 57674,
		61904: 57675,
		61905: 57676,
		61906: 57677,
		61907: 57678,
		61908: 57679,
		61909: 57680,
		61910: 57681,
		61911: 57682,
		61912: 57683,
		61913: 57684,
		61914: 57685,
		61915: 57686,
		61916: 57687,
		61917: 57688,
		61918: 57689,
		61919: 57690,
		61920: 57691,
		61921: 57692,
		61922: 57693,
		61923: 57694,
		61924: 57695,
		61925: 57696,
		61926: 57697,
		61927: 57698,
		61928: 57699,
		61929: 57700,
		61930: 57701,
		61931: 57702,
		61932: 57703,
		61933: 57704,
		61934: 57705,
		61935: 57706,
		61936: 57707,
		61937: 57708,
		61938: 57709,
		61939: 57710,
		61940: 57711,
		61941: 57712,
		61942: 57713,
		61943: 57714,
		61944: 57715,
		61945: 57716,
		61946: 57717,
		61947: 57718,
		61948: 57719,
		62016: 57720,
		62017: 57721,
		62018: 57722,
		62019: 57723,
		62020: 57724,
		62021: 57725,
		62022: 57726,
		62023: 57727,
		62024: 57728,
		62025: 57729,
		62026: 57730,
		62027: 57731,
		62028: 57732,
		62029: 57733,
		62030: 57734,
		62031: 57735,
		62032: 57736,
		62033: 57737,
		62034: 57738,
		62035: 57739,
		62036: 57740,
		62037: 57741,
		62038: 57742,
		62039: 57743,
		62040: 57744,
		62041: 57745,
		62042: 57746,
		62043: 57747,
		62044: 57748,
		62045: 57749,
		62046: 57750,
		62047: 57751,
		62048: 57752,
		62049: 57753,
		62050: 57754,
		62051: 57755,
		62052: 57756,
		62053: 57757,
		62054: 57758,
		62055: 57759,
		62056: 57760,
		62057: 57761,
		62058: 57762,
		62059: 57763,
		62060: 57764,
		62061: 57765,
		62062: 57766,
		62063: 57767,
		62064: 57768,
		62065: 57769,
		62066: 57770,
		62067: 57771,
		62068: 57772,
		62069: 57773,
		62070: 57774,
		62071: 57775,
		62072: 57776,
		62073: 57777,
		62074: 57778,
		62075: 57779,
		62076: 57780,
		62077: 57781,
		62078: 57782,
		62080: 57783,
		62081: 57784,
		62082: 57785,
		62083: 57786,
		62084: 57787,
		62085: 57788,
		62086: 57789,
		62087: 57790,
		62088: 57791,
		62089: 57792,
		62090: 57793,
		62091: 57794,
		62092: 57795,
		62093: 57796,
		62094: 57797,
		62095: 57798,
		62096: 57799,
		62097: 57800,
		62098: 57801,
		62099: 57802,
		62100: 57803,
		62101: 57804,
		62102: 57805,
		62103: 57806,
		62104: 57807,
		62105: 57808,
		62106: 57809,
		62107: 57810,
		62108: 57811,
		62109: 57812,
		62110: 57813,
		62111: 57814,
		62112: 57815,
		62113: 57816,
		62114: 57817,
		62115: 57818,
		62116: 57819,
		62117: 57820,
		62118: 57821,
		62119: 57822,
		62120: 57823,
		62121: 57824,
		62122: 57825,
		62123: 57826,
		62124: 57827,
		62125: 57828,
		62126: 57829,
		62127: 57830,
		62128: 57831,
		62129: 57832,
		62130: 57833,
		62131: 57834,
		62132: 57835,
		62133: 57836,
		62134: 57837,
		62135: 57838,
		62136: 57839,
		62137: 57840,
		62138: 57841,
		62139: 57842,
		62140: 57843,
		62141: 57844,
		62142: 57845,
		62143: 57846,
		62144: 57847,
		62145: 57848,
		62146: 57849,
		62147: 57850,
		62148: 57851,
		62149: 57852,
		62150: 57853,
		62151: 57854,
		62152: 57855,
		62153: 57856,
		62154: 57857,
		62155: 57858,
		62156: 57859,
		62157: 57860,
		62158: 57861,
		62159: 57862,
		62160: 57863,
		62161: 57864,
		62162: 57865,
		62163: 57866,
		62164: 57867,
		62165: 57868,
		62166: 57869,
		62167: 57870,
		62168: 57871,
		62169: 57872,
		62170: 57873,
		62171: 57874,
		62172: 57875,
		62173: 57876,
		62174: 57877,
		62175: 57878,
		62176: 57879,
		62177: 57880,
		62178: 57881,
		62179: 57882,
		62180: 57883,
		62181: 57884,
		62182: 57885,
		62183: 57886,
		62184: 57887,
		62185: 57888,
		62186: 57889,
		62187: 57890,
		62188: 57891,
		62189: 57892,
		62190: 57893,
		62191: 57894,
		62192: 57895,
		62193: 57896,
		62194: 57897,
		62195: 57898,
		62196: 57899,
		62197: 57900,
		62198: 57901,
		62199: 57902,
		62200: 57903,
		62201: 57904,
		62202: 57905,
		62203: 57906,
		62204: 57907,
		62272: 57908,
		62273: 57909,
		62274: 57910,
		62275: 57911,
		62276: 57912,
		62277: 57913,
		62278: 57914,
		62279: 57915,
		62280: 57916,
		62281: 57917,
		62282: 57918,
		62283: 57919,
		62284: 57920,
		62285: 57921,
		62286: 57922,
		62287: 57923,
		62288: 57924,
		62289: 57925,
		62290: 57926,
		62291: 57927,
		62292: 57928,
		62293: 57929,
		62294: 57930,
		62295: 57931,
		62296: 57932,
		62297: 57933,
		62298: 57934,
		62299: 57935,
		62300: 57936,
		62301: 57937,
		62302: 57938,
		62303: 57939,
		62304: 57940,
		62305: 57941,
		62306: 57942,
		62307: 57943,
		62308: 57944,
		62309: 57945,
		62310: 57946,
		62311: 57947,
		62312: 57948,
		62313: 57949,
		62314: 57950,
		62315: 57951,
		62316: 57952,
		62317: 57953,
		62318: 57954,
		62319: 57955,
		62320: 57956,
		62321: 57957,
		62322: 57958,
		62323: 57959,
		62324: 57960,
		62325: 57961,
		62326: 57962,
		62327: 57963,
		62328: 57964,
		62329: 57965,
		62330: 57966,
		62331: 57967,
		62332: 57968,
		62333: 57969,
		62334: 57970,
		62336: 57971,
		62337: 57972,
		62338: 57973,
		62339: 57974,
		62340: 57975,
		62341: 57976,
		62342: 57977,
		62343: 57978,
		62344: 57979,
		62345: 57980,
		62346: 57981,
		62347: 57982,
		62348: 57983,
		62349: 57984,
		62350: 57985,
		62351: 57986,
		62352: 57987,
		62353: 57988,
		62354: 57989,
		62355: 57990,
		62356: 57991,
		62357: 57992,
		62358: 57993,
		62359: 57994,
		62360: 57995,
		62361: 57996,
		62362: 57997,
		62363: 57998,
		62364: 57999,
		62365: 58000,
		62366: 58001,
		62367: 58002,
		62368: 58003,
		62369: 58004,
		62370: 58005,
		62371: 58006,
		62372: 58007,
		62373: 58008,
		62374: 58009,
		62375: 58010,
		62376: 58011,
		62377: 58012,
		62378: 58013,
		62379: 58014,
		62380: 58015,
		62381: 58016,
		62382: 58017,
		62383: 58018,
		62384: 58019,
		62385: 58020,
		62386: 58021,
		62387: 58022,
		62388: 58023,
		62389: 58024,
		62390: 58025,
		62391: 58026,
		62392: 58027,
		62393: 58028,
		62394: 58029,
		62395: 58030,
		62396: 58031,
		62397: 58032,
		62398: 58033,
		62399: 58034,
		62400: 58035,
		62401: 58036,
		62402: 58037,
		62403: 58038,
		62404: 58039,
		62405: 58040,
		62406: 58041,
		62407: 58042,
		62408: 58043,
		62409: 58044,
		62410: 58045,
		62411: 58046,
		62412: 58047,
		62413: 58048,
		62414: 58049,
		62415: 58050,
		62416: 58051,
		62417: 58052,
		62418: 58053,
		62419: 58054,
		62420: 58055,
		62421: 58056,
		62422: 58057,
		62423: 58058,
		62424: 58059,
		62425: 58060,
		62426: 58061,
		62427: 58062,
		62428: 58063,
		62429: 58064,
		62430: 58065,
		62431: 58066,
		62432: 58067,
		62433: 58068,
		62434: 58069,
		62435: 58070,
		62436: 58071,
		62437: 58072,
		62438: 58073,
		62439: 58074,
		62440: 58075,
		62441: 58076,
		62442: 58077,
		62443: 58078,
		62444: 58079,
		62445: 58080,
		62446: 58081,
		62447: 58082,
		62448: 58083,
		62449: 58084,
		62450: 58085,
		62451: 58086,
		62452: 58087,
		62453: 58088,
		62454: 58089,
		62455: 58090,
		62456: 58091,
		62457: 58092,
		62458: 58093,
		62459: 58094,
		62460: 58095,
		62528: 58096,
		62529: 58097,
		62530: 58098,
		62531: 58099,
		62532: 58100,
		62533: 58101,
		62534: 58102,
		62535: 58103,
		62536: 58104,
		62537: 58105,
		62538: 58106,
		62539: 58107,
		62540: 58108,
		62541: 58109,
		62542: 58110,
		62543: 58111,
		62544: 58112,
		62545: 58113,
		62546: 58114,
		62547: 58115,
		62548: 58116,
		62549: 58117,
		62550: 58118,
		62551: 58119,
		62552: 58120,
		62553: 58121,
		62554: 58122,
		62555: 58123,
		62556: 58124,
		62557: 58125,
		62558: 58126,
		62559: 58127,
		62560: 58128,
		62561: 58129,
		62562: 58130,
		62563: 58131,
		62564: 58132,
		62565: 58133,
		62566: 58134,
		62567: 58135,
		62568: 58136,
		62569: 58137,
		62570: 58138,
		62571: 58139,
		62572: 58140,
		62573: 58141,
		62574: 58142,
		62575: 58143,
		62576: 58144,
		62577: 58145,
		62578: 58146,
		62579: 58147,
		62580: 58148,
		62581: 58149,
		62582: 58150,
		62583: 58151,
		62584: 58152,
		62585: 58153,
		62586: 58154,
		62587: 58155,
		62588: 58156,
		62589: 58157,
		62590: 58158,
		62592: 58159,
		62593: 58160,
		62594: 58161,
		62595: 58162,
		62596: 58163,
		62597: 58164,
		62598: 58165,
		62599: 58166,
		62600: 58167,
		62601: 58168,
		62602: 58169,
		62603: 58170,
		62604: 58171,
		62605: 58172,
		62606: 58173,
		62607: 58174,
		62608: 58175,
		62609: 58176,
		62610: 58177,
		62611: 58178,
		62612: 58179,
		62613: 58180,
		62614: 58181,
		62615: 58182,
		62616: 58183,
		62617: 58184,
		62618: 58185,
		62619: 58186,
		62620: 58187,
		62621: 58188,
		62622: 58189,
		62623: 58190,
		62624: 58191,
		62625: 58192,
		62626: 58193,
		62627: 58194,
		62628: 58195,
		62629: 58196,
		62630: 58197,
		62631: 58198,
		62632: 58199,
		62633: 58200,
		62634: 58201,
		62635: 58202,
		62636: 58203,
		62637: 58204,
		62638: 58205,
		62639: 58206,
		62640: 58207,
		62641: 58208,
		62642: 58209,
		62643: 58210,
		62644: 58211,
		62645: 58212,
		62646: 58213,
		62647: 58214,
		62648: 58215,
		62649: 58216,
		62650: 58217,
		62651: 58218,
		62652: 58219,
		62653: 58220,
		62654: 58221,
		62655: 58222,
		62656: 58223,
		62657: 58224,
		62658: 58225,
		62659: 58226,
		62660: 58227,
		62661: 58228,
		62662: 58229,
		62663: 58230,
		62664: 58231,
		62665: 58232,
		62666: 58233,
		62667: 58234,
		62668: 58235,
		62669: 58236,
		62670: 58237,
		62671: 58238,
		62672: 58239,
		62673: 58240,
		62674: 58241,
		62675: 58242,
		62676: 58243,
		62677: 58244,
		62678: 58245,
		62679: 58246,
		62680: 58247,
		62681: 58248,
		62682: 58249,
		62683: 58250,
		62684: 58251,
		62685: 58252,
		62686: 58253,
		62687: 58254,
		62688: 58255,
		62689: 58256,
		62690: 58257,
		62691: 58258,
		62692: 58259,
		62693: 58260,
		62694: 58261,
		62695: 58262,
		62696: 58263,
		62697: 58264,
		62698: 58265,
		62699: 58266,
		62700: 58267,
		62701: 58268,
		62702: 58269,
		62703: 58270,
		62704: 58271,
		62705: 58272,
		62706: 58273,
		62707: 58274,
		62708: 58275,
		62709: 58276,
		62710: 58277,
		62711: 58278,
		62712: 58279,
		62713: 58280,
		62714: 58281,
		62715: 58282,
		62716: 58283,
		62784: 58284,
		62785: 58285,
		62786: 58286,
		62787: 58287,
		62788: 58288,
		62789: 58289,
		62790: 58290,
		62791: 58291,
		62792: 58292,
		62793: 58293,
		62794: 58294,
		62795: 58295,
		62796: 58296,
		62797: 58297,
		62798: 58298,
		62799: 58299,
		62800: 58300,
		62801: 58301,
		62802: 58302,
		62803: 58303,
		62804: 58304,
		62805: 58305,
		62806: 58306,
		62807: 58307,
		62808: 58308,
		62809: 58309,
		62810: 58310,
		62811: 58311,
		62812: 58312,
		62813: 58313,
		62814: 58314,
		62815: 58315,
		62816: 58316,
		62817: 58317,
		62818: 58318,
		62819: 58319,
		62820: 58320,
		62821: 58321,
		62822: 58322,
		62823: 58323,
		62824: 58324,
		62825: 58325,
		62826: 58326,
		62827: 58327,
		62828: 58328,
		62829: 58329,
		62830: 58330,
		62831: 58331,
		62832: 58332,
		62833: 58333,
		62834: 58334,
		62835: 58335,
		62836: 58336,
		62837: 58337,
		62838: 58338,
		62839: 58339,
		62840: 58340,
		62841: 58341,
		62842: 58342,
		62843: 58343,
		62844: 58344,
		62845: 58345,
		62846: 58346,
		62848: 58347,
		62849: 58348,
		62850: 58349,
		62851: 58350,
		62852: 58351,
		62853: 58352,
		62854: 58353,
		62855: 58354,
		62856: 58355,
		62857: 58356,
		62858: 58357,
		62859: 58358,
		62860: 58359,
		62861: 58360,
		62862: 58361,
		62863: 58362,
		62864: 58363,
		62865: 58364,
		62866: 58365,
		62867: 58366,
		62868: 58367,
		62869: 58368,
		62870: 58369,
		62871: 58370,
		62872: 58371,
		62873: 58372,
		62874: 58373,
		62875: 58374,
		62876: 58375,
		62877: 58376,
		62878: 58377,
		62879: 58378,
		62880: 58379,
		62881: 58380,
		62882: 58381,
		62883: 58382,
		62884: 58383,
		62885: 58384,
		62886: 58385,
		62887: 58386,
		62888: 58387,
		62889: 58388,
		62890: 58389,
		62891: 58390,
		62892: 58391,
		62893: 58392,
		62894: 58393,
		62895: 58394,
		62896: 58395,
		62897: 58396,
		62898: 58397,
		62899: 58398,
		62900: 58399,
		62901: 58400,
		62902: 58401,
		62903: 58402,
		62904: 58403,
		62905: 58404,
		62906: 58405,
		62907: 58406,
		62908: 58407,
		62909: 58408,
		62910: 58409,
		62911: 58410,
		62912: 58411,
		62913: 58412,
		62914: 58413,
		62915: 58414,
		62916: 58415,
		62917: 58416,
		62918: 58417,
		62919: 58418,
		62920: 58419,
		62921: 58420,
		62922: 58421,
		62923: 58422,
		62924: 58423,
		62925: 58424,
		62926: 58425,
		62927: 58426,
		62928: 58427,
		62929: 58428,
		62930: 58429,
		62931: 58430,
		62932: 58431,
		62933: 58432,
		62934: 58433,
		62935: 58434,
		62936: 58435,
		62937: 58436,
		62938: 58437,
		62939: 58438,
		62940: 58439,
		62941: 58440,
		62942: 58441,
		62943: 58442,
		62944: 58443,
		62945: 58444,
		62946: 58445,
		62947: 58446,
		62948: 58447,
		62949: 58448,
		62950: 58449,
		62951: 58450,
		62952: 58451,
		62953: 58452,
		62954: 58453,
		62955: 58454,
		62956: 58455,
		62957: 58456,
		62958: 58457,
		62959: 58458,
		62960: 58459,
		62961: 58460,
		62962: 58461,
		62963: 58462,
		62964: 58463,
		62965: 58464,
		62966: 58465,
		62967: 58466,
		62968: 58467,
		62969: 58468,
		62970: 58469,
		62971: 58470,
		62972: 58471,
		63040: 58472,
		63041: 58473,
		63042: 58474,
		63043: 58475,
		63044: 58476,
		63045: 58477,
		63046: 58478,
		63047: 58479,
		63048: 58480,
		63049: 58481,
		63050: 58482,
		63051: 58483,
		63052: 58484,
		63053: 58485,
		63054: 58486,
		63055: 58487,
		63056: 58488,
		63057: 58489,
		63058: 58490,
		63059: 58491,
		63060: 58492,
		63061: 58493,
		63062: 58494,
		63063: 58495,
		63064: 58496,
		63065: 58497,
		63066: 58498,
		63067: 58499,
		63068: 58500,
		63069: 58501,
		63070: 58502,
		63071: 58503,
		63072: 58504,
		63073: 58505,
		63074: 58506,
		63075: 58507,
		63076: 58508,
		63077: 58509,
		63078: 58510,
		63079: 58511,
		63080: 58512,
		63081: 58513,
		63082: 58514,
		63083: 58515,
		63084: 58516,
		63085: 58517,
		63086: 58518,
		63087: 58519,
		63088: 58520,
		63089: 58521,
		63090: 58522,
		63091: 58523,
		63092: 58524,
		63093: 58525,
		63094: 58526,
		63095: 58527,
		63096: 58528,
		63097: 58529,
		63098: 58530,
		63099: 58531,
		63100: 58532,
		63101: 58533,
		63102: 58534,
		63104: 58535,
		63105: 58536,
		63106: 58537,
		63107: 58538,
		63108: 58539,
		63109: 58540,
		63110: 58541,
		63111: 58542,
		63112: 58543,
		63113: 58544,
		63114: 58545,
		63115: 58546,
		63116: 58547,
		63117: 58548,
		63118: 58549,
		63119: 58550,
		63120: 58551,
		63121: 58552,
		63122: 58553,
		63123: 58554,
		63124: 58555,
		63125: 58556,
		63126: 58557,
		63127: 58558,
		63128: 58559,
		63129: 58560,
		63130: 58561,
		63131: 58562,
		63132: 58563,
		63133: 58564,
		63134: 58565,
		63135: 58566,
		63136: 58567,
		63137: 58568,
		63138: 58569,
		63139: 58570,
		63140: 58571,
		63141: 58572,
		63142: 58573,
		63143: 58574,
		63144: 58575,
		63145: 58576,
		63146: 58577,
		63147: 58578,
		63148: 58579,
		63149: 58580,
		63150: 58581,
		63151: 58582,
		63152: 58583,
		63153: 58584,
		63154: 58585,
		63155: 58586,
		63156: 58587,
		63157: 58588,
		63158: 58589,
		63159: 58590,
		63160: 58591,
		63161: 58592,
		63162: 58593,
		63163: 58594,
		63164: 58595,
		63165: 58596,
		63166: 58597,
		63167: 58598,
		63168: 58599,
		63169: 58600,
		63170: 58601,
		63171: 58602,
		63172: 58603,
		63173: 58604,
		63174: 58605,
		63175: 58606,
		63176: 58607,
		63177: 58608,
		63178: 58609,
		63179: 58610,
		63180: 58611,
		63181: 58612,
		63182: 58613,
		63183: 58614,
		63184: 58615,
		63185: 58616,
		63186: 58617,
		63187: 58618,
		63188: 58619,
		63189: 58620,
		63190: 58621,
		63191: 58622,
		63192: 58623,
		63193: 58624,
		63194: 58625,
		63195: 58626,
		63196: 58627,
		63197: 58628,
		63198: 58629,
		63199: 58630,
		63200: 58631,
		63201: 58632,
		63202: 58633,
		63203: 58634,
		63204: 58635,
		63205: 58636,
		63206: 58637,
		63207: 58638,
		63208: 58639,
		63209: 58640,
		63210: 58641,
		63211: 58642,
		63212: 58643,
		63213: 58644,
		63214: 58645,
		63215: 58646,
		63216: 58647,
		63217: 58648,
		63218: 58649,
		63219: 58650,
		63220: 58651,
		63221: 58652,
		63222: 58653,
		63223: 58654,
		63224: 58655,
		63225: 58656,
		63226: 58657,
		63227: 58658,
		63228: 58659,
		63296: 58660,
		63297: 58661,
		63298: 58662,
		63299: 58663,
		63300: 58664,
		63301: 58665,
		63302: 58666,
		63303: 58667,
		63304: 58668,
		63305: 58669,
		63306: 58670,
		63307: 58671,
		63308: 58672,
		63309: 58673,
		63310: 58674,
		63311: 58675,
		63312: 58676,
		63313: 58677,
		63314: 58678,
		63315: 58679,
		63316: 58680,
		63317: 58681,
		63318: 58682,
		63319: 58683,
		63320: 58684,
		63321: 58685,
		63322: 58686,
		63323: 58687,
		63324: 58688,
		63325: 58689,
		63326: 58690,
		63327: 58691,
		63328: 58692,
		63329: 58693,
		63330: 58694,
		63331: 58695,
		63332: 58696,
		63333: 58697,
		63334: 58698,
		63335: 58699,
		63336: 58700,
		63337: 58701,
		63338: 58702,
		63339: 58703,
		63340: 58704,
		63341: 58705,
		63342: 58706,
		63343: 58707,
		63344: 58708,
		63345: 58709,
		63346: 58710,
		63347: 58711,
		63348: 58712,
		63349: 58713,
		63350: 58714,
		63351: 58715,
		63352: 58716,
		63353: 58717,
		63354: 58718,
		63355: 58719,
		63356: 58720,
		63357: 58721,
		63358: 58722,
		63360: 58723,
		63361: 58724,
		63362: 58725,
		63363: 58726,
		63364: 58727,
		63365: 58728,
		63366: 58729,
		63367: 58730,
		63368: 58731,
		63369: 58732,
		63370: 58733,
		63371: 58734,
		63372: 58735,
		63373: 58736,
		63374: 58737,
		63375: 58738,
		63376: 58739,
		63377: 58740,
		63378: 58741,
		63379: 58742,
		63380: 58743,
		63381: 58744,
		63382: 58745,
		63383: 58746,
		63384: 58747,
		63385: 58748,
		63386: 58749,
		63387: 58750,
		63388: 58751,
		63389: 58752,
		63390: 58753,
		63391: 58754,
		63392: 58755,
		63393: 58756,
		63394: 58757,
		63395: 58758,
		63396: 58759,
		63397: 58760,
		63398: 58761,
		63399: 58762,
		63400: 58763,
		63401: 58764,
		63402: 58765,
		63403: 58766,
		63404: 58767,
		63405: 58768,
		63406: 58769,
		63407: 58770,
		63408: 58771,
		63409: 58772,
		63410: 58773,
		63411: 58774,
		63412: 58775,
		63413: 58776,
		63414: 58777,
		63415: 58778,
		63416: 58779,
		63417: 58780,
		63418: 58781,
		63419: 58782,
		63420: 58783,
		63421: 58784,
		63422: 58785,
		63423: 58786,
		63424: 58787,
		63425: 58788,
		63426: 58789,
		63427: 58790,
		63428: 58791,
		63429: 58792,
		63430: 58793,
		63431: 58794,
		63432: 58795,
		63433: 58796,
		63434: 58797,
		63435: 58798,
		63436: 58799,
		63437: 58800,
		63438: 58801,
		63439: 58802,
		63440: 58803,
		63441: 58804,
		63442: 58805,
		63443: 58806,
		63444: 58807,
		63445: 58808,
		63446: 58809,
		63447: 58810,
		63448: 58811,
		63449: 58812,
		63450: 58813,
		63451: 58814,
		63452: 58815,
		63453: 58816,
		63454: 58817,
		63455: 58818,
		63456: 58819,
		63457: 58820,
		63458: 58821,
		63459: 58822,
		63460: 58823,
		63461: 58824,
		63462: 58825,
		63463: 58826,
		63464: 58827,
		63465: 58828,
		63466: 58829,
		63467: 58830,
		63468: 58831,
		63469: 58832,
		63470: 58833,
		63471: 58834,
		63472: 58835,
		63473: 58836,
		63474: 58837,
		63475: 58838,
		63476: 58839,
		63477: 58840,
		63478: 58841,
		63479: 58842,
		63480: 58843,
		63481: 58844,
		63482: 58845,
		63483: 58846,
		63484: 58847,
		63552: 58848,
		63553: 58849,
		63554: 58850,
		63555: 58851,
		63556: 58852,
		63557: 58853,
		63558: 58854,
		63559: 58855,
		63560: 58856,
		63561: 58857,
		63562: 58858,
		63563: 58859,
		63564: 58860,
		63565: 58861,
		63566: 58862,
		63567: 58863,
		63568: 58864,
		63569: 58865,
		63570: 58866,
		63571: 58867,
		63572: 58868,
		63573: 58869,
		63574: 58870,
		63575: 58871,
		63576: 58872,
		63577: 58873,
		63578: 58874,
		63579: 58875,
		63580: 58876,
		63581: 58877,
		63582: 58878,
		63583: 58879,
		63584: 58880,
		63585: 58881,
		63586: 58882,
		63587: 58883,
		63588: 58884,
		63589: 58885,
		63590: 58886,
		63591: 58887,
		63592: 58888,
		63593: 58889,
		63594: 58890,
		63595: 58891,
		63596: 58892,
		63597: 58893,
		63598: 58894,
		63599: 58895,
		63600: 58896,
		63601: 58897,
		63602: 58898,
		63603: 58899,
		63604: 58900,
		63605: 58901,
		63606: 58902,
		63607: 58903,
		63608: 58904,
		63609: 58905,
		63610: 58906,
		63611: 58907,
		63612: 58908,
		63613: 58909,
		63614: 58910,
		63616: 58911,
		63617: 58912,
		63618: 58913,
		63619: 58914,
		63620: 58915,
		63621: 58916,
		63622: 58917,
		63623: 58918,
		63624: 58919,
		63625: 58920,
		63626: 58921,
		63627: 58922,
		63628: 58923,
		63629: 58924,
		63630: 58925,
		63631: 58926,
		63632: 58927,
		63633: 58928,
		63634: 58929,
		63635: 58930,
		63636: 58931,
		63637: 58932,
		63638: 58933,
		63639: 58934,
		63640: 58935,
		63641: 58936,
		63642: 58937,
		63643: 58938,
		63644: 58939,
		63645: 58940,
		63646: 58941,
		63647: 58942,
		63648: 58943,
		63649: 58944,
		63650: 58945,
		63651: 58946,
		63652: 58947,
		63653: 58948,
		63654: 58949,
		63655: 58950,
		63656: 58951,
		63657: 58952,
		63658: 58953,
		63659: 58954,
		63660: 58955,
		63661: 58956,
		63662: 58957,
		63663: 58958,
		63664: 58959,
		63665: 58960,
		63666: 58961,
		63667: 58962,
		63668: 58963,
		63669: 58964,
		63670: 58965,
		63671: 58966,
		63672: 58967,
		63673: 58968,
		63674: 58969,
		63675: 58970,
		63676: 58971,
		63677: 58972,
		63678: 58973,
		63679: 58974,
		63680: 58975,
		63681: 58976,
		63682: 58977,
		63683: 58978,
		63684: 58979,
		63685: 58980,
		63686: 58981,
		63687: 58982,
		63688: 58983,
		63689: 58984,
		63690: 58985,
		63691: 58986,
		63692: 58987,
		63693: 58988,
		63694: 58989,
		63695: 58990,
		63696: 58991,
		63697: 58992,
		63698: 58993,
		63699: 58994,
		63700: 58995,
		63701: 58996,
		63702: 58997,
		63703: 58998,
		63704: 58999,
		63705: 59000,
		63706: 59001,
		63707: 59002,
		63708: 59003,
		63709: 59004,
		63710: 59005,
		63711: 59006,
		63712: 59007,
		63713: 59008,
		63714: 59009,
		63715: 59010,
		63716: 59011,
		63717: 59012,
		63718: 59013,
		63719: 59014,
		63720: 59015,
		63721: 59016,
		63722: 59017,
		63723: 59018,
		63724: 59019,
		63725: 59020,
		63726: 59021,
		63727: 59022,
		63728: 59023,
		63729: 59024,
		63730: 59025,
		63731: 59026,
		63732: 59027,
		63733: 59028,
		63734: 59029,
		63735: 59030,
		63736: 59031,
		63737: 59032,
		63738: 59033,
		63739: 59034,
		63740: 59035,
		64064: 8560,
		64065: 8561,
		64066: 8562,
		64067: 8563,
		64068: 8564,
		64069: 8565,
		64070: 8566,
		64071: 8567,
		64072: 8568,
		64073: 8569,
		64074: 8544,
		64075: 8545,
		64076: 8546,
		64077: 8547,
		64078: 8548,
		64079: 8549,
		64080: 8550,
		64081: 8551,
		64082: 8552,
		64083: 8553,
		64084: 65506,
		64085: 65508,
		64086: 65287,
		64087: 65282,
		64088: 12849,
		64089: 8470,
		64090: 8481,
		64091: 8757,
		64092: 32394,
		64093: 35100,
		64094: 37704,
		64095: 37512,
		64096: 34012,
		64097: 20425,
		64098: 28859,
		64099: 26161,
		64100: 26824,
		64101: 37625,
		64102: 26363,
		64103: 24389,
		64104: 20008,
		64105: 20193,
		64106: 20220,
		64107: 20224,
		64108: 20227,
		64109: 20281,
		64110: 20310,
		64111: 20370,
		64112: 20362,
		64113: 20378,
		64114: 20372,
		64115: 20429,
		64116: 20544,
		64117: 20514,
		64118: 20479,
		64119: 20510,
		64120: 20550,
		64121: 20592,
		64122: 20546,
		64123: 20628,
		64124: 20724,
		64125: 20696,
		64126: 20810,
		64128: 20836,
		64129: 20893,
		64130: 20926,
		64131: 20972,
		64132: 21013,
		64133: 21148,
		64134: 21158,
		64135: 21184,
		64136: 21211,
		64137: 21248,
		64138: 21255,
		64139: 21284,
		64140: 21362,
		64141: 21395,
		64142: 21426,
		64143: 21469,
		64144: 64014,
		64145: 21660,
		64146: 21642,
		64147: 21673,
		64148: 21759,
		64149: 21894,
		64150: 22361,
		64151: 22373,
		64152: 22444,
		64153: 22472,
		64154: 22471,
		64155: 64015,
		64156: 64016,
		64157: 22686,
		64158: 22706,
		64159: 22795,
		64160: 22867,
		64161: 22875,
		64162: 22877,
		64163: 22883,
		64164: 22948,
		64165: 22970,
		64166: 23382,
		64167: 23488,
		64168: 29999,
		64169: 23512,
		64170: 23532,
		64171: 23582,
		64172: 23718,
		64173: 23738,
		64174: 23797,
		64175: 23847,
		64176: 23891,
		64177: 64017,
		64178: 23874,
		64179: 23917,
		64180: 23992,
		64181: 23993,
		64182: 24016,
		64183: 24353,
		64184: 24372,
		64185: 24423,
		64186: 24503,
		64187: 24542,
		64188: 24669,
		64189: 24709,
		64190: 24714,
		64191: 24798,
		64192: 24789,
		64193: 24864,
		64194: 24818,
		64195: 24849,
		64196: 24887,
		64197: 24880,
		64198: 24984,
		64199: 25107,
		64200: 25254,
		64201: 25589,
		64202: 25696,
		64203: 25757,
		64204: 25806,
		64205: 25934,
		64206: 26112,
		64207: 26133,
		64208: 26171,
		64209: 26121,
		64210: 26158,
		64211: 26142,
		64212: 26148,
		64213: 26213,
		64214: 26199,
		64215: 26201,
		64216: 64018,
		64217: 26227,
		64218: 26265,
		64219: 26272,
		64220: 26290,
		64221: 26303,
		64222: 26362,
		64223: 26382,
		64224: 63785,
		64225: 26470,
		64226: 26555,
		64227: 26706,
		64228: 26560,
		64229: 26625,
		64230: 26692,
		64231: 26831,
		64232: 64019,
		64233: 26984,
		64234: 64020,
		64235: 27032,
		64236: 27106,
		64237: 27184,
		64238: 27243,
		64239: 27206,
		64240: 27251,
		64241: 27262,
		64242: 27362,
		64243: 27364,
		64244: 27606,
		64245: 27711,
		64246: 27740,
		64247: 27782,
		64248: 27759,
		64249: 27866,
		64250: 27908,
		64251: 28039,
		64252: 28015,
		64320: 28054,
		64321: 28076,
		64322: 28111,
		64323: 28152,
		64324: 28146,
		64325: 28156,
		64326: 28217,
		64327: 28252,
		64328: 28199,
		64329: 28220,
		64330: 28351,
		64331: 28552,
		64332: 28597,
		64333: 28661,
		64334: 28677,
		64335: 28679,
		64336: 28712,
		64337: 28805,
		64338: 28843,
		64339: 28943,
		64340: 28932,
		64341: 29020,
		64342: 28998,
		64343: 28999,
		64344: 64021,
		64345: 29121,
		64346: 29182,
		64347: 29361,
		64348: 29374,
		64349: 29476,
		64350: 64022,
		64351: 29559,
		64352: 29629,
		64353: 29641,
		64354: 29654,
		64355: 29667,
		64356: 29650,
		64357: 29703,
		64358: 29685,
		64359: 29734,
		64360: 29738,
		64361: 29737,
		64362: 29742,
		64363: 29794,
		64364: 29833,
		64365: 29855,
		64366: 29953,
		64367: 30063,
		64368: 30338,
		64369: 30364,
		64370: 30366,
		64371: 30363,
		64372: 30374,
		64373: 64023,
		64374: 30534,
		64375: 21167,
		64376: 30753,
		64377: 30798,
		64378: 30820,
		64379: 30842,
		64380: 31024,
		64381: 64024,
		64382: 64025,
		64384: 64026,
		64385: 31124,
		64386: 64027,
		64387: 31131,
		64388: 31441,
		64389: 31463,
		64390: 64028,
		64391: 31467,
		64392: 31646,
		64393: 64029,
		64394: 32072,
		64395: 32092,
		64396: 32183,
		64397: 32160,
		64398: 32214,
		64399: 32338,
		64400: 32583,
		64401: 32673,
		64402: 64030,
		64403: 33537,
		64404: 33634,
		64405: 33663,
		64406: 33735,
		64407: 33782,
		64408: 33864,
		64409: 33972,
		64410: 34131,
		64411: 34137,
		64412: 34155,
		64413: 64031,
		64414: 34224,
		64415: 64032,
		64416: 64033,
		64417: 34823,
		64418: 35061,
		64419: 35346,
		64420: 35383,
		64421: 35449,
		64422: 35495,
		64423: 35518,
		64424: 35551,
		64425: 64034,
		64426: 35574,
		64427: 35667,
		64428: 35711,
		64429: 36080,
		64430: 36084,
		64431: 36114,
		64432: 36214,
		64433: 64035,
		64434: 36559,
		64435: 64036,
		64436: 64037,
		64437: 36967,
		64438: 37086,
		64439: 64038,
		64440: 37141,
		64441: 37159,
		64442: 37338,
		64443: 37335,
		64444: 37342,
		64445: 37357,
		64446: 37358,
		64447: 37348,
		64448: 37349,
		64449: 37382,
		64450: 37392,
		64451: 37386,
		64452: 37434,
		64453: 37440,
		64454: 37436,
		64455: 37454,
		64456: 37465,
		64457: 37457,
		64458: 37433,
		64459: 37479,
		64460: 37543,
		64461: 37495,
		64462: 37496,
		64463: 37607,
		64464: 37591,
		64465: 37593,
		64466: 37584,
		64467: 64039,
		64468: 37589,
		64469: 37600,
		64470: 37587,
		64471: 37669,
		64472: 37665,
		64473: 37627,
		64474: 64040,
		64475: 37662,
		64476: 37631,
		64477: 37661,
		64478: 37634,
		64479: 37744,
		64480: 37719,
		64481: 37796,
		64482: 37830,
		64483: 37854,
		64484: 37880,
		64485: 37937,
		64486: 37957,
		64487: 37960,
		64488: 38290,
		64489: 63964,
		64490: 64041,
		64491: 38557,
		64492: 38575,
		64493: 38707,
		64494: 38715,
		64495: 38723,
		64496: 38733,
		64497: 38735,
		64498: 38737,
		64499: 38741,
		64500: 38999,
		64501: 39013,
		64502: 64042,
		64503: 64043,
		64504: 39207,
		64505: 64044,
		64506: 39326,
		64507: 39502,
		64508: 39641,
		64576: 39644,
		64577: 39797,
		64578: 39794,
		64579: 39823,
		64580: 39857,
		64581: 39867,
		64582: 39936,
		64583: 40304,
		64584: 40299,
		64585: 64045,
		64586: 40473,
		64587: 40657
	};

	/**
	 * @author takahiro / https://github.com/takahirox
	 */

	function DataViewEx( buffer, littleEndian ) {

		this.dv = new DataView( buffer );
		this.offset = 0;
		this.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;
		this.encoder = new CharsetEncoder();

	}

	DataViewEx.prototype = {

		constructor: DataViewEx,

		getInt8: function () {

			var value = this.dv.getInt8( this.offset );
			this.offset += 1;
			return value;

		},

		getInt8Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getInt8() );

			}

			return a;

		},

		getUint8: function () {

			var value = this.dv.getUint8( this.offset );
			this.offset += 1;
			return value;

		},

		getUint8Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getUint8() );

			}

			return a;

		},


		getInt16: function () {

			var value = this.dv.getInt16( this.offset, this.littleEndian );
			this.offset += 2;
			return value;

		},

		getInt16Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getInt16() );

			}

			return a;

		},

		getUint16: function () {

			var value = this.dv.getUint16( this.offset, this.littleEndian );
			this.offset += 2;
			return value;

		},

		getUint16Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getUint16() );

			}

			return a;

		},

		getInt32: function () {

			var value = this.dv.getInt32( this.offset, this.littleEndian );
			this.offset += 4;
			return value;

		},

		getInt32Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getInt32() );

			}

			return a;

		},

		getUint32: function () {

			var value = this.dv.getUint32( this.offset, this.littleEndian );
			this.offset += 4;
			return value;

		},

		getUint32Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getUint32() );

			}

			return a;

		},

		getFloat32: function () {

			var value = this.dv.getFloat32( this.offset, this.littleEndian );
			this.offset += 4;
			return value;

		},

		getFloat32Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getFloat32() );

			}

			return a;

		},

		getFloat64: function () {

			var value = this.dv.getFloat64( this.offset, this.littleEndian );
			this.offset += 8;
			return value;

		},

		getFloat64Array: function ( size ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getFloat64() );

			}

			return a;

		},

		getIndex: function ( type, isUnsigned ) {

			switch ( type ) {

				case 1:
					return ( isUnsigned === true ) ? this.getUint8() : this.getInt8();

				case 2:
					return ( isUnsigned === true ) ? this.getUint16() : this.getInt16();

				case 4:
					return this.getInt32(); // No Uint32

				default:
					throw 'unknown number type ' + type + ' exception.';

			}

		},

		getIndexArray: function ( type, size, isUnsigned ) {

			var a = [];

			for ( var i = 0; i < size; i ++ ) {

				a.push( this.getIndex( type, isUnsigned ) );

			}

			return a;

		},

		getChars: function ( size ) {

			var str = '';

			while ( size > 0 ) {

				var value = this.getUint8();
				size --;

				if ( value === 0 ) {

					break;

				}

				str += String.fromCharCode( value );

			}

			while ( size > 0 ) {

				this.getUint8();
				size --;

			}

			return str;

		},

		getSjisStringsAsUnicode: function ( size ) {

			var a = [];

			while ( size > 0 ) {

				var value = this.getUint8();
				size --;

				if ( value === 0 ) {

					break;

				}

				a.push( value );

			}

			while ( size > 0 ) {

				this.getUint8();
				size --;

			}

			return this.encoder.s2u( new Uint8Array( a ) );

		},

		getUnicodeStrings: function ( size ) {

			var str = '';

			while ( size > 0 ) {

				var value = this.getUint16();
				size -= 2;

				if ( value === 0 ) {

					break;

				}

				str += String.fromCharCode( value );

			}

			while ( size > 0 ) {

				this.getUint8();
				size --;

			}

			return str;

		},

		getTextBuffer: function () {

			var size = this.getUint32();
			return this.getUnicodeStrings( size );

		}

	};

	/**
	 * @author takahiro / https://github.com/takahirox
	 */

	function DataCreationHelper() {
	}

	DataCreationHelper.prototype = {

		constructor: DataCreationHelper,

		leftToRightVector3: function ( v ) {

			v[ 2 ] = - v[ 2 ];

		},

		leftToRightQuaternion: function ( q ) {

			q[ 0 ] = - q[ 0 ];
			q[ 1 ] = - q[ 1 ];

		},

		leftToRightEuler: function ( r ) {

			r[ 0 ] = - r[ 0 ];
			r[ 1 ] = - r[ 1 ];

		},

		leftToRightIndexOrder: function ( p ) {

			var tmp = p[ 2 ];
			p[ 2 ] = p[ 0 ];
			p[ 0 ] = tmp;

		},

		leftToRightVector3Range: function ( v1, v2 ) {

			var tmp = - v2[ 2 ];
			v2[ 2 ] = - v1[ 2 ];
			v1[ 2 ] = tmp;

		},

		leftToRightEulerRange: function ( r1, r2 ) {

			var tmp1 = - r2[ 0 ];
			var tmp2 = - r2[ 1 ];
			r2[ 0 ] = - r1[ 0 ];
			r2[ 1 ] = - r1[ 1 ];
			r1[ 0 ] = tmp1;
			r1[ 1 ] = tmp2;

		}

	};

	/**
	 * @author takahiro / https://github.com/takahirox
	 */

	function Parser() {
	}

	Parser.prototype.parsePmd = function ( buffer, leftToRight ) {

		var pmd = {};
		var dv = new DataViewEx( buffer );

		pmd.metadata = {};
		pmd.metadata.format = 'pmd';
		pmd.metadata.coordinateSystem = 'left';

		var parseHeader = function () {

			var metadata = pmd.metadata;
			metadata.magic = dv.getChars( 3 );

			if ( metadata.magic !== 'Pmd' ) {

				throw 'PMD file magic is not Pmd, but ' + metadata.magic;

			}

			metadata.version = dv.getFloat32();
			metadata.modelName = dv.getSjisStringsAsUnicode( 20 );
			metadata.comment = dv.getSjisStringsAsUnicode( 256 );

		};

		var parseVertices = function () {

			var parseVertex = function () {

				var p = {};
				p.position = dv.getFloat32Array( 3 );
				p.normal = dv.getFloat32Array( 3 );
				p.uv = dv.getFloat32Array( 2 );
				p.skinIndices = dv.getUint16Array( 2 );
				p.skinWeights = [ dv.getUint8() / 100 ];
				p.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );
				p.edgeFlag = dv.getUint8();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.vertexCount = dv.getUint32();

			pmd.vertices = [];

			for ( var i = 0; i < metadata.vertexCount; i ++ ) {

				pmd.vertices.push( parseVertex() );

			}

		};

		var parseFaces = function () {

			var parseFace = function () {

				var p = {};
				p.indices = dv.getUint16Array( 3 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.faceCount = dv.getUint32() / 3;

			pmd.faces = [];

			for ( var i = 0; i < metadata.faceCount; i ++ ) {

				pmd.faces.push( parseFace() );

			}

		};

		var parseMaterials = function () {

			var parseMaterial = function () {

				var p = {};
				p.diffuse = dv.getFloat32Array( 4 );
				p.shininess = dv.getFloat32();
				p.specular = dv.getFloat32Array( 3 );
				p.ambient = dv.getFloat32Array( 3 );
				p.toonIndex = dv.getInt8();
				p.edgeFlag = dv.getUint8();
				p.faceCount = dv.getUint32() / 3;
				p.fileName = dv.getSjisStringsAsUnicode( 20 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.materialCount = dv.getUint32();

			pmd.materials = [];

			for ( var i = 0; i < metadata.materialCount; i ++ ) {

				pmd.materials.push( parseMaterial() );

			}

		};

		var parseBones = function () {

			var parseBone = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.parentIndex = dv.getInt16();
				p.tailIndex = dv.getInt16();
				p.type = dv.getUint8();
				p.ikIndex = dv.getInt16();
				p.position = dv.getFloat32Array( 3 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.boneCount = dv.getUint16();

			pmd.bones = [];

			for ( var i = 0; i < metadata.boneCount; i ++ ) {

				pmd.bones.push( parseBone() );

			}

		};

		var parseIks = function () {

			var parseIk = function () {

				var p = {};
				p.target = dv.getUint16();
				p.effector = dv.getUint16();
				p.linkCount = dv.getUint8();
				p.iteration = dv.getUint16();
				p.maxAngle = dv.getFloat32();

				p.links = [];
				for ( var i = 0; i < p.linkCount; i ++ ) {

					var link = {};
					link.index = dv.getUint16();
					p.links.push( link );

				}

				return p;

			};

			var metadata = pmd.metadata;
			metadata.ikCount = dv.getUint16();

			pmd.iks = [];

			for ( var i = 0; i < metadata.ikCount; i ++ ) {

				pmd.iks.push( parseIk() );

			}

		};

		var parseMorphs = function () {

			var parseMorph = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.elementCount = dv.getUint32();
				p.type = dv.getUint8();

				p.elements = [];
				for ( var i = 0; i < p.elementCount; i ++ ) {

					p.elements.push( {
						index: dv.getUint32(),
						position: dv.getFloat32Array( 3 )
					} );

				}

				return p;

			};

			var metadata = pmd.metadata;
			metadata.morphCount = dv.getUint16();

			pmd.morphs = [];

			for ( var i = 0; i < metadata.morphCount; i ++ ) {

				pmd.morphs.push( parseMorph() );

			}


		};

		var parseMorphFrames = function () {

			var parseMorphFrame = function () {

				var p = {};
				p.index = dv.getUint16();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.morphFrameCount = dv.getUint8();

			pmd.morphFrames = [];

			for ( var i = 0; i < metadata.morphFrameCount; i ++ ) {

				pmd.morphFrames.push( parseMorphFrame() );

			}

		};

		var parseBoneFrameNames = function () {

			var parseBoneFrameName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 50 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.boneFrameNameCount = dv.getUint8();

			pmd.boneFrameNames = [];

			for ( var i = 0; i < metadata.boneFrameNameCount; i ++ ) {

				pmd.boneFrameNames.push( parseBoneFrameName() );

			}

		};

		var parseBoneFrames = function () {

			var parseBoneFrame = function () {

				var p = {};
				p.boneIndex = dv.getInt16();
				p.frameIndex = dv.getUint8();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.boneFrameCount = dv.getUint32();

			pmd.boneFrames = [];

			for ( var i = 0; i < metadata.boneFrameCount; i ++ ) {

				pmd.boneFrames.push( parseBoneFrame() );

			}

		};

		var parseEnglishHeader = function () {

			var metadata = pmd.metadata;
			metadata.englishCompatibility = dv.getUint8();

			if ( metadata.englishCompatibility > 0 ) {

				metadata.englishModelName = dv.getSjisStringsAsUnicode( 20 );
				metadata.englishComment = dv.getSjisStringsAsUnicode( 256 );

			}

		};

		var parseEnglishBoneNames = function () {

			var parseEnglishBoneName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				return p;

			};

			var metadata = pmd.metadata;

			if ( metadata.englishCompatibility === 0 ) {

				return;

			}

			pmd.englishBoneNames = [];

			for ( var i = 0; i < metadata.boneCount; i ++ ) {

				pmd.englishBoneNames.push( parseEnglishBoneName() );

			}

		};

		var parseEnglishMorphNames = function () {

			var parseEnglishMorphName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				return p;

			};

			var metadata = pmd.metadata;

			if ( metadata.englishCompatibility === 0 ) {

				return;

			}

			pmd.englishMorphNames = [];

			for ( var i = 0; i < metadata.morphCount - 1; i ++ ) {

				pmd.englishMorphNames.push( parseEnglishMorphName() );

			}

		};

		var parseEnglishBoneFrameNames = function () {

			var parseEnglishBoneFrameName = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 50 );
				return p;

			};

			var metadata = pmd.metadata;

			if ( metadata.englishCompatibility === 0 ) {

				return;

			}

			pmd.englishBoneFrameNames = [];

			for ( var i = 0; i < metadata.boneFrameNameCount; i ++ ) {

				pmd.englishBoneFrameNames.push( parseEnglishBoneFrameName() );

			}

		};

		var parseToonTextures = function () {

			var parseToonTexture = function () {

				var p = {};
				p.fileName = dv.getSjisStringsAsUnicode( 100 );
				return p;

			};

			pmd.toonTextures = [];

			for ( var i = 0; i < 10; i ++ ) {

				pmd.toonTextures.push( parseToonTexture() );

			}

		};

		var parseRigidBodies = function () {

			var parseRigidBody = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.boneIndex = dv.getInt16();
				p.groupIndex = dv.getUint8();
				p.groupTarget = dv.getUint16();
				p.shapeType = dv.getUint8();
				p.width = dv.getFloat32();
				p.height = dv.getFloat32();
				p.depth = dv.getFloat32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.weight = dv.getFloat32();
				p.positionDamping = dv.getFloat32();
				p.rotationDamping = dv.getFloat32();
				p.restitution = dv.getFloat32();
				p.friction = dv.getFloat32();
				p.type = dv.getUint8();
				return p;

			};

			var metadata = pmd.metadata;
			metadata.rigidBodyCount = dv.getUint32();

			pmd.rigidBodies = [];

			for ( var i = 0; i < metadata.rigidBodyCount; i ++ ) {

				pmd.rigidBodies.push( parseRigidBody() );

			}

		};

		var parseConstraints = function () {

			var parseConstraint = function () {

				var p = {};
				p.name = dv.getSjisStringsAsUnicode( 20 );
				p.rigidBodyIndex1 = dv.getUint32();
				p.rigidBodyIndex2 = dv.getUint32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.translationLimitation1 = dv.getFloat32Array( 3 );
				p.translationLimitation2 = dv.getFloat32Array( 3 );
				p.rotationLimitation1 = dv.getFloat32Array( 3 );
				p.rotationLimitation2 = dv.getFloat32Array( 3 );
				p.springPosition = dv.getFloat32Array( 3 );
				p.springRotation = dv.getFloat32Array( 3 );
				return p;

			};

			var metadata = pmd.metadata;
			metadata.constraintCount = dv.getUint32();

			pmd.constraints = [];

			for ( var i = 0; i < metadata.constraintCount; i ++ ) {

				pmd.constraints.push( parseConstraint() );

			}

		};

		parseHeader();
		parseVertices();
		parseFaces();
		parseMaterials();
		parseBones();
		parseIks();
		parseMorphs();
		parseMorphFrames();
		parseBoneFrameNames();
		parseBoneFrames();
		parseEnglishHeader();
		parseEnglishBoneNames();
		parseEnglishMorphNames();
		parseEnglishBoneFrameNames();
		parseToonTextures();
		parseRigidBodies();
		parseConstraints();

		if ( leftToRight === true ) this.leftToRightModel( pmd );

		// console.log( pmd ); // for console debug

		return pmd;

	};

	Parser.prototype.parsePmx = function ( buffer, leftToRight ) {

		var pmx = {};
		var dv = new DataViewEx( buffer );

		pmx.metadata = {};
		pmx.metadata.format = 'pmx';
		pmx.metadata.coordinateSystem = 'left';

		var parseHeader = function () {

			var metadata = pmx.metadata;
			metadata.magic = dv.getChars( 4 );

			// Note: don't remove the last blank space.
			if ( metadata.magic !== 'PMX ' ) {

				throw 'PMX file magic is not PMX , but ' + metadata.magic;

			}

			metadata.version = dv.getFloat32();

			if ( metadata.version !== 2.0 && metadata.version !== 2.1 ) {

				throw 'PMX version ' + metadata.version + ' is not supported.';

			}

			metadata.headerSize = dv.getUint8();
			metadata.encoding = dv.getUint8();
			metadata.additionalUvNum = dv.getUint8();
			metadata.vertexIndexSize = dv.getUint8();
			metadata.textureIndexSize = dv.getUint8();
			metadata.materialIndexSize = dv.getUint8();
			metadata.boneIndexSize = dv.getUint8();
			metadata.morphIndexSize = dv.getUint8();
			metadata.rigidBodyIndexSize = dv.getUint8();
			metadata.modelName = dv.getTextBuffer();
			metadata.englishModelName = dv.getTextBuffer();
			metadata.comment = dv.getTextBuffer();
			metadata.englishComment = dv.getTextBuffer();

		};

		var parseVertices = function () {

			var parseVertex = function () {

				var p = {};
				p.position = dv.getFloat32Array( 3 );
				p.normal = dv.getFloat32Array( 3 );
				p.uv = dv.getFloat32Array( 2 );

				p.auvs = [];

				for ( var i = 0; i < pmx.metadata.additionalUvNum; i ++ ) {

					p.auvs.push( dv.getFloat32Array( 4 ) );

				}

				p.type = dv.getUint8();

				var indexSize = metadata.boneIndexSize;

				if ( p.type === 0 ) { // BDEF1

					p.skinIndices = dv.getIndexArray( indexSize, 1 );
					p.skinWeights = [ 1.0 ];

				} else if ( p.type === 1 ) { // BDEF2

					p.skinIndices = dv.getIndexArray( indexSize, 2 );
					p.skinWeights = dv.getFloat32Array( 1 );
					p.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );

				} else if ( p.type === 2 ) { // BDEF4

					p.skinIndices = dv.getIndexArray( indexSize, 4 );
					p.skinWeights = dv.getFloat32Array( 4 );

				} else if ( p.type === 3 ) { // SDEF

					p.skinIndices = dv.getIndexArray( indexSize, 2 );
					p.skinWeights = dv.getFloat32Array( 1 );
					p.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );

					p.skinC = dv.getFloat32Array( 3 );
					p.skinR0 = dv.getFloat32Array( 3 );
					p.skinR1 = dv.getFloat32Array( 3 );

					// SDEF is not supported yet and is handled as BDEF2 so far.
					// TODO: SDEF support
					p.type = 1;

				} else {

					throw 'unsupport bone type ' + p.type + ' exception.';

				}

				p.edgeRatio = dv.getFloat32();
				return p;

			};

			var metadata = pmx.metadata;
			metadata.vertexCount = dv.getUint32();

			pmx.vertices = [];

			for ( var i = 0; i < metadata.vertexCount; i ++ ) {

				pmx.vertices.push( parseVertex() );

			}

		};

		var parseFaces = function () {

			var parseFace = function () {

				var p = {};
				p.indices = dv.getIndexArray( metadata.vertexIndexSize, 3, true );
				return p;

			};

			var metadata = pmx.metadata;
			metadata.faceCount = dv.getUint32() / 3;

			pmx.faces = [];

			for ( var i = 0; i < metadata.faceCount; i ++ ) {

				pmx.faces.push( parseFace() );

			}

		};

		var parseTextures = function () {

			var parseTexture = function () {

				return dv.getTextBuffer();

			};

			var metadata = pmx.metadata;
			metadata.textureCount = dv.getUint32();

			pmx.textures = [];

			for ( var i = 0; i < metadata.textureCount; i ++ ) {

				pmx.textures.push( parseTexture() );

			}

		};

		var parseMaterials = function () {

			var parseMaterial = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.diffuse = dv.getFloat32Array( 4 );
				p.specular = dv.getFloat32Array( 3 );
				p.shininess = dv.getFloat32();
				p.ambient = dv.getFloat32Array( 3 );
				p.flag = dv.getUint8();
				p.edgeColor = dv.getFloat32Array( 4 );
				p.edgeSize = dv.getFloat32();
				p.textureIndex = dv.getIndex( pmx.metadata.textureIndexSize );
				p.envTextureIndex = dv.getIndex( pmx.metadata.textureIndexSize );
				p.envFlag = dv.getUint8();
				p.toonFlag = dv.getUint8();

				if ( p.toonFlag === 0 ) {

					p.toonIndex = dv.getIndex( pmx.metadata.textureIndexSize );

				} else if ( p.toonFlag === 1 ) {

					p.toonIndex = dv.getInt8();

				} else {

					throw 'unknown toon flag ' + p.toonFlag + ' exception.';

				}

				p.comment = dv.getTextBuffer();
				p.faceCount = dv.getUint32() / 3;
				return p;

			};

			var metadata = pmx.metadata;
			metadata.materialCount = dv.getUint32();

			pmx.materials = [];

			for ( var i = 0; i < metadata.materialCount; i ++ ) {

				pmx.materials.push( parseMaterial() );

			}

		};

		var parseBones = function () {

			var parseBone = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.position = dv.getFloat32Array( 3 );
				p.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );
				p.transformationClass = dv.getUint32();
				p.flag = dv.getUint16();

				if ( p.flag & 0x1 ) {

					p.connectIndex = dv.getIndex( pmx.metadata.boneIndexSize );

				} else {

					p.offsetPosition = dv.getFloat32Array( 3 );

				}

				if ( p.flag & 0x100 || p.flag & 0x200 ) {

					// Note: I don't think Grant is an appropriate name
					//       but I found that some English translated MMD tools use this term
					//       so I've named it Grant so far.
					//       I'd rename to more appropriate name from Grant later.
					var grant = {};

					grant.isLocal = ( p.flag & 0x80 ) !== 0 ? true : false;
					grant.affectRotation = ( p.flag & 0x100 ) !== 0 ? true : false;
					grant.affectPosition = ( p.flag & 0x200 ) !== 0 ? true : false;
					grant.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );
					grant.ratio = dv.getFloat32();

					p.grant = grant;

				}

				if ( p.flag & 0x400 ) {

					p.fixAxis = dv.getFloat32Array( 3 );

				}

				if ( p.flag & 0x800 ) {

					p.localXVector = dv.getFloat32Array( 3 );
					p.localZVector = dv.getFloat32Array( 3 );

				}

				if ( p.flag & 0x2000 ) {

					p.key = dv.getUint32();

				}

				if ( p.flag & 0x20 ) {

					var ik = {};

					ik.effector = dv.getIndex( pmx.metadata.boneIndexSize );
					ik.target = null;
					ik.iteration = dv.getUint32();
					ik.maxAngle = dv.getFloat32();
					ik.linkCount = dv.getUint32();
					ik.links = [];

					for ( var i = 0; i < ik.linkCount; i ++ ) {

						var link = {};
						link.index = dv.getIndex( pmx.metadata.boneIndexSize );
						link.angleLimitation = dv.getUint8();

						if ( link.angleLimitation === 1 ) {

							link.lowerLimitationAngle = dv.getFloat32Array( 3 );
							link.upperLimitationAngle = dv.getFloat32Array( 3 );

						}

						ik.links.push( link );

					}

					p.ik = ik;

				}

				return p;

			};

			var metadata = pmx.metadata;
			metadata.boneCount = dv.getUint32();

			pmx.bones = [];

			for ( var i = 0; i < metadata.boneCount; i ++ ) {

				pmx.bones.push( parseBone() );

			}

		};

		var parseMorphs = function () {

			var parseMorph = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.panel = dv.getUint8();
				p.type = dv.getUint8();
				p.elementCount = dv.getUint32();
				p.elements = [];

				for ( var i = 0; i < p.elementCount; i ++ ) {

					if ( p.type === 0 ) { // group morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.morphIndexSize );
						m.ratio = dv.getFloat32();
						p.elements.push( m );

					} else if ( p.type === 1 ) { // vertex morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );
						m.position = dv.getFloat32Array( 3 );
						p.elements.push( m );

					} else if ( p.type === 2 ) { // bone morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.boneIndexSize );
						m.position = dv.getFloat32Array( 3 );
						m.rotation = dv.getFloat32Array( 4 );
						p.elements.push( m );

					} else if ( p.type === 3 ) { // uv morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );
						m.uv = dv.getFloat32Array( 4 );
						p.elements.push( m );

					} else if ( p.type === 4 ) { // additional uv1

						// TODO: implement

					} else if ( p.type === 5 ) { // additional uv2

						// TODO: implement

					} else if ( p.type === 6 ) { // additional uv3

						// TODO: implement

					} else if ( p.type === 7 ) { // additional uv4

						// TODO: implement

					} else if ( p.type === 8 ) { // material morph

						var m = {};
						m.index = dv.getIndex( pmx.metadata.materialIndexSize );
						m.type = dv.getUint8();
						m.diffuse = dv.getFloat32Array( 4 );
						m.specular = dv.getFloat32Array( 3 );
						m.shininess = dv.getFloat32();
						m.ambient = dv.getFloat32Array( 3 );
						m.edgeColor = dv.getFloat32Array( 4 );
						m.edgeSize = dv.getFloat32();
						m.textureColor = dv.getFloat32Array( 4 );
						m.sphereTextureColor = dv.getFloat32Array( 4 );
						m.toonColor = dv.getFloat32Array( 4 );
						p.elements.push( m );

					}

				}

				return p;

			};

			var metadata = pmx.metadata;
			metadata.morphCount = dv.getUint32();

			pmx.morphs = [];

			for ( var i = 0; i < metadata.morphCount; i ++ ) {

				pmx.morphs.push( parseMorph() );

			}

		};

		var parseFrames = function () {

			var parseFrame = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.type = dv.getUint8();
				p.elementCount = dv.getUint32();
				p.elements = [];

				for ( var i = 0; i < p.elementCount; i ++ ) {

					var e = {};
					e.target = dv.getUint8();
					e.index = ( e.target === 0 ) ? dv.getIndex( pmx.metadata.boneIndexSize ) : dv.getIndex( pmx.metadata.morphIndexSize );
					p.elements.push( e );

				}

				return p;

			};

			var metadata = pmx.metadata;
			metadata.frameCount = dv.getUint32();

			pmx.frames = [];

			for ( var i = 0; i < metadata.frameCount; i ++ ) {

				pmx.frames.push( parseFrame() );

			}

		};

		var parseRigidBodies = function () {

			var parseRigidBody = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.boneIndex = dv.getIndex( pmx.metadata.boneIndexSize );
				p.groupIndex = dv.getUint8();
				p.groupTarget = dv.getUint16();
				p.shapeType = dv.getUint8();
				p.width = dv.getFloat32();
				p.height = dv.getFloat32();
				p.depth = dv.getFloat32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.weight = dv.getFloat32();
				p.positionDamping = dv.getFloat32();
				p.rotationDamping = dv.getFloat32();
				p.restitution = dv.getFloat32();
				p.friction = dv.getFloat32();
				p.type = dv.getUint8();
				return p;

			};

			var metadata = pmx.metadata;
			metadata.rigidBodyCount = dv.getUint32();

			pmx.rigidBodies = [];

			for ( var i = 0; i < metadata.rigidBodyCount; i ++ ) {

				pmx.rigidBodies.push( parseRigidBody() );

			}

		};

		var parseConstraints = function () {

			var parseConstraint = function () {

				var p = {};
				p.name = dv.getTextBuffer();
				p.englishName = dv.getTextBuffer();
				p.type = dv.getUint8();
				p.rigidBodyIndex1 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );
				p.rigidBodyIndex2 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.translationLimitation1 = dv.getFloat32Array( 3 );
				p.translationLimitation2 = dv.getFloat32Array( 3 );
				p.rotationLimitation1 = dv.getFloat32Array( 3 );
				p.rotationLimitation2 = dv.getFloat32Array( 3 );
				p.springPosition = dv.getFloat32Array( 3 );
				p.springRotation = dv.getFloat32Array( 3 );
				return p;

			};

			var metadata = pmx.metadata;
			metadata.constraintCount = dv.getUint32();

			pmx.constraints = [];

			for ( var i = 0; i < metadata.constraintCount; i ++ ) {

				pmx.constraints.push( parseConstraint() );

			}

		};

		parseHeader();
		parseVertices();
		parseFaces();
		parseTextures();
		parseMaterials();
		parseBones();
		parseMorphs();
		parseFrames();
		parseRigidBodies();
		parseConstraints();

		if ( leftToRight === true ) this.leftToRightModel( pmx );

		// console.log( pmx ); // for console debug

		return pmx;

	};

	Parser.prototype.parseVmd = function ( buffer, leftToRight ) {

		var vmd = {};
		var dv = new DataViewEx( buffer );

		vmd.metadata = {};
		vmd.metadata.coordinateSystem = 'left';

		var parseHeader = function () {

			var metadata = vmd.metadata;
			metadata.magic = dv.getChars( 30 );

			if ( metadata.magic !== 'Vocaloid Motion Data 0002' ) {

				throw 'VMD file magic is not Vocaloid Motion Data 0002, but ' + metadata.magic;

			}

			metadata.name = dv.getSjisStringsAsUnicode( 20 );

		};

		var parseMotions = function () {

			var parseMotion = function () {

				var p = {};
				p.boneName = dv.getSjisStringsAsUnicode( 15 );
				p.frameNum = dv.getUint32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 4 );
				p.interpolation = dv.getUint8Array( 64 );
				return p;

			};

			var metadata = vmd.metadata;
			metadata.motionCount = dv.getUint32();

			vmd.motions = [];
			for ( var i = 0; i < metadata.motionCount; i ++ ) {

				vmd.motions.push( parseMotion() );

			}

		};

		var parseMorphs = function () {

			var parseMorph = function () {

				var p = {};
				p.morphName = dv.getSjisStringsAsUnicode( 15 );
				p.frameNum = dv.getUint32();
				p.weight = dv.getFloat32();
				return p;

			};

			var metadata = vmd.metadata;
			metadata.morphCount = dv.getUint32();

			vmd.morphs = [];
			for ( var i = 0; i < metadata.morphCount; i ++ ) {

				vmd.morphs.push( parseMorph() );

			}

		};

		var parseCameras = function () {

			var parseCamera = function () {

				var p = {};
				p.frameNum = dv.getUint32();
				p.distance = dv.getFloat32();
				p.position = dv.getFloat32Array( 3 );
				p.rotation = dv.getFloat32Array( 3 );
				p.interpolation = dv.getUint8Array( 24 );
				p.fov = dv.getUint32();
				p.perspective = dv.getUint8();
				return p;

			};

			var metadata = vmd.metadata;
			metadata.cameraCount = dv.getUint32();

			vmd.cameras = [];
			for ( var i = 0; i < metadata.cameraCount; i ++ ) {

				vmd.cameras.push( parseCamera() );

			}

		};

		parseHeader();
		parseMotions();
		parseMorphs();
		parseCameras();

		if ( leftToRight === true ) this.leftToRightVmd( vmd );

		// console.log( vmd ); // for console debug

		return vmd;

	};

	Parser.prototype.parseVpd = function ( text, leftToRight ) {

		var vpd = {};

		vpd.metadata = {};
		vpd.metadata.coordinateSystem = 'left';

		vpd.bones = [];

		var commentPatternG = /\/\/\w*(\r|\n|\r\n)/g;
		var newlinePattern = /\r|\n|\r\n/;

		var lines = text.replace( commentPatternG, '' ).split( newlinePattern );

		function throwError() {

			throw 'the file seems not vpd file.';

		}

		function checkMagic() {

			if ( lines[ 0 ] !== 'Vocaloid Pose Data file' ) {

				throwError();

			}

		}

		function parseHeader() {

			if ( lines.length < 4 ) {

				throwError();

			}

			vpd.metadata.parentFile = lines[ 2 ];
			vpd.metadata.boneCount = parseInt( lines[ 3 ] );

		}

		function parseBones() {

			var boneHeaderPattern = /^\s*(Bone[0-9]+)\s*\{\s*(.*)$/;
			var boneVectorPattern = /^\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*;/;
			var boneQuaternionPattern = /^\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*,\s*(-?[0-9]+\.[0-9]+)\s*;/;
			var boneFooterPattern = /^\s*}/;

			var bones = vpd.bones;
			var n = null;
			var v = null;
			var q = null;

			for ( var i = 4; i < lines.length; i ++ ) {

				var line = lines[ i ];

				var result;

				result = line.match( boneHeaderPattern );

				if ( result !== null ) {

					if ( n !== null ) {

						throwError();

					}

					n = result[ 2 ];

				}

				result = line.match( boneVectorPattern );

				if ( result !== null ) {

					if ( v !== null ) {

						throwError();

					}

					v = [

						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] ),
						parseFloat( result[ 3 ] )

					];

				}

				result = line.match( boneQuaternionPattern );

				if ( result !== null ) {

					if ( q !== null ) {

						throwError();

					}

					q = [

						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] ),
						parseFloat( result[ 3 ] ),
						parseFloat( result[ 4 ] )

					];


				}

				result = line.match( boneFooterPattern );

				if ( result !== null ) {

					if ( n === null || v === null || q === null ) {

						throwError();

					}

					bones.push( {

						name: n,
						translation: v,
						quaternion: q

					} );

					n = null;
					v = null;
					q = null;

				}

			}

			if ( n !== null || v !== null || q !== null ) {

				throwError();

			}

		}

		checkMagic();
		parseHeader();
		parseBones();

		if ( leftToRight === true ) this.leftToRightVpd( vpd );

		// console.log( vpd );  // for console debug

		return vpd;

	};

	Parser.prototype.mergeVmds = function ( vmds ) {

		var v = {};
		v.metadata = {};
		v.metadata.name = vmds[ 0 ].metadata.name;
		v.metadata.coordinateSystem = vmds[ 0 ].metadata.coordinateSystem;
		v.metadata.motionCount = 0;
		v.metadata.morphCount = 0;
		v.metadata.cameraCount = 0;
		v.motions = [];
		v.morphs = [];
		v.cameras = [];

		for ( var i = 0; i < vmds.length; i ++ ) {

			var v2 = vmds[ i ];

			v.metadata.motionCount += v2.metadata.motionCount;
			v.metadata.morphCount += v2.metadata.morphCount;
			v.metadata.cameraCount += v2.metadata.cameraCount;

			for ( var j = 0; j < v2.metadata.motionCount; j ++ ) {

				v.motions.push( v2.motions[ j ] );

			}

			for ( var j = 0; j < v2.metadata.morphCount; j ++ ) {

				v.morphs.push( v2.morphs[ j ] );

			}

			for ( var j = 0; j < v2.metadata.cameraCount; j ++ ) {

				v.cameras.push( v2.cameras[ j ] );

			}

		}

		return v;

	};

	Parser.prototype.leftToRightModel = function ( model ) {

		if ( model.metadata.coordinateSystem === 'right' ) {

			return;

		}

		model.metadata.coordinateSystem = 'right';

		var helper = new DataCreationHelper();

		for ( var i = 0; i < model.metadata.vertexCount; i ++ ) {

			helper.leftToRightVector3( model.vertices[ i ].position );
			helper.leftToRightVector3( model.vertices[ i ].normal );

		}

		for ( var i = 0; i < model.metadata.faceCount; i ++ ) {

			helper.leftToRightIndexOrder( model.faces[ i ].indices );

		}

		for ( var i = 0; i < model.metadata.boneCount; i ++ ) {

			helper.leftToRightVector3( model.bones[ i ].position );

		}

		// TODO: support other morph for PMX
		for ( var i = 0; i < model.metadata.morphCount; i ++ ) {

			var m = model.morphs[ i ];

			if ( model.metadata.format === 'pmx' && m.type !== 1 ) {

				// TODO: implement
				continue;

			}

			for ( var j = 0; j < m.elements.length; j ++ ) {

				helper.leftToRightVector3( m.elements[ j ].position );

			}

		}

		for ( var i = 0; i < model.metadata.rigidBodyCount; i ++ ) {

			helper.leftToRightVector3( model.rigidBodies[ i ].position );
			helper.leftToRightEuler( model.rigidBodies[ i ].rotation );

		}

		for ( var i = 0; i < model.metadata.constraintCount; i ++ ) {

			helper.leftToRightVector3( model.constraints[ i ].position );
			helper.leftToRightEuler( model.constraints[ i ].rotation );
			helper.leftToRightVector3Range( model.constraints[ i ].translationLimitation1, model.constraints[ i ].translationLimitation2 );
			helper.leftToRightEulerRange( model.constraints[ i ].rotationLimitation1, model.constraints[ i ].rotationLimitation2 );

		}

	};

	Parser.prototype.leftToRightVmd = function ( vmd ) {

		if ( vmd.metadata.coordinateSystem === 'right' ) {

			return;

		}

		vmd.metadata.coordinateSystem = 'right';

		var helper = new DataCreationHelper();

		for ( var i = 0; i < vmd.metadata.motionCount; i ++ ) {

			helper.leftToRightVector3( vmd.motions[ i ].position );
			helper.leftToRightQuaternion( vmd.motions[ i ].rotation );

		}

		for ( var i = 0; i < vmd.metadata.cameraCount; i ++ ) {

			helper.leftToRightVector3( vmd.cameras[ i ].position );
			helper.leftToRightEuler( vmd.cameras[ i ].rotation );

		}

	};

	Parser.prototype.leftToRightVpd = function ( vpd ) {

		if ( vpd.metadata.coordinateSystem === 'right' ) {

			return;

		}

		vpd.metadata.coordinateSystem = 'right';

		var helper = new DataCreationHelper();

		for ( var i = 0; i < vpd.bones.length; i ++ ) {

			helper.leftToRightVector3( vpd.bones[ i ].translation );
			helper.leftToRightQuaternion( vpd.bones[ i ].quaternion );

		}

	};

	var MMDParser = { CharsetEncoder, Parser };

	return MMDParser;

});
define('skylark-threejs-ex/exporters/MMDExporter',[
    "skylark-threejs",
    '../utils/mmdparser'
], function (THREE, MMDParser) {
    'use strict';
    var MMDExporter = function () {
        var u2sTable;
        function unicodeToShiftjis(str) {
            if (u2sTable === undefined) {
                var encoder = new MMDParser.CharsetEncoder();
                var table = encoder.s2uTable;
                u2sTable = {};
                var keys = Object.keys(table);
                for (var i = 0, il = keys.length; i < il; i++) {
                    var key = keys[i];
                    var value = table[key];
                    key = parseInt(key);
                    u2sTable[value] = key;
                }
            }
            var array = [];
            for (var i = 0, il = str.length; i < il; i++) {
                var code = str.charCodeAt(i);
                var value = u2sTable[code];
                if (value === undefined) {
                    throw 'cannot convert charcode 0x' + code.toString(16);
                } else if (value > 255) {
                    array.push(value >> 8 & 255);
                    array.push(value & 255);
                } else {
                    array.push(value & 255);
                }
            }
            return new Uint8Array(array);
        }
        function getBindBones(skin) {
            var poseSkin = skin.clone();
            poseSkin.pose();
            return poseSkin.skeleton.bones;
        }
        this.parseVpd = function (skin, outputShiftJis, useOriginalBones) {
            if (skin.isSkinnedMesh !== true) {
                console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');
                return null;
            }
            function toStringsFromNumber(num) {
                if (Math.abs(num) < 0.000001)
                    num = 0;
                var a = num.toString();
                if (a.indexOf('.') === -1) {
                    a += '.';
                }
                a += '000000';
                var index = a.indexOf('.');
                var d = a.slice(0, index);
                var p = a.slice(index + 1, index + 7);
                return d + '.' + p;
            }
            function toStringsFromArray(array) {
                var a = [];
                for (var i = 0, il = array.length; i < il; i++) {
                    a.push(toStringsFromNumber(array[i]));
                }
                return a.join(',');
            }
            skin.updateMatrixWorld(true);
            var bones = skin.skeleton.bones;
            var bones2 = getBindBones(skin);
            var position = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            var quaternion2 = new THREE.Quaternion();
            var matrix = new THREE.Matrix4();
            var array = [];
            array.push('Vocaloid Pose Data file');
            array.push('');
            array.push((skin.name !== '' ? skin.name.replace(/\s/g, '_') : 'skin') + '.osm;');
            array.push(bones.length + ';');
            array.push('');
            for (var i = 0, il = bones.length; i < il; i++) {
                var bone = bones[i];
                var bone2 = bones2[i];
                if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {
                    matrix.fromArray(bone.userData.ik.originalMatrix);
                } else {
                    matrix.copy(bone.matrix);
                }
                position.setFromMatrixPosition(matrix);
                quaternion.setFromRotationMatrix(matrix);
                var pArray = position.sub(bone2.position).toArray();
                var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();
                pArray[2] = -pArray[2];
                qArray[0] = -qArray[0];
                qArray[1] = -qArray[1];
                array.push('Bone' + i + '{' + bone.name);
                array.push('  ' + toStringsFromArray(pArray) + ';');
                array.push('  ' + toStringsFromArray(qArray) + ';');
                array.push('}');
                array.push('');
            }
            array.push('');
            var lines = array.join('\n');
            return outputShiftJis === true ? unicodeToShiftjis(lines) : lines;
        };
    };
    return MMDExporter;
});
define('skylark-threejs-ex/exporters/OBJExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var OBJExporter = function () {
    };
    OBJExporter.prototype = {
        constructor: OBJExporter,
        parse: function (object) {
            var output = '';
            var indexVertex = 0;
            var indexVertexUvs = 0;
            var indexNormals = 0;
            var vertex = new THREE.Vector3();
            var normal = new THREE.Vector3();
            var uv = new THREE.Vector2();
            var i, j, k, l, m, face = [];
            var parseMesh = function (mesh) {
                var nbVertex = 0;
                var nbNormals = 0;
                var nbVertexUvs = 0;
                var geometry = mesh.geometry;
                var normalMatrixWorld = new THREE.Matrix3();
                if (geometry instanceof THREE.Geometry) {
                    geometry = new THREE.BufferGeometry().setFromObject(mesh);
                }
                if (geometry instanceof THREE.BufferGeometry) {
                    var vertices = geometry.getAttribute('position');
                    var normals = geometry.getAttribute('normal');
                    var uvs = geometry.getAttribute('uv');
                    var indices = geometry.getIndex();
                    output += 'o ' + mesh.name + '\n';
                    if (mesh.material && mesh.material.name) {
                        output += 'usemtl ' + mesh.material.name + '\n';
                    }
                    if (vertices !== undefined) {
                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {
                            vertex.x = vertices.getX(i);
                            vertex.y = vertices.getY(i);
                            vertex.z = vertices.getZ(i);
                            vertex.applyMatrix4(mesh.matrixWorld);
                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\n';
                        }
                    }
                    if (uvs !== undefined) {
                        for (i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {
                            uv.x = uvs.getX(i);
                            uv.y = uvs.getY(i);
                            output += 'vt ' + uv.x + ' ' + uv.y + '\n';
                        }
                    }
                    if (normals !== undefined) {
                        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                        for (i = 0, l = normals.count; i < l; i++, nbNormals++) {
                            normal.x = normals.getX(i);
                            normal.y = normals.getY(i);
                            normal.z = normals.getZ(i);
                            normal.applyMatrix3(normalMatrixWorld).normalize();
                            output += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\n';
                        }
                    }
                    if (indices !== null) {
                        for (i = 0, l = indices.count; i < l; i += 3) {
                            for (m = 0; m < 3; m++) {
                                j = indices.getX(i + m) + 1;
                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');
                            }
                            output += 'f ' + face.join(' ') + '\n';
                        }
                    } else {
                        for (i = 0, l = vertices.count; i < l; i += 3) {
                            for (m = 0; m < 3; m++) {
                                j = i + m + 1;
                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');
                            }
                            output += 'f ' + face.join(' ') + '\n';
                        }
                    }
                } else {
                    console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry);
                }
                indexVertex += nbVertex;
                indexVertexUvs += nbVertexUvs;
                indexNormals += nbNormals;
            };
            var parseLine = function (line) {
                var nbVertex = 0;
                var geometry = line.geometry;
                var type = line.type;
                if (geometry instanceof THREE.Geometry) {
                    geometry = new THREE.BufferGeometry().setFromObject(line);
                }
                if (geometry instanceof THREE.BufferGeometry) {
                    var vertices = geometry.getAttribute('position');
                    output += 'o ' + line.name + '\n';
                    if (vertices !== undefined) {
                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {
                            vertex.x = vertices.getX(i);
                            vertex.y = vertices.getY(i);
                            vertex.z = vertices.getZ(i);
                            vertex.applyMatrix4(line.matrixWorld);
                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\n';
                        }
                    }
                    if (type === 'Line') {
                        output += 'l ';
                        for (j = 1, l = vertices.count; j <= l; j++) {
                            output += indexVertex + j + ' ';
                        }
                        output += '\n';
                    }
                    if (type === 'LineSegments') {
                        for (j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {
                            output += 'l ' + (indexVertex + j) + ' ' + (indexVertex + k) + '\n';
                        }
                    }
                } else {
                    console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry);
                }
                indexVertex += nbVertex;
            };
            object.traverse(function (child) {
                if (child instanceof THREE.Mesh) {
                    parseMesh(child);
                }
                if (child instanceof THREE.Line) {
                    parseLine(child);
                }
            });
            return output;
        }
    };

    return OBJExporter;
});
define('skylark-threejs-ex/exporters/PLYExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var PLYExporter = function () {
    };
    PLYExporter.prototype = {
        constructor: PLYExporter,
        parse: function (object, onDone, options) {
            if (onDone && typeof onDone === 'object') {
                console.warn('THREE.PLYExporter: The options parameter is now the third argument to the "parse" function. See the documentation for the new API.');
                options = onDone;
                onDone = undefined;
            }
            function traverseMeshes(cb) {
                object.traverse(function (child) {
                    if (child.isMesh === true) {
                        var mesh = child;
                        var geometry = mesh.geometry;
                        if (geometry.isGeometry === true) {
                            geometry = geomToBufferGeom.get(geometry);
                        }
                        if (geometry.isBufferGeometry === true) {
                            if (geometry.getAttribute('position') !== undefined) {
                                cb(mesh, geometry);
                            }
                        }
                    }
                });
            }
            var defaultOptions = {
                binary: false,
                excludeAttributes: [],
                littleEndian: false
            };
            options = Object.assign(defaultOptions, options);
            var excludeAttributes = options.excludeAttributes;
            var geomToBufferGeom = new WeakMap();
            var includeNormals = false;
            var includeColors = false;
            var includeUVs = false;
            var vertexCount = 0;
            var faceCount = 0;
            object.traverse(function (child) {
                if (child.isMesh === true) {
                    var mesh = child;
                    var geometry = mesh.geometry;
                    if (geometry.isGeometry === true) {
                        var bufferGeometry = geomToBufferGeom.get(geometry) || new THREE.BufferGeometry().setFromObject(mesh);
                        geomToBufferGeom.set(geometry, bufferGeometry);
                        geometry = bufferGeometry;
                    }
                    if (geometry.isBufferGeometry === true) {
                        var vertices = geometry.getAttribute('position');
                        var normals = geometry.getAttribute('normal');
                        var uvs = geometry.getAttribute('uv');
                        var colors = geometry.getAttribute('color');
                        var indices = geometry.getIndex();
                        if (vertices === undefined) {
                            return;
                        }
                        vertexCount += vertices.count;
                        faceCount += indices ? indices.count / 3 : vertices.count / 3;
                        if (normals !== undefined)
                            includeNormals = true;
                        if (uvs !== undefined)
                            includeUVs = true;
                        if (colors !== undefined)
                            includeColors = true;
                    }
                }
            });
            var includeIndices = excludeAttributes.indexOf('index') === -1;
            includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;
            includeColors = includeColors && excludeAttributes.indexOf('color') === -1;
            includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;
            if (includeIndices && faceCount !== Math.floor(faceCount)) {
                console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');
                return null;
            }
            var indexByteCount = 4;
            var header = 'ply\n' + `format ${ options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii' } 1.0\n` + `element vertex ${ vertexCount }\n` + 'property float x\n' + 'property float y\n' + 'property float z\n';
            if (includeNormals === true) {
                header += 'property float nx\n' + 'property float ny\n' + 'property float nz\n';
            }
            if (includeUVs === true) {
                header += 'property float s\n' + 'property float t\n';
            }
            if (includeColors === true) {
                header += 'property uchar red\n' + 'property uchar green\n' + 'property uchar blue\n';
            }
            if (includeIndices === true) {
                header += `element face ${ faceCount }\n` + `property list uchar int vertex_index\n`;
            }
            header += 'end_header\n';
            var vertex = new THREE.Vector3();
            var normalMatrixWorld = new THREE.Matrix3();
            var result = null;
            if (options.binary === true) {
                var headerBin = new TextEncoder().encode(header);
                var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));
                var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;
                var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));
                new Uint8Array(output.buffer).set(headerBin, 0);
                var vOffset = headerBin.length;
                var fOffset = headerBin.length + vertexListLength;
                var writtenVertices = 0;
                traverseMeshes(function (mesh, geometry) {
                    var vertices = geometry.getAttribute('position');
                    var normals = geometry.getAttribute('normal');
                    var uvs = geometry.getAttribute('uv');
                    var colors = geometry.getAttribute('color');
                    var indices = geometry.getIndex();
                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                    for (var i = 0, l = vertices.count; i < l; i++) {
                        vertex.x = vertices.getX(i);
                        vertex.y = vertices.getY(i);
                        vertex.z = vertices.getZ(i);
                        vertex.applyMatrix4(mesh.matrixWorld);
                        output.setFloat32(vOffset, vertex.x, options.littleEndian);
                        vOffset += 4;
                        output.setFloat32(vOffset, vertex.y, options.littleEndian);
                        vOffset += 4;
                        output.setFloat32(vOffset, vertex.z, options.littleEndian);
                        vOffset += 4;
                        if (includeNormals === true) {
                            if (normals != null) {
                                vertex.x = normals.getX(i);
                                vertex.y = normals.getY(i);
                                vertex.z = normals.getZ(i);
                                vertex.applyMatrix3(normalMatrixWorld).normalize();
                                output.setFloat32(vOffset, vertex.x, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, vertex.y, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, vertex.z, options.littleEndian);
                                vOffset += 4;
                            } else {
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                            }
                        }
                        if (includeUVs === true) {
                            if (uvs != null) {
                                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);
                                vOffset += 4;
                            } else if (includeUVs !== false) {
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                                output.setFloat32(vOffset, 0, options.littleEndian);
                                vOffset += 4;
                            }
                        }
                        if (includeColors === true) {
                            if (colors != null) {
                                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));
                                vOffset += 1;
                                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));
                                vOffset += 1;
                                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));
                                vOffset += 1;
                            } else {
                                output.setUint8(vOffset, 255);
                                vOffset += 1;
                                output.setUint8(vOffset, 255);
                                vOffset += 1;
                                output.setUint8(vOffset, 255);
                                vOffset += 1;
                            }
                        }
                    }
                    if (includeIndices === true) {
                        if (indices !== null) {
                            for (var i = 0, l = indices.count; i < l; i += 3) {
                                output.setUint8(fOffset, 3);
                                fOffset += 1;
                                output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);
                                fOffset += indexByteCount;
                            }
                        } else {
                            for (var i = 0, l = vertices.count; i < l; i += 3) {
                                output.setUint8(fOffset, 3);
                                fOffset += 1;
                                output.setUint32(fOffset, writtenVertices + i, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);
                                fOffset += indexByteCount;
                                output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);
                                fOffset += indexByteCount;
                            }
                        }
                    }
                    writtenVertices += vertices.count;
                });
                result = output.buffer;
            } else {
                var writtenVertices = 0;
                var vertexList = '';
                var faceList = '';
                traverseMeshes(function (mesh, geometry) {
                    var vertices = geometry.getAttribute('position');
                    var normals = geometry.getAttribute('normal');
                    var uvs = geometry.getAttribute('uv');
                    var colors = geometry.getAttribute('color');
                    var indices = geometry.getIndex();
                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                    for (var i = 0, l = vertices.count; i < l; i++) {
                        vertex.x = vertices.getX(i);
                        vertex.y = vertices.getY(i);
                        vertex.z = vertices.getZ(i);
                        vertex.applyMatrix4(mesh.matrixWorld);
                        var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z;
                        if (includeNormals === true) {
                            if (normals != null) {
                                vertex.x = normals.getX(i);
                                vertex.y = normals.getY(i);
                                vertex.z = normals.getZ(i);
                                vertex.applyMatrix3(normalMatrixWorld).normalize();
                                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;
                            } else {
                                line += ' 0 0 0';
                            }
                        }
                        if (includeUVs === true) {
                            if (uvs != null) {
                                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);
                            } else if (includeUVs !== false) {
                                line += ' 0 0';
                            }
                        }
                        if (includeColors === true) {
                            if (colors != null) {
                                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);
                            } else {
                                line += ' 255 255 255';
                            }
                        }
                        vertexList += line + '\n';
                    }
                    if (includeIndices === true) {
                        if (indices !== null) {
                            for (var i = 0, l = indices.count; i < l; i += 3) {
                                faceList += `3 ${ indices.getX(i + 0) + writtenVertices }`;
                                faceList += ` ${ indices.getX(i + 1) + writtenVertices }`;
                                faceList += ` ${ indices.getX(i + 2) + writtenVertices }\n`;
                            }
                        } else {
                            for (var i = 0, l = vertices.count; i < l; i += 3) {
                                faceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\n`;
                            }
                        }
                        faceCount += indices ? indices.count / 3 : vertices.count / 3;
                    }
                    writtenVertices += vertices.count;
                });
                result = `${ header }${ vertexList }${ includeIndices ? `${ faceList }\n` : '\n' }`;
            }
            if (typeof onDone === 'function')
                requestAnimationFrame(() => onDone(result));
            return result;
        }
    };
    
    return PLYExporter;
});
define('skylark-threejs-ex/exporters/STLExporter',[
    "skylark-threejs"
], function (THREE) {
    'use strict';
    var STLExporter = function () {
    };
    STLExporter.prototype = {
        constructor: STLExporter,
        parse: function () {
            var vector = new THREE.Vector3();
            var normalMatrixWorld = new THREE.Matrix3();
            return function parse(scene, options) {
                if (options === undefined)
                    options = {};
                var binary = options.binary !== undefined ? options.binary : false;
                var objects = [];
                var triangles = 0;
                scene.traverse(function (object) {
                    if (object.isMesh) {
                        var geometry = object.geometry;
                        if (geometry.isBufferGeometry) {
                            geometry = new THREE.Geometry().fromBufferGeometry(geometry);
                        }
                        if (geometry.isGeometry) {
                            triangles += geometry.faces.length;
                            objects.push({
                                geometry: geometry,
                                matrixWorld: object.matrixWorld
                            });
                        }
                    }
                });
                if (binary) {
                    var offset = 80;
                    var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;
                    var arrayBuffer = new ArrayBuffer(bufferLength);
                    var output = new DataView(arrayBuffer);
                    output.setUint32(offset, triangles, true);
                    offset += 4;
                    for (var i = 0, il = objects.length; i < il; i++) {
                        var object = objects[i];
                        var vertices = object.geometry.vertices;
                        var faces = object.geometry.faces;
                        var matrixWorld = object.matrixWorld;
                        normalMatrixWorld.getNormalMatrix(matrixWorld);
                        for (var j = 0, jl = faces.length; j < jl; j++) {
                            var face = faces[j];
                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();
                            output.setFloat32(offset, vector.x, true);
                            offset += 4;
                            output.setFloat32(offset, vector.y, true);
                            offset += 4;
                            output.setFloat32(offset, vector.z, true);
                            offset += 4;
                            var indices = [
                                face.a,
                                face.b,
                                face.c
                            ];
                            for (var k = 0; k < 3; k++) {
                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);
                                output.setFloat32(offset, vector.x, true);
                                offset += 4;
                                output.setFloat32(offset, vector.y, true);
                                offset += 4;
                                output.setFloat32(offset, vector.z, true);
                                offset += 4;
                            }
                            output.setUint16(offset, 0, true);
                            offset += 2;
                        }
                    }
                    return output;
                } else {
                    var output = '';
                    output += 'solid exported\n';
                    for (var i = 0, il = objects.length; i < il; i++) {
                        var object = objects[i];
                        var vertices = object.geometry.vertices;
                        var faces = object.geometry.faces;
                        var matrixWorld = object.matrixWorld;
                        normalMatrixWorld.getNormalMatrix(matrixWorld);
                        for (var j = 0, jl = faces.length; j < jl; j++) {
                            var face = faces[j];
                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();
                            output += '\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\n';
                            output += '\t\touter loop\n';
                            var indices = [
                                face.a,
                                face.b,
                                face.c
                            ];
                            for (var k = 0; k < 3; k++) {
                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);
                                output += '\t\t\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\n';
                            }
                            output += '\t\tendloop\n';
                            output += '\tendfacet\n';
                        }
                    }
                    output += 'endsolid exported\n';
                    return output;
                }
            };
        }()
    };
    return STLExporter;
});
define('skylark-threejs-ex/main',[
	"skylark-threejs",

	"./shaders/CopyShader",
	"./shaders/BokehShader",
	"./shaders/SAOShader",
	"./shaders/DepthLimitedBlurShader",
	"./shaders/UnpackDepthRGBAShader",
	"./shaders/ConvolutionShader",
	"./shaders/LuminosityHighPassShader",
	"./shaders/FXAAShader",
	"./shaders/SSAOShader",
	"./shaders/FilmShader",
	"./shaders/DotScreenShader",
	"./shaders/LuminosityShader",
	"./shaders/SobelOperatorShader",
	"./shaders/ColorifyShader",
	"./shaders/ToneMapShader",
	"./shaders/TechnicolorShader",
	"./shaders/HueSaturationShader",

	"./postprocessing/EffectComposer",
	"./postprocessing/RenderPass",
	"./postprocessing/ShaderPass",
	"./postprocessing/MaskPass",

	"./curves/NURBSCurve",
	"./curves/NURBSSurface",
	"./curves/NURBSUtils",

	"./objects/Lensflare",
	"./objects/Reflector",
	"./objects/Refractor",

	"./loaders/TTFLoader",
//	"./loaders/LoaderSupport",
	"./loaders/3MFLoader",
	"./loaders/AMFLoader",
	"./loaders/AssimpJSONLoader",
	"./loaders/AssimpLoader",
	"./loaders/AWDLoader",
	"./loaders/BabylonLoader",
	"./loaders/ColladaLoader",
	"./loaders/DRACOLoader",
	"./loaders/FBXLoader",
	"./loaders/GCodeLoader",
	"./loaders/GLTFLoader",
	"./loaders/MTLLoader",
	"./loaders/OBJLoader",
	"./loaders/OBJLoader2",
	"./loaders/PCDLoader",
	"./loaders/PLYLoader",
	"./loaders/PRWMLoader",
	"./loaders/STLLoader",
	"./loaders/SVGLoader",
	"./loaders/TDSLoader",
	"./loaders/VRMLLoader",
	"./loaders/VTKLoader",
	"./loaders/XLoader",
	"./loaders/DDSLoader",
	"./loaders/PVRLoader",
	"./loaders/TGALoader",
	"./loaders/KTXLoader",

	"./modifiers/SimplifyModifier",
	"./modifiers/SubdivisionModifier",

	"./exporters/ColladaExporter",
	"./exporters/DRACOExporter",
	"./exporters/GLTFExporter",
	"./exporters/MMDExporter",
	"./exporters/OBJExporter",
	"./exporters/PLYExporter",
	"./exporters/STLExporter"

],function(THREE){
	return THREE;
});
define('skylark-threejs-ex', ['skylark-threejs-ex/main'], function (main) { return main; });


},this);