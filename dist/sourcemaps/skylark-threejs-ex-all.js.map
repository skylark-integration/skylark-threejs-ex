{"version":3,"sources":["skylark-threejs-ex-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","exports","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","hasOwnProperty","call","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","l","_lut","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","min","max","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Quaternion","z","w","_x","_y","_z","_w","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","console","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","c","cos","sin","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","angleTo","q","acos","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyNormalMatrix","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","denominator","theta","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","getZ","_canvas","_vector$1","Matrix3","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToBufferAttribute","count","setXYZ","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","g","h","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","rotation","cx","cy","scale","rotate","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isMesh","drawMode","isInstancedMesh","instanceMatrix","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","isScene","_points","_vector$2","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","setDrawMode","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","vertex","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","DataTexture","isWebGLRenderTargetCube","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","t2D","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","getShaderSource","lines","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","tangentSpaceNormalMap","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isRawShaderMaterial","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","isWebGLMultiviewRenderTarget","numViews","gammaOutput","gammaInput","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","state","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","internalFormat","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","texParameteri","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","DEFAULT_NUMVIEWS","maxNumViews","getCameraArray","isArrayCamera","cameras","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","Group","ArrayCamera","isGroup","_geometry","cameraLPos","cameraRPos","setProjectionFromUnion","cameraL","cameraR","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","WebVRManager","renderWidth","renderHeight","device","frameData","controllers","standingMatrix","standingMatrixInverse","framebufferScaleFactor","referenceSpaceType","window","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","tempCamera","cameraVR","isPresenting","currentPixelRatio","currentSize","eyeParameters","getEyeParameters","getPixelRatio","setDrawingBufferSize","animation","triggers","grips","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","hand","updateViewportFromBounds","bounds","getController","controller","getDevice","setDevice","setFramebufferScaleFactor","setReferenceSpaceType","getCamera","userHeight","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","buttons","pressed","updateControllers","getStandingMatrix","submitFrame","setFrameOfReferenceType","WebXRManager","session","referenceSpace","sortedInputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","onRequestReferenceSpace","updateInputSources","findInputSource","inputSources","handedness","updateCamera","getSession","setSession","updateRenderState","baseLayer","XRWebGLLayer","requestReferenceSpace","then","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","getPose","targetRaySpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","apply","calls","triangles","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateList","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","vr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","multiview","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","projectObject","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","isInterleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","zoomW","zoomH","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","THREE","geometryLoader","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$6","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_v1$5","_v2$3","_normalMatrix$1","_keys","VertexNormalsHelper","nNormals","objGeometry","objPos","objNorm","_vector$7","SpotLightHelper","cone","coneLength","coneWidth","_vector$8","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","_vector$9","_color1","_color2","HemisphereLightHelper","LightProbeHelper","GAMMA_OUTPUT","GridHelper","PolarGridHelper","radials","circles","PositionalAudioHelper","divisionsInnerAngle","divisionsOuterAngle","materialInnerAngle","materialOuterAngle","halfConeInnerAngle","halfConeOuterAngle","_v1$6","_v2$4","_normalMatrix$2","FaceNormalsHelper","_v1$7","_v2$5","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$a","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","renderReverseSided","renderSingleSided","activeMipMapLevel","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","threejs","CopyShader","tDiffuse","BokehShader","DEPTH_PACKING","PERSPECTIVE_CAMERA","tColor","tDepth","aperture","maxblur","nearClip","farClip","SAOShader","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","tNormal","cameraNear","cameraFar","cameraProjectionMatrix","cameraInverseProjectionMatrix","minResolution","kernelRadius","randomSeed","DepthLimitedBlurShader","KERNEL_RADIUS","sampleUvOffsets","sampleWeights","depthCutoff","BlurShaderUtils","createSampleWeights","stdDev","gaussian","exp","weights","createSampleOffsets","uvIncrement","configure","UnpackDepthRGBAShader","ConvolutionShader","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","uImageIncrement","cKernel","buildKernel","sigma","gauss","kernelSize","LuminosityHighPassShader","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","FXAAShader","SSAOShader","KERNEL_SIZE","tNoise","kernel","minDistance","SSAODepthShader","SSAOBlurShader","FilmShader","nIntensity","sIntensity","sCount","grayscale","DotScreenShader","tSize","LuminosityShader","SobelOperatorShader","ColorifyShader","ToneMapShader","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","TechnicolorShader","HueSaturationShader","FullScreenQuad","Pass","needsSwap","renderToScreen","ShaderPass","textureID","fsQuad","writeBuffer","readBuffer","MaskPass","writeValue","clearValue","REPLACE","ALWAYS","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget1","renderTarget2","passes","copyPass","clock","swapBuffers","addPass","insertPass","isLastEnabledPass","passIndex","maskActive","NOTEQUAL","effectiveWidth","effectiveHeight","RenderPass","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","NURBSUtils","findSpan","U","calcBasisFunctions","span","saved","rv","lv","temp","calcBSplinePoint","C","Nj","wNj","calcBasisFunctionDerivatives","zeroArr","ders","ndu","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","calcKoverI","nom","calcRationalCurveDerivatives","Pders","Aders","wders","calcNURBSDerivatives","calcSurfacePoint","V","uspan","vspan","Nu","Nv","Sw","NURBSCurve","degree","knots","controlPoints","startKnot","endKnot","hpoint","NURBSSurface","degree1","degree2","knots1","knots2","len1","len2","Lensflare","positionScreen","positionView","tempMap","occlusionMap","material1a","screenPosition","material1b","mesh1","LensflareElement","Shader","material2","mesh2","addElement","screenPositionPixels","validArea","invAspect","halfViewportWidth","halfViewportHeight","vecX","vecY","isLensflare","Reflector","textureWidth","textureHeight","clipBias","ReflectorShader","recursion","reflectorPlane","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","textureMatrix","virtualCamera","MathUtils","currentXrEnabled","xr","currentShadowAutoUpdate","Refractor","RefractorShader","refractor","refractorPlane","refractorWorldPosition","clipVector","updateRefractorPlane","updateVirtualCamera","updateTextureMatrix","TTFLoader","reversed","arraybuffer","reverseCommands","commands","command","opentype","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","getEnglishName","ascender","descender","underlinePosition","tables","post","head","original_font_information","ThreeMFLoader","availableExtensions","textureLoader","parseRelsXml","relsFileText","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","tex2coordNode","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colorObject","colorNode","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","parseComponentNode","componentNode","componentData","parseTransform","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertexNodes","vertexNode","triangleProperties","triangleNodes","triangleNode","triangleProperty","parseMeshNode","componentsNode","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","metadataNodes","metadataData","metadataNode","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","textureData","texture2ds","resources","texture2d","sourceURI","URL","createObjectURL","revokeObjectURL","buildBasematerialsMeshes","objectPindex","materialMap","meshes","trianglePropertiesProps","getBuild","buildBasematerial","positionData","buildTexturedMesh","uvData","buildVertexColorMesh","colorgroup","colorData","buildDefaultMesh","getResourceType","buildGroup","resourceMap","objectPid","analyzeObject","resourceId","resourceType","newMeshes","buildMeshes","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","displaycolor","buildComposite","compositeData","composite","component","buildObject","object3D","modelXml","applyExtensions","data3mf","relsName","modelRelsName","rels","modelRels","zip","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelParts","texturesParts","JSZip","ReferenceError","relsView","asArrayBuffer","modelPart","fileText","xmlData","documentElement","attr","$1","texturesPartName","model","printTicket","loadDocument","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","buildObjects","addExtension","AMFLoader","loadMaterials","matName","matId","loadedMaterial","childNodes","matChildEl","loadColor","matColor","loadMeshVolume","volume","materialid","currVolumeNode","firstElementChild","nodeValue","getElementsByTagName","nextElementSibling","loadMeshVertices","vertArray","currVerticesNode","vNode","nx","ny","nz","loadObject","objId","loadedObject","currColor","currObjNode","currMeshNode","volumes","loadedVertices","getUint8","amfName","amfAuthor","amfScale","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","sceneObject","defaultMaterial","author","part","newObject","objDefaultMaterial","newGeometry","AssimpLoader","Virtulous","KeyFrame","dist","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","tempAniQuat","tempAniMatrix","tempAniScale","KeyFrameTrack","_accelTable","addKey","sortKeys","parseFromThree","targets","parseFromCollada","keySortFunc","reTarget","compareitor","TrackTargetNodeNameCompare","keySearchAccel","key0","key1","find","Animation","addTrack","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","cloneTreeToBones","rootBone","nodeCount","nodeToBoneMap","sortWeights","indexes","pairs","findMatchingBone","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","mBones","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","mName","mParent","threeSkeletonRoot","toTHREE","threeSkeletonRootBone","threeNode","tbone","mOffsetMatrix","mMaterials","mIndexArray","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","mTangentBuffer","mBitangentBuffer","mWeights","mVertexId","mWeight","_weights","_bones","aiFace","mNumIndices","mIndices","aiString","str","aiNode","mTransformation","mNumChildren","mNumMeshes","mMeshes","mChildren","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","reader","getFloat32","dataAsFloat","dataAsBool","dataAsString","dataAsMap","namePropMapping","?mat.name","$mat.shadingm","$mat.twosided","$mat.wireframe","$clr.ambient","$clr.diffuse","$clr.specular","$clr.emissive","$clr.transparent","$clr.reflective","$mat.shininess","$mat.reflectivity","$mat.refracti","$tex.file","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","prop","veclerp","lm1","quatlerp","sampleTrack","lne","mValue","timeDist","mTime","dT","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","comp","pos","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","littleEndian","readFloat","dataview","val","Read_double","getFloat64","Read_uint8_t","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVectorKey","ReadBounds","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryBone","chunkID","shortened","ReadArray_aiVertexWeight","ReadBinaryMesh","mNumUVComponents","subArray32","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","ReadArray_aiQuatKey","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","ReadBinaryNode","mDepth","node2","mAnimations","mTextures","mLights","mCameras","compressed","aiOrigin_BEG","pFiledata","pScene","versionMajor","versionMinor","versionRevision","compileFlags","boneNode","markBones","off","ori","buff","bytes","newbuff","subArrayUint16","subArrayUint8","subArrayUint32","extendStream","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","InternReadFile","TGALoader","TGA_TYPE_NO_DATA","TGA_TYPE_INDEXED","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_INDEXED","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_BL","TGA_ORIGIN_BR","TGA_ORIGIN_UL","TGA_ORIGIN_UR","content","id_length","colormap_type","image_type","colormap_index","colormap_length","colormap_size","pixel_size","flags","tgaCheckHeader","use_rle","use_pal","use_grey","useOffscreen","createElement","imageData","createImageData","pixel_data","pixel_total","palettes","pixels","tgaParse","palette","x_start","y_start","x_step","y_step","x_end","y_end","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","colormap","tgaGetImageData8bits","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","getTgaRGBA","transferToImageBitmap","ColladaLoader","convertUpAxis","xml","parseStrings","parseFloats","parseInts","parseId","parseLibrary","libraryName","buildLibrary","parseAnimationSampler","inputs","nodeType","semantic","parseAnimationChannel","sid","arraySyntax","memberSyntax","member","sampler","buildAnimation","channels","samplers","sources","inputId","INPUT","outputId","OUTPUT","outputSource","buildAnimationChannel","createKeyframeTracks","getAnimation","nodes","getNode","transforms","defaultMatrix","keyframes","transformAnimationData","prepareAnimationData","quaternionData","scaleData","keyframe","defaultValue","getPrev","getNext","interpolate","createMissingKeyframes","buildAnimationClip","animationTracks","getAnimationClip","parseSkin","bindShapeMatrix","parseSource","joints","parseJoints","vertexWeights","parseVertexWeights","vcount","buildController","skin","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","descending","boneInverse","buildSkin","buildImage","init_from","getImage","parseEffectProfileCOMMON","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","parseEffectParameters","parseEffectParameter","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","parseEffectExtraTechnique","buildEffect","buildMaterial","effect","effects","profile","textureObject","surface","tgaLoader","getTextureLoader","wrapU","wrapV","offsetU","offsetV","repeatU","repeatV","parameter","float","double_sided","parseCameraOptics","parseCameraTechnique","parseCameraParameters","buildCamera","optics","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","parseLightTechnique","parseLightParameters","falloffAngle","buildLight","getLight","accessor","parseGeometryVertices","parseGeometryPrimitive","primitive","hasUV","inputname","checkUVCoordinates","primitives","uvsNeedsFix","buildGeometry","groupedPrimitives","groupPrimitives","primitiveType","buildGeometryType","materialKeys","input","prevLength","buildGeometryData","pushVector","sourceStride","buildKinematicsModel","parseKinematicsTechniqueCommon","parseKinematicsJoint","links","parseKinematicsLink","parseKinematicsJointParameter","limits","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","parsePhysicsRigidBody","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsBindJointAxis","param","tmpJointIndex","jointIndex","buildKinematicsScene","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","buildBoneHierarchy","visualScenes","visualScene","processed","instanceCamera","newObjects","instanceLight","fallbackMaterial","resolveMaterialBinding","instanceMaterials","buildVisualScene","getVisualScene","collada","parserError","errorText","errorElement","stack","TEXT_NODE","parserErrorToText","asset","hasAttribute","parseAssetUnit","upAxis","parseAssetUpAxis","parseAsset","kinematics","kinematicsModels","physicsModels","kinematicsScenes","prepareNodes","rigidBodies","bindJointAxis","setupAnimations","kinematicsModelId","kinematicsSceneId","visualSceneId","kinematicsModel","kinematicsScene","getKinematicsScene","jointMap","targetElement","parentVisualElement","parentElement","visualElement","visualElementName","buildTransformList","m0","getJointValue","jointData","setJointValue","setupKinematics","parseScene","DRACOLoader","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setSkipDequantization","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","preload","_initDecoder","useJS","WebAssembly","librariesPending","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","body","Worker","_taskCosts","_taskLoad","onmessage","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numPoints","num_points","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","GetAttributeInt16ForAllPoints","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","GetFaceFromMesh","releaseDecoderModule","getDecoderModule","Zlib","FBXLoader","fbxTree","connections","sceneGraph","FBXTreeParser","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","dv","FBXTree","getFbxVersion","convertFBXTimeToSeconds","FBXBuffer","CORRECT","convertArrayBufferToString","FBXText","cursor","read","num","isFbxFormatASCII","parseConnections","deformers","parseDeformers","geometryMap","connectionMap","Map","rawConnections","Connections","rawConnection","fromID","toID","parents","parentRelationship","ID","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","RelativeFilename","Filename","arrayBufferContent","Content","base64Content","parseImage","filename","fileName","textureMap","textureNodes","parseTexture","textureNode","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","Scaling","FileName","materialNodes","parseMaterial","materialNode","ShadingModel","parseParameters","BumpFactor","Diffuse","DiffuseColor","DisplacementFactor","Emissive","EmissiveColor","EmissiveFactor","Opacity","ReflectionFactor","Shininess","Specular","SpecularColor","LayeredTexture","DeformerNodes","Deformer","deformerNode","attrType","parseSkeleton","geometryID","rawTargets","parseMorphTargets","deformerNodes","rawBones","rawBone","transformLink","TransformLink","Indexes","Weights","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","modelMap","parseModels","modelNodes","Model","setLookAtProperties","parentConnections","connection","bindSkeleton","createAmbientLight","setupMorphMaterials","transformData","parentMatrixWorld","generateTransform","createCamera","createLight","createMesh","createCurve","getTransformData","subBone","cameraAttribute","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","innerWidth","innerHeight","AspectWidth","AspectHeight","FieldOfView","FocalLength","lightAttribute","LightType","Intensity","CastLightOnObject","FarAttenuationEnd","EnableFarAttenuation","InnerAngle","OuterAngle","CastShadows","FBX_Deformer","reduce","geo","inheritType","InheritType","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","Lcl_Rotation","postRotation","PostRotation","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","BindPoseNode","Pose","poseNodes","PoseNode","poseNode","Matrix","GlobalSettings","ambientColor","AmbientColor","setupMorphMaterial","matUuid","sharedMat","clonedMat","geoNodes","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","genBuffers","weightsIndices","normalAttribute","mappingType","prevMaterialIndex","startIndex","currentIndex","lastGroup","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","parseUVs","weightTable","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","wt","wIndex","Weight","weightIndex","comparedWeight","comparedWeightIndex","comparedWeightArray","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","materialIndices","Order","KnotVector","pointsValues","Form","animationClips","rawClips","parseClips","rawClip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","rawCurves","animationCurve","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","rawTracks","generateTracks","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","quaternionValues","morphNum","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","valuesSpan","absoluteSpan","numSubIntervals","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","matchComment","matchEmpty","matchBeginning","matchProperty","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","connProps","rest","append","parseNumberArray","parseNodeSpecialProperty","props","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","skip","endOfContent","getOffset","endOffset","getUint64","numProperties","nameLen","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","inflate","Inflate","reader2","decompress","nullByte","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","lLRM","lParentGRM","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","GCodeLoader","splitLayer","extruding","relative","currentLayer","pathMaterial","extrudingMaterial","newLayer","pathVertex","addSegment","absolute","tokens","cmd","args","addObject","GLTFLoader","dracoLoader","ddsLoader","_onError","gltf","setDRACOLoader","setDDSLoader","magic","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","headerView","BINARY_EXTENSION_HEADER_LENGTH","chunkView","chunkIndex","chunkLength","chunkType","BINARY_EXTENSION_CHUNK_TYPES","contentArray","BIN","byteOffset","extensionsUsed","extensionName","extensionsRequired","KHR_LIGHTS_PUNCTUAL","GLTFLightsExtension","KHR_MATERIALS_CLEARCOAT","GLTFMaterialsClearcoatExtension","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","GLTFMaterialsPbrSpecularGlossinessExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","MSFT_TEXTURE_DDS","GLTFTextureDDSExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","GLTFParser","lightDefs","loadLight","lightIndex","lightNode","lightDef","innerConeAngle","outerConeAngle","getMaterialType","extendParams","materialParams","materialDef","metallicRoughness","pbrMetallicRoughness","baseColorFactor","baseColorTexture","assignTexture","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","GLTFMeshStandardSGMaterial","isGLTFSpecularGlossinessMaterial","specularMapParsFragmentChunk","glossinessMapParsFragmentChunk","specularMapFragmentChunk","glossinessMapFragmentChunk","lightPhysicalFragmentChunk","glossiness","glossinessMap","_extraUniforms","uniformName","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","specularGlossinessParams","pbrSpecularGlossiness","diffuseFactor","diffuseTexture","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossMapDef","createMaterial","GLTFCubicSplineInterpolant","decodePrimitive","bufferViewIndex","bufferView","gltfAttributeMap","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","threeAttributeName","ATTRIBUTES","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","getDependency","extendTexture","texCoord","stride2","stride3","td","m1","WEBGL_CONSTANTS","FLOAT","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","LINEAR","REPEAT","SAMPLER_2D","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","5120","5121","5122","5123","5125","5126","WEBGL_FILTERS","9728","9729","9984","9985","9986","9987","WEBGL_WRAPPINGS","33071","33648","10497","WEBGL_TYPE_SIZES","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","INTERPOLATION","CUBICSPLINE","STEP","ALPHA_MODES","OPAQUE","MASK","BLEND","MIME_TYPE_FORMATS","image/png","image/jpeg","createDefaultMaterial","addUnknownExtensionsToUserData","knownExtensions","objectDef","gltfExtensions","assignExtrasToUserData","gltfDef","extras","meshDef","targetNames","createPrimitiveKey","primitiveDef","dracoExtension","createAttributesKey","attributesKey","removeAll","primitiveCache","fileLoader","addPrimitiveAttributes","assignAttributeAccessor","accessorIndex","gltfAttributeName","maxDisplacement","computeBounds","hasMorphPosition","hasMorphNormal","pendingPositionAccessors","pendingNormalAccessors","pendingAccessor","toTrianglesDrawMode","numberOfTriangles","newIndices","markDefs","getDependencies","dependencies","scenes","nodeDefs","skinDefs","skins","meshDefs","meshReferences","meshUses","skinLength","nodeIndex","nodeLength","nodeDef","dependency","loadScene","loadNode","loadMesh","loadAccessor","loadBufferView","loadBuffer","loadMaterial","loadSkin","loadAnimation","loadCamera","defs","def","bufferIndex","bufferDef","uri","bufferViewDef","bufferViews","sparse","pendingBufferViews","TypedArray","elementBytes","itemBytes","byteStride","ibSlice","ibCacheKey","ib","itemSizeIndices","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","textureIndex","webkitURL","textureDef","textureExtensions","isObjectURL","mapName","mapDef","assignFinalMaterial","useVertexTangents","useVertexColors","useFlatShading","useMorphTargets","useMorphNormals","pointsMaterial","lineMaterial","materialType","materialExtensions","sgExtension","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","alphaMode","alphaCutoff","normalTexture","occlusionTexture","strength","emissiveFactor","emissiveTexture","clearcoatExtension","loadGeometries","createDracoPrimitive","geometryPromise","meshIndex","cameraIndex","cameraDef","skinDef","skinEntry","inverseBindMatrices","animationIndex","animationDef","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","inputAccessors","outputAccessors","inputAccessor","outputAccessor","targetName","outputArray","scaled","isInterpolantFactoryMethodGLTFCubicSpline","instanceNum","buildNodeHierachy","nodeId","parentObject","pendingJoints","jointNodes","jointNode","sceneIndex","sceneDef","nodeIds","MTLLoader","setMaterialOptions","materialOptions","delimiter_pattern","materialsInfo","ss","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","materialsArray","nameLookup","converted","mn","covmat","save","lprop","normalizeRGB","ignoreZeroRGBs","materialName","getAsArray","createMaterial_","setMapForType","mapType","texParams","getTextureParams","invertTrProperty","matParams","items","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","mtllib","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertexPoint","addVertexLine","addNormal","addColor","addUVLine","ua","ub","uc","na","nb","nc","vLen","ia","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","lineFirstChar","trimLeft","lineData","vertexData","faceVertices","vertexParts","lineParts","lineVertices","lineUVs","li","llen","pointData","hasVertexColors","createdMaterials","miLen","sourceMaterial","materialHash","materialPoints","materialLine","PCDLoader","textData","PCDheader","result1","result2","headerLen","fields","viewpoint","sizeSum","rowSize","parseHeader","pcdData","rgb","normal_x","normal_y","normal_z","sizes","decompressedSize","decompressed","inData","outLength","ctrl","ref","inLength","outData","inPtr","outPtr","decompressLZF","row","PLYLoader","propertyNameMapping","setPropertyNameMapping","headerText","headerLength","currentElement","lineType","lineValues","comments","make_ply_element_property","propertValues","countType","itemType","parseASCIINumber","parseASCIIElement","parseASCII","currentElementCount","handleElement","postProcess","elementName","vertex_indices","vertex_index","texcoord","binaryRead","little_endian","getInt8","binaryReadElement","loc","parseBinary","PRWMLoader","bigEndianPlatform","isBigEndianPlatform","uint8Array","uint16Array","InvertedEncodingTypes","getMethods","copyFromBuffer","sourceArrayBuffer","viewType","fromBigEndian","readView","getMethod","arrayBuffer","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","cardinality","arrayType","decodePrwm","STLLoader","exception","matchDataViewAt","query","binData","array_buffer","ensureBinary","n_faces","isBinary","defaultR","defaultG","defaultB","normalX","normalY","normalZ","packedColor","vertexstart","componentIdx","patternSolid","patternFace","faceCounter","patternFloat","patternVertex","patternNormal","startVertex","endVertex","vertexCountPerFace","normalCountPerFace","ensureString","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","SVGLoader","defaultDPI","defaultUnit","parseArcCommand","rx","ry","x_axis_rotation","large_arc_flag","sweep_flag","dx2","dy2","x1p","y1p","rxs","rys","x1ps","y1ps","cr","dq","pq","cxp","cyp","svgAngle","ux","uy","vx","vy","ang","parseStyle","addStyle","svgName","jsName","adjustFunction","parseFloatWithUnits","positive","getReflection","number","unitConversion","mm","cm","in","pc","theUnit","endsWith","getNodeTransform","currentTransform","tempTransform0","transformsTexts","tIndex","transformText","openParPos","closeParPos","transformType","tempTransform1","tempTransform2","tempTransform3","parseNodeTransform","transformStack","getTransformScaleX","getTransformScaleY","tempV2","tempV3","control","isFirstPoint","doSetFirstPoint","numbers","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","subpath","parseCircleNode","parseEllipseNode","parseLineNode","fill","transfVec2","isRotated","isTransformRotated","subPath","transformPath","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","getStrokeStyle","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","pointsToStrokeWithBuffers","dupPoints","newPoints","removeDuplicatedPoints","nextPoint","innerSideModified","joinIsOnLeftSide","isMiter","isClosed","previousPoint","strokeWidth2","deltaU","u0","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","iPoint","normal1","u1","miterSide","miterLength2","segmentLengthPrev","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addCapGeometry","lastOuter","lastInner","TDSLoader","readFile","chunk","readChunk","MLIBMAGIC","CMAGIC","M3DMAGIC","nextChunk","M3D_VERSION","readDWord","debugMessage","MDATA","resetPosition","readMeshData","MESH_VERSION","MASTER_SCALE","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","readString","cur","N_TRI_OBJECT","readMesh","endChunk","MAT_NAME","MAT_WIRE","MAT_WIRE_SIZE","readByte","MAT_TWO_SIDE","MAT_ADDITIVE","MAT_DIFFUSE","readColor","MAT_SPECULAR","MAT_AMBIENT","MAT_SHININESS","readWord","MAT_TRANSPARENCY","MAT_TEXMAP","readMap","MAT_BUMPMAP","MAT_OPACMAP","MAT_SPECMAP","POINT_ARRAY","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","MSH_MAT_GROUP","readMaterialGroup","MAT_MAPNAME","MAT_MAP_UOFFSET","MAT_MAP_VOFFSET","MAT_MAP_USCALE","MAT_MAP_VSCALE","COLOR_24","LIN_COLOR_24","COLOR_F","LIN_COLOR_F","readInt","readShort","maxLength","VTKLoader","Float32Concat","first","second","firstLength","Int32Concat","getStringFile","stringFile","charArray","Base64toByteArray","b64","placeHolders","arr","Arr","lookup","revLookup","code","L","parseDataArray","ele","numBytes","header_type","rawData","byteData","blocks","cSizeStart","headerSize","dataOffsets","currentOffset","txt","currentBlockSize","resize","verify","el","dom","ActiveXObject","async","loadXML","parseError","reason","srcText","xmlToJson","item","hasChildNodes","old","PolyData","piece","Piece","sections","sectionIndex","numberOfSections","section","DataArray","dataArrayIndex","numberOfDataArrays","numberOfPoints","NumberOfPoints","normalsName","Name","NumberOfComponents","numberOfStrips","NumberOfStrips","connectivity","indicesIndex","strip","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","parseXML","includes","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","dataset","inds","numTriangles","newColors","pointIndex","dataView","vtk","findString","parsedString","indexCount","classCallCheck","createClass","XAnimationInfo","XAnimationObj","XKeyFrameInfo","XLoader","Constructor","descriptor","writable","protoProps","staticProps","animeName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","_flags","putFlags","putPos","putRot","putScl","XAnimationInfoArray","makeBonekeys","refObj","keyFrameRefactor","rot","scl","Frame","texloader","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","IsUvYReverse","Meshes","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_arg","_setArgOption","readed","foundNewLine","expect","fileLength","buf","_ensureBinary","_ensureString","_isBinary","_parseBinary","_parseASCII","_hierarchieParse","_changeRoot","_mainloop","_parent","endRead","find1","findEnd","findNext","nameData","_readLine","word","refs","DataEnder","nextStart","_refs","_this2","_mainProc","worked","models","breakFlag","_setFrame","_setFrameTransformMatrix","_getParentName","VertexSetedBoneCount","GeometryData","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","_makeOutputGeometry","_makeOutputAnimation","FrameTransformMatrix","_ParseMatrixData","putBone","mode_local","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","refI","stride4","_computeGroups","currentMaterialIndex","data2","data3","localObject","boneInf","XboneInf","BoneIndex","Indeces","initMatrix","OffsetMatrix","_i","_RootName","putting","rotq","putBones","_makePutBoneList","bi","boneIndex","bb","nowVertexID","nowVal","sk","offsetList","_bi","_buildGeometry","_initSkeleton","worldBaseMx","currentMxFrame","gbone","nowKeyType","keyInfo","frameFound","frameValue","animationObj","make","_model","_animation","put","findAnimation","c_key","_c_key","animationMixer","targetMatrix","DDSLoader","loadMipmaps","dds","fourCCToInt32","loadARGBMip","dataOffset","dataLength","srcBuffer","byteArray","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","fourCC","isRGBAUncompressed","caps2","PVRLoader","pvrDatas","_parseV3","_parseV2","bpp","metaLen","pixelFormat","numMipmaps","dataPtr","numSurfaces","_extract","bitmaskAlpha","numSurfs","formatFlags","_hasAlpha","pvr","blockWidth","blockHeight","widthBlocks","heightBlocks","mipLevel","sWidth","sHeight","surfIndex","KTXLoader","ktx","KhronosTextureContainer","pixelWidth","pixelHeight","numberOfFaces","numberOfMipmapLevels","facesExpected","identifier","headerDataView","endianness","glTypeSize","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","loadType","COMPRESSED_2D","HEADER_LEN","imageSize","COMPRESSED_3D","TEX_2D","TEX_3D","SimplifyModifier","removeFromArray","computeEdgeCollapseCost","sideFace","edgelength","curvature","sideFaces","hasVertex","minCurvature","dotProd","amt","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","assert","removeFace","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","computeNormal","addUniqueNeighbor","oldv","newv","modify","nextVertex","oldVertices","oldFaces","simplifiedGeometry","SubdivisionModifier","subdivisions","repeats","ABC","getEdge","vertexIndexA","vertexIndexB","processEdge","metaVertices","vertexA","vertexB","newEdge","newFace","newFaces","newUv","newUvs","oldUvs","newVertices","sourceEdges","newEdgeVertices","newSourceVertices","newUVs","currentEdge","edgeVertexWeight","adjacentVertexWeight","connectedFaces","beta","sourceVertexWeight","connectingVertexWeight","connectingEdge","connectingEdges","oldVertex","newSourceVertex","generateLookups","edge3","x4","x5","DRACOExporter","DracoEncoderModule","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","dracoEncoder","encoder","Encoder","MeshBuilder","AddFloatAttributeToMesh","AddFacesToMesh","TEX_COORD","COLOR","encodedData","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","outputData","MESH_SEQUENTIAL_ENCODING","INVALID","GENERIC","OBJExporter","indexVertex","indexVertexUvs","indexNormals","nbVertex","nbNormals","nbVertexUvs","normalMatrixWorld","parseMesh","parseLine","STLExporter","binary","bufferLength","setUint32","setFloat32","setUint16","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","THREE_TO_WEBGL","GLTFExporter","onDone","DEFAULT_OPTIONS","trs","onlyVisible","truncateDrawRange","embedImages","forceIndices","forcePowerOfTwoTextures","includeCustomExtensions","cachedCanvas","outputJSON","nodeMap","cachedData","attributesNormalized","uids","uid","getUID","equalArray","array1","every","getPaddedBufferSize","bufferSize","getPaddedArrayBuffer","paddingByte","paddedLength","serializeUserData","gltfProperty","applyTextureTransform","didTransform","transformDef","processBuffer","processAccessor","end2","bufferViewTarget","minMax","POSITIVE_INFINITY","NEGATIVE_INFINITY","getMinMax","componentSize","setUint8","gltfBufferView","processBufferView","gltfAccessor","3","4","16","processImage","cachedImages","gltfImage","ctx","toBlob","FileReader","readAsArrayBuffer","onloadend","processBufferViewImage","processTexture","gltfTexture","gltfSampler","processSampler","processMaterial","gltfMaterial","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","metalRoughMapDef","baseColorMapDef","specularMapDef","emissiveMapDef","normalMapDef","occlusionMapDef","processMesh","meshCacheKeyParts","meshCacheKey","gltfMesh","nameConversion","originalNormal","isNormalizedNormalAttribute","createNormalizedNormalAttribute","modifiedAttribute","reverseDictionary","warned","baseAttribute","relativeAttribute","didForceIndices","processAnimation","Utils","mergeMorphTargetTracks","trackBinding","trackNode","trackProperty","outputItemSize","processSkin","rootJoint","processNode","gltfNode","isOrtho","gltfCamera","orthographic","perspective","processCamera","processLight","processScene","gltfScene","objectsWithoutScene","processObjects","processInput","extensionsUsedList","binaryChunk","binaryChunkPrefix","jsonChunk","TextEncoder","encode","stringToArrayBuffer","jsonChunkPrefix","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","insertKeyframe","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","mergedTrack","targetCount","targetIndex","sourceInterpolant","keyframeIndex","ColladaExporter","textureDirectory","imageToData","naturalWidth","naturalHeight","base64ToBuffer","transMat","getFuncs","attrBufferToArray","subArray","st","ct","imageMap","libraryImages","imageNode","directory","original","geometryInfo","libraryGeometries","libraryEffects","libraryMaterials","libraryVisualScenes","processObject","getTransform","geomInfo","meshid","gname","gnode","posName","vertName","triangleInputs","normName","uvName","colName","subarr","polycount","processGeometry","matids","matidsArray","matid","transparencyNode","techniqueNode","effectnode","specLink","dae","toISOString","urdf","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","tagnum","ch","tag","PLYExporter","traverseMeshes","geomToBufferGeom","excludeAttributes","includeNormals","includeColors","includeUVs","vertexCount","faceCount","includeIndices","headerBin","vertexListLength","faceListLength","vOffset","fOffset","writtenVertices","vertexList","faceList"],"mappings":"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AkpE,MAAAlpE,MAAA,IAEA29I,eAAA39I,MAAA,GACA49I,cAAA59I,MAAA,KACA69I,YAAA79I,MAAA,IAEAuhD,cACA,oBAEA,gBACA,cACA,8EACA,KAEA+D,KAAA,MACA9D,gBACA,oBAEA,oBAEA,2BACA,8BACA,SAEA,4BAEA,0BACA,6BACA,SAEA,4BACA,2BACA,uCACA,8CAEA,uBACA,2BACA,sBACA,8BACA,+BACA,qBACA,4BAEA,gBAEA,qBAEA,yDACA,6BACA,uCACA,UACA,wBACA,WACA,IAEA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IAEA,2CACA,gCACA,oEACA,UACA,qEACA,WACA,IAEA,qGACA,uFACA,oFACA,4CAEA,iEACA,IAEA,mFACA,4BACA,0EACA,UACA,6EACA,WACA,IAEA,iCACA,4CAEA,6HACA,8DACA,8CACA,yEAEA,oKACA,IAEA,uCACA,4EACA,4DAEA,kEACA,0DACA,iDACA,oEACA,sEAEA,0EACA,kDACA,iEACA,8BAEA,8BACA,2BAEA,8CACA,yEACA,4BACA,2BAEA,gDACA,+CACA,kBACA,QAEA,mDACA,uFACA,gGACA,wBACA,MAEA,oCAEA,qDACA,IAGA,gBACA,yCACA,6CACA,eACA,MAEA,iDACA,0EAEA,kEAEA,2CACA,iDACA,KACA8D,KAAA,OAGA4lE,EAAA+xB,YAGAt+I,EAAA,qDACA,mBACA,SAAAusH,GAiKA,OA5JAA,EAAA4yB,wBACAx8F,SACAy8F,cAAA,EACAtB,cAAA,EACAC,mBAAA,GAEA17F,UACAu7F,UAAAv8I,MAAA,MACAo0B,MAAAp0B,MAAA,IAAAkrH,EAAA19G,QAAA,IAAA,MACAwwI,iBAAAh+I,OAAA,IAAAkrH,EAAA19G,QAAA,EAAA,KACAywI,eAAAj+I,OAAA,IACA48I,QAAA58I,MAAA,MACAu9I,YAAAv9I,MAAA,IACAw9I,WAAAx9I,MAAA,KACAk+I,aAAAl+I,MAAA,KAEAuhD,cACA,oBAEA,qBAEA,oBACA,yBAEA,gBACA,cACA,2BAEA,8EACA,KAEA+D,KAAA,MACA9D,gBACA,oBACA,qBAEA,8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A6lCA,OAllCAA,EAAAy0B,YAEA3+F,UAEAu7F,UAAAv8I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,QAAA,EAAA,KAAA,EAAA,OAIA+zC,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBACA,yBACA,GACA,8BACA,GACA,2BACA,GACA,oBACA,GACA,6FACA,GACA,uFACA,kEACA,wBACA,uCACA,+CACA,KACA,uEACA,KACA,wEACA,wEACA,cACA,uEACA,sEACA,0EACA,4EACA,6EACA,oEACA,wEACA,sEACA,KACA,0EACA,uEACA,wEACA,uEACA,2EACA,yEACA,wEACA,yEACA,kEACA,2EACA,0EACA,KACA,uFACA,GACA,oBACA,0BACA,iCACA,GACA,+BACA,GACA,iFACA,0BACA,SACA,kDACA,4DACA,yEACA,SACA,gCACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,6BACA,SACA,2CACA,sEACA,mEACA,8DACA,SACA,6EACA,2EACA,SACA,oDACA,wCACA,wCACA,iEACA,gDACA,SACA,iBACA,kBACA,SACA,mCACA,SACA,iFACA,0BACA,SACA,+CACA,6DACA,4EACA,yEACA,iCACA,SACA,iBACA,kBACA,SACA,gCACA,SACA,iFACA,uBACA,SACA,6CACA,6DACA,SACA,wDACA,yEACA,mEACA,SACA,6BACA,SACA,iFACA,iCACA,SACA,iCACA,SACA,gDACA,2CACA,SACA,gCACA,2CACA,aACA,+BACA,2CACA,aACA,gCACA,2CACA,aACA,qCACA,2CACA,aACA,SACA,iFACA,6BACA,SACA,oDACA,4DACA,SACA,6BACA,uCACA,aACA,gCACA,uCACA,aACA,+BACA,uCACA,aACA,iCACA,uCACA,aACA,SACA,GACA,GACA,iFACA,sDACA,iFACA,qEACA,iFACA,8BACA,SACA,oCACA,uEACA,uDACA,mEACA,SACA,iBACA,iFACA,2EACA,iFACA,8CACA,SACA,eACA,iFACA,8EACA,8DACA,gEACA,kEACA,6DACA,SACA,qCACA,SACA,GACA,GACA,iFACA,GACA,oDACA,GACA,iFACA,GACA,iFACA,4DACA,iFACA,kCACA,gCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,GACA,iFACA,yDACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,iFACA,sDACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,GACA,GACA,iFACA,GACA,8CACA,GACA,iFACA,2EACA,4BACA,kCACA,8BACA,8BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,6BACA,4CACA,gCACA,QACA,4BACA,mCACA,8BACA,gCACA,gCACA,gCACA,4BACA,8BACA,8BACA,8BACA,qCACA,SACA,iFACA,2BACA,kDACA,kEACA,SACA,iFACA,2BACA,mBACA,uBACA,uBACA,iDACA,6DACA,uDACA,wCACA,0EACA,YACA,2EACA,aACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,2BACA,2CACA,qDACA,oEACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,yBACA,8BACA,gCACA,gEACA,4EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,+DACA,wEACA,+DACA,wEACA,SACA,GACA,GACA,iFACA,2DACA,iFACA,gCACA,6DACA,QACA,6DACA,SACA,GACA,GACA,GACA,GACA,iFACA,GACA,kDACA,GACA,iFACA,qBACA,iFACA,8BACA,SACA,oFACA,gCACA,sBACA,SACA,sEACA,oFACA,qCACA,sCACA,oCACA,SACA,8BACA,4DACA,sCACA,iEACA,mBACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,oCACA,+CACA,wCACA,yCACA,sCACA,SACA,oCACA,+CACA,oEACA,mCACA,gCACA,gCACA,wCACA,yCACA,wCACA,yCACA,yCACA,SACA,oCACA,kDACA,+CACA,0CACA,2CACA,0CACA,2CACA,0CACA,SACA,oCACA,+DACA,+CACA,0CACA,2CACA,0CACA,2CACA,6CACA,SACA,oCACA,yDACA,gDACA,0DACA,oCACA,uCACA,8CACA,yEACA,6BACA,iCACA,mCACA,SACA,oCACA,iEACA,gDACA,2EACA,uCACA,+BACA,2BACA,gCACA,qCACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,iFACA,0CACA,2CACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,iEACA,yEACA,4DACA,uCACA,yBACA,qEACA,0CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,6DACA,yEACA,+EACA,+CACA,kEACA,qDACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,+EACA,sDACA,qCACA,+DACA,oDACA,0BACA,oDACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oDACA,yDACA,0EACA,2DACA,iDACA,wCACA,MACA,iFACA,uBACA,sBACA,sBACA,oCACA,kCACA,wDACA,4CACA,wCACA,oBACA,wCACA,qBACA,iBACA,wCACA,4DACA,iFACA,gBACA,4DACA,iFACA,iBACA,kCACA,qCACA,iBACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,YACA,oDACA,wCACA,oCACA,gBACA,oCACA,iBACA,mCACA,8GACA,8GACA,8GACA,8GACA,gBACA,wGACA,wGACA,wGACA,wGACA,iBACA,aACA,iFACA,2CACA,2CACA,4CACA,4CACA,2CACA,2CACA,+CACA,+CACA,sEACA,6CACA,oFACA,oDACA,iFACA,oBACA,kCACA,2BACA,gBACA,4BACA,iBACA,iFACA,oCACA,mCACA,+GACA,+GACA,+GACA,+GACA,gBACA,yGACA,yGACA,yGACA,yGACA,iBACA,YACA,uGACA,uGACA,aACA,iFACA,wCACA,wCACA,4CACA,8CACA,qDACA,qDACA,iFACA,4CACA,4CACA,uDACA,uDACA,iFACA,4CACA,4CACA,qEACA,qEACA,uDACA,uDACA,uDACA,uDACA,iFACA,sDACA,oDACA,gDACA,6DACA,iFACA,mCACA,mCACA,uDACA,0DACA,iFACA,2CACA,2CACA,wCACA,wCACA,yDACA,gEACA,0CACA,kEACA,iFACA,uBACA,uBACA,uBACA,wBACA,2DACA,2DACA,gDACA,gDACA,iFACA,uBACA,mDACA,mDACA,uBACA,mDACA,mDACA,kDACA,4DACA,6CACA,4DACA,iFACA,kCACA,qDACA,+CACA,6CACA,2CACA,iFACA,gCACA,gCACA,wDACA,wDACA,sDACA,sDACA,8CACA,sDACA,sDACA,iFACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,wCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,kEACA,kEACA,iDACA,kEACA,kEACA,iFACA,4CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,sEACA,sEACA,qDACA,sEACA,sEACA,iFACA,gDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,0EACA,0EACA,yDACA,0EACA,0EACA,iFACA,oDACA,uCACA,wFACA,wFACA,6EACA,6EACA,uEACA,uEACA,8EACA,8EACA,6DACA,8EACA,8EACA,iFACA,gCACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,yCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,mEACA,mEACA,iDACA,mEACA,mEACA,iFACA,6CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,uEACA,uEACA,qDACA,uEACA,uEACA,iFACA,iDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,2EACA,2EACA,yDACA,2EACA,2EACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,aACA,iFACA,4BACA,iCACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,iFACA,wCACA,wCACA,4CACA,4CACA,iFACA,4DACA,4CACA,4DACA,gDACA,iFACA,yCACA,uCACA,8DACA,6CACA,8DACA,uDACA,iFACA,gEACA,mEACA,8DACA,8DACA,8BACA,wCACA,YACA,+DACA,aACA,IACA,iFACA,SACA,GACA,gBACA,oCACA,WACA,iBACA,gBACA,gBACA,gBACA,kBACA,iBACA,iBACA,iBACA,YACA,aACA,cACA,WACA,WACA,WACA,gBACA,OACA,GACA,wDACA,iDACA,KACA8D,KAAA,OAIA4lE,EAAAy0B,aAGAhhJ,EAAA,yCACA,mBACA,SAAAusH,GAySA,OA/RAA,EAAA00B,YAEAt+F,SACAo7F,mBAAA,EACAmD,YAAA,IAGA7+F,UAEAu7F,UAAAv8I,MAAA,MACAs9I,SAAAt9I,MAAA,MACA48I,QAAA58I,MAAA,MACA8/I,QAAA9/I,MAAA,MACA+/I,QAAA//I,MAAA,MACAu9I,YAAAv9I,MAAA,MACAw9I,WAAAx9I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,SACAiwI,wBAAAz9I,MAAA,IAAAkrH,EAAAxmG,SACAg5H,+BAAA19I,MAAA,IAAAkrH,EAAAxmG,SACAk5H,cAAA59I,MAAA,GACAggJ,aAAAhgJ,MAAA,MACA05H,aAAA15H,MAAA,MAIAuhD,cAEA,oBAEA,gBAEA,cAEA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,8BACA,6BACA,4BACA,4BAEA,sCAEA,2BAEA,4BACA,2BACA,uCACA,8CAEA,8BACA,6BACA,6BAEA,oBAEA,qBAEA,mDAEA,kDAEA,IAEA,yDAEA,gCAEA,gEACA,kFACA,uEAEA,UAEA,iDAEA,WAEA,IAEA,2CAEA,gCAEA,sEAEA,UAEA,uEAEA,WAEA,IAEA,qGAEA,uFAEA,oFAEA,4CAEA,iEAEA,IAEA,uDAEA,0EAEA,IAEA,gBAEA,mCACA,qCAEA,8DACA,4CAEA,qEACA,6DAIA,iFACA,mDACA,gEAEA,0BAEA,8CAEA,sDACA,yEAEA,+EACA,0CAEA,0DAEA,yDACA,4FACA,6CAEA,0DAEA,0BAEA,QAEA,MAEA,qEAEA,yDAEA,KAEA8D,KAAA,OAIA4lE,EAAA+0B,iBAEA3+F,SACAo7F,mBAAA,GAGA17F,UAEA47F,QAAA58I,MAAA,MACAu9I,YAAAv9I,MAAA,MACAw9I,WAAAx9I,MAAA,OAIAuhD,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,4BAEA,4BACA,2BAEA,oBAEA,qBAEA,yDAEA,gCAEA,gEACA,kFACA,uEAEA,UAEA,iDAEA,WAEA,IAEA,gBAEA,yCACA,qDAEA,KAEA8D,KAAA,OAIA4lE,EAAAg1B,gBAEAl/F,UAEAu7F,UAAAv8I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,UAIA+zC,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,8BAEA,2BAEA,oBAEA,gBAEA,2CACA,wBAEA,wCAEA,0CAEA,sEACA,yDAEA,QAEA,MAEA,gEAEA,KAEA8D,KAAA,OAIA4lE,EAAA00B,aAGAjhJ,EAAA,yCACA,mBACA,SAAAusH,GA0GA,OAnFAA,EAAAi1B,YAEAn/F,UAEAu7F,UAAAv8I,MAAA,MACAizD,MAAAjzD,MAAA,GACAogJ,YAAApgJ,MAAA,IACAqgJ,YAAArgJ,MAAA,KACAsgJ,QAAAtgJ,MAAA,MACAugJ,WAAAvgJ,MAAA,IAIAuhD,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,oBAGA,sBAEA,0BAGA,4BAGA,4BAGA,wBAEA,8BAEA,oBAEA,gBAGA,sDAGA,mCAGA,0FAGA,oEAGA,2EAGA,oGAGA,sBAEA,+EAEA,MAEA,uDAEA,KAEA8D,KAAA,OAIA4lE,EAAAi1B,aAGAxhJ,EAAA,8CACA,mBACA,SAAAusH,GAsEA,OA7DAA,EAAAs1B,iBAEAx/F,UAEAu7F,UAAAv8I,MAAA,MACAygJ,OAAAzgJ,MAAA,IAAAkrH,EAAA19G,QAAA,IAAA,MACA8E,QAAAtS,MAAA,IAAAkrH,EAAA19G,QAAA,GAAA,KACAyD,OAAAjR,MAAA,MACAuf,OAAAvf,MAAA,IAIAuhD,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,uBACA,uBACA,uBACA,sBAEA,8BAEA,oBAEA,oBAEA,8CAEA,qCACA,+EAEA,sDAEA,IAEA,gBAEA,6CAEA,2DAEA,8EAEA,KAEA8D,KAAA,OAIA4lE,EAAAs1B,kBAGA7hJ,EAAA,+CACA,mBACA,SAAAusH,GAoDA,OA5CAA,EAAAw1B,kBAEA1/F,UAEAu7F,UAAAv8I,MAAA,OAIAuhD,cAEA,oBAEA,gBAEA,cAEA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,oBAEA,8BAEA,oBAEA,gBAEA,6CAEA,sDAEA,6CAEA,KAEA8D,KAAA,OAIA4lE,EAAAw1B,mBAEA/hJ,EAAA,kDACA,mBACA,SAAAusH,GA4FA,OAlFAA,EAAAy1B,qBAEA3/F,UAEAu7F,UAAAv8I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,UAIA+zC,cAEA,oBAEA,gBAEA,cAEA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,8BACA,2BACA,oBAEA,gBAEA,iEAIA,0DACA,0DAMA,yEACA,yEACA,yEAIA,yEACA,yEACA,yEAIA,yEACA,yEACA,yEAIA,8EACA,gEACA,+DAIA,8EACA,gEACA,+DAIA,qEAEA,yCAEA,KAEA8D,KAAA,OAIA4lE,EAAAy1B,sBAGAhiJ,EAAA,6CACA,mBACA,SAAAusH,GAmDA,OA5CAA,EAAA01B,gBAEA5/F,UAEAu7F,UAAAv8I,MAAA,MACAynC,OAAAznC,MAAA,IAAAkrH,EAAA/jF,MAAA,YAIAoa,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,sBACA,8BAEA,oBAEA,gBAEA,6CAEA,6CACA,sCAEA,+CAEA,KAEA8D,KAAA,OAIA4lE,EAAA01B,iBAGAjiJ,EAAA,4CACA,mBACA,SAAAusH,GA+EA,OAxEAA,EAAA21B,eAEA7/F,UAEAu7F,UAAAv8I,MAAA,MACA8gJ,kBAAA9gJ,MAAA,GACA+gJ,cAAA/gJ,MAAA,MACAghJ,cAAAhhJ,MAAA,IACAihJ,cAAAjhJ,MAAA,KACAkhJ,YAAAlhJ,MAAA,KAGAuhD,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,oBAEA,8BAEA,oBAEA,4BACA,8BACA,8BACA,2BACA,oCACA,QACA,oCACA,SAEA,gCACA,6BAEA,iEACA,UACA,wCACA,WAGA,2DAGA,gFAEA,qHACA,oCACA,IAEA,gBAEA,6CAEA,0DAEA,KAEA8D,KAAA,OAIA4lE,EAAA21B,gBAGAliJ,EAAA,gDACA,mBACA,SAAAusH,GAiDA,OAvCAA,EAAAi2B,mBAEAngG,UAEAu7F,UAAAv8I,MAAA,OAIAuhD,cAEA,oBAEA,gBAEA,cACA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,8BACA,oBAEA,gBAEA,4DACA,gFAEA,2BAEA,KAEA8D,KAAA,OAIA4lE,EAAAi2B,oBAGAxiJ,EAAA,kDACA,mBACA,SAAAusH,GAuEA,OA7DAA,EAAAk2B,qBAEApgG,UAEAu7F,UAAAv8I,MAAA,MACAwpC,KAAAxpC,MAAA,GACAypC,YAAAzpC,MAAA,IAIAuhD,cAEA,oBAEA,gBAEA,cAEA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,8BACA,qBACA,4BAEA,oBAEA,gBAEA,+CAGA,oCACA,0CACA,uFACA,0CACA,6BACA,0CACA,0CACA,yCACA,OAGA,8EACA,4BACA,6FACA,aACA,wEACA,MAEA,KAEA8D,KAAA,OAIA4lE,EAAAk2B,sBAGAziJ,EAAA,0CACA,mBACA,SAAAusH,GA8BA,IAEAhyG,EACA+X,EAEAowH,EA0CA,OA5EAn2B,EAAAo2B,KAAA,WAGA5gJ,KAAAw+C,SAAA,EAGAx+C,KAAA6gJ,WAAA,EAGA7gJ,KAAAqkD,OAAA,EAGArkD,KAAA8gJ,gBAAA,GAIAjhJ,OAAAM,OAAAqqH,EAAAo2B,KAAAhhJ,WAEAgkB,QAAA,aAEAwgC,OAAA,WAEA71C,QAAAmJ,MAAA,iEAOA8yG,EAAAo2B,KAAAD,gBAEAnoI,EAAA,IAAAgyG,EAAA9E,oBAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACAn1F,EAAA,IAAAi6F,EAAAz2D,oBAAA,EAAA,GAEA4sF,EAAA,SAAAjwH,GAEA1wB,KAAA84F,MAAA,IAAA0xB,EAAAvxE,KAAA1oB,EAAAG,IAIA7wB,OAAAC,eAAA6gJ,EAAA/gJ,UAAA,YAEAG,IAAA,WAEA,OAAAC,KAAA84F,MAAApoE,UAIAljB,IAAA,SAAAlO,GAEAU,KAAA84F,MAAApoE,SAAApxB,KAMAO,OAAAM,OAAAwgJ,EAAA/gJ,WAEAijB,QAAA,WAEA7iB,KAAA84F,MAAAvoE,SAAA1N,WAIAuhC,OAAA,SAAAL,GAEAA,EAAAK,OAAApkD,KAAA84F,MAAAtgF,MAMAmoI,GAIAn2B,EAAAo2B,OAEA3iJ,EAAA,gDACA,kBACA,UACA,SAAAusH,GAoEA,OA/DAA,EAAAu2B,WAAA,SAAAr8F,EAAAs8F,GAEAx2B,EAAAo2B,KAAAhgJ,KAAAZ,MAEAA,KAAAghJ,eAAAhiJ,IAAAgiJ,EAAAA,EAAA,WAEAt8F,aAAA8lE,EAAA7pE,gBAEA3gD,KAAAsgD,SAAAoE,EAAApE,SAEAtgD,KAAA0wB,SAAAg0B,GAEAA,IAEA1kD,KAAAsgD,SAAAkqE,EAAAhqE,cAAAtyC,MAAAw2C,EAAApE,UAEAtgD,KAAA0wB,SAAA,IAAA85F,EAAA7pE,gBAEAC,QAAA/gD,OAAAM,UAAAukD,EAAA9D,SACAN,SAAAtgD,KAAAsgD,SACAO,aAAA6D,EAAA7D,aACAC,eAAA4D,EAAA5D,kBAMA9gD,KAAAihJ,OAAA,IAAAz2B,EAAAo2B,KAAAD,eAAA3gJ,KAAA0wB,WAIA85F,EAAAu2B,WAAAnhJ,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAo2B,KAAAhhJ,YAEAuO,YAAAq8G,EAAAu2B,WAEA38F,OAAA,SAAAL,EAAAm9F,EAAAC,GAEAnhJ,KAAAsgD,SAAAtgD,KAAAghJ,aAEAhhJ,KAAAsgD,SAAAtgD,KAAAghJ,WAAA1hJ,MAAA6hJ,EAAA1/H,SAIAzhB,KAAAihJ,OAAAvwH,SAAA1wB,KAAA0wB,SAEA1wB,KAAA8gJ,gBAEA/8F,EAAAI,gBAAA,MACAnkD,KAAAihJ,OAAA78F,OAAAL,KAIAA,EAAAI,gBAAA+8F,GAEAlhJ,KAAAqkD,OAAAN,EAAAM,MAAAN,EAAAq8B,eAAAr8B,EAAAs8B,eAAAt8B,EAAAu8B,kBACAtgF,KAAAihJ,OAAA78F,OAAAL,OAQAymE,EAAAu2B,aAGA9iJ,EAAA,8CACA,kBACA,UACA,SAAAusH,EAAAo2B,GA4GA,OAvGAp2B,EAAA42B,SAAA,SAAAp9F,EAAAxrC,GAEAgyG,EAAAo2B,KAAAhgJ,KAAAZ,MAEAA,KAAAgkD,MAAAA,EACAhkD,KAAAwY,OAAAA,EAEAxY,KAAAqkD,OAAA,EACArkD,KAAA6gJ,WAAA,EAEA7gJ,KAAA8V,SAAA,GAIA00G,EAAA42B,SAAAxhJ,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAo2B,KAAAhhJ,YAEAuO,YAAAq8G,EAAA42B,SAEAh9F,OAAA,SAAAL,EAAAm9F,EAAAC,GAEA,IAeAE,EAAAC,EAfA9hI,EAAAukC,EAAAtkC,aACA0nD,EAAApjB,EAAAojB,MAIAA,EAAApU,QAAAhsB,MAAAw+C,SAAA,GACApe,EAAApU,QAAAlU,MAAA0mC,SAAA,GAIApe,EAAApU,QAAAhsB,MAAA0+C,WAAA,GACAte,EAAApU,QAAAlU,MAAA4mC,WAAA,GAMAzlF,KAAA8V,SAEAurI,EAAA,EACAC,EAAA,IAIAD,EAAA,EACAC,EAAA,GAIAn6E,EAAApU,QAAAzO,QAAAwoB,SAAA,GACA3F,EAAApU,QAAAzO,QAAAuiC,MAAArnE,EAAA+hI,QAAA/hI,EAAA+hI,QAAA/hI,EAAA+hI,SACAp6E,EAAApU,QAAAzO,QAAA2hC,QAAAzmE,EAAAgiI,OAAAH,EAAA,YACAl6E,EAAApU,QAAAzO,QAAAuoB,SAAAy0E,GACAn6E,EAAApU,QAAAzO,QAAAmhC,WAAA,GAIA1hC,EAAAI,gBAAAg9F,GACAnhJ,KAAAqkD,OAAAN,EAAAM,QACAN,EAAAK,OAAApkD,KAAAgkD,MAAAhkD,KAAAwY,QAEAurC,EAAAI,gBAAA+8F,GACAlhJ,KAAAqkD,OAAAN,EAAAM,QACAN,EAAAK,OAAApkD,KAAAgkD,MAAAhkD,KAAAwY,QAIA2uD,EAAApU,QAAAhsB,MAAA0+C,WAAA,GACAte,EAAApU,QAAAlU,MAAA4mC,WAAA,GAIAte,EAAApU,QAAAzO,QAAAmhC,WAAA,GACAte,EAAApU,QAAAzO,QAAA2hC,QAAAzmE,EAAAiiI,MAAA,EAAA,YACAt6E,EAAApU,QAAAzO,QAAAuiC,MAAArnE,EAAAkiI,KAAAliI,EAAAkiI,KAAAliI,EAAAkiI,MACAv6E,EAAApU,QAAAzO,QAAAmhC,WAAA,MAOA+kC,EAAAm3B,cAAA,WAEAn3B,EAAAo2B,KAAAhgJ,KAAAZ,MAEAA,KAAA6gJ,WAAA,GAIAr2B,EAAAm3B,cAAA/hJ,UAAAC,OAAAkiB,OAAAyoG,EAAAo2B,KAAAhhJ,WAEAC,OAAAM,OAAAqqH,EAAAm3B,cAAA/hJ,WAEAwkD,OAAA,SAAAL,GAEAA,EAAAojB,MAAApU,QAAAzO,QAAAmhC,WAAA,GACA1hC,EAAAojB,MAAApU,QAAAzO,QAAAwoB,SAAA,MAMA09C,EAAA42B,WAGAnjJ,EAAA,oDACA,kBACA,wBACA,eACA,cACA,SAAAusH,GAkOA,OA5NAA,EAAAo3B,eAAA,SAAA79F,EAAAF,GAIA,GAFA7jD,KAAA+jD,SAAAA,OAEA/kD,IAAA6kD,EAAA,CAEA,IAAArzB,GACApQ,UAAAoqG,EAAA3lH,aACAsb,UAAAqqG,EAAA3lH,aACAwb,OAAAmqG,EAAA1kH,WACA6b,eAAA,GAGA+R,EAAAqwB,EAAA9vB,QAAA,IAAAu2F,EAAA19G,SACA9M,KAAAiiF,YAAAl+B,EAAA02B,gBACAz6E,KAAA+hF,OAAAruD,EAAAnmB,MACAvN,KAAAgiF,QAAAtuD,EAAAjmB,QAEAo2C,EAAA,IAAA2mE,EAAAppG,kBAAAphB,KAAA+hF,OAAA/hF,KAAAiiF,YAAAjiF,KAAAgiF,QAAAhiF,KAAAiiF,YAAAzxD,IACA/O,QAAAhjB,KAAA,0BAIAuB,KAAAiiF,YAAA,EACAjiF,KAAA+hF,OAAAl+B,EAAAt2C,MACAvN,KAAAgiF,QAAAn+B,EAAAp2C,OAIAzN,KAAA6hJ,cAAAh+F,EACA7jD,KAAA8hJ,cAAAj+F,EAAA31C,QACAlO,KAAA8hJ,cAAArgI,QAAAhjB,KAAA,qBAEAuB,KAAAkhJ,YAAAlhJ,KAAA6hJ,cACA7hJ,KAAAmhJ,WAAAnhJ,KAAA8hJ,cAEA9hJ,KAAA8gJ,gBAAA,EAEA9gJ,KAAA+hJ,eAIA/iJ,IAAAwrH,EAAAoxB,YAEArtI,QAAAmJ,MAAA,wDAIA1Y,IAAAwrH,EAAAu2B,YAEAxyI,QAAAmJ,MAAA,mDAIA1X,KAAAgiJ,SAAA,IAAAx3B,EAAAu2B,WAAAv2B,EAAAoxB,YAEA57I,KAAAiiJ,MAAA,IAAAz3B,EAAA8G,OAIAzxH,OAAAM,OAAAqqH,EAAAo3B,eAAAhiJ,WAEAsiJ,YAAA,WAEA,IAAA/jI,EAAAne,KAAAmhJ,WACAnhJ,KAAAmhJ,WAAAnhJ,KAAAkhJ,YACAlhJ,KAAAkhJ,YAAA/iI,GAIAgkI,QAAA,SAAAz/C,GAEA1iG,KAAA+hJ,OAAAx4I,KAAAm5F,GACAA,EAAA9+E,QAAA5jB,KAAA+hF,OAAA/hF,KAAAiiF,YAAAjiF,KAAAgiF,QAAAhiF,KAAAiiF,cAIAmgE,WAAA,SAAA1/C,EAAAniG,GAEAP,KAAA+hJ,OAAAp4I,OAAApJ,EAAA,EAAAmiG,IAIA2/C,kBAAA,SAAAC,GAEA,IAAA,IAAA9jJ,EAAA8jJ,EAAA,EAAA9jJ,EAAAwB,KAAA+hJ,OAAAzjJ,OAAAE,IAEA,GAAAwB,KAAA+hJ,OAAAvjJ,GAAAggD,QAEA,OAAA,EAMA,OAAA,GAIA4F,OAAA,SAAAqgF,QAIAzlI,IAAAylI,IAEAA,EAAAzkI,KAAAiiJ,MAAA7vB,YAIA,IAIA1vB,EAAAlkG,EAJAylD,EAAAjkD,KAAA+jD,SAAAG,kBAEAq+F,GAAA,EAEAhvH,EAAAvzB,KAAA+hJ,OAAAzjJ,OAEA,IAAAE,EAAA,EAAAA,EAAA+0B,EAAA/0B,IAIA,IAAA,KAFAkkG,EAAA1iG,KAAA+hJ,OAAAvjJ,IAEAggD,QAAA,CAKA,GAHAkkD,EAAAo+C,eAAA9gJ,KAAA8gJ,gBAAA9gJ,KAAAqiJ,kBAAA7jJ,GACAkkG,EAAAt+C,OAAApkD,KAAA+jD,SAAA/jD,KAAAkhJ,YAAAlhJ,KAAAmhJ,WAAA1c,EAAA8d,GAEA7/C,EAAAm+C,UAAA,CAEA,GAAA0B,EAAA,CAEA,IAAA/iI,EAAAxf,KAAA+jD,SAAAtkC,aACA6kC,EAAAtkD,KAAA+jD,SAAAojB,MAAApU,QAAAzO,QAGAA,EAAA2hC,QAAAzmE,EAAAgjI,SAAA,EAAA,YAEAxiJ,KAAAgiJ,SAAA59F,OAAApkD,KAAA+jD,SAAA/jD,KAAAkhJ,YAAAlhJ,KAAAmhJ,WAAA1c,GAGAngF,EAAA2hC,QAAAzmE,EAAAiiI,MAAA,EAAA,YAIAzhJ,KAAAkiJ,mBAIAljJ,IAAAwrH,EAAA42B,WAEA1+C,aAAA8nB,EAAA42B,SAEAmB,GAAA,EAEA7/C,aAAA8nB,EAAAm3B,gBAEAY,GAAA,IAQAviJ,KAAA+jD,SAAAI,gBAAAF,IAIA2hC,MAAA,SAAA/hC,GAEA,QAAA7kD,IAAA6kD,EAAA,CAEA,IAAAnwB,EAAA1zB,KAAA+jD,SAAA9vB,QAAA,IAAAu2F,EAAA19G,SACA9M,KAAAiiF,YAAAjiF,KAAA+jD,SAAA02B,gBACAz6E,KAAA+hF,OAAAruD,EAAAnmB,MACAvN,KAAAgiF,QAAAtuD,EAAAjmB,QAEAo2C,EAAA7jD,KAAA6hJ,cAAA3zI,SACA0V,QAAA5jB,KAAA+hF,OAAA/hF,KAAAiiF,YAAAjiF,KAAAgiF,QAAAhiF,KAAAiiF,aAIAjiF,KAAA6hJ,cAAAh/H,UACA7iB,KAAA8hJ,cAAAj/H,UACA7iB,KAAA6hJ,cAAAh+F,EACA7jD,KAAA8hJ,cAAAj+F,EAAA31C,QAEAlO,KAAAkhJ,YAAAlhJ,KAAA6hJ,cACA7hJ,KAAAmhJ,WAAAnhJ,KAAA8hJ,eAIAl+H,QAAA,SAAArW,EAAAE,GAEAzN,KAAA+hF,OAAAx0E,EACAvN,KAAAgiF,QAAAv0E,EAEA,IAAAg1I,EAAAziJ,KAAA+hF,OAAA/hF,KAAAiiF,YACAygE,EAAA1iJ,KAAAgiF,QAAAhiF,KAAAiiF,YAEAjiF,KAAA6hJ,cAAAj+H,QAAA6+H,EAAAC,GACA1iJ,KAAA8hJ,cAAAl+H,QAAA6+H,EAAAC,GAEA,IAAA,IAAAlkJ,EAAA,EAAAA,EAAAwB,KAAA+hJ,OAAAzjJ,OAAAE,IAEAwB,KAAA+hJ,OAAAvjJ,GAAAolB,QAAA6+H,EAAAC,IAMA10D,cAAA,SAAAG,GAEAnuF,KAAAiiF,YAAAkM,EAEAnuF,KAAA4jB,QAAA5jB,KAAA+hF,OAAA/hF,KAAAgiF,YAQAwoC,EAAAo3B,iBAGA3jJ,EAAA,gDACA,kBACA,UACA,SAAAusH,EAAAo2B,GAiFA,OA5EAp2B,EAAAm4B,WAAA,SAAA3+F,EAAAxrC,EAAAiU,EAAAk5D,EAAA0G,GAEAm+B,EAAAo2B,KAAAhgJ,KAAAZ,MAEAA,KAAAgkD,MAAAA,EACAhkD,KAAAwY,OAAAA,EAEAxY,KAAAysB,iBAAAA,EAEAzsB,KAAA2lF,WAAAA,EACA3lF,KAAAqsF,gBAAArtF,IAAAqtF,EAAAA,EAAA,EAEArsF,KAAAqkD,OAAA,EACArkD,KAAAkmF,YAAA,EACAlmF,KAAA6gJ,WAAA,GAIAr2B,EAAAm4B,WAAA/iJ,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAo2B,KAAAhhJ,YAEAuO,YAAAq8G,EAAAm4B,WAEAv+F,OAAA,SAAAL,EAAAm9F,EAAAC,GAEA,IAGAyB,EAAAC,EAAAC,EAHAC,EAAAh/F,EAAAo8B,UACAp8B,EAAAo8B,WAAA,OAIAnhF,IAAAgB,KAAAysB,mBAEAq2H,EAAA9iJ,KAAAgkD,MAAAv3B,iBAEAzsB,KAAAgkD,MAAAv3B,iBAAAzsB,KAAAysB,kBAIAzsB,KAAA2lF,aAEAi9D,EAAA7+F,EAAAyoC,gBAAA7jD,SACAk6G,EAAA9+F,EAAA2oC,gBAEA3oC,EAAA0oC,cAAAzsF,KAAA2lF,WAAA3lF,KAAAqsF,aAIArsF,KAAAkmF,YAEAniC,EAAAmiC,aAIAniC,EAAAI,gBAAAnkD,KAAA8gJ,eAAA,KAAAK,GAGAnhJ,KAAAqkD,OAAAN,EAAAM,MAAAN,EAAAq8B,eAAAr8B,EAAAs8B,eAAAt8B,EAAAu8B,kBACAv8B,EAAAK,OAAApkD,KAAAgkD,MAAAhkD,KAAAwY,QAEAxY,KAAA2lF,YAEA5hC,EAAA0oC,cAAAm2D,EAAAC,QAIA7jJ,IAAAgB,KAAAysB,mBAEAzsB,KAAAgkD,MAAAv3B,iBAAAq2H,GAIA/+F,EAAAo8B,UAAA4iE,KAMAv4B,EAAAm4B,aAGA1kJ,EAAA,wCACA,mBACA,SAAAusH,GAsdA,OAxcAA,EAAAw4B,YAWAC,SAAA,SAAAjtI,EAAA8lB,EAAAonH,GAEA,IAAAh4I,EAAAg4I,EAAA5kJ,OAAA0X,EAAA,EAEA,GAAA8lB,GAAAonH,EAAAh4I,GAEA,OAAAA,EAAA,EAIA,GAAA4wB,GAAAonH,EAAAltI,GAEA,OAAAA,EAQA,IAJA,IAAAjK,EAAAiK,EACAhK,EAAAd,EACA0pG,EAAAz1G,KAAAK,OAAAuM,EAAAC,GAAA,GAEA8vB,EAAAonH,EAAAtuC,IAAA94E,GAAAonH,EAAAtuC,EAAA,IAEA94E,EAAAonH,EAAAtuC,GAEA5oG,EAAA4oG,EAIA7oG,EAAA6oG,EAIAA,EAAAz1G,KAAAK,OAAAuM,EAAAC,GAAA,GAIA,OAAA4oG,GAeAuuC,mBAAA,SAAAC,EAAAtnH,EAAA9lB,EAAAktI,GAEA,IAAA5jD,KACA32E,KACAC,KACA02E,EAAA,GAAA,EAEA,IAAA,IAAA/sE,EAAA,EAAAA,GAAAvc,IAAAuc,EAAA,CAEA5J,EAAA4J,GAAAuJ,EAAAonH,EAAAE,EAAA,EAAA7wH,GACA3J,EAAA2J,GAAA2wH,EAAAE,EAAA7wH,GAAAuJ,EAIA,IAFA,IAAAunH,EAAA,EAEA7tI,EAAA,EAAAA,EAAA+c,IAAA/c,EAAA,CAEA,IAAA8tI,EAAA16H,EAAApT,EAAA,GACA+tI,EAAA56H,EAAA4J,EAAA/c,GACAguI,EAAAlkD,EAAA9pF,IAAA8tI,EAAAC,GACAjkD,EAAA9pF,GAAA6tI,EAAAC,EAAAE,EACAH,EAAAE,EAAAC,EAIAlkD,EAAA/sE,GAAA8wH,EAIA,OAAA/jD,GAeAmkD,iBAAA,SAAAztI,EAAAktI,EAAA/jD,EAAArjE,GAMA,IAJA,IAAAsnH,EAAApjJ,KAAAijJ,SAAAjtI,EAAA8lB,EAAAonH,GACA5jD,EAAAt/F,KAAAmjJ,mBAAAC,EAAAtnH,EAAA9lB,EAAAktI,GACAQ,EAAA,IAAAl5B,EAAArpG,QAAA,EAAA,EAAA,EAAA,GAEAoR,EAAA,EAAAA,GAAAvc,IAAAuc,EAAA,CAEA,IAAA2B,EAAAirE,EAAAikD,EAAAptI,EAAAuc,GACAoxH,EAAArkD,EAAA/sE,GACAqxH,EAAA1vH,EAAAjnB,EAAA02I,EACAD,EAAAhkJ,GAAAw0B,EAAAx0B,EAAAkkJ,EACAF,EAAAh4I,GAAAwoB,EAAAxoB,EAAAk4I,EACAF,EAAA12I,GAAAknB,EAAAlnB,EAAA42I,EACAF,EAAAz2I,GAAAinB,EAAAjnB,EAAA02I,EAIA,OAAAD,GAgBAG,6BAAA,SAAAT,EAAAtnH,EAAA9lB,EAAA9K,EAAAg4I,GAGA,IADA,IAAAY,KACAtlJ,EAAA,EAAAA,GAAAwX,IAAAxX,EACAslJ,EAAAtlJ,GAAA,EAGA,IADA,IAAAulJ,KACAvlJ,EAAA,EAAAA,GAAA0M,IAAA1M,EACAulJ,EAAAvlJ,GAAAslJ,EAAA/5I,MAAA,GAGA,IADA,IAAAi6I,KACAxlJ,EAAA,EAAAA,GAAAwX,IAAAxX,EACAwlJ,EAAAxlJ,GAAAslJ,EAAA/5I,MAAA,GAEAi6I,EAAA,GAAA,GAAA,EAKA,IAHA,IAAAr7H,EAAAm7H,EAAA/5I,MAAA,GACA6e,EAAAk7H,EAAA/5I,MAAA,GAEAwoB,EAAA,EAAAA,GAAAvc,IAAAuc,EAAA,CAEA5J,EAAA4J,GAAAuJ,EAAAonH,EAAAE,EAAA,EAAA7wH,GACA3J,EAAA2J,GAAA2wH,EAAAE,EAAA7wH,GAAAuJ,EAIA,IAFA,IAAAunH,EAAA,EAEA7tI,EAAA,EAAAA,EAAA+c,IAAA/c,EAAA,CAEA,IAAA8tI,EAAA16H,EAAApT,EAAA,GACA+tI,EAAA56H,EAAA4J,EAAA/c,GACAwuI,EAAAzxH,GAAA/c,GAAA8tI,EAAAC,EAEA,IAAAC,EAAAQ,EAAAxuI,GAAA+c,EAAA,GAAAyxH,EAAAzxH,GAAA/c,GACAwuI,EAAAxuI,GAAA+c,GAAA8wH,EAAAC,EAAAE,EACAH,EAAAE,EAAAC,EAIAQ,EAAAzxH,GAAAA,GAAA8wH,EAIA,IAAA,IAAA9wH,EAAA,EAAAA,GAAAvc,IAAAuc,EAEAwxH,EAAA,GAAAxxH,GAAAyxH,EAAAzxH,GAAAvc,GAIA,IAAA,IAAAR,EAAA,EAAAA,GAAAQ,IAAAR,EAAA,CAMA,IAJA,IAAArB,EAAA,EACAC,EAAA,EAEAxF,KACApQ,EAAA,EAAAA,GAAAwX,IAAAxX,EAEAoQ,EAAApQ,GAAAslJ,EAAA/5I,MAAA,GAGA6E,EAAA,GAAA,GAAA,EAEA,IAAA,IAAA+tC,EAAA,EAAAA,GAAAzxC,IAAAyxC,EAAA,CAEA,IAAAt/B,EAAA,EACA4mI,EAAAzuI,EAAAmnC,EACAunG,EAAAluI,EAAA2mC,EAEAnnC,GAAAmnC,IAEA/tC,EAAAwF,GAAA,GAAAxF,EAAAuF,GAAA,GAAA6vI,EAAAE,EAAA,GAAAD,GACA5mI,EAAAzO,EAAAwF,GAAA,GAAA4vI,EAAAC,GAAAC,IAOA,IAHA,IAAAC,EAAAF,IAAA,EAAA,GAAAA,EACAG,EAAA5uI,EAAA,GAAA0uI,EAAAvnG,EAAA,EAAA3mC,EAAAR,EAEA+c,EAAA4xH,EAAA5xH,GAAA6xH,IAAA7xH,EAEA3jB,EAAAwF,GAAAme,IAAA3jB,EAAAuF,GAAAoe,GAAA3jB,EAAAuF,GAAAoe,EAAA,IAAAyxH,EAAAE,EAAA,GAAAD,EAAA1xH,GACAlV,GAAAzO,EAAAwF,GAAAme,GAAAyxH,EAAAC,EAAA1xH,GAAA2xH,GAIA1uI,GAAA0uI,IAEAt1I,EAAAwF,GAAAuoC,IAAA/tC,EAAAuF,GAAAwoC,EAAA,GAAAqnG,EAAAE,EAAA,GAAA1uI,GACA6H,GAAAzO,EAAAwF,GAAAuoC,GAAAqnG,EAAAxuI,GAAA0uI,IAIAH,EAAApnG,GAAAnnC,GAAA6H,EAEA,IAAAkV,EAAApe,EACAA,EAAAC,EACAA,EAAAme,GAQA,IAFA,IAAA/c,EAAAQ,EAEA2mC,EAAA,EAAAA,GAAAzxC,IAAAyxC,EAAA,CAEA,IAAA,IAAApqB,EAAA,EAAAA,GAAAvc,IAAAuc,EAEAwxH,EAAApnG,GAAApqB,IAAA/c,EAGAA,GAAAQ,EAAA2mC,EAIA,OAAAonG,GAgBAM,uBAAA,SAAAruI,EAAAktI,EAAA/jD,EAAArjE,EAAAwoH,GAQA,IANA,IAAAC,EAAAD,EAAAtuI,EAAAsuI,EAAAtuI,EACAwuI,KACApB,EAAApjJ,KAAAijJ,SAAAjtI,EAAA8lB,EAAAonH,GACAuB,EAAAzkJ,KAAA6jJ,6BAAAT,EAAAtnH,EAAA9lB,EAAAuuI,EAAArB,GACAwB,KAEAlmJ,EAAA,EAAAA,EAAA2gG,EAAA7gG,SAAAE,EAAA,CAEA,IAAA01B,EAAAirE,EAAA3gG,GAAA0P,QACAjB,EAAAinB,EAAAjnB,EAEAinB,EAAAx0B,GAAAuN,EACAinB,EAAAxoB,GAAAuB,EACAinB,EAAAlnB,GAAAC,EAEAy3I,EAAAlmJ,GAAA01B,EAGA,IAAA,IAAAyoB,EAAA,EAAAA,GAAA4nG,IAAA5nG,EAAA,CAIA,IAFA,IAAAzoB,EAAAwwH,EAAAtB,EAAAptI,GAAA9H,QAAAiB,eAAAs1I,EAAA9nG,GAAA,IAEApqB,EAAA,EAAAA,GAAAvc,IAAAuc,EAEA2B,EAAA5lB,IAAAo2I,EAAAtB,EAAAptI,EAAAuc,GAAArkB,QAAAiB,eAAAs1I,EAAA9nG,GAAApqB,KAIAiyH,EAAA7nG,GAAAzoB,EAIA,IAAA,IAAAyoB,EAAA4nG,EAAA,EAAA5nG,GAAA2nG,EAAA,IAAA3nG,EAEA6nG,EAAA7nG,GAAA,IAAA6tE,EAAArpG,QAAA,EAAA,EAAA,GAIA,OAAAqjI,GAUAG,WAAA,SAAAhoG,EAAAn+C,GAIA,IAFA,IAAAomJ,EAAA,EAEAryH,EAAA,EAAAA,GAAAoqB,IAAApqB,EAEAqyH,GAAAryH,EAMA,IAFA,IAAAqJ,EAAA,EAEArJ,EAAA,EAAAA,GAAA/zB,IAAA+zB,EAEAqJ,GAAArJ,EAIA,IAAA,IAAAA,EAAA,EAAAA,GAAAoqB,EAAAn+C,IAAA+zB,EAEAqJ,GAAArJ,EAIA,OAAAqyH,EAAAhpH,GAYAipH,6BAAA,SAAAC,GAMA,IAJA,IAAAR,EAAAQ,EAAAxmJ,OACAymJ,KACAC,KAEAxmJ,EAAA,EAAAA,EAAA8lJ,IAAA9lJ,EAAA,CAEA,IAAA01B,EAAA4wH,EAAAtmJ,GACAumJ,EAAAvmJ,GAAA,IAAAgsH,EAAApzG,QAAA8c,EAAAx0B,EAAAw0B,EAAAxoB,EAAAwoB,EAAAlnB,GACAg4I,EAAAxmJ,GAAA01B,EAAAjnB,EAMA,IAFA,IAAAu3I,KAEA7nG,EAAA,EAAAA,EAAA2nG,IAAA3nG,EAAA,CAIA,IAFA,IAAAtuC,EAAA02I,EAAApoG,GAAAzuC,QAEA1P,EAAA,EAAAA,GAAAm+C,IAAAn+C,EAEA6P,EAAAU,IAAAy1I,EAAA7nG,EAAAn+C,GAAA0P,QAAAiB,eAAAnP,KAAA2kJ,WAAAhoG,EAAAn+C,GAAAwmJ,EAAAxmJ,KAIAgmJ,EAAA7nG,GAAAtuC,EAAAgB,aAAA21I,EAAA,IAIA,OAAAR,GAgBAS,qBAAA,SAAAjvI,EAAAktI,EAAA/jD,EAAArjE,EAAAwoH,GAEA,IAAAQ,EAAA9kJ,KAAAqkJ,uBAAAruI,EAAAktI,EAAA/jD,EAAArjE,EAAAwoH,GACA,OAAAtkJ,KAAA6kJ,6BAAAC,IAeAI,iBAAA,SAAAlvI,EAAAN,EAAAwtI,EAAAiC,EAAAhmD,EAAArjE,EAAAztB,EAAAjO,GAQA,IANA,IAAAglJ,EAAAplJ,KAAAijJ,SAAAjtI,EAAA8lB,EAAAonH,GACAmC,EAAArlJ,KAAAijJ,SAAAvtI,EAAArH,EAAA82I,GACAG,EAAAtlJ,KAAAmjJ,mBAAAiC,EAAAtpH,EAAA9lB,EAAAktI,GACAqC,EAAAvlJ,KAAAmjJ,mBAAAkC,EAAAh3I,EAAAqH,EAAAyvI,GACA3B,KAEAx5I,EAAA,EAAAA,GAAA0L,IAAA1L,EAAA,CAEAw5I,EAAAx5I,GAAA,IAAAwgH,EAAArpG,QAAA,EAAA,EAAA,EAAA,GACA,IAAA,IAAAw7B,EAAA,EAAAA,GAAA3mC,IAAA2mC,EAAA,CAEA,IAAAzoB,EAAAirE,EAAAimD,EAAApvI,EAAA2mC,GAAA0oG,EAAA3vI,EAAA1L,GAAAkE,QACAjB,EAAAinB,EAAAjnB,EACAinB,EAAAx0B,GAAAuN,EACAinB,EAAAxoB,GAAAuB,EACAinB,EAAAlnB,GAAAC,EACAu2I,EAAAx5I,GAAAsE,IAAA4lB,EAAA/kB,eAAAm2I,EAAA3oG,MAOA,IADA,IAAA6oG,EAAA,IAAAh7B,EAAArpG,QAAA,EAAA,EAAA,EAAA,GACAnX,EAAA,EAAAA,GAAA0L,IAAA1L,EAEAw7I,EAAAl3I,IAAAk1I,EAAAx5I,GAAAmF,eAAAo2I,EAAAv7I,KAIAw7I,EAAAn2I,aAAAm2I,EAAAv4I,GACA7M,EAAAoN,IAAAg4I,EAAA9lJ,EAAA8lJ,EAAA95I,EAAA85I,EAAAx4I,KAKAw9G,EAAAw4B,aAGA/kJ,EAAA,wCACA,kBACA,gBACA,SAAAusH,GAsEA,OAtDAA,EAAAi7B,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAt7B,EAAAhO,MAAA57G,KAAAZ,MAEAA,KAAA0lJ,OAAAA,EACA1lJ,KAAA2lJ,MAAAA,EACA3lJ,KAAA4lJ,iBAEA5lJ,KAAA6lJ,UAAAA,GAAA,EACA7lJ,KAAA8lJ,QAAAA,GAAA9lJ,KAAA2lJ,MAAArnJ,OAAA,EACA,IAAA,IAAAE,EAAA,EAAAA,EAAAonJ,EAAAtnJ,SAAAE,EAAA,CAGA,IAAA01B,EAAA0xH,EAAApnJ,GACAwB,KAAA4lJ,cAAApnJ,GAAA,IAAAgsH,EAAArpG,QAAA+S,EAAAx0B,EAAAw0B,EAAAxoB,EAAAwoB,EAAAlnB,EAAAknB,EAAAjnB,KAOAu9G,EAAAi7B,WAAA7lJ,UAAAC,OAAAkiB,OAAAyoG,EAAAhO,MAAA58G,WACA4qH,EAAAi7B,WAAA7lJ,UAAAuO,YAAAq8G,EAAAi7B,WAGAj7B,EAAAi7B,WAAA7lJ,UAAA4gH,SAAA,SAAA70G,GAEA,IAAAmwB,EAAA97B,KAAA2lJ,MAAA3lJ,KAAA6lJ,WAAAl6I,GAAA3L,KAAA2lJ,MAAA3lJ,KAAA8lJ,SAAA9lJ,KAAA2lJ,MAAA3lJ,KAAA6lJ,YAGAE,EAAAv7B,EAAAw4B,WAAAS,iBAAAzjJ,KAAA0lJ,OAAA1lJ,KAAA2lJ,MAAA3lJ,KAAA4lJ,cAAA9pH,GASA,OAPA,GAAAiqH,EAAA94I,GAGA84I,EAAA12I,aAAA02I,EAAA94I,GAIA,IAAAu9G,EAAApzG,QAAA2uI,EAAArmJ,EAAAqmJ,EAAAr6I,EAAAq6I,EAAA/4I,IAKAw9G,EAAAi7B,WAAA7lJ,UAAA8hH,WAAA,SAAA/1G,GAEA,IAAAmwB,EAAA97B,KAAA2lJ,MAAA,GAAAh6I,GAAA3L,KAAA2lJ,MAAA3lJ,KAAA2lJ,MAAArnJ,OAAA,GAAA0B,KAAA2lJ,MAAA,IACA5B,EAAAv5B,EAAAw4B,WAAAiC,qBAAAjlJ,KAAA0lJ,OAAA1lJ,KAAA2lJ,MAAA3lJ,KAAA4lJ,cAAA9pH,EAAA,GACAsZ,EAAA2uG,EAAA,GAAA71I,QAGA,OAFAknC,EAAA9kC,YAEA8kC,GAGAo1E,EAAAi7B,aAGAxnJ,EAAA,0CACA,kBACA,gBACA,SAAAusH,GAsDA,OAxCAA,EAAAw7B,aAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAR,GAEA5lJ,KAAAimJ,QAAAA,EACAjmJ,KAAAkmJ,QAAAA,EACAlmJ,KAAAmmJ,OAAAA,EACAnmJ,KAAAomJ,OAAAA,EACApmJ,KAAA4lJ,iBAMA,IAJA,IAAAS,EAAAF,EAAA7nJ,OAAA2nJ,EAAA,EACAK,EAAAF,EAAA9nJ,OAAA4nJ,EAAA,EAGA1nJ,EAAA,EAAAA,EAAA6nJ,IAAA7nJ,EAAA,CAEAwB,KAAA4lJ,cAAApnJ,MACA,IAAA,IAAA+zB,EAAA,EAAAA,EAAA+zH,IAAA/zH,EAAA,CAEA,IAAA2B,EAAA0xH,EAAApnJ,GAAA+zB,GACAvyB,KAAA4lJ,cAAApnJ,GAAA+zB,GAAA,IAAAi4F,EAAArpG,QAAA+S,EAAAx0B,EAAAw0B,EAAAxoB,EAAAwoB,EAAAlnB,EAAAknB,EAAAjnB,MASAu9G,EAAAw7B,aAAApmJ,WAEAuO,YAAAq8G,EAAAw7B,aAEAxlC,SAAA,SAAAzoF,EAAA+lF,EAAA19G,GAEA,IAAA07B,EAAA97B,KAAAmmJ,OAAA,GAAApuH,GAAA/3B,KAAAmmJ,OAAAnmJ,KAAAmmJ,OAAA7nJ,OAAA,GAAA0B,KAAAmmJ,OAAA,IACA93I,EAAArO,KAAAomJ,OAAA,GAAAtoC,GAAA99G,KAAAomJ,OAAApmJ,KAAAomJ,OAAA9nJ,OAAA,GAAA0B,KAAAomJ,OAAA,IAEA57B,EAAAw4B,WAAAkC,iBAAAllJ,KAAAimJ,QAAAjmJ,KAAAkmJ,QAAAlmJ,KAAAmmJ,OAAAnmJ,KAAAomJ,OAAApmJ,KAAA4lJ,cAAA9pH,EAAAztB,EAAAjO,KAIAoqH,EAAAw7B,eAGA/nJ,EAAA,wCACA,mBACA,SAAAusH,GAsWA,IAEAj6F,EAEA0mE,EAOAf,EAUA,OArXAs0B,EAAA+7B,UAAA,WAEA/7B,EAAAvxE,KAAAr4C,KAAAZ,KAAAwqH,EAAA+7B,UAAA1rG,SAAA,IAAA2vE,EAAA1+E,mBAAAhC,QAAA,EAAAC,aAAA,KAEA/pC,KAAAkJ,KAAA,YACAlJ,KAAAmsB,eAAA,EACAnsB,KAAAosB,YAAA8F,EAAAA,EAIA,IAAAs0H,EAAA,IAAAh8B,EAAApzG,QACAqvI,EAAA,IAAAj8B,EAAApzG,QAIAsvI,EAAA,IAAAl8B,EAAAjmE,YAAA,IAAA9W,WAAA,KAAA,GAAA,GAAA+8E,EAAA3kH,WACA6gJ,EAAAtmI,UAAAoqG,EAAA9lH,cACAgiJ,EAAAvmI,UAAAqqG,EAAA9lH,cACAgiJ,EAAAzmI,MAAAuqG,EAAAhmH,oBACAkiJ,EAAAxmI,MAAAsqG,EAAAhmH,oBAEA,IAAAmiJ,EAAA,IAAAn8B,EAAAjmE,YAAA,IAAA9W,WAAA,KAAA,GAAA,GAAA+8E,EAAA3kH,WACA8gJ,EAAAvmI,UAAAoqG,EAAA9lH,cACAiiJ,EAAAxmI,UAAAqqG,EAAA9lH,cACAiiJ,EAAA1mI,MAAAuqG,EAAAhmH,oBACAmiJ,EAAAzmI,MAAAsqG,EAAAhmH,oBAIA,IAAA+rB,EAAAi6F,EAAA+7B,UAAA1rG,SAEA+rG,EAAA,IAAAp8B,EAAA7a,mBACArvD,UACAzhC,OAAAvf,MAAA,MACAunJ,gBAAAvnJ,MAAA,OAEAuhD,cAEA,yBAEA,+BACA,sBAEA,2BAEA,gBAEA,0FAEA,KAEA+D,KAAA,MACA9D,gBAEA,yBAEA,gBAEA,+CAEA,KAEA8D,KAAA,MACAra,WAAA,EACAC,YAAA,EACAT,aAAA,IAGA+8G,EAAA,IAAAt8B,EAAA7a,mBACArvD,UACAvU,KAAAzsC,MAAAonJ,GACA7nI,OAAAvf,MAAA,MACAunJ,gBAAAvnJ,MAAA,OAEAuhD,cAEA,yBAEA,+BACA,sBAEA,2BACA,qBAEA,oBAEA,gBAEA,cAEA,0FAEA,KAEA+D,KAAA,MACA9D,gBAEA,yBAEA,yBAEA,oBAEA,gBAEA,0CAEA,KAEA8D,KAAA,MACAra,WAAA,EACAC,YAAA,EACAT,aAAA,IAKAg9G,EAAA,IAAAv8B,EAAAvxE,KAAA1oB,EAAAq2H,GAIAp3I,KAEAk1C,EAAA8lE,EAAAw8B,iBAAAC,OAEAC,EAAA,IAAA18B,EAAA7a,mBACArvD,UACAvU,KAAAzsC,MAAA,MACAqnJ,cAAArnJ,MAAAqnJ,GACA5/G,OAAAznC,MAAA,IAAAkrH,EAAA/jF,MAAA,WACA5nB,OAAAvf,MAAA,IAAAkrH,EAAA19G,SACA+5I,gBAAAvnJ,MAAA,IAAAkrH,EAAApzG,UAEAypC,aAAA6D,EAAA7D,aACAC,eAAA4D,EAAA5D,eACApX,SAAA8gF,EAAA7oH,iBACAooC,aAAA,EACAS,YAAA,IAGA28G,EAAA,IAAA38B,EAAAvxE,KAAA1oB,EAAA22H,GAEAlnJ,KAAAonJ,WAAA,SAAAt3H,GAEAtgB,EAAAjG,KAAAumB,IAMA,IAAAjR,EAAA,IAAA2rG,EAAA19G,QACAu6I,EAAA,IAAA78B,EAAA19G,QACAw6I,EAAA,IAAA98B,EAAAsf,KACAtoH,EAAA,IAAAgpG,EAAArpG,QAEAnhB,KAAA+sB,eAAA,SAAAg3B,EAAAC,EAAAxrC,GAEAurC,EAAAqqC,mBAAA5sE,GAEA,IAAA+lI,EAAA/lI,EAAAvU,EAAAuU,EAAAxU,EACAw6I,EAAAhmI,EAAAxU,EAAA,EACAy6I,EAAAjmI,EAAAvU,EAAA,EAEAymB,EAAA,GAAAlS,EAAAvU,EAWA,GAVA4R,EAAArR,IAAAkmB,EAAA6zH,EAAA7zH,GAEA4zH,EAAAv8I,IAAAyC,IAAAgU,EAAA9hB,EAAA8hB,EAAA9V,GACA47I,EAAAt8I,IAAAwC,IAAAgU,EAAA9hB,GAAA8hB,EAAAxU,EAAA,IAAAwU,EAAA9V,GAAA8V,EAAAvU,EAAA,KAIAw5I,EAAApsI,sBAAAra,KAAA6Y,aACA4tI,EAAA3uI,aAAAU,EAAAC,sBAEAguI,EAAAz5I,EAAA,KAEAw5I,EAAAp4I,KAAAq4I,GAAA3uI,aAAAU,EAAAE,kBAIA2uI,EAAA3nJ,EAAA8hB,EAAA9hB,EAAA8mJ,EAAA9mJ,EAAA8nJ,EAAAA,EAAA,EACAH,EAAA37I,EAAA8V,EAAA9V,EAAA86I,EAAA96I,EAAA+7I,EAAAA,EAAA,EAIAH,EAAA/yH,cAAA8yH,IAAA,CAIAtjG,EAAAuxC,yBAAA+xD,EAAAX,GAIA,IAAApmG,EAAAsmG,EAAAtmG,SACAA,EAAA,MAAAhhD,MAAAuf,EACAyhC,EAAA,eAAAhhD,MAAAknJ,EAEAziG,EAAAonB,mBAAA3yD,EAAA,KAAA+X,EAAAq2H,EAAAG,EAAA,MAIAhjG,EAAAuxC,yBAAA+xD,EAAAV,GAIA,IAAArmG,EAAAwmG,EAAAxmG,SACAA,EAAA,MAAAhhD,MAAAuf,EACAyhC,EAAA,eAAAhhD,MAAAknJ,EAEAziG,EAAAonB,mBAAA3yD,EAAA,KAAA+X,EAAAu2H,EAAAC,EAAA,MAOA,IAHA,IAAAW,EAAA,GAAAlB,EAAA9mJ,EACAioJ,EAAA,GAAAnB,EAAA96I,EAEAlN,EAAA,EAAAwL,EAAAwF,EAAAlR,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAsxB,EAAAtgB,EAAAhR,GAEA8hD,EAAA4mG,EAAA5mG,SAEAA,EAAA,MAAAhhD,MAAA8O,KAAA0hB,EAAAiX,OACAuZ,EAAA,IAAAhhD,MAAAwwB,EAAArO,QACA6+B,EAAA,eAAAhhD,MAAAI,EAAA8mJ,EAAA9mJ,EAAAgoJ,EAAA53H,EAAAlC,SACA0yB,EAAA,eAAAhhD,MAAAoM,EAAA86I,EAAA96I,EAAAi8I,EAAA73H,EAAAlC,SAEA,IAAA8F,EAAA5D,EAAA4D,KAAAlS,EAAAvU,EACAs6I,EAAA/lI,EAAAvU,EAAAuU,EAAAxU,EAEAszC,EAAA,MAAAhhD,MAAAkO,IAAAkmB,EAAA6zH,EAAA7zH,GAEAwzH,EAAA1lG,oBAAA,EAEAuC,EAAAonB,mBAAA3yD,EAAA,KAAA+X,EAAA22H,EAAAC,EAAA,SAQAnnJ,KAAA6iB,QAAA,WAEA+jI,EAAA/jI,UACAikI,EAAAjkI,UACAqkI,EAAArkI,UAEA6jI,EAAA7jI,UACA8jI,EAAA9jI,UAEA,IAAA,IAAArkB,EAAA,EAAAwL,EAAAwF,EAAAlR,OAAAE,EAAAwL,EAAAxL,IAEAgR,EAAAhR,GAAAijB,QAAAoB,YAQA2nG,EAAA+7B,UAAA3mJ,UAAAC,OAAAkiB,OAAAyoG,EAAAvxE,KAAAr5C,WACA4qH,EAAA+7B,UAAA3mJ,UAAAuO,YAAAq8G,EAAA+7B,UACA/7B,EAAA+7B,UAAA3mJ,UAAAgoJ,aAAA,EAIAp9B,EAAAw8B,iBAAA,SAAAvlI,EAAAiS,EAAA9F,EAAAmZ,GAEA/mC,KAAAyhB,QAAAA,EACAzhB,KAAA0zB,KAAAA,GAAA,EACA1zB,KAAA4tB,SAAAA,GAAA,EACA5tB,KAAA+mC,MAAAA,GAAA,IAAAyjF,EAAA/jF,MAAA,WAIA+jF,EAAAw8B,iBAAAC,QAEA3mG,UAEAvU,KAAAzsC,MAAA,MACAqnJ,cAAArnJ,MAAA,MACAynC,OAAAznC,MAAA,MACAuf,OAAAvf,MAAA,MACAunJ,gBAAAvnJ,MAAA,OAIAuhD,cAEA,yBAEA,+BACA,sBAEA,kCAEA,2BACA,qBAEA,oBACA,6BAEA,gBAEA,cAEA,4BAEA,mEACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DAEA,6CACA,6CACA,6CAEA,yFAEA,KAEA+D,KAAA,MAEA9D,gBAEA,yBAEA,yBACA,sBAEA,oBACA,6BAEA,gBAEA,0CACA,8BACA,4BACA,+BAEA,KAEA8D,KAAA,OAIA4lE,EAAA+7B,UAAA1rG,UAEAtqB,EAAA,IAAAi6F,EAAAn2E,eAEA4iD,EAAA,IAAA5oD,eACA,GAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAGA6nD,EAAA,IAAAs0B,EAAAx0B,kBAAAiB,EAAA,GAEA1mE,EAAAqkB,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACArkB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv0B,2BAAAC,EAAA,EAAA,GAAA,IACA3lE,EAAAukB,aAAA,KAAA,IAAA01E,EAAAv0B,2BAAAC,EAAA,EAAA,GAAA,IAEA3lE,GAIAi6F,EAAA+7B,YAGAtoJ,EAAA,wCACA,mBACA,SAAAusH,GA+PA,OA1PAA,EAAAq9B,UAAA,SAAAt3H,EAAAlP,GAEAmpG,EAAAvxE,KAAAr4C,KAAAZ,KAAAuwB,GAEAvwB,KAAAkJ,KAAA,YAEA,IAAA8xC,EAAAh7C,KAIA+mC,OAAA/nC,KAFAqiB,EAAAA,OAEA0lB,MAAA,IAAAyjF,EAAA/jF,MAAAplB,EAAA0lB,OAAA,IAAAyjF,EAAA/jF,MAAA,SACAqhH,EAAAzmI,EAAAymI,cAAA,IACAC,EAAA1mI,EAAA0mI,eAAA,IACAC,EAAA3mI,EAAA2mI,UAAA,EACAtjG,EAAArjC,EAAAqjC,QAAA8lE,EAAAq9B,UAAAI,gBACAC,OAAAlpJ,IAAAqiB,EAAA6mI,UAAA7mI,EAAA6mI,UAAA,EACA3nI,OAAAvhB,IAAAqiB,EAAAd,SAAAc,EAAAd,SAAAiqG,EAAAviH,eAIAkgJ,EAAA,IAAA39B,EAAAlxF,MACA5f,EAAA,IAAA8wG,EAAApzG,QACAgxI,EAAA,IAAA59B,EAAApzG,QACAixI,EAAA,IAAA79B,EAAApzG,QACAkxI,EAAA,IAAA99B,EAAAxmG,QACAukI,EAAA,IAAA/9B,EAAApzG,QAAA,EAAA,GAAA,GACAoxI,EAAA,IAAAh+B,EAAArpG,QAEA4gC,EAAA,IAAAyoE,EAAApzG,QACAhX,EAAA,IAAAoqH,EAAApzG,QACA1B,EAAA,IAAA80G,EAAArpG,QAEAsnI,EAAA,IAAAj+B,EAAAxmG,QACA0kI,EAAA,IAAAl+B,EAAA9oE,kBAEAlxB,GACApQ,UAAAoqG,EAAA3lH,aACAsb,UAAAqqG,EAAA3lH,aACAwb,OAAAmqG,EAAA3kH,UACA8b,eAAA,EACApB,SAAAA,GAGAsjC,EAAA,IAAA2mE,EAAAppG,kBAAA0mI,EAAAC,EAAAv3H,GAEAg6F,EAAAm+B,UAAAn8I,aAAAs7I,IAAAt9B,EAAAm+B,UAAAn8I,aAAAu7I,KAEAlkG,EAAApiC,QAAAZ,iBAAA,GAIA,IAAA6P,EAAA,IAAA85F,EAAA7pE,gBACAL,SAAAkqE,EAAAhqE,cAAAtyC,MAAAw2C,EAAApE,UACAQ,eAAA4D,EAAA5D,eACAD,aAAA6D,EAAA7D,eAGAnwB,EAAA4vB,SAAA,SAAAhhD,MAAAukD,EAAApiC,QACAiP,EAAA4vB,SAAA,MAAAhhD,MAAAynC,EACArW,EAAA4vB,SAAA,cAAAhhD,MAAAmpJ,EAEAzoJ,KAAA0wB,SAAAA,EAEA1wB,KAAA+sB,eAAA,SAAAg3B,EAAAC,EAAAxrC,GAEA,GAAA,cAAAA,EAAA6T,SAAA,CAEA,GAAA7T,EAAA6T,SAAA67H,YAAAA,EAAA,OAEA1vI,EAAA6T,SAAA67H,YAgBA,GAZAE,EAAA/tI,sBAAA2gC,EAAAniC,aACAwvI,EAAAhuI,sBAAA7B,EAAAK,aAEAyvI,EAAAtjI,gBAAAg2B,EAAAniC,aAEAa,EAAAlM,IAAA,EAAA,EAAA,GACAkM,EAAA5B,aAAAwwI,GAEAvmG,EAAA/yC,WAAAo5I,EAAAC,KAIAtmG,EAAA/xC,IAAA0J,GAAA,GAAA,CAEAqoC,EAAAtoC,QAAAC,GAAA3J,SACAgyC,EAAAzzC,IAAA85I,GAEAE,EAAAtjI,gBAAAxM,EAAAK,aAEA0vI,EAAA/6I,IAAA,EAAA,GAAA,GACA+6I,EAAAzwI,aAAAwwI,GACAC,EAAAj6I,IAAA+5I,GAEAjoJ,EAAA4O,WAAAo5I,EAAAG,GACAnoJ,EAAAqZ,QAAAC,GAAA3J,SACA3P,EAAAkO,IAAA85I,GAEAM,EAAA3gI,SAAA3Z,KAAA2zC,GACA2mG,EAAAviI,GAAA3Y,IAAA,EAAA,EAAA,GACAk7I,EAAAviI,GAAArO,aAAAwwI,GACAI,EAAAviI,GAAA1M,QAAAC,GACAgvI,EAAAziI,OAAA7lB,GAEAsoJ,EAAA1/H,IAAAxQ,EAAAwQ,IAEA0/H,EAAA55H,oBACA45H,EAAAhwI,iBAAAtK,KAAAoK,EAAAE,kBAEAgwI,EAAAr8H,SAAA67H,UAAA,EAGAO,EAAAj7I,IACA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,EAAA,GAEAi7I,EAAAv5I,SAAAw5I,EAAAhwI,kBACA+vI,EAAAv5I,SAAAw5I,EAAAjwI,oBACAgwI,EAAAv5I,SAAA8rC,EAAAniC,aAIAsvI,EAAA1uH,8BAAA/f,EAAA0uI,GACAD,EAAArwI,aAAA4wI,EAAAjwI,oBAEA+vI,EAAAh7I,IAAA26I,EAAAzuI,OAAAha,EAAAyoJ,EAAAzuI,OAAAhO,EAAAy8I,EAAAzuI,OAAA1M,EAAAm7I,EAAAnzH,UAEA,IAAAtc,EAAAgwI,EAAAhwI,iBAEAhD,EAAAhW,GAAAP,KAAAM,KAAA+oJ,EAAA9oJ,GAAAgZ,EAAAlJ,SAAA,IAAAkJ,EAAAlJ,SAAA,GACAkG,EAAAhK,GAAAvM,KAAAM,KAAA+oJ,EAAA98I,GAAAgN,EAAAlJ,SAAA,IAAAkJ,EAAAlJ,SAAA,GACAkG,EAAA1I,GAAA,EACA0I,EAAAzI,GAAA,EAAAyL,EAAAlJ,SAAA,KAAAkJ,EAAAlJ,SAAA,IAGAg5I,EAAAr5I,eAAA,EAAAq5I,EAAAx4I,IAAA0F,IAGAgD,EAAAlJ,SAAA,GAAAg5I,EAAA9oJ,EACAgZ,EAAAlJ,SAAA,GAAAg5I,EAAA98I,EACAgN,EAAAlJ,SAAA,IAAAg5I,EAAAx7I,EAAA,EAAAg7I,EACAtvI,EAAAlJ,SAAA,IAAAg5I,EAAAv7I,EAIA+tC,EAAAhvB,SAAA,EAEA,IAAAi4B,EAAAF,EAAAG,kBAEA0kG,EAAA7kG,EAAA8kG,GAAArqG,QACAsqG,EAAA/kG,EAAAyhB,UAAA94C,WAEAq3B,EAAA8kG,GAAArqG,SAAA,EACAuF,EAAAyhB,UAAA94C,YAAA,EAEAq3B,EAAAI,gBAAAN,IACA,IAAAE,EAAAo8B,WAAAp8B,EAAAM,QACAN,EAAAK,OAAAJ,EAAA0kG,GAEA3kG,EAAA8kG,GAAArqG,QAAAoqG,EACA7kG,EAAAyhB,UAAA94C,WAAAo8H,EAEA/kG,EAAAI,gBAAAF,GAIA,IAAAziC,EAAAhJ,EAAAgJ,cAEAxiB,IAAAwiB,GAEAuiC,EAAAojB,MAAA3lD,SAAAA,GAIAw5B,EAAAhvB,SAAA,IAIAhsB,KAAAkkD,gBAAA,WAEA,OAAAL,IAMA2mE,EAAAq9B,UAAAjoJ,UAAAC,OAAAkiB,OAAAyoG,EAAAvxE,KAAAr5C,WACA4qH,EAAAq9B,UAAAjoJ,UAAAuO,YAAAq8G,EAAAq9B,UAEAr9B,EAAAq9B,UAAAI,iBAEA3nG,UAEAvZ,OACAznC,MAAA,MAGAu8I,UACAv8I,MAAA,MAGAmpJ,eACAnpJ,MAAA,OAKAuhD,cACA,8BACA,oBAEA,gBAEA,iDAEA,8EAEA,KACA+D,KAAA,MAEA9D,gBACA,sBACA,8BACA,oBAEA,kDAEA,sGAEA,IAEA,+CAEA,sHAEA,IAEA,gBAEA,gDACA,iEAEA,KACA8D,KAAA,OAGA4lE,EAAAq9B,YAGA5pJ,EAAA,wCACA,mBACA,SAAAusH,GAiUA,OA3TAA,EAAAu+B,UAAA,SAAAx4H,EAAAlP,GAEAmpG,EAAAvxE,KAAAr4C,KAAAZ,KAAAuwB,GAEAvwB,KAAAkJ,KAAA,YAEA,IAAA8xC,EAAAh7C,KAIA+mC,OAAA/nC,KAFAqiB,EAAAA,OAEA0lB,MAAA,IAAAyjF,EAAA/jF,MAAAplB,EAAA0lB,OAAA,IAAAyjF,EAAA/jF,MAAA,SACAqhH,EAAAzmI,EAAAymI,cAAA,IACAC,EAAA1mI,EAAA0mI,eAAA,IACAC,EAAA3mI,EAAA2mI,UAAA,EACAtjG,EAAArjC,EAAAqjC,QAAA8lE,EAAAu+B,UAAAC,gBACAzoI,OAAAvhB,IAAAqiB,EAAAd,SAAAc,EAAAd,SAAAiqG,EAAAviH,eAIAygJ,EAAA,IAAAl+B,EAAA9oE,kBACAgnG,EAAA9nI,kBAAA,EACA8nI,EAAAr8H,SAAA48H,WAAA,EAIA,IAAAC,EAAA,IAAA1+B,EAAAlxF,MACAmvH,EAAA,IAAAj+B,EAAAxmG,QAIAwM,GACApQ,UAAAoqG,EAAA3lH,aACAsb,UAAAqqG,EAAA3lH,aACAwb,OAAAmqG,EAAA3kH,UACA8b,eAAA,EACApB,SAAAA,GAGAsjC,EAAA,IAAA2mE,EAAAppG,kBAAA0mI,EAAAC,EAAAv3H,GAEAg6F,EAAAm+B,UAAAn8I,aAAAs7I,IAAAt9B,EAAAm+B,UAAAn8I,aAAAu7I,KAEAlkG,EAAApiC,QAAAZ,iBAAA,GAMA7gB,KAAA0wB,SAAA,IAAA85F,EAAA7pE,gBACAL,SAAAkqE,EAAAhqE,cAAAtyC,MAAAw2C,EAAApE,UACAO,aAAA6D,EAAA7D,aACAC,eAAA4D,EAAA5D,eACA/W,aAAA,IAGA/pC,KAAA0wB,SAAA4vB,SAAA,MAAAhhD,MAAAynC,EACA/mC,KAAA0wB,SAAA4vB,SAAA,SAAAhhD,MAAAukD,EAAApiC,QACAzhB,KAAA0wB,SAAA4vB,SAAA,cAAAhhD,MAAAmpJ,EAIA,IAEAU,EACAd,EACAC,EAEAvmG,EACAroC,EA4CA8uI,EACAY,EACA1zI,EArDAsW,GAEAm9H,EAAA,IAAA3+B,EAAApzG,QACAixI,EAAA,IAAA79B,EAAApzG,QACAkxI,EAAA,IAAA99B,EAAAxmG,QAEA+9B,EAAA,IAAAyoE,EAAApzG,QACAsC,EAAA,IAAA8wG,EAAApzG,QAEA,SAAAoB,GAYA,OAVA2wI,EAAA9uI,sBAAA2gC,EAAAniC,aACAwvI,EAAAhuI,sBAAA7B,EAAAK,aAEAkpC,EAAA/yC,WAAAm6I,EAAAd,GAEAC,EAAAtjI,gBAAAg2B,EAAAniC,aAEAa,EAAAlM,IAAA,EAAA,EAAA,GACAkM,EAAA5B,aAAAwwI,GAEAvmG,EAAA/xC,IAAA0J,GAAA,IAMA2vI,EAAA,WAEA,IAAA3vI,EAAA,IAAA8wG,EAAApzG,QACA2Q,EAAA,IAAAyiG,EAAApzG,QACA1D,EAAA,IAAA82G,EAAAz9G,WACA8R,EAAA,IAAA2rG,EAAApzG,QAEA,OAAA,WAEA4jC,EAAAniC,YAAAyP,UAAAP,EAAArU,EAAAmL,GACAnF,EAAAlM,IAAA,EAAA,EAAA,GAAAmK,gBAAAjE,GAAApD,YAIAoJ,EAAA3J,SAEAm5I,EAAAzvH,8BAAA/f,EAAAqO,IAhBA,GAsBAuhI,GAEAd,EAAA,IAAAh+B,EAAAlxF,MACA8vH,EAAA,IAAA5+B,EAAArpG,QACAzL,EAAA,IAAA80G,EAAArpG,QAEA,SAAA3I,GAEAkwI,EAAA7vI,YAAAzK,KAAAoK,EAAAK,aACA6vI,EAAAjwI,mBAAA+E,WAAAkrI,EAAA7vI,aACA6vI,EAAAhwI,iBAAAtK,KAAAoK,EAAAE,kBACAgwI,EAAA1/H,IAAAxQ,EAAAwQ,IAMAw/H,EAAAp6I,KAAA86I,GACAV,EAAA1wI,aAAA4wI,EAAAjwI,oBAEA2wI,EAAA57I,IAAAg7I,EAAA9uI,OAAAha,EAAA8oJ,EAAA9uI,OAAAhO,EAAA88I,EAAA9uI,OAAA1M,EAAAw7I,EAAAxzH,UAKA,IAAAtc,EAAAgwI,EAAAhwI,iBAEAhD,EAAAhW,GAAAP,KAAAM,KAAA2pJ,EAAA1pJ,GAAAgZ,EAAAlJ,SAAA,IAAAkJ,EAAAlJ,SAAA,GACAkG,EAAAhK,GAAAvM,KAAAM,KAAA2pJ,EAAA19I,GAAAgN,EAAAlJ,SAAA,IAAAkJ,EAAAlJ,SAAA,GACAkG,EAAA1I,GAAA,EACA0I,EAAAzI,GAAA,EAAAyL,EAAAlJ,SAAA,KAAAkJ,EAAAlJ,SAAA,IAIA45I,EAAAj6I,eAAA,EAAAi6I,EAAAp5I,IAAA0F,IAIAgD,EAAAlJ,SAAA,GAAA45I,EAAA1pJ,EACAgZ,EAAAlJ,SAAA,GAAA45I,EAAA19I,EACAgN,EAAAlJ,SAAA,IAAA45I,EAAAp8I,EAAA,EAAAg7I,EACAtvI,EAAAlJ,SAAA,IAAA45I,EAAAn8I,IAmEAjN,KAAA+sB,eAAA,SAAAg3B,EAAAC,EAAAxrC,IAIA,IAAAA,EAAA6T,SAAA48H,YAIA,IAAAj9H,EAAAxT,KAIA6wI,IAtEA,SAAA7wI,GAIAiwI,EAAAj7I,IACA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,EAAA,GAOAi7I,EAAAv5I,SAAAsJ,EAAAE,kBACA+vI,EAAAv5I,SAAAsJ,EAAAC,oBACAgwI,EAAAv5I,SAAA8rC,EAAAniC,aAuDA0wI,CAAA/wI,GAEA8wI,EAAA9wI,GAnDA,SAAAurC,EAAAC,EAAAxrC,GAEAwiC,EAAAhvB,SAAA,EAEA,IAAAi4B,EAAAF,EAAAG,kBACA0kG,EAAA7kG,EAAA8kG,GAAArqG,QACAsqG,EAAA/kG,EAAAyhB,UAAA94C,WAEAq3B,EAAA8kG,GAAArqG,SAAA,EACAuF,EAAAyhB,UAAA94C,YAAA,EAEAq3B,EAAAI,gBAAAN,IACA,IAAAE,EAAAo8B,WAAAp8B,EAAAM,QACAN,EAAAK,OAAAJ,EAAA0kG,GAEA3kG,EAAA8kG,GAAArqG,QAAAoqG,EACA7kG,EAAAyhB,UAAA94C,WAAAo8H,EACA/kG,EAAAI,gBAAAF,GAIA,IAAAziC,EAAAhJ,EAAAgJ,cAEAxiB,IAAAwiB,GAEAuiC,EAAAojB,MAAA3lD,SAAAA,GAIAw5B,EAAAhvB,SAAA,EAwBAo4B,CAAAL,EAAAC,EAAAxrC,KAIAxY,KAAAkkD,gBAAA,WAEA,OAAAL,IAMA2mE,EAAAu+B,UAAAnpJ,UAAAC,OAAAkiB,OAAAyoG,EAAAvxE,KAAAr5C,WACA4qH,EAAAu+B,UAAAnpJ,UAAAuO,YAAAq8G,EAAAu+B,UAEAv+B,EAAAu+B,UAAAC,iBAEA1oG,UAEAvZ,OACAznC,MAAA,MAGAu8I,UACAv8I,MAAA,MAGAmpJ,eACAnpJ,MAAA,OAKAuhD,cAEA,8BAEA,oBAEA,gBAEA,iDAEA,8EAEA,KAEA+D,KAAA,MAEA9D,gBAEA,sBACA,8BAEA,oBAEA,kDAEA,sGAEA,IAEA,+CAEA,sHAEA,IAEA,gBAEA,gDAEA,iEAEA,KAEA8D,KAAA,OAGA4lE,EAAAu+B,YAGA9qJ,EAAA,wCACA,mBACA,SAAAusH,GA0MA,OA/LAA,EAAAg/B,UAAA,SAAA/tC,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAypJ,UAAA,GAKAj/B,EAAAg/B,UAAA5pJ,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAg/B,UAEA5tC,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAywC,GAEAgnD,EAAAn/D,EAAA9pB,MAAAiiC,KAEAinD,EAAAC,IAIAnpF,MAAA,SAAAw4H,GAuFA,SAAAC,EAAAC,GAEA,IACAzrJ,EADA+wH,KAGA06B,EAAAhkD,QAAA,SAAA/zF,GAEA,MAAAA,EAAA3I,KAAA8qG,eAEA71G,GAAA0T,GACAq9G,EAAA3lH,KAAApL,IAEA,MAAA0T,EAAA3I,KAAA8qG,eAEA71G,EAAAoL,KAAAsI,KAMA,IAAA43I,KAuCA,OArCAv6B,EAAAtpB,QAAA,SAAA5vF,GAEA,IAAA01D,GACAxiE,KAAA,IACAxJ,EAAAsW,EAAAA,EAAA1X,OAAA,GAAAoB,EACAgM,EAAAsK,EAAAA,EAAA1X,OAAA,GAAAoN,GAGA+9I,EAAAlgJ,KAAAmiE,GAEA,IAAA,IAAAltE,EAAAwX,EAAA1X,OAAA,EAAAE,EAAA,EAAAA,IAAA,CAEA,IAAAqrJ,EAAA7zI,EAAAxX,GACAktE,GAAAxiE,KAAA2gJ,EAAA3gJ,WAEAlK,IAAA6qJ,EAAA7hI,SAAAhpB,IAAA6qJ,EAAA5hI,IAEAyjD,EAAA34D,GAAA82I,EAAA7hI,GACA0jD,EAAA14D,GAAA62I,EAAA5hI,GACAyjD,EAAA1jD,GAAA6hI,EAAA92I,GACA24D,EAAAzjD,GAAA4hI,EAAA72I,SAEAhU,IAAA6qJ,EAAA92I,SAAA/T,IAAA6qJ,EAAA72I,KAEA04D,EAAA34D,GAAA82I,EAAA92I,GACA24D,EAAA14D,GAAA62I,EAAA72I,IAIA04D,EAAAhsE,EAAAsW,EAAAxX,EAAA,GAAAkB,EACAgsE,EAAAhgE,EAAAsK,EAAAxX,EAAA,GAAAkN,EACA+9I,EAAAlgJ,KAAAmiE,MAMA+9E,EAIA,MAAA,oBAAAK,UAEAv7I,QAAAC,KAAA,sGACA,MAvJA,SAAAq9F,EAAA49C,GAUA,IARA,IAAA55I,EAAA1Q,KAAA0Q,MAEAi8G,KACAjtG,EAAA,KAAA,IAAAgtF,EAAAk+C,YAAA,OAEAC,EAAAn+C,EAAAtrF,SAAA0pI,KAAAD,cACAE,EAAArqJ,OAAA+3C,KAAAoyG,GAEAxrJ,EAAA,EAAAA,EAAA0rJ,EAAA5rJ,OAAAE,IAAA,CAEA,IAAA2rJ,EAAAD,EAAA1rJ,GACAqtH,EAAAhgB,EAAAigB,OAAAA,OAAAk+B,EAAAG,IAEA,QAAAnrJ,IAAAmrJ,EAAA,CAEA,IAAAC,GACA59B,GAAA38G,EAAAg8G,EAAAw+B,aAAAxrI,GACAyrI,MAAAz6I,EAAAg8G,EAAA0+B,KAAA1rI,GACA2rI,MAAA36I,EAAAg8G,EAAA4+B,KAAA5rI,GACA88E,EAAA,IAGA8tD,IAEA59B,EAAA1tH,KAAAyrJ,SAAAD,EAAA99B,EAAA1tH,KAAAyrJ,WAIA/9B,EAAA1tH,KAAAyrJ,SAAAhkD,QAAA,SAAAikD,GAEA,MAAAA,EAAA3gJ,KAAA8qG,gBAEA61C,EAAA3gJ,KAAA,KAIAkhJ,EAAAzuD,GAAAkuD,EAAA3gJ,KAAA8qG,cAAA,SAEAh1G,IAAA6qJ,EAAAnqJ,QAAAV,IAAA6qJ,EAAAn+I,IAEA0+I,EAAAzuD,GAAA9rF,EAAAg6I,EAAAnqJ,EAAAmf,GAAA,IAAAhP,EAAAg6I,EAAAn+I,EAAAmT,GAAA,UAIA7f,IAAA6qJ,EAAA92I,SAAA/T,IAAA6qJ,EAAA72I,KAEAo3I,EAAAzuD,GAAA9rF,EAAAg6I,EAAA92I,GAAA8L,GAAA,IAAAhP,EAAAg6I,EAAA72I,GAAA6L,GAAA,UAIA7f,IAAA6qJ,EAAA7hI,SAAAhpB,IAAA6qJ,EAAA5hI,KAEAmiI,EAAAzuD,GAAA9rF,EAAAg6I,EAAA7hI,GAAAnJ,GAAA,IAAAhP,EAAAg6I,EAAA5hI,GAAApJ,GAAA,OAMAitG,EAAAhyE,OAAA4wG,cAAA7+B,EAAAs+B,UAAAC,GAMA,OACAt+B,OAAAA,EACAW,WAAA5gB,EAAA8+C,eAAA,YACAC,SAAA/6I,EAAAg8F,EAAA++C,SAAA/rI,GACAgsI,UAAAh7I,EAAAg8F,EAAAg/C,UAAAhsI,GACAisI,kBAAAj/C,EAAAk/C,OAAAC,KAAAF,kBACAv7B,mBAAA1jB,EAAAk/C,OAAAC,KAAAz7B,mBACAl7F,aACAk2H,KAAA1+C,EAAAk/C,OAAAE,KAAAV,KACAE,KAAA5+C,EAAAk/C,OAAAE,KAAAR,KACAn7B,KAAAzjB,EAAAk/C,OAAAE,KAAA37B,KACAD,KAAAxjB,EAAAk/C,OAAAE,KAAA57B,MAEAzkD,WAAA,IACAsgF,0BAAAr/C,EAAAk/C,OAAAtsJ,MA2EA4yE,CAAAy4E,SAAA54H,MAAAw4H,GAAA1pJ,KAAAypJ,aAMAj/B,EAAAg/B,YAGAvrJ,EAAA,wCACA,mBACA,SAAAusH,GAw4CA,OAn3CAA,EAAA2gC,cAAA,SAAA1vC,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAorJ,wBAIA5gC,EAAA2gC,cAAAvrJ,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA2gC,cAEAvvC,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KACAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAywC,GAEAgnD,EAAAn/D,EAAA9pB,MAAAiiC,KAEAinD,EAAAC,IAIAnpF,MAAA,SAAAF,GAEA,IAAAgqB,EAAAh7C,KACAqrJ,EAAA,IAAA7gC,EAAAjO,cAAAv8G,KAAAy7G,SAiJA,SAAA6vC,EAAAC,GAQA,IANA,IAAAC,KAEAC,GAAA,IAAA5sC,WAAAC,gBAAAysC,EAAA,mBAEAG,EAAAD,EAAAE,iBAAA,gBAEAntJ,EAAA,EAAAA,EAAAktJ,EAAAptJ,OAAAE,IAAA,CAEA,IAAAotJ,EAAAF,EAAAltJ,GAEAqtJ,GACAzrJ,OAAAwrJ,EAAA/2G,aAAA,UACApmB,GAAAm9H,EAAA/2G,aAAA,MACA3rC,KAAA0iJ,EAAA/2G,aAAA,SAGA22G,EAAAjiJ,KAAAsiJ,GAIA,OAAAL,EAmCA,SAAAM,EAAAC,GASA,IAPA,IAAAC,GACAv9H,GAAAs9H,EAAAl3G,aAAA,MACAo3G,kBAGAC,EAAAH,EAAAJ,iBAAA,QAEAntJ,EAAA,EAAAA,EAAA0tJ,EAAA5tJ,OAAAE,IAAA,CAEA,IAAA2tJ,EAAAD,EAAA1tJ,GACA4tJ,EAAAC,EAAAF,GACAC,EAAA7rJ,MAAA/B,EACAwtJ,EAAAC,cAAA1iJ,KAAA6iJ,GAIA,OAAAJ,EAmBA,SAAAM,EAAAC,GAYA,IAVA,IAAAC,GACA/9H,GAAA89H,EAAA13G,aAAA,MACA43G,MAAAF,EAAA13G,aAAA,SACA63G,oBAAAH,EAAA13G,aAAA,wBAGA83G,EAAAJ,EAAAZ,iBAAA,aAEA/8G,KAEApwC,EAAA,EAAAA,EAAAmuJ,EAAAruJ,OAAAE,IAAA,CAEA,IAAAouJ,EAAAD,EAAAnuJ,GACAs9B,EAAA8wH,EAAA/3G,aAAA,KACAxmC,EAAAu+I,EAAA/3G,aAAA,KAEAjG,EAAArlC,KAAAo+B,WAAA7L,GAAA6L,WAAAt5B,IAMA,OAFAm+I,EAAA,IAAA,IAAAn+G,aAAAO,GAEA49G,EAIA,SAAAK,EAAAC,GAYA,IAVA,IAAAC,GACAt+H,GAAAq+H,EAAAj4G,aAAA,MACA63G,oBAAAI,EAAAj4G,aAAA,wBAGAm4G,EAAAF,EAAAnB,iBAAA,SAEAh9G,KACAs+G,EAAA,IAAAziC,EAAA/jF,MAEAjoC,EAAA,EAAAA,EAAAwuJ,EAAA1uJ,OAAAE,IAAA,CAEA,IAAA0uJ,EAAAF,EAAAxuJ,GACAuoC,EAAAmmH,EAAAr4G,aAAA,SAEAo4G,EAAA5lH,SAAAN,EAAA2oF,UAAA,EAAA,IACAu9B,EAAAxkH,sBAEAkG,EAAAplC,KAAA0jJ,EAAAz3I,EAAAy3I,EAAA3vI,EAAA2vI,EAAAp+I,GAMA,OAFAk+I,EAAA,OAAA,IAAA1+G,aAAAM,GAEAo+G,EAIA,SAAAI,EAAAC,GAUA,IARA,IAAAC,GACA5+H,GAAA2+H,EAAAv4G,aAAA,OAGAy4G,EAAAF,EAAAzB,iBAAA,cAEA4B,KAEA/uJ,EAAA,EAAAA,EAAA8uJ,EAAAhvJ,OAAAE,IAAA,CAEA,IAAAgvJ,EAAAF,EAAA9uJ,GAEA+uJ,EAAAhkJ,MACA9K,KAAA+uJ,EAAA34G,aAAA,QACA44G,aAAA9lH,WAAA6lH,EAAA34G,aAAA,iBACAhF,UAAAlI,WAAA6lH,EAAA34G,aAAA,gBAOA,OAFAw4G,EAAAr8H,KAAAu8H,EAEAF,EAIA,SAAAhB,EAAAF,GAEA,IAAAC,KAMA,OAJAA,EAAA,KAAAD,EAAAt3G,aAAA,QACAu3G,EAAA,aAAAD,EAAAt3G,aAAA,gBACAu3G,EAAA,oBAAAD,EAAAt3G,aAAA,uBAEAu3G,EA0GA,SAAAsB,EAAAC,GAEA,IAAAC,KAEAA,EAAA,SAAAD,EAAA94G,aAAA,YAEA,IAAAkqC,EAAA4uE,EAAA94G,aAAA,aAQA,OANAkqC,IAEA6uE,EAAA,UAAAC,EAAA9uE,IAIA6uE,EAIA,SAAAC,EAAA9uE,GAEA,IAAApzE,KACAozE,EAAA1gF,MAAA,KAAAunG,QAAA,SAAAj3F,GAEAhD,EAAApC,KAAAo+B,WAAAh5B,MAIA,IAAA8O,EAAA,IAAA+sG,EAAAxmG,QAQA,OAPAvG,EAAAjQ,IACA7B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAGA8R,EAIA,SAAAqwI,EAAAC,GAEA,IAAAC,GACA9kJ,KAAA6kJ,EAAAl5G,aAAA,SAGApmB,EAAAs/H,EAAAl5G,aAAA,MAEApmB,IAEAu/H,EAAA,GAAAv/H,GAIA,IAAAw/H,EAAAF,EAAAl5G,aAAA,OAEAo5G,IAEAD,EAAA,IAAAC,GAIA,IAAAC,EAAAH,EAAAl5G,aAAA,UAEAq5G,IAEAF,EAAA,OAAAE,GAIA,IAAAC,EAAAJ,EAAAl5G,aAAA,aAEAs5G,IAEAH,EAAA,UAAAG,GAIA,IAAAC,EAAAL,EAAAl5G,aAAA,cAEAu5G,IAEAJ,EAAA,WAAAI,GAIA,IAAA3vJ,EAAAsvJ,EAAAl5G,aAAA,QAEAp2C,IAEAuvJ,EAAA,KAAAvvJ,GAIA,IAAA4vJ,EAAAN,EAAAO,cAAA,QAEAD,IAEAL,EAAA,KAvMA,SAAAK,GAOA,IALA,IAAAE,KAEA9/G,KACA+/G,EAAAH,EAAA1C,iBAAA,mBAEAntJ,EAAA,EAAAA,EAAAgwJ,EAAAlwJ,OAAAE,IAAA,CAEA,IAAAiwJ,EAAAD,EAAAhwJ,GACAkB,EAAA+uJ,EAAA55G,aAAA,KACAnpC,EAAA+iJ,EAAA55G,aAAA,KACA7nC,EAAAyhJ,EAAA55G,aAAA,KAEApG,EAAAllC,KAAAo+B,WAAAjoC,GAAAioC,WAAAj8B,GAAAi8B,WAAA36B,IAIAuhJ,EAAA,SAAA,IAAAlgH,aAAAI,GAMA,IAJA,IAAAigH,KACAhkE,KACAikE,EAAAN,EAAA1C,iBAAA,sBAEAntJ,EAAA,EAAAA,EAAAmwJ,EAAArwJ,OAAAE,IAAA,CAEA,IAAAowJ,EAAAD,EAAAnwJ,GACAyS,EAAA29I,EAAA/5G,aAAA,MACA3jC,EAAA09I,EAAA/5G,aAAA,MACAwuE,EAAAurC,EAAA/5G,aAAA,MACApiB,EAAAm8H,EAAA/5G,aAAA,MACAniB,EAAAk8H,EAAA/5G,aAAA,MACA7Y,EAAA4yH,EAAA/5G,aAAA,MACAo5G,EAAAW,EAAA/5G,aAAA,OAEAg6G,KAEAA,EAAA,GAAA/mH,SAAA72B,EAAA,IACA49I,EAAA,GAAA/mH,SAAA52B,EAAA,IACA29I,EAAA,GAAA/mH,SAAAu7E,EAAA,IAEA34B,EAAAnhF,KAAAslJ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIAp8H,IAEAo8H,EAAA,GAAA/mH,SAAArV,EAAA,KAIAC,IAEAm8H,EAAA,GAAA/mH,SAAApV,EAAA,KAIAsJ,IAEA6yH,EAAA,GAAA/mH,SAAA9L,EAAA,KAIAiyH,IAEAY,EAAA,IAAAZ,GAIA,EAAApuJ,OAAA+3C,KAAAi3G,GAAAvwJ,QAEAowJ,EAAAnlJ,KAAAslJ,GASA,OAHAN,EAAA,mBAAAG,EACAH,EAAA,UAAA,IAAApgH,YAAAu8C,GAEA6jE,EAuHAO,CAAAT,IAIA,IAAAU,EAAAhB,EAAAO,cAAA,cAQA,OANAS,IAEAf,EAAA,WA3HA,SAAAe,GAMA,IAJA,IAAAlnH,KAEAmnH,EAAAD,EAAApD,iBAAA,aAEAntJ,EAAA,EAAAA,EAAAwwJ,EAAA1wJ,OAAAE,IAAA,CAEA,IAAAmvJ,EAAAqB,EAAAxwJ,GACAovJ,EAAAF,EAAAC,GACA9lH,EAAAt+B,KAAAqkJ,GAIA,OAAA/lH,EA6GAonH,CAAAF,IAIAf,EAmHA,SAAAkB,EAAAC,GAEA,IAAAC,GAAAn4F,KAAAk4F,EAAAt6G,aAAA,SAAA,cACAw6G,EAAAF,EAAAxD,iBAAA,YAEA0D,IAEAD,EAAA,SAnfA,SAAAC,GAIA,IAFA,IAAAC,KAEA9wJ,EAAA,EAAAA,EAAA6wJ,EAAA/wJ,OAAAE,IAAA,CAEA,IAAA+wJ,EAAAF,EAAA7wJ,GACAC,EAAA8wJ,EAAA16G,aAAA,QAYA,IAVA,QACA,WACA,cACA,YACA,eACA,SACA,eACA,oBAGAvrC,QAAA7K,KAEA6wJ,EAAA7wJ,GAAA8wJ,EAAAC,aAMA,OAAAF,EAwdAG,CAAAJ,IAIA,IAAAK,EAAAP,EAAAb,cAAA,aAEAoB,IAEAN,EAAA,UA9HA,SAAAM,GAOA,IALA,IAAAC,GAEA1D,kBACA2D,EAAAF,EAAA/D,iBAAA,iBAEAntJ,EAAA,EAAAA,EAAAoxJ,EAAAtxJ,OAAAE,IAAA,CAEA,IAAAutJ,EAAA6D,EAAApxJ,GACAwtJ,EAAAF,EAAAC,GACA4D,EAAA,cAAA3D,EAAA,IAAAA,EAMA2D,EAAA,aAGA,IAFA,IAAAE,EAAAH,EAAA/D,iBAAA,aAEAntJ,EAAA,EAAAA,EAAAqxJ,EAAAvxJ,OAAAE,IAAA,CAEA,IAAAsxJ,EAAAD,EAAArxJ,GACAuxJ,GA/VAC,EA+VAF,OA7VAG,GACAxhI,IAHAuhI,EA+VAF,GA5VAj7G,aAAA,MACA12C,KAAA6xJ,EAAAn7G,aAAA,QACAq7G,YAAAF,EAAAn7G,aAAA,eACAs7G,WAAAH,EAAAn7G,aAAA,cACAu7G,WAAAJ,EAAAn7G,aAAA,cACA8pB,OAAAqxF,EAAAn7G,aAAA,YAwVA86G,EAAA,UAAAI,EAAA,IAAAA,EAhWA,IAAAC,EAsWAL,EAAA,cAGA,IAFA,IAAAU,EAAAX,EAAA/D,iBAAA,cAEAntJ,EAAA,EAAAA,EAAA6xJ,EAAA/xJ,OAAAE,IAAA,CAEA,IAAAsuJ,EAAAuD,EAAA7xJ,GACAuuJ,EAAAF,EAAAC,GACA6C,EAAA,WAAA5C,EAAA,IAAAA,EAMA4C,EAAA,+BAGA,IAFA,IAAAW,EAAAZ,EAAA/D,iBAAA,+BAEAntJ,EAAA,EAAAA,EAAA8xJ,EAAAhyJ,OAAAE,IAAA,CAEA,IAAA+xJ,EAAAD,EAAA9xJ,GACAgyJ,EAAArD,EAAAoD,GACAZ,EAAA,4BAAAa,EAAA,IAAAA,EAMAb,EAAA,kBAGA,IAFA,IAAAc,EAAAf,EAAA/D,iBAAA,kBAEAntJ,EAAA,EAAAA,EAAAiyJ,EAAAnyJ,OAAAE,IAAA,CAEA,IAAAkyJ,EAAAD,EAAAjyJ,GACAmyJ,EAAArE,EAAAoE,GACAf,EAAA,eAAAgB,EAAA,IAAAA,EAMAhB,EAAA,UAGA,IAFA,IAAAiB,EAAAlB,EAAA/D,iBAAA,UAEAntJ,EAAA,EAAAA,EAAAoyJ,EAAAtyJ,OAAAE,IAAA,CAEA,IAAAuvJ,EAAA6C,EAAApyJ,GACAwvJ,EAAAF,EAAAC,GACA4B,EAAA,OAAA3B,EAAA,IAAAA,EAIA,OAAA2B,EA8CAkB,CAAAnB,IAIA,IAAAoB,EAAA3B,EAAAb,cAAA,SAQA,OANAwC,IAEA1B,EAAA,MAlDA,SAAA0B,GAKA,IAHA,IAAAC,KACAC,EAAAF,EAAAnF,iBAAA,QAEAntJ,EAAA,EAAAA,EAAAwyJ,EAAA1yJ,OAAAE,IAAA,CAEA,IAAAyyJ,EAAAD,EAAAxyJ,GACA0yJ,GACAC,SAAAF,EAAAp8G,aAAA,aAEAkqC,EAAAkyE,EAAAp8G,aAAA,aAEAkqC,IAEAmyE,EAAA,UAAArD,EAAA9uE,IAIAgyE,EAAAxnJ,KAAA2nJ,GAIA,OAAAH,EA2BAK,CAAAN,IAIA1B,EAIA,SAAAiC,EAAAC,EAAA5wE,EAAA0uE,EAAAmC,GAEA,IAAA9E,EAAA6E,EAAA7E,MACA+E,EAAApC,EAAAqC,UAAAC,UACAA,EAAAF,EAAA/E,GAEA,GAAAiF,EAAA,CAEA,IAAA1gI,EAAAugI,EAAAG,EAAAvzJ,MACA+K,EAAAwoJ,EAAAxB,YAEArjC,EAAA,IAAAlO,MAAA3tF,IAAA9nB,KAAAA,IACAyoJ,EAAAC,IAAAC,gBAAAhlC,GAEAprG,EAAA4pI,EAAAzvC,KAAA+1C,EAAA,WAEAC,IAAAE,gBAAAH,KAQA,OAJAlwI,EAAAlB,SAAAiqG,EAAAtiH,aAIAwpJ,EAAAvB,YAEA,IAAA,OACA1uI,EAAAxB,MAAAuqG,EAAAjmH,eACA,MAEA,IAAA,SACAkd,EAAAxB,MAAAuqG,EAAA/lH,uBACA,MAEA,IAAA,OACA,IAAA,QACAgd,EAAAxB,MAAAuqG,EAAAhmH,oBACA,MAEA,QACAid,EAAAxB,MAAAuqG,EAAAjmH,eAIA,OAAAmtJ,EAAAtB,YAEA,IAAA,OACA3uI,EAAAvB,MAAAsqG,EAAAjmH,eACA,MAEA,IAAA,SACAkd,EAAAvB,MAAAsqG,EAAA/lH,uBACA,MAEA,IAAA,OACA,IAAA,QACAgd,EAAAvB,MAAAsqG,EAAAhmH,oBACA,MAEA,QACAid,EAAAvB,MAAAsqG,EAAAjmH,eAIA,OAAAmtJ,EAAA/yF,QAEA,IAAA,OACAl9C,EAAAtB,UAAAqqG,EAAA3lH,aACA4c,EAAArB,UAAAoqG,EAAAzlH,yBACA,MAEA,IAAA,SACA0c,EAAAtB,UAAAqqG,EAAA3lH,aACA4c,EAAArB,UAAAoqG,EAAA3lH,aACA,MAEA,IAAA,UACA4c,EAAAtB,UAAAqqG,EAAA9lH,cACA+c,EAAArB,UAAAoqG,EAAA9lH,cACA,MAEA,QACA+c,EAAAtB,UAAAqqG,EAAA3lH,aACA4c,EAAArB,UAAAoqG,EAAAzlH,yBAIA,OAAA0c,EAIA,OAAA,KAMA,SAAAswI,EAAA9F,EAAAyC,EAAAU,EAAAb,EAAAgD,EAAAvD,GAMA,IAJA,IAAAgE,EAAAhE,EAAAE,OAEA+D,KAEAzzJ,EAAA,EAAAwL,EAAA0kJ,EAAApwJ,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqwJ,EAAAH,EAAAlwJ,GACA0vJ,OAAAlvJ,IAAA6vJ,EAAAp8H,GAAAo8H,EAAAp8H,GAAAu/H,OAEAhzJ,IAAAizJ,EAAA/D,KAAA+D,EAAA/D,OAEA+D,EAAA/D,GAAA3kJ,KAAAslJ,GASA,IAHA,IAAAj3G,EAAA/3C,OAAA+3C,KAAAq6G,GACAC,KAEA1zJ,EAAA,EAAAwL,EAAA4tC,EAAAt5C,OAAAE,EAAAwL,EAAAxL,IAAA,CAeA,IAbA,IAAAwoC,EAAA4Q,EAAAp5C,GACA2zJ,EAAAF,EAAAjrH,GACAolH,EAAAH,EAAAA,cAAAjlH,GACAtW,EAAA0hI,EAAAhG,EAAA1rE,EAAA0uE,EAAAmC,EAAAvD,EAAAqE,GAIA9hI,EAAA,IAAAi6F,EAAAn2E,eAEAi+G,KAEA7jH,EAAA8/G,EAAA9/G,SAEAlc,EAAA,EAAA4jB,EAAAg8G,EAAA7zJ,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAAs8H,EAAAsD,EAAA5/H,GAEA+/H,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA59I,GAAA,IACAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA59I,GAAA,IACAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA59I,GAAA,IAEAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA39I,GAAA,IACAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA39I,GAAA,IACAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA39I,GAAA,IAEAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAAxrC,GAAA,IACAivC,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAAxrC,GAAA,IACAivC,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAAxrC,GAAA,IAKA9yF,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAkkH,EAAA,IAIA,IAAAx1G,EAAA,IAAA0tE,EAAAvxE,KAAA1oB,EAAAG,GACAwhI,EAAA3oJ,KAAAuzC,GAIA,OAAAo1G,EAIA,SAAAK,EAAAjB,EAAA5C,EAAAU,EAAAb,EAAAgD,EAAAvD,GAYA,IARA,IAAAz9H,EAAA,IAAAi6F,EAAAn2E,eAEAi+G,KACAE,KAEA/jH,EAAA8/G,EAAA9/G,SACAG,EAAA0iH,EAAA1iH,IAEApwC,EAAA,EAAAwL,EAAA0kJ,EAAApwJ,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqwJ,EAAAH,EAAAlwJ,GAEA8zJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA59I,GAAA,IACAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA59I,GAAA,IACAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA59I,GAAA,IAEAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA39I,GAAA,IACAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA39I,GAAA,IACAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAA39I,GAAA,IAEAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAAxrC,GAAA,IACAivC,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAAxrC,GAAA,IACAivC,EAAA/oJ,KAAAklC,EAAA,EAAAogH,EAAAxrC,GAAA,IAIAmvC,EAAAjpJ,KAAAqlC,EAAA,EAAAigH,EAAAp8H,GAAA,IACA+/H,EAAAjpJ,KAAAqlC,EAAA,EAAAigH,EAAAp8H,GAAA,IAEA+/H,EAAAjpJ,KAAAqlC,EAAA,EAAAigH,EAAAn8H,GAAA,IACA8/H,EAAAjpJ,KAAAqlC,EAAA,EAAAigH,EAAAn8H,GAAA,IAEA8/H,EAAAjpJ,KAAAqlC,EAAA,EAAAigH,EAAA7yH,GAAA,IACAw2H,EAAAjpJ,KAAAqlC,EAAA,EAAAigH,EAAA7yH,GAAA,IAIAzL,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAkkH,EAAA,IACA/hI,EAAAukB,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAAokH,EAAA,IAIA,IAAA/wI,EAAA2wI,EAAAd,EAAA5wE,EAAA0uE,EAAAmC,EAAAvD,EAAAqD,GAEA3gI,EAAA,IAAA85F,EAAApnD,mBAAAr3B,IAAAtqB,EAAAmoB,aAAA,IAIAkT,EAAA,IAAA0tE,EAAAvxE,KAAA1oB,EAAAG,GAEA,OAAAosB,EAIA,SAAA21G,EAAAC,EAAAhE,EAAAU,EAAAb,GAYA,IARA,IAAAh+H,EAAA,IAAAi6F,EAAAn2E,eAEAi+G,KACAK,KAEAlkH,EAAA8/G,EAAA9/G,SACAE,EAAA+jH,EAAA/jH,OAEAnwC,EAAA,EAAAwL,EAAA0kJ,EAAApwJ,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqwJ,EAAAH,EAAAlwJ,GAEAyS,EAAA49I,EAAA59I,GACAC,EAAA29I,EAAA39I,GACAmyG,EAAAwrC,EAAAxrC,GAEAivC,EAAA/oJ,KAAAklC,EAAA,EAAAx9B,EAAA,IACAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAx9B,EAAA,IACAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAx9B,EAAA,IAEAqhJ,EAAA/oJ,KAAAklC,EAAA,EAAAv9B,EAAA,IACAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAv9B,EAAA,IACAohJ,EAAA/oJ,KAAAklC,EAAA,EAAAv9B,EAAA,IAEAohJ,EAAA/oJ,KAAAklC,EAAA,EAAA40E,EAAA,IACAivC,EAAA/oJ,KAAAklC,EAAA,EAAA40E,EAAA,IACAivC,EAAA/oJ,KAAAklC,EAAA,EAAA40E,EAAA,IAIA,IAAA5wF,EAAAo8H,EAAAp8H,GACAC,EAAAm8H,EAAAn8H,GACAsJ,EAAA6yH,EAAA7yH,GAEA22H,EAAAppJ,KAAAolC,EAAA,EAAAlc,EAAA,IACAkgI,EAAAppJ,KAAAolC,EAAA,EAAAlc,EAAA,IACAkgI,EAAAppJ,KAAAolC,EAAA,EAAAlc,EAAA,IAEAkgI,EAAAppJ,KAAAolC,EAAA,GAAAjc,GAAAD,GAAA,IACAkgI,EAAAppJ,KAAAolC,EAAA,GAAAjc,GAAAD,GAAA,IACAkgI,EAAAppJ,KAAAolC,EAAA,GAAAjc,GAAAD,GAAA,IAEAkgI,EAAAppJ,KAAAolC,EAAA,GAAA3S,GAAAvJ,GAAA,IACAkgI,EAAAppJ,KAAAolC,EAAA,GAAA3S,GAAAvJ,GAAA,IACAkgI,EAAAppJ,KAAAolC,EAAA,GAAA3S,GAAAvJ,GAAA,IAIAlC,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAkkH,EAAA,IACA/hI,EAAAukB,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAAukH,EAAA,IAIA,IAAAjiI,EAAA,IAAA85F,EAAApnD,mBAAAj8B,cAAA,EAAAyC,aAAA,IAIAkT,EAAA,IAAA0tE,EAAAvxE,KAAA1oB,EAAAG,GAEA,OAAAosB,EAIA,SAAA81G,EAAArE,GAEA,IAAAh+H,EAAA,IAAAi6F,EAAAn2E,eACA9jB,EAAAqkB,SAAA,IAAA41E,EAAAv9E,gBAAAshH,EAAA,UAAA,IACAh+H,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAAshH,EAAA,SAAA,IAEA,IAAA79H,EAAA,IAAA85F,EAAApnD,mBAAAr8B,MAAA,SAAA6C,aAAA,IAEAkT,EAAA,IAAA0tE,EAAAvxE,KAAA1oB,EAAAG,GAEA,OAAAosB,EAqDA,SAAA+1G,EAAA5E,EAAAmB,GAEA,YAAApwJ,IAAAowJ,EAAAqC,UAAAH,eAAArD,GAEA,eAEAjvJ,IAAAowJ,EAAAqC,UAAAxF,cAAAgC,GAEA,gBAEAjvJ,IAAAowJ,EAAAqC,UAAAiB,WAAAzE,GAEA,eAEA,YAAAA,EAEA,eAIA,EA+BA,SAAA6E,EAAAvE,EAAA7tE,EAAA0uE,EAAAmC,EAAAvD,GAOA,IALA,IAAAl7G,EAAA,IAAA03E,EAAA7yC,MAEAo7E,EA7BA,SAAA3D,EAAAb,EAAAP,GAQA,IANA,IAAA+E,KAEArE,EAAAH,EAAA,mBAEAyE,EAAAhF,EAAAC,IAEAzvJ,EAAA,EAAAwL,EAAA0kJ,EAAApwJ,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqwJ,EAAAH,EAAAlwJ,GACAyvJ,OAAAjvJ,IAAA6vJ,EAAAZ,IAAAY,EAAAZ,IAAA+E,OAEAh0J,IAAAivJ,IAAAA,EAAA,gBAEAjvJ,IAAA+zJ,EAAA9E,KAAA8E,EAAA9E,OAEA8E,EAAA9E,GAAA1kJ,KAAAslJ,GAIA,OAAAkE,EAQAE,CAAA7D,EAAAb,EAAAP,GACAkE,EAzGA,SAAAa,EAAA3D,EAAAb,EAAAgD,EAAAvD,GAKA,IAHA,IAAAp2G,EAAA/3C,OAAA+3C,KAAAm7G,GACAb,KAEA1zJ,EAAA,EAAA+0B,EAAAqkB,EAAAt5C,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA00J,EAAAt7G,EAAAp5C,GACAkwJ,EAAAqE,EAAAG,GACAC,EAAAN,EAAAK,EAAA9D,GAEA,OAAA+D,GAEA,IAAA,WAIA,IAHA,IAAAlH,EAAAmD,EAAAqC,UAAAxF,cAAAiH,GACAE,EAAArB,EAAA9F,EAAAyC,EAAAU,EAAAb,EAAAgD,EAAAvD,GAEAz7H,EAAA,EAAA4jB,EAAAi9G,EAAA90J,OAAAi0B,EAAA4jB,EAAA5jB,IAEA2/H,EAAA3oJ,KAAA6pJ,EAAA7gI,IAGA,MAEA,IAAA,UACA,IAAA++H,EAAAlC,EAAAqC,UAAAH,eAAA4B,GACAhB,EAAA3oJ,KAAAgpJ,EAAAjB,EAAA5C,EAAAU,EAAAb,EAAAgD,EAAAvD,IACA,MAEA,IAAA,eACA,IAAA0E,EAAAtD,EAAAqC,UAAAiB,WAAAQ,GACAhB,EAAA3oJ,KAAAkpJ,EAAAC,EAAAhE,EAAAU,EAAAb,IACA,MAEA,IAAA,UACA2D,EAAA3oJ,KAAAqpJ,EAAArE,IACA,MAEA,QACAhgJ,QAAAmJ,MAAA,gDAMA,OAAAw6I,EA4DAmB,CAAAN,EAAA3D,EAAAb,EAAAgD,EAAAvD,GAEAxvJ,EAAA,EAAAwL,EAAAkoJ,EAAA5zJ,OAAAE,EAAAwL,EAAAxL,IAEAs0C,EAAAxkC,IAAA4jJ,EAAA1zJ,IAIA,OAAAs0C,EA0CA,SAAAs/G,EAAAphI,EAAA0vD,EAAA0uE,EAAAmC,EAAAvD,EAAAsF,GAEA,YAAAt0J,IAAAgyB,EAAAuiI,MAAAviI,EAAAuiI,OAEAviI,EAAAuiI,MAAAD,EAAAtiI,EAAA0vD,EAAA0uE,EAAAmC,EAAAvD,GAEAh9H,EAAAuiI,OAIA,SAAAlB,EAAAmB,EAAA9yE,EAAA0uE,GAEA,IAAA1+H,EAEAg8H,EAAA8G,EAAA9G,oBACA+G,EAAArE,EAAAqC,UAAAgC,4BAEA,GAAA,OAAA/G,QAAA1tJ,IAAAy0J,EAAA/G,GAAA,CAIA,IAAAgH,EAAAD,EAAA/G,GACAa,EAAAmG,EAAA1iI,KAAAwiI,EAAAjzJ,OAEAmwB,EAAA,IAAA85F,EAAAlnD,sBAAA15B,aAAA,EAAAiG,UAAA09G,EAAA19G,UAAAC,UAAAy9G,EAAAE,oBAMA/8H,EAAA,IAAA85F,EAAApnD,mBAAAx5B,aAAA,IAIAlZ,EAAAjyB,KAAA+0J,EAAA/0J,KAIA,IAAAk1J,EAAAH,EAAAG,aAEA5sH,EAAA4sH,EAAAjkC,UAAA,EAAA,GAYA,OAXAh/F,EAAAqW,MAAAM,SAAAN,GACArW,EAAAqW,MAAA0B,sBAIA,IAAAkrH,EAAAr1J,SAEAoyB,EAAAoZ,QAAAhC,SAAA6rH,EAAA5rH,OAAA,GAAA4rH,EAAA5rH,OAAA,GAAA,IAAA,KAIArX,EAIA,SAAAkjI,EAAAC,EAAAnzE,EAAA0uE,EAAAmC,GAIA,IAFA,IAAAuC,EAAA,IAAAtpC,EAAA7yC,MAEAplD,EAAA,EAAAA,EAAAshI,EAAAv1J,OAAAi0B,IAAA,CAEA,IAAAwhI,EAAAF,EAAAthI,GACAghI,EAAA7yE,EAAAqzE,EAAA5C,eAEAnyJ,IAAAu0J,IAEAS,EAAAD,EAAA5C,SAAAzwE,EAAA0uE,EAAAmC,GACAgC,EAAA7yE,EAAAqzE,EAAA5C,WAIA,IAAA8C,EAAAV,EAAArlJ,QAIA6wE,EAAAg1E,EAAAh1E,UAEAA,GAEAk1E,EAAAn8I,aAAAinE,GAIA+0E,EAAAxlJ,IAAA2lJ,GAIA,OAAAH,EAIA,SAAAE,EAAA7C,EAAAzwE,EAAA0uE,EAAAmC,GAEA,IAAAvD,EAAAoB,EAAA,UAAA,OAAA+B,GAEA,GAAAnD,EAAA,KAAA,CAEA,IAAAO,EAAAP,EAAA,KAEA/sG,EAAAmuG,EAAA,WACA8E,EAAA9E,EAAA,KA3IA,SAAAnuG,EAAAstG,EAAA2F,GAEA,IAAAjzG,EAEA,OAOA,IAHA,IAAAmqG,KACAxzG,EAAA/3C,OAAA+3C,KAAAqJ,GAEAziD,EAAA,EAAAA,EAAAo5C,EAAAt5C,OAAAE,IAIA,IAFA,IAAAD,EAAAq5C,EAAAp5C,GAEA+zB,EAAA,EAAAA,EAAAyoB,EAAAowG,oBAAA9sJ,OAAAi0B,IAAA,CAEA,IAAA0/C,EAAAj3B,EAAAowG,oBAAA74H,GAEA0/C,EAAA1zE,KAAAA,GAEA6sJ,EAAA7hJ,KAAA0oE,GAQA,IAAA,IAAAzzE,EAAA,EAAAA,EAAA4sJ,EAAA9sJ,OAAAE,IAAA,CAEA,IAAAyzE,EAAAm5E,EAAA5sJ,GACAyzE,EAAAuY,MAAA0pE,EAAAjzG,EAAAgxB,EAAA,IAAAs8E,IA6GA4F,CAAAlzG,EAAAstG,EAAA2F,GAEAxzE,EAAAstE,EAAAv/H,IAAA2jI,EAAA7D,EAAA7tE,EAAA0uE,EAAAmC,EAAAvD,EAAA8E,OAEA,CAEA,IAAAe,EAAA7F,EAAA,WAEAttE,EAAAstE,EAAAv/H,IAAA2jI,EAAAyB,EAAAnzE,EAAA0uE,EAAAmC,EAAAvD,EAAA4F,IAsFA,IAAAQ,EAr0CA,SAAApjI,GAEA,IAGAqjI,EACAC,EAMAC,EACAC,EAXAC,EAAA,KACAx6C,EAAA,KAIAy6C,KACAC,KACAC,KACAC,KAIAC,KAEAC,KAGA,IAEAN,EAAA,IAAAO,MAAAhkI,GAEA,MAAAzhB,GAEA,GAAAA,aAAA0lJ,eAGA,OADA1mJ,QAAAmJ,MAAA,0DACA,KAMA,IAAAuiG,KAAAw6C,EAAAz6C,MAEAC,EAAA/5G,MAAA,kBAEAm0J,EAAAp6C,EAEAA,EAAA/5G,MAAA,+BAEAo0J,EAAAr6C,EAEAA,EAAA/5G,MAAA,mBAEAw0J,EAAAnrJ,KAAA0wG,GAEAA,EAAA/5G,MAAA,2BAEAy0J,EAAAprJ,KAAA0wG,GAEAA,EAAA/5G,MAAA,sBAEA00J,EAAArrJ,KAAA0wG,GAEAA,EAAA/5G,MAAA,mBAEA20J,EAAAtrJ,KAAA0wG,GAQA,IAAAi7C,EAAA,IAAAznH,WAAAgnH,EAAAx6C,KAAAo6C,GAAAc,iBACA5J,EAAA/gC,EAAA5B,YAAAC,WAAAqsC,GAKA,GAJAX,EAAAjJ,EAAAC,GAIA+I,EAAA,CAEA,IAAAY,EAAA,IAAAznH,WAAAgnH,EAAAx6C,KAAAq6C,GAAAa,iBACA5J,EAAA/gC,EAAA5B,YAAAC,WAAAqsC,GACAV,EAAAlJ,EAAAC,GAMA,IAAA,IAAA/sJ,EAAA,EAAAA,EAAAk2J,EAAAp2J,OAAAE,IAAA,CAEA,IAAA42J,EAAAV,EAAAl2J,GACAujD,EAAA,IAAAtU,WAAAgnH,EAAAx6C,KAAAm7C,GAAAD,iBAEAE,EAAA7qC,EAAA5B,YAAAC,WAAA9mE,GACAuzG,GAAA,IAAAz2C,WAAAC,gBAAAu2C,EAAA,mBAEA,UAAAC,EAAAC,gBAAA95B,SAAAznB,eAEAzlG,QAAAmJ,MAAA,+DAAA09I,GAOA,IAHA,IAAAjG,EAAAmG,EAAAhH,cAAA,SACArtG,KAEAziD,EAAA,EAAAA,EAAA2wJ,EAAA76G,WAAAh2C,OAAAE,IAAA,CAEA,IAAAg3J,EAAArG,EAAA76G,WAAA91C,GACAg3J,EAAA/2J,KAAAyB,MAAA,kBAEA+gD,EAAAu0G,EAAAl2J,OAAA+6H,OAAAo7B,IAMA,IAAArG,EAAAF,EAAAC,GACAC,EAAA,IAAAD,EAEA,EAAAtvJ,OAAA+3C,KAAAqJ,GAAA3iD,SAEA8wJ,EAAA,WAAAnuG,GAIA6zG,EAAAM,GAAAhG,EAMA,IAAA,IAAA5wJ,EAAA,EAAAA,EAAAo2J,EAAAt2J,OAAAE,IAAA,CAEA,IAAAk3J,EAAAd,EAAAp2J,GACAu2J,EAAAW,GAAAjB,EAAAx6C,KAAAy7C,GAAAP,gBAIA,OACAZ,KAAAA,EACAC,UAAAA,EACAmB,MAAAb,EACAc,eACAn0I,QAAAszI,EACArrB,UA2rCAmsB,CAAA7kI,GACA0vD,EAjFA,SAAA0zE,GAEA,IAAA0B,EAAA1B,EAAAuB,MACAnB,EAAAJ,EAAAI,UACA9zE,KACAq1E,EAAAl2J,OAAA+3C,KAAAk+G,GACAvE,KAIA,GAAAiD,EAEA,IAAA,IAAAh2J,EAAA,EAAAwL,EAAAwqJ,EAAAl2J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAw3J,EAAAxB,EAAAh2J,GACAy3J,EAAAD,EAAA51J,OAAAsvH,UAAA,GAEA0kC,EAAA3yI,QAAAw0I,KAEA1E,EAAAyE,EAAA51J,QAAAg0J,EAAA3yI,QAAAw0I,IAUA,IAAA,IAAAz3J,EAAA,EAAAA,EAAAu3J,EAAAz3J,OAAAE,IAOA,IALA,IAAA03J,EAAAH,EAAAv3J,GACA4wJ,EAAA0G,EAAAI,GAEAC,EAAAt2J,OAAA+3C,KAAAw3G,EAAA,UAAA,QAEA78H,EAAA,EAAAA,EAAA4jI,EAAA73J,OAAAi0B,IAAA,CAEA,IAAA4+H,EAAAgF,EAAA5jI,GAEAyhI,EAAA7C,EAAAzwE,EAAA0uE,EAAAmC,GAMA,OAAA7wE,EAmCA01E,CAAAhC,GAEA,OAjCA,SAAA1zE,EAAA0zE,GAOA,IALA,IAAAthH,EAAA,IAAA03E,EAAA7yC,MAEAk0E,EAAAuI,EAAA,KAAA,GACArD,EAAAqD,EAAAuB,MAAA9J,EAAA,OAAAn8B,UAAA,IAAA,MAEAlxH,EAAA,EAAAA,EAAAuyJ,EAAAzyJ,OAAAE,IAAA,CAEA,IAAA0yJ,EAAAH,EAAAvyJ,GACAy1J,EAAAvzE,EAAAwwE,EAAA,UAIAnyE,EAAAmyE,EAAA,UAEAnyE,GAEAk1E,EAAAn8I,aAAAinE,GAIAjsC,EAAAxkC,IAAA2lJ,GAIA,OAAAnhH,EAOAygH,CAAA7yE,EAAA0zE,IAIAiC,aAAA,SAAApkF,GAEAjyE,KAAAorJ,oBAAA7hJ,KAAA0oE,MAMAu4C,EAAA2gC,gBAGAltJ,EAAA,wCACA,mBACA,SAAAusH,GA0eA,OArdAA,EAAA8rC,UAAA,SAAA76C,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAA8rC,UAAA12J,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA8rC,UAEA16C,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,KAEAyO,EAAAC,IAIAnpF,MAAA,SAAAF,GAwFA,SAAAulI,EAAAh7B,GAQA,IANA,IAAAi7B,EAAA,eACAC,EAAAl7B,EAAAjnF,WAAA7lB,GAAA+gI,YACAzoH,GAAAvxB,EAAA,EAAA8H,EAAA,EAAAzO,EAAA,EAAAD,EAAA,GAEA8nJ,EAAA,KAEAl4J,EAAA,EAAAA,EAAA+8H,EAAAo7B,WAAAr4J,OAAAE,IAAA,CAEA,IAAAo4J,EAAAr7B,EAAAo7B,WAAAn4J,GAEA,aAAAo4J,EAAAn7B,eAAAz8H,IAAA43J,EAAAtiH,WAAAprC,KAEA,SAAA0tJ,EAAAtiH,WAAAprC,KAAA5J,QAEAk3J,EAAAI,EAAApH,aAIA,UAAAoH,EAAAn7B,WAEA10F,EAAA8vH,EAAAD,IAmBA,OAbAF,EAAA,IAAAlsC,EAAApnD,mBACAx5B,aAAA,EACA7C,MAAA,IAAAyjF,EAAA/jF,MAAAM,EAAAvxB,EAAAuxB,EAAAzpB,EAAAypB,EAAAl4B,GACApQ,KAAA+3J,IAGA,IAAAzvH,EAAAn4B,IAEA8nJ,EAAA3sH,aAAA,EACA2sH,EAAA5sH,QAAA/C,EAAAn4B,IAIA6f,GAAAgoI,EAAA/lI,SAAAgmI,GAIA,SAAAG,EAAAt7B,GAIA,IAFA,IAAAx0F,GAAAvxB,EAAA,EAAA8H,EAAA,EAAAzO,EAAA,EAAAD,EAAA,GAEApQ,EAAA,EAAAA,EAAA+8H,EAAAo7B,WAAAr4J,OAAAE,IAAA,CAEA,IAAAs4J,EAAAv7B,EAAAo7B,WAAAn4J,GAEA,MAAAs4J,EAAAr7B,SAEA10F,EAAAvxB,EAAAshJ,EAAAtH,YAEA,MAAAsH,EAAAr7B,SAEA10F,EAAAzpB,EAAAw5I,EAAAtH,YAEA,MAAAsH,EAAAr7B,SAEA10F,EAAAl4B,EAAAioJ,EAAAtH,YAEA,MAAAsH,EAAAr7B,WAEA10F,EAAAn4B,EAAAkoJ,EAAAtH,aAMA,OAAAzoH,EAIA,SAAAgwH,EAAAx7B,GAEA,IAAAy7B,GAAAv4J,KAAA,GAAAisF,aAAAusE,WAAA,MAEAC,EAAA37B,EAAA47B,kBAQA,SANAn4J,IAAAu8H,EAAAjnF,WAAA2iH,aAEAD,EAAAxtH,WAAA+xF,EAAAjnF,WAAA2iH,WAAAG,WAIAF,GAAA,CAEA,GAAA,aAAAA,EAAAz7B,cAEAz8H,IAAAk4J,EAAA5iH,WAAAprC,MAEA,SAAAguJ,EAAA5iH,WAAAprC,KAAA5J,QAEA03J,EAAAv4J,KAAAy4J,EAAA1H,kBAMA,GAAA,aAAA0H,EAAAz7B,SAAA,CAEA,IAAAxqH,EAAAimJ,EAAAG,qBAAA,MAAA,GAAA7H,YACAt+I,EAAAgmJ,EAAAG,qBAAA,MAAA,GAAA7H,YACAnsC,EAAA6zC,EAAAG,qBAAA,MAAA,GAAA7H,YAEAwH,EAAAtsE,UAAAnhF,KAAA0H,EAAAC,EAAAmyG,GAIA6zC,EAAAA,EAAAI,mBAIA,OAAAN,EAIA,SAAAO,EAAAh8B,GAMA,IAJA,IAAAi8B,KACAtoE,KACAuoE,EAAAl8B,EAAA47B,kBAEAM,GAAA,CAEA,GAAA,WAAAA,EAAAh8B,SAIA,IAFA,IAAAi8B,EAAAD,EAAAN,kBAEAO,GAAA,CAEA,GAAA,gBAAAA,EAAAj8B,SAAA,CAEA,IAAA/7H,EAAAg4J,EAAAL,qBAAA,KAAA,GAAA7H,YACA9jJ,EAAAgsJ,EAAAL,qBAAA,KAAA,GAAA7H,YACAxiJ,EAAA0qJ,EAAAL,qBAAA,KAAA,GAAA7H,YAEAgI,EAAAjuJ,KAAA7J,EAAAgM,EAAAsB,QAEA,GAAA,WAAA0qJ,EAAAj8B,SAAA,CAEA,IAAAk8B,EAAAD,EAAAL,qBAAA,MAAA,GAAA7H,YACAoI,EAAAF,EAAAL,qBAAA,MAAA,GAAA7H,YACAqI,EAAAH,EAAAL,qBAAA,MAAA,GAAA7H,YAEAtgE,EAAA3lF,KAAAouJ,EAAAC,EAAAC,GAIAH,EAAAA,EAAAJ,mBAKAG,EAAAA,EAAAH,mBAIA,OAAA7oH,SAAA+oH,EAAA9oH,QAAAwgD,GAIA,SAAA4oE,EAAAv8B,GAOA,IALA,IAAAw8B,EAAAx8B,EAAAjnF,WAAA7lB,GAAA+gI,YACAwI,GAAAv5J,KAAA,YAAAyzJ,WACA+F,EAAA,KACAC,EAAA38B,EAAA47B,kBAEAe,GAAA,CAEA,GAAA,aAAAA,EAAAz8B,cAEAz8H,IAAAk5J,EAAA5jH,WAAAprC,MAEA,SAAAgvJ,EAAA5jH,WAAAprC,KAAA5J,QAEA04J,EAAAv5J,KAAAy5J,EAAA1I,kBAMA,GAAA,UAAA0I,EAAAz8B,SAEAw8B,EAAApB,EAAAqB,QAEA,GAAA,SAAAA,EAAAz8B,SAAA,CAKA,IAHA,IAAA08B,EAAAD,EAAAf,kBACAr6G,GAAArO,YAAAC,WAAA0pH,WAAArxH,MAAAkxH,GAEAE,GAAA,CAEA,GAAA,aAAAA,EAAA18B,SAAA,CAEA,IAAA48B,EAAAd,EAAAY,GAEAr7G,EAAApO,QAAAoO,EAAApO,QAAA+4D,OAAA4wD,EAAA3pH,SACAoO,EAAArO,SAAAqO,EAAArO,SAAAg5D,OAAA4wD,EAAA5pH,cAEA,WAAA0pH,EAAA18B,UAEA3+E,EAAAs7G,QAAA7uJ,KAAAwtJ,EAAAoB,IAIAA,EAAAA,EAAAb,mBAIAU,EAAA9F,OAAA3oJ,KAAAuzC,GAIAo7G,EAAAA,EAAAZ,mBAIA,OAAA7oI,GAAAspI,EAAAl5J,IAAAm5J,GAIA,IAQAx5J,EAAA+zB,EARA+iI,EAzTA,SAAAtkI,GAEA,IAAA+wB,EAAA,IAAA2uD,SAAA1/E,GAGA,GAAA,OAFA8oB,OAAAkvE,aAAAjnE,EAAAu2G,SAAA,GAAAv2G,EAAAu2G,SAAA,IAEA,CAEA,IAAA7D,EAAA,KACAx6C,EAAA,KAEA1rG,QAAA5B,IAAA,gCAEA,IAEA8nJ,EAAA,IAAAO,MAAAhkI,GAEA,MAAAzhB,GAEA,GAAAA,aAAA0lJ,eAGA,OADA1mJ,QAAA5B,IAAA,0DACA,KAMA,IAAAstG,KAAAw6C,EAAAz6C,MAEA,GAAA,SAAAC,EAAAjG,cAAAoM,QAAA,GAEA,MAMA7xG,QAAA5B,IAAA,+CAAAstG,GACAl4D,EAAA,IAAA2uD,SAAA+jD,EAAAx6C,KAAAA,GAAAk7C,iBAIA,IAAAE,EAAA7qC,EAAA5B,YAAAC,WAAA9mE,GACAuzG,GAAA,IAAAz2C,WAAAC,gBAAAu2C,EAAA,mBAEA,GAAA,QAAAC,EAAAC,gBAAA95B,SAAAznB,cAGA,OADAzlG,QAAA5B,IAAA,+DACA,KAIA,OAAA2oJ,EAqQAO,CAAA7kI,GACAunI,EAAA,GACAC,EAAA,GACAC,EApQA,SAAAl9B,GAEA,IAAA18G,EAAA,EACAo4C,EAAA,kBAEAj4D,IAAAu8H,EAAAg6B,gBAAAjhH,WAAA2iB,OAEAA,EAAAskE,EAAAg6B,gBAAAjhH,WAAA2iB,KAAA33D,MAAA00G,eAIA,IAAA0kD,GACAC,WAAA,EACAC,KAAA,KACAC,KAAA,MACAC,MAAA,IACAC,OAAA,WAGA/5J,IAAA05J,EAAAzhG,KAEAp4C,EAAA65I,EAAAzhG,IAKA,OADA1oD,QAAA5B,IAAA,gCAAAkS,GACAA,EA0OAm6I,CAAA1D,GACA2D,KACAC,KACAvC,EAAArB,EAAAC,gBAAAoB,WAIA,IAAAn4J,EAAA,EAAAA,EAAAm4J,EAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA+nI,EAAAn4J,GAEA,GAAA,aAAAowB,EAAA6sG,cAEAz8H,IAAA4vB,EAAA0lB,WAAAprC,OAEA,SAAA0lB,EAAA0lB,WAAAprC,KAAA5J,MAEAi5J,EAAA3pI,EAAA4gI,YAEA,WAAA5gI,EAAA0lB,WAAAprC,KAAA5J,QAEAk5J,EAAA5pI,EAAA4gI,mBAMA,GAAA,aAAA5gI,EAAA6sG,SAAA,CAEA,IAAAi7B,EAAAH,EAAA3nI,GAEAqqI,EAAAvC,EAAAjoI,IAAAioI,EAAAhmI,cAEA,GAAA,WAAA9B,EAAA6sG,SAAA,CAEA,IAAAu8B,EAAAF,EAAAlpI,GAEAsqI,EAAAlB,EAAAvpI,IAAAupI,EAAAn5J,KAMA,IAAAs6J,EAAA,IAAA3uC,EAAA7yC,MACAyhF,EAAA,IAAA5uC,EAAApnD,mBAAAr8B,MAAA,SAAA6C,aAAA,IAMA,IAAA,IAAAnb,KAJA0qI,EAAA16J,KAAA85J,EACAY,EAAA9sI,SAAAgtI,OAAAb,EACAW,EAAA9sI,SAAA8uF,OAAA,MAEA+9C,EAAA,CAEA,IAAAI,EAAAJ,EAAAzqI,GACAyjI,EAAAoH,EAAApH,OACAqH,EAAA,IAAA/uC,EAAA7yC,MAGA,IAFA4hF,EAAA96J,KAAA66J,EAAA76J,MAAA,GAEAD,EAAA,EAAAA,EAAA0zJ,EAAA5zJ,OAAAE,IAAA,CAEA,IAAAg7J,EAAAJ,EACAt8G,EAAAo1G,EAAA1zJ,GACAiwC,EAAA,IAAA+7E,EAAAp8E,uBAAA0O,EAAArO,SAAA,GACAC,EAAA,KAQA,GANAoO,EAAApO,QAAApwC,SAEAowC,EAAA,IAAA87E,EAAAp8E,uBAAA0O,EAAApO,QAAA,IAIAoO,EAAA/V,MAAA,CAEA,IAAAA,EAAA+V,EAAA/V,OAEAyyH,EAAAJ,EAAAlrJ,SACA64B,MAAA,IAAAyjF,EAAA/jF,MAAAM,EAAAvxB,EAAAuxB,EAAAzpB,EAAAypB,EAAAl4B,GAEA,IAAAk4B,EAAAn4B,IAEA4qJ,EAAAzvH,aAAA,EACAyvH,EAAA1vH,QAAA/C,EAAAn4B,GAMA,IAAAwpJ,EAAAt7G,EAAAs7G,QAEA,IAAA7lI,EAAA,EAAAA,EAAA6lI,EAAA95J,OAAAi0B,IAAA,CAEA,IAAAykI,EAAAoB,EAAA7lI,GACAknI,EAAA,IAAAjvC,EAAAn2E,eACA3jB,EAAA8oI,EAEAC,EAAA7kH,SAAAoiH,EAAAtsE,WACA+uE,EAAA3kH,aAAA,WAAArG,EAAAvgC,SAEAwgC,GAEA+qH,EAAA3kH,aAAA,SAAApG,EAAAxgC,cAIAlP,IAAAi6J,EAAAjC,EAAAxtH,cAEA9Y,EAAAuoI,EAAAjC,EAAAxtH,aAIAiwH,EAAA56I,MAAA45I,EAAAA,EAAAA,GACAc,EAAAjrJ,IAAA,IAAAk8G,EAAAvxE,KAAAwgH,EAAA/oI,EAAAxiB,WAMAirJ,EAAA7qJ,IAAAirJ,GAIA,OAAAJ,KAMA3uC,EAAA8rC,YAGAr4J,EAAA,2CACA,mBACA,SAAAusH,GAgtEA,OA3sEAA,EAAAkvC,aAAA,SAAAj+C,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAAkvC,aAAA95J,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAkvC,aAEA99C,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEA7B,EAAA,KAAA68C,EAAA78C,KAAAqsH,EAAA5B,YAAAM,eAAAxmG,GAAAs4B,EAAA78C,KAEAg9G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eAEAtE,EAAAS,KAAAl5F,EAAA,SAAAywC,GAEAgnD,EAAAn/D,EAAA9pB,MAAAiiC,EAAAh1D,KAEAi8G,EAAAC,IAIAnpF,MAAA,SAAAiiC,EAAAh1D,GAEA,IAAAktJ,EAAA,IAAA7gC,EAAAjO,cAAAv8G,KAAAy7G,SACA4vC,EAAAvvC,QAAA97G,KAAA27G,cAAAx9G,GAAA09G,eAAA77G,KAAA07G,aAEA,IAAAi+C,GAEAC,SAAA,SAAArnG,EAAA90C,GAEAzd,KAAAuyD,KAAAA,EACAvyD,KAAAyd,OAAAA,EAAAvP,QACAlO,KAAA+nB,SAAA,IAAAyiG,EAAApzG,QACApX,KAAA0T,WAAA,IAAA82G,EAAAz9G,WACA/M,KAAA6e,MAAA,IAAA2rG,EAAApzG,QAAA,EAAA,EAAA,GACApX,KAAAyd,OAAA6K,UAAAtoB,KAAA+nB,SAAA/nB,KAAA0T,WAAA1T,KAAA6e,OACA7e,KAAAkO,MAAA,WAEA,IAAAhD,EAAA,IAAAyuJ,EAAAC,SAAA55J,KAAAuyD,KAAAvyD,KAAAyd,QACA,OAAAvS,GAGAlL,KAAAyL,KAAA,SAAA/K,EAAA6xD,GAEAA,GAAAvyD,KAAAuyD,KACA,IAAAsnG,EAAAn5J,EAAA6xD,KAAAvyD,KAAAuyD,KACAvoD,EAAAuoD,EAAAsnG,EACAC,EAAA,EAAA9vJ,EACA+vJ,EAAA/5J,KAAA+nB,SACAiyI,EAAAh6J,KAAA0T,WAEAumJ,EAAAv5J,EAAAqnB,SACAmyI,EAAAx5J,EAAAgT,WAUA,OARAimJ,EAAAC,SAAAO,WAAAz6J,EAAAq6J,EAAAr6J,EAAAo6J,EAAAG,EAAAv6J,EAAAsK,EACA2vJ,EAAAC,SAAAO,WAAAzuJ,EAAAquJ,EAAAruJ,EAAAouJ,EAAAG,EAAAvuJ,EAAA1B,EACA2vJ,EAAAC,SAAAO,WAAAntJ,EAAA+sJ,EAAA/sJ,EAAA8sJ,EAAAG,EAAAjtJ,EAAAhD,EAIA2vJ,EAAAC,SAAAQ,YAAA5sJ,IAAAwsJ,EAAAt6J,EAAAs6J,EAAAtuJ,EAAAsuJ,EAAAhtJ,EAAAgtJ,EAAA/sJ,GACA0sJ,EAAAC,SAAAQ,YAAApoJ,MAAAkoJ,EAAAlwJ,GACA2vJ,EAAAC,SAAAS,cAAAr0I,QAAA2zI,EAAAC,SAAAO,WAAAR,EAAAC,SAAAQ,YAAAT,EAAAC,SAAAU,iBAMAX,EAAAC,SAAAO,WAAA,IAAA3vC,EAAApzG,QACAuiJ,EAAAC,SAAAQ,YAAA,IAAA5vC,EAAAz9G,WACA4sJ,EAAAC,SAAAU,aAAA,IAAA9vC,EAAApzG,QAAA,EAAA,EAAA,GACAuiJ,EAAAC,SAAAS,cAAA,IAAA7vC,EAAAxmG,QACA21I,EAAAY,cAAA,WAEAv6J,KAAA43C,QACA53C,KAAAI,OAAA,KACAJ,KAAAuyD,KAAA,EACAvyD,KAAA1B,OAAA,EACA0B,KAAAw6J,eACAx6J,KAAAuxG,IAAA,GACAvxG,KAAAy6J,OAAA,SAAA1pI,GAEA/wB,KAAA43C,KAAAruC,KAAAwnB,IAGA/wB,KAAAymE,KAAA,WASA,GAPAzmE,KAAA06J,WAEA16J,KAAA43C,KAAAt5C,OAAA,EACA0B,KAAA1B,OAAA0B,KAAA43C,KAAA53C,KAAA43C,KAAAt5C,OAAA,GAAAi0D,KAEAvyD,KAAA1B,OAAA,EAEA0B,KAAAuxG,IAEA,IAAA,IAAAh/E,EAAA,EAAAA,EAAAvyB,KAAA1B,OAAA0B,KAAAuxG,IAAAh/E,IAEA,IAAA,IAAA/zB,EAAA,EAAAA,EAAAwB,KAAA43C,KAAAt5C,OAAAE,IAAA,CAEA,GAAAwB,KAAA43C,KAAAp5C,GAAA+zD,MAAAhgC,EAAA,CAEAvyB,KAAAw6J,YAAAjoI,GAAA/zB,EACA,MAEA,GAAAwB,KAAA43C,KAAAp5C,GAAA+zD,KAAAhgC,EAAAvyB,KAAAuxG,KAAAvxG,KAAA43C,KAAAp5C,EAAA,IAAAwB,KAAA43C,KAAAp5C,EAAA,GAAA+zD,MAAAhgC,EAAAvyB,KAAAuxG,IAAA,CAEAvxG,KAAAw6J,YAAAjoI,GAAA/zB,EACA,SAUAwB,KAAA26J,eAAA,SAAA3pI,GAEA,IAAAugF,EAAAvgF,EAAAugF,IACAvxG,KAAAI,OAAA4wB,EAAAuqG,KAEA,IADA,IAAA7pB,EAAA1gF,EAAA0oF,UAAA,GAAA9hE,KACAp5C,EAAA,EAAAA,EAAAkzG,EAAApzG,OAAAE,IAEAwB,KAAAy6J,OAAA,IAAAd,EAAAC,SAAAp7J,EAAA+yG,GAAAG,EAAAlzG,GAAA+zD,KAAAm/C,EAAAlzG,GAAAo8J,QAAA,GAAA5pI,OAGAhxB,KAAAymE,QAIAzmE,KAAA66J,iBAAA,SAAA7pI,GAKA,IAHA,IAAA0gF,EAAA1gF,EAAA4mB,KACA25D,EAAAvxG,KAAAuxG,IAEA/yG,EAAA,EAAAA,EAAAkzG,EAAApzG,OAAAE,IAEAwB,KAAAy6J,OAAA,IAAAd,EAAAC,SAAAp7J,EAAA+yG,GAAAG,EAAAlzG,GAAA+zD,KAAAm/C,EAAAlzG,GAAAif,SAIAzd,KAAAymE,QAIAzmE,KAAA06J,SAAA,WAEA16J,KAAA43C,KAAA4F,KAAAx9C,KAAA86J,cAIA96J,KAAA86J,YAAA,SAAAlsJ,EAAAC,GAEA,OAAAD,EAAA2jD,KAAA1jD,EAAA0jD,MAIAvyD,KAAAkO,MAAA,WAEA,IAAAvC,EAAA,IAAAguJ,EAAAY,cACA5uJ,EAAAvL,OAAAJ,KAAAI,OACAuL,EAAA4mD,KAAAvyD,KAAAuyD,KACA5mD,EAAArN,OAAA0B,KAAA1B,OAEA,IAAA,IAAAE,EAAA,EAAAA,EAAAwB,KAAA43C,KAAAt5C,OAAAE,IAEAmN,EAAA8uJ,OAAAz6J,KAAA43C,KAAAp5C,GAAA0P,SAKA,OADAvC,EAAA86D,OACA96D,GAIA3L,KAAA+6J,SAAA,SAAAh9B,EAAAi9B,GAEAA,IAAAA,EAAArB,EAAAsB,4BACAj7J,KAAAI,OAAA46J,EAAAj9B,EAAA/9H,KAAAI,SAIAJ,KAAAk7J,eAAA,SAAA3oG,GAIA,OAFAA,GAAAvyD,KAAAuxG,IACAh/C,EAAApzD,KAAAK,MAAA+yD,GACAvyD,KAAAw6J,YAAAjoG,IAAA,GAIAvyD,KAAAipI,QAAA,SAAA12E,GAEAA,EAAApzD,KAAAkR,IAAAkiD,GACAvyD,KAAA1B,SACAi0D,EAAAA,EAAAvyD,KAAA1B,OAAA,KAIA,IAHA,IAAA68J,EAAA,KACAC,EAAA,KAEA58J,EAAAwB,KAAAk7J,eAAA3oG,GAAA/zD,EAAAwB,KAAA43C,KAAAt5C,OAAAE,IAAA,CAEA,GAAAwB,KAAA43C,KAAAp5C,GAAA+zD,MAAAA,EAAA,CAEA4oG,EAAAn7J,KAAA43C,KAAAp5C,GACA48J,EAAAp7J,KAAA43C,KAAAp5C,GACA,MAEA,GAAAwB,KAAA43C,KAAAp5C,GAAA+zD,KAAAA,GAAAvyD,KAAA43C,KAAAp5C,EAAA,IAAAwB,KAAA43C,KAAAp5C,EAAA,GAAA+zD,KAAAA,EAAA,CAEA4oG,EAAAn7J,KAAA43C,KAAAp5C,GACA48J,EAAAp7J,KAAA43C,KAAAp5C,EAAA,GACA,MAEA,GAAAwB,KAAA43C,KAAAp5C,GAAA+zD,KAAAA,GAAA/zD,GAAAwB,KAAA43C,KAAAt5C,OAAA,EAAA,CAEA68J,EAAAn7J,KAAA43C,KAAAp5C,IACA48J,EAAAp7J,KAAA43C,KAAA,GAAA1pC,SACAqkD,MAAAvyD,KAAA1B,OAAA,IACA,OAMA,OAAA68J,GAAAC,GAAAD,IAAAC,GAEAp7J,KAAAI,OAAAwgB,kBAAA,EACA5gB,KAAAI,OAAAqd,OAAArP,KAAA+sJ,EAAA1vJ,KAAA2vJ,EAAA7oG,SACAvyD,KAAAI,OAAA2rB,wBAAA,IAKAovI,GAAAC,GAAAD,GAAAC,GAEAp7J,KAAAI,OAAAwgB,kBAAA,EACA5gB,KAAAI,OAAAqd,OAAArP,KAAA+sJ,EAAA19I,aACAzd,KAAAI,OAAA2rB,wBAAA,SAJA,IAaA4tI,EAAAsB,2BAAA,SAAAl9B,EAAA39H,GAkBA,OAhBA,SAAAi7J,EAAA9/B,EAAA98H,GAEA,GAAA88H,EAAA98H,MAAAA,EACA,OAAA88H,EAEA,IAAA,IAAA/8H,EAAA,EAAAA,EAAA+8H,EAAA/vG,SAAAltB,OAAAE,IAAA,CAEA,IAAAgX,EAAA6lJ,EAAA9/B,EAAA/vG,SAAAhtB,GAAAC,GACA,GAAA+W,EAAA,OAAAA,EAIA,OAAA,KAIA6lJ,CAAAt9B,EAAA39H,EAAA3B,OAIAk7J,EAAA2B,UAAA,WAEAt7J,KAAAyxG,UACAzxG,KAAA1B,OAAA,EAEA0B,KAAAu7J,SAAA,SAAA7pD,GAEA1xG,KAAAyxG,OAAAloG,KAAAmoG,GACA1xG,KAAA1B,OAAAa,KAAA6L,IAAA0mG,EAAApzG,OAAA0B,KAAA1B,SAIA0B,KAAAipI,QAAA,SAAA12E,GAEAvyD,KAAAuyD,KAAAA,EAEA,IAAA,IAAA/zD,EAAA,EAAAA,EAAAwB,KAAAyxG,OAAAnzG,OAAAE,IACAwB,KAAAyxG,OAAAjzG,GAAAyqI,QAAA12E,IAIAvyD,KAAAkO,MAAA,SAAA9N,EAAA46J,GAEAA,IAAAA,EAAArB,EAAAsB,4BACA,IAAA/vJ,EAAA,IAAAyuJ,EAAA2B,UACApwJ,EAAA9K,OAAAA,EACA,IAAA,IAAA5B,EAAA,EAAAA,EAAAwB,KAAAyxG,OAAAnzG,OAAAE,IAAA,CAEA,IAAAkzG,EAAA1xG,KAAAyxG,OAAAjzG,GAAA0P,QACAwjG,EAAAqpD,SAAA36J,EAAA46J,GACA9vJ,EAAAqwJ,SAAA7pD,GAIA,OAAAxmG,IAMA,IAAAswJ,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IACAC,EAAA,MACAC,EAAA,EACAC,EAAA,EAKAC,EAAA,EASAC,EAAA,EAoDAC,EAAA,EAyBAC,EAAA,EAcAC,EAAA,EAcAC,EAAA,GAcAC,EAAA,EAEA,SAAAC,EAAA/xJ,GAEA,OAAAoxJ,GAAApxJ,EAIA,SAAAgyJ,EAAAhyJ,GAEA,OAAAqxJ,GAAArxJ,EAoBA,SAAAiyJ,EAAAp/B,EAAA/5E,GAEA,IAAAo5G,EAAA,IAAA5yC,EAAAjyB,KAYA,IAAA,IAAA/5F,KAXA4+J,EAAA3/I,OAAArP,KAAA2vH,EAAAtgH,QACA2/I,EAAAvkJ,YAAAzK,KAAA2vH,EAAAllH,aACAukJ,EAAAr1I,SAAA3Z,KAAA2vH,EAAAh2G,UACAq1I,EAAA1pJ,WAAAtF,KAAA2vH,EAAArqH,YACA0pJ,EAAAv+I,MAAAzQ,KAAA2vH,EAAAl/G,OACAmlC,EAAAq5G,YACAD,EAAA3+J,KAAA,QAAAs/H,EAAAt/H,KAAAulD,EAAAq5G,UAAAp9J,WAEA+jD,EAAAs5G,cAAAv/B,EAAAt/H,QACAulD,EAAAs5G,cAAAv/B,EAAAt/H,UACAulD,EAAAs5G,cAAAv/B,EAAAt/H,MAAA8K,KAAA6zJ,GACAr/B,EAAAvyG,SAAA,CAEA,IAAAoD,EAAAuuI,EAAAp/B,EAAAvyG,SAAAhtB,GAAAwlD,GACAo5G,EAAA9uJ,IAAAsgB,GAIA,OAAAwuI,EAIA,SAAAG,EAAAC,EAAA1f,GAIA,IAFA,IAAA2f,KAEAj/J,EAAA,EAAAA,EAAAg/J,EAAAl/J,OAAAE,IAEAi/J,EAAAl0J,MACA/K,EAAAg/J,EAAAh/J,GACAyO,EAAA6wI,EAAAt/I,KAWA,IANAi/J,EAAAjgH,KAAA,SAAA5uC,EAAAC,GAEA,OAAAA,EAAA5B,EAAA2B,EAAA3B,IAIAwwJ,EAAAn/J,OAAA,GAEAm/J,EAAAl0J,MACA/K,EAAA,EACAyO,EAAA,IAKAwwJ,EAAAn/J,OAAA,IACAm/J,EAAAn/J,OAAA,GAGA,IAFA,IAAA6jG,EAAA,EAEA3jG,EAAA,EAAAA,EAAA,EAAAA,IAEA2jG,GAAAs7D,EAAAj/J,GAAAyO,EAAAwwJ,EAAAj/J,GAAAyO,EAIAk1F,EAAAhjG,KAAAgR,KAAAgyF,GAEA,IAAA,IAAA3jG,EAAA,EAAAA,EAAA,EAAAA,IAEAi/J,EAAAj/J,GAAAyO,EAAAwwJ,EAAAj/J,GAAAyO,EAAAk1F,EACAq7D,EAAAh/J,GAAAi/J,EAAAj/J,GAAAA,EACAs/I,EAAAt/I,GAAAi/J,EAAAj/J,GAAAyO,EAMA,SAAAywJ,EAAA3/B,EAAAt/H,GAEA,GAAA,GAAAs/H,EAAAt/H,KAAA6K,QAAA,QAAA7K,GACA,OAAAs/H,EAEA,IAAA,IAAAv/H,KAAAu/H,EAAAvyG,SAAA,CAEA,IAAAgkG,EAAAkuC,EAAA3/B,EAAAvyG,SAAAhtB,GAAAC,GAEA,GAAA+wH,EACA,OAAAA,GAQA,SAAAmuC,IAEA39J,KAAA49J,gBAAA,EACA59J,KAAA69J,aAAA,EACA79J,KAAA89J,UAAA,EACA99J,KAAA+9J,UAAA,EACA/9J,KAAAg+J,eAAA,EACAh+J,KAAAi+J,aACAj+J,KAAAk+J,YACAl+J,KAAAm+J,aACAn+J,KAAAo+J,eACAp+J,KAAAq+J,aAGAr+J,KAAAs+J,oBAGAt+J,KAAAu+J,UACAv+J,KAAAw+J,UACAx+J,KAAAy+J,gBAAA,SAAAz6G,GAEA,GAAA,GAAAhkD,KAAAw+J,OAAAlgK,OAAA,CAMA,IAJA,IAAAogK,KACAC,KACAC,EAAA56G,EAAAw3E,SAAAx7H,KAAAw+J,OAAA,GAAAK,OAEAD,EAAAE,SAAAF,EAAAE,QAAArmE,QAEAmmE,EAAAA,EAAAE,QAIA,IAAAC,EAAAH,EAAAI,QAAAh7G,GACAi7G,EAAA9B,EAAA4B,EAAA/6G,GACAhkD,KAAAk/J,UAAA5wJ,IAAA2wJ,GAEA,IAAA,IAAAzgK,EAAA,EAAAA,EAAAwB,KAAAw+J,OAAAlgK,OAAAE,IAAA,CAEA,IAAAg6F,EAAAklE,EAAAuB,EAAAj/J,KAAAw+J,OAAAhgK,GAAAqgK,OAEA,GAAArmE,EAAA,CAEA,IAAA2mE,EAAA3mE,EACAkmE,EAAAn1J,KAAA41J,GAEAR,EAAAp1J,KAAAvJ,KAAAw+J,OAAAhgK,GAAA4gK,cAAAJ,eAEA,CAEA,IAAAJ,EAAA56G,EAAAw3E,SAAAx7H,KAAAw+J,OAAAhgK,GAAAqgK,OACA,IAAAD,EAAA,OACA,IAAAG,EAAAH,EAAAI,QAAAh7G,GACAi7G,EAAA9B,EAAA4B,EAAA/6G,GACAhkD,KAAAk/J,UAAA5wJ,IAAA2wJ,GACA,IAAAzmE,EAAAklE,EAAAuB,EAAAj/J,KAAAw+J,OAAAhgK,GAAAqgK,OACAM,EAAA3mE,EACAkmE,EAAAn1J,KAAA41J,GAEAR,EAAAp1J,KAAAvJ,KAAAw+J,OAAAhgK,GAAA4gK,cAAAJ,YAKA,IAAAx6F,EAAA,IAAAgmD,EAAAnyB,SAAAqmE,EAAAC,GAEA3+J,KAAAk/J,UAAAnnE,KAAAvzB,EAAA,IAAAgmD,EAAAxmG,SACAhkB,KAAAk/J,UAAAxuI,SAAAoc,UAAA,IAIA9sC,KAAAg/J,QAAA,SAAAh7G,GAEA,GAAAhkD,KAAAk/J,UAAA,OAAAl/J,KAAAk/J,UACA,IACAp9C,EA4EAhlE,EA7EAvsB,EAAA,IAAAi6F,EAAAn2E,eAoBA,GAjBAytE,EADA99D,EAAAq7G,WAAAr/J,KAAAg+J,gBACAh6G,EAAAq7G,WAAAr/J,KAAAg+J,gBAAAgB,QAAAh7G,GAEA,IAAAwmE,EAAArnD,oBACA5yC,EAAAqkB,SAAA,IAAA41E,EAAAv9E,gBAAA,IAAAkB,YAAAnuC,KAAAs/J,aAAA,IACA/uI,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAAjtC,KAAAu/J,cAAA,IACAv/J,KAAAw/J,eAAAx/J,KAAAw/J,cAAAlhK,OAAA,GACAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAv9E,gBAAAjtC,KAAAw/J,cAAA,IACAx/J,KAAAy/J,cAAAz/J,KAAAy/J,aAAAnhK,OAAA,GACAiyB,EAAAukB,aAAA,QAAA,IAAA01E,EAAAv9E,gBAAAjtC,KAAAy/J,aAAA,IACAz/J,KAAA0/J,kBAAA,IAAA1/J,KAAA0/J,kBAAA,GAAAphK,OAAA,GACAiyB,EAAAukB,aAAA,KAAA,IAAA01E,EAAAv9E,gBAAA,IAAAoB,aAAAruC,KAAA0/J,kBAAA,IAAA,IACA1/J,KAAA0/J,kBAAA,IAAA1/J,KAAA0/J,kBAAA,GAAAphK,OAAA,GACAiyB,EAAAukB,aAAA,MAAA,IAAA01E,EAAAv9E,gBAAA,IAAAoB,aAAAruC,KAAA0/J,kBAAA,IAAA,IACA1/J,KAAA2/J,gBAAA3/J,KAAA2/J,eAAArhK,OAAA,GACAiyB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAAjtC,KAAA2/J,eAAA,IACA3/J,KAAA4/J,kBAAA5/J,KAAA4/J,iBAAAthK,OAAA,GACAiyB,EAAAukB,aAAA,aAAA,IAAA01E,EAAAv9E,gBAAAjtC,KAAA4/J,iBAAA,IACA5/J,KAAAw+J,OAAAlgK,OAAA,EAAA,CAKA,IAHA,IAAAw/I,KACAv5E,KAEA/lE,EAAA,EAAAA,EAAAwB,KAAAw+J,OAAAlgK,OAAAE,IAEA,IAAA,IAAA+zB,EAAA,EAAAA,EAAAvyB,KAAAw+J,OAAAhgK,GAAAqhK,SAAAvhK,OAAAi0B,IAAA,CAEA,IAAAuxF,EAAA9jH,KAAAw+J,OAAAhgK,GAAAqhK,SAAAttI,GACAuxF,IAEAg6B,EAAAh6B,EAAAg8C,aAAAhiB,EAAAh6B,EAAAg8C,eACAv7F,EAAAu/C,EAAAg8C,aAAAv7F,EAAAu/C,EAAAg8C,eACAhiB,EAAAh6B,EAAAg8C,WAAAv2J,KAAAu6G,EAAAi8C,SACAx7F,EAAAu/C,EAAAg8C,WAAAv2J,KAAAu+B,SAAAtpC,KAQA,IAAA,IAAAA,KAAA+lE,EAEAg5F,EAAAh5F,EAAA/lE,GAAAs/I,EAAAt/I,IAOA,IAHA,IAAAwhK,KACAC,KAEAzhK,EAAA,EAAAA,EAAAs/I,EAAAx/I,OAAAE,IAEA,IAAA,IAAA+zB,EAAA,EAAAA,EAAA,EAAAA,IAEAurH,EAAAt/I,IAAA+lE,EAAA/lE,IAEAwhK,EAAAz2J,KAAAu0I,EAAAt/I,GAAA+zB,IACA0tI,EAAA12J,KAAAg7D,EAAA/lE,GAAA+zB,MAIAytI,EAAAz2J,KAAA,GACA02J,EAAA12J,KAAA,IAQAgnB,EAAAukB,aAAA,aAAA,IAAA01E,EAAAv9E,gBAAA,IAAAoB,aAAA2xH,GAAAhD,IACAzsI,EAAAukB,aAAA,YAAA,IAAA01E,EAAAv9E,gBAAA,IAAAoB,aAAA4xH,GAAAjD,IAkBA,OAZA,GAAAh9J,KAAAw+J,OAAAlgK,SACAw+C,EAAA,IAAA0tE,EAAAvxE,KAAA1oB,EAAAuxF,IAEA9hH,KAAAw+J,OAAAlgK,OAAA,IAEAw+C,EAAA,IAAA0tE,EAAA/yB,YAAAlnE,EAAAuxF,IACA7pB,uBAIAj4F,KAAAk/J,UAAApiH,EAEAA,GAMA,SAAAojH,IAEAlgK,KAAAmgK,YAAA,EACAngK,KAAAogK,YAqDA,SAAAC,IAEArgK,KAAAgxB,QACAhxB,KAAAC,SAAA,WAEA,IAAAqgK,EAAA,GAMA,OALAtgK,KAAAgxB,KAAA40E,QAAA,SAAApnG,GAEA8hK,GAAAxmH,OAAAkvE,aAAAxqH,KAGA8hK,EAAAtkG,QAAA,iBAAA,KAoBA,SAAAukG,IAEAvgK,KAAA6+J,MAAA,GACA7+J,KAAAwgK,mBACAxgK,KAAAygK,aAAA,EACAzgK,KAAA0gK,WAAA,EACA1gK,KAAA2gK,WACA3gK,KAAA4gK,aACA5gK,KAAAg/J,QAAA,SAAAh7G,GAEA,GAAAhkD,KAAAk/J,UAAA,OAAAl/J,KAAAk/J,UACA,IAAAvjE,EAAA,IAAA6uB,EAAAl/F,SACAqwE,EAAAl9F,KAAAuB,KAAA6+J,MACAljE,EAAAl+E,OAAAzd,KAAAwgK,gBAAAxB,UAEA,IAAA,IAAAxgK,EAAA,EAAAA,EAAAwB,KAAA4gK,UAAAtiK,OAAAE,IAEAm9F,EAAArtF,IAAAtO,KAAA4gK,UAAApiK,GAAAwgK,QAAAh7G,IAIA,IAAA,IAAAxlD,EAAA,EAAAA,EAAAwB,KAAA2gK,QAAAriK,OAAAE,IAEAm9F,EAAArtF,IAAA01C,EAAA28G,QAAA3gK,KAAA2gK,QAAAniK,IAAAwgK,QAAAh7G,IAOA,OAHAhkD,KAAAk/J,UAAAvjE,EAEAA,EAAAl+E,OAAA6K,UAAAqzE,EAAA5zE,SAAA4zE,EAAAjoF,WAAAioF,EAAA98E,OACA88E,GAMA,SAAAklE,IAEA7gK,KAAA6+J,MAAA,GACA7+J,KAAA8gK,YAAA,EACA9gK,KAAAo/J,cAAA,EAIA,SAAA2B,IAEA/gK,KAAAghK,KAAA,GACAhhK,KAAAihK,UAAA,EACAjhK,KAAAkhK,OAAA,EACAlhK,KAAAmhK,SACAnhK,KAAAohK,YAAA,EACAphK,KAAAqhK,MAAA,EACArhK,KAAAshK,YAAA,WAEA,IAAAx3J,EAAA,IAAA2jC,WAAAztC,KAAAmhK,OAAAhuG,OACAouG,EAAA,IAAA7wD,SAAA5mG,GACA0L,EAAA+rJ,EAAAC,WAAA,GAAA,GACAlkJ,EAAAikJ,EAAAC,WAAA,GAAA,GACA3yJ,EAAA0yJ,EAAAC,WAAA,GAAA,GAEA,OAAA,IAAAh3C,EAAA/jF,MAAAjxB,EAAA8H,EAAAzO,IAIA7O,KAAAyhK,YAAA,WAEA,IAAA33J,EAAA,IAAA2jC,WAAAztC,KAAAmhK,OAAAhuG,OACAouG,EAAA,IAAA7wD,SAAA5mG,GACA0L,EAAA+rJ,EAAAC,WAAA,GAAA,GACA,OAAAhsJ,GAIAxV,KAAA0hK,WAAA,WAEA,IAAA53J,EAAA,IAAA2jC,WAAAztC,KAAAmhK,OAAAhuG,OACAouG,EAAA,IAAA7wD,SAAA5mG,GACA0L,EAAA+rJ,EAAAC,WAAA,GAAA,GACA,QAAAhsJ,GAIAxV,KAAA2hK,aAAA,WAEA,IAAAhzJ,EAAA,IAAA0xJ,EAEA,OADA1xJ,EAAAqiB,KAAAhxB,KAAAmhK,MACAxyJ,EAAA1O,YAIAD,KAAA4hK,UAAA,WAEA,IAAAjzJ,EAAA,IAAA0xJ,EACA1xJ,EAAAqiB,KAAAhxB,KAAAmhK,MACA,IAAAhjK,EAAAwQ,EAAA1O,WASA,OANA,IAFA9B,EAAAA,EAAA69D,QAAA,MAAA,MAEA1yD,QAAA,OAEAnL,EAAAA,EAAAiiH,OAAAjiH,EAAAgrH,YAAA,KAAA,IAIAkiC,EAAAzvC,KAAAz9G,IAKA,IAAA0jK,GAEAC,YAAA,OACAC,gBAAA,UACAC,gBAAA,WACAC,iBAAA,YACAC,eAAA,UACAC,eAAA,QACAC,gBAAA,WACAC,gBAAA,WACAC,mBAAA,cACAC,kBAAA,UACAC,iBAAA,YACAC,oBAAA,eACAC,gBAAA,aACAC,YAAA,OAIAC,GAEAd,YAAA,SACAC,gBAAA,OACAC,gBAAA,OACAC,iBAAA,OACAC,eAAA,QACAC,eAAA,QACAC,gBAAA,QACAC,gBAAA,QACAC,mBAAA,QACAC,kBAAA,QACAC,iBAAA,QACAC,oBAAA,QACAC,gBAAA,QACAC,YAAA,OAIA,SAAAE,IAEA7iK,KAAA8iK,cAAA,EACA9iK,KAAA+iK,eAAA,EACA/iK,KAAAgjK,eACAhjK,KAAAg/J,QAAA,WAIA,IAFA,IAAAl9C,EAAA,IAAA0I,EAAApnD,kBAEA5kE,EAAA,EAAAA,EAAAwB,KAAAgjK,YAAA1kK,OAAAE,IAUA,GARA,SAAAokK,EAAA5iK,KAAAgjK,YAAAxkK,GAAAwiK,QACAl/C,EAAA+/C,EAAA7hK,KAAAgjK,YAAAxkK,GAAAwiK,OAAAhhK,KAAAgjK,YAAAxkK,GAAAijK,eACA,SAAAmB,EAAA5iK,KAAAgjK,YAAAxkK,GAAAwiK,QACAl/C,EAAA+/C,EAAA7hK,KAAAgjK,YAAAxkK,GAAAwiK,OAAAhhK,KAAAgjK,YAAAxkK,GAAA8iK,eACA,QAAAsB,EAAA5iK,KAAAgjK,YAAAxkK,GAAAwiK,QACAl/C,EAAA+/C,EAAA7hK,KAAAgjK,YAAAxkK,GAAAwiK,OAAAhhK,KAAAgjK,YAAAxkK,GAAAkjK,cACA,UAAAkB,EAAA5iK,KAAAgjK,YAAAxkK,GAAAwiK,QACAl/C,EAAA+/C,EAAA7hK,KAAAgjK,YAAAxkK,GAAAwiK,OAAAhhK,KAAAgjK,YAAAxkK,GAAAmjK,gBACA,OAAAiB,EAAA5iK,KAAAgjK,YAAAxkK,GAAAwiK,MAAA,CAEA,IAAAiC,EAAAjjK,KAAAgjK,YAAAxkK,GACAykK,EAAAhC,WAAArE,IACA96C,EAAA/1E,IAAA/rC,KAAAgjK,YAAAxkK,GAAAojK,aACAqB,EAAAhC,WAAApE,IACA/6C,EAAAnxE,UAAA3wC,KAAAgjK,YAAAxkK,GAAAojK,aACAqB,EAAAhC,WAAAlE,IACAj7C,EAAA91E,SAAAhsC,KAAAgjK,YAAAxkK,GAAAojK,aACAqB,EAAAhC,WAAAnE,IACAh7C,EAAAz1E,SAAArsC,KAAAgjK,YAAAxkK,GAAAojK,aAYA,OANA9/C,EAAAl6C,QAAApyD,EAAA,IACAssG,EAAAl6C,QAAAtqD,EAAA,IACAwkG,EAAAl6C,QAAA/4D,EAAA,IACAizG,EAAA/6E,MAAAvxB,EAAA,EACAssG,EAAA/6E,MAAAzpB,EAAA,EACAwkG,EAAA/6E,MAAAl4B,EAAA,EACAizG,GAOA,SAAAohD,EAAAjyJ,EAAAC,EAAAlH,GAEA,IAAAqE,EAAA,IAAAm8G,EAAApzG,QACA+rJ,EAAA,EAAAn5J,EAIA,OAHAqE,EAAA3O,EAAAuR,EAAAvR,EAAAsK,EAAAkH,EAAAxR,EAAAyjK,EACA90J,EAAA3C,EAAAuF,EAAAvF,EAAA1B,EAAAkH,EAAAxF,EAAAy3J,EACA90J,EAAArB,EAAAiE,EAAAjE,EAAAhD,EAAAkH,EAAAlE,EAAAm2J,EACA90J,EAIA,SAAA+0J,EAAAt+D,EAAAC,EAAA/6F,GAEA,OAAA86F,EAAA52F,QAAA8D,MAAA+yF,EAAA,EAAA/6F,GAIA,SAAAq5J,EAAAzrH,EAAA2a,EAAA+wG,EAAA73J,GAEA,GAAA,GAAAmsC,EAAAt5C,OAAA,OAAAs5C,EAAA,GAAA2rH,OAAAvE,UAMA,IAJA,IAAAnF,EAAA3nI,EAAAA,EACAnB,EAAA,KACArwB,EAAA,KAEAlC,EAAA,EAAAA,EAAAo5C,EAAAt5C,OAAAE,IAAA,CAEA,IAAAglK,EAAArkK,KAAAkR,IAAAunC,EAAAp5C,GAAAilK,MAAAlxG,GAEAixG,EAAA3J,GAAAjiH,EAAAp5C,GAAAilK,OAAAlxG,IAEAsnG,EAAA2J,EACAzyI,EAAA6mB,EAAAp5C,GACAkC,EAAAk3C,EAAAp5C,EAAA,IAMA,GAAAuyB,EAIA,CAAA,GAAArwB,EAAA,CAEA,IAAAgjK,EAAAhjK,EAAA+iK,MAAA1yI,EAAA0yI,MACAzjE,EAAAjvE,EAAA0yI,MAAAlxG,EACAvoD,EAAAg2F,EAAA0jE,EAEA,OAAAj4J,EAAAslB,EAAAwyI,OAAAvE,UAAAt+J,EAAA6iK,OAAAvE,UAAAh1J,IAIAtJ,EAAAk3C,EAAA,GAAA1pC,SACAu1J,OAAAH,EAEA,IAAAI,EAAAhjK,EAAA+iK,MAAA1yI,EAAA0yI,MACAzjE,EAAAjvE,EAAA0yI,MAAAlxG,EACAvoD,EAAAg2F,EAAA0jE,EAEA,OAAAj4J,EAAAslB,EAAAwyI,OAAAvE,UAAAt+J,EAAA6iK,OAAAvE,UAAAh1J,GAnBA,OAAA,KAyBA,SAAA25J,IAEA3jK,KAAA4jK,UAAA,GACA5jK,KAAA6jK,iBAAA,EACA7jK,KAAA8jK,iBAAA,EACA9jK,KAAA+jK,gBAAA,EACA/jK,KAAAgkK,iBACAhkK,KAAAikK,iBACAjkK,KAAAkkK,gBACAlkK,KAAAmkK,UAAA,GACAnkK,KAAAokK,WAAA,GACApkK,KAAAymE,KAAA,SAAA49F,GAIA,SAAA14J,EAAAA,GAEAA,EAAA83J,OAAAY,EAJAA,IAAAA,EAAA,GAQArkK,KAAAgkK,cAAAp+D,QAAAj6F,GACA3L,KAAAikK,cAAAr+D,QAAAj6F,GACA3L,KAAAkkK,aAAAt+D,QAAAj6F,IAIA3L,KAAA06J,SAAA,WAEA,SAAA4J,EAAA11J,EAAAC,GAEA,OAAAD,EAAA60J,MAAA50J,EAAA40J,MAIAzjK,KAAAgkK,cAAAxmH,KAAA8mH,GACAtkK,KAAAikK,cAAAzmH,KAAA8mH,GACAtkK,KAAAkkK,aAAA1mH,KAAA8mH,IAIAtkK,KAAA6gH,UAAA,WAEA,OAAA1hH,KAAA6L,IACA7L,KAAA6L,IAAAw/E,MAAA,KAAAxqF,KAAAgkK,cAAAj4H,IAAA,SAAAn9B,GAEA,OAAAA,EAAA60J,SAGAtkK,KAAA6L,IAAAw/E,MAAA,KAAAxqF,KAAAikK,cAAAl4H,IAAA,SAAAn9B,GAEA,OAAAA,EAAA60J,SAGAtkK,KAAA6L,IAAAw/E,MAAA,KAAAxqF,KAAAkkK,aAAAn4H,IAAA,SAAAn9B,GAEA,OAAAA,EAAA60J,WAOAzjK,KAAAg/J,QAAA,SAAArjE,GAEA37F,KAAA06J,WAIA,IAHA,IAAAp8J,EAAA0B,KAAA6gH,YACAnP,EAAA,IAAAioD,EAAAY,cAEA/7J,EAAA,EAAAA,EAAAF,EAAAE,GAAA,IAAA,CAEA,IAAAif,EAAA,IAAA+sG,EAAAxmG,QACAuuC,EAAA/zD,EACA+lK,EAAAlB,EAAArjK,KAAAgkK,cAAAzxG,EAAAj0D,EAAA4kK,GACArkJ,EAAAwkJ,EAAArjK,KAAAkkK,aAAA3xG,EAAAj0D,EAAA4kK,GACAxkJ,EAAA2kJ,EAAArjK,KAAAikK,cAAA1xG,EAAAj0D,EAAA8kK,GACA3lJ,EAAAuI,QAAAu+I,EAAA7lJ,EAAAG,GAEA,IAAAkS,EAAA,IAAA4oI,EAAAC,SAAArnG,EAAA90C,GACAi0F,EAAA+oD,OAAA1pI,GAIA2gF,EAAAtxG,OAAAu7F,EAAA6/B,SAAAx7H,KAAA4jK,WAAA5E,UAEA,IAAAvtD,GAAAC,GAEA,GAAA/V,EAAA2hE,cAAAt9J,KAAA4jK,WAEA,IAAA,IAAAplK,EAAA,EAAAA,EAAAm9F,EAAA2hE,cAAAt9J,KAAA4jK,WAAAtlK,OAAAE,IAAA,CAEA,IAAAs/G,EAAApM,EAAAxjG,QACA4vG,EAAA19G,OAAAu7F,EAAA2hE,cAAAt9J,KAAA4jK,WAAAplK,GACAizG,EAAAloG,KAAAu0G,GAMA,OAAArM,GAMA,SAAA+yD,IAEAxkK,KAAA6+J,MAAA,GACA7+J,KAAAykK,UAAA,EACAzkK,KAAA0kK,gBAAA,EACA1kK,KAAA2kK,aAAA,EACA3kK,KAAA4kK,aACA5kK,KAAAg/J,QAAA,SAAAjhC,GAEA,IAAA8mC,EAAA,IAAAlL,EAAA2B,UAEA,IAAA,IAAA98J,KAAAwB,KAAA4kK,UAAA,CAEA5kK,KAAA4kK,UAAApmK,GAAAioE,KAAAzmE,KAAA0kK,iBAEA,IAAAjzD,EAAAzxG,KAAA4kK,UAAApmK,GAAAwgK,QAAAjhC,GAEA,IAAA,IAAAxrG,KAAAk/E,EAEAA,EAAAl/E,GAAAk0C,OACAo+F,EAAAtJ,SAAA9pD,EAAAl/E,IAWA,OALAsyI,EAAAvmK,OAAAa,KAAA6L,IAAAw/E,MAAA,KAAAq6E,EAAApzD,OAAA1lE,IAAA,SAAAx8B,GAEA,OAAAA,EAAAjR,UAGAumK,GAMA,SAAAC,IAEA9kK,KAAA+kK,OAAA,EACA/kK,KAAAglK,QAAA,EACAhlK,KAAAilK,oBACAjlK,KAAAklK,UAIA,SAAAC,IAEAnlK,KAAA6+J,MAAA,GACA7+J,KAAAqhK,MAAA,EACArhK,KAAAolK,qBAAA,EACAplK,KAAAqlK,mBAAA,EACArlK,KAAAslK,sBAAA,EACAtlK,KAAAulK,gBAAA,EACAvlK,KAAAwlK,gBAAA,EACAxlK,KAAAylK,cAAA,KACAzlK,KAAA0lK,eAAA,KACA1lK,KAAA2lK,cAAA,KAIA,SAAAC,IAEA5lK,KAAA6+J,MAAA,GACA7+J,KAAA6lK,UAAA,KACA7lK,KAAA8lK,QAAA,KACA9lK,KAAA+lK,IAAA,KACA/lK,KAAAgmK,eAAA,EACAhmK,KAAAimK,eAAA,EACAjmK,KAAAkmK,cAAA,EACAlmK,KAAAmmK,QAAA,EAoGA,IAAAC,GAAA,EAEA,SAAAC,EAAAC,GAEA,IAAAC,EAAAD,EAAA9E,WAAA8E,EAAAxuD,WAAAsuD,GAEA,OADAE,EAAAxuD,YAAA,EACAyuD,EAIA,SAAAC,GAAAF,GAEA,IAAAC,EAAAD,EAAAG,WAAAH,EAAAxuD,WAAAsuD,GAEA,OADAE,EAAAxuD,YAAA,EACAyuD,EAIA,SAAAG,GAAAJ,GAEA,IAAAC,EAAAD,EAAAhO,SAAAgO,EAAAxuD,YAEA,OADAwuD,EAAAxuD,YAAA,EACAyuD,EAIA,SAAAI,GAAAL,GAEA,IAAAC,EAAAD,EAAAM,UAAAN,EAAAxuD,WAAAsuD,GAEA,OADAE,EAAAxuD,YAAA,EACAyuD,EAIA,SAAAM,GAAAP,GAEA,IAAAC,EAAAD,EAAAQ,UAAAR,EAAAxuD,WAAAsuD,GAEA,OADAE,EAAAxuD,YAAA,EACAyuD,EAIA,SAAAQ,GAAAT,GAEA,IAAAC,EAAAD,EAAAQ,UAAAR,EAAAxuD,WAAAsuD,GAEA,OADAE,EAAAxuD,YAAA,EACAyuD,EAIA,SAAAS,GAAAC,GAEA,IAAA54J,EAAA,IA3pBA,WAEArO,KAAAN,EAAA,EACAM,KAAA0L,EAAA,EACA1L,KAAAgN,EAAA,EAEAhN,KAAAg/J,QAAA,WAEA,OAAA,IAAAx0C,EAAApzG,QAAApX,KAAAN,EAAAM,KAAA0L,EAAA1L,KAAAgN,KAupBA,OAHAqB,EAAA3O,EAAA2mK,EAAAY,GACA54J,EAAA3C,EAAA26J,EAAAY,GACA54J,EAAArB,EAAAq5J,EAAAY,GACA54J,EAIA,SAAA64J,GAAAD,GAEA,IAAAp1J,EAAA,IAvpBA,WAEA7R,KAAAwV,EAAA,EACAxV,KAAAsd,EAAA,EACAtd,KAAA6O,EAAA,EACA7O,KAAA4O,EAAA,EACA5O,KAAAg/J,QAAA,WAEA,OAAA,IAAAx0C,EAAA/jF,MAAAzmC,KAAAwV,EAAAxV,KAAAsd,EAAAtd,KAAA6O,KAmpBA,OAHAgD,EAAA2D,EAAA6wJ,EAAAY,GACAp1J,EAAAyL,EAAA+oJ,EAAAY,GACAp1J,EAAAhD,EAAAw3J,EAAAY,GACAp1J,EAIA,SAAAs1J,GAAAF,GAEA,IAAA54J,EAAA,IAnpBA,WAEArO,KAAAN,EAAA,EACAM,KAAA0L,EAAA,EACA1L,KAAAgN,EAAA,EACAhN,KAAAiN,EAAA,EACAjN,KAAAg/J,QAAA,WAEA,OAAA,IAAAx0C,EAAAz9G,WAAA/M,KAAAN,EAAAM,KAAA0L,EAAA1L,KAAAgN,EAAAhN,KAAAiN,KAgpBA,OAJAoB,EAAApB,EAAAo5J,EAAAY,GACA54J,EAAA3O,EAAA2mK,EAAAY,GACA54J,EAAA3C,EAAA26J,EAAAY,GACA54J,EAAArB,EAAAq5J,EAAAY,GACA54J,EAIA,SAAA+4J,GAAAH,GAEA,IAAAt4J,EAAA,IAAA0xJ,EACAgH,EAAAR,GAAAI,GAEA,OADAA,EAAAK,UAAA34J,EAAAqiB,KAAA,EAAAq2I,GACA14J,EAAA1O,WAIA,SAAAsnK,GAAAN,GAEA,IAAAh6J,EAAA,IAzpBA,WAEAjN,KAAA8/J,UAAA,EACA9/J,KAAA+/J,QAAA,GAypBA,OAFA9yJ,EAAA6yJ,UAAA+G,GAAAI,GACAh6J,EAAA8yJ,QAAAsG,EAAAY,GACAh6J,EAIA,SAAAu6J,GAAAP,GAIA,IAFA,IAAA97J,EAAA,IAjIA,WAEAnL,KAAAwP,uBAMAxP,KAAAg/J,QAAA,WAIA,IAFA,IAAA7zJ,EAAA,IAAAq/G,EAAAxmG,QAEAxlB,EAAA,EAAAA,EAAA,IAAAA,EAEA,IAAA,IAAAg+B,EAAA,EAAAA,EAAA,IAAAA,EAEArxB,EAAAqE,SAAA,EAAAhR,EAAAg+B,GAAAx8B,KAAAwP,SAAAgtB,GAAAh+B,GAMA,OAAA2M,IA6GA3M,EAAA,EAAAA,EAAA,IAAAA,EAEA,IAAA,IAAAg+B,EAAA,EAAAA,EAAA,IAAAA,EAEArxB,EAAAqE,SAAAhR,GAAAg+B,GAAA6pI,EAAAY,GAMA,OAAA97J,EAIA,SAAAs8J,GAAAR,GAEA,IAAA54J,EAAA,IA5pBA,WAEArO,KAAAyjK,MAAA,EACAzjK,KAAAujK,OAAA,MA4pBA,OAFAl1J,EAAAo1J,MAAA+C,GAAAS,GACA54J,EAAAk1J,OAAAyD,GAAAC,GACA54J,EAIA,SAAAq5J,GAAAT,GAEA,IAAA54J,EAAA,IA9pBA,WAEArO,KAAAyjK,MAAA,EACAzjK,KAAAujK,OAAA,MA8pBA,OAFAl1J,EAAAo1J,MAAA+C,GAAAS,GACA54J,EAAAk1J,OAAA4D,GAAAF,GACA54J,EAUA,SAAAs5J,GAAAV,EAAAj2I,EAAA0C,GAEA,IAAA,IAAAl1B,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAAAwyB,EAAAxyB,GAAAipK,GAAAR,GAUA,SAAAW,GAAAX,EAAAjnE,EAAA90F,GAGA,OAAA+7J,EAAAY,KAAAC,OAAA9nE,GAAA90F,EAAA68J,IAIA,SAAAC,GAAAC,GAEA,IAAAA,EACA,KAAA,eAiDA,SAAAC,GAAAjB,EAAAp4J,GAEA,IAAAs5J,EAAApB,GAAAE,GAsBA,OArBAe,GAAAG,GAAArM,GAEAiL,GAAAE,GACAp4J,EAAAgwJ,MAAAuI,GAAAH,GACAp4J,EAAAiyJ,YAAA+F,GAAAI,GACAp4J,EAAAuwJ,cAAAoI,GAAAP,GAGAmB,GAEAR,GAAAX,EAAAp4J,EAAAgxJ,SAAAhxJ,EAAAiyJ,cAMAjyJ,EAAAgxJ,YAhGA,SAAAoH,EAAAj2I,EAAA0C,GAEA,IAAA,IAAAl1B,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAAAwyB,EAAAxyB,GAAA+oK,GAAAN,GA+FAoB,CAAApB,EAAAp4J,EAAAgxJ,SAAAhxJ,EAAAiyJ,cAIAjyJ,EAIA,SAAAy5J,GAAArB,EAAAnqH,GAEA,IAAAqrH,EAAApB,GAAAE,GACAe,GAAAG,GAAAxM,GAEAoL,GAAAE,GACAnqH,EAAA8gH,gBAAAiJ,GAAAI,GACAnqH,EAAA+gH,aAAAgJ,GAAAI,GACAnqH,EAAAghH,UAAA+I,GAAAI,GACAnqH,EAAAihH,UAAA8I,GAAAI,GACAnqH,EAAAkhH,eAAA6I,GAAAI,GACAnqH,EAAAyrH,oBAEA,IAAA12J,EAAAg1J,GAAAI,GAEAp1J,EAAAsqJ,IAEAiM,GAEAR,GAAAX,EAAAnqH,EAAAmhH,UAAAnhH,EAAA+gH,eAMA/gH,EAAAmhH,aACAnhH,EAAAyiH,cAAA0H,EAAAuB,WAAAvB,EAAAnvD,WAAAmvD,EAAAnvD,WAAA,EAAAh7D,EAAA+gH,aAAA,GACAoJ,EAAAY,KAAA,EAAA/qH,EAAA+gH,aAAA,EAAAkK,MAMAl2J,EAAAuqJ,IAEAgM,GAEAR,GAAAX,EAAAnqH,EAAAohH,SAAAphH,EAAA+gH,eAMA/gH,EAAAohH,YACAphH,EAAA0iH,cAAAyH,EAAAuB,WAAAvB,EAAAnvD,WAAAmvD,EAAAnvD,WAAA,EAAAh7D,EAAA+gH,aAAA,GACAoJ,EAAAY,KAAA,EAAA/qH,EAAA+gH,aAAA,EAAAkK,MAMAl2J,EAAAwqJ,IAEA+L,IAEAR,GAAAX,EAAAnqH,EAAAqhH,UAAArhH,EAAA+gH,cACA+J,GAAAX,EAAAnqH,EAAAshH,YAAAthH,EAAA+gH,gBAMA/gH,EAAAqhH,aACArhH,EAAA6iH,eAAAsH,EAAAuB,WAAAvB,EAAAnvD,WAAAmvD,EAAAnvD,WAAA,EAAAh7D,EAAA+gH,aAAA,GACAoJ,EAAAY,KAAA,EAAA/qH,EAAA+gH,aAAA,EAAAkK,IACAjrH,EAAAshH,eACAthH,EAAA8iH,iBAAAqH,EAAAuB,WAAAvB,EAAAnvD,WAAAmvD,EAAAnvD,WAAA,EAAAh7D,EAAA+gH,aAAA,GACAoJ,EAAAY,KAAA,EAAA/qH,EAAA+gH,aAAA,EAAAkK,MAMA,IAAA,IAAA78J,EAAA,EAAAA,EAAAsxJ,GAEA3qJ,EAAAqrJ,EAAAhyJ,KAFAA,EAIAk9J,GAEAR,GAAAX,EAAAnqH,EAAAuhH,QAAAnzJ,GAAA4xC,EAAA+gH,eAMA/gH,EAAAuhH,QAAAnzJ,MACA4xC,EAAA2iH,aAAAwH,EAAAuB,WAAAvB,EAAAnvD,WAAAmvD,EAAAnvD,WAAA,EAAAh7D,EAAA+gH,aAAA,GACAoJ,EAAAY,KAAA,EAAA/qH,EAAA+gH,aAAA,EAAAkK,KAMAjrH,EAAA4iH,qBAEA,IAAA,IAAAx0J,EAAA,EAAAA,EAAAuxJ,GAEA5qJ,EAAAorJ,EAAA/xJ,KAFAA,EAOA,GAFA4xC,EAAAyrH,iBAAAr9J,GAAA27J,GAAAI,GAEAmB,GAEAR,GAAAX,EAAAnqH,EAAAwhH,eAAApzJ,GAAA4xC,EAAA+gH,kBAEA,CAIA/gH,EAAAwhH,eAAApzJ,MAEA4xC,EAAA4iH,kBAAAx0J,MAEA,IAAA,IAAA6X,EAAA,EAAAA,EAAA+5B,EAAA+gH,aAAA96I,IAEA+5B,EAAA4iH,kBAAAx0J,GAAA3B,KAAA88J,EAAAY,IACAnqH,EAAA4iH,kBAAAx0J,GAAA3B,KAAA88J,EAAAY,IACAZ,EAAAY,GAWA,GAAAmB,GAEAvB,GAAAI,OAEA,CAKAnqH,EAAAyhH,UACAzhH,EAAAwiH,eAEA,IAAA,IAAA9gK,EAAA,EAAAA,EAAAs+C,EAAAghH,YAAAt/J,EAAA,CAEA,IAAA+U,EAAAupC,EAAAyhH,OAAA//J,GAAA,IAAA0hK,EAEA3sJ,EAAA4sJ,YAAAwG,GAAAM,GACA1zJ,EAAA6sJ,YAEA,IAAA,IAAAxxJ,EAAA,EAAAA,EAAA2E,EAAA4sJ,cAAAvxJ,EAEAkuC,EAAA+gH,aAAA,MAEAtqJ,EAAA6sJ,SAAAxxJ,GAAA+3J,GAAAM,GAIA1zJ,EAAA6sJ,SAAAxxJ,GAAAi4J,GAAAI,GAQA,GAAA,IAAA1zJ,EAAA4sJ,YAEArjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,QAEA,CAAA,GAAA,IAAA7sJ,EAAA4sJ,YAWA,MAAA,IAAAnyJ,MAAA,yFATA8uC,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,IACAtjH,EAAAwiH,YAAA/1J,KAAAgK,EAAA6sJ,SAAA,MAcA,GAAAtjH,EAAAihH,UAAA,CAEAjhH,EAAA0hH,UAEA,IAAA,IAAA5vJ,EAAA,EAAAA,EAAAkuC,EAAAihH,YAAAnvJ,EAEAkuC,EAAA0hH,OAAA5vJ,GAAA,IAAAiyJ,EACAqH,GAAAjB,EAAAnqH,EAAA0hH,OAAA5vJ,KAQA,SAAA65J,GAAAxB,EAAAhE,GAEA,IAAAkF,EAAApB,GAAAE,GACAe,GAAAG,GAAAjM,GAEA6K,GAAAE,GACAhE,EAAAjC,KAAAoG,GAAAH,GACAhE,EAAAhC,UAAA4F,GAAAI,GACAhE,EAAA/B,OAAA2F,GAAAI,GACAhE,EAAA7B,YAAAyF,GAAAI,GACAhE,EAAA5B,MAAAwF,GAAAI,GACAhE,EAAA9B,SACA8F,EAAAK,UAAArE,EAAA9B,MAAA,EAAA8B,EAAA7B,aAMA,SAAAsH,GAAAzB,EAAAnlD,GAEA,IAAAqmD,EAAApB,GAAAE,GAMA,GALAe,GAAAG,GAAAlM,GAEA8K,GAAAE,GACAnlD,EAAAghD,cAAAhhD,EAAAihD,eAAA8D,GAAAI,GAEAnlD,EAAAihD,eAAA,CAEAjhD,EAAAkhD,oBAEAlhD,EAAAkhD,YAIAlhD,EAAAkhD,eAEA,IAAA,IAAAxkK,EAAA,EAAAA,EAAAsjH,EAAAihD,iBAAAvkK,EAEAsjH,EAAAkhD,YAAAxkK,GAAA,IAAAuiK,EACA0H,GAAAxB,EAAAnlD,EAAAkhD,YAAAxkK,KAQA,SAAAmqK,GAAA1B,EAAA3iB,GAEA,IAAA6jB,EAAApB,GAAAE,GACAe,GAAAG,GAAAvM,GAEAmL,GAAAE,GACA3iB,EAAAsf,UAAAwD,GAAAH,GACA3iB,EAAAuf,iBAAAgD,GAAAI,GACA3iB,EAAAwf,iBAAA+C,GAAAI,GACA3iB,EAAAyf,gBAAA8C,GAAAI,GACA3iB,EAAA6f,UAAA0C,GAAAI,GACA3iB,EAAA8f,WAAAyC,GAAAI,GAEA3iB,EAAAuf,mBAEAuE,GAEAR,GAAAX,EAAA3iB,EAAA0f,cAAA1f,EAAAuf,mBAMAvf,EAAA0f,iBACA2D,GAAAV,EAAA3iB,EAAA0f,cAAA1f,EAAAuf,oBAMAvf,EAAAwf,mBAEAsE,GAEAR,GAAAX,EAAA3iB,EAAA2f,cAAA3f,EAAAwf,mBAMAxf,EAAA2f,iBAlYA,SAAAgD,EAAAj2I,EAAA0C,GAEA,IAAA,IAAAl1B,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAAAwyB,EAAAxyB,GAAAkpK,GAAAT,GAiYA2B,CAAA3B,EAAA3iB,EAAA2f,cAAA3f,EAAAwf,oBAMAxf,EAAAyf,kBAEAqE,GAEAR,GAAAX,EAAA3iB,EAAA4f,aAAA5f,EAAAyf,kBAMAzf,EAAA4f,gBACAyD,GAAAV,EAAA3iB,EAAA4f,aAAA5f,EAAAyf,mBAQA,SAAA8E,GAAA5B,EAAA6B,GAEA,IAAAX,EAAApB,GAAAE,GASA,GARAe,GAAAG,GAAApM,GAEAgL,GAAAE,GACA6B,EAAAjK,MAAAuI,GAAAH,GACA6B,EAAArE,UAAA+B,GAAAS,GACA6B,EAAApE,gBAAA8B,GAAAS,GACA6B,EAAAnE,aAAAkC,GAAAI,GAEA6B,EAAAnE,aAAA,CAEAmE,EAAAlE,aAEA,IAAA,IAAAh2J,EAAA,EAAAA,EAAAk6J,EAAAnE,eAAA/1J,EAEAk6J,EAAAlE,UAAAh2J,GAAA,IAAA+0J,EACAgF,GAAA1B,EAAA6B,EAAAlE,UAAAh2J,KAQA,SAAAm6J,GAAA9B,EAAA+B,GAEA,IAAAb,EAAApB,GAAAE,GACAe,GAAAG,GAAAzM,GAEAqL,GAAAE,GACA+B,EAAAjE,OAAA8B,GAAAI,GACA+B,EAAAhE,QAAA6B,GAAAI,GACAA,EAAAK,UAAA0B,EAAAC,cAAA,EAAA,GAEAb,KAEAY,EAAAhE,SAOAgE,EAAA9D,UACA+B,EAAAK,UAAA0B,EAAA9D,OAAA,EAAA8D,EAAAjE,OAAAiE,EAAAhE,QAAA,KANAgE,EAAA9D,UACA+B,EAAAK,UAAA0B,EAAA9D,OAAA,EAAA8D,EAAAjE,UAaA,SAAAmE,GAAAjC,EAAAj9J,GAEA,IAAAm+J,EAAApB,GAAAE,GACAe,GAAAG,GAAA1M,GAEAsL,GAAAE,GACAj9J,EAAA60J,MAAAuI,GAAAH,GACAj9J,EAAAq3J,MAAAwF,GAAAI,GAEAj9J,EAAAq3J,OAAA3E,IAEA1yJ,EAAAo7J,qBAAAiB,EAAAY,GACAj9J,EAAAq7J,mBAAAgB,EAAAY,GACAj9J,EAAAs7J,sBAAAe,EAAAY,IAIAj9J,EAAAy7J,cAAAyB,GAAAD,GACAj9J,EAAA07J,eAAAwB,GAAAD,GACAj9J,EAAA27J,cAAAuB,GAAAD,GAEAj9J,EAAAq3J,OAAA1E,IAEA3yJ,EAAAu7J,gBAAAc,EAAAY,GACAj9J,EAAAw7J,gBAAAa,EAAAY,IAMA,SAAAkC,GAAAlC,EAAAmC,GAEA,IAAAjB,EAAApB,GAAAE,GACAe,GAAAG,GAAA3M,GAEAuL,GAAAE,GACAmC,EAAAvK,MAAAuI,GAAAH,GACAmC,EAAAvD,UAAAmB,GAAAC,GACAmC,EAAAtD,QAAAkB,GAAAC,GACAmC,EAAArD,IAAAiB,GAAAC,GACAmC,EAAApD,eAAAK,EAAAY,GACAmC,EAAAnD,eAAAI,EAAAY,GACAmC,EAAAlD,cAAAG,EAAAY,GACAmC,EAAAjD,QAAAE,EAAAY,GAIA,SAAAoC,GAAApC,EAAAjjH,GAEA,IAAAmkH,EAAApB,GAAAE,GAeA,GAdAe,GAAAG,GAAAtM,GAEAkL,GAAAE,GACAjjH,EAAAslH,OAAAzC,GAAAI,GACAjjH,EAAA08G,WAAAmG,GAAAI,GACAjjH,EAAAulH,cAAA1C,GAAAI,GACAjjH,EAAAwlH,eAAA3C,GAAAI,GACAjjH,EAAAylH,aAAA5C,GAAAI,GACAjjH,EAAA0lH,WAAA7C,GAAAI,GACAjjH,EAAA2lH,YAAA9C,GAAAI,GAEAjjH,EAAA4lH,UAAA,IAAArJ,EACAv8G,EAAA4lH,UA5fA,SAAAC,EAAA5C,EAAA17I,EAAAszB,GAEA,IAAAspH,EAAApB,GAAAE,GACAe,GAAAG,GAAAnM,GAEA+K,GAAAE,GACA,IAAA1rC,EAAA,IAAAglC,EACAhlC,EAAAujC,QAAAvzI,EACAgwG,EAAAuuC,OAAAjrH,EACA08E,EAAAsjC,MAAAuI,GAAAH,GACA1rC,EAAAilC,gBAAAgH,GAAAP,GACA1rC,EAAAklC,aAAAoG,GAAAI,GACA1rC,EAAAmlC,WAAAmG,GAAAI,GAEA,GAAA1rC,EAAAmlC,WAAA,CAEAnlC,EAAAolC,WAEA,IAAA,IAAAniK,EAAA,EAAAA,EAAA+8H,EAAAmlC,aAAAliK,EAEA+8H,EAAAolC,QAAAniK,GAAAqoK,GAAAI,GAMA,GAAA1rC,EAAAklC,aAAA,CAEAllC,EAAAqlC,aAEA,IAAA,IAAApiK,EAAA,EAAAA,EAAA+8H,EAAAklC,eAAAjiK,EAAA,CAEA,IAAAurK,EAAAF,EAAA5C,EAAA1rC,EAAA18E,KACA08E,EAAAqlC,UAAApiK,GAAAurK,GAMA,OAAAxuC,EAqdAsuC,CAAA5C,EAAA,KAAA,GAEAjjH,EAAA08G,WAAA,CAEA18G,EAAA28G,WAEA,IAAA,IAAAniK,EAAA,EAAAA,EAAAwlD,EAAA08G,aAAAliK,EAEAwlD,EAAA28G,QAAAniK,GAAA,IAAAm/J,EACA2K,GAAArB,EAAAjjH,EAAA28G,QAAAniK,IAMA,GAAAwlD,EAAAulH,cAAA,CAEAvlH,EAAAq7G,cAEA,IAAA,IAAA7gK,EAAA,EAAAA,EAAAwlD,EAAAulH,gBAAA/qK,EAEAwlD,EAAAq7G,WAAA7gK,GAAA,IAAAqkK,EACA6F,GAAAzB,EAAAjjH,EAAAq7G,WAAA7gK,IAMA,GAAAwlD,EAAAwlH,eAAA,CAEAxlH,EAAAgmH,eAEA,IAAA,IAAAxrK,EAAA,EAAAA,EAAAwlD,EAAAwlH,iBAAAhrK,EAEAwlD,EAAAgmH,YAAAxrK,GAAA,IAAAgmK,EACAqE,GAAA5B,EAAAjjH,EAAAgmH,YAAAxrK,IAMA,GAAAwlD,EAAAylH,aAAA,CAEAzlH,EAAAimH,aAEA,IAAA,IAAAzrK,EAAA,EAAAA,EAAAwlD,EAAAylH,eAAAjrK,EAEAwlD,EAAAimH,UAAAzrK,GAAA,IAAAsmK,EACAiE,GAAA9B,EAAAjjH,EAAAimH,UAAAzrK,IAMA,GAAAwlD,EAAA0lH,WAAA,CAEA1lH,EAAAkmH,WAEA,IAAA,IAAA1rK,EAAA,EAAAA,EAAAwlD,EAAA0lH,aAAAlrK,EAEAwlD,EAAAkmH,QAAA1rK,GAAA,IAAA2mK,EACA+D,GAAAjC,EAAAjjH,EAAAkmH,QAAA1rK,IAMA,GAAAwlD,EAAA2lH,YAAA,CAEA3lH,EAAAmmH,YAEA,IAAA,IAAA3rK,EAAA,EAAAA,EAAAwlD,EAAA2lH,cAAAnrK,EAEAwlD,EAAAmmH,SAAA3rK,GAAA,IAAAonK,EACAuD,GAAAlC,EAAAjjH,EAAAmmH,SAAA3rK,KAOA,IA+DA4pK,GAAAgC,GA/DArC,GAAA,EACAsC,GAAA,EA0GA,OA1CA,SAAAC,GAEA,IAAAC,EAAA,IAv5BA,WAEAvqK,KAAAwqK,aAAA,EACAxqK,KAAAyqK,aAAA,EACAzqK,KAAA0qK,gBAAA,EACA1qK,KAAA2qK,aAAA,EACA3qK,KAAAspK,OAAA,EACAtpK,KAAA0gK,WAAA,EACA1gK,KAAAupK,cAAA,EACAvpK,KAAAwpK,eAAA,EACAxpK,KAAAypK,aAAA,EACAzpK,KAAA0pK,WAAA,EACA1pK,KAAA2pK,YAAA,EACA3pK,KAAA4pK,UAAA,KACA5pK,KAAA2gK,WACA3gK,KAAAq/J,cACAr/J,KAAAgqK,eACAhqK,KAAAkqK,WACAlqK,KAAAmqK,YACAnqK,KAAAs9J,iBACAt9J,KAAAw7H,SAAA,SAAA/8H,EAAAs/H,GAQA,GANAA,IAEAA,EAAA/9H,KAAA4pK,WAIA7rC,EAAA8gC,OAAApgK,EAEA,OAAAs/H,EAIA,IAAA,IAAAv/H,EAAA,EAAAA,EAAAu/H,EAAA6iC,UAAAtiK,OAAAE,IAAA,CAEA,IAAAgxH,EAAAxvH,KAAAw7H,SAAA/8H,EAAAs/H,EAAA6iC,UAAApiK,IACA,GAAAgxH,EAAA,OAAAA,EAIA,OAAA,MAIAxvH,KAAAg/J,QAAA,WAEAh/J,KAAAq9J,UAAA,EAr1BA,SAAAr5G,GAEA,IAAA,IAAAxlD,KAAAwlD,EAAA28G,QAAA,CAEA,IAAA7jH,EAAAkH,EAAA28G,QAAAniK,GACA,IAAA,IAAAm+C,KAAAG,EAAA0hH,OAAA,CAEA,IAAAoM,EAAA5mH,EAAAw3E,SAAA1+E,EAAA0hH,OAAA7hH,GAAAkiH,OACA+L,IACAA,EAAAnyE,QAAA,KA80BAoyE,CAAA7qK,MAEA,IAAA27F,EAAA37F,KAAA4pK,UAAA5K,QAAAh/J,MAEA,IAAA,IAAAxB,KAAAwB,KAAA2gK,QACA3gK,KAAA2gK,QAAAniK,GAAAigK,gBAAAz+J,MAEA,GAAAA,KAAAgqK,YAAA1rK,OAAA,EAEA,IAAAsQ,EAAA5O,KAAAgqK,YAAA,GAAAhL,QAAAh/J,MAIA,OAAAsuB,OAAAqtE,EAAAhhB,UAAA/rE,KA01BAq4J,EAAA,IAAAv2D,SAAA45D,GAaA,GA9EA,SAAArD,GAEAA,EAAAnvD,WAAA,EACAmvD,EAAAY,KAAA,SAAAiD,EAAAC,GAEAA,GAAAhD,KAEAd,EAAAnvD,YAAAgzD,GAGAC,GAAAV,KAEApD,EAAAnvD,WAAAgzD,IAMA7D,EAAAK,UAAA,SAAA0D,EAAAt3I,EAAAxoB,GAGA,IADA,IAAA+/J,EAAAv3I,EAAAxoB,EACA1M,EAAA,EAAAA,EAAAysK,EAAAzsK,IACAwsK,EAAAxsK,GAAAkoK,GAAA1mK,OAIAinK,EAAAuB,WAAA,SAAAvuI,EAAAI,GAEA,IAAA2wI,EAAAhrK,KAAAmzD,OACA+3G,EAAAF,EAAAjhK,MAAAkwB,EAAAI,GACA,OAAA,IAAAgU,aAAA68H,IAIAjE,EAAAkE,eAAA,SAAAlxI,EAAAI,GAEA,IAAA2wI,EAAAhrK,KAAAmzD,OACA+3G,EAAAF,EAAAjhK,MAAAkwB,EAAAI,GACA,OAAA,IAAA0T,YAAAm9H,IAIAjE,EAAAmE,cAAA,SAAAnxI,EAAAI,GAEA,IAAA2wI,EAAAhrK,KAAAmzD,OACA+3G,EAAAF,EAAAjhK,MAAAkwB,EAAAI,GACA,OAAA,IAAAoT,WAAAy9H,IAIAjE,EAAAoE,eAAA,SAAApxI,EAAAI,GAEA,IAAA2wI,EAAAhrK,KAAAmzD,OACA+3G,EAAAF,EAAAjhK,MAAAkwB,EAAAI,GACA,OAAA,IAAA8T,YAAA+8H,IAYAI,CAAArE,GACAA,EAAAY,KAAA,GAAAE,IAEAwC,EAAAC,aAAA3D,GAAAI,GAEAsD,EAAAE,aAAA5D,GAAAI,GAEAsD,EAAAG,gBAAA7D,GAAAI,GAEAsD,EAAAI,aAAA9D,GAAAI,GACAmB,GAAAzB,GAAAM,GAAA,EACAmD,GAAAzD,GAAAM,GAAA,EACAmB,GACA,KAAA,wCAIA,GAHAnB,EAAAY,KAAA,IAAAE,IACAd,EAAAY,KAAA,IAAAE,IACAd,EAAAY,KAAA,GAAAE,IACAqC,GAAA,CAEA,IAAAmB,EAAAxE,GAAAE,GACAuE,EAAAvE,EAAAwE,WAAAxE,EAAAyE,OACAC,KACA1E,EAAA2E,KAAAD,EAAA,EAAAH,GACA,IAAAK,KACAC,WAAAD,EAAAN,EAAAI,EAAAH,GACA,IAAAR,EAAA,IAAAx6D,YAAAq7D,GACAxC,GAAA2B,EAAAT,QAIAlB,GAAApC,EAAAsD,GAIA,OAAAA,EAAAvL,UAIA+M,CAAA54G,MAMAq3D,EAAAkvC,eAGAz7J,EAAA,wCACA,mBACA,SAAAusH,GAiiBA,OA1hBAA,EAAAwhD,UAAA,SAAAvwD,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAAwhD,UAAApsK,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAwhD,UAEApwD,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAyhB,EAAA,IAAA+oG,EAAAzqG,QAEAo7F,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SAiBA,OAhBAN,EAAAsE,gBAAA,eACAtE,EAAAW,QAAA97G,KAAA7B,MAEAg9G,EAAAS,KAAAl5F,EAAA,SAAAywC,GAEA1xC,EAAAvC,MAAA87B,EAAA9pB,MAAAiiC,GACA1xC,EAAA0zB,aAAA,OAEAn2C,IAAAm7G,GAEAA,EAAA14F,IAIA24F,EAAAC,GAEA54F,GAIAyP,MAAA,SAAAiiC,GA0YA,IAAA84G,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GACAC,EAAA,GAEAC,EAAA,GACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA15G,EAAA70D,OAAA,IAAAiQ,QAAAmJ,MAAA,uDAEA,IAAAo1J,EAAA,IAAAr/H,WAAA0lB,GACA9hD,EAAA,EACA4tG,GACA8tD,UAAAD,EAAAz7J,KACA27J,cAAAF,EAAAz7J,KACA47J,WAAAH,EAAAz7J,KACA67J,eAAAJ,EAAAz7J,KAAAy7J,EAAAz7J,MAAA,EACA87J,gBAAAL,EAAAz7J,KAAAy7J,EAAAz7J,MAAA,EACA+7J,cAAAN,EAAAz7J,KACAmlB,QACAs2I,EAAAz7J,KAAAy7J,EAAAz7J,MAAA,EACAy7J,EAAAz7J,KAAAy7J,EAAAz7J,MAAA,GAEA9D,MAAAu/J,EAAAz7J,KAAAy7J,EAAAz7J,MAAA,EACA5D,OAAAq/J,EAAAz7J,KAAAy7J,EAAAz7J,MAAA,EACAg8J,WAAAP,EAAAz7J,KACAi8J,MAAAR,EAAAz7J,OAvaA,SAAA4tG,GAEA,OAAAA,EAAAguD,YAIA,KAAAf,EACA,KAAAG,GACAptD,EAAAkuD,gBAAA,KAAA,KAAAluD,EAAAmuD,eAAA,IAAAnuD,EAAA+tD,gBAEAz+J,QAAAmJ,MAAA,iEAGA,MAIA,KAAAy0J,EACA,KAAAC,EACA,KAAAE,EACA,KAAAC,EACAttD,EAAA+tD,eAEAz+J,QAAAmJ,MAAA,kEAGA,MAIA,KAAAu0J,EACA19J,QAAAmJ,MAAA,6BAIA,QACAnJ,QAAAmJ,MAAA,sCAAAunG,EAAAguD,aAMAhuD,EAAA1xG,OAAA,GAAA0xG,EAAAxxG,QAAA,IAEAc,QAAAmJ,MAAA,wCAMA,IAAAunG,EAAAouD,YAAA,KAAApuD,EAAAouD,YACA,KAAApuD,EAAAouD,YAAA,KAAApuD,EAAAouD,YAEA9+J,QAAAmJ,MAAA,4CAAAunG,EAAAouD,YAuXAE,CAAAtuD,GAEAA,EAAA8tD,UAAA17J,EAAA8hD,EAAA70D,QAEAiQ,QAAAmJ,MAAA,6BAMArG,GAAA4tG,EAAA8tD,UAIA,IAAAS,GAAA,EACAC,GAAA,EACAC,GAAA,EAEA,OAAAzuD,EAAAguD,YAEA,KAAAZ,EACAmB,GAAA,EACAC,GAAA,EACA,MAEA,KAAAvB,EACAuB,GAAA,EACA,MAEA,KAAAnB,EACAkB,GAAA,EACA,MAEA,KAAArB,EACA,MAEA,KAAAI,EACAiB,GAAA,EACAE,GAAA,EACA,MAEA,KAAAtB,EACAsB,GAAA,EAOA,IAAAC,EAAA,oBAAAz/F,gBAEA/uD,EAAAwuJ,EAAA,IAAAz/F,gBAAA+wC,EAAA1xG,MAAA0xG,EAAAxxG,QAAA6R,SAAAsuJ,cAAA,UACAzuJ,EAAA5R,MAAA0xG,EAAA1xG,MACA4R,EAAA1R,OAAAwxG,EAAAxxG,OAEA,IAAA+R,EAAAL,EAAAM,WAAA,MACAouJ,EAAAruJ,EAAAsuJ,gBAAA7uD,EAAA1xG,MAAA0xG,EAAAxxG,QAEAi+D,EAzaA,SAAA8hG,EAAAC,EAAAxuD,EAAA5tG,EAAA2f,GAEA,IAAA+8I,EACAV,EACAW,EACAC,EAEAZ,EAAApuD,EAAAouD,YAAA,EACAW,EAAA/uD,EAAA1xG,MAAA0xG,EAAAxxG,OAAA4/J,EAIAI,IAEAQ,EAAAj9I,EAAA4iC,SAAAviD,EAAAA,GAAA4tG,EAAAkuD,iBAAAluD,EAAAmuD,eAAA,KAMA,GAAAI,EAAA,CAIA,IAAA37J,EAAAgK,EAAArd,EAFAuvK,EAAA,IAAAtgI,WAAAugI,GAMA,IAHA,IAAAl8D,EAAA,EACAo8D,EAAA,IAAAzgI,WAAA4/H,GAEAv7D,EAAAk8D,GAOA,GALAn8J,EAAAmf,EAAA3f,KACAwK,EAAA,GAAA,IAAAhK,GAIA,IAAAA,EAAA,CAIA,IAAArT,EAAA,EAAAA,EAAA6uK,IAAA7uK,EAEA0vK,EAAA1vK,GAAAwyB,EAAA3f,KAMA,IAAA7S,EAAA,EAAAA,EAAAqd,IAAArd,EAEAuvK,EAAAvgK,IAAA0gK,EAAAp8D,EAAAtzG,EAAA6uK,GAIAv7D,GAAAu7D,EAAAxxJ,MAEA,CAKA,IADAA,GAAAwxJ,EACA7uK,EAAA,EAAAA,EAAAqd,IAAArd,EAEAuvK,EAAAj8D,EAAAtzG,GAAAwyB,EAAA3f,KAGAygG,GAAAj2F,QAUAkyJ,EAAA/8I,EAAA4iC,SACAviD,EAAAA,GAAAo8J,EAAAxuD,EAAA1xG,MAAA0xG,EAAAxxG,OAAAugK,GAKA,OACAD,WAAAA,EACAE,SAAAA,GAsVAE,CAAAX,EAAAC,EAAAxuD,EAAA5tG,EAAAy7J,IAzMA,SAAA97I,EAAAzjB,EAAAE,EAAAyR,EAAAkvJ,GAEA,IAAAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEA,QAAAzvD,EAAAquD,MAAAd,IAAAC,GAEA,QACA,KAAAG,EACAyB,EAAA,EACAE,EAAA,EACAE,EAAAlhK,EACA+gK,EAAA,EACAE,EAAA,EACAE,EAAAjhK,EACA,MAEA,KAAAi/J,EACA2B,EAAA,EACAE,EAAA,EACAE,EAAAlhK,EACA+gK,EAAA7gK,EAAA,EACA+gK,GAAA,EACAE,GAAA,EACA,MAEA,KAAA7B,EACAwB,EAAA9gK,EAAA,EACAghK,GAAA,EACAE,GAAA,EACAH,EAAA,EACAE,EAAA,EACAE,EAAAjhK,EACA,MAEA,KAAAk/J,EACA0B,EAAA9gK,EAAA,EACAghK,GAAA,EACAE,GAAA,EACAH,EAAA7gK,EAAA,EACA+gK,GAAA,EACAE,GAAA,EAKA,GAAAhB,EAEA,OAAAzuD,EAAAouD,YAEA,KAAA,GAnGA,SAAAQ,EAAAS,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GAEA,IAAA6nB,EAAArnC,EAAAgM,EAAAlN,EAAA,EACA+O,EAAA0xG,EAAA1xG,MAEA,IAAA7B,EAAA4iK,EAAA5iK,IAAAgjK,EAAAhjK,GAAA8iK,EAEA,IAAA9uK,EAAA2uK,EAAA3uK,IAAA+uK,EAAA/uK,GAAA6uK,EAAA/vK,IAEAuoC,EAAA7nB,EAAA1gB,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAq7B,EACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAq7B,EACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAq7B,EACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAA,IAuFAijK,CAAA39I,EAAAs9I,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GACA,MAEA,KAAA,IAhFA,SAAA2uJ,EAAAS,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GAEA,IAAAxf,EAAAgM,EAAAlN,EAAA,EACA+O,EAAA0xG,EAAA1xG,MAEA,IAAA7B,EAAA4iK,EAAA5iK,IAAAgjK,EAAAhjK,GAAA8iK,EAEA,IAAA9uK,EAAA2uK,EAAA3uK,IAAA+uK,EAAA/uK,GAAA6uK,EAAA/vK,GAAA,EAEAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GAqEAowK,CAAA59I,EAAAs9I,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GACA,MAEA,QACA3Q,QAAAmJ,MAAA,+CAOA,OAAAunG,EAAAouD,YAEA,KAAA,GAhNA,SAAAQ,EAAAS,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,EAAA+uJ,GAEA,IACAlnI,EAAArnC,EAAAgM,EADAmjK,EAAAZ,EACAzvK,EAAA,EACA+O,EAAA0xG,EAAA1xG,MAEA,IAAA7B,EAAA4iK,EAAA5iK,IAAAgjK,EAAAhjK,GAAA8iK,EAEA,IAAA9uK,EAAA2uK,EAAA3uK,IAAA+uK,EAAA/uK,GAAA6uK,EAAA/vK,IAEAuoC,EAAA7nB,EAAA1gB,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAA,IACAmiK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAmjK,EAAA,EAAA9nI,EAAA,GACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAmjK,EAAA,EAAA9nI,EAAA,GACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAmjK,EAAA,EAAA9nI,EAAA,GAmMA+nI,CAAA99I,EAAAs9I,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,EAAAkvJ,GACA,MAEA,KAAA,IA5LA,SAAAP,EAAAS,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GAEA,IAAA6nB,EAAArnC,EAAAgM,EAAAlN,EAAA,EACA+O,EAAA0xG,EAAA1xG,MAEA,IAAA7B,EAAA4iK,EAAA5iK,IAAAgjK,EAAAhjK,GAAA8iK,EAEA,IAAA9uK,EAAA2uK,EAAA3uK,IAAA+uK,EAAA/uK,GAAA6uK,EAAA/vK,GAAA,EAEAuoC,EAAA7nB,EAAA1gB,EAAA,IAAA0gB,EAAA1gB,EAAA,IAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,IAAA,MAAAq7B,IAAA,EACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,IAAA,IAAAq7B,IAAA,EACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,IAAA,GAAAq7B,IAAA,EACA8mI,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAA,MAAAq7B,EAAA,EAAA,IAgLAgoI,CAAA/9I,EAAAs9I,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GACA,MAEA,KAAA,IAzKA,SAAA2uJ,EAAAS,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GAEA,IAAAxf,EAAAgM,EAAAlN,EAAA,EACA+O,EAAA0xG,EAAA1xG,MAEA,IAAA7B,EAAA4iK,EAAA5iK,IAAAgjK,EAAAhjK,GAAA8iK,EAEA,IAAA9uK,EAAA2uK,EAAA3uK,IAAA+uK,EAAA/uK,GAAA6uK,EAAA/vK,GAAA,EAEAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAA,IACAmiK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GA8JAwwK,CAAAh+I,EAAAs9I,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GACA,MAEA,KAAA,IAvJA,SAAA2uJ,EAAAS,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GAEA,IAAAxf,EAAAgM,EAAAlN,EAAA,EACA+O,EAAA0xG,EAAA1xG,MAEA,IAAA7B,EAAA4iK,EAAA5iK,IAAAgjK,EAAAhjK,GAAA8iK,EAEA,IAAA9uK,EAAA2uK,EAAA3uK,IAAA+uK,EAAA/uK,GAAA6uK,EAAA/vK,GAAA,EAEAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GACAqvK,EAAA,GAAAnuK,EAAA6N,EAAA7B,GAAA,GAAAwT,EAAA1gB,EAAA,GA4IAywK,CAAAj+I,EAAAs9I,EAAAE,EAAAE,EAAAL,EAAAE,EAAAE,EAAAvvJ,GACA,MAEA,QACA3Q,QAAAmJ,MAAA,2CAiHAw3J,CAAArB,EAAA78I,KAAAiuF,EAAA1xG,MAAA0xG,EAAAxxG,OAAAi+D,EAAAqiG,WAAAriG,EAAAuiG,UAIA,OAFAzuJ,EAAAG,aAAAkuJ,EAAA,EAAA,GAEAF,EAAAxuJ,EAAAgwJ,wBAAAhwJ,KAMAqrG,EAAAwhD,YAGA/tK,EAAA,4CACA,kBACA,eACA,SAAAusH,EAAAwhD,GA82HA,OAx2HAxhD,EAAA4kD,cAAA,SAAA3zD,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAA4kD,cAAAxvK,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA4kD,cAEAxzD,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEA7B,EAAA,KAAA68C,EAAA78C,KAAAqsH,EAAA5B,YAAAM,eAAAxmG,GAAAs4B,EAAA78C,KAEAg9G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,EAAAxtG,KAEAi8G,EAAAC,IAIAh5F,SAEAguJ,kBAAA/vK,GAEAiP,QAAAC,KAAA,wGAMA0iB,MAAA,SAAAy6E,EAAAxtG,GAEA,SAAAk5J,EAAAiY,EAAA7wK,GAOA,IAHA,IAAAqL,KACA6sJ,EAAA2Y,EAAA3Y,WAEAn4J,EAAA,EAAAwL,EAAA2sJ,EAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA+nI,EAAAn4J,GAEAowB,EAAA6sG,WAAAh9H,GAEAqL,EAAAP,KAAAqlB,GAMA,OAAA9kB,EAIA,SAAAylK,EAAA5jE,GAEA,GAAA,IAAAA,EAAArtG,OAAA,SAKA,IAHA,IAAAy6G,EAAApN,EAAAnwC,OAAAn9D,MAAA,OACAyL,EAAA,IAAA6Y,MAAAo2F,EAAAz6G,QAEAE,EAAA,EAAAwL,EAAA+uG,EAAAz6G,OAAAE,EAAAwL,EAAAxL,IAEAsL,EAAAtL,GAAAu6G,EAAAv6G,GAIA,OAAAsL,EAIA,SAAA0lK,EAAA7jE,GAEA,GAAA,IAAAA,EAAArtG,OAAA,SAKA,IAHA,IAAAy6G,EAAApN,EAAAnwC,OAAAn9D,MAAA,OACAyL,EAAA,IAAA6Y,MAAAo2F,EAAAz6G,QAEAE,EAAA,EAAAwL,EAAA+uG,EAAAz6G,OAAAE,EAAAwL,EAAAxL,IAEAsL,EAAAtL,GAAAmpC,WAAAoxE,EAAAv6G,IAIA,OAAAsL,EAIA,SAAA2lK,EAAA9jE,GAEA,GAAA,IAAAA,EAAArtG,OAAA,SAKA,IAHA,IAAAy6G,EAAApN,EAAAnwC,OAAAn9D,MAAA,OACAyL,EAAA,IAAA6Y,MAAAo2F,EAAAz6G,QAEAE,EAAA,EAAAwL,EAAA+uG,EAAAz6G,OAAAE,EAAAwL,EAAAxL,IAEAsL,EAAAtL,GAAAspC,SAAAixE,EAAAv6G,IAIA,OAAAsL,EAIA,SAAA4lK,EAAA/jE,GAEA,OAAAA,EAAA+jB,UAAA,GAUA,SAAA37F,EAAAzF,GAEA,OAAA,IAAAzuB,OAAA+3C,KAAAtpB,GAAAhwB,OAqCA,SAAAqxK,EAAAL,EAAAM,EAAAn0C,EAAA7c,GAEA,IAAA/uF,EAAAwnI,EAAAiY,EAAAM,GAAA,GAEA,QAAA5wK,IAAA6wB,EAIA,IAFA,IAAArgB,EAAA6nJ,EAAAxnI,EAAA4rG,GAEAj9H,EAAA,EAAAA,EAAAgR,EAAAlR,OAAAE,IAEAogH,EAAApvG,EAAAhR,IAQA,SAAAqxK,EAAA7+I,EAAAsiI,GAEA,IAAA,IAAA70J,KAAAuyB,EAAA,CAEA,IAAA1C,EAAA0C,EAAAvyB,GACA6vB,EAAAilI,MAAAD,EAAAtiI,EAAAvyB,KAQA,SAAA2zJ,EAAAphI,EAAAsiI,GAEA,YAAAt0J,IAAAgyB,EAAAuiI,MAAAviI,EAAAuiI,OAEAviI,EAAAuiI,MAAAD,EAAAtiI,GAEAA,EAAAuiI,OAkDA,SAAAuc,EAAAR,GAMA,IAJA,IAAAt+I,GACA++I,WAGAvxK,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACA,IAAAhtG,EAAAihJ,EAAA9gJ,EAAAimB,aAAA,WACAo7H,EAAArhJ,EAAAimB,aAAA,YACA7jB,EAAA++I,OAAAE,GAAAxhJ,GAOA,OAAAuC,EAIA,SAAAk/I,EAAAZ,GAEA,IAAAt+I,KAEA5wB,EAAAkvK,EAAAz6H,aAAA,UAIAkkE,EAAA34G,EAAA/B,MAAA,KAEAowB,EAAAsqF,EAAAjH,QACAq+D,EAAAp3D,EAAAjH,QAIAs+D,GAAA,IAAAD,EAAA7mK,QAAA,KACA+mK,GAAA,IAAAF,EAAA7mK,QAAA,KAEA,GAAA+mK,EAIAt3D,EAAAo3D,EAAA9xK,MAAA,KACA8xK,EAAAp3D,EAAAjH,QACA9gF,EAAAs/I,OAAAv3D,EAAAjH,aAEA,GAAAs+D,EAAA,CAIA,IAAAt5H,EAAAq5H,EAAA9xK,MAAA,KACA8xK,EAAAr5H,EAAAg7D,QAEA,IAAA,IAAAtzG,EAAA,EAAAA,EAAAs4C,EAAAx4C,OAAAE,IAEAs4C,EAAAt4C,GAAAspC,SAAAgP,EAAAt4C,GAAAw9D,QAAA,KAAA,KAIAhrC,EAAA8lB,QAAAA,EAYA,OARA9lB,EAAAvC,GAAAA,EACAuC,EAAAm/I,IAAAA,EAEAn/I,EAAAo/I,YAAAA,EACAp/I,EAAAq/I,aAAAA,EAEAr/I,EAAAu/I,QAAAb,EAAAJ,EAAAz6H,aAAA,WAEA7jB,EAIA,SAAAw/I,EAAAx/I,GAEA,IAAAygF,KAEAg/D,EAAAz/I,EAAAy/I,SACAC,EAAA1/I,EAAA0/I,SACAC,EAAA3/I,EAAA2/I,QAEA,IAAA,IAAAvwK,KAAAqwK,EAEA,GAAAA,EAAA9vK,eAAAP,GAAA,CAEA,IAAA6pB,EAAAwmJ,EAAArwK,GACAmwK,EAAAG,EAAAzmJ,EAAAsmJ,SAEAK,EAAAL,EAAAR,OAAAc,MACAC,EAAAP,EAAAR,OAAAgB,OAEApzF,EAAAgzF,EAAAC,GACAI,EAAAL,EAAAG,GAEAn2F,EAAAs2F,EAAAhnJ,EAAA0zD,EAAAqzF,GAEAE,EAAAv2F,EAAA82B,GAMA,OAAAA,EAIA,SAAA0/D,EAAA1iJ,GAEA,OAAA2jI,EAAAviI,GAAA8oF,WAAAlqF,GAAA+hJ,GAIA,SAAAS,EAAAhnJ,EAAA0zD,EAAAqzF,GAEA,IAMAz+G,EAAAq9B,EACApxF,EAAA+0B,EAAAhB,EAAA4jB,EAPAolF,EAAA1rG,GAAAuhJ,MAAAnnJ,EAAAwE,IACAwlI,EAAAod,GAAA91C,EAAA9sG,IAEAswD,EAAAw8C,EAAA+1C,WAAArnJ,EAAAkmJ,KACAoB,EAAAh2C,EAAA99G,OAAAvP,QAAAgQ,YAKA8S,KAKA,OAAA+tD,GAEA,IAAA,SAEA,IAAAvgF,EAAA,EAAA+0B,EAAAoqD,EAAA7zE,MAAAxL,OAAAE,EAAA+0B,EAAA/0B,IAOA,GALA+zD,EAAAorB,EAAA7zE,MAAAtL,GACAoxF,EAAApxF,EAAAwyK,EAAAphF,YAEA5wF,IAAAgyB,EAAAuhC,KAAAvhC,EAAAuhC,QAEA,IAAAtoC,EAAAmmJ,YAAA,CAEA,IAAA9wK,EAAA0xK,EAAAlnK,MAAA8lF,GACArvF,EAAA0pB,EAAA6sB,QAAA,GAAA,EAAA7sB,EAAA6sB,QAAA,GAEA9lB,EAAAuhC,GAAAhyD,GAAAjB,OAIA,IAAAizB,EAAA,EAAA4jB,EAAA66H,EAAAphF,OAAAr9D,EAAA4jB,EAAA5jB,IAEAvB,EAAAuhC,GAAAhgC,GAAAy+I,EAAAlnK,MAAA8lF,EAAAr9D,GAQA,MAEA,IAAA,YAIA,IAAA,SAIA,IAAA,QACAhkB,QAAAC,KAAA,0EAAAuwE,GAKA,IAAAyyF,EAWA,SAAAxgJ,EAAAugJ,GAEA,IAAAC,KAIA,IAAA,IAAAj/G,KAAAvhC,EAEAwgJ,EAAAjoK,MAAAgpD,KAAA5qB,WAAA4qB,GAAAjzD,MAAA0xB,EAAAuhC,KAMAi/G,EAAAh0H,KAcA,SAAA5uC,EAAAC,GAEA,OAAAD,EAAA2jD,KAAA1jD,EAAA0jD,OAZA,IAAA,IAAA/zD,EAAA,EAAAA,EAAA,GAAAA,IAEAizK,EAAAD,EAAAhzK,EAAA+yK,EAAA/hK,SAAAhR,IAIA,OAAAgzK,EAnCAE,CAAA1gJ,EAAAugJ,GAEA52F,GACAl8E,KAAAw1J,EAAArpJ,KACA4mK,UAAAA,GAGA,OAAA72F,EAwCA,IAAA5yD,EAAA,IAAAyiG,EAAApzG,QACAyH,EAAA,IAAA2rG,EAAApzG,QACA1D,EAAA,IAAA82G,EAAAz9G,WAEA,SAAAmkK,EAAAv2F,EAAA82B,GAUA,IARA,IAAA+/D,EAAA72F,EAAA62F,UACA/yK,EAAAk8E,EAAAl8E,KAEAmyG,KACA0hD,KACAqf,KACAC,KAEApzK,EAAA,EAAAwL,EAAAwnK,EAAAlzK,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqzK,EAAAL,EAAAhzK,GAEA+zD,EAAAs/G,EAAAt/G,KACAjzD,EAAAuyK,EAAAvyK,MAEAme,GAAArM,UAAA9R,GAAA4e,YACAT,GAAA6K,UAAAP,EAAArU,EAAAmL,GAEA+xF,EAAArnG,KAAAgpD,GACA+/F,EAAA/oJ,KAAAwe,EAAAroB,EAAAqoB,EAAArc,EAAAqc,EAAA/a,GACA2kK,EAAApoK,KAAAmK,EAAAhU,EAAAgU,EAAAhI,EAAAgI,EAAA1G,EAAA0G,EAAAzG,GACA2kK,EAAAroK,KAAAsV,EAAAnf,EAAAmf,EAAAnT,EAAAmT,EAAA7R,GAQA,OAJAslJ,EAAAh0J,OAAA,GAAAmzG,EAAAloG,KAAA,IAAAihH,EAAA/W,oBAAAh1G,EAAA,YAAAmyG,EAAA0hD,IACAqf,EAAArzK,OAAA,GAAAmzG,EAAAloG,KAAA,IAAAihH,EAAAjX,wBAAA90G,EAAA,cAAAmyG,EAAA+gE,IACAC,EAAAtzK,OAAA,GAAAmzG,EAAAloG,KAAA,IAAAihH,EAAA/W,oBAAAh1G,EAAA,SAAAmyG,EAAAghE,IAEAngE,EAIA,SAAAggE,EAAAD,EAAApxH,EAAA0xH,GAEA,IAAAD,EAGArzK,EAAAwL,EADA4rB,GAAA,EAKA,IAAAp3B,EAAA,EAAAwL,EAAAwnK,EAAAlzK,OAAAE,EAAAwL,EAAAxL,SAIAQ,KAFA6yK,EAAAL,EAAAhzK,IAEAc,MAAA8gD,GAEAyxH,EAAAvyK,MAAA8gD,GAAA,KAIAxqB,GAAA,EAMA,IAAA,IAAAA,EAIA,IAAAp3B,EAAA,EAAAwL,EAAAwnK,EAAAlzK,OAAAE,EAAAwL,EAAAxL,KAEAqzK,EAAAL,EAAAhzK,IAEAc,MAAA8gD,GAAA0xH,OAcA,SAAAN,EAAApxH,GAIA,IAFA,IAAAohD,EAAApnC,EAEA57D,EAAA,EAAAwL,EAAAwnK,EAAAlzK,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqzK,EAAAL,EAAAhzK,GAEA,GAAA,OAAAqzK,EAAAvyK,MAAA8gD,GAAA,CAKA,GAHAohD,EAAAuwE,EAAAP,EAAAhzK,EAAA4hD,GACAga,EAAA43G,EAAAR,EAAAhzK,EAAA4hD,GAEA,OAAAohD,EAAA,CAEAqwE,EAAAvyK,MAAA8gD,GAAAga,EAAA96D,MAAA8gD,GACA,SAIA,GAAA,OAAAga,EAAA,CAEAy3G,EAAAvyK,MAAA8gD,GAAAohD,EAAAliG,MAAA8gD,GACA,SAIA6xH,EAAAJ,EAAArwE,EAAApnC,EAAAha,KAjCA8xH,CAAAV,EAAApxH,GAyCA,SAAA2xH,EAAAP,EAAAhzK,EAAA4hD,GAEA,KAAA5hD,GAAA,GAAA,CAEA,IAAAqzK,EAAAL,EAAAhzK,GAEA,GAAA,OAAAqzK,EAAAvyK,MAAA8gD,GAAA,OAAAyxH,EAEArzK,IAIA,OAAA,KAIA,SAAAwzK,EAAAR,EAAAhzK,EAAA4hD,GAEA,KAAA5hD,EAAAgzK,EAAAlzK,QAAA,CAEA,IAAAuzK,EAAAL,EAAAhzK,GAEA,GAAA,OAAAqzK,EAAAvyK,MAAA8gD,GAAA,OAAAyxH,EAEArzK,IAIA,OAAA,KAIA,SAAAyzK,EAAAlhJ,EAAAywE,EAAApnC,EAAAha,GAEAga,EAAA7H,KAAAivC,EAAAjvC,MAAA,EAOAxhC,EAAAzxB,MAAA8gD,IAAArvB,EAAAwhC,KAAAivC,EAAAjvC,OAAA6H,EAAA96D,MAAA8gD,GAAAohD,EAAAliG,MAAA8gD,KAAAga,EAAA7H,KAAAivC,EAAAjvC,MAAAivC,EAAAliG,MAAA8gD,GALArvB,EAAAzxB,MAAA8gD,GAAAohD,EAAAliG,MAAA8gD,GAwCA,SAAA+xH,EAAAnhJ,GAQA,IANA,IAAAygF,KAEAhzG,EAAAuyB,EAAAvyB,KACAk1G,EAAA3iF,EAAAqJ,IAAArJ,EAAAiJ,QAAA,EACA0+E,EAAA3nF,EAAA2nF,WAEAn6G,EAAA,EAAA+0B,EAAAolF,EAAAr6G,OAAAE,EAAA+0B,EAAA/0B,IAIA,IAFA,IAAA4zK,EAAAjB,EAAAx4D,EAAAn6G,IAEA+zB,EAAA,EAAA4jB,EAAAi8H,EAAA9zK,OAAAi0B,EAAA4jB,EAAA5jB,IAEAk/E,EAAAloG,KAAA6oK,EAAA7/I,IAMA,OAAA,IAAAi4F,EAAA9W,cAAAj1G,EAAAk1G,EAAAlC,GAIA,SAAA4gE,EAAA5jJ,GAEA,OAAA2jI,EAAAviI,GAAAopF,MAAAxqF,GAAA0jJ,GAqCA,SAAAG,EAAAhD,GAMA,IAJA,IAAAt+I,GACA2/I,YAGAnyK,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,oBACAzqG,EAAAuhJ,gBAAA/C,EAAA5gJ,EAAA4gI,aACA,MAEA,IAAA,SACA,IAAA/gI,EAAAG,EAAAimB,aAAA,MACA7jB,EAAA2/I,QAAAliJ,GAAA+jJ,GAAA5jJ,GACA,MAEA,IAAA,SACAoC,EAAAyhJ,OAAAC,EAAA9jJ,GACA,MAEA,IAAA,iBACAoC,EAAA2hJ,cAAAC,EAAAhkJ,IAOA,OAAAoC,EAIA,SAAA0hJ,EAAApD,GAMA,IAJA,IAAAt+I,GACA++I,WAGAvxK,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACA,IAAAw0C,EAAArhJ,EAAAimB,aAAA,YACApmB,EAAAihJ,EAAA9gJ,EAAAimB,aAAA,WACA7jB,EAAA++I,OAAAE,GAAAxhJ,GAOA,OAAAuC,EAIA,SAAA4hJ,EAAAtD,GAMA,IAJA,IAAAt+I,GACA++I,WAGAvxK,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACA,IAAAw0C,EAAArhJ,EAAAimB,aAAA,YACApmB,EAAAihJ,EAAA9gJ,EAAAimB,aAAA,WACAxjC,EAAAy2B,SAAAlZ,EAAAimB,aAAA,WACA7jB,EAAA++I,OAAAE,IAAAxhJ,GAAAA,EAAApd,OAAAA,GACA,MAEA,IAAA,SACA2f,EAAA6hJ,OAAApD,EAAA7gJ,EAAA4gI,aACA,MAEA,IAAA,IACAx+H,EAAA3iB,EAAAohK,EAAA7gJ,EAAA4gI,cAOA,OAAAx+H,EAIA,SAAA8hJ,EAAA9hJ,GAEA,IAAAuiI,GACA9kI,GAAAuC,EAAAvC,IAGA8B,EAAAV,GAAAJ,WAAA8jI,EAAA9kI,IAaA,YAXAzvB,IAAAgyB,EAAA+hJ,OAEAxf,EAAAwf,KAaA,SAAA/hJ,GAEA,IA4BAxyB,EAAA+zB,EAAAvoB,EA1BAupJ,GACAkf,UACA37H,SACAhtC,SACA8lF,OANA,GAQAkuD,SACAh0I,SACA8lF,OAVA,IAcA+gF,EAAA3/I,EAAA2/I,QACAgC,EAAA3hJ,EAAA2hJ,cAEAE,EAAAF,EAAAE,OACAxkK,EAAAskK,EAAAtkK,EACA2kK,EAAAL,EAAA5C,OAAAkD,MAAA5hK,OACA6hK,EAAAP,EAAA5C,OAAAoD,OAAA9hK,OAEA+hK,EAAApiJ,EAAA2/I,QAAA3/I,EAAAyhJ,OAAA1C,OAAAkD,OACAI,EAAAriJ,EAAA2/I,QAAA3/I,EAAAyhJ,OAAA1C,OAAAuD,iBAEAx1B,EAAA6yB,EAAAgC,EAAA5C,OAAAoD,OAAA1kJ,IAAA3kB,MACA8lF,EAAA,EAMA,IAAApxF,EAAA,EAAAwL,EAAA6oK,EAAAv0K,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAA+0K,EAAAV,EAAAr0K,GACAg1K,KAEA,IAAAjhJ,EAAA,EAAAA,EAAAghJ,EAAAhhJ,IAAA,CAEA,IAAAkhJ,EAAAplK,EAAAuhF,EAAAojF,GACAU,EAAArlK,EAAAuhF,EAAAsjF,GACAh7E,EAAA4lD,EAAA41B,GAEAF,EAAAjqK,MAAAhJ,MAAAkzK,EAAA3vD,OAAA5rB,IAEAtI,GAAA,EAYA,IALA4jF,EAAAh2H,KAAAm2H,GAKAphJ,EAAA,EAAAA,EAzDA,EAyDAA,IAAA,CAEA,IAAAlV,EAAAm2J,EAAAjhJ,QAEAvzB,IAAAqe,GAEAk2I,EAAAz8G,QAAAhtC,MAAAP,KAAA8T,EAAA9c,OACAgzJ,EAAAzV,QAAAh0I,MAAAP,KAAA8T,EAAAymG,UAIAyvC,EAAAz8G,QAAAhtC,MAAAP,KAAA,GACAgqJ,EAAAzV,QAAAh0I,MAAAP,KAAA,KAUAynB,EAAAuhJ,gBAEAhf,EAAA57D,YAAA,IAAA6yB,EAAAxmG,SAAA5S,UAAA4f,EAAAuhJ,iBAAAr0J,YAIAq1I,EAAA57D,YAAA,IAAA6yB,EAAAxmG,SAAAvI,WAMA,IAAAjd,EAAA,EAAAwL,EAAAopK,EAAAtpK,MAAAxL,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAC,EAAA20K,EAAAtpK,MAAAtL,GACAo1K,GAAA,IAAAppD,EAAAxmG,SAAA5S,UAAAiiK,EAAAvpK,MAAAtL,EAAA60K,EAAAzjF,QAAA1xE,YAEAq1I,EAAAkf,OAAAlpK,MAAA9K,KAAAA,EAAAm1K,YAAAA,IAIA,OAAArgB,EAIA,SAAAogB,EAAA/kK,EAAAC,GAEA,OAAAA,EAAAi1G,OAAAl1G,EAAAk1G,QAzHA+vD,CAAA7iJ,EAAA+hJ,MAIAxiJ,EAAAogJ,QAAA3hI,YAAAukH,EAAAwf,KAAAj8H,QACAvmB,EAAAogJ,QAAA5hI,YAAAwkH,EAAAwf,KAAAj1B,SAIAyV,EAwIA,SAAAugB,EAAA9iJ,GAEA,YAAAhyB,IAAAgyB,EAAAuiI,MAAAviI,EAAAuiI,MAEAviI,EAAA+iJ,UAIA,SAAAC,EAAAvlJ,GAEA,IAAAuC,EAAAnB,GAAApN,OAAAgM,GAEA,YAAAzvB,IAAAgyB,EAEAohI,EAAAphI,EAAA8iJ,IAIAvlK,QAAAC,KAAA,oDAAAigB,GAEA,MA8BA,SAAAwlJ,EAAA3E,GAOA,IALA,IAAAt+I,GACAkjJ,YACAxD,aAGAlyK,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,WACA04C,EAAAvlJ,EAAAoC,GACA,MAEA,IAAA,YACAA,EAAAojJ,UAAAC,EAAAzlJ,GACA,MAEA,IAAA,QACAoC,EAAAsjJ,MAAAC,EAAA3lJ,IAOA,OAAAoC,EAIA,SAAAmjJ,EAAA7E,EAAAt+I,GAIA,IAFA,IAAAm/I,EAAAb,EAAAz6H,aAAA,OAEAr2C,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,UACAzqG,EAAAkjJ,SAAA/D,GAAAqE,EAAA5lJ,GACA,MAEA,IAAA,YACAoC,EAAA0/I,SAAAP,GAAAsE,EAAA7lJ,KASA,SAAA4lJ,EAAAlF,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,YACAzqG,EAAA+iJ,UAAAnlJ,EAAA4gI,aAOA,OAAAx+H,EAIA,SAAAyjJ,EAAAnF,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,SACAzqG,EAAAvwB,OAAAmuB,EAAA4gI,aAOA,OAAAx+H,EAIA,SAAAqjJ,EAAA/E,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,WACA,IAAA,UACA,IAAA,QACA,IAAA,QACAzqG,EAAA9nB,KAAA0lB,EAAA6sG,SACAzqG,EAAAR,WAAAkkJ,EAAA9lJ,IAOA,OAAAoC,EAIA,SAAA0jJ,EAAApF,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,WACA,IAAA,UACA,IAAA,WACA,IAAA,OACA,IAAA,UACA,IAAA,YACA,IAAA,eACAzqG,EAAApC,EAAA6sG,UAAAk5C,EAAA/lJ,GACA,MACA,IAAA,cACAoC,EAAApC,EAAA6sG,WACAp1D,OAAAz3C,EAAAimB,aAAA,UACA7jB,KAAA2jJ,EAAA/lJ,KAQA,OAAAoC,EAIA,SAAA2jJ,EAAArF,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACAzqG,EAAApC,EAAA6sG,UAAA+zC,EAAA5gJ,EAAA4gI,aACA,MAEA,IAAA,QACAx+H,EAAApC,EAAA6sG,UAAA9zF,WAAA/Y,EAAA4gI,aACA,MAEA,IAAA,UACAx+H,EAAApC,EAAA6sG,WAAAhtG,GAAAG,EAAAimB,aAAA,WAAAy/H,MAAAM,EAAAhmJ,KAOA,OAAAoC,EAIA,SAAA4jJ,EAAAtF,GAMA,IAJA,IAAAt+I,GACAojJ,cAGA51K,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACAo5C,EAAAjmJ,EAAAoC,IAOA,OAAAA,EAIA,SAAA6jJ,EAAAvF,EAAAt+I,GAEA,IAAA,IAAAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,YACAq5C,EAAAlmJ,EAAAoC,KASA,SAAA8jJ,EAAAxF,EAAAt+I,GAEA,IAAA,IAAAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,UACA,IAAA,UACA,IAAA,UACA,IAAA,UACAzqG,EAAAojJ,UAAAxlJ,EAAA6sG,UAAA9zF,WAAA/Y,EAAA4gI,aACA,MAEA,IAAA,QACA,IAAA,QAIA,SAAA5gI,EAAA4gI,YAAA3kJ,cAEAmmB,EAAAojJ,UAAAxlJ,EAAA6sG,UAAA,EAEA,UAAA7sG,EAAA4gI,YAAA3kJ,cAEAmmB,EAAAojJ,UAAAxlJ,EAAA6sG,UAAA,EAIAzqG,EAAAojJ,UAAAxlJ,EAAA6sG,UAAA3zF,SAAAlZ,EAAA4gI,eAYA,SAAA+kB,EAAAjF,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,YACAzqG,EAAAojJ,UAAAW,EAAAnmJ,IAOA,OAAAoC,EAIA,SAAA+jJ,EAAAzF,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,eACAzqG,EAAApC,EAAA6sG,UAAA3zF,SAAAlZ,EAAA4gI,cAOA,OAAAx+H,EAIA,SAAAgkJ,EAAAhkJ,GAEA,OAAAA,EA4DA,SAAAikJ,EAAAjkJ,GAEA,IA1DAvC,EA8DAiC,EAJAwkJ,GA1DAzmJ,EA0DAuC,EAAAtO,IAxDA0vI,EAAAviI,GAAAslJ,QAAA1mJ,GAAAumJ,IAyDAZ,EAAAc,EAAAE,QAAAhB,UACAE,EAAAY,EAAAE,QAAAd,MAIA,OAAAF,EAAAlrK,MAEA,IAAA,QACA,IAAA,QACAwnB,EAAA,IAAA85F,EAAApnD,kBACA,MAEA,IAAA,UACA1yC,EAAA,IAAA85F,EAAArnD,oBACA,MAEA,QACAzyC,EAAA,IAAA85F,EAAA1+E,kBAOA,SAAA28E,EAAA4sD,GAEA,IAAA9E,EAAA2E,EAAAE,QAAA1E,SAAA2E,EAAA5mJ,IACAvP,EAAA,KAIA,QAAAlgB,IAAAuxK,EAAA,CAEA,IAAA+E,EAAAJ,EAAAE,QAAAlB,SAAA3D,EAAA9vK,QACAye,EAAA80J,EAAAsB,EAAAvB,gBAIAxlK,QAAAC,KAAA,+EACA0Q,EAAA80J,EAAAqB,EAAA5mJ,IAMA,GAAA,OAAAvP,EAAA,CAEA,IAAAi8F,EAxEA,SAAAj8F,GAEA,IAAAi8F,EAEAlpC,EAAA/yD,EAAAnV,MAAA,GAAAmV,EAAAiqG,YAAA,KAAA,IAAA,IAGA,OAFAl3C,EAAAA,EAAA+hC,eAIA,IAAA,MACAmH,EAAAo6D,GACA,MAEA,QACAp6D,EAAAkwC,GAIA,OAAAlwC,EAsDAq6D,CAAAt2J,GAEA,QAAAlgB,IAAAm8G,EAAA,CAEA,IAAA15F,EAAA05F,EAAAS,KAAA18F,GAEAo1J,EAAAe,EAAAf,MAEA,QAAAt1K,IAAAs1K,QAAAt1K,IAAAs1K,EAAAF,YAAA,IAAArgJ,EAAAugJ,EAAAF,WAAA,CAEA,IAAAA,EAAAE,EAAAF,UAEA3yJ,EAAAxB,MAAAm0J,EAAAqB,MAAAjrD,EAAAjmH,eAAAimH,EAAAhmH,oBACAid,EAAAvB,MAAAk0J,EAAAsB,MAAAlrD,EAAAjmH,eAAAimH,EAAAhmH,oBAEAid,EAAApQ,OAAA7D,IAAA4mK,EAAAuB,SAAA,EAAAvB,EAAAwB,SAAA,GACAn0J,EAAAd,OAAAnT,IAAA4mK,EAAAyB,SAAA,EAAAzB,EAAA0B,SAAA,QAIAr0J,EAAAxB,MAAAuqG,EAAAjmH,eACAkd,EAAAvB,MAAAsqG,EAAAjmH,eAIA,OAAAkd,EAMA,OAFAlT,QAAAC,KAAA,wDAAA0Q,GAEA,KAQA,OAFA3Q,QAAAC,KAAA,wDAAA6mK,EAAA5mJ,IAEA,KAhEAiC,EAAAjyB,KAAAuyB,EAAAvyB,MAAA,GAsEA,IAAA+xB,EAAA4jJ,EAAA5jJ,WAEA,IAAA,IAAAO,KAAAP,EAAA,CAEA,IAAAulJ,EAAAvlJ,EAAAO,GAEA,OAAAA,GAEA,IAAA,UACAglJ,EAAAhvI,OAAArW,EAAAqW,MAAA31B,UAAA2kK,EAAAhvI,OACAgvI,EAAAt0J,UAAAiP,EAAAqb,IAAA08E,EAAAstD,EAAAt0J,UACA,MACA,IAAA,WACAs0J,EAAAhvI,OAAArW,EAAAwf,UAAAxf,EAAAwf,SAAA9+B,UAAA2kK,EAAAhvI,OACAgvI,EAAAt0J,UAAAiP,EAAA0b,YAAAq8E,EAAAstD,EAAAt0J,UACA,MACA,IAAA,OACAs0J,EAAAt0J,UAAAiP,EAAAigB,UAAA83E,EAAAstD,EAAAt0J,UACA,MACA,IAAA,UACAs0J,EAAAt0J,UAAAiP,EAAAsb,SAAAy8E,EAAAstD,EAAAt0J,UACA,MACA,IAAA,YACAs0J,EAAAC,OAAAtlJ,EAAAyf,YAAAzf,EAAAyf,UAAA4lI,EAAAC,OACA,MACA,IAAA,WACAD,EAAAhvI,OAAArW,EAAAsf,UAAAtf,EAAAsf,SAAA5+B,UAAA2kK,EAAAhvI,OACAgvI,EAAAt0J,UAAAiP,EAAAygB,YAAAs3E,EAAAstD,EAAAt0J,WASA,IAAAsoB,EAAAvZ,EAAA,YACAkkC,EAAAlkC,EAAA,aAwBA,QApBAxxB,IAAA01D,GAAA3qB,IAEA2qB,GACAshH,MAAA,SAOAh3K,IAAA+qC,GAAA2qB,IAEA3qB,GACAs8B,OAAA,QACAr1C,MACA+V,OAAA,EAAA,EAAA,EAAA,MAKAgD,GAAA2qB,EAIA,GAAA3qB,EAAA/Y,KAAAvP,QAIAiP,EAAAqZ,aAAA,MAEA,CAEA,IAAAhD,EAAAgD,EAAA/Y,KAAA+V,MAEA,OAAAgD,EAAAs8B,QAEA,IAAA,QACA31C,EAAAoZ,QAAA/C,EAAA,GAAA2tB,EAAAshH,MACA,MACA,IAAA,WACAtlJ,EAAAoZ,QAAA,EAAA/C,EAAA,GAAA2tB,EAAAshH,MACA,MACA,IAAA,SACAtlJ,EAAAoZ,QAAA,EAAA/C,EAAA,GAAA2tB,EAAAshH,MACA,MACA,IAAA,UACAtlJ,EAAAoZ,QAAA/C,EAAA,GAAA2tB,EAAAshH,MACA,MACA,QACAznK,QAAAC,KAAA,oEAAAu7B,EAAAs8B,QAIA31C,EAAAoZ,QAAA,IAAApZ,EAAAqZ,aAAA,GAcA,YANA/qC,IAAAs1K,QAAAt1K,IAAAs1K,EAAAF,WAAA,IAAAE,EAAAF,UAAA6B,eAEAvlJ,EAAAiZ,KAAA6gF,EAAAnpH,YAIAqvB,EAIA,SAAAw6F,EAAAz8F,GAEA,OAAA2jI,EAAAviI,GAAAH,UAAAjB,GAAAwmJ,GAgCA,SAAAiB,EAAA5G,GAEA,IAAA,IAAA9wK,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,OAAAowB,EAAA6sG,UAEA,IAAA,mBACA,OAAA06C,EAAAvnJ,IAMA,SAIA,SAAAunJ,EAAA7G,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,OAAAowB,EAAA6sG,UAEA,IAAA,cACA,IAAA,eAEAzqG,EAAAojJ,UAAAxlJ,EAAA6sG,SACAzqG,EAAAR,WAAA4lJ,EAAAxnJ,IAQA,OAAAoC,EAIA,SAAAolJ,EAAA9G,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,OAAAowB,EAAA6sG,UAEA,IAAA,OACA,IAAA,OACA,IAAA,OACA,IAAA,OACA,IAAA,QACA,IAAA,OACA,IAAA,eACAzqG,EAAApC,EAAA6sG,UAAA9zF,WAAA/Y,EAAA4gI,cAOA,OAAAx+H,EAIA,SAAAqlJ,EAAArlJ,GAEA,IAAAxY,EAEA,OAAAwY,EAAAslJ,OAAAlC,WAEA,IAAA,cACA57J,EAAA,IAAAgyG,EAAA9oE,kBACA1wB,EAAAslJ,OAAA9lJ,WAAA+lJ,KACAvlJ,EAAAslJ,OAAA9lJ,WAAAgmJ,aACAxlJ,EAAAslJ,OAAA9lJ,WAAAimJ,MACAzlJ,EAAAslJ,OAAA9lJ,WAAAkmJ,MAEA,MAEA,IAAA,eACA,IAAAC,EAAA3lJ,EAAAslJ,OAAA9lJ,WAAAmmJ,KACAC,EAAA5lJ,EAAAslJ,OAAA9lJ,WAAAomJ,KACAC,EAAA7lJ,EAAAslJ,OAAA9lJ,WAAAgmJ,aAEAI,OAAA53K,IAAA43K,EAAAD,EAAAE,EAAAD,EACAD,OAAA33K,IAAA23K,EAAAC,EAAAC,EAAAF,EAEAC,GAAA,GACAD,GAAA,GAEAn+J,EAAA,IAAAgyG,EAAA9E,oBACAkxD,EAAAA,EAAAD,GAAAA,EACA3lJ,EAAAslJ,OAAA9lJ,WAAAimJ,MACAzlJ,EAAAslJ,OAAA9lJ,WAAAkmJ,MAEA,MAEA,QACAl+J,EAAA,IAAAgyG,EAAA9oE,kBAOA,OAFAlpC,EAAA/Z,KAAAuyB,EAAAvyB,MAAA,GAEA+Z,EAIA,SAAAqjE,EAAAptD,GAEA,IAAAuC,EAAAnB,GAAA2mD,QAAA/nD,GAEA,YAAAzvB,IAAAgyB,EAEAohI,EAAAphI,EAAAqlJ,IAIA9nK,QAAAC,KAAA,qDAAAigB,GAEA,MA8BA,SAAAqoJ,EAAAxH,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,cACA,IAAA,QACA,IAAA,OACA,IAAA,UAEAzqG,EAAAojJ,UAAAxlJ,EAAA6sG,SACAzqG,EAAAR,WAAAumJ,GAAAnoJ,IAMA,OAAAoC,EAIA,SAAA+lJ,GAAAzH,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACA,IAAA3xH,EAAA0lK,EAAA5gJ,EAAA4gI,aACAx+H,EAAA+V,OAAA,IAAAyjF,EAAA/jF,OAAAr1B,UAAAtH,GACA,MAEA,IAAA,gBACAknB,EAAAgmJ,aAAArvI,WAAA/Y,EAAA4gI,aACA,MAEA,IAAA,wBACA,IAAAj8I,EAAAo0B,WAAA/Y,EAAA4gI,aACAx+H,EAAApD,SAAAra,EAAApU,KAAAgR,KAAA,EAAAoD,GAAA,GAOA,OAAAyd,EAIA,SAAAimJ,GAAAjmJ,GAEA,IAAAg2C,EAEA,OAAAh2C,EAAAojJ,WAEA,IAAA,cACAptG,EAAA,IAAAwjD,EAAA5E,iBACA,MAEA,IAAA,QACA5+C,EAAA,IAAAwjD,EAAA/E,WACA,MAEA,IAAA,OACAz+C,EAAA,IAAAwjD,EAAApF,UACA,MAEA,IAAA,UACAp+C,EAAA,IAAAwjD,EAAA3E,aAQA,OAHA70F,EAAAR,WAAAuW,OAAAigC,EAAAjgC,MAAA34B,KAAA4iB,EAAAR,WAAAuW,OACA/V,EAAAR,WAAA5C,WAAAo5C,EAAAp5C,SAAAoD,EAAAR,WAAA5C,UAEAo5C,EAIA,SAAAkwG,GAAAzoJ,GAEA,IAAAuC,EAAAnB,GAAAkxB,OAAAtyB,GAEA,YAAAzvB,IAAAgyB,EAEAohI,EAAAphI,EAAAimJ,KAIA1oK,QAAAC,KAAA,oDAAAigB,GAEA,MA6DA,SAAA+jJ,GAAAlD,GAOA,IALA,IAAAt+I,GACAlnB,SACA8lF,OAAA,GAGApxF,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,cACAzqG,EAAAlnB,MAAA0lK,EAAA5gJ,EAAA4gI,aACA,MAEA,IAAA,aACAx+H,EAAAlnB,MAAAylK,EAAA3gJ,EAAA4gI,aACA,MAEA,IAAA,mBACA,IAAA2nB,EAAA9f,EAAAzoI,EAAA,YAAA,QAEA5vB,IAAAm4K,IAEAnmJ,EAAA4+D,OAAA9nD,SAAAqvI,EAAAtiI,aAAA,aASA,OAAA7jB,EAIA,SAAAomJ,GAAA9H,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,IAAAowB,EAAAohJ,WAEAh/I,EAAApC,EAAAimB,aAAA,aAAA66H,EAAA9gJ,EAAAimB,aAAA,YAIA,OAAA7jB,EAIA,SAAAqmJ,GAAA/H,GAWA,IATA,IAAAgI,GACApuK,KAAAomK,EAAA7zC,SACA/qG,SAAA4+I,EAAAz6H,aAAA,YACAh5B,MAAAisB,SAAAwnI,EAAAz6H,aAAA,UACAk7H,UACAngF,OAAA,EACA2nF,OAAA,GAGA/4K,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACA,IAAAhtG,EAAAihJ,EAAA9gJ,EAAAimB,aAAA,WACAo7H,EAAArhJ,EAAAimB,aAAA,YACAxjC,EAAAy2B,SAAAlZ,EAAAimB,aAAA,WACArnC,EAAAs6B,SAAAlZ,EAAAimB,aAAA,QACA2iI,EAAAhqK,EAAA,EAAAyiK,EAAAziK,EAAAyiK,EACAqH,EAAAvH,OAAAyH,IAAA/oJ,GAAAA,EAAApd,OAAAA,GACAimK,EAAA1nF,OAAAzwF,KAAA6L,IAAAssK,EAAA1nF,OAAAv+E,EAAA,GACA,aAAA4+J,IAAAqH,EAAAC,OAAA,GACA,MAEA,IAAA,SACAD,EAAAzE,OAAApD,EAAA7gJ,EAAA4gI,aACA,MAEA,IAAA,IACA8nB,EAAAthK,EAAAy5J,EAAA7gJ,EAAA4gI,cAOA,OAAA8nB,EAsBA,SAAAG,GAAAC,GAIA,IAFA,IAAA77J,EAAA,EAEArd,EAAA,EAAAwL,EAAA0tK,EAAAp5K,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAA84K,EAAAI,EAAAl5K,IAEA,IAAA84K,EAAAC,OAEA17J,IAMAA,EAAA,GAAAA,EAAA67J,EAAAp5K,SAEAo5K,EAAAC,aAAA,GAMA,SAAAC,GAAA5mJ,GAEA,IAAAuiI,KAEAod,EAAA3/I,EAAA2/I,QACAliI,EAAAzd,EAAAyd,SACAipI,EAAA1mJ,EAAA0mJ,WAEA,GAAA,IAAAA,EAAAp5K,OAAA,SAKA,IAAAu5K,EAvDA,SAAAH,GAIA,IAFA,IAAAnkB,KAEA/0J,EAAA,EAAAA,EAAAk5K,EAAAp5K,OAAAE,IAAA,CAEA,IAAA84K,EAAAI,EAAAl5K,QAEAQ,IAAAu0J,EAAA+jB,EAAApuK,QAAAqqJ,EAAA+jB,EAAApuK,UAEAqqJ,EAAA+jB,EAAApuK,MAAAK,KAAA+tK,GAIA,OAAA/jB,EAyCAukB,CAAAJ,GAEA,IAAA,IAAAxuK,KAAA2uK,EAAA,CAEA,IAAAE,EAAAF,EAAA3uK,GAIAuuK,GAAAM,GAIAxkB,EAAArqJ,GAAA8uK,GAAAD,EAAApH,EAAAliI,GAIA,OAAA8kH,EAIA,SAAAykB,GAAAN,EAAA/G,EAAAliI,GAmBA,IAjBA,IAAA8kH,KAEAxrI,GAAAje,SAAA8lF,OAAA,GACAl2E,GAAA5P,SAAA8lF,OAAA,GACA7sE,GAAAjZ,SAAA8lF,OAAA,GACA1zD,GAAApyB,SAAA8lF,OAAA,GACA7oD,GAAAj9B,SAAA8lF,OAAA,GAEA6jF,GAAA3pK,SAAA8lF,OAAA,GACAsI,GAAApuF,SAAA8lF,OAAA,GAEAr/D,EAAA,IAAAi6F,EAAAn2E,eAEA4jI,KAEAh+I,EAAA,EAEAjkB,EAAA,EAAAA,EAAA0hK,EAAAp5K,OAAA0X,IAAA,CAEA,IAAAshK,EAAAI,EAAA1hK,GACA+5J,EAAAuH,EAAAvH,OAIAl0J,EAAA,EAEA,OAAAy7J,EAAApuK,MAEA,IAAA,QACA,IAAA,aACA2S,EAAA,EAAAy7J,EAAAz7J,MACA,MAEA,IAAA,YACAA,EAAA,EAAAy7J,EAAAz7J,MACA,MAEA,IAAA,WAEA,IAAA,IAAAyB,EAAA,EAAAA,EAAAg6J,EAAAz7J,MAAAyB,IAAA,CAEA,IAAAuf,EAAAy6I,EAAAzE,OAAAv1J,GAEA,OAAAuf,GAEA,KAAA,EACAhhB,GAAA,EACA,MAEA,KAAA,EACAA,GAAA,EACA,MAEA,QACAA,GAAA,GAAAghB,EAAA,IAOA,MAEA,QACAtuB,QAAAC,KAAA,8CAAA8oK,EAAApuK,MAiBA,IAAA,IAAAzK,KAbA8xB,EAAAykB,SAAA/a,EAAApe,EAAA7F,GACAikB,GAAApe,EAIAy7J,EAAA5mJ,UAEAunJ,EAAA1uK,KAAA+tK,EAAA5mJ,UAMAq/I,EAAA,CAEA,IAAAmI,EAAAnI,EAAAtxK,GAEA,OAAAA,GAEA,IAAA,SACA,IAAA,IAAAsyB,KAAA0d,EAAA,CAEA,IAAAhgB,EAAAggB,EAAA1d,GAEA,OAAAA,GAEA,IAAA,WACA,IAAAonJ,EAAApwJ,EAAAje,MAAAxL,OAaA,GAZA85K,GAAAd,EAAA3G,EAAAliJ,GAAAypJ,EAAA7mK,OAAA0W,EAAAje,OACAie,EAAA6nE,OAAA+gF,EAAAliJ,GAAAmhE,OAEA+gF,EAAA5hI,aAAA4hI,EAAA3hI,cAEAopI,GAAAd,EAAA3G,EAAA3hI,YAAAkpI,EAAA7mK,OAAAoiK,EAAA3pK,OACAsuK,GAAAd,EAAA3G,EAAA5hI,YAAAmpI,EAAA7mK,OAAA6mF,EAAApuF,SAMA,IAAAwtK,EAAAC,QAAA,IAAAG,EAAAC,YAIA,IAFA,IAAA97J,GAAAkM,EAAAje,MAAAxL,OAAA65K,GAAApwJ,EAAA6nE,OAEApxF,EAAA,EAAAA,EAAAqd,EAAArd,IAIAukB,EAAAjZ,MAAAP,KAAA,EAAA,GAKA,MAEA,IAAA,SACA6uK,GAAAd,EAAA3G,EAAAliJ,GAAAypJ,EAAA7mK,OAAAqI,EAAA5P,OACA4P,EAAAk2E,OAAA+gF,EAAAliJ,GAAAmhE,OACA,MAEA,IAAA,QACAwoF,GAAAd,EAAA3G,EAAAliJ,GAAAypJ,EAAA7mK,OAAA01B,EAAAj9B,OACAi9B,EAAA6oD,OAAA+gF,EAAAliJ,GAAAmhE,OACA,MAEA,IAAA,WACAwoF,GAAAd,EAAA3G,EAAAliJ,GAAAypJ,EAAA7mK,OAAA0R,EAAAjZ,OACAiZ,EAAA6sE,OAAA+gF,EAAAliJ,GAAAmhE,OACA,MAEA,IAAA,YACAwoF,GAAAd,EAAA3G,EAAAliJ,GAAAypJ,EAAA7mK,OAAA6qB,EAAApyB,OACAiZ,EAAA6sE,OAAA+gF,EAAAliJ,GAAAmhE,OACA,MAEA,QACArhF,QAAAC,KAAA,4EAAAuiB,IAKA,MAEA,IAAA,SACAqnJ,GAAAd,EAAA3G,EAAAuH,EAAAzpJ,IAAAypJ,EAAA7mK,OAAAqI,EAAA5P,OACA4P,EAAAk2E,OAAA+gF,EAAAuH,EAAAzpJ,IAAAmhE,OACA,MAEA,IAAA,QACAwoF,GAAAd,EAAA3G,EAAAuH,EAAAzpJ,IAAAypJ,EAAA7mK,OAAA01B,EAAAj9B,OACAi9B,EAAA6oD,OAAA+gF,EAAAuH,EAAAzpJ,IAAAmhE,OACA,MAEA,IAAA,WACAwoF,GAAAd,EAAA3G,EAAAuH,EAAAzpJ,IAAAypJ,EAAA7mK,OAAA0R,EAAAjZ,OACAiZ,EAAA6sE,OAAA+gF,EAAAuH,EAAAzpJ,IAAAmhE,OACA,MAEA,IAAA,YACAwoF,GAAAd,EAAA3G,EAAAuH,EAAAzpJ,IAAAypJ,EAAA7mK,OAAA6qB,EAAApyB,OACAoyB,EAAA0zD,OAAA+gF,EAAAuH,EAAAzpJ,IAAAmhE,SAwBA,OAbA7nE,EAAAje,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAArmB,EAAAje,MAAAie,EAAA6nE,SACAl2E,EAAA5P,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAA10B,EAAA5P,MAAA4P,EAAAk2E,SACA7oD,EAAAj9B,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAArH,EAAAj9B,MAAAi9B,EAAA6oD,SACA7sE,EAAAjZ,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAArrB,EAAAjZ,MAAAiZ,EAAA6sE,SACA1zD,EAAApyB,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,MAAA,IAAA01E,EAAAp8E,uBAAAlS,EAAApyB,MAAAoyB,EAAA0zD,SAEA6jF,EAAA3pK,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,YAAA,IAAA01E,EAAAp8E,uBAAAqlI,EAAA3pK,MAAA2pK,EAAA7jF,SACAsI,EAAApuF,MAAAxL,OAAA,GAAAiyB,EAAAukB,aAAA,aAAA,IAAA01E,EAAAp8E,uBAAA8pD,EAAApuF,MAAAouF,EAAAtI,SAEA2jE,EAAAviI,KAAAT,EACAgjI,EAAArqJ,KAAAwuK,EAAA,GAAAxuK,KACAqqJ,EAAA0kB,aAAAA,EAEA1kB,EAIA,SAAA6kB,GAAAd,EAAA72K,EAAA4Q,EAAAvH,GAEA,IAAAgtC,EAAAwgI,EAAAthK,EACA45E,EAAA0nF,EAAA1nF,OACAijF,EAAAyE,EAAAzE,OAEA,SAAAwF,EAAA75K,GAKA,IAHA,IAAA+B,EAAAu2C,EAAAt4C,EAAA6S,GAAAinK,EACAh6K,EAAAiC,EAAA+3K,EAEA/3K,EAAAjC,EAAAiC,IAEAuJ,EAAAP,KAAAm3H,EAAAngI,IAMA,IAAAmgI,EAAAjgI,EAAAqJ,MACAwuK,EAAA73K,EAAAmvF,OAEA,QAAA5wF,IAAAs4K,EAAAzE,OAIA,IAFA,IAAAtyK,EAAA,EAEA/B,EAAA,EAAAwL,EAAA6oK,EAAAv0K,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqd,EAAAg3J,EAAAr0K,GAEA,GAAA,IAAAqd,EAAA,CAEA,IAAAjN,EAAArO,EAAA,EAAAqvF,EACA/gF,EAAAtO,EAAA,EAAAqvF,EACA/9E,EAAAtR,EAAA,EAAAqvF,EACAvyE,EAAA9c,EAAA,EAAAqvF,EAEAyoF,EAAAzpK,GAAAypK,EAAAxpK,GAAAwpK,EAAAh7J,GACAg7J,EAAAxpK,GAAAwpK,EAAAxmK,GAAAwmK,EAAAh7J,QAEA,GAAA,IAAAxB,EAAA,CAEA,IAAAjN,EAAArO,EAAA,EAAAqvF,EACA/gF,EAAAtO,EAAA,EAAAqvF,EACA/9E,EAAAtR,EAAA,EAAAqvF,EAEAyoF,EAAAzpK,GAAAypK,EAAAxpK,GAAAwpK,EAAAxmK,QAEA,GAAAgK,EAAA,EAEA,IAAA,IAAA8gC,EAAA,EAAAC,EAAA/gC,EAAA,EAAA8gC,GAAAC,EAAAD,IAAA,CAEA,IAAA/tC,EAAArO,EAAA,EAAAqvF,EACA/gF,EAAAtO,EAAAqvF,EAAAjzC,EACA9qC,EAAAtR,EAAAqvF,GAAAjzC,EAAA,GAEA07H,EAAAzpK,GAAAypK,EAAAxpK,GAAAwpK,EAAAxmK,GAMAtR,GAAAqvF,EAAA/zE,OAMA,IAAA,IAAArd,EAAA,EAAAwL,EAAA8sC,EAAAx4C,OAAAE,EAAAwL,EAAAxL,GAAAoxF,EAEAyoF,EAAA75K,GAQA,SAAAysH,GAAAx8F,GAEA,OAAA2jI,EAAAviI,GAAAJ,WAAAhB,GAAAmpJ,IAkCA,SAAAW,GAAAvnJ,GAEA,YAAAhyB,IAAAgyB,EAAAuiI,MAAAviI,EAAAuiI,MAEAviI,EAUA,SAAAwnJ,GAAAlJ,EAAAt+I,GAEA,IAAA,IAAAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,QACAzqG,EAAAyhJ,OAAA7jJ,EAAAimB,aAAA,QAAA4jI,GAAA7pJ,GACA,MAEA,IAAA,OACAoC,EAAA0nJ,MAAAnvK,KAAAovK,GAAA/pJ,MASA,SAAA6pJ,GAAAnJ,GAIA,IAFA,IAAAt+I,EAEAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,YACA,IAAA,WACAzqG,EAAA4nJ,GAAAhqJ,IAOA,OAAAoC,EAIA,SAAA4nJ,GAAAtJ,EAAAt+I,GAgBA,IAdA,IAAAA,GACAm/I,IAAAb,EAAAz6H,aAAA,OACAp2C,KAAA6wK,EAAAz6H,aAAA,SAAA,GACAtgC,KAAA,IAAAi2G,EAAApzG,QACAyhK,QACA9tK,IAAA,EACAC,IAAA,GAEA9B,KAAAomK,EAAA7zC,SACAq9C,QAAA,EACAC,aAAA,EACAC,eAAA,GAGAx6K,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,OACA,IAAA3xH,EAAA0lK,EAAA5gJ,EAAA4gI,aACAx+H,EAAAzc,KAAAnD,UAAAtH,GACA,MACA,IAAA,SACA,IAAAkB,EAAA4jB,EAAAyoI,qBAAA,OAAA,GACAtsJ,EAAA6jB,EAAAyoI,qBAAA,OAAA,GAEArmI,EAAA6nJ,OAAA7tK,IAAA28B,WAAA38B,EAAAwkJ,aACAx+H,EAAA6nJ,OAAA9tK,IAAA48B,WAAA58B,EAAAykJ,cAmBA,OAVAx+H,EAAA6nJ,OAAA9tK,KAAAimB,EAAA6nJ,OAAA7tK,MAEAgmB,EAAA8nJ,QAAA,GAMA9nJ,EAAAgoJ,gBAAAhoJ,EAAA6nJ,OAAA9tK,IAAAimB,EAAA6nJ,OAAA7tK,KAAA,EAEAgmB,EAIA,SAAA2nJ,GAAArJ,GASA,IAPA,IAAAt+I,GACAm/I,IAAAb,EAAAz6H,aAAA,OACAp2C,KAAA6wK,EAAAz6H,aAAA,SAAA,GACAokI,eACA3H,eAGA9yK,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,kBACAzqG,EAAAioJ,YAAA1vK,KAAA2vK,GAAAtqJ,IACA,MAEA,IAAA,SACA,IAAA,YACA,IAAA,SACAoC,EAAAsgJ,WAAA/nK,KAAA4vK,GAAAvqJ,KAOA,OAAAoC,EAIA,SAAAkoJ,GAAA5J,GAQA,IANA,IAAAt+I,GACAooJ,MAAA9J,EAAAz6H,aAAA,SAAAx2C,MAAA,KAAAynE,MACAwrG,cACAoH,UAGAl6K,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,OACAzqG,EAAA0nJ,MAAAnvK,KAAAovK,GAAA/pJ,IACA,MAEA,IAAA,SACA,IAAA,YACA,IAAA,SACAoC,EAAAsgJ,WAAA/nK,KAAA4vK,GAAAvqJ,KAOA,OAAAoC,EAIA,SAAAmoJ,GAAA7J,GAEA,IAAAt+I,GACA9nB,KAAAomK,EAAA7zC,UAGA3xH,EAAA0lK,EAAAF,EAAA9f,aAEA,OAAAx+H,EAAA9nB,MAEA,IAAA,SACA8nB,EAAAnyB,IAAA,IAAA2rH,EAAAxmG,QACAgN,EAAAnyB,IAAAuS,UAAAtH,GAAAoU,YACA,MAEA,IAAA,YACA8S,EAAAnyB,IAAA,IAAA2rH,EAAApzG,QACA4Z,EAAAnyB,IAAAuS,UAAAtH,GACA,MAEA,IAAA,SACAknB,EAAAnyB,IAAA,IAAA2rH,EAAApzG,QACA4Z,EAAAnyB,IAAAuS,UAAAtH,GACAknB,EAAAzgB,MAAAi6G,EAAAm+B,UAAAv8I,SAAAtC,EAAA,IAKA,OAAAknB,EAkCA,SAAAqoJ,GAAA/J,EAAAt+I,GAEA,IAAA,IAAAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,mBACA69C,GAAA1qJ,EAAAoC,KASA,SAAAsoJ,GAAAhK,EAAAt+I,GAEA,IAAA,IAAAxyB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,UACAzqG,EAAAuoJ,QAAA/J,EAAA5gJ,EAAA4gI,aACA,MAEA,IAAA,OACAx+H,EAAAwoJ,KAAAhK,EAAA5gJ,EAAA4gI,aAAA,KAqCA,SAAAiqB,GAAAnK,GAMA,IAJA,IAAAt+I,GACA5wB,OAAAkvK,EAAAz6H,aAAA,UAAAx2C,MAAA,KAAAynE,OAGAtnE,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,OACA,IAAAi+C,EAAA9qJ,EAAAyoI,qBAAA,SAAA,GACArmI,EAAAzc,KAAAmlK,EAAAlqB,YACA,IAAAmqB,EAAA3oJ,EAAAzc,KAAAlW,MAAA,SAAAynE,MAAAznE,MAAA,QAAA,GACA2yB,EAAA4oJ,WAAAD,EAAAv5D,OAAA,EAAAu5D,EAAAr7K,OAAA,IAOA,OAAA0yB,EAIA,SAAA6oJ,GAAA7oJ,GAEA,YAAAhyB,IAAAgyB,EAAAuiI,MAAAviI,EAAAuiI,MAEAviI,EAuQA,IAAAvT,GAAA,IAAA+sG,EAAAxmG,QACAiK,GAAA,IAAAu8F,EAAApzG,QAEA,SAAA0iK,GAAAxK,GAiBA,IAfA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,SAAA,GACA3rC,KAAAomK,EAAAz6H,aAAA,QACApmB,GAAA6gJ,EAAAz6H,aAAA,MACAs7H,IAAAb,EAAAz6H,aAAA,OACAp3B,OAAA,IAAA+sG,EAAAxmG,QACAotJ,SACA2I,mBACAC,uBACAC,kBACAC,sBACAC,iBACA7I,eAGA9yK,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,OACAzqG,EAAAogJ,MAAA7nK,KAAAqlB,EAAAimB,aAAA,OACAilI,GAAAlrJ,GACA,MAEA,IAAA,kBACAoC,EAAA+oJ,gBAAAxwK,KAAAmmK,EAAA9gJ,EAAAimB,aAAA,SACA,MAEA,IAAA,sBACA7jB,EAAAgpJ,oBAAAzwK,KAAA6wK,GAAAxrJ,IACA,MAEA,IAAA,iBACAoC,EAAAipJ,eAAA1wK,KAAAmmK,EAAA9gJ,EAAAimB,aAAA,SACA,MAEA,IAAA,oBACA7jB,EAAAkpJ,mBAAA3wK,KAAA6wK,GAAAxrJ,IACA,MAEA,IAAA,gBACAoC,EAAAmpJ,cAAA5wK,KAAAmmK,EAAA9gJ,EAAAimB,aAAA,SACA,MAEA,IAAA,SACA,IAAA/qC,EAAA0lK,EAAA5gJ,EAAA4gI,aACAx+H,EAAAvT,OAAAvO,SAAAuO,GAAArM,UAAAtH,GAAAoU,aACA8S,EAAAsgJ,WAAA1iJ,EAAAimB,aAAA,QAAAjmB,EAAA6sG,SACA,MAEA,IAAA,YACA,IAAA3xH,EAAA0lK,EAAA5gJ,EAAA4gI,aACAvhI,GAAA7c,UAAAtH,GACAknB,EAAAvT,OAAAvO,SAAAuO,GAAA+J,gBAAAyG,GAAAvuB,EAAAuuB,GAAAviB,EAAAuiB,GAAAjhB,IACAgkB,EAAAsgJ,WAAA1iJ,EAAAimB,aAAA,QAAAjmB,EAAA6sG,SACA,MAEA,IAAA,SACA,IAAA3xH,EAAA0lK,EAAA5gJ,EAAA4gI,aACAj/I,EAAAi6G,EAAAm+B,UAAAv8I,SAAAtC,EAAA,IACAknB,EAAAvT,OAAAvO,SAAAuO,GAAAmK,iBAAAqG,GAAA7c,UAAAtH,GAAAyG,IACAygB,EAAAsgJ,WAAA1iJ,EAAAimB,aAAA,QAAAjmB,EAAA6sG,SACA,MAEA,IAAA,QACA,IAAA3xH,EAAA0lK,EAAA5gJ,EAAA4gI,aACAx+H,EAAAvT,OAAAoB,MAAAoP,GAAA7c,UAAAtH,IACAknB,EAAAsgJ,WAAA1iJ,EAAAimB,aAAA,QAAAjmB,EAAA6sG,SACA,MAEA,IAAA,QACA,MAEA,QACAltH,QAAA5B,IAAAiiB,IAgBA,OAVAyrJ,GAAArpJ,EAAAvC,IAEAlgB,QAAAC,KAAA,yGAAAwiB,EAAAvC,IAIAoB,GAAAuhJ,MAAApgJ,EAAAvC,IAAAuC,EAIAA,EAIA,SAAAopJ,GAAA9K,GAQA,IANA,IAAAt+I,GACAvC,GAAAihJ,EAAAJ,EAAAz6H,aAAA,QACAnlB,aACA4qJ,cAGA97K,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,OAAAowB,EAAA6sG,UAEA,IAAA,gBAGA,IAFA,IAAA8+C,EAAA3rJ,EAAAyoI,qBAAA,qBAEA9kI,EAAA,EAAAA,EAAAgoJ,EAAAj8K,OAAAi0B,IAAA,CAEA,IAAAioJ,EAAAD,EAAAhoJ,GACAkoJ,EAAAD,EAAA3lI,aAAA,UACAz0C,EAAAo6K,EAAA3lI,aAAA,UAEA7jB,EAAAtB,UAAA+qJ,GAAA/K,EAAAtvK,GAIA,MAEA,IAAA,WACA4wB,EAAAspJ,UAAA/wK,KAAAmmK,EAAA9gJ,EAAA4gI,eAUA,OAAAx+H,EAIA,SAAA0pJ,GAAAJ,EAAA7H,GAEA,IAGAj0K,EAAAwyB,EA2bAvC,EA9bAksJ,KACAC,KAOA,IAAAp8K,EAAA,EAAAA,EAAA87K,EAAAh8K,OAAAE,IAAA,CAEA,IAAAgmE,EAAA81G,EAAA97K,GAIA,GAAA67K,GAAA71G,GAGAq2G,GADA98C,EAAAszC,GAAA7sG,GACAiuG,EAAAkI,QAEA,GA2aAlsJ,EA3aA+1C,OA6aAxlE,IAAA6wB,GAAAirJ,aAAArsJ,GAtaA,IAHA,IAAAssJ,EAAAlrJ,GAAAirJ,aAAAt2G,GACAh5C,EAAAuvJ,EAAAvvJ,SAEA+G,EAAA,EAAAA,EAAA/G,EAAAltB,OAAAi0B,IAAA,CAEA,IAAA3D,EAAApD,EAAA+G,GAEA,GAAA,UAAA3D,EAAA1lB,KAAA,CAEA,IAAA60H,EAAAszC,GAAAziJ,EAAAH,IACAosJ,GAAA98C,EAAA00C,EAAAkI,SAQApsK,QAAAmJ,MAAA,qEAAA8sD,GAQA,IAAAhmE,EAAA,EAAAA,EAAAi0K,EAAAn0K,OAAAE,IAEA,IAAA+zB,EAAA,EAAAA,EAAAooJ,EAAAr8K,OAAAi0B,IAIA,IAFAvB,EAAA2pJ,EAAApoJ,IAEAimE,KAAA/5F,OAAAg0K,EAAAj0K,GAAAC,KAAA,CAEAm8K,EAAAp8K,GAAAwyB,EACAA,EAAAgqJ,WAAA,EACA,MAUA,IAAAx8K,EAAA,EAAAA,EAAAm8K,EAAAr8K,OAAAE,KAIA,KAFAwyB,EAAA2pJ,EAAAn8K,IAEAw8K,YAEAJ,EAAArxK,KAAAynB,GACAA,EAAAgqJ,WAAA,GAQA,IAAAz2G,KACA+zB,KAEA,IAAA95F,EAAA,EAAAA,EAAAo8K,EAAAt8K,OAAAE,IAEAwyB,EAAA4pJ,EAAAp8K,GAEA+lE,EAAAh7D,KAAAynB,EAAAwnE,MACAF,EAAA/uF,KAAAynB,EAAA4iJ,aAIA,OAAA,IAAAppD,EAAAnyB,SAAA9zB,EAAA+zB,GAIA,SAAAuiF,GAAA98C,EAAA00C,EAAAkI,GAIA58C,EAAA5uG,SAAA,SAAAb,GAEA,IAAA,IAAAA,EAAAmqE,OAAA,CAMA,IAJA,IAAAm7E,EAIAp1K,EAAA,EAAAA,EAAAi0K,EAAAn0K,OAAAE,IAAA,CAEA,IAAA46K,EAAA3G,EAAAj0K,GAEA,GAAA46K,EAAA36K,OAAA6vB,EAAA7vB,KAAA,CAEAm1K,EAAAwF,EAAAxF,YACA,YAMA50K,IAAA40K,IAQAA,EAAA,IAAAppD,EAAAxmG,SAIA22J,EAAApxK,MAAAivF,KAAAlqE,EAAAslJ,YAAAA,EAAAoH,WAAA,OAQA,SAAAlqB,GAAA9/H,GAeA,IAbA,IA94EAvC,EA84EAiyD,KAEAjjE,EAAAuT,EAAAvT,OACA2zJ,EAAApgJ,EAAAogJ,MACAloK,EAAA8nB,EAAA9nB,KACA6wK,EAAA/oJ,EAAA+oJ,gBACAC,EAAAhpJ,EAAAgpJ,oBACAC,EAAAjpJ,EAAAipJ,eACAC,EAAAlpJ,EAAAkpJ,mBACAC,EAAAnpJ,EAAAmpJ,cAIA37K,EAAA,EAAAwL,EAAAonK,EAAA9yK,OAAAE,EAAAwL,EAAAxL,IAEAkiF,EAAAn3E,KAAA8nK,GAAAD,EAAA5yK,KAMA,IAAA,IAAAA,EAAA,EAAAwL,EAAA+vK,EAAAz7K,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAy8K,EAAAp/F,EAAAk+F,EAAAv7K,IAEA,OAAAy8K,GAEAv6F,EAAAn3E,KAAA0xK,EAAA/sK,SAQA,IAAA,IAAA1P,EAAA,EAAAwL,EAAAgwK,EAAA17K,OAAAE,EAAAwL,EAAAxL,IAYA,IAVA,IAAAg8K,EAAAR,EAAAx7K,GACAg9E,GAp7EA/sD,EAo7EA+rJ,EAAA/rJ,GAl7EA2jI,EAAAviI,GAAA2pD,YAAA/qD,GAAAqkJ,IAm7EArjJ,EAAAw7F,GAAAzvC,EAAA/sD,IACAysJ,EAAA9kB,GAAA3mI,EAAA+qJ,EAAA9qJ,WAEA4qJ,EAAAE,EAAAF,UACA7H,EAAAj3F,EAAAu3F,KAAAN,OAEAjuG,EAAAk2G,GAAAJ,EAAA7H,GAEAlgJ,EAAA,EAAA4jB,EAAA+kI,EAAA58K,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAAjE,EAAA4sJ,EAAA3oJ,GAEAjE,EAAAg2C,gBAEAh2C,EAAAypE,KAAAvzB,EAAAgX,EAAAu3F,KAAAp7E,YACArpE,EAAA2pE,wBAIAvX,EAAAn3E,KAAA+kB,GAQA,IAAA,IAAA9vB,EAAA,EAAAwL,EAAAiwK,EAAA37K,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAA28K,EAAAjE,GAAA+C,EAAAz7K,IAEA,OAAA28K,GAEAz6F,EAAAn3E,KAAA4xK,EAAAjtK,SAQA,IAAA,IAAA1P,EAAA,EAAAwL,EAAAkwK,EAAA57K,OAAAE,EAAAwL,EAAAxL,IAUA,IARA,IAAAg8K,EAAAN,EAAA17K,GAKAixB,EAAAw7F,GAAAuvD,EAAA/rJ,IACAysJ,EAAA9kB,GAAA3mI,EAAA+qJ,EAAA9qJ,WAEA6C,EAAA,EAAA4jB,EAAA+kI,EAAA58K,OAAAi0B,EAAA4jB,EAAA5jB,IAEAmuD,EAAAn3E,KAAA2xK,EAAA3oJ,IAQA,IAAA,IAAA/zB,EAAA,EAAAwL,EAAAmwK,EAAA77K,OAAAE,EAAAwL,EAAAxL,IAEAkiF,EAAAn3E,KAAA8nK,GAAA8I,EAAA37K,IAAA0P,SAMA,GAAA,IAAAkjK,EAAA9yK,QAAA,IAAAoiF,EAAApiF,OAEAgwB,EAAAoyD,EAAA,OAEA,CAEApyD,EAAA,UAAAplB,EAAA,IAAAshH,EAAAjyB,KAAA,IAAAiyB,EAAA7yC,MAEA,IAAA,IAAAn5E,EAAA,EAAAA,EAAAkiF,EAAApiF,OAAAE,IAEA8vB,EAAAhgB,IAAAoyE,EAAAliF,IAeA,MATA,KAAA8vB,EAAA7vB,OAEA6vB,EAAA7vB,KAAA,UAAAyK,EAAA8nB,EAAAm/I,IAAAn/I,EAAAvyB,MAIA6vB,EAAA7Q,OAAArP,KAAAqP,GACA6Q,EAAA7Q,OAAA6K,UAAAgG,EAAAvG,SAAAuG,EAAA5a,WAAA4a,EAAAzP,OAEAyP,EAIA,IAAA8sJ,GAAA,IAAA5wD,EAAA1+E,mBAAA/E,MAAA,WAEA,SAAAs0I,GAAAzjI,EAAA0jI,GAIA,IAFA,IAAA5rJ,KAEAlxB,EAAA,EAAAwL,EAAA4tC,EAAAt5C,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAiwB,EAAA6sJ,EAAA1jI,EAAAp5C,SAEAQ,IAAAyvB,GAEAlgB,QAAAC,KAAA,gFAAAopC,EAAAp5C,IACAkxB,EAAAnmB,KAAA6xK,KAIA1rJ,EAAAnmB,KAAA2hH,EAAAz8F,IAMA,OAAAiB,EAIA,SAAA0mI,GAAA3mI,EAAA6rJ,GAEA,IAAA56F,KAEA,IAAA,IAAAx3E,KAAAumB,EAAA,CAEA,IAAAc,EAAAd,EAAAvmB,GAEAwmB,EAAA2rJ,GAAA9qJ,EAAA0nJ,aAAAqD,GAIA,IAAA5rJ,EAAApxB,SAEA,UAAA4K,GAAA,eAAAA,EAEAwmB,EAAAnmB,KAAA,IAAAihH,EAAA/mD,mBAIA/zC,EAAAnmB,KAAA,IAAAihH,EAAApnD,oBAQA,IAAAt2B,OAAA9tC,IAAAuxB,EAAAS,KAAAsjB,WAAAm/H,UAEA,GAAA3mI,EAEA,IAAA,IAAAtuC,EAAA,EAAAwL,EAAA0lB,EAAApxB,OAAAE,EAAAwL,EAAAxL,IAEAkxB,EAAAlxB,GAAAsuC,UAAA,EAQA,IAIAxe,EAJAoC,EAAA,IAAAhB,EAAApxB,OAAAoxB,EAAA,GAAAA,EAMA,OAAAxmB,GAEA,IAAA,QACAolB,EAAA,IAAAk8F,EAAA/vB,aAAAlqE,EAAAS,KAAAN,GACA,MAEA,IAAA,aACApC,EAAA,IAAAk8F,EAAA7wB,KAAAppE,EAAAS,KAAAN,GACA,MAEA,IAAA,YACA,IAAA,WAGApC,EAFAwe,EAEA,IAAA09E,EAAA/yB,YAAAlnE,EAAAS,KAAAN,GAIA,IAAA85F,EAAAvxE,KAAA1oB,EAAAS,KAAAN,GAOAgwD,EAAAn3E,KAAA+kB,GAIA,OAAAoyD,EAIA,SAAA25F,GAAA5rJ,GAEA,YAAAzvB,IAAA6wB,GAAAuhJ,MAAA3iJ,GAIA,SAAA4iJ,GAAA5iJ,GAEA,OAAA2jI,EAAAviI,GAAAuhJ,MAAA3iJ,GAAAqiI,IA2BA,SAAAyqB,GAAAvqJ,GAEA,IAAA8hB,EAAA,IAAA03E,EAAA7yC,MACA7kC,EAAAr0C,KAAAuyB,EAAAvyB,KAIA,IAFA,IAAA+sB,EAAAwF,EAAAxF,SAEAhtB,EAAA,EAAAA,EAAAgtB,EAAAltB,OAAAE,IAAA,CAEA,IAAAowB,EAAApD,EAAAhtB,GAEAs0C,EAAAxkC,IAAA+iK,GAAAziJ,EAAAH,KAIA,OAAAqkB,EAUA,SAAA0oI,GAAA/sJ,GAEA,OAAA2jI,EAAAviI,GAAAirJ,aAAArsJ,GAAA8sJ,IAkFA,GAAA,IAAA5vE,EAAArtG,OAEA,OAAA0lD,MAAA,IAAAwmE,EAAAl+F,OAIA,IAAAgjJ,IAAA,IAAAzwD,WAAAC,gBAAAnT,EAAA,mBAEA8vE,GAAApkB,EAAAiY,GAAA,WAAA,GAEAoM,GAAApM,GAAAjY,qBAAA,eAAA,GACA,QAAAr4J,IAAA08K,GAAA,CAIA,IACAC,GADAC,GAAAvkB,EAAAqkB,GAAA,OAAA,GAeA,OAVAC,GAFAC,GAEAA,GAAApsB,YA9CA,SAAAksB,GAEA,IAAAhwG,EAAA,GACAmwG,GAAAH,GAEA,KAAAG,EAAAv9K,QAAA,CAEA,IAAAi9H,EAAAsgD,EAAA/pE,QAEAypB,EAAAy0C,WAAAhrE,KAAA82E,UAEApwG,GAAA6vD,EAAAi0B,aAIA9jF,GAAA,KACAmwG,EAAAtyK,KAAAihF,MAAAqxF,EAAAtgD,EAAAo7B,aAMA,OAAAjrF,EAAAlQ,OA4BAugH,CAAAL,IAIAntK,QAAAmJ,MAAA,uDAAAikK,IAEA,KAMA,IAAA16J,GAAAw6J,GAAA5mI,aAAA,WACAtmC,QAAA5B,IAAA,oCAAAsU,IAEA,IAIAs0J,GAJAyG,GA5oHA,SAAA1M,GAEA,OACAr4G,KAMA,SAAAq4G,GAEA,YAAAtwK,IAAAswK,IAAA,IAAAA,EAAA2M,aAAA,SAEAt0I,WAAA2nI,EAAAz6H,aAAA,UAIA,EAdAqnI,CAAA7kB,EAAAiY,EAAA,QAAA,IACA6M,OAmBA,SAAA7M,GAEA,YAAAtwK,IAAAswK,EAAAA,EAAA9f,YAAA,OArBA4sB,CAAA/kB,EAAAiY,EAAA,WAAA,KAwoHA+M,CAAAhlB,EAAAokB,GAAA,SAAA,IACApwB,GAAA,IAAA7gC,EAAAjO,cAAAv8G,KAAAy7G,SACA4vC,GAAAvvC,QAAA97G,KAAA27G,cAAAx9G,GAAA09G,eAAA77G,KAAA07G,aAIA8O,EAAAwhD,YAEAuJ,GAAA,IAAA/qD,EAAAwhD,UAAAhsK,KAAAy7G,UACAK,QAAA97G,KAAA27G,cAAAx9G,GAMA,IAAAw6G,MACA2jE,MACAzgK,GAAA,EAIAgU,IACA8oF,cACAM,SACAz/B,eACA/2D,UACA0yJ,WACAzlJ,aACA8mD,WACAz1B,UACAtxB,cACA2hJ,SACA0J,gBACAyB,oBACAC,iBACAC,qBAGA9M,EAAA8L,GAAA,qBAAA,YAxmHA,SAAAnM,GAQA,IANA,IAAAt+I,GACA2/I,WACAD,YACAD,aAGAjyK,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAIAiwB,EAJAG,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAIA,OAAAphJ,EAAA6sG,UAEA,IAAA,SACAhtG,EAAAG,EAAAimB,aAAA,MACA7jB,EAAA2/I,QAAAliJ,GAAA+jJ,GAAA5jJ,GACA,MAEA,IAAA,UACAH,EAAAG,EAAAimB,aAAA,MACA7jB,EAAA0/I,SAAAjiJ,GAAAqhJ,EAAAlhJ,GACA,MAEA,IAAA,UACAH,EAAAG,EAAAimB,aAAA,UACA7jB,EAAAy/I,SAAAhiJ,GAAAyhJ,EAAAthJ,GACA,MAEA,QACArgB,QAAA5B,IAAAiiB,IAMAiB,GAAA8oF,WAAA22D,EAAAz6H,aAAA,OAAA7jB,IAikHA2+I,EAAA8L,GAAA,0BAAA,iBA9qGA,SAAAnM,GASA,IAPA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,OAAA,UACA5a,MAAA0N,WAAA2nI,EAAAz6H,aAAA,UAAA,GACAxa,IAAAsN,WAAA2nI,EAAAz6H,aAAA,QAAA,GACA8jE,eAGAn6G,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,qBACAzqG,EAAA2nF,WAAApvG,KAAAmmK,EAAA9gJ,EAAAimB,aAAA,UAOAhlB,GAAAopF,MAAAq2D,EAAAz6H,aAAA,OAAA7jB,IAspGA2+I,EAAA8L,GAAA,sBAAA,aAlnGA,SAAAnM,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,OAEAzqG,EAAAvC,GAAAihJ,EAAA9gJ,EAAAimB,aAAA,WACA7jB,EAAA+hJ,KAAAT,EAAA1jJ,GACA,MAEA,IAAA,QACAoC,EAAAvC,GAAAihJ,EAAA9gJ,EAAAimB,aAAA,WACAtmC,QAAAC,KAAA,mEAOAqhB,GAAA2pD,YAAA81F,EAAAz6H,aAAA,OAAA7jB,IAwlGA2+I,EAAA8L,GAAA,iBAAA,QA31FA,SAAAnM,GAEA,IAAAt+I,GACA+iJ,UAAA1c,EAAAiY,EAAA,aAAA,GAAA9f,aAGA3/H,GAAApN,OAAA6sJ,EAAAz6H,aAAA,OAAA7jB,IAs1FA2+I,EAAA8L,GAAA,kBAAA,SAxzFA,SAAAnM,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,iBACAzqG,EAAAokJ,QAAAnB,EAAArlJ,IAOAiB,GAAAslJ,QAAA7F,EAAAz6H,aAAA,OAAA7jB,IAqyFA2+I,EAAA8L,GAAA,oBAAA,WA57EA,SAAAnM,GAMA,IAJA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,SAGAr2C,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,kBACAzqG,EAAAtO,IAAAgtJ,EAAA9gJ,EAAAimB,aAAA,SAOAhlB,GAAAH,UAAA4/I,EAAAz6H,aAAA,OAAA7jB,IAu6EA2+I,EAAA8L,GAAA,kBAAA,SAtrEA,SAAAnM,GAMA,IAJA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,SAGAr2C,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,SACAzqG,EAAAslJ,OAAAJ,EAAAtnJ,IAOAiB,GAAA2mD,QAAA84F,EAAAz6H,aAAA,OAAA7jB,IAiqEA2+I,EAAA8L,GAAA,iBAAA,QArhEA,SAAAnM,GAIA,IAFA,IAAAt+I,KAEAxyB,EAAA,EAAAwL,EAAAslK,EAAA3Y,WAAAr4J,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,mBACAzqG,EAAA8lJ,EAAAloJ,IAOAiB,GAAAkxB,OAAAuuH,EAAAz6H,aAAA,OAAA7jB,IAkgEA2+I,EAAA8L,GAAA,qBAAA,WA/4DA,SAAAnM,GAEA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,QACA87H,WACAliI,YACAipI,eAGA56H,EAAAu6G,EAAAiY,EAAA,QAAA,GAGA,QAAAtwK,IAAA89C,EAAA,OAEA,IAAA,IAAAt+C,EAAA,EAAAA,EAAAs+C,EAAA65G,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAAkuB,EAAA65G,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAAA,CAEA,IAAAvhJ,EAAAG,EAAAimB,aAAA,MAEA,OAAAjmB,EAAA6sG,UAEA,IAAA,SACAzqG,EAAA2/I,QAAAliJ,GAAA+jJ,GAAA5jJ,GACA,MAEA,IAAA,WAEAoC,EAAAyd,SAAA2oI,GAAAxoJ,GACA,MAEA,IAAA,WACArgB,QAAAC,KAAA,oDAAAogB,EAAA6sG,UACA,MAEA,IAAA,QACA,IAAA,aACA,IAAA,WACA,IAAA,YACAzqG,EAAA0mJ,WAAAnuK,KAAA8tK,GAAAzoJ,IACA,MAEA,QACArgB,QAAA5B,IAAAiiB,KAMAiB,GAAAJ,WAAA6/I,EAAAz6H,aAAA,OAAA7jB,IA61DA2+I,EAAA8L,GAAA,gBAAA,OAAA3B,IACAnK,EAAA8L,GAAA,wBAAA,eAzNA,SAAAnM,GAEA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,QACArpB,cAnkBA,SAAA8jJ,GAMA,IAJA,IAAA9/J,EAAA8/J,EAAAjY,qBAAA,QAIA74J,EAAA,EAAAA,EAAAgR,EAAAlR,OAAAE,IAAA,CAEA,IAAAsxB,EAAAtgB,EAAAhR,IAEA,IAAAsxB,EAAAmsJ,aAAA,OAEAnsJ,EAAAglB,aAAA,KA57FA,iBAAAj5B,OAs/GA6gK,CAAApN,GAIA,IAFA,IAAA9/J,EAAA6nJ,EAAAiY,EAAA,QAEA9wK,EAAA,EAAAA,EAAAgR,EAAAlR,OAAAE,IAEAwyB,EAAAxF,SAAAjiB,KAAAuwK,GAAAtqK,EAAAhR,KAIAqxB,GAAAirJ,aAAAxL,EAAAz6H,aAAA,OAAA7jB,IAyMA2+I,EAAA8L,GAAA,4BAAA,mBA34CA,SAAAnM,GAQA,IANA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,SAAA,GACA49H,UACAiG,UAGAl6K,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,mBACA+8C,GAAA5pJ,EAAAoC,IAOAnB,GAAA0sJ,iBAAAjN,EAAAz6H,aAAA,OAAA7jB,IAo3CA2+I,EAAA8L,GAAA,yBAAA,gBAlpCA,SAAAnM,GAOA,IALA,IAAAt+I,GACAvyB,KAAA6wK,EAAAz6H,aAAA,SAAA,GACA8nI,gBAGAn+K,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,aACAzqG,EAAA2rJ,YAAA/tJ,EAAAimB,aAAA,YACAwkI,GAAAzqJ,EAAAoC,EAAA2rJ,YAAA/tJ,EAAAimB,aAAA,WAOAhlB,GAAA2sJ,cAAAlN,EAAAz6H,aAAA,OAAA7jB,IA2nCA2+I,EAAA8L,GAAA,QAAA,4BAzkCA,SAAAnM,GAMA,IAJA,IAAAt+I,GACA4rJ,kBAGAp+K,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,kBACAzqG,EAAA4rJ,cAAArzK,KAAAkwK,GAAA7qJ,KAOAiB,GAAA4sJ,iBAAA/M,EAAAJ,EAAAz6H,aAAA,SAAA7jB,IAqjCA6+I,EAAAhgJ,GAAA8oF,WAAA63D,GACAX,EAAAhgJ,GAAAopF,MAAAk5D,GACAtC,EAAAhgJ,GAAA2pD,YAAAs5F,GACAjD,EAAAhgJ,GAAApN,OAAAqxJ,GACAjE,EAAAhgJ,GAAAslJ,QAAAH,GACAnF,EAAAhgJ,GAAAH,UAAAulJ,GACApF,EAAAhgJ,GAAA2mD,QAAA6/F,GACAxG,EAAAhgJ,GAAAkxB,OAAAk2H,IACApH,EAAAhgJ,GAAAJ,WAAAmoJ,IACA/H,EAAAhgJ,GAAAirJ,aAAAS,IA1KA,WAEA,IAAAtiE,EAAAppF,GAAAopF,MAEA,IAAA,IAAAllF,EAAAklF,IAEA,IAAA,IAAAllF,EAAAlE,GAAA8oF,YAAA,CAIA,IAAAlH,KAEA,IAAA,IAAAhjF,KAAAoB,GAAA8oF,WAIA,IAFA,IAAAy5D,EAAAjB,EAAA1iJ,GAEAjwB,EAAA,EAAAwL,EAAAooK,EAAA9zK,OAAAE,EAAAwL,EAAAxL,IAEAizG,EAAAloG,KAAA6oK,EAAA5zK,IAMAm6G,GAAApvG,KAAA,IAAAihH,EAAA9W,cAAA,WAAA,EAAAjC,UAMA,IAAA,IAAAhjF,KAAAwqF,EAEAN,GAAApvG,KAAA8oK,EAAA5jJ,IA4IAouJ,GAjhCA,WAEA,IAAAC,EAAAj9K,OAAA+3C,KAAA/nB,GAAA0sJ,kBAAA,GACAQ,EAAAl9K,OAAA+3C,KAAA/nB,GAAA4sJ,kBAAA,GACAO,EAAAn9K,OAAA+3C,KAAA/nB,GAAAirJ,cAAA,GAEA,QAAA97K,IAAA89K,QAAA99K,IAAA+9K,EAAA,OASA,IAPA,IAAAE,GA7WAxuJ,EA6WAquJ,EA3WA1qB,EAAAviI,GAAA0sJ,iBAAA9tJ,GAAA8pJ,KA4WA2E,EAfA,SAAAzuJ,GAEA,OAAA2jI,EAAAviI,GAAA4sJ,iBAAAhuJ,GAAAorJ,IAaAsD,CAAAJ,GACAhC,EAAAS,GAAAwB,GAEAJ,EAAAM,EAAAN,cACAQ,KAEA5+K,EAAA,EAAAwL,EAAA4yK,EAAAt+K,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAA+V,EAAAqoK,EAAAp+K,GAIA6+K,EAAA5B,GAAAntB,cAAA,SAAA/5I,EAAAnU,OAAA,MAEA,GAAAi9K,EAAA,CAIA,IAAAC,EAAAD,EAAAE,cAIA1qD,EAAAt+G,EAAAqlK,WAAA0D,IApYA,IAAA7uJ,EA0YA,SAAAokG,EAAA+mD,EAAA4D,GAEA,IAAAC,EAAAD,EAAA3oI,aAAA,QACAukI,EAAA6D,EAAAxK,OAAAmH,GAEAmB,EAAA5rJ,SAAA,SAAAb,GAEAA,EAAA7vB,OAAAg/K,IAEAL,EAAAxD,IACAtrJ,OAAAA,EACAgjJ,WAgIA,SAAA/1C,GAMA,IAJA,IAAA+1C,KAEAhC,EAAAmM,GAAAntB,cAAA,QAAA/yB,EAAA9sG,GAAA,MAEAjwB,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAowB,EAAA0gJ,EAAA3Y,WAAAn4J,GAEA,GAAA,IAAAowB,EAAAohJ,SAEA,OAAAphJ,EAAA6sG,UAEA,IAAA,SACA,IAAA3xH,EAAA0lK,EAAA5gJ,EAAA4gI,aACA/xI,GAAA,IAAA+sG,EAAAxmG,SAAA5S,UAAAtH,GAAAoU,YACAozJ,EAAA/nK,MACA4mK,IAAAvhJ,EAAAimB,aAAA,OACA3rC,KAAA0lB,EAAA6sG,SACA58H,IAAA4e,IAEA,MAEA,IAAA,YACA,IAAA,QACA,IAAA3T,EAAA0lK,EAAA5gJ,EAAA4gI,aACAvhI,GAAA,IAAAu8F,EAAApzG,SAAAhG,UAAAtH,GACAwnK,EAAA/nK,MACA4mK,IAAAvhJ,EAAAimB,aAAA,OACA3rC,KAAA0lB,EAAA6sG,SACA58H,IAAAovB,IAEA,MAEA,IAAA,SACA,IAAAnkB,EAAA0lK,EAAA5gJ,EAAA4gI,aACAvhI,GAAA,IAAAu8F,EAAApzG,SAAAhG,UAAAtH,GACAyG,EAAAi6G,EAAAm+B,UAAAv8I,SAAAtC,EAAA,IACAwnK,EAAA/nK,MACA4mK,IAAAvhJ,EAAAimB,aAAA,OACA3rC,KAAA0lB,EAAA6sG,SACA58H,IAAAovB,EACA1d,MAAAA,KAQA,OAAA+gK,EAnLAoM,CAAAF,GACApE,MAAAA,EACArxJ,SAAAqxJ,EAAAL,iBASA,IAAA4E,EAAA,IAAAnzD,EAAAxmG,QAEAs4J,IAEA7J,OAAAwK,GAAAA,EAAAxK,OAEAmL,cAAA,SAAAhE,GAEA,IAAAiE,EAAAT,EAAAxD,GAEA,GAAAiE,EAEA,OAAAA,EAAA91J,SAIAxZ,QAAAC,KAAA,8BAAAorK,EAAA,oBAMAkE,cAAA,SAAAlE,EAAAt6K,GAEA,IAAAu+K,EAAAT,EAAAxD,GAEA,GAAAiE,EAAA,CAEA,IAAAzE,EAAAyE,EAAAzE,MAEA,GAAA95K,EAAA85K,EAAAP,OAAA7tK,KAAA1L,EAAA85K,EAAAP,OAAA9tK,IAEAwD,QAAAC,KAAA,8BAAAorK,EAAA,UAAAt6K,EAAA,4BAAA85K,EAAAP,OAAA9tK,IAAA,UAAAquK,EAAAP,OAAA7tK,IAAA,WAEA,GAAAouK,EAAAN,OAEAvqK,QAAAC,KAAA,8BAAAorK,EAAA,mBAEA,CAEA,IAAAtrJ,EAAAuvJ,EAAAvvJ,OACA/Z,EAAA6kK,EAAA7kK,KACA+8J,EAAAuM,EAAAvM,WAEA7zJ,GAAAhC,WAIA,IAAA,IAAAjd,EAAA,EAAAA,EAAA8yK,EAAAhzK,OAAAE,IAAA,CAEA,IAAAugF,EAAAuyF,EAAA9yK,GAIA,GAAAugF,EAAAoxF,MAAA,IAAApxF,EAAAoxF,IAAA7mK,QAAAswK,GAEA,OAAAR,EAAAlwK,MAEA,IAAA,WACAuU,GAAAvO,SAAAyuK,EAAA/1J,iBAAArT,EAAAi2G,EAAAm+B,UAAAv8I,SAAA9M,KACA,MAEA,IAAA,YACAme,GAAAvO,SAAAyuK,EAAAn2J,gBAAAjT,EAAA7U,EAAAJ,EAAAiV,EAAA7I,EAAApM,EAAAiV,EAAAvH,EAAA1N,IACA,MAEA,QACAiP,QAAAC,KAAA,4CAAA4qK,EAAAlwK,WAOA,OAAA61E,EAAA71E,MAEA,IAAA,SACAuU,GAAAvO,SAAA6vE,EAAAlgF,KACA,MAEA,IAAA,YACA4e,GAAAvO,SAAAyuK,EAAAn2J,gBAAAu3D,EAAAlgF,IAAAa,EAAAq/E,EAAAlgF,IAAA6M,EAAAqzE,EAAAlgF,IAAAmO,IACA,MAEA,IAAA,QACAyQ,GAAAoB,MAAAkgE,EAAAlgF,KACA,MAEA,IAAA,SACA4e,GAAAvO,SAAAyuK,EAAA/1J,iBAAAm3D,EAAAlgF,IAAAkgF,EAAAxuE,SASA+d,EAAA7Q,OAAArP,KAAAqP,IACA6Q,EAAA7Q,OAAA6K,UAAAgG,EAAAvG,SAAAuG,EAAA5a,WAAA4a,EAAAzP,OAEAu+J,EAAAxD,GAAA7xJ,SAAAzoB,QAMAiP,QAAA5B,IAAA,wBAAAitK,EAAA,sBA42BAmE,GAEA,IAAA/5H,GAtLA,SAAAsrH,GAGA,OAAAkM,GAAA9L,EADArY,EAAAiY,EAAA,yBAAA,GACAz6H,aAAA,SAmLAmpI,CAAA3mB,EAAAokB,GAAA,SAAA,IAUA,MARA,SAAAO,GAAAG,QAEAn4H,GAAAtwC,WAAAC,aAAA,IAAA62G,EAAAphG,OAAAjqB,KAAAiL,GAAA,EAAA,EAAA,IAIA45C,GAAAnlC,MAAA1P,eAAA6sK,GAAA/kH,OAGA0hD,WAAAA,GACA2jE,WAAAA,GACAzsJ,QAAAA,GACAm0B,MAAAA,OAOAwmE,EAAA4kD,gBAGAnxK,EAAA,0CACA,mBACA,SAAAusH,GAwqBA,OAnqBAA,EAAAyzD,YAAA,SAAAxiE,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAk+K,YAAA,GACAl+K,KAAAm+K,iBACAn+K,KAAAo+K,cAAA,KACAp+K,KAAAq+K,eAAA,KAEAr+K,KAAAs+K,YAAA,EACAt+K,KAAAu+K,cACAv+K,KAAAw+K,iBAAA,EACAx+K,KAAAy+K,gBAAA,GAEAz+K,KAAA0+K,qBACA32J,SAAA,WACArO,OAAA,SACAqtB,MAAA,QACAhkB,GAAA,aAEA/iB,KAAA2+K,uBACA52J,SAAA,eACArO,OAAA,eACAqtB,MAAA,eACAhkB,GAAA,iBAKAynG,EAAAyzD,YAAAr+K,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAyzD,YAEAW,eAAA,SAAAzgL,GAIA,OAFA6B,KAAAk+K,YAAA//K,EAEA6B,MAIA6+K,iBAAA,SAAAC,GAIA,OAFA9+K,KAAAm+K,cAAAW,EAEA9+K,MAIA++K,eAAA,SAAAT,GAIA,OAFAt+K,KAAAs+K,YAAAA,EAEAt+K,MAKAg/K,aAAA,WAEAzwK,QAAAC,KAAA,oEAKAmrC,YAAA,WAEAprC,QAAAC,KAAA,mEAKAywK,sBAAA,WAEA1wK,QAAAC,KAAA,6EAIAotG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAc,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SAEAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAsE,gBAAA,eAEA,oBAAAz/G,KAAA07G,aAEAP,EAAAuE,oBAAA,GAIAvE,EAAAS,KAAAl5F,EAAAywC,IAEA,IAAA+rH,GACAC,aAAAn/K,KAAA0+K,oBACAU,eAAAp/K,KAAA2+K,sBACAU,cAAA,GAGAr/K,KAAAs/K,eAAAnsH,EAAA+rH,GACAxgG,KAAAy7B,GACA4S,MAAA1S,IAEAD,EAAAC,IAKAklE,gBAAA,SAAApsH,EAAAj8C,EAAAioK,EAAAC,GAEA,IAAAF,GACAC,aAAAA,GAAAn/K,KAAA0+K,oBACAU,eAAAA,GAAAp/K,KAAA2+K,sBACAU,eAAAF,GAGAn/K,KAAAs/K,eAAAnsH,EAAA+rH,GAAAxgG,KAAAxnE,IAIAooK,eAAA,SAAAnsH,EAAA+rH,GAKA,IAAA,IAAA1tK,KAAA0tK,EAAAE,eAAA,CAEA,IAAAl2K,EAAAg2K,EAAAE,eAAA5tK,QAEAxS,IAAAkK,EAAAwqD,oBAEAwrH,EAAAE,eAAA5tK,GAAAtI,EAAAzK,MAQA,IA+BA+gL,EA/BAC,EAAA1vJ,KAAAC,UAAAkvJ,GAIA,GAAA10D,EAAAyzD,YAAAyB,UAAAxzF,IAAA/4B,GAAA,CAEA,IAAAwsH,EAAAn1D,EAAAyzD,YAAAyB,UAAA3/K,IAAAozD,GAEA,GAAAwsH,EAAA5uJ,MAAA0uJ,EAEA,OAAAE,EAAAC,QAEA,GAAA,IAAAzsH,EAAA0sH,WAMA,MAAA,IAAA7xK,MAEA,iHAYA,IAAA8xK,EAAA9/K,KAAAw+K,mBACAuB,EAAA5sH,EAAA0sH,WAIAG,EAAAhgL,KAAAigL,WAAAH,EAAAC,GACArhG,KAAAwhG,IAEAV,EAAAU,EAEA,IAAAC,QAAA,CAAAC,EAAAC,KAEAb,EAAAc,WAAAR,IAAAM,QAAAA,EAAAC,OAAAA,GAEAb,EAAAe,aAAAr3K,KAAA,SAAAulB,GAAAqxJ,EAAAZ,WAAAA,EAAA/rH,OAAAA,IAAAA,QAOAurB,KAAA4F,GAAAtkF,KAAAwgL,gBAAAl8F,EAAA/zD,WAwBA,OArBAyvJ,EACAS,QAAA,KAEAjB,GAAAM,GAEA9/K,KAAA0gL,aAAAlB,EAAAM,KASAt1D,EAAAyzD,YAAAyB,UAAAlyK,IAAA2lD,GAEApiC,IAAA0uJ,EACAG,QAAAI,IAIAA,GAIAQ,gBAAA,SAAAG,GAEA,IAAApwJ,EAAA,IAAAi6F,EAAAn2E,eAEAssI,EAAApgL,OAEAgwB,EAAAqkB,SAAA,IAAA41E,EAAAv9E,gBAAA0zI,EAAApgL,MAAAuJ,MAAA,IAIA,IAAA,IAAAtL,EAAA,EAAAA,EAAAmiL,EAAArsI,WAAAh2C,OAAAE,IAAA,CAEA,IAAAgT,EAAAmvK,EAAArsI,WAAA91C,GACAC,EAAA+S,EAAA/S,KACAqL,EAAA0H,EAAA1H,MACAojC,EAAA17B,EAAA07B,SAEA3c,EAAAukB,aAAAr2C,EAAA,IAAA+rH,EAAAv9E,gBAAAnjC,EAAAojC,IAIA,OAAA3c,GAIAqwJ,aAAA,SAAAl+J,EAAA+7F,GAEA,IAAAtD,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SAIA,OAHAN,EAAAW,QAAA97G,KAAAk+K,aACA/iE,EAAAsE,gBAAAhB,GAEA,IAAA0hE,QAAA,CAAAC,EAAAC,KAEAllE,EAAAS,KAAAl5F,EAAA09J,OAAAphL,EAAAqhL,MAMAQ,QAAA,WAIA,OAFA7gL,KAAA8gL,eAEA9gL,MAIA8gL,aAAA,WAEA,GAAA9gL,KAAAq+K,eAAA,OAAAr+K,KAAAq+K,eAEA,IAAA0C,EAAA,iBAAAC,aAAA,OAAAhhL,KAAAm+K,cAAAj1K,KACA+3K,KAsCA,OApCAF,EAEAE,EAAA13K,KAAAvJ,KAAA4gL,aAAA,mBAAA,UAIAK,EAAA13K,KAAAvJ,KAAA4gL,aAAA,wBAAA,SACAK,EAAA13K,KAAAvJ,KAAA4gL,aAAA,qBAAA,iBAIA5gL,KAAAq+K,eAAA8B,QAAAe,IAAAD,GACAviG,KAAAyiG,IAEA,IAAAC,EAAAD,EAAA,GAEAJ,IAEA/gL,KAAAm+K,cAAAkD,WAAAF,EAAA,IAIA,IAAAG,EAAA92D,EAAAyzD,YAAAsD,YAAAthL,WAEAuhL,GACA,sBACAJ,EACA,GACA,eACAE,EAAA5xD,UAAA4xD,EAAAh4K,QAAA,KAAA,EAAAg4K,EAAAn4D,YAAA,OACAvkE,KAAA,MAEA5kD,KAAAy+K,gBAAA7sB,IAAAC,gBAAA,IAAAlzC,MAAA6iE,OAIAxhL,KAAAq+K,gBAIA4B,WAAA,SAAAH,EAAAC,GAEA,OAAA//K,KAAA8gL,eAAApiG,KAAA,KAEA,GAAA1+E,KAAAu+K,WAAAjgL,OAAA0B,KAAAs+K,YAAA,CAEA,IAAAkB,EAAA,IAAAiC,OAAAzhL,KAAAy+K,iBAEAe,EAAAc,cACAd,EAAAkC,cACAlC,EAAAmC,UAAA,EAEAnC,EAAAe,aAAAr3K,KAAA,OAAAi1K,cAAAn+K,KAAAm+K,gBAEAqB,EAAAoC,UAAA,SAAAryK,GAEA,IAAA+0E,EAAA/0E,EAAAyhB,KAEA,OAAAszD,EAAAp7E,MAEA,IAAA,SACAs2K,EAAAc,WAAAh8F,EAAA71D,IAAA2xJ,QAAA97F,GACA,MAEA,IAAA,QACAk7F,EAAAc,WAAAh8F,EAAA71D,IAAA4xJ,OAAA/7F,GACA,MAEA,QACA/1E,QAAAmJ,MAAA,2CAAA4sE,EAAAp7E,KAAA,OAMAlJ,KAAAu+K,WAAAh1K,KAAAi2K,QAIAx/K,KAAAu+K,WAAA/gI,KAAA,SAAA5uC,EAAAC,GAEA,OAAAD,EAAA+yK,UAAA9yK,EAAA8yK,WAAA,EAAA,IAMA,IAAAnC,EAAAx/K,KAAAu+K,WAAAv+K,KAAAu+K,WAAAjgL,OAAA,GAGA,OAFAkhL,EAAAkC,WAAA5B,GAAAC,EACAP,EAAAmC,WAAA5B,EACAP,KAMAkB,aAAA,SAAAlB,EAAAM,GAEAN,EAAAmC,WAAAnC,EAAAkC,WAAA5B,UACAN,EAAAc,WAAAR,UACAN,EAAAkC,WAAA5B,IAIA3+G,MAAA,WAEA5yD,QAAA5B,IAAA,cAAA3M,KAAAu+K,WAAAxyI,IAAAyzI,GAAAA,EAAAmC,aAIA9+J,QAAA,WAEA,IAAA,IAAArkB,EAAA,EAAAA,EAAAwB,KAAAu+K,WAAAjgL,SAAAE,EAEAwB,KAAAu+K,WAAA//K,GAAAqjL,YAMA,OAFA7hL,KAAAu+K,WAAAjgL,OAAA,EAEA0B,QAQAwqH,EAAAyzD,YAAAsD,YAAA,WAEA,IAAApD,EACAE,EAkKA,SAAAyD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3wK,GAEA,IAGA4wK,EAEAt4K,EALAu4K,EAAA7wK,EAAA8wK,iBACAC,EAAAN,EAAAO,aACAC,EAAAF,EAAAF,EAKA,OAAAF,GAEA,KAAA9zI,aACA+zI,EAAA,IAAAL,EAAAW,kBACAV,EAAAW,8BAAAV,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAAukC,aAAAo0I,GACA,MAEA,KAAAl1I,UACA60I,EAAA,IAAAL,EAAAa,eACAZ,EAAAa,6BAAAZ,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAAyjC,UAAAk1I,GACA,MAEA,KAAA50I,WACAu0I,EAAA,IAAAL,EAAAe,gBACAd,EAAAe,8BAAAd,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAA+jC,WAAA40I,GACA,MAEA,KAAAx0I,WACAm0I,EAAA,IAAAL,EAAAiB,gBACAhB,EAAAiB,8BAAAhB,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAAmkC,WAAAw0I,GACA,MAEA,KAAAh1I,WACA20I,EAAA,IAAAL,EAAAmB,gBACAlB,EAAAmB,8BAAAlB,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAA2jC,WAAAg1I,GACA,MAEA,KAAA10I,YACAq0I,EAAA,IAAAL,EAAAqB,iBACApB,EAAAqB,+BAAApB,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAAikC,YAAA00I,GACA,MAEA,KAAAt0I,YACAi0I,EAAA,IAAAL,EAAAuB,iBACAtB,EAAAuB,+BAAAtB,EAAAzwK,EAAA4wK,GACAt4K,EAAA,IAAAqkC,YAAAs0I,GACA,MAEA,QACA,MAAA,IAAAz0K,MAAA,iDAIA,IAAA,IAAAxP,EAAA,EAAAA,EAAAikL,EAAAjkL,IAEAsL,EAAAtL,GAAA4jL,EAAAoB,SAAAhlL,GAMA,OAFAujL,EAAAz/G,QAAA8/G,IAGA3jL,KAAAyjL,EACAp4K,MAAAA,EACAojC,SAAAm1I,GArOAT,UAAA,SAAAryK,GAEA,IAAA+0E,EAAA/0E,EAAAyhB,KAEA,OAAAszD,EAAAp7E,MAEA,IAAA,OACAi1K,EAAA75F,EAAA65F,cACAE,EAAA,IAAA8B,QAAA,SAAAC,GAEAjC,EAAAsF,eAAA,SAAA1B,GAGA3B,GAAA2B,MAAAA,KAIA2B,mBAAAvF,KAGA,MAEA,IAAA,SACA,IAAAhrH,EAAAmxB,EAAAnxB,OACA+rH,EAAA56F,EAAA46F,WACAb,EAAA3/F,KAAAilG,SAEA,IAAA5B,EAAA4B,OAAA5B,MACAC,EAAA,IAAAD,EAAA6B,QACAC,EAAA,IAAA9B,EAAA+B,cACAD,EAAAE,KAAA,IAAAx2I,UAAA4lB,GAAAA,EAAA0sH,YAEA,IAEA,IAAAtvJ,EA4BA,SAAAwxJ,EAAAC,EAAA6B,EAAA3E,GAEA,IAGA+C,EACA+B,EAJA7E,EAAAD,EAAAC,aACAC,EAAAF,EAAAE,eAKA6E,EAAAjC,EAAAkC,uBAAAL,GAEA,GAAAI,IAAAlC,EAAAoC,gBAEAlC,EAAA,IAAAF,EAAA9oI,KACA+qI,EAAAhC,EAAAoC,mBAAAP,EAAA5B,OAEA,CAAA,GAAAgC,IAAAlC,EAAAsC,YAOA,MAAA,IAAAr2K,MAAA,gDALAi0K,EAAA,IAAAF,EAAAzjD,WACA0lD,EAAAhC,EAAAsC,yBAAAT,EAAA5B,GAQA,IAAA+B,EAAAO,MAAA,IAAAtC,EAAAuC,IAEA,MAAA,IAAAx2K,MAAA,uCAAAg2K,EAAAS,aAIA,IAAAl0J,GAAAhwB,MAAA,KAAA+zC,eAGA,IAAA,IAAA4tI,KAAA/C,EAAA,CAEA,IAEA3tK,EACAkzK,EAHAvC,EAAAwC,KAAAvF,EAAA8C,IASA,GAAAhD,EAAAG,aAEAqF,EAAAvF,EAAA+C,GACA1wK,EAAAwwK,EAAA4C,uBAAA3C,EAAAyC,OAEA,CAIA,IAAA,KAFAA,EAAA1C,EAAA6C,eAAA5C,EAAAF,EAAA5C,EAAA+C,MAEA,SAEA1wK,EAAAwwK,EAAA8C,aAAA7C,EAAAyC,GAIAn0J,EAAA+jB,WAAA/qC,KAAAu4K,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3wK,IAKA,GAAAyyK,IAAAlC,EAAAoC,gBAAA,CAQA,IALA,IAAAY,EAAA9C,EAAA+C,YACAC,EAAA,EAAAF,EACAxkL,EAAA,IAAA4tC,YAAA82I,GACAr2E,EAAA,IAAAmzE,EAAAiB,gBAEAxkL,EAAA,EAAAA,EAAAumL,IAAAvmL,EAAA,CAEAwjL,EAAAkD,gBAAAjD,EAAAzjL,EAAAowG,GAEA,IAAA,IAAAr8E,EAAA,EAAAA,EAAA,IAAAA,EAEAhyB,EAAA,EAAA/B,EAAA+zB,GAAAq8E,EAAA40E,SAAAjxJ,GAMAhC,EAAAhwB,OAAAuJ,MAAAvJ,EAAA2sC,SAAA,GAEA60I,EAAAz/G,QAAAssC,GAMA,OAFAmzE,EAAAz/G,QAAA2/G,GAEA1xJ,EA1HA+uJ,CAAAyC,EAAAC,EAAA6B,EAAA3E,GAEAnsH,EAAAxiC,EAAA+jB,WAAAvI,IAAAypH,GAAAA,EAAA1rJ,MAAAqpD,QAEA5iC,EAAAhwB,OAAAwyD,EAAAxpD,KAAAgnB,EAAAhwB,MAAAuJ,MAAAqpD,QAEAwxH,KAAApE,aAAAr3K,KAAA,SAAAulB,GAAA61D,EAAA71D,GAAA8B,SAAAA,GAAAwiC,GAEA,MAAAr7C,GAEAnJ,QAAAmJ,MAAAA,GAEAitK,KAAApE,aAAAr3K,KAAA,QAAAulB,GAAA61D,EAAA71D,GAAA/W,MAAAA,EAAA4sE,UAEA,QAEAy9F,EAAAz/G,QAAAuhH,GACA9B,EAAAz/G,QAAA0/G,SAyLAx3D,EAAAyzD,YAAAyB,UAAA,IAAA1sH,QAKAw3D,EAAAyzD,YAAAW,eAAA,WAEArwK,QAAAC,KAAA,4FAKAg8G,EAAAyzD,YAAAY,iBAAA,WAEAtwK,QAAAC,KAAA,8FAKAg8G,EAAAyzD,YAAAkH,qBAAA,WAEA52K,QAAAC,KAAA,kGAKAg8G,EAAAyzD,YAAAmH,iBAAA,WAEA72K,QAAAC,KAAA,8FAIAg8G,EAAAyzD,cAGAhgL,EAAA,wCACA,kBACA,wBACA,SAAAusH,EAAAi7B,EAAA4/B,GAmhIA,OA7/HA76D,EAAA86D,UAAA,WAEA,IAAAC,EACAC,EACAC,EAEA,SAAAH,EAAA7pE,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GA6EA,SAAAiqE,EAAAr6B,EAAA5vC,GAEAz7G,KAAAqrJ,cAAAA,EACArrJ,KAAAy7G,QAAAA,EA41CA,SAAAkqE,KAk0BA,SAAAC,KAukBA,SAAAC,KAkVA,SAAAC,KAwUA,SAAAC,EAAA5yH,EAAAizG,GAEApmK,KAAAgmL,GAAA,IAAAt1E,SAAAv9C,GACAnzD,KAAAqR,OAAA,EACArR,KAAAomK,kBAAApnK,IAAAonK,GAAAA,EAmPA,SAAA6f,KAsDA,SAAAC,EAAAv6E,GAEA,IACAzrG,EAAAyrG,EAAAzrG,MADA,qBAEA,GAAAA,EAAA,CAEA,IAAA+gB,EAAA6mB,SAAA5nC,EAAA,IACA,OAAA+gB,EAGA,MAAA,IAAAjT,MAAA,uEAKA,SAAAm4K,EAAA5zH,GAEA,OAAAA,EAAA,WAzwHA+yH,EAAA1lL,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAm3K,EAEA1pE,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAsqE,EAAA3kL,KAEA7B,EAAA,KAAAwmL,EAAAxmL,KAAAqsH,EAAA5B,YAAAM,eAAAxmG,GAAAiiK,EAAAxmL,KAEAg9G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA6oE,EAAAxmL,MACAg9G,EAAAsE,gBAAA,eAEAtE,EAAAS,KAAAl5F,EAAA,SAAAywC,GAEA,IAEAgnD,EAAAwqE,EAAAzzJ,MAAAiiC,EAAAh1D,IAEA,MAAAuZ,GAEAwmG,WAAA,WAEA7D,GAAAA,EAAA3iG,GAEAitK,EAAAlpE,QAAAX,UAAAp4F,IAEA,KAIA03F,EAAAC,IAIAnpF,MAAA,SAAAk1J,EAAAjoL,GAEA,GA8qHAkoL,EAAA,0BAFAlzH,EA5qHAizH,GAgrHAvG,YAAAwG,EAAA/nL,QAAA+nL,IAAAC,EAAAnzH,EAAA,EAAAkzH,EAAA/nL,QA9qHAinL,GAAA,IAAAO,GAAA50J,MAAAk1J,OAEA,CAEA,IAAAG,EAAAD,EAAAF,GAEA,IA4qHA,SAAAz6E,GAEA,IAAA06E,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,MAEAG,EAAA,EAEA,SAAAC,EAAAp1K,GAEA,IAAAq6D,EAAAigC,EAAAt6F,EAAA,GAGA,OAFAs6F,EAAAA,EAAA5hG,MAAAy8K,EAAAn1K,GACAm1K,IACA96G,EAIA,IAAA,IAAAltE,EAAA,EAAAA,EAAA6nL,EAAA/nL,SAAAE,EAAA,CAEA,IAAAkoL,EAAAD,EAAA,GACA,GAAAC,IAAAL,EAAA7nL,GAEA,OAAA,EAMA,OAAA,EAtsHAmoL,CAAAJ,GAEA,MAAA,IAAAv4K,MAAA,oCAIA,GAAAk4K,EAAAK,GAAA,IAEA,MAAA,IAAAv4K,MAAA,4DAAAk4K,EAAAK,IAIAhB,GAAA,IAAAM,GAAA30J,MAAAq1J,GAwpHA,IAAApzH,EAEAkzH,EAppHAh7B,EAAA,IAAA7gC,EAAAjO,cAAAv8G,KAAAy7G,SAAAK,QAAA97G,KAAA27G,cAAAx9G,GAAA09G,eAAA77G,KAAA07G,aAEA,OAAA,IAAAgqE,EAAAr6B,EAAArrJ,KAAAy7G,SAAAvqF,MAAAq0J,MAcAG,EAAA9lL,WAEAuO,YAAAu3K,EAEAx0J,MAAA,WAEAs0J,EAAAxlL,KAAA4mL,mBAEA,IAAAnkK,EAAAziB,KAAAgqH,cACA3nG,EAAAriB,KAAAiqH,cAAAxnG,GACAiN,EAAA1vB,KAAAkqH,eAAA7nG,GACAwkK,EAAA7mL,KAAA8mL,iBACAC,GAAA,IAAApB,GAAAz0J,MAAA21J,GAIA,OAFA7mL,KAAAg+K,WAAA6I,EAAAE,EAAAr3J,GAEA+1J,GAMAmB,iBAAA,WAEA,IAAAI,EAAA,IAAAC,IAEA,GAAA,gBAAA1B,EAAA,CAEA,IAAA2B,EAAA3B,EAAA4B,YAAA3B,YAEA0B,EAAAthF,QAAA,SAAAwhF,GAEA,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAv7B,EAAAu7B,EAAA,GAEAJ,EAAA96F,IAAAm7F,IAEAL,EAAAx5K,IAAA65K,GACAE,WACA/7J,cAKA,IAAAg8J,GAAAC,GAAAH,EAAAz7B,aAAAA,GACAm7B,EAAAjnL,IAAAsnL,GAAAE,QAAAh+K,KAAAi+K,GAEAR,EAAA96F,IAAAo7F,IAEAN,EAAAx5K,IAAA85K,GACAC,WACA/7J,cAKA,IAAAk8J,GAAAD,GAAAJ,EAAAx7B,aAAAA,GACAm7B,EAAAjnL,IAAAunL,GAAA97J,SAAAjiB,KAAAm+K,KAMA,OAAAV,GAOAh9D,YAAA,WAEA,IAAAvnG,KACAklK,KAEA,GAAA,UAAApC,EAAAqC,QAAA,CAEA,IAAAC,EAAAtC,EAAAqC,QAAAE,MAEA,IAAA,IAAAC,KAAAF,EAAA,CAEA,IAAAG,EAAAH,EAAAE,GAEAt5J,EAAAqZ,SAAAigJ,GAKA,GAHAtlK,EAAAgM,GAAAu5J,EAAAC,kBAAAD,EAAAE,SAGA,YAAAF,EAAA,CAEA,IAAAG,EAAAH,EAAAI,mBAAA53E,aAAAw3E,EAAAI,QAAAvI,WAAA,EACAwI,EAAA,iBAAAL,EAAAI,SAAA,KAAAJ,EAAAI,QAEA,GAAAD,GAAAE,EAAA,CAEA,IAAAnpK,EAAAlf,KAAAsoL,WAAAT,EAAAE,IAEAJ,EAAAK,EAAAC,kBAAAD,EAAAE,UAAAhpK,KAUA,IAAA,IAAAuP,KAAAhM,EAAA,CAEA,IAAA8lK,EAAA9lK,EAAAgM,QAEAzvB,IAAA2oL,EAAAY,GAAA9lK,EAAAgM,GAAAk5J,EAAAY,GACA9lK,EAAAgM,GAAAhM,EAAAgM,GAAApwB,MAAA,MAAAynE,MAIA,OAAArjD,GAKA6lK,WAAA,SAAAN,GAEA,IAIA9+K,EAJA4jK,EAAAkb,EAAAI,QACAI,EAAAR,EAAAC,kBAAAD,EAAAE,SACAj2G,EAAAu2G,EAAAz+K,MAAAy+K,EAAAr/D,YAAA,KAAA,GAAAnV,cAIA,OAAA/hC,GAEA,IAAA,MAEA/oE,EAAA,YACA,MAEA,IAAA,MACA,IAAA,OAEAA,EAAA,aACA,MAEA,IAAA,MAEAA,EAAA,YACA,MAEA,IAAA,MAEAA,EAAA,aACA,MAEA,IAAA,MAEA,OAAAlJ,KAAAy7G,QAAAJ,WAAA,SAEA9sG,QAAAC,KAAA,6CAAAg6K,GAIAt/K,EAAA,YACA,MAEA,QAGA,YADAqF,QAAAC,KAAA,0BAAAyjE,EAAA,uBAKA,GAAA,iBAAA66F,EAEA,MAAA,QAAA5jK,EAAA,WAAA4jK,EAIA,IAAAhjK,EAAA,IAAA2jC,WAAAq/H,GACA,OAAAjzF,OAAA+3E,IAAAC,gBAAA,IAAAlzC,MAAA70G,IAAAZ,KAAAA,MASA+gH,cAAA,SAAAxnG,GAEA,IAAAgmK,EAAA,IAAAxB,IAEA,GAAA,YAAA1B,EAAAqC,QAAA,CAEA,IAAAc,EAAAnD,EAAAqC,QAAA7nK,QACA,IAAA,IAAAgoK,KAAAW,EAAA,CAEA,IAAAjnK,EAAAzhB,KAAA2oL,aAAAD,EAAAX,GAAAtlK,GACAgmK,EAAAj7K,IAAAs6B,SAAAigJ,GAAAtmK,IAMA,OAAAgnK,GAKAE,aAAA,SAAAC,EAAAnmK,GAEA,IAAAhB,EAAAzhB,KAAA4/G,YAAAgpE,EAAAnmK,GAEAhB,EAAAgmK,GAAAmB,EAAAn6J,GAEAhN,EAAAhjB,KAAAmqL,EAAAC,SAEA,IAAAC,EAAAF,EAAAG,UACAC,EAAAJ,EAAAK,UAEAC,OAAAlqL,IAAA8pL,EAAAA,EAAAxpL,MAAA,EACA6pL,OAAAnqL,IAAAgqL,EAAAA,EAAA1pL,MAAA,EAQA,GAHAmiB,EAAAxB,MAAA,IAAAipK,EAAA1+D,EAAAjmH,eAAAimH,EAAAhmH,oBACAid,EAAAvB,MAAA,IAAAipK,EAAA3+D,EAAAjmH,eAAAimH,EAAAhmH,oBAEA,YAAAokL,EAAA,CAEA,IAAA93J,EAAA83J,EAAAQ,QAAA9pL,MAEAmiB,EAAAd,OAAAjhB,EAAAoxB,EAAA,GACArP,EAAAd,OAAAjV,EAAAolB,EAAA,GAIA,OAAArP,GAKAm+F,YAAA,SAAAgpE,EAAAnmK,GAEA,IAAA+lK,EAkBA/mK,EAhBAgqG,EAAAzrH,KAAAqrJ,cAAAltJ,KAEAqtB,EAAAg6J,EAAAzlL,IAAA6oL,EAAAn6J,IAAAjD,cAEAxsB,IAAAwsB,GAAAA,EAAAltB,OAAA,QAAAU,IAAAyjB,EAAA+I,EAAA,GAAAi8J,MAIA,KAFAe,EAAA/lK,EAAA+I,EAAA,GAAAi8J,KAEAn+K,QAAA,UAAA,IAAAk/K,EAAAl/K,QAAA,UAEAtJ,KAAAqrJ,cAAAvvC,aAAA98G,IAQA,IAAAizE,EAAA22G,EAAAS,SAAAt/K,OAAA,GAAAiqG,cAEA,GAAA,QAAA/hC,EAAA,CAEA,IAAAkpC,EAAAn7G,KAAAy7G,QAAAJ,WAAA,QAEA,OAAAF,GAEA5sG,QAAAC,KAAA,oEAAAo6K,EAAAX,kBACAxmK,EAAA,IAAA+oG,EAAAzqG,SAIA0B,EAAA05F,EAAAS,KAAA4sE,OAIA,QAAAv2G,GAEA1jE,QAAAC,KAAA,8EAAAo6K,EAAAX,kBACAxmK,EAAA,IAAA+oG,EAAAzqG,SAIA0B,EAAAzhB,KAAAqrJ,cAAAzvC,KAAA4sE,GAMA,OAFAxoL,KAAAqrJ,cAAAvvC,QAAA2P,GAEAhqG,GAKAyoG,eAAA,SAAAu+D,GAEA,IAAAx2B,EAAA,IAAAg1B,IAEA,GAAA,aAAA1B,EAAAqC,QAAA,CAEA,IAAA0B,EAAA/D,EAAAqC,QAAAn+I,SAEA,IAAA,IAAAs+I,KAAAuB,EAAA,CAEA,IAAA54J,EAAA1wB,KAAAupL,cAAAD,EAAAvB,GAAAU,GAEA,OAAA/3J,GAAAuhI,EAAAzkJ,IAAAs6B,SAAAigJ,GAAAr3J,IAMA,OAAAuhI,GAOAs3B,cAAA,SAAAC,EAAAf,GAEA,IAAAhB,EAAA+B,EAAA/6J,GACAhwB,EAAA+qL,EAAAX,SACA3/K,EAAAsgL,EAAAC,aAUA,GAPA,iBAAAvgL,IAEAA,EAAAA,EAAA5J,QAKAkmL,EAAAt5F,IAAAu7F,GAAA,OAAA,KAEA,IAEA/2J,EAFAF,EAAAxwB,KAAA0pL,gBAAAF,EAAAf,EAAAhB,GAIA,OAAAv+K,EAAA8qG,eAEA,IAAA,QACAtjF,EAAA,IAAA85F,EAAApnD,kBACA,MACA,IAAA,UACA1yC,EAAA,IAAA85F,EAAArnD,oBACA,MACA,QACA50D,QAAAC,KAAA,gFAAAtF,GACAwnB,EAAA,IAAA85F,EAAApnD,kBAQA,OAHA1yC,EAAAsc,UAAAxc,GACAE,EAAAjyB,KAAAA,EAEAiyB,GAMAg5J,gBAAA,SAAAF,EAAAf,EAAAhB,GAEA,IAAAj3J,KAEAg5J,EAAAG,aAEAn5J,EAAAkgB,UAAA84I,EAAAG,WAAArqL,OAGAkqL,EAAAI,QAEAp5J,EAAAuW,OAAA,IAAAyjF,EAAA/jF,OAAAr1B,UAAAo4K,EAAAI,QAAAtqL,OAEAkqL,EAAAK,cAAA,UAAAL,EAAAK,aAAA3gL,OAGAsnB,EAAAuW,OAAA,IAAAyjF,EAAA/jF,OAAAr1B,UAAAo4K,EAAAK,aAAAvqL,QAIAkqL,EAAAM,qBAEAt5J,EAAAugB,kBAAAy4I,EAAAM,mBAAAxqL,OAIAkqL,EAAAO,SAEAv5J,EAAAwf,UAAA,IAAAw6E,EAAA/jF,OAAAr1B,UAAAo4K,EAAAO,SAAAzqL,OAEAkqL,EAAAQ,eAAA,UAAAR,EAAAQ,cAAA9gL,OAGAsnB,EAAAwf,UAAA,IAAAw6E,EAAA/jF,OAAAr1B,UAAAo4K,EAAAQ,cAAA1qL,QAIAkqL,EAAAS,iBAEAz5J,EAAAyf,kBAAAtI,WAAA6hJ,EAAAS,eAAA3qL,QAIAkqL,EAAAU,UAEA15J,EAAAsZ,QAAAnC,WAAA6hJ,EAAAU,QAAA5qL,QAIAkxB,EAAAsZ,QAAA,IAEAtZ,EAAAuZ,aAAA,GAIAy/I,EAAAW,mBAEA35J,EAAAgc,aAAAg9I,EAAAW,iBAAA7qL,OAIAkqL,EAAAY,YAEA55J,EAAA2f,UAAAq5I,EAAAY,UAAA9qL,OAIAkqL,EAAAa,SAEA75J,EAAA0f,UAAA,IAAAs6E,EAAA/jF,OAAAr1B,UAAAo4K,EAAAa,SAAA/qL,OAEAkqL,EAAAc,eAAA,UAAAd,EAAAc,cAAAphL,OAGAsnB,EAAA0f,UAAA,IAAAs6E,EAAA/jF,OAAAr1B,UAAAo4K,EAAAc,cAAAhrL,QAIA,IAAAqlL,EAAA3kL,KA+DA,OA9DAwlL,EAAAzlL,IAAA0nL,GAAAj8J,SAAAo6E,QAAA,SAAAh3E,GAEA,IAAA1lB,EAAA0lB,EAAAi9H,aAEA,OAAA3iJ,GAEA,IAAA,OACAsnB,EAAAigB,QAAAk0I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACA,MAEA,IAAA,kBACAj3J,EAAA0b,MAAAy4I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACA,MAEA,IAAA,eACA,IAAA,qBACAj3J,EAAAub,IAAA44I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACAj3J,EAAAub,IAAAxrB,SAAAiqG,EAAAtiH,aACA,MAEA,IAAA,oBACAsoB,EAAAsgB,gBAAA6zI,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACA,MAEA,IAAA,gBACAj3J,EAAA2gB,YAAAwzI,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACAj3J,EAAA2gB,YAAA5wB,SAAAiqG,EAAAtiH,aACA,MAEA,IAAA,YACA,IAAA,sBACAsoB,EAAAmgB,UAAAg0I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACA,MAEA,IAAA,kBACAj3J,EAAA8b,OAAAq4I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACAj3J,EAAA8b,OAAAtsB,QAAAwqG,EAAAtmH,iCACAssB,EAAA8b,OAAA/rB,SAAAiqG,EAAAtiH,aACA,MAEA,IAAA,gBACAsoB,EAAA4b,YAAAu4I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACAj3J,EAAA4b,YAAA7rB,SAAAiqG,EAAAtiH,aACA,MAEA,IAAA,mBACAsoB,EAAA6b,SAAAs4I,EAAAl8D,WAAAggE,EAAA75J,EAAA64J,IACAj3J,EAAAuZ,aAAA,EACA,MAEA,IAAA,eACA,IAAA,oBACA,IAAA,iBACA,IAAA,0BACA,QACAx7B,QAAAC,KAAA,0EAAAtF,MAOAsnB,GAKAi4F,WAAA,SAAAggE,EAAAh6J,GAUA,MAPA,mBAAA82J,EAAAqC,SAAAn5J,KAAA82J,EAAAqC,QAAA2C,iBAEAh8K,QAAAC,KAAA,oGACAigB,EAAA+2J,EAAAzlL,IAAA0uB,GAAAjD,SAAA,GAAAi8J,IAIAgB,EAAA1oL,IAAA0uB,IAOAq4J,eAAA,WAEA,IAAAxM,KACAvtI,KAEA,GAAA,aAAAw4I,EAAAqC,QAAA,CAEA,IAAA4C,EAAAjF,EAAAqC,QAAA6C,SAEA,IAAA,IAAA1C,KAAAyC,EAAA,CAEA,IAAAE,EAAAF,EAAAzC,GAEAv8B,EAAAg6B,EAAAzlL,IAAA+nC,SAAAigJ,IAEA,GAAA,SAAA2C,EAAAC,SAAA,CAEA,IAAAnmH,EAAAxkE,KAAA4qL,cAAAp/B,EAAAg/B,GACAhmH,EAAAijH,GAAAM,EAEAv8B,EAAA+7B,QAAAjpL,OAAA,GAAAiQ,QAAAC,KAAA,kFACAg2D,EAAAqmH,WAAAr/B,EAAA+7B,QAAA,GAAAE,GAEAnN,EAAAyN,GAAAvjH,OAEA,GAAA,eAAAkmH,EAAAC,SAAA,CAEA,IAAA/2I,GACAnlB,GAAAs5J,GAGAn0I,EAAAk3I,WAAA9qL,KAAA+qL,kBAAAv/B,EAAAg/B,GACA52I,EAAAnlB,GAAAs5J,EAEAv8B,EAAA+7B,QAAAjpL,OAAA,GAAAiQ,QAAAC,KAAA,sFAEAu+B,EAAAg7I,GAAAn0I,IAQA,OAEA0mI,UAAAA,EACAvtI,aAAAA,IASA69I,cAAA,SAAAp/B,EAAAw/B,GAEA,IAAAC,KA8BA,OA5BAz/B,EAAAhgI,SAAAo6E,QAAA,SAAAh3E,GAEA,IAAAg8I,EAAAogB,EAAAp8J,EAAA64J,IAEA,GAAA,YAAA7c,EAAA+f,SAAA,CAEA,IAAAO,GAEAzD,GAAA74J,EAAA64J,GACA3wI,WACAgnG,WACAqtC,eAAA,IAAA3gE,EAAAxmG,SAAA5S,UAAAw5J,EAAAwgB,cAAAx8K,IAMA,YAAAg8J,IAEAsgB,EAAAp0I,QAAA8zH,EAAAygB,QAAAz8K,EACAs8K,EAAAptC,QAAA8sB,EAAA0gB,QAAA18K,GAIAq8K,EAAA1hL,KAAA2hL,OAMAD,SAAAA,EACA1mH,WAOAwmH,kBAAA,SAAAv/B,EAAAw/B,GAIA,IAFA,IAAAO,KAEA/sL,EAAA,EAAAA,EAAAgtJ,EAAAhgI,SAAAltB,OAAAE,IAAA,CAEA,IAAAowB,EAAA48H,EAAAhgI,SAAAhtB,GAEAgtL,EAAAR,EAAAp8J,EAAA64J,IAEAgE,GAEAhtL,KAAA+sL,EAAA3C,SACA6C,cAAAF,EAAAG,cACAl9J,GAAA+8J,EAAA/8J,GACAm9J,YAAAJ,EAAAK,YAAAj9K,GAIA,GAAA,sBAAA48K,EAAAb,SAAA,OAEAc,EAAAK,MAAAtG,EAAAzlL,IAAA+nC,SAAAlZ,EAAA64J,KAAAj8J,SAAAmzC,OAAA,SAAA/vC,GAEA,YAAA5vB,IAAA4vB,EAAAi9H,eAEA,GAAA47B,GAEA8D,EAAAhiL,KAAAkiL,GAIA,OAAAF,GAKAvN,WAAA,SAAA6I,EAAAE,EAAA90B,GAEAwzB,EAAA,IAAAj7D,EAAA7yC,MAEA,IAAAo0G,EAAA/rL,KAAAgsL,YAAAnF,EAAAvM,UAAAyM,EAAA90B,GAEAg6B,EAAA1G,EAAAqC,QAAAsE,MAEAvH,EAAA3kL,KACA+rL,EAAAnmF,QAAA,SAAA+vD,GAEA,IAAAxG,EAAA88B,EAAAt2B,EAAA8xB,IACA9C,EAAAwH,oBAAAx2B,EAAAxG,GAEA,IAAAi9B,EAAA5G,EAAAzlL,IAAA41J,EAAA8xB,IAAAF,QAEA6E,EAAAxmF,QAAA,SAAAymF,GAEA,IAAA9gK,EAAAwgK,EAAAhsL,IAAAssL,EAAA5E,SACAzoL,IAAAusB,GAAAA,EAAAjd,IAAAqnJ,KAIA,OAAAA,EAAApqI,QAEAk6J,EAAAn3K,IAAAqnJ,KAOA31J,KAAAssL,aAAAzF,EAAAvM,UAAAyM,EAAAgF,GAEA/rL,KAAAusL,qBAEAvsL,KAAAwsL,sBAEA/G,EAAAt2J,SAAA,SAAAosG,GAEA,GAAAA,EAAAlvG,SAAAogK,cAAA,CAEAlxD,EAAAhwG,SAAAgwG,EAAAlvG,SAAAogK,cAAAC,kBAAAnxD,EAAAhwG,OAAA9N,QAEA,IAAAshE,EAAA4tG,EAAApxD,EAAAlvG,SAAAogK,eAEAlxD,EAAAzjH,aAAAinE,MAMA,IAAA45B,GAAA,IAAAitE,GAAA10J,QAGA,IAAAu0J,EAAAj6J,SAAAltB,QAAAmnL,EAAAj6J,SAAA,GAAAqsD,UAEA4tG,EAAAj6J,SAAA,GAAAmtF,WAAAA,EACA8sE,EAAAA,EAAAj6J,SAAA,IAIAi6J,EAAA9sE,WAAAA,GAKAqzE,YAAA,SAAA1R,EAAAyM,EAAA90B,GAEA,IAAA85B,EAAA,IAAA9E,IACAgF,EAAA1G,EAAAqC,QAAAsE,MAEA,IAAA,IAAAnE,KAAAkE,EAAA,CAEA,IAAAx9J,EAAAqZ,SAAAigJ,GACAxsD,EAAA0wD,EAAAlE,GACAv8B,EAAAg6B,EAAAzlL,IAAA0uB,GAEAknI,EAAA31J,KAAA06K,cAAAlvB,EAAA8uB,EAAA7rJ,EAAA8sG,EAAAstD,UAEA,IAAAlzB,EAAA,CAEA,OAAAp6B,EAAAovD,UAEA,IAAA,SACAh1B,EAAA31J,KAAA4sL,aAAAphC,GACA,MACA,IAAA,QACAmK,EAAA31J,KAAA6sL,YAAArhC,GACA,MACA,IAAA,OACAmK,EAAA31J,KAAA8sL,WAAAthC,EAAAu7B,EAAA90B,GACA,MACA,IAAA,aACA0D,EAAA31J,KAAA+sL,YAAAvhC,EAAAu7B,GACA,MACA,IAAA,WACA,IAAA,OACApxB,EAAA,IAAAnrC,EAAAjyB,KACA,MACA,IAAA,OACA,QACAo9D,EAAA,IAAAnrC,EAAA7yC,MAKAg+E,EAAAl3J,KAAA88H,EAAAstD,SAAAr+D,EAAAyQ,gBAAA8D,iBAAAxD,EAAAstD,UAAA,GAEAlzB,EAAA8xB,GAAAh5J,EAIAzuB,KAAAgtL,iBAAAr3B,EAAAp6B,GACAwwD,EAAAv+K,IAAAihB,EAAAknI,GAIA,OAAAo2B,GAIArR,cAAA,SAAAlvB,EAAA8uB,EAAA7rJ,EAAAhwB,GAEA,IAAA+5F,EAAA,KAwCA,OAtCAgzD,EAAA+7B,QAAA3hF,QAAA,SAAAr6E,GAEA,IAAA,IAAAk8J,KAAAnN,EAAA,CAEA,IAAA91G,EAAA81G,EAAAmN,GAEAjjH,EAAAymH,SAAArlF,QAAA,SAAAslF,EAAA1sL,GAEA,GAAA0sL,EAAAzD,KAAAl8J,EAAAk8J,GAAA,CAEA,IAAAwF,EAAAz0F,GACAA,EAAA,IAAAgyB,EAAAjyB,MAEA1/E,YAAAzK,KAAA88K,EAAAC,eAIA3yF,EAAA/5F,KAAAA,EAAA+rH,EAAAyQ,gBAAA8D,iBAAAtgI,GAAA,GACA+5F,EAAAivF,GAAAh5J,EAEA+1C,EAAAD,MAAA/lE,GAAAg6F,EAIA,OAAAy0F,GAEAz0F,EAAAlqF,IAAA2+K,SAYAz0F,GAKAo0F,aAAA,SAAAphC,GAEA,IAAAmK,EACAu3B,EAcA,GAZA1hC,EAAAhgI,SAAAo6E,QAAA,SAAAh3E,GAEA,IAAA4mI,EAAA+vB,EAAAqC,QAAAuF,cAAAv+J,EAAA64J,SAEAzoL,IAAAw2J,IAEA03B,EAAA13B,UAMAx2J,IAAAkuL,EAEAv3B,EAAA,IAAAnrC,EAAAl/F,aAEA,CAEA,IAAApiB,EAAA,OACAlK,IAAAkuL,EAAAE,sBAAA,IAAAF,EAAAE,qBAAA9tL,QAEA4J,EAAA,GAIA,IAAAmkL,EAAA,OACAruL,IAAAkuL,EAAAI,YAEAD,EAAAH,EAAAI,UAAAhuL,MAAA,KAIA,IAAAiuL,EAAA,SACAvuL,IAAAkuL,EAAAM,WAEAD,EAAAL,EAAAM,SAAAluL,MAAA,KAKA,IAAAiO,EAAAssE,OAAA4zG,WACAhgL,EAAAosE,OAAA6zG,iBAEA1uL,IAAAkuL,EAAAS,kBAAA3uL,IAAAkuL,EAAAU,eAEArgL,EAAA2/K,EAAAS,YAAAruL,MACAmO,EAAAy/K,EAAAU,aAAAtuL,OAIA,IAAAsiD,EAAAr0C,EAAAE,EAEAk0C,EAAA,QACA3iD,IAAAkuL,EAAAW,cAEAlsI,EAAAurI,EAAAW,YAAAvuL,OAIA,IAAAijD,EAAA2qI,EAAAY,YAAAZ,EAAAY,YAAAxuL,MAAA,KAEA,OAAA4J,GAEA,KAAA,EACAysJ,EAAA,IAAAnrC,EAAA9oE,kBAAAC,EAAAC,EAAAyrI,EAAAE,GACA,OAAAhrI,GAAAozG,EAAArzG,eAAAC,GACA,MAEA,KAAA,EACAozG,EAAA,IAAAnrC,EAAA9E,oBAAAn4G,EAAA,EAAAA,EAAA,EAAAE,EAAA,GAAAA,EAAA,EAAA4/K,EAAAE,GACA,MAEA,QACAh/K,QAAAC,KAAA,wCAAAtF,EAAA,KACAysJ,EAAA,IAAAnrC,EAAAl/F,UAOA,OAAAqqI,GAKAk3B,YAAA,SAAArhC,GAEA,IAAAmK,EACAo4B,EAcA,GAZAviC,EAAAhgI,SAAAo6E,QAAA,SAAAh3E,GAEA,IAAA4mI,EAAA+vB,EAAAqC,QAAAuF,cAAAv+J,EAAA64J,SAEAzoL,IAAAw2J,IAEAu4B,EAAAv4B,UAMAx2J,IAAA+uL,EAEAp4B,EAAA,IAAAnrC,EAAAl/F,aAEA,CAEA,IAAApiB,EAKAA,OAFAlK,IAAA+uL,EAAAC,UAEA,EAIAD,EAAAC,UAAA1uL,MAIA,IAAAynC,EAAA,cAEA/nC,IAAA+uL,EAAAtnJ,QAEAM,GAAA,IAAAyjF,EAAA/jF,OAAAr1B,UAAA28K,EAAAtnJ,MAAAnnC,QAIA,IAAA4oE,OAAAlpE,IAAA+uL,EAAAE,UAAA,EAAAF,EAAAE,UAAA3uL,MAAA,SAGAN,IAAA+uL,EAAAG,mBAAA,IAAAH,EAAAG,kBAAA5uL,QAEA4oE,EAAA,GAIA,IAAAt6C,EAAA,OACA5uB,IAAA+uL,EAAAI,oBAIAvgK,OAFA5uB,IAAA+uL,EAAAK,sBAAA,IAAAL,EAAAK,qBAAA9uL,MAEA,EAIAyuL,EAAAI,kBAAA7uL,OASA,OAAA4J,GAEA,KAAA,EACAysJ,EAAA,IAAAnrC,EAAA/E,WAAA1+E,EAAAmhC,EAAAt6C,EALA,GAMA,MAEA,KAAA,EACA+nI,EAAA,IAAAnrC,EAAA5E,iBAAA7+E,EAAAmhC,GACA,MAEA,KAAA,EACA,IAAA33D,EAAApR,KAAAiL,GAAA,OAEApL,IAAA+uL,EAAAM,aAEA99K,EAAAi6G,EAAAm+B,UAAAv8I,SAAA2hL,EAAAM,WAAA/uL,QAIA,IAAAqpE,EAAA,OACA3pE,IAAA+uL,EAAAO,aAKA3lH,EAAA6hD,EAAAm+B,UAAAv8I,SAAA2hL,EAAAO,WAAAhvL,OACAqpE,EAAAxpE,KAAA6L,IAAA29D,EAAA,IAIAgtF,EAAA,IAAAnrC,EAAApF,UAAAr+E,EAAAmhC,EAAAt6C,EAAArd,EAAAo4D,EAhCA,GAiCA,MAEA,QACAp6D,QAAAC,KAAA,uCAAAu/K,EAAAC,UAAA1uL,MAAA,uCACAq2J,EAAA,IAAAnrC,EAAA/E,WAAA1+E,EAAAmhC,QAKAlpE,IAAA+uL,EAAAQ,aAAA,IAAAR,EAAAQ,YAAAjvL,QAEAq2J,EAAA1pI,YAAA,GAMA,OAAA0pI,GAIAm3B,WAAA,SAAAthC,EAAAu7B,EAAA90B,GAEA,IAAA0D,EACAplI,EAAA,KACAG,EAAA,KACAhB,KA6DA,OA1DA87H,EAAAhgI,SAAAo6E,QAAA,SAAAh3E,GAEAm4J,EAAA76F,IAAAt9D,EAAA64J,MAEAl3J,EAAAw2J,EAAAhnL,IAAA6uB,EAAA64J,KAIAx1B,EAAA/lE,IAAAt9D,EAAA64J,KAEA/3J,EAAAnmB,KAAA0oJ,EAAAlyJ,IAAA6uB,EAAA64J,OAMA/3J,EAAApxB,OAAA,EAEAoyB,EAAAhB,EAEAA,EAAApxB,OAAA,EAEAoyB,EAAAhB,EAAA,IAIAgB,EAAA,IAAA85F,EAAApnD,mBAAAr8B,MAAA,WACArX,EAAAnmB,KAAAmnB,IAIA,UAAAH,EAAA+jB,YAEA5kB,EAAAk2E,QAAA,SAAAl1E,GAEAA,EAAAyW,cAAA,IAMA5W,EAAAi+J,cAEA9+J,EAAAk2E,QAAA,SAAAl1E,GAEAA,EAAAoc,UAAA,KAIA6oH,EAAA,IAAAnrC,EAAA/yB,YAAAlnE,EAAAG,IACAunE,wBAIA09D,EAAA,IAAAnrC,EAAAvxE,KAAA1oB,EAAAG,GAIAilI,GAIAo3B,YAAA,SAAAvhC,EAAAu7B,GAEA,IAAAx2J,EAAAi7H,EAAAhgI,SAAAijK,OAAA,SAAAC,EAAA9/J,GAIA,OAFAm4J,EAAA76F,IAAAt9D,EAAA64J,MAAAiH,EAAA3H,EAAAhnL,IAAA6uB,EAAA64J,KAEAiH,GAEA,MAGAh+J,EAAA,IAAA85F,EAAA/mD,mBAAA18B,MAAA,QAAAwK,UAAA,IACA,OAAA,IAAAi5E,EAAA7wB,KAAAppE,EAAAG,IAKAs8J,iBAAA,SAAAr3B,EAAAxG,GAEA,IAAAs9B,KAEA,gBAAAt9B,IAAAs9B,EAAAkC,YAAA7mJ,SAAAqnH,EAAAy/B,YAAAtvL,QAEAmtL,EAAAl6C,WAAA,kBAAA4c,EAAA0/B,EAAA1/B,EAAA2/B,cAAAxvL,OACA,MAEA,oBAAA6vJ,IAAAs9B,EAAAsC,YAAA5/B,EAAA6/B,gBAAA1vL,OAEA,gBAAA6vJ,IAAAs9B,EAAAwC,YAAA9/B,EAAA+/B,YAAA5vL,OACA,iBAAA6vJ,IAAAs9B,EAAA/tK,SAAAywI,EAAAggC,aAAA7vL,OACA,iBAAA6vJ,IAAAs9B,EAAA2C,aAAAjgC,EAAAkgC,aAAA/vL,OAEA,gBAAA6vJ,IAAAs9B,EAAA5tK,MAAAswI,EAAAmgC,YAAAhwL,OAEA,kBAAA6vJ,IAAAs9B,EAAA8C,cAAApgC,EAAAqgC,cAAAlwL,OACA,iBAAA6vJ,IAAAs9B,EAAAgD,aAAAtgC,EAAAugC,aAAApwL,OAEA,mBAAA6vJ,IAAAs9B,EAAAkD,eAAAxgC,EAAAygC,eAAAtwL,OACA,kBAAA6vJ,IAAAs9B,EAAAoD,cAAA1gC,EAAA2gC,cAAAxwL,OAEAq2J,EAAAtpI,SAAAogK,cAAAA,GAIAN,oBAAA,SAAAx2B,EAAAxG,GAEA,GAAA,mBAAAA,EAAA,CAEA,IAAA3jI,EAAAg6J,EAAAzlL,IAAA41J,EAAA8xB,IAAAj8J,SAEAA,EAAAo6E,QAAA,SAAAh3E,GAEA,GAAA,mBAAAA,EAAAi9H,aAAA,CAEA,IAAAkkC,EAAAxK,EAAAqC,QAAAsE,MAAAt9J,EAAA64J,IAEA,GAAA,oBAAAsI,EAAA,CAEA,IAAAxrB,EAAAwrB,EAAAf,gBAAA1vL,WAGAN,IAAA22J,EAAAv1J,QAEAu1J,EAAAv1J,OAAA2nB,SAAA3W,UAAAmzJ,GACAkhB,EAAAn3K,IAAAqnJ,EAAAv1J,SAIAu1J,EAAA1vI,QAAA,IAAAukG,EAAApzG,SAAAhG,UAAAmzJ,UAcA+nB,aAAA,SAAAhS,EAAAyM,EAAAgF,GAEA,IAAAiE,EAAAhwL,KAAAiwL,iBAEA,IAAA,IAAAxI,KAAAnN,EAAA,CAEA,IAAA91G,EAAA81G,EAAAmN,GAEAF,EAAA/B,EAAAzlL,IAAA+nC,SAAA08B,EAAAijH,KAAAF,QAEAA,EAAA3hF,QAAA,SAAAr6E,GAEA,GAAAw7J,EAAA76F,IAAA3gE,EAAAk8J,IAAA,CAEA,IAAAqE,EAAAvgK,EAAAk8J,GACAyI,EAAA1K,EAAAzlL,IAAA+rL,GAEAoE,EAAA3I,QAAA3hF,QAAA,SAAAuqF,GAEA,GAAApE,EAAA7/F,IAAAikG,EAAA1I,IAAA,CAEA,IAAA9xB,EAAAo2B,EAAAhsL,IAAAowL,EAAA1I,IAEA9xB,EAAA59D,KAAA,IAAAyyB,EAAAnyB,SAAA7zB,EAAAD,OAAAyrH,EAAAG,EAAA1I,aAcAwI,eAAA,WAEA,IAAAD,KAEA,GAAA,SAAAzK,EAAAqC,QAAA,CAEA,IAAAwI,EAAA7K,EAAAqC,QAAAyI,KAEA,IAAA,IAAAtI,KAAAqI,EAEA,GAAA,aAAAA,EAAArI,GAAA4C,SAAA,CAEA,IAAA2F,EAAAF,EAAArI,GAAAwI,SAEA5tK,MAAAC,QAAA0tK,GAEAA,EAAA1qF,QAAA,SAAA4qF,GAEAR,EAAAQ,EAAAxrF,OAAA,IAAAwlB,EAAAxmG,SAAA5S,UAAAo/K,EAAAC,OAAA7hL,KAMAohL,EAAAM,EAAAtrF,OAAA,IAAAwlB,EAAAxmG,SAAA5S,UAAAk/K,EAAAG,OAAA7hL,IAUA,OAAAohL,GAKAzD,mBAAA,WAEA,GAAA,mBAAAhH,GAAA,iBAAAA,EAAAmL,eAAA,CAEA,IAAAC,EAAApL,EAAAmL,eAAAE,aAAAtxL,MACAkW,EAAAm7K,EAAA,GACArzK,EAAAqzK,EAAA,GACA9hL,EAAA8hL,EAAA,GAEA,GAAA,IAAAn7K,GAAA,IAAA8H,GAAA,IAAAzO,EAAA,CAEA,IAAAk4B,EAAA,IAAAyjF,EAAA/jF,MAAAjxB,EAAA8H,EAAAzO,GACA42K,EAAAn3K,IAAA,IAAAk8G,EAAA3E,aAAA9+E,EAAA,OAQAylJ,oBAAA,WAEA,IAAA7H,EAAA3kL,KACAylL,EAAAt2J,SAAA,SAAAP,GAEAA,EAAAqB,QAEArB,EAAA2B,SAAAgkB,gBAAAxsB,UAAA6G,EAAA2B,SAAAgkB,gBAAAxsB,SAAAzpB,SAEAqkB,MAAAC,QAAAgM,EAAA8B,UAEA9B,EAAA8B,SAAAk1E,QAAA,SAAAl1E,EAAAlyB,GAEAmmL,EAAAkM,mBAAAjiK,EAAA8B,EAAAlyB,KAMAmmL,EAAAkM,mBAAAjiK,EAAAA,EAAA8B,cAYAmgK,mBAAA,SAAAjiK,EAAA8B,EAAAnwB,GAEA,IAAAqK,EAAAgkB,EAAAhkB,KACAkmL,EAAApgK,EAAA9lB,KAGAmmL,GAAA,EAoBA,GAlBAtL,EAAAt2J,SAAA,SAAAosG,GAEAA,EAAAtrG,SAEAtN,MAAAC,QAAA24G,EAAA7qG,UAEA6qG,EAAA7qG,SAAAk1E,QAAA,SAAAkc,GAEAA,EAAAl3G,OAAAkmL,GAAAv1D,EAAA3wH,OAAAA,IAAAmmL,GAAA,KAIAx1D,EAAA7qG,SAAA9lB,OAAAkmL,GAAAv1D,EAAA3wH,OAAAA,IAAAmmL,GAAA,OAMA,IAAAA,EAAA,CAEA,IAAAC,EAAAtgK,EAAAxiB,QACA8iL,EAAAjkJ,cAAA,OAEA/tC,IAAAuB,EAAAquB,EAAA8B,SAAAsgK,EACApiK,EAAA8B,SAAAnwB,GAAAywL,OAEAtgK,EAAAqc,cAAA,IASA44I,EAAA/lL,WAEAuO,YAAAw3K,EAGAz0J,MAAA,SAAA21J,GAEA,IAAAE,EAAA,IAAAE,IAEA,GAAA,aAAA1B,EAAAqC,QAAA,CAEA,IAAAqJ,EAAA1L,EAAAqC,QAAA/sI,SAEA,IAAA,IAAAktI,KAAAkJ,EAAA,CAEA,IAAAzlC,EAAAg6B,EAAAzlL,IAAA+nC,SAAAigJ,IACA2G,EAAA1uL,KAAAkxL,cAAA1lC,EAAAylC,EAAAlJ,GAAAlB,GAEAE,EAAAv5K,IAAAs6B,SAAAigJ,GAAA2G,IAMA,OAAA3H,GAKAmK,cAAA,SAAA1lC,EAAA2lC,EAAAtK,GAEA,OAAAsK,EAAAxG,UAEA,IAAA,OACA,OAAA3qL,KAAAoxL,kBAAA5lC,EAAA2lC,EAAAtK,GAGA,IAAA,aACA,OAAA7mL,KAAAqxL,mBAAAF,KASAC,kBAAA,SAAA5lC,EAAA2lC,EAAAtK,GAEA,IAAAvM,EAAAuM,EAAAvM,UACAvtI,KAEAk/I,EAAAzgC,EAAA+7B,QAAAx7I,IAAA,SAAAxgB,GAEA,OAAAg6J,EAAAqC,QAAAsE,MAAA3gK,EAAAk8J,MAKA,GAAA,IAAAwE,EAAA3tL,OAAA,CAEA,IAAAkmE,EAAAgnF,EAAAhgI,SAAAijK,OAAA,SAAAjqH,EAAA51C,GAIA,YAFA5vB,IAAAs7K,EAAA1rJ,EAAA64J,MAAAjjH,EAAA81G,EAAA1rJ,EAAA64J,KAEAjjH,GAEA,MAEAgnF,EAAAhgI,SAAAo6E,QAAA,SAAAh3E,QAEA5vB,IAAA6nL,EAAA95I,aAAAne,EAAA64J,KAEA16I,EAAAxjC,KAAAs9K,EAAA95I,aAAAne,EAAA64J,OAQA,IAAAt4B,EAAA88B,EAAA,GAEAQ,KAEA,kBAAAt9B,IAAAs9B,EAAAl6C,WAAAs8C,EAAA1/B,EAAA2/B,cAAAxvL,QACA,gBAAA6vJ,IAAAs9B,EAAAkC,YAAA7mJ,SAAAqnH,EAAAy/B,YAAAtvL,QAEA,yBAAA6vJ,IAAAs9B,EAAAsC,YAAA5/B,EAAAmiC,qBAAAhyL,OACA,sBAAA6vJ,IAAAs9B,EAAA/tK,SAAAywI,EAAAoiC,kBAAAjyL,OACA,qBAAA6vJ,IAAAs9B,EAAA5tK,MAAAswI,EAAAqiC,iBAAAlyL,OAEA,IAAAy/E,EAAA4tG,EAAAF,GAEA,OAAAzsL,KAAAyxL,YAAAN,EAAA3sH,EAAAz3B,EAAAgyC,KAKA0yG,YAAA,SAAAN,EAAA3sH,EAAAz3B,EAAA2kJ,GAEA,IAAAhD,EAAA,IAAAlkE,EAAAn2E,eACA88I,EAAAtI,WAAA6F,EAAAjwL,KAAA0yL,EAAAtI,UAEA,IAAA8I,EAAA3xL,KAAA4xL,aAAAT,EAAA3sH,GACAzR,EAAA/yD,KAAA6xL,WAAAF,GAEA93F,EAAA,IAAA2wB,EAAAp8E,uBAAA2kB,EAAAjY,OAAA,GAuBA,GArBA++C,EAAA/hF,aAAA45K,GAEAhD,EAAA55I,aAAA,WAAA+kD,GAEA9mC,EAAApkB,OAAArwC,OAAA,GAEAowL,EAAA55I,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAA2kB,EAAApkB,OAAA,IAIA61B,IAEAkqH,EAAA55I,aAAA,YAAA,IAAA01E,EAAA18E,sBAAAilB,EAAA++H,eAAA,IAEApD,EAAA55I,aAAA,aAAA,IAAA01E,EAAAp8E,uBAAA2kB,EAAA4/G,cAAA,IAGA+b,EAAAF,aAAAhqH,GAIAzR,EAAAr5C,OAAApb,OAAA,EAAA,CAEA,IAAAutB,GAAA,IAAA2+F,EAAA1vG,SAAAsD,gBAAAszK,GAEAK,EAAA,IAAAvnE,EAAAp8E,uBAAA2kB,EAAAr5C,OAAA,GACAq4K,EAAAl6K,kBAAAgU,GAEA6iK,EAAA55I,aAAA,SAAAi9I,GAoBA,GAhBAh/H,EAAAnkB,IAAAg3D,QAAA,SAAAhJ,EAAAp+F,GAGA,IAAAC,EAAA,MAAAD,EAAA,GAAAyB,WAGA,IAAAzB,IAEAC,EAAA,MAIAiwL,EAAA55I,aAAAr2C,EAAA,IAAA+rH,EAAAp8E,uBAAA2kB,EAAAnkB,IAAApwC,GAAA,MAIAmzL,EAAAjhK,UAAA,YAAAihK,EAAAjhK,SAAAshK,YAAA,CAGA,IAAAC,EAAAl/H,EAAA/rB,cAAA,GACAkrJ,EAAA,EAgBA,GAdAn/H,EAAA/rB,cAAA4+D,QAAA,SAAAusF,EAAA3zL,GAEA2zL,IAAAF,IAEAvD,EAAA15I,SAAAk9I,EAAA1zL,EAAA0zL,EAAAD,GAEAA,EAAAE,EACAD,EAAA1zL,KAOAkwL,EAAA5/I,OAAAxwC,OAAA,EAAA,CAEA,IAAA8zL,EAAA1D,EAAA5/I,OAAA4/I,EAAA5/I,OAAAxwC,OAAA,GACA07D,EAAAo4H,EAAAn4J,MAAAm4J,EAAAv2K,MAEAm+C,IAAAjH,EAAA/rB,cAAA1oC,QAEAowL,EAAA15I,SAAAglB,EAAAjH,EAAA/rB,cAAA1oC,OAAA07D,EAAAi4H,GAQA,IAAAvD,EAAA5/I,OAAAxwC,QAEAowL,EAAA15I,SAAA,EAAA+d,EAAA/rB,cAAA1oC,OAAAy0D,EAAA/rB,cAAA,IAQA,OAFAhnC,KAAAqyL,gBAAA3D,EAAAyC,EAAApkJ,EAAA2kJ,GAEAhD,GAIAkD,aAAA,SAAAT,EAAA3sH,GAEA,IAAAmtH,KAuBA,GArBAA,EAAAW,qBAAAtzL,IAAAmyL,EAAAoB,SAAApB,EAAAoB,SAAA3jL,KACA+iL,EAAAa,mBAAAxzL,IAAAmyL,EAAAsB,mBAAAtB,EAAAsB,mBAAA7jL,KAEAuiL,EAAAuB,oBAEAf,EAAA5qJ,MAAA/mC,KAAA2yL,kBAAAxB,EAAAuB,kBAAA,KAIAvB,EAAAyB,uBAEAjB,EAAAjhK,SAAA1wB,KAAA6yL,qBAAA1B,EAAAyB,qBAAA,KAIAzB,EAAA2B,qBAEAnB,EAAAj4K,OAAA1Z,KAAA+yL,aAAA5B,EAAA2B,mBAAA,KAIA3B,EAAA6B,eAAA,CAEArB,EAAA5uK,MAGA,IADA,IAAAvkB,EAAA,EACA2yL,EAAA6B,eAAAx0L,IAEAmzL,EAAA5uK,GAAAxZ,KAAAvJ,KAAAizL,SAAA9B,EAAA6B,eAAAx0L,KACAA,IAgCA,OA1BAmzL,EAAAuB,eAEA,OAAA1uH,IAEAmtH,EAAAntH,SAAAA,EAEAA,EAAAymH,SAAArlF,QAAA,SAAAslF,EAAA1sL,GAGA0sL,EAAAp0I,QAAA8uD,QAAA,SAAArlG,EAAAgyB,QAEAvzB,IAAA2yL,EAAAuB,YAAA3yL,KAAAoxL,EAAAuB,YAAA3yL,OAEAoxL,EAAAuB,YAAA3yL,GAAAgJ,MAEAklB,GAAAjwB,EACAslH,OAAAonE,EAAAptC,QAAAvrH,UAUAo/J,GAIAE,WAAA,SAAAF,GAEA,IAAA5+H,GACAjY,UACAphC,UACAi1B,UACAC,OACA5H,iBACA2rI,iBACAmf,mBAGAqB,EAAA,EACAC,EAAA,EACAC,GAAA,EAGAC,KACA73I,KACA83I,KACAC,KACAC,KACAC,KAEA/O,EAAA3kL,KA4JA,OA3JA2xL,EAAAa,cAAA5sF,QAAA,SAAA+tF,EAAAC,GAEA,IAAAC,GAAA,EASAF,EAAA,IAEAA,IAAA,EACAE,GAAA,GAIA,IAAAC,KACAh2C,KAIA,GAFAw1C,EAAA/pL,KAAA,EAAAoqL,EAAA,EAAAA,EAAA,EAAA,EAAAA,EAAA,GAEAhC,EAAA5qJ,MAAA,CAEA,IAAA/V,EAAA+kH,EAAA69C,EAAAT,EAAAQ,EAAAhC,EAAA5qJ,OAEAwsJ,EAAAhqL,KAAAynB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA,GAAA2gK,EAAAntH,SAAA,CAcA,QAZAxlE,IAAA2yL,EAAAuB,YAAAS,IAEAhC,EAAAuB,YAAAS,GAAA/tF,QAAA,SAAAmuF,GAEAj2C,EAAAv0I,KAAAwqL,EAAAjwE,QACAgwE,EAAAvqL,KAAAwqL,EAAAtlK,MAOAqvH,EAAAx/I,OAAA,EAAA,CAEA+0L,IAEA9kL,QAAAC,KAAA,6GACA6kL,GAAA,GAIA,IAAAW,GAAA,EAAA,EAAA,EAAA,GACAC,GAAA,EAAA,EAAA,EAAA,GAEAn2C,EAAAl4C,QAAA,SAAAke,EAAAowE,GAEA,IAAAp6D,EAAAhW,EACAquE,EAAA2B,EAAAI,GAEAD,EAAAruF,QAAA,SAAAuuF,EAAAC,EAAAC,GAEA,GAAAv6D,EAAAq6D,EAAA,CAEAE,EAAAD,GAAAt6D,EACAA,EAAAq6D,EAEA,IAAAh2K,EAAA61K,EAAAI,GACAJ,EAAAI,GAAAjC,EACAA,EAAAh0K,OAQA21K,EAAAE,EACAl2C,EAAAm2C,EAKA,KAAAn2C,EAAAx/I,OAAA,GAEAw/I,EAAAv0I,KAAA,GACAuqL,EAAAvqL,KAAA,GAIA,IAAA,IAAA/K,EAAA,EAAAA,EAAA,IAAAA,EAEAi1L,EAAAlqL,KAAAu0I,EAAAt/I,IACAk1L,EAAAnqL,KAAAuqL,EAAAt1L,IAMA,GAAAmzL,EAAAj4K,OAAA,CAEA,IAAAsX,EAAA+kH,EAAA69C,EAAAT,EAAAQ,EAAAhC,EAAAj4K,QAEA+hC,EAAAlyC,KAAAynB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA,GAAA2gK,EAAAjhK,UAAA,YAAAihK,EAAAjhK,SAAAshK,YAEA,IAAAhrJ,EAAA+uG,EAAA69C,EAAAT,EAAAQ,EAAAhC,EAAAjhK,UAAA,GAIAihK,EAAA5uK,IAEA4uK,EAAA5uK,GAAA6iF,QAAA,SAAA7iF,EAAAvkB,GAEA,IAAAwyB,EAAA+kH,EAAA69C,EAAAT,EAAAQ,EAAA5wK,QAEA/jB,IAAAw0L,EAAAh1L,KAEAg1L,EAAAh1L,OAIAg1L,EAAAh1L,GAAA+K,KAAAynB,EAAA,IACAwiK,EAAAh1L,GAAA+K,KAAAynB,EAAA,MAMAoiK,IAEAS,IAEAlP,EAAA2P,QAAAvhI,EAAA4+H,EAAA2B,EAAAtsJ,EAAAyU,EAAA83I,EAAAC,EAAAC,EAAAC,EAAAN,GAEAD,IACAC,EAAA,EAGAE,KACA73I,KACA83I,KACAC,KACAC,KACAC,QAMA3gI,GAKAuhI,QAAA,SAAAvhI,EAAA4+H,EAAA2B,EAAAtsJ,EAAAyU,EAAA83I,EAAAC,EAAAC,EAAAC,EAAAN,GAEA,IAAA,IAAA50L,EAAA,EAAAA,EAAA40L,EAAA50L,IAEAu0D,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,KACAvgI,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,KACAvgI,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,KAEAvgI,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,GAAA90L,EAAA,MACAu0D,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,GAAA90L,EAAA,GAAA,KACAu0D,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,GAAA90L,EAAA,GAAA,KAEAu0D,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,EAAA90L,KACAu0D,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,EAAA90L,EAAA,KACAu0D,EAAAjY,OAAAvxC,KAAAooL,EAAAW,gBAAAgB,EAAA,EAAA90L,EAAA,KAEAmzL,EAAAntH,WAEAzR,EAAA4/G,cAAAppK,KAAAkqL,EAAA,IACA1gI,EAAA4/G,cAAAppK,KAAAkqL,EAAA,IACA1gI,EAAA4/G,cAAAppK,KAAAkqL,EAAA,IACA1gI,EAAA4/G,cAAAppK,KAAAkqL,EAAA,IAEA1gI,EAAA4/G,cAAAppK,KAAAkqL,EAAA,GAAAj1L,EAAA,KACAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,GAAAj1L,EAAA,GAAA,IACAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,GAAAj1L,EAAA,GAAA,IACAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,GAAAj1L,EAAA,GAAA,IAEAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,EAAAj1L,IACAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,EAAAj1L,EAAA,IACAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,EAAAj1L,EAAA,IACAu0D,EAAA4/G,cAAAppK,KAAAkqL,EAAA,EAAAj1L,EAAA,IAEAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,IACA3gI,EAAA++H,eAAAvoL,KAAAmqL,EAAA,IACA3gI,EAAA++H,eAAAvoL,KAAAmqL,EAAA,IACA3gI,EAAA++H,eAAAvoL,KAAAmqL,EAAA,IAEA3gI,EAAA++H,eAAAvoL,KAAAmqL,EAAA,GAAAl1L,EAAA,KACAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,GAAAl1L,EAAA,GAAA,IACAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,GAAAl1L,EAAA,GAAA,IACAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,GAAAl1L,EAAA,GAAA,IAEAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,EAAAl1L,IACAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,EAAAl1L,EAAA,IACAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,EAAAl1L,EAAA,IACAu0D,EAAA++H,eAAAvoL,KAAAmqL,EAAA,EAAAl1L,EAAA,KAIAmzL,EAAA5qJ,QAEAgsB,EAAApkB,OAAAplC,KAAAgqL,EAAA,IACAxgI,EAAApkB,OAAAplC,KAAAgqL,EAAA,IACAxgI,EAAApkB,OAAAplC,KAAAgqL,EAAA,IAEAxgI,EAAApkB,OAAAplC,KAAAgqL,EAAA,GAAA/0L,EAAA,KACAu0D,EAAApkB,OAAAplC,KAAAgqL,EAAA,GAAA/0L,EAAA,GAAA,IACAu0D,EAAApkB,OAAAplC,KAAAgqL,EAAA,GAAA/0L,EAAA,GAAA,IAEAu0D,EAAApkB,OAAAplC,KAAAgqL,EAAA,EAAA/0L,IACAu0D,EAAApkB,OAAAplC,KAAAgqL,EAAA,EAAA/0L,EAAA,IACAu0D,EAAApkB,OAAAplC,KAAAgqL,EAAA,EAAA/0L,EAAA,KAIAmzL,EAAAjhK,UAAA,YAAAihK,EAAAjhK,SAAAshK,cAEAj/H,EAAA/rB,cAAAz9B,KAAAy9B,GACA+rB,EAAA/rB,cAAAz9B,KAAAy9B,GACA+rB,EAAA/rB,cAAAz9B,KAAAy9B,IAIA2qJ,EAAAj4K,SAEAq5C,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,IACAsX,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,IACAsX,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,IAEAsX,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,GAAAj9C,EAAA,KACAu0D,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,GAAAj9C,EAAA,GAAA,IACAu0D,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,GAAAj9C,EAAA,GAAA,IAEAu0D,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,EAAAj9C,IACAu0D,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,EAAAj9C,EAAA,IACAu0D,EAAAr5C,OAAAnQ,KAAAkyC,EAAA,EAAAj9C,EAAA,KAIAmzL,EAAA5uK,IAEA4uK,EAAA5uK,GAAA6iF,QAAA,SAAA7iF,EAAAwP,QAEAvzB,IAAA+zD,EAAAnkB,IAAArc,KAAAwgC,EAAAnkB,IAAArc,OAEAwgC,EAAAnkB,IAAArc,GAAAhpB,KAAAiqL,EAAAjhK,GAAA,IACAwgC,EAAAnkB,IAAArc,GAAAhpB,KAAAiqL,EAAAjhK,GAAA,IAEAwgC,EAAAnkB,IAAArc,GAAAhpB,KAAAiqL,EAAAjhK,GAAA,GAAA/zB,EAAA,KACAu0D,EAAAnkB,IAAArc,GAAAhpB,KAAAiqL,EAAAjhK,GAAA,GAAA/zB,EAAA,GAAA,IAEAu0D,EAAAnkB,IAAArc,GAAAhpB,KAAAiqL,EAAAjhK,GAAA,EAAA/zB,IACAu0D,EAAAnkB,IAAArc,GAAAhpB,KAAAiqL,EAAAjhK,GAAA,EAAA/zB,EAAA,OAUA6zL,gBAAA,SAAAkC,EAAAC,EAAAznJ,EAAA2kJ,GAEA,GAAA,IAAA3kJ,EAAAzuC,OAAA,CAEAi2L,EAAA//I,sBAAA,EAEA+/I,EAAAhgJ,gBAAAxsB,YAGA,IAAA48J,EAAA3kL,KACA+sC,EAAA64D,QAAA,SAAAhyD,GAEAA,EAAAk3I,WAAAllF,QAAA,SAAA6uF,GAEA,IAAAC,EAAAnP,EAAAqC,QAAA/sI,SAAA45I,EAAA3I,YAEA9sL,IAAA01L,GAEA/P,EAAAgQ,iBAAAJ,EAAAC,EAAAE,EAAAhD,EAAA+C,EAAAh2L,YAcAk2L,iBAAA,SAAAJ,EAAAC,EAAAE,EAAAhD,EAAAjzL,GAUA,IARA,IAAA+zL,OAAAxzL,IAAAw1L,EAAA/B,mBAAA+B,EAAA/B,mBAAA7jL,KAEAgmL,OAAA51L,IAAA01L,EAAAnC,SAAAmC,EAAAnC,SAAA3jL,KACAkoC,OAAA93C,IAAA01L,EAAArJ,QAAAqJ,EAAArJ,QAAAz8K,KAEAtQ,EAAA,EAAAi2L,EAAAjgJ,WAAAvsB,SAAAlM,MACAg5K,EAAA,IAAAxmJ,aAAA/vC,GAEAE,EAAA,EAAAA,EAAAs4C,EAAAx4C,OAAAE,IAAA,CAEA,IAAAs2L,EAAA,EAAAh+I,EAAAt4C,GAEAq2L,EAAAC,GAAAF,EAAA,EAAAp2L,GACAq2L,EAAAC,EAAA,GAAAF,EAAA,EAAAp2L,EAAA,GACAq2L,EAAAC,EAAA,GAAAF,EAAA,EAAAp2L,EAAA,GAKA,IAAAu2L,GACAvC,cAAAA,EACAF,gBAAAuC,GAIAG,EAAAh1L,KAAA6xL,WAAAkD,GAEAl7F,EAAA,IAAA2wB,EAAAp8E,uBAAA4mJ,EAAAl6I,OAAA,GACA++C,EAAAp7F,KAAAA,GAAAi2L,EAAA7L,SAEAhvF,EAAA/hF,aAAA45K,GAEA6C,EAAAhgJ,gBAAAxsB,SAAAxe,KAAAswF,IAKAk5F,aAAA,SAAAkC,GAEA,IAAAjD,EAAAiD,EAAAC,uBACAC,EAAAF,EAAAG,yBACAjiI,EAAA8hI,EAAAI,QAAAzmL,EACA0mL,KAeA,MAdA,kBAAAH,IAEA,gBAAAF,EAEAK,EAAAL,EAAAM,YAAA3mL,EAEA,iBAAAqmL,IAEAK,EAAAL,EAAAO,aAAA5mL,KAOA6mL,SAAA,EACAtiI,OAAAA,EACArc,QAAAw+I,EACAtD,YAAAA,EACAmD,cAAAA,IAMAlC,SAAA,SAAAyC,GAEA,IAAA1D,EAAA0D,EAAAR,uBACAC,EAAAO,EAAAN,yBACAjiI,EAAAuiI,EAAAC,GAAA/mL,EACA0mL,KAOA,MANA,kBAAAH,IAEAG,EAAAI,EAAAE,QAAAhnL,IAKA6mL,SAAA,EACAtiI,OAAAA,EACArc,QAAAw+I,EACAtD,YAAAA,EACAmD,cAAAA,IAMAxC,kBAAA,SAAAkD,GAEA,IAAA7D,EAAA6D,EAAAX,uBACAC,EAAAU,EAAAT,yBACAjiI,EAAA0iI,EAAAC,OAAAlnL,EACA0mL,KAOA,MANA,kBAAAH,IAEAG,EAAAO,EAAAE,WAAAnnL,IAKA6mL,SAAA,EACAtiI,OAAAA,EACArc,QAAAw+I,EACAtD,YAAAA,EACAmD,cAAAA,IAMAtC,qBAAA,SAAAmD,GAEA,IAAAhE,EAAAgE,EAAAd,uBACAC,EAAAa,EAAAZ,yBAEA,GAAA,yBAAApD,EAEA,OACAyD,SAAA,EACAtiI,QAAA,GACArc,SAAA,GACAk7I,YAAA,UACAmD,cAAAA,GAYA,IAPA,IAAAc,EAAAD,EAAAhmF,UAAAphG,EAKAsnL,KAEA13L,EAAA,EAAAA,EAAAy3L,EAAA33L,SAAAE,EAEA03L,EAAA3sL,KAAA/K,GAIA,OACAi3L,SAAA,EACAtiI,OAAA8iI,EACAn/I,QAAAo/I,EACAlE,YAAAA,EACAmD,cAAAA,IAMA9D,mBAAA,SAAAF,GAEA,QAAAnyL,IAAAwrH,EAAAi7B,WAGA,OADAl3I,QAAAmJ,MAAA,oIACA,IAAA8yG,EAAAn2E,eAIA,IAAAtgC,EAAA+zB,SAAAqpJ,EAAAgF,OAEA,GAAAjgJ,MAAAniC,GAGA,OADAxF,QAAAmJ,MAAA,8DAAAy5K,EAAAgF,MAAAhF,EAAA1iK,IACA,IAAA+7F,EAAAn2E,eAUA,IANA,IAYAwxG,EAAAC,EAZAJ,EAAA3xI,EAAA,EAEA4xI,EAAAwrC,EAAAiF,WAAAxnL,EACAg3I,KACAywC,EAAAlF,EAAAp2F,OAAAnsF,EAEApQ,EAAA,EAAAwL,EAAAqsL,EAAA/3L,OAAAE,EAAAwL,EAAAxL,GAAA,EAEAonJ,EAAAr8I,MAAA,IAAAihH,EAAArpG,SAAA/P,UAAAilL,EAAA73L,IAMA,GAAA,WAAA2yL,EAAAmF,KAEA1wC,EAAAr8I,KAAAq8I,EAAA,SAEA,GAAA,aAAAurC,EAAAmF,KAAA,CAEAzwC,EAAAH,EACAI,EAAAH,EAAArnJ,OAAA,EAAAunJ,EAEA,IAAA,IAAArnJ,EAAA,EAAAA,EAAAknJ,IAAAlnJ,EAEAonJ,EAAAr8I,KAAAq8I,EAAApnJ,IAMA,IAAAwnH,EAAA,IAAAwE,EAAAi7B,WAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAr3G,EAAAu3E,EAAArF,UAAA,EAAAilC,EAAAtnJ,QAEAg3C,EAAA,IAAAjH,aAAA,EAAAI,EAAAnwC,QAEAmwC,EAAAm3D,QAAA,SAAA9qD,EAAAt8C,GAEAs8C,EAAAxpC,QAAAgkC,EAAA,EAAA92C,KAIA,IAAA+xB,EAAA,IAAAi6F,EAAAn2E,eAGA,OAFA9jB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAAqI,EAAA,IAEA/kB,IASAq1J,EAAAhmL,WAEAuO,YAAAy3K,EAGA10J,MAAA,WAEA,IAAAqlK,KAEAC,EAAAx2L,KAAAy2L,aAEA,QAAAz3L,IAAAw3L,EAEA,IAAA,IAAAzlK,KAAAylK,EAAA,CAEA,IAAAE,EAAAF,EAAAzlK,GAEAygF,EAAAxxG,KAAA22L,QAAAD,GAEAH,EAAAhtL,KAAAioG,GAMA,OAAA+kF,GAIAE,WAAA,WAIA,QAAAz3L,IAAAumL,EAAAqC,QAAAgP,eAAA,CAEA,IAAAC,EAAA72L,KAAA82L,2BAEA92L,KAAA+2L,qBAAAF,GAEA,IAAAG,EAAAh3L,KAAAi3L,qBAAAJ,GACAL,EAAAx2L,KAAAk3L,gBAAAF,GAEA,OAAAR,IAOAM,yBAAA,WAEA,IAAAK,EAAA5R,EAAAqC,QAAAwP,mBAEAP,EAAA,IAAA5P,IAEA,IAAA,IAAAc,KAAAoP,EAAA,CAEA,IAAAE,EAAAF,EAAApP,GAEA,GAAA,OAAAsP,EAAAxO,SAAA3oL,MAAA,uBAAA,CAEA,IAAAo3L,GAEA7oK,GAAA4oK,EAAA5oK,GACA+mI,KAAA6hC,EAAAxO,SACArkE,WAIAqyE,EAAArpL,IAAA8pL,EAAA7oK,GAAA6oK,IAMA,OAAAT,GAOAE,qBAAA,SAAAF,GAEA,IAAAU,EAAAhS,EAAAqC,QAAAgP,eASA,IAAA,IAAA7O,KAAAwP,EAAA,CAEA,IAAAC,GAEA/oK,GAAA8oK,EAAAxP,GAAAt5J,GACAmiF,MAAA2mF,EAAAxP,GAAA0P,QAAA7oL,EAAAm9B,IAAAo6I,GACAr1J,OAAAymK,EAAAxP,GAAA2P,cAAA9oL,GAIA48I,EAAAg6B,EAAAzlL,IAAAy3L,EAAA/oK,IAEA,QAAAzvB,IAAAwsJ,EAAA,CAEA,IAAAmsC,EAAAnsC,EAAA+7B,QAAA,GAAAE,GACAmQ,EAAApsC,EAAA+7B,QAAA,GAAA17B,aAEA+rC,EAAA13L,MAAA,KAEA22L,EAAA92L,IAAA43L,GAAAnzE,OAAA,EAAAgzE,EAEAI,EAAA13L,MAAA,KAEA22L,EAAA92L,IAAA43L,GAAAnzE,OAAA,EAAAgzE,EAEAI,EAAA13L,MAAA,KAEA22L,EAAA92L,IAAA43L,GAAAnzE,OAAA,EAAAgzE,EAEAI,EAAA13L,MAAA,oBAAA22L,EAAA3qG,IAAAyrG,KAEAd,EAAA92L,IAAA43L,GAAAnzE,OAAA,MAAAgzE,MAaAP,qBAAA,SAAAJ,GAEA,IAAAgB,EAAAtS,EAAAqC,QAAAkQ,eAEAd,EAAA,IAAA/P,IAEA,IAAA,IAAAc,KAAA8P,EAAA,CAEA,IAAAE,KAEA1L,EAAA7G,EAAAzlL,IAAA+nC,SAAAigJ,IAEA,QAAA/oL,IAAAqtL,EAAA,CAGA,IAAA7gK,EAAA6gK,EAAA7gK,SAEAA,EAAAo6E,QAAA,SAAAh3E,EAAApwB,GAEA,GAAAq4L,EAAA3qG,IAAAt9D,EAAA64J,IAAA,CAEA,IAAA6P,EAAAT,EAAA92L,IAAA6uB,EAAA64J,IAGA,QAAAzoL,IAAAs4L,EAAA9yE,OAAA9kH,QAAAV,IAAAs4L,EAAA9yE,OAAA94G,QAAA1M,IAAAs4L,EAAA9yE,OAAAx3G,EAAA,CAEA,QAAAhO,IAAA+4L,EAAAv5L,GAAA,CAEA,IAAAw5L,EAAAxS,EAAAzlL,IAAA6uB,EAAA64J,IAAAF,QAAA5oH,OAAA,SAAApzC,GAEA,YAAAvsB,IAAAusB,EAAAsgI,eAEA,GAAA47B,GAEA,QAAAzoL,IAAAg5L,EAAA,CAEA,IAAAC,EAAA1S,EAAAqC,QAAAsE,MAAA8L,EAAA/3L,YAEAs7H,GAEA28D,UAAAD,EAAApP,SAAAr+D,EAAAyQ,gBAAA8D,iBAAAk5D,EAAApP,UAAA,GACApB,GAAAwQ,EAAAxpK,GACA0pK,iBAAA,EAAA,EAAA,GACAC,iBAAA,EAAA,EAAA,GACAC,cAAA,EAAA,EAAA,IAIA5S,EAAAt2J,SAAA,SAAAP,GAEAA,EAAA64J,KAAAwQ,EAAAxpK,KAEA8sG,EAAAx8C,UAAAnwD,EAAAnR,OAEAmR,EAAAvC,SAAAogK,gBAAAlxD,EAAAgX,WAAA3jH,EAAAvC,SAAAogK,cAAAl6C,eAMAhX,EAAAx8C,YAAAw8C,EAAAx8C,UAAA,IAAAyrC,EAAAxmG,SAIA,gBAAAi0K,IAAA18D,EAAA0zD,YAAAgJ,EAAA/I,YAAA5vL,OACA,iBAAA24L,IAAA18D,EAAA6zD,aAAA6I,EAAA5I,aAAA/vL,OAEAy4L,EAAAv5L,GAAA+8H,GAMAw8D,EAAAv5L,KAAAu5L,EAAAv5L,GAAA84L,EAAA9hC,MAAA8hC,QAEA,QAAAt4L,IAAAs4L,EAAA9yE,OAAA8zE,MAAA,CAEA,QAAAt5L,IAAA+4L,EAAAv5L,GAAA,CAEA,IAAA+5L,EAAA/S,EAAAzlL,IAAA6uB,EAAA64J,IAAAF,QAAA5oH,OAAA,SAAApzC,GAEA,YAAAvsB,IAAAusB,EAAAsgI,eAEA,GAAA47B,GAEA+Q,EAAAhT,EAAAzlL,IAAAw4L,GAAAhR,QAAA,GAAAE,GACAqE,EAAAtG,EAAAzlL,IAAAy4L,GAAAjR,QAAA,GAAAE,GAGAuQ,EAAAxS,EAAAzlL,IAAA+rL,GAAAvE,QAAA,GAAAE,GAEAwQ,EAAA1S,EAAAqC,QAAAsE,MAAA8L,GAEAz8D,GAEA28D,UAAAD,EAAApP,SAAAr+D,EAAAyQ,gBAAA8D,iBAAAk5D,EAAApP,UAAA,GACA4P,UAAAlT,EAAAqC,QAAA6C,SAAA8N,GAAA1P,UAIAkP,EAAAv5L,GAAA+8H,EAIAw8D,EAAAv5L,GAAA84L,EAAA9hC,MAAA8hC,MAQAN,EAAAxpL,IAAAs6B,SAAAigJ,GAAAgQ,IAMA,OAAAf,GAMAE,gBAAA,SAAAF,GAEA,IAAA0B,EAAAnT,EAAAqC,QAAA+Q,eAGAnC,KAEA,IAAA,IAAAzO,KAAA2Q,EAAA,CAEA,IAAAltK,EAAAg6J,EAAAzlL,IAAA+nC,SAAAigJ,IAAAv8J,SAEAA,EAAAltB,OAAA,GAIAiQ,QAAAC,KAAA,sIAIA,IAAAmuE,EAAAq6G,EAAAj3L,IAAAyrB,EAAA,GAAAi8J,IAEA+O,EAAAzO,IAEAtpL,KAAAi6L,EAAA3Q,GAAAc,SACAlsG,MAAAA,GAMA,OAAA65G,GAIAG,QAAA,SAAAD,GAEA,IAAAjlF,KAEAkzE,EAAA3kL,KAOA,OANA02L,EAAA/5G,MAAAipB,QAAA,SAAAgzF,GAEAnnF,EAAAA,EAAAhK,OAAAk9E,EAAAkU,eAAAD,MAIA,IAAApuE,EAAA9W,cAAAgjF,EAAAj4L,MAAA,EAAAgzG,IAIAonF,eAAA,SAAAD,GAEA,IAAAnnF,KAEA0mF,EAAA,IAAA3tE,EAAApzG,QACAghL,EAAA,IAAA5tE,EAAAz9G,WACAsrL,EAAA,IAAA7tE,EAAApzG,QAQA,GANAwhL,EAAA75G,WAAA65G,EAAA75G,UAAAz2D,UAAA6vK,EAAAC,EAAAC,GAEAF,EAAAA,EAAA7mL,UACA8mL,GAAA,IAAA5tE,EAAAphG,OAAAO,kBAAAyuK,EAAAQ,EAAArmD,YAAAjhI,UACA+mL,EAAAA,EAAA/mL,eAEAtS,IAAA45L,EAAA54F,GAAAngG,OAAA+3C,KAAAghJ,EAAA54F,EAAAwkB,QAAAlmH,OAAA,EAAA,CAEA,IAAAw6L,EAAA94L,KAAA+4L,oBAAAH,EAAAV,UAAAU,EAAA54F,EAAAwkB,OAAA2zE,EAAA,iBACAn5L,IAAA85L,GAAArnF,EAAAloG,KAAAuvL,GAIA,QAAA95L,IAAA45L,EAAAI,GAAAn5L,OAAA+3C,KAAAghJ,EAAAI,EAAAx0E,QAAAlmH,OAAA,EAAA,CAEA,IAAA26L,EAAAj5L,KAAAk5L,sBAAAN,EAAAV,UAAAU,EAAAI,EAAAx0E,OAAA4zE,EAAAQ,EAAA3J,YAAA2J,EAAAxJ,aAAAwJ,EAAArmD,iBACAvzI,IAAAi6L,GAAAxnF,EAAAloG,KAAA0vL,GAIA,QAAAj6L,IAAA45L,EAAAO,GAAAt5L,OAAA+3C,KAAAghJ,EAAAO,EAAA30E,QAAAlmH,OAAA,EAAA,CAEA,IAAA86L,EAAAp5L,KAAA+4L,oBAAAH,EAAAV,UAAAU,EAAAO,EAAA30E,OAAA6zE,EAAA,cACAr5L,IAAAo6L,GAAA3nF,EAAAloG,KAAA6vL,GAIA,QAAAp6L,IAAA45L,EAAAjN,cAAA,CAEA,IAAA0N,EAAAr5L,KAAAs5L,mBAAAV,QACA55L,IAAAq6L,GAAA5nF,EAAAloG,KAAA8vL,GAIA,OAAA5nF,GAIAsnF,oBAAA,SAAAb,EAAA1zE,EAAA+0E,EAAArwL,GAEA,IAAA0nG,EAAA5wG,KAAAw5L,mBAAAh1E,GACA1zF,EAAA9wB,KAAAy5L,uBAAA7oF,EAAA4T,EAAA+0E,GAEA,OAAA,IAAA/uE,EAAA/W,oBAAAykF,EAAA,IAAAhvL,EAAA0nG,EAAA9/E,IAIAooK,sBAAA,SAAAhB,EAAA1zE,EAAA+0E,EAAAtK,EAAAG,EAAA78C,QAEAvzI,IAAAwlH,EAAA9kH,IAEAM,KAAA05L,qBAAAl1E,EAAA9kH,GACA8kH,EAAA9kH,EAAAoxB,OAAA0zF,EAAA9kH,EAAAoxB,OAAAib,IAAAy+E,EAAAm+B,UAAAv8I,gBAGApN,IAAAwlH,EAAA94G,IAEA1L,KAAA05L,qBAAAl1E,EAAA94G,GACA84G,EAAA94G,EAAAolB,OAAA0zF,EAAA94G,EAAAolB,OAAAib,IAAAy+E,EAAAm+B,UAAAv8I,gBAGApN,IAAAwlH,EAAAx3G,IAEAhN,KAAA05L,qBAAAl1E,EAAAx3G,GACAw3G,EAAAx3G,EAAA8jB,OAAA0zF,EAAAx3G,EAAA8jB,OAAAib,IAAAy+E,EAAAm+B,UAAAv8I,WAIA,IAAAwkG,EAAA5wG,KAAAw5L,mBAAAh1E,GACA1zF,EAAA9wB,KAAAy5L,uBAAA7oF,EAAA4T,EAAA+0E,QAEAv6L,IAAAiwL,KAEAA,EAAAA,EAAAljJ,IAAAy+E,EAAAm+B,UAAAv8I,WACA7C,KAAAgpI,GAEA08C,GAAA,IAAAzkE,EAAAphG,OAAAhY,UAAA69K,GACAA,GAAA,IAAAzkE,EAAAz9G,YAAA4G,aAAAs7K,SAIAjwL,IAAAowL,KAEAA,EAAAA,EAAArjJ,IAAAy+E,EAAAm+B,UAAAv8I,WACA7C,KAAAgpI,GAEA68C,GAAA,IAAA5kE,EAAAphG,OAAAhY,UAAAg+K,GACAA,GAAA,IAAA5kE,EAAAz9G,YAAA4G,aAAAy7K,GAAAt5K,WASA,IALA,IAAApC,EAAA,IAAA82G,EAAAz9G,WACA6G,EAAA,IAAA42G,EAAAphG,MAEAuwK,KAEAn7L,EAAA,EAAAA,EAAAsyB,EAAAxyB,OAAAE,GAAA,EAEAoV,EAAApG,IAAAsjB,EAAAtyB,GAAAsyB,EAAAtyB,EAAA,GAAAsyB,EAAAtyB,EAAA,GAAA+zI,GAEA7+H,EAAAC,aAAAC,QAEA5U,IAAAiwL,GAAAv7K,EAAAwC,YAAA+4K,QACAjwL,IAAAowL,GAAA17K,EAAAxE,SAAAkgL,GAEA17K,EAAApC,QAAAqoL,EAAAn7L,EAAA,EAAA,GAIA,OAAA,IAAAgsH,EAAAjX,wBAAA2kF,EAAA,cAAAtnF,EAAA+oF,IAIAL,mBAAA,SAAAV,GAEA,IAAAp0E,EAAAo0E,EAAAjN,cAAAnnE,OAAA8zE,MACAxnK,EAAA0zF,EAAA1zF,OAAAib,IAAA,SAAAw6H,GAEA,OAAAA,EAAA,MAIAqzB,EAAAnU,EAAA92J,gBAAAiqK,EAAAV,WAAAt+I,sBAAAg/I,EAAAH,WAEA,OAAA,IAAAjuE,EAAAnX,oBAAAulF,EAAAV,UAAA,0BAAA0B,EAAA,IAAAp1E,EAAA5T,MAAA9/E,IAMA0oK,mBAAA,SAAAh1E,GAEA,IAAA5T,KAkBA,YAfA5xG,IAAAwlH,EAAA9kH,IAAAkxG,EAAAA,EAAAnJ,OAAA+c,EAAA9kH,EAAAkxG,aACA5xG,IAAAwlH,EAAA94G,IAAAklG,EAAAA,EAAAnJ,OAAA+c,EAAA94G,EAAAklG,aACA5xG,IAAAwlH,EAAAx3G,IAAA4jG,EAAAA,EAAAnJ,OAAA+c,EAAAx3G,EAAA4jG,QAGAA,EAAAA,EAAApzD,KAAA,SAAA5uC,EAAAC,GAEA,OAAAD,EAAAC,IAEA8vD,OAAA,SAAAk7H,EAAAt5L,EAAAuJ,GAEA,OAAAA,EAAAR,QAAAuwL,IAAAt5L,KAQAk5L,uBAAA,SAAA7oF,EAAA4T,EAAA+0E,GAEA,IAAAO,EAAAP,EAEAzoK,KAEAipK,GAAA,EACAC,GAAA,EACAC,GAAA,EAgDA,OA9CArpF,EAAAhL,QAAA,SAAArzC,GAOA,GALAiyD,EAAA9kH,IAAAq6L,EAAAv1E,EAAA9kH,EAAAkxG,MAAAtnG,QAAAipD,IACAiyD,EAAA94G,IAAAsuL,EAAAx1E,EAAA94G,EAAAklG,MAAAtnG,QAAAipD,IACAiyD,EAAAx3G,IAAAitL,EAAAz1E,EAAAx3G,EAAA4jG,MAAAtnG,QAAAipD,KAGA,IAAAwnI,EAAA,CAEA,IAAAG,EAAA11E,EAAA9kH,EAAAoxB,OAAAipK,GACAjpK,EAAAvnB,KAAA2wL,GACAJ,EAAA,GAAAI,OAKAppK,EAAAvnB,KAAAuwL,EAAA,IAIA,IAAA,IAAAE,EAAA,CAEA,IAAAG,EAAA31E,EAAA94G,EAAAolB,OAAAkpK,GACAlpK,EAAAvnB,KAAA4wL,GACAL,EAAA,GAAAK,OAIArpK,EAAAvnB,KAAAuwL,EAAA,IAIA,IAAA,IAAAG,EAAA,CAEA,IAAAG,EAAA51E,EAAAx3G,EAAA8jB,OAAAmpK,GACAnpK,EAAAvnB,KAAA6wL,GACAN,EAAA,GAAAM,OAIAtpK,EAAAvnB,KAAAuwL,EAAA,MAMAhpK,GAOA4oK,qBAAA,SAAA1zE,GAEA,IAAA,IAAAxnH,EAAA,EAAAA,EAAAwnH,EAAAl1F,OAAAxyB,OAAAE,IAAA,CAEA,IAAA+6L,EAAAvzE,EAAAl1F,OAAAtyB,EAAA,GACA67L,EAAAr0E,EAAAl1F,OAAAtyB,GAAA+6L,EAEAe,EAAAn7L,KAAAkR,IAAAgqL,GAEA,GAAAC,GAAA,IAAA,CAeA,IAbA,IAAAC,EAAAD,EAAA,IAEAzkL,EAAAwkL,EAAAE,EACAC,EAAAjB,EAAA1jL,EAEA4kL,EAAAz0E,EAAApV,MAAApyG,EAAA,GACAk8L,EAAA10E,EAAApV,MAAApyG,GAAAi8L,EACAE,EAAAD,EAAAH,EACAK,EAAAH,EAAAE,EAEAE,KACAC,KAEAF,EAAA50E,EAAApV,MAAApyG,IAEAq8L,EAAAtxL,KAAAqxL,GACAA,GAAAD,EAEAG,EAAAvxL,KAAAixL,GACAA,GAAA3kL,EAIAmwG,EAAApV,MAAAmqF,EAAA/0E,EAAApV,MAAApyG,EAAAq8L,GACA70E,EAAAl1F,OAAAiqK,EAAA/0E,EAAAl1F,OAAAtyB,EAAAs8L,OAaAjV,EAAAjmL,WAEAuO,YAAA03K,EAEAmV,YAAA,WAEA,OAAAh7L,KAAAi7L,UAAAj7L,KAAAk7L,cAAA,IAIAC,eAAA,WAEA,OAAAn7L,KAAAi7L,UAAAj7L,KAAAk7L,cAAA,IAIAE,eAAA,WAEA,OAAAp7L,KAAAq7L,aAIAC,UAAA,SAAA//D,GAEAv7H,KAAAi7L,UAAA1xL,KAAAgyH,GACAv7H,KAAAk7L,eAAA,GAIAK,SAAA,WAEAv7L,KAAAi7L,UAAAn1H,MACA9lE,KAAAk7L,eAAA,GAIAM,eAAA,SAAAj1B,EAAA9nK,GAEAuB,KAAAq7L,YAAA90B,EACAvmK,KAAAy7L,gBAAAh9L,GAIAyyB,MAAA,SAAAy6E,GAEA3rG,KAAAk7L,cAAA,EAEAl7L,KAAA07L,SAAA,IAAAzV,EACAjmL,KAAAi7L,aACAj7L,KAAAq7L,eACAr7L,KAAAy7L,gBAAA,GAEA,IAAA9W,EAAA3kL,KAEA3B,EAAAstG,EAAAttG,MAAA,WAmCA,OAjCAA,EAAAunG,QAAA,SAAA7rE,EAAAv7B,GAEA,IAAAm9L,EAAA5hK,EAAA75B,MAAA,aACA07L,EAAA7hK,EAAA75B,MAAA,aAEA,IAAAy7L,IAAAC,EAAA,CAEA,IAAAC,EAAA9hK,EAAA75B,MAAA,QAAAykL,EAAAuW,cAAA,gBAAA,IACAY,EAAA/hK,EAAA75B,MAAA,QAAAykL,EAAA,cAAA,8BACA1qH,EAAAlgC,EAAA75B,MAAA,SAAAykL,EAAAuW,cAAA,GAAA,MAEAW,EAEAlX,EAAAoX,eAAAhiK,EAAA8hK,GAEAC,EAEAnX,EAAAqX,kBAAAjiK,EAAA+hK,EAAAz9L,IAAAG,IAEAy7D,EAEA0qH,EAAA4W,WAEAxhK,EAAA75B,MAAA,cAIAykL,EAAAsX,2BAAAliK,MAMA/5B,KAAA07L,UAIAK,eAAA,SAAAhiK,EAAAqmB,GAEA,IAAAq7E,EAAAr7E,EAAA,GAAAob,OAAAQ,QAAA,KAAA,IAAAA,QAAA,KAAA,IAEAkgI,EAAA97I,EAAA,GAAA/hD,MAAA,KAAA0tC,IAAA,SAAAypH,GAEA,OAAAA,EAAAh6F,OAAAQ,QAAA,KAAA,IAAAA,QAAA,KAAA,MAIAu/D,GAAA98H,KAAAg9H,GACA0gE,EAAAn8L,KAAAo8L,cAAAF,GAEAG,EAAAr8L,KAAAm7L,iBAGA,IAAAn7L,KAAAk7L,cAEAl7L,KAAA07L,SAAAptL,IAAAmtH,EAAAF,GAKAE,KAAA4gE,GAGA,aAAA5gE,EAEA4gE,EAAA9L,SAAAhnL,KAAAgyH,QAEAv8H,IAAAq9L,EAAA5gE,GAAAhtG,KAEA4tK,EAAA5gE,MACA4gE,EAAA5gE,GAAA4gE,EAAA5gE,GAAAhtG,IAAA4tK,EAAA5gE,IAIA,KAAA0gE,EAAA1tK,KAAA4tK,EAAA5gE,GAAA0gE,EAAA1tK,IAAA8sG,IAEA,iBAAA4gE,EAAA1tK,IAEA4tK,EAAA5gE,MACA4gE,EAAA5gE,GAAA0gE,EAAA1tK,IAAA8sG,GAEA,iBAAAE,IAEA4gE,EAAA5gE,GAAA,aAAAA,GAAAF,GACAA,GAMA,iBAAA4gE,EAAA1tK,KAAA8sG,EAAA9sG,GAAA0tK,EAAA1tK,IACA,KAAA0tK,EAAA19L,OAAA88H,EAAAstD,SAAAsT,EAAA19L,MACA,KAAA09L,EAAAjzL,OAAAqyH,EAAAovD,SAAAwR,EAAAjzL,MAEAlJ,KAAAs7L,UAAA//D,IAIA6gE,cAAA,SAAAD,GAEA,IAAA1tK,EAAA0tK,EAAA,GAEA,KAAAA,EAAA,KAEA1tK,EAAAqZ,SAAAq0J,EAAA,IAEAjmJ,MAAAznB,KAEAA,EAAA0tK,EAAA,KAMA,IAAA19L,EAAA,GAAAyK,EAAA,GASA,OAPAizL,EAAA79L,OAAA,IAEAG,EAAA09L,EAAA,GAAAngI,QAAA,WAAA,IACA9yD,EAAAizL,EAAA,KAIA1tK,GAAAA,EAAAhwB,KAAAA,EAAAyK,KAAAA,IAIA8yL,kBAAA,SAAAjiK,EAAAqmB,EAAAk8I,GAEA,IAAAC,EAAAn8I,EAAA,GAAA4b,QAAA,KAAA,IAAAA,QAAA,KAAA,IAAAR,OACAghI,EAAAp8I,EAAA,GAAA4b,QAAA,KAAA,IAAAA,QAAA,KAAA,IAAAR,OAKA,YAAA+gI,GAAA,MAAAC,IAEAA,EAAAF,EAAAtgI,QAAA,KAAA,IAAAA,QAAA,KAAA,IAAAR,QAIA,IAAA6gI,EAAAr8L,KAAAm7L,iBACAsB,EAAAJ,EAAA59L,KAEA,GAAA,iBAAAg+L,EAAA,CAQA,GAAA,MAAAF,EAAA,CAEA,IAAAG,EAAAF,EAAAn+L,MAAA,KAAA0L,MAAA,GACAomG,EAAAroE,SAAA40J,EAAA,IACAtsF,EAAAtoE,SAAA40J,EAAA,IAEAC,EAAAH,EAAAn+L,MAAA,KAAA0L,MAAA,GAEA4yL,EAAAA,EAAA5wJ,IAAA,SAAA8tJ,GAEA,OAAAA,EAAAr+H,OAAAQ,QAAA,KAAA,MAIAugI,EAAA,cA+7BA,SAAA3tL,EAAAC,GAEA,IAAA,IAAArQ,EAAA,EAAA+zB,EAAA3jB,EAAAtQ,OAAA0L,EAAA6E,EAAAvQ,OAAAE,EAAAwL,EAAAxL,IAAA+zB,IAEA3jB,EAAA2jB,GAAA1jB,EAAArQ,GAj8BAo+L,CADAJ,GAAArsF,EAAAC,GACAusF,QAEA39L,IAAAq9L,EAAAE,KAEAF,EAAAE,OAOA,SAAAA,IAAAF,EAAA5tK,GAAA+tK,GAGAD,KAAAF,GAAA15K,MAAAC,QAAAy5K,EAAAE,IAEAF,EAAAE,GAAAhzL,KAAAizL,GAIA,MAAAD,EAAAF,EAAAE,GAAAC,EACAH,EAAAztL,EAAA4tL,EAIAx8L,KAAAw7L,eAAAa,EAAAE,GAGA,MAAAA,GAAA,MAAAC,EAAAzyL,OAAA,KAEAsyL,EAAAztL,EAAAiuL,EAAAL,SApDAx8L,KAAA88L,yBAAA/iK,EAAAwiK,EAAAC,IA0DAP,2BAAA,SAAAliK,GAEA,IAAAsiK,EAAAr8L,KAAAm7L,iBAEAkB,EAAAztL,GAAAmrB,EAIA,MAAAA,EAAAhwB,OAAA,KAEAsyL,EAAAztL,EAAAiuL,EAAAR,EAAAztL,KAOAkuL,yBAAA,SAAA/iK,EAAAwiK,EAAAC,GAMA,IAAAO,EAAAP,EAAAn+L,MAAA,MAAA0tC,IAAA,SAAAk3H,GAEA,OAAAA,EAAAznG,OAAAQ,QAAA,MAAA,IAAAA,QAAA,KAAA,OAIAghI,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGA,OAAAE,GAEA,IAAA,MACA,IAAA,OACA,IAAA,OACA,IAAA,YACA,IAAA,SACA,IAAA,SACA,IAAA,cACAG,EAAAz1J,WAAAy1J,GACA,MAEA,IAAA,QACA,IAAA,WACA,IAAA,WACA,IAAA,kBACA,IAAA,eACA,IAAA,cACAA,EAAAP,EAAAO,GAMAp9L,KAAAg7L,cAAAgC,IAEA9zL,KAAA+zL,EACAI,MAAAH,EACAI,KAAAH,EACA79L,MAAA89L,GAIAp9L,KAAAw7L,eAAAx7L,KAAAg7L,cAAAgC,KASAlX,EAAAlmL,WAEAuO,YAAA23K,EAEA50J,MAAA,SAAAiiC,GAEA,IAAAouG,EAAA,IAAAwkB,EAAA5yH,GACAouG,EAAAg8B,KAAA,IAEA,IAAAt8K,EAAAsgJ,EAAAuF,YAEAv4J,QAAA5B,IAAA,wCAAAsU,GAIA,IAFA,IAAAy6K,EAAA,IAAAzV,GAEAjmL,KAAAw9L,aAAAj8B,IAAA,CAEA,IAAAhmC,EAAAv7H,KAAA85K,UAAAvY,EAAAtgJ,GACA,OAAAs6G,GAAAmgE,EAAAptL,IAAAitH,EAAA98H,KAAA88H,GAIA,OAAAmgE,GAKA8B,aAAA,SAAAj8B,GAUA,OAAAA,EAAA7tI,OAAA,IAAA,GAEA6tI,EAAAk8B,YAAA,IAAA,IAAA,KAAAl8B,EAAA7tI,OAIA6tI,EAAAk8B,YAAA,IAAA,IAAAl8B,EAAA7tI,QAOAomJ,UAAA,SAAAvY,EAAAtgJ,GAEA,IAAAs6G,KAGAmiE,EAAAz8K,GAAA,KAAAsgJ,EAAAo8B,YAAAp8B,EAAAuF,YACA82B,EAAA38K,GAAA,KAAAsgJ,EAAAo8B,YAAAp8B,EAAAuF,YAKA+2B,GAFA58K,GAAA,KAAAsgJ,EAAAo8B,YAAAp8B,EAAAuF,YAEAvF,EAAAjJ,YACA75J,EAAA8iK,EAAAu8B,UAAAD,GAGA,GAAA,IAAAH,EAAA,OAAA,KAIA,IAFA,IAAAK,KAEAv/L,EAAA,EAAAA,EAAAo/L,EAAAp/L,IAEAu/L,EAAAx0L,KAAAvJ,KAAAg+L,cAAAz8B,IAKA,IAAA9yI,EAAAsvK,EAAAz/L,OAAA,EAAAy/L,EAAA,GAAA,GACAlV,EAAAkV,EAAAz/L,OAAA,EAAAy/L,EAAA,GAAA,GACApT,EAAAoT,EAAAz/L,OAAA,EAAAy/L,EAAA,GAAA,GAMA,IAFAxiE,EAAA0iE,eAAA,IAAAL,GAAAr8B,EAAAk8B,cAAAC,EAEAA,EAAAn8B,EAAAk8B,aAAA,CAEA,IAAAS,EAAAl+L,KAAA85K,UAAAvY,EAAAtgJ,GAEA,OAAAi9K,GAAAl+L,KAAAm+L,aAAA1/L,EAAA88H,EAAA2iE,GAWA,OAPA3iE,EAAAwiE,aAAAA,EAEA,iBAAAtvK,IAAA8sG,EAAA9sG,GAAAA,GACA,KAAAo6J,IAAAttD,EAAAstD,SAAAA,GACA,KAAA8B,IAAApvD,EAAAovD,SAAAA,GACA,KAAAlsL,IAAA88H,EAAA98H,KAAAA,GAEA88H,GAIA4iE,aAAA,SAAA1/L,EAAA88H,EAAA2iE,GAGA,IAAA,IAAAA,EAAAD,eAAA,CAEA,IAAA3+L,EAAA4+L,EAAAH,aAAA,GAEAp7K,MAAAC,QAAAtjB,IAEAi8H,EAAA2iE,EAAAz/L,MAAAy/L,EAEAA,EAAAtvL,EAAAtP,GAIAi8H,EAAA2iE,EAAAz/L,MAAAa,OAIA,GAAA,gBAAAb,GAAA,MAAAy/L,EAAAz/L,KAAA,CAEA,IAAAqL,KAEAo0L,EAAAH,aAAAn4F,QAAA,SAAAxlD,EAAA5hD,GAGA,IAAAA,GAAAsL,EAAAP,KAAA62C,UAIAphD,IAAAu8H,EAAAiqD,cAEAjqD,EAAAiqD,gBAIAjqD,EAAAiqD,YAAAj8K,KAAAO,QAEA,GAAA,iBAAAo0L,EAAAz/L,KAAA,CAEA,IAAAm5C,EAAA/3C,OAAA+3C,KAAAsmJ,GAEAtmJ,EAAAguD,QAAA,SAAA70E,GAEAwqG,EAAAxqG,GAAAmtK,EAAAntK,UAIA,GAAA,iBAAAtyB,GAAA,MAAAy/L,EAAAz/L,KAAA,CAEA,IAIA2+L,EAJAJ,EAAAkB,EAAAH,aAAA,GACAd,EAAAiB,EAAAH,aAAA,GACAb,EAAAgB,EAAAH,aAAA,GACAZ,EAAAe,EAAAH,aAAA,GAGA,IAAAf,EAAA1zL,QAAA,UAAA0zL,EAAAA,EAAAhhI,QAAA,OAAA,SACA,IAAAihI,EAAA3zL,QAAA,UAAA2zL,EAAAA,EAAAjhI,QAAA,OAAA,SAIAohI,EAFA,UAAAH,GAAA,aAAAA,GAAA,WAAAA,GAAA,aAAAA,GAAA,IAAAA,EAAA3zL,QAAA,SAGA40L,EAAAH,aAAA,GACAG,EAAAH,aAAA,GACAG,EAAAH,aAAA,IAKAG,EAAAH,aAAA,GAKAxiE,EAAAyhE,IAEA9zL,KAAA+zL,EACAI,MAAAH,EACAI,KAAAH,EACA79L,MAAA89L,aAIAp+L,IAAAu8H,EAAA2iE,EAAAz/L,MAEA,iBAAAy/L,EAAAzvK,IAEA8sG,EAAA2iE,EAAAz/L,SACA88H,EAAA2iE,EAAAz/L,MAAAy/L,EAAAzvK,IAAAyvK,GAIA3iE,EAAA2iE,EAAAz/L,MAAAy/L,EAMA,aAAAA,EAAAz/L,MAEAkkB,MAAAC,QAAA24G,EAAA2iE,EAAAz/L,SAEA88H,EAAA2iE,EAAAz/L,OAAA88H,EAAA2iE,EAAAz/L,QAIA88H,EAAA2iE,EAAAz/L,MAAA8K,KAAA20L,SAEAl/L,IAAAu8H,EAAA2iE,EAAAz/L,MAAAy/L,EAAAzvK,MAEA8sG,EAAA2iE,EAAAz/L,MAAAy/L,EAAAzvK,IAAAyvK,IAQAF,cAAA,SAAAz8B,GAEA,IAAAr4J,EAAAq4J,EAAAu8B,UAAA,GAEA,OAAA50L,GAEA,IAAA,IACA,OAAAq4J,EAAA68B,aAEA,IAAA,IACA,OAAA78B,EAAAkF,aAEA,IAAA,IACA,OAAAlF,EAAAC,aAEA,IAAA,IACA,OAAAD,EAAA88B,WAEA,IAAA,IACA,OAAA98B,EAAA+8B,WAEA,IAAA,IACA,IAAAhgM,EAAAijK,EAAAuF,YACA,OAAAvF,EAAAg9B,eAAAjgM,GAEA,IAAA,IACA,IAAAA,EAAAijK,EAAAuF,YACA,OAAAvF,EAAAu8B,UAAAx/L,GAEA,IAAA,IACA,OAAAijK,EAAAi9B,WAEA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IAEA,IAAAC,EAAAl9B,EAAAuF,YACAvmJ,EAAAghJ,EAAAuF,YACA43B,EAAAn9B,EAAAuF,YAEA,GAAA,IAAAvmJ,EAEA,OAAArX,GAEA,IAAA,IACA,IAAA,IACA,OAAAq4J,EAAAo9B,gBAAAF,GAEA,IAAA,IACA,OAAAl9B,EAAAq9B,gBAAAH,GAEA,IAAA,IACA,OAAAl9B,EAAAs9B,gBAAAJ,GAEA,IAAA,IACA,OAAAl9B,EAAAu9B,cAAAL,GAEA,IAAA,IACA,OAAAl9B,EAAAw9B,cAAAN,QAMA,IAAApZ,GAEA92K,QAAAmJ,MAAA,qHAIA,IAAAsnL,EAAA,IAAA3Z,EAAA4Z,QAAA,IAAAxxJ,WAAA8zH,EAAAg9B,eAAAG,KACAQ,EAAA,IAAAnZ,EAAAiZ,EAAAG,aAAAhsI,QAEA,OAAAjqD,GAEA,IAAA,IACA,IAAA,IACA,OAAAg2L,EAAAP,gBAAAF,GAEA,IAAA,IACA,OAAAS,EAAAN,gBAAAH,GAEA,IAAA,IACA,OAAAS,EAAAL,gBAAAJ,GAEA,IAAA,IACA,OAAAS,EAAAJ,cAAAL,GAEA,IAAA,IACA,OAAAS,EAAAH,cAAAN,GAIA,QACA,MAAA,IAAAzwL,MAAA,0CAAA9E,MAgBA68K,EAAAnmL,WAEAuO,YAAA43K,EAEA0X,UAAA,WAEA,OAAAz9L,KAAAqR,QAIAqiB,KAAA,WAEA,OAAA1zB,KAAAgmL,GAAA7yH,OAAA0sH,YAIA0d,KAAA,SAAAj/L,GAEA0B,KAAAqR,QAAA/S,GAOA8/L,WAAA,WAEA,OAAA,IAAA,EAAAp+L,KAAAs4J,aAIAqmC,gBAAA,SAAAjrK,GAIA,IAFA,IAAA9kB,KAEApQ,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAEAoQ,EAAArF,KAAAvJ,KAAAo+L,cAIA,OAAAxvL,GAIA0pJ,SAAA,WAEA,IAAAh5J,EAAAU,KAAAgmL,GAAA1tB,SAAAt4J,KAAAqR,QAEA,OADArR,KAAAqR,QAAA,EACA/R,GAIAk/L,SAAA,WAEA,IAAAl/L,EAAAU,KAAAgmL,GAAAwY,SAAAx+L,KAAAqR,OAAArR,KAAAomK,cAEA,OADApmK,KAAAqR,QAAA,EACA/R,GAIA++L,SAAA,WAEA,IAAA/+L,EAAAU,KAAAgmL,GAAAqY,SAAAr+L,KAAAqR,OAAArR,KAAAomK,cAEA,OADApmK,KAAAqR,QAAA,EACA/R,GAIAw/L,cAAA,SAAAprK,GAIA,IAFA,IAAA9kB,KAEApQ,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAEAoQ,EAAArF,KAAAvJ,KAAAq+L,YAIA,OAAAzvL,GAIAk4J,UAAA,WAEA,IAAAxnK,EAAAU,KAAAgmL,GAAAlf,UAAA9mK,KAAAqR,OAAArR,KAAAomK,cAEA,OADApmK,KAAAqR,QAAA,EACA/R,GASAg/L,SAAA,WAEA,IAAAvyL,EAAAC,EAeA,OAbAhM,KAAAomK,cAEAr6J,EAAA/L,KAAA8mK,YACA96J,EAAAhM,KAAA8mK,cAIA96J,EAAAhM,KAAA8mK,YACA/6J,EAAA/L,KAAA8mK,aAKA,WAAA96J,GAEAA,EAAA,YAAAA,EAGA,cAFAD,EAAA,YAAAA,KAEAC,EAAAA,EAAA,EAAA,cAIA,WAAAA,GAFAD,EAAAA,EAAA,EAAA,cAMA,WAAAC,EAAAD,GAIAgzL,cAAA,SAAArrK,GAIA,IAFA,IAAA9kB,KAEApQ,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAEAoQ,EAAArF,KAAAvJ,KAAAs+L,YAIA,OAAA1vL,GAKA+uL,UAAA,WAEA,IAAA5xL,EAAAC,EAcA,OAZAhM,KAAAomK,cAEAr6J,EAAA/L,KAAA8mK,YACA96J,EAAAhM,KAAA8mK,cAIA96J,EAAAhM,KAAA8mK,YACA/6J,EAAA/L,KAAA8mK,aAIA,WAAA96J,EAAAD,GAIAy1J,WAAA,WAEA,IAAAliK,EAAAU,KAAAgmL,GAAAxkB,WAAAxhK,KAAAqR,OAAArR,KAAAomK,cAEA,OADApmK,KAAAqR,QAAA,EACA/R,GAIAu/L,gBAAA,SAAAnrK,GAIA,IAFA,IAAA9kB,KAEApQ,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAEAoQ,EAAArF,KAAAvJ,KAAAwhK,cAIA,OAAA5yJ,GAIA63J,WAAA,WAEA,IAAAnnK,EAAAU,KAAAgmL,GAAAvf,WAAAzmK,KAAAqR,OAAArR,KAAAomK,cAEA,OADApmK,KAAAqR,QAAA,EACA/R,GAIAs/L,gBAAA,SAAAlrK,GAIA,IAFA,IAAA9kB,KAEApQ,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAEAoQ,EAAArF,KAAAvJ,KAAAymK,cAIA,OAAA73J,GAIA2vL,eAAA,SAAA7qK,GAEA,IAAAp0B,EAAAU,KAAAgmL,GAAA7yH,OAAAppD,MAAA/J,KAAAqR,OAAArR,KAAAqR,OAAAqiB,GAEA,OADA1zB,KAAAqR,QAAAqiB,EACAp0B,GAIAw+L,UAAA,SAAApqK,GAKA,IAFA,IAAA9kB,KAEApQ,EAAA,EAAAA,EAAAk1B,EAAAl1B,IAEAoQ,EAAApQ,GAAAwB,KAAAs4J,WAIA,IAAA8mC,EAAAxwL,EAAAtF,QAAA,GAGA,OAFA81L,GAAA,IAAAxwL,EAAAA,EAAA7E,MAAA,EAAAq1L,IAEA50E,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAA7+B,MAUAq3K,EAAArmL,WAEAuO,YAAA83K,EAEA33K,IAAA,SAAAyiB,EAAAw1I,GAEAvmK,KAAA+wB,GAAAw1I,IAmEA,IAAA84B,KAGA,SAAAtpD,EAAA69C,EAAAT,EAAAQ,EAAA2L,GAEA,IAAA/+L,EAEA,OAAA++L,EAAAtN,aAEA,IAAA,kBACAzxL,EAAAqzL,EACA,MACA,IAAA,YACArzL,EAAA4yL,EACA,MACA,IAAA,YACA5yL,EAAAozL,EACA,MACA,IAAA,UACApzL,EAAA++L,EAAAxoJ,QAAA,GACA,MACA,QACAvoC,QAAAC,KAAA,mDAAA8wL,EAAAtN,aAIA,kBAAAsN,EAAAnK,gBAAA50L,EAAA++L,EAAAxoJ,QAAAv2C,IAEA,IAAA4vG,EAAA5vG,EAAA++L,EAAA7J,SACArlF,EAAAD,EAAAmvF,EAAA7J,SAEA,OA8KA,SAAA7mL,EAAAC,EAAAshG,EAAAC,GAEA,IAAA,IAAA5xG,EAAA2xG,EAAA59E,EAAA,EAAA/zB,EAAA4xG,EAAA5xG,IAAA+zB,IAEA3jB,EAAA2jB,GAAA1jB,EAAArQ,GAIA,OAAAoQ,EAtLA7E,CAAAs1L,EAAAC,EAAAnsI,OAAAg9C,EAAAC,GAIA,IAAAmvF,EAAA,IAAA/0E,EAAAphG,MACAo2K,EAAA,IAAAh1E,EAAApzG,QAKA,SAAAu1K,EAAAF,GAEA,IAAAgT,EAAA,IAAAj1E,EAAAxmG,QACA07K,EAAA,IAAAl1E,EAAAxmG,QACA27K,EAAA,IAAAn1E,EAAAxmG,QACA47K,EAAA,IAAAp1E,EAAAxmG,QAEA67K,EAAA,IAAAr1E,EAAAxmG,QACA87K,EAAA,IAAAt1E,EAAAxmG,QACA+7K,EAAA,IAAAv1E,EAAAxmG,QACAg8K,EAAA,IAAAx1E,EAAAxmG,QACAi8K,EAAA,IAAAz1E,EAAAxmG,QAEAk8K,EAAA,IAAA11E,EAAAxmG,QACAm8K,EAAA,IAAA31E,EAAAxmG,QAEA2qK,EAAAlC,EAAA,YAAAA,EAAAkC,YAAA,EAIA,GAFAlC,EAAAsC,aAAA0Q,EAAAv4K,YAAAs4K,EAAApuL,UAAAq7K,EAAAsC,cAEAtC,EAAAwC,YAAA,CAEA,IAAAnlL,EAAA2iL,EAAAwC,YAAAljJ,IAAAy+E,EAAAm+B,UAAAv8I,UACAtC,EAAAP,KAAAkjL,EAAAl6C,YACAmtD,EAAAt6K,sBAAAm6K,EAAAnuL,UAAAtH,IAIA,GAAA2iL,EAAA/tK,SAAA,CAEA,IAAA5U,EAAA2iL,EAAA/tK,SAAAqtB,IAAAy+E,EAAAm+B,UAAAv8I,UACAtC,EAAAP,KAAAkjL,EAAAl6C,YACAotD,EAAAv6K,sBAAAm6K,EAAAnuL,UAAAtH,IAIA,GAAA2iL,EAAA2C,aAAA,CAEA,IAAAtlL,EAAA2iL,EAAA2C,aAAArjJ,IAAAy+E,EAAAm+B,UAAAv8I,UACAtC,EAAAP,KAAAkjL,EAAAl6C,YACAqtD,EAAAx6K,sBAAAm6K,EAAAnuL,UAAAtH,IAIA2iL,EAAA5tK,OAAAghL,EAAAhhL,MAAA2gL,EAAApuL,UAAAq7K,EAAA5tK,QAGA4tK,EAAA8C,eAAAwQ,EAAA74K,YAAAs4K,EAAApuL,UAAAq7K,EAAA8C,gBACA9C,EAAAgD,cAAAqQ,EAAA54K,YAAAs4K,EAAApuL,UAAAq7K,EAAAgD,eACAhD,EAAAkD,gBAAAqQ,EAAA94K,YAAAs4K,EAAApuL,UAAAq7K,EAAAkD,iBACAlD,EAAAoD,eAAAoQ,EAAA/4K,YAAAs4K,EAAApuL,UAAAq7K,EAAAoD,gBAGApD,EAAAC,oBAAAwT,EAAAzT,EAAAC,mBAGA,IAAA0T,EAAAV,EAAAxwL,SAAAywL,GAAAzwL,SAAA0wL,GACAS,EAAA,IAAA71E,EAAAxmG,QACAk8K,EAAAl7K,gBAAAq7K,GAGA,IACAC,EACAC,EACAC,EAOAC,EAVAC,EAAA,IAAAl2E,EAAAxmG,QAWA,GANA08K,EAAAh8K,aAAAw7K,GACAM,EAAAE,EAAAljL,WAAAkjL,GAAAxxL,SAAAgxL,GACAK,EAAAF,EAAA7iL,WAAA6iL,GAAAnxL,SAAAsxL,GACAF,EAAAT,EAGA,IAAAlR,EAEA8R,EAAAJ,EAAAnxL,SAAAkxL,GAAAlxL,SAAAqxL,GAAArxL,SAAAoxL,QAEA,GAAA,IAAA3R,EAEA8R,EAAAJ,EAAAnxL,SAAAqxL,GAAArxL,SAAAkxL,GAAAlxL,SAAAoxL,OAEA,CAEA,IAAAK,GAAA,IAAAn2E,EAAAxmG,SAAA5V,KAAAyxL,GAEAe,EAAAL,EAAArxL,SAAAyxL,EAAAnjL,WAAAmjL,IAEAF,EAAAJ,EAAAnxL,SAAAkxL,GAAAlxL,SAAA0xL,GAAA1xL,SAAAoxL,GAKA,IAAAO,EAAApB,EAAAvwL,SAAA8wL,GAAA9wL,SAAA+wL,GAAA/wL,SAAAwwL,GAAAxwL,SAAAywL,GAAAzwL,SAAA0wL,GAAA1wL,SAAA+wL,EAAAziL,WAAAyiL,IAAA/wL,SAAA6wL,GAAA7wL,SAAA4wL,GAAA5wL,SAAA2wL,GAAA3wL,SAAA4wL,EAAAtiL,WAAAsiL,IAEAgB,GAAA,IAAAt2E,EAAAxmG,SAAAU,aAAAm8K,GAEAE,EAAAb,EAAAhxL,SAAA4xL,GAKA,OAJAX,EAAAz7K,aAAAq8K,GAEAF,EAAAV,EAAAjxL,SAAAuxL,GAQA,SAAA5R,EAAA96K,GAIA,IAAAitL,GACA,MACA,MACA,MACA,MACA,MACA,OAIA,OAAA,KAZAjtL,EAAAA,GAAA,IAcAxF,QAAAC,KAAA,uGACAwyL,EAAA,IAIAA,EAAAjtL,GAMA,SAAA8oL,EAAAv9L,GAEA,IAAAwK,EAAAxK,EAAAjB,MAAA,KAAA0tC,IAAA,SAAAw6H,GAEA,OAAA5+H,WAAA4+H,KAIA,OAAAz8J,EAIA,SAAAw8K,EAAAnzH,EAAAg9C,EAAAC,GAKA,YAHApxG,IAAAmxG,IAAAA,EAAA,QACAnxG,IAAAoxG,IAAAA,EAAAj9C,EAAA0sH,YAEAr1D,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAA0lB,EAAAg9C,EAAAC,IA2BA,SAAA2qF,EAAA1vL,EAAA9K,EAAA+K,GAEA,OAAAD,EAAAtB,MAAA,EAAAxJ,GAAAknG,OAAAn8F,GAAAm8F,OAAAp8F,EAAAtB,MAAAxJ,IAIA,OAAA+kL,EAz/HA,GA6/HA96D,EAAA86D,YAGArnL,EAAA,0CACA,mBACA,SAAAusH,GAiOA,OArNAA,EAAAy2E,YAAA,SAAAxlF,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAkhM,YAAA,GAIA12E,EAAAy2E,YAAArhM,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAy2E,YAEArlF,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAsqE,EAAA3kL,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAA0oE,EAAAlpE,SACAN,EAAAW,QAAA6oE,EAAAxmL,MACAg9G,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAwqE,EAAAzzJ,MAAAy6E,KAEAyO,EAAAC,IAIAnpF,MAAA,SAAAF,GAEA,IAAAm2C,GAAAznE,EAAA,EAAAgM,EAAA,EAAAsB,EAAA,EAAAuC,EAAA,EAAAgE,EAAA,EAAA4tL,WAAA,EAAAC,UAAA,GACA52K,KAEA62K,OAAAriM,EAEAsiM,EAAA,IAAA92E,EAAA/mD,mBAAA18B,MAAA,WACAu6J,EAAA7iM,KAAA,OAEA,IAAA8iM,EAAA,IAAA/2E,EAAA/mD,mBAAA18B,MAAA,QAGA,SAAAy6J,EAAAznK,GAEAsnK,GAAAvmJ,UAAA2mJ,cAAAz0L,EAAA+sB,EAAA/sB,GACAwd,EAAAjhB,KAAA83L,GAKA,SAAAK,EAAAjvK,EAAAC,QAEA1zB,IAAAqiM,GAEAG,EAAA/uK,GAIAsH,EAAAonK,WAEAE,EAAAvmJ,OAAAvxC,KAAAkpB,EAAA/yB,EAAA+yB,EAAA/mB,EAAA+mB,EAAAzlB,GACAq0L,EAAAvmJ,OAAAvxC,KAAAmpB,EAAAhzB,EAAAgzB,EAAAhnB,EAAAgnB,EAAA1lB,KAIAq0L,EAAAI,WAAAl4L,KAAAkpB,EAAA/yB,EAAA+yB,EAAA/mB,EAAA+mB,EAAAzlB,GACAq0L,EAAAI,WAAAl4L,KAAAmpB,EAAAhzB,EAAAgzB,EAAAhnB,EAAAgnB,EAAA1lB,IAMA,SAAAgtB,EAAA/oB,EAAAC,GAEA,OAAAi2D,EAAAi6H,SAAAlwL,EAAAA,EAAAD,EAIA,SAAA0wL,EAAA1wL,EAAAC,GAEA,OAAAi2D,EAAAi6H,SAAAnwL,EAAAC,EAAAA,EAxCAqwL,EAAA9iM,KAAA,WA8CA,IAFA,IAAAi9D,EAAA1qC,EAAAgrC,QAAA,OAAA,IAAA39D,MAAA,MAEAG,EAAA,EAAAA,EAAAk9D,EAAAp9D,OAAAE,IAAA,CAEA,IAAAojM,EAAAlmI,EAAAl9D,GAAAH,MAAA,KACAwjM,EAAAD,EAAA,GAAA/2L,cAGAi3L,KAeA,GAdAF,EAAAj4L,OAAA,GAAAi8F,QAAA,SAAAwkD,GAEA,QAAAprJ,IAAAorJ,EAAA,GAAA,CAEA,IAAAr5H,EAAAq5H,EAAA,GAAAp2C,cACA10G,EAAAqoC,WAAAyiH,EAAA16B,UAAA,IACAoyE,EAAA/wK,GAAAzxB,KAQA,OAAAuiM,GAAA,OAAAA,EAAA,CAEA,IAAA9nK,GACAr6B,OAAAV,IAAA8iM,EAAApiM,EAAAiiM,EAAAx6H,EAAAznE,EAAAoiM,EAAApiM,GAAAynE,EAAAznE,EACAgM,OAAA1M,IAAA8iM,EAAAp2L,EAAAi2L,EAAAx6H,EAAAz7D,EAAAo2L,EAAAp2L,GAAAy7D,EAAAz7D,EACAsB,OAAAhO,IAAA8iM,EAAA90L,EAAA20L,EAAAx6H,EAAAn6D,EAAA80L,EAAA90L,GAAAm6D,EAAAn6D,EACAuC,OAAAvQ,IAAA8iM,EAAAvyL,EAAAoyL,EAAAx6H,EAAA53D,EAAAuyL,EAAAvyL,GAAA43D,EAAA53D,EACAgE,OAAAvU,IAAA8iM,EAAAvuL,EAAAouL,EAAAx6H,EAAA5zD,EAAAuuL,EAAAvuL,GAAA4zD,EAAA5zD,GAIAymB,EAAAmtC,EAAA53D,EAAAwqB,EAAAxqB,GAAA,IAEAwqB,EAAAonK,UAAAnnK,EAAAmtC,EAAA53D,EAAAwqB,EAAAxqB,GAAA,OAEAvQ,GAAAqiM,GAAAtnK,EAAA/sB,GAAAq0L,EAAAr0L,GAEAw0L,EAAAznK,IAMA2nK,EAAAv6H,EAAAptC,GACAotC,EAAAptC,OAEA,GAAA,OAAA8nK,GAAA,OAAAA,QAKA,GAAA,QAAAA,EAGA16H,EAAAi6H,UAAA,OAEA,GAAA,QAAAS,EAGA16H,EAAAi6H,UAAA,OAEA,GAAA,QAAAS,EAAA,CAGA,IAAA9nK,EAAAotC,EACAptC,EAAAr6B,OAAAV,IAAA8iM,EAAApiM,EAAAoiM,EAAApiM,EAAAq6B,EAAAr6B,EACAq6B,EAAAruB,OAAA1M,IAAA8iM,EAAAp2L,EAAAo2L,EAAAp2L,EAAAquB,EAAAruB,EACAquB,EAAA/sB,OAAAhO,IAAA8iM,EAAA90L,EAAA80L,EAAA90L,EAAA+sB,EAAA/sB,EACA+sB,EAAAxqB,OAAAvQ,IAAA8iM,EAAAvyL,EAAAuyL,EAAAvyL,EAAAwqB,EAAAxqB,EACA43D,EAAAptC,GAUA,SAAAgoK,EAAAjnJ,EAAAqmJ,GAEA,IAAA5wK,EAAA,IAAAi6F,EAAAn2E,eACA9jB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAA0M,EAAA,IAEA,IAAAsyD,EAAA,IAAAod,EAAA/vB,aAAAlqE,EAAA4wK,EAAAI,EAAAD,GACAl0F,EAAA3uG,KAAA,QAAAD,EACA8vB,EAAAhgB,IAAA8+F,GAIA,IAAA9+E,EAAA,IAAAk8F,EAAA7yC,MAGA,GAFArpD,EAAA7vB,KAAA,QAEAuB,KAAAkhM,WAEA,IAAA,IAAA1iM,EAAA,EAAAA,EAAAgsB,EAAAlsB,OAAAE,IAAA,CAEA,IAAAm+E,EAAAnyD,EAAAhsB,GACAujM,EAAAplH,EAAA7hC,QAAA,GACAinJ,EAAAplH,EAAA8kH,YAAA,OAIA,CAIA,IAFA,IAAA3mJ,KAAA2mJ,KAEAjjM,EAAA,EAAAA,EAAAgsB,EAAAlsB,OAAAE,IAAA,CAEA,IAAAm+E,EAAAnyD,EAAAhsB,GAEAs8C,EAAAA,EAAA2sD,OAAA9qB,EAAA7hC,QACA2mJ,EAAAA,EAAAh6F,OAAA9qB,EAAA8kH,YAIAM,EAAAjnJ,GAAA,GACAinJ,EAAAN,GAAA,GAMA,OAFAnzK,EAAA5a,WAAAC,aAAA,IAAA62G,EAAAphG,OAAAjqB,KAAAiL,GAAA,EAAA,EAAA,IAEAkkB,KAMAk8F,EAAAy2E,cAGAhjM,EAAA,yCACA,mBACA,SAAAusH,GAitGA,OAxsGAA,EAAAw3E,WAAA,WAEA,SAAAA,EAAAvmF,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAiiM,YAAA,KACAjiM,KAAAkiM,UAAA,KAIAF,EAAApiM,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAA6zL,EAEApmF,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAEAsB,EAFA3gE,EAAAh7C,KAMA27G,EAFA,KAAA37G,KAAA27G,aAEA37G,KAAA27G,aAEA,KAAA37G,KAAA7B,KAEA6B,KAAA7B,KAIAqsH,EAAA5B,YAAAM,eAAAxmG,GAOAs4B,EAAAygE,QAAAb,UAAAl4F,GAEA,IAAAy/K,EAAA,SAAA5yL,GAEA8qG,EAEAA,EAAA9qG,GAIAhB,QAAAmJ,MAAAnI,GAIAyrC,EAAAygE,QAAAX,UAAAp4F,GACAs4B,EAAAygE,QAAAZ,QAAAn4F,IAIAy4F,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SAEAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAsE,gBAAA,eAEA,oBAAAzkE,EAAA0gE,aAEAP,EAAAuE,oBAAA,GAIAvE,EAAAS,KAAAl5F,EAAA,SAAAsO,GAEA,IAEAgqB,EAAA9pB,MAAAF,EAAA2qF,EAAA,SAAAymF,GAEAjoF,EAAAioF,GAEApnJ,EAAAygE,QAAAZ,QAAAn4F,IAEAy/K,GAEA,MAAA5yL,GAEA4yL,EAAA5yL,KAIA6qG,EAAA+nF,IAIAE,eAAA,SAAAJ,GAGA,OADAjiM,KAAAiiM,YAAAA,EACAjiM,MAIAsiM,aAAA,SAAAJ,GAGA,OADAliM,KAAAkiM,UAAAA,EACAliM,MAIAkxB,MAAA,SAAAF,EAAA7yB,EAAAg8G,EAAAE,GAEA,IAAAyyD,EACA7rH,KAEA,GAAA,iBAAAjwB,EAEA87I,EAAA97I,MAEA,CAEA,IAAAuxK,EAAA/3E,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,EAAA,EAAA,IAEA,GAAAuxK,IAAAC,EAAA,CAEA,IAEAvhJ,EAAAwhJ,EAAAC,iBAAA,IAoWA,SAAA1xK,GAEAhxB,KAAAvB,KAAAgkM,EAAAC,gBACA1iM,KAAA8sK,QAAA,KACA9sK,KAAAwhL,KAAA,KAEA,IAAAmhB,EAAA,IAAAjyF,SAAA1/E,EAAA,EAAA4xK,GAQA,GANA5iM,KAAAi/G,QACAsjF,MAAA/3E,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,EAAAjnB,MAAA,EAAA,KACAkX,QAAA0hL,EAAA77B,UAAA,GAAA,GACAxoK,OAAAqkM,EAAA77B,UAAA,GAAA,IAGA9mK,KAAAi/G,OAAAsjF,QAAAC,EAEA,MAAA,IAAAx0L,MAAA,qDAEA,GAAAhO,KAAAi/G,OAAAh+F,QAAA,EAEA,MAAA,IAAAjT,MAAA,kDAIA,IAAA60L,EAAA,IAAAnyF,SAAA1/E,EAAA4xK,GACAE,EAAA,EAEA,KAAAA,EAAAD,EAAAhjB,YAAA,CAEA,IAAAkjB,EAAAF,EAAA/7B,UAAAg8B,GAAA,GACAA,GAAA,EAEA,IAAAE,EAAAH,EAAA/7B,UAAAg8B,GAAA,GAGA,GAFAA,GAAA,EAEAE,IAAAC,EAAAlzK,KAAA,CAEA,IAAAmzK,EAAA,IAAAz1J,WAAAzc,EAAA4xK,EAAAE,EAAAC,GACA/iM,KAAA8sK,QAAAtiD,EAAA5B,YAAAC,WAAAq6E,QAEA,GAAAF,IAAAC,EAAAE,IAAA,CAEA,IAAAC,EAAAR,EAAAE,EACA9iM,KAAAwhL,KAAAxwJ,EAAAjnB,MAAAq5L,EAAAA,EAAAL,GAMAD,GAAAC,EAIA,GAAA,OAAA/iM,KAAA8sK,QAEA,MAAA,IAAA9+J,MAAA,6CA3ZA,CAAAgjB,GAEA,MAAAtZ,GAGA,YADA2iG,GAAAA,EAAA3iG,IAKAo1J,EAAA7rH,EAAAwhJ,EAAAC,iBAAA51B,aAIAA,EAAAtiD,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,IAMA,IAAA6iF,EAAA9jF,KAAAmB,MAAA47I,GAEA,QAAA9tK,IAAA60G,EAAAmoE,OAAAnoE,EAAAmoE,MAAA/6J,QAAA,GAAA,EAEAo5F,GAAAA,EAAA,IAAArsG,MAAA,gFAFA,CAOA,GAAA6lG,EAAAwvF,eAEA,IAAA,IAAA7kM,EAAA,EAAAA,EAAAq1G,EAAAwvF,eAAA/kM,SAAAE,EAAA,CAEA,IAAA8kM,EAAAzvF,EAAAwvF,eAAA7kM,GACA+kM,EAAA1vF,EAAA0vF,uBAEA,OAAAD,GAEA,KAAAb,EAAAe,oBACAviJ,EAAAqiJ,GAAA,IAAAG,EAAA5vF,GACA,MAEA,KAAA4uF,EAAAiB,wBACAziJ,EAAAqiJ,GAAA,IAAAK,EACA,MAEA,KAAAlB,EAAAmB,oBACA3iJ,EAAAqiJ,GAAA,IAAAO,EACA,MAEA,KAAApB,EAAAqB,sCACA7iJ,EAAAqiJ,GAAA,IAAAS,EACA,MAEA,KAAAtB,EAAAuB,2BACA/iJ,EAAAqiJ,GAAA,IAAAW,EAAApwF,EAAA7zG,KAAAiiM,aACA,MAEA,KAAAQ,EAAAyB,iBACAjjJ,EAAAqiJ,GAAA,IAAAa,EAAAnkM,KAAAkiM,WACA,MAEA,KAAAO,EAAA2B,sBACAnjJ,EAAAqiJ,GAAA,IAAAe,EACA,MAEA,KAAA5B,EAAA6B,sBACArjJ,EAAAqiJ,GAAA,IAAAiB,EACA,MAEA,QAEAhB,EAAAj6L,QAAAg6L,IAAA,GAEA/0L,QAAAC,KAAA,wCAAA80L,EAAA,OAUA,IAAA1kF,EAAA,IAAA4lF,EAAA3wF,EAAA5yD,GAEA9iD,KAAAA,GAAA6B,KAAA27G,cAAA,GACAD,YAAA17G,KAAA07G,YACAD,QAAAz7G,KAAAy7G,UAIAmD,EAAA1tF,MAAAipF,EAAAE,OA8CA,IAAAooF,GACAC,gBAAA,kBACAsB,2BAAA,6BACAR,oBAAA,sBACAE,wBAAA,0BACAI,sCAAA,sCACAF,oBAAA,sBACAQ,sBAAA,wBACAE,sBAAA,wBACAJ,iBAAA,oBASA,SAAAC,EAAAjC,GAEA,IAAAA,EAEA,MAAA,IAAAl0L,MAAA,uFAIAhO,KAAAvB,KAAAgkM,EAAAyB,iBACAlkM,KAAAkiM,UAAAA,EASA,SAAAuB,EAAA5vF,GAEA7zG,KAAAvB,KAAAgkM,EAAAe,oBAEA,IAAAvxH,EAAA4hC,EAAA5yD,YAAA4yD,EAAA5yD,WAAAwhJ,EAAAe,yBACAxjM,KAAAykM,UAAAxyH,EAAAlxB,WAgEA,SAAA8iJ,IAEA7jM,KAAAvB,KAAAgkM,EAAAmB,oBA+CA,SAAAD,IAEA3jM,KAAAvB,KAAAgkM,EAAAiB,wBA/GAD,EAAA7jM,UAAA8kM,UAAA,SAAAC,GAEA,IACAC,EADAC,EAAA7kM,KAAAykM,UAAAE,GAGA59J,EAAA,IAAAyjF,EAAA/jF,MAAA,eACAznC,IAAA6lM,EAAA99J,OAAAA,EAAA31B,UAAAyzL,EAAA99J,OAEA,IAAA56B,OAAAnN,IAAA6lM,EAAA14L,MAAA04L,EAAA14L,MAAA,EAEA,OAAA04L,EAAA37L,MAEA,IAAA,eACA07L,EAAA,IAAAp6E,EAAA5E,iBAAA7+E,IACA3mC,OAAA2nB,SAAAva,IAAA,EAAA,GAAA,GACAo3L,EAAAt2L,IAAAs2L,EAAAxkM,QACA,MAEA,IAAA,SACAwkM,EAAA,IAAAp6E,EAAA/E,WAAA1+E,IACAnZ,SAAAzhB,EACA,MAEA,IAAA,QACAy4L,EAAA,IAAAp6E,EAAApF,UAAAr+E,IACAnZ,SAAAzhB,EAEA04L,EAAAx/H,KAAAw/H,EAAAx/H,SACAw/H,EAAAx/H,KAAAy/H,oBAAA9lM,IAAA6lM,EAAAx/H,KAAAy/H,eAAAD,EAAAx/H,KAAAy/H,eAAA,EACAD,EAAAx/H,KAAA0/H,oBAAA/lM,IAAA6lM,EAAAx/H,KAAA0/H,eAAAF,EAAAx/H,KAAA0/H,eAAA5lM,KAAAiL,GAAA,EACAw6L,EAAAr0L,MAAAs0L,EAAAx/H,KAAA0/H,eACAH,EAAAj8H,SAAA,EAAAk8H,EAAAx/H,KAAAy/H,eAAAD,EAAAx/H,KAAA0/H,eACAH,EAAAxkM,OAAA2nB,SAAAva,IAAA,EAAA,GAAA,GACAo3L,EAAAt2L,IAAAs2L,EAAAxkM,QACA,MAEA,QACA,MAAA,IAAA4N,MAAA,6CAAA62L,EAAA37L,KAAA,MAcA,OARA07L,EAAA78K,SAAAva,IAAA,EAAA,EAAA,GAEAo3L,EAAAr0I,MAAA,OAEAvxD,IAAA6lM,EAAA38H,YAAA08H,EAAA18H,UAAA28H,EAAA38H,WAEA08H,EAAAnmM,KAAAomM,EAAApmM,MAAA,SAAAkmM,EAEAxkB,QAAAC,QAAAwkB,IAeAf,EAAAjkM,UAAAolM,gBAAA,WAEA,OAAAx6E,EAAA1+E,mBAIA+3J,EAAAjkM,UAAAqlM,aAAA,SAAAC,EAAAC,EAAAvmF,GAEA,IAAA2mB,KAEA2/D,EAAAn+J,MAAA,IAAAyjF,EAAA/jF,MAAA,EAAA,EAAA,GACAy+J,EAAAp7J,QAAA,EAEA,IAAAs7J,EAAAD,EAAAE,qBAEA,GAAAD,EAAA,CAEA,GAAAziL,MAAAC,QAAAwiL,EAAAE,iBAAA,CAEA,IAAAx7L,EAAAs7L,EAAAE,gBAEAJ,EAAAn+J,MAAA31B,UAAAtH,GACAo7L,EAAAp7J,QAAAhgC,EAAA,QAIA9K,IAAAomM,EAAAG,kBAEAhgE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,MAAAE,EAAAG,mBAMA,OAAAplB,QAAAe,IAAA37C,IAeAo+D,EAAA/jM,UAAAolM,gBAAA,WAEA,OAAAx6E,EAAAjnD,sBAIAogI,EAAA/jM,UAAAqlM,aAAA,SAAAC,EAAAC,EAAAvmF,GAEA,IAAA2mB,KAEAtzD,EAAAkzH,EAAAlkJ,WAAAjhD,KAAAvB,MA0BA,QAxBAO,IAAAizE,EAAAwzH,kBAEAP,EAAA90J,UAAA6hC,EAAAwzH,sBAIAzmM,IAAAizE,EAAAyzH,kBAEAngE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,eAAAjzH,EAAAyzH,wBAIA1mM,IAAAizE,EAAA0zH,2BAEAT,EAAA70J,mBAAA4hC,EAAA0zH,+BAIA3mM,IAAAizE,EAAA2zH,2BAEArgE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,wBAAAjzH,EAAA2zH,iCAIA5mM,IAAAizE,EAAA4zH,yBAEAtgE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,qBAAAjzH,EAAA4zH,8BAEA7mM,IAAAizE,EAAA4zH,uBAAAhnL,OAAA,CAEA,IAAAA,EAAAozD,EAAA4zH,uBAAAhnL,MAEAqmL,EAAA30J,qBAAA,IAAAi6E,EAAA19G,QAAA+R,EAAAA,GAMA,OAAAshK,QAAAe,IAAA37C,IAKA,IAAAi9D,EAAA,OACAI,EAAA,GACAK,GAAAlzK,KAAA,WAAAozK,IAAA,SAoEA,SAAAc,EAAApwF,EAAAouF,GAEA,IAAAA,EAEA,MAAA,IAAAj0L,MAAA,uDAIAhO,KAAAvB,KAAAgkM,EAAAuB,2BACAhkM,KAAA6zG,KAAAA,EACA7zG,KAAAiiM,YAAAA,EACAjiM,KAAAiiM,YAAAphB,UAoEA,SAAAwjB,IAEArkM,KAAAvB,KAAAgkM,EAAA2B,sBAkDA,SAAA0B,EAAAplG,GAEA8pB,EAAAlnD,qBAAA1iE,KAAAZ,MAEAA,KAAA+lM,kCAAA,EAGA,IAAAC,GACA,yBACA,mCACA,UACAphJ,KAAA,MAEAqhJ,GACA,2BACA,qCACA,UACArhJ,KAAA,MAEAshJ,GACA,kCACA,yBACA,wDACA,mDACA,oFACA,yCACA,UACAthJ,KAAA,MAEAuhJ,GACA,uCACA,2BACA,4DACA,kFACA,2CACA,UACAvhJ,KAAA,MAEAwhJ,GACA,6BACA,4CACA,kFACA,+DACA,6HACA,mDACA,uEACA,gDACAxhJ,KAAA,MAEAtE,GACApQ,UAAA5wC,OAAA,IAAAkrH,EAAA/jF,OAAAW,OAAA,WACAi/J,YAAA/mM,MAAA,GACA8sC,aAAA9sC,MAAA,MACAgnM,eAAAhnM,MAAA,OAGAU,KAAAumM,eAAAjmJ,EAGAtgD,KAAAyvC,gBAAA,SAAAiV,GAEA,IAAA,IAAA8hJ,KAAAlmJ,EAEAoE,EAAApE,SAAAkmJ,GAAAlmJ,EAAAkmJ,GAIA9hJ,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,2BAAA,0BACAtX,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,2BAAA,6BACAtX,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,wCAAAgqI,GACAthJ,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,wCAAAiqI,GACAvhJ,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,mCAAAkqI,GACAxhJ,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,mCAAAmqI,GACAzhJ,EAAA5D,eAAA4D,EAAA5D,eAAAkb,QAAA,sCAAAoqI,IAKAvmM,OAAAyN,iBACAtN,MAEAkwC,UACAnwC,IAAA,WAAA,OAAAugD,EAAApQ,SAAA5wC,OACAkO,IAAA,SAAAa,GAAAiyC,EAAApQ,SAAA5wC,MAAA+O,IAEA+9B,aACArsC,IAAA,WAAA,OAAAugD,EAAAlU,YAAA9sC,OACAkO,IAAA,SAAAa,GAAAiyC,EAAAlU,YAAA9sC,MAAA+O,IAEAg4L,YACAtmM,IAAA,WAAA,OAAAugD,EAAA+lJ,WAAA/mM,OACAkO,IAAA,SAAAa,GAAAiyC,EAAA+lJ,WAAA/mM,MAAA+O,IAEAi4L,eACAvmM,IAAA,WAAA,OAAAugD,EAAAgmJ,cAAAhnM,OACAkO,IAAA,SAAAa,GAEAiyC,EAAAgmJ,cAAAhnM,MAAA+O,EAEAA,GAEArO,KAAA4gD,QAAA6lJ,kBAAA,GAEAzmM,KAAA4gD,QAAA8lJ,iBAAA,YAIA1mM,KAAA4gD,QAAA8lJ,wBACA1mM,KAAA4gD,QAAA6lJ,8BAUAzmM,KAAA8vC,iBACA9vC,KAAA6vC,iBACA7vC,KAAAkxC,oBACAlxC,KAAAixC,aAEAjxC,KAAAgtC,UAAA0zD,GAsBA,SAAAqjG,IAEA,OAEAtlM,KAAAgkM,EAAAqB,sCAEA6C,0BACA,QACA,MACA,WACA,oBACA,QACA,iBACA,WACA,oBACA,cACA,UACA,YACA,YACA,gBACA,kBACA,oBACA,mBACA,cACA,WACA,gBACA,aACA,WACA,SACA,kBACA,mBAGA3B,gBAAA,WAEA,OAAAc,GAIAb,aAAA,SAAAC,EAAAC,EAAAvmF,GAEA,IAAAgoF,EAAAzB,EAAAlkJ,WAAAjhD,KAAAvB,MAEAymM,EAAAn+J,MAAA,IAAAyjF,EAAA/jF,MAAA,EAAA,EAAA,GACAy+J,EAAAp7J,QAAA,EAEA,IAAAy7F,KAEA,GAAA5iH,MAAAC,QAAAgkL,EAAAC,eAAA,CAEA,IAAA/8L,EAAA88L,EAAAC,cAEA3B,EAAAn+J,MAAA31B,UAAAtH,GACAo7L,EAAAp7J,QAAAhgC,EAAA,GAoBA,QAhBA9K,IAAA4nM,EAAAE,gBAEAvhE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,MAAA0B,EAAAE,iBAIA5B,EAAAl1J,SAAA,IAAAw6E,EAAA/jF,MAAA,EAAA,EAAA,GACAy+J,EAAAmB,gBAAArnM,IAAA4nM,EAAAG,iBAAAH,EAAAG,iBAAA,EACA7B,EAAAh1J,SAAA,IAAAs6E,EAAA/jF,MAAA,EAAA,EAAA,GAEA9jB,MAAAC,QAAAgkL,EAAAI,iBAEA9B,EAAAh1J,SAAA9+B,UAAAw1L,EAAAI,qBAIAhoM,IAAA4nM,EAAAK,0BAAA,CAEA,IAAAC,EAAAN,EAAAK,0BACA1hE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,gBAAAgC,IACA3hE,EAAAh8H,KAAAq1G,EAAA4mF,cAAAN,EAAA,cAAAgC,IAIA,OAAA/mB,QAAAe,IAAA37C,IAIA4hE,eAAA,SAAAjC,GAEA,IAAAx0K,EAAA,IAAAo1K,EAAAZ,GA0CA,OAzCAx0K,EAAAlE,KAAA,EAEAkE,EAAAqW,MAAAm+J,EAAAn+J,MAEArW,EAAAqb,SAAA/sC,IAAAkmM,EAAAn5J,IAAA,KAAAm5J,EAAAn5J,IAEArb,EAAAsb,SAAA,KACAtb,EAAAub,kBAAA,EAEAvb,EAAAwb,WAAAltC,IAAAkmM,EAAAh5J,MAAA,KAAAg5J,EAAAh5J,MACAxb,EAAAyb,eAAA,EAEAzb,EAAAsf,SAAAk1J,EAAAl1J,SACAtf,EAAAuf,kBAAA,EACAvf,EAAAygB,iBAAAnyC,IAAAkmM,EAAA/zJ,YAAA,KAAA+zJ,EAAA/zJ,YAEAzgB,EAAA+f,aAAAzxC,IAAAkmM,EAAAz0J,QAAA,KAAAy0J,EAAAz0J,QACA/f,EAAAggB,UAAA,EAEAhgB,EAAAigB,eAAA3xC,IAAAkmM,EAAAv0J,UAAA,KAAAu0J,EAAAv0J,UACAjgB,EAAAkgB,cAAA45E,EAAA7hH,sBAEAu8L,EAAAr0J,cAAAngB,EAAAmgB,YAAAq0J,EAAAr0J,aAEAngB,EAAAogB,gBAAA,KACApgB,EAAAqgB,kBAAA,EACArgB,EAAAsgB,iBAAA,EAEAtgB,EAAA0b,iBAAAptC,IAAAkmM,EAAA94J,YAAA,KAAA84J,EAAA94J,YACA1b,EAAAwf,SAAAg1J,EAAAh1J,SAEAxf,EAAA41K,mBAAAtnM,IAAAkmM,EAAAoB,cAAA,KAAApB,EAAAoB,cACA51K,EAAA21K,WAAAnB,EAAAmB,WAEA31K,EAAA2b,SAAA,KAEA3b,EAAA4b,YAAAttC,IAAAkmM,EAAA54J,OAAA,KAAA44J,EAAA54J,OACA5b,EAAA0gB,gBAAA,EAEA1gB,EAAA+b,gBAAA,IAEA/b,IAaA,SAAA6zK,IAEAvkM,KAAAvB,KAAAgkM,EAAA6B,sBAUA,SAAA8C,EAAAn1F,EAAAC,EAAAC,EAAAC,GAEAoY,EAAAxY,YAAApxG,KAAAZ,KAAAiyG,EAAAC,EAAAC,EAAAC,GAjaA6xF,EAAArkM,UAAAynM,gBAAA,SAAA/vB,EAAA14D,GAEA,IAAA/K,EAAA7zG,KAAA6zG,KACAouF,EAAAjiM,KAAAiiM,YACAqF,EAAAhwB,EAAAr2H,WAAAjhD,KAAAvB,MAAA8oM,WACAC,EAAAlwB,EAAAr2H,WAAAjhD,KAAAvB,MAAA61C,WACAmzJ,KACAC,KACAC,KAEA,IAAA,IAAAzlB,KAAAslB,EAAA,CAEA,IAAAI,EAAAC,EAAA3lB,IAAAA,EAAAluE,cAEAyzF,EAAAG,GAAAJ,EAAAtlB,GAIA,IAAAA,KAAA5K,EAAAhjI,WAAA,CAEA,IAAAszJ,EAAAC,EAAA3lB,IAAAA,EAAAluE,cAEA,QAAAh1G,IAAAwoM,EAAAtlB,GAAA,CAEA,IAAA4lB,EAAAj0F,EAAAk0F,UAAAzwB,EAAAhjI,WAAA4tI,IACA8lB,EAAAC,EAAAH,EAAAE,eAEAL,EAAAC,GAAAI,EACAN,EAAAE,IAAA,IAAAE,EAAA36J,YAMA,OAAAyxE,EAAAspF,cAAA,aAAAZ,GAAA5oH,KAAA,SAAA6oH,GAEA,OAAA,IAAApnB,QAAA,SAAAC,GAEA6hB,EAAA1iB,gBAAAgoB,EAAA,SAAAh3K,GAEA,IAAA,IAAA2xJ,KAAA3xJ,EAAA+jB,WAAA,CAEA,IAAA9iC,EAAA+e,EAAA+jB,WAAA4tI,GACA/0I,EAAAu6J,EAAAxlB,QAEAljL,IAAAmuC,IAAA37B,EAAA27B,WAAAA,GAIAizI,EAAA7vJ,IAEAk3K,EAAAE,QAmBAtD,EAAAzkM,UAAAuoM,cAAA,SAAA1mL,EAAAs9D,GA8BA,OA5BAt9D,EAAAA,EAAAvT,aAEAlP,IAAA+/E,EAAA1tE,QAEAoQ,EAAApQ,OAAAD,UAAA2tE,EAAA1tE,aAIArS,IAAA+/E,EAAArgE,WAEA+C,EAAA/C,SAAAqgE,EAAArgE,eAIA1f,IAAA+/E,EAAAlgE,OAEA4C,EAAAd,OAAAvP,UAAA2tE,EAAAlgE,YAIA7f,IAAA+/E,EAAAqpH,UAEA75L,QAAAC,KAAA,wCAAAxO,KAAAvB,KAAA,kCAIAgjB,EAAA0zB,aAAA,EAEA1zB,GA+IAqkL,EAAAlmM,UAAAC,OAAAkiB,OAAAyoG,EAAAlnD,qBAAA1jE,WACAkmM,EAAAlmM,UAAAuO,YAAA23L,EAEAA,EAAAlmM,UAAAwO,KAAA,SAAA3N,GAWA,OATA+pH,EAAAlnD,qBAAA1jE,UAAAwO,KAAAxN,KAAAZ,KAAAS,GACAT,KAAAosC,YAAA3rC,EAAA2rC,YACApsC,KAAAkwC,SAAA9hC,KAAA3N,EAAAyvC,UACAlwC,KAAAsmM,cAAA7lM,EAAA6lM,cACAtmM,KAAAqmM,WAAA5lM,EAAA4lM,kBACArmM,KAAA8vC,iBACA9vC,KAAA6vC,iBACA7vC,KAAAkxC,oBACAlxC,KAAAixC,aACAjxC,MAoKAonM,EAAAxnM,UAAAC,OAAAkiB,OAAAyoG,EAAAxY,YAAApyG,WACAwnM,EAAAxnM,UAAAuO,YAAAi5L,EAEAA,EAAAxnM,UAAAs1G,iBAAA,SAAA30G,GAUA,IALA,IAAAmrE,EAAA1rE,KAAAoyG,aACAthF,EAAA9wB,KAAAkyG,aACAP,EAAA3xG,KAAA2xG,UACAtgG,EAAA9Q,EAAAoxG,EAAA,EAAAA,EAEAnzG,EAAA,EAAAA,IAAAmzG,EAAAnzG,IAEAktE,EAAAltE,GAAAsyB,EAAAzf,EAAA7S,GAIA,OAAAktE,GAIA07H,EAAAxnM,UAAA+0G,aAAAyyF,EAAAxnM,UAAAs1G,iBAEAkyF,EAAAxnM,UAAA60G,UAAA2yF,EAAAxnM,UAAAs1G,iBAEAkyF,EAAAxnM,UAAAk1G,aAAA,SAAAv4E,EAAAzE,EAAAnsB,EAAAosB,GAyBA,IAvBA,IAAA2zC,EAAA1rE,KAAAoyG,aACAthF,EAAA9wB,KAAAkyG,aACAtiB,EAAA5vF,KAAA2xG,UAEA02F,EAAA,EAAAz4G,EACA04G,EAAA,EAAA14G,EAEA24G,EAAAxwK,EAAAD,EAEA9hB,GAAArK,EAAAmsB,GAAAywK,EACAp0F,EAAAn+F,EAAAA,EACAggG,EAAA7B,EAAAn+F,EAEAmgG,EAAA55E,EAAA+rK,EACAlyF,EAAAD,EAAAmyF,EAEAl0L,GAAA,EAAA4hG,EAAA,EAAA7B,EACA9/F,EAAA2hG,EAAA7B,EACAh9E,EAAA,EAAA/iB,EACAD,EAAAE,EAAA8/F,EAAAn+F,EAIAxX,EAAA,EAAAA,IAAAoxF,EAAApxF,IAAA,CAEA,IAAAg0B,EAAA1B,EAAAslF,EAAA53G,EAAAoxF,GACA+tF,EAAA7sJ,EAAAslF,EAAA53G,EAAA6pM,GAAAE,EACA91K,EAAA3B,EAAAqlF,EAAA33G,EAAAoxF,GACA44G,EAAA13K,EAAAqlF,EAAA33G,GAAA+pM,EAEA78H,EAAAltE,GAAA24B,EAAA3E,EAAAre,EAAAwpK,EAAAvpK,EAAAqe,EAAApe,EAAAm0L,EAIA,OAAA98H,GAUA,IAAA+8H,GACAC,MAAA,KAEAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,WAAA,MACAC,OAAA,KACAC,OAAA,MACAC,WAAA,MACAC,OAAA,EACAC,MAAA,EACAC,UAAA,EACAC,WAAA,EACAC,UAAA,EACAC,eAAA,EACAC,aAAA,EACAC,cAAA,KACAC,eAAA,MAGA1B,GACA2B,KAAAr8J,UACAs8J,KAAAp8J,WACAq8J,KAAAj8J,WACAk8J,KAAAh8J,YACAi8J,KAAA77J,YACA87J,KAAA57J,cAGA67J,GACAC,KAAA3/E,EAAA9lH,cACA0lM,KAAA5/E,EAAA3lH,aACAwlM,KAAA7/E,EAAA7lH,2BACA2lM,KAAA9/E,EAAA1lH,0BACAylM,KAAA//E,EAAA5lH,0BACA4lM,KAAAhgF,EAAAzlH,0BAGA0lM,GACAC,MAAAlgF,EAAAhmH,oBACAmmM,MAAAngF,EAAA/lH,uBACAmmM,MAAApgF,EAAAjmH,gBAGAsmM,GACAC,OAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,EACAC,KAAA,IAGAvD,GACAwD,SAAA,WACAC,OAAA,SACAC,QAAA,UACAC,WAAA,KACAC,WAAA,MACAC,QAAA,QACAC,UAAA,aACAC,SAAA,aAGAC,GACAhtL,MAAA,QACAkwK,YAAA,WACArwK,SAAA,aACAo/H,QAAA,yBAGAguD,GACAC,iBAAA/sM,EAEAgqM,OAAAx+E,EAAA+tB,kBACAyzD,KAAAxhF,EAAA8tB,qBAGA2zD,GACAC,OAAA,SACAC,KAAA,OACAC,MAAA,SAGAC,GACAC,YAAA9hF,EAAA1kH,WACAymM,aAAA/hF,EAAA3kH,WAKA,SAAAk1G,EAAAr4F,EAAAvkB,GAGA,MAAA,iBAAAukB,GAAA,KAAAA,EAAA,IAGA,gBAAA6H,KAAApsB,IAAA,MAAAosB,KAAA7H,KAEAvkB,EAAAA,EAAA69D,QAAA,0BAAA,OAKA,mBAAAzxC,KAAA7H,GAAAA,EAGA,gBAAA6H,KAAA7H,GAAAA,EAGA,aAAA6H,KAAA7H,GAAAA,EAGAvkB,EAAAukB,GAOA,SAAA8pL,EAAA37K,GAgBA,YAdA7xB,IAAA6xB,EAAA,kBAEAA,EAAA,gBAAA,IAAA25F,EAAAlnD,sBACAv8B,MAAA,SACAiJ,SAAA,EACAF,UAAA,EACAD,UAAA,EACA9F,aAAA,EACAQ,WAAA,EACAZ,KAAA6gF,EAAArpH,aAKA0vB,EAAA,gBAIA,SAAA47K,EAAAC,EAAAp+K,EAAAq+K,GAIA,IAAA,IAAAluM,KAAAkuM,EAAA1rJ,gBAEAjiD,IAAA0tM,EAAAjuM,KAEA6vB,EAAAjC,SAAAugL,eAAAt+K,EAAAjC,SAAAugL,mBACAt+K,EAAAjC,SAAAugL,eAAAnuM,GAAAkuM,EAAA1rJ,WAAAxiD,IAYA,SAAAouM,EAAAv+K,EAAAw+K,QAEA9tM,IAAA8tM,EAAAC,SAEA,iBAAAD,EAAAC,OAEAltM,OAAAM,OAAAmuB,EAAAjC,SAAAygL,EAAAC,QAIAx+L,QAAAC,KAAA,sDAAAs+L,EAAAC,SAqFA,SAAA7zJ,EAAA4D,EAAAkwJ,GAIA,GAFAlwJ,EAAA5D,0BAEAl6C,IAAAguM,EAAAlvD,QAEA,IAAA,IAAAt/I,EAAA,EAAA+0B,EAAAy5K,EAAAlvD,QAAAx/I,OAAAE,EAAA+0B,EAAA/0B,IAEAs+C,EAAAtD,sBAAAh7C,GAAAwuM,EAAAlvD,QAAAt/I,GAOA,GAAAwuM,EAAAD,QAAApqL,MAAAC,QAAAoqL,EAAAD,OAAAE,aAAA,CAEA,IAAAA,EAAAD,EAAAD,OAAAE,YAEA,GAAAnwJ,EAAAtD,sBAAAl7C,SAAA2uM,EAAA3uM,OAAA,CAEAw+C,EAAAlD,yBAEA,IAAA,IAAAp7C,EAAA,EAAA+0B,EAAA05K,EAAA3uM,OAAAE,EAAA+0B,EAAA/0B,IAEAs+C,EAAAlD,sBAAAqzJ,EAAAzuM,IAAAA,OAMA+P,QAAAC,KAAA,yEAQA,SAAA0+L,EAAAC,GAEA,IAAAC,EAAAD,EAAAlsJ,YAAAksJ,EAAAlsJ,WAAAwhJ,EAAAuB,4BAeA,OAZAoJ,EAEA,SAAAA,EAAA7F,WACA,IAAA6F,EAAAt2J,QACA,IAAAu2J,EAAAD,EAAA94J,YAIA64J,EAAAr2J,QAAA,IAAAu2J,EAAAF,EAAA74J,YAAA,IAAA64J,EAAAviH,KAQA,SAAAyiH,EAAA/4J,GAMA,IAJA,IAAAg5J,EAAA,GAEA11J,EAAA/3C,OAAA+3C,KAAAtD,GAAAkJ,OAEAh/C,EAAA,EAAA+0B,EAAAqkB,EAAAt5C,OAAAE,EAAA+0B,EAAA/0B,IAEA8uM,GAAA11J,EAAAp5C,GAAA,IAAA81C,EAAAsD,EAAAp5C,IAAA,IAIA,OAAA8uM,EAMA,SAAA9I,EAAA3wF,EAAA5yD,EAAA5/B,GAEArhB,KAAA6zG,KAAAA,MACA7zG,KAAAihD,WAAAA,MACAjhD,KAAAqhB,QAAAA,MAGArhB,KAAA6wB,MAAA,IAxpCA,WAEA,IAAA6vD,KAEA,OAEA3gF,IAAA,SAAAgxB,GAEA,OAAA2vD,EAAA3vD,IAIAziB,IAAA,SAAAyiB,EAAAzC,GAEAoyD,EAAA3vD,GAAAzC,GAIAC,OAAA,SAAAwC,UAEA2vD,EAAA3vD,IAIAw8K,UAAA,WAEA7sH,QAioCA1gF,KAAAwtM,kBAEAxtM,KAAAqrJ,cAAA,IAAA7gC,EAAAjO,cAAAv8G,KAAAqhB,QAAAo6F,SACAz7G,KAAAqrJ,cAAAxvC,eAAA77G,KAAAqhB,QAAAq6F,aAEA17G,KAAAytM,WAAA,IAAAjjF,EAAAvO,WAAAj8G,KAAAqhB,QAAAo6F,SACAz7G,KAAAytM,WAAAhuF,gBAAA,eAEA,oBAAAz/G,KAAAqhB,QAAAq6F,aAEA17G,KAAAytM,WAAA/tF,oBAAA,GA07BA,SAAAguF,EAAAn9K,EAAA48K,EAAAvuF,GAEA,IAAAtqE,EAAA64J,EAAA74J,WAEAixF,KAEA,SAAAooE,EAAAC,EAAA1rB,GAEA,OAAAtjE,EAAAspF,cAAA,WAAA0F,GACAlvH,KAAA,SAAAy4F,GAEA5mJ,EAAAukB,aAAAotI,EAAA/K,KAMA,IAAA,IAAA02B,KAAAv5J,EAAA,CAEA,IAAAszJ,EAAAC,EAAAgG,IAAAA,EAAA75F,cAGA4zF,KAAAr3K,EAAA+jB,YAEAixF,EAAAh8H,KAAAokM,EAAAr5J,EAAAu5J,GAAAjG,IAIA,QAAA5oM,IAAAmuM,EAAAr2J,UAAAvmB,EAAAhwB,MAAA,CAEA,IAAA42K,EAAAv4D,EAAAspF,cAAA,WAAAiF,EAAAr2J,SAAA4nC,KAAA,SAAAy4F,GAEA5mJ,EAAAqkB,SAAAuiI,KAIA5xC,EAAAh8H,KAAA4tK,GAQA,OAJA01B,EAAAt8K,EAAA48K,GA3IA,SAAA58K,EAAA48K,EAAAvuF,GAEA,IAAAtqE,EAAA64J,EAAA74J,WAEAxgB,EAAA,IAAA02F,EAAAj5F,KAEA,QAAAvyB,IAAAs1C,EAAA+2J,SAyBA,OAvBA,IAAAl0B,EAAAv4D,EAAA/K,KAAAk0F,UAAAzzJ,EAAA+2J,UAEAtgM,EAAAosK,EAAApsK,IACAC,EAAAmsK,EAAAnsK,IAIA,QAAAhM,IAAA+L,QAAA/L,IAAAgM,EAUA,YAFAuD,QAAAC,KAAA,uEANAslB,EAAAtmB,IACA,IAAAg9G,EAAApzG,QAAArM,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,IAAAy/G,EAAApzG,QAAApM,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAgBA,IAAA4vJ,EAAAuyC,EAAAvyC,QAEA,QAAA57J,IAAA47J,EAAA,CAKA,IAHA,IAAAkzC,EAAA,IAAAtjF,EAAApzG,QACA6W,EAAA,IAAAu8F,EAAApzG,QAEA5Y,EAAA,EAAA+0B,EAAAqnI,EAAAt8J,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA4B,EAAAw6J,EAAAp8J,GAEA,QAAAQ,IAAAoB,EAAAirM,SAAA,CAEA,IAAAl0B,EAAAv4D,EAAA/K,KAAAk0F,UAAA3nM,EAAAirM,UACAtgM,EAAAosK,EAAApsK,IACAC,EAAAmsK,EAAAnsK,SAIAhM,IAAA+L,QAAA/L,IAAAgM,GAGAijB,EAAApgB,KAAA1O,KAAA6L,IAAA7L,KAAAkR,IAAAtF,EAAA,IAAA5L,KAAAkR,IAAArF,EAAA,MACAijB,EAAAngB,KAAA3O,KAAA6L,IAAA7L,KAAAkR,IAAAtF,EAAA,IAAA5L,KAAAkR,IAAArF,EAAA,MACAijB,EAAA1W,KAAApY,KAAA6L,IAAA7L,KAAAkR,IAAAtF,EAAA,IAAA5L,KAAAkR,IAAArF,EAAA,MAMA8iM,EAAA9iM,IAAAijB,IAIA1f,QAAAC,KAAA,wEASAslB,EAAAK,eAAA25K,GAIAv9K,EAAA8D,YAAAP,EAEA,IAAAc,EAAA,IAAA41F,EAAA/0F,OAEA3B,EAAAE,UAAAY,EAAAhjB,QACAgjB,EAAA5a,OAAA8Z,EAAA/oB,IAAA0F,WAAAqjB,EAAA9oB,KAAA,EAEAulB,EAAA0e,eAAAra,EAoDAm5K,CAAAx9K,EAAA48K,EAAAvuF,GAEAuhE,QAAAe,IAAA37C,GAAA7mD,KAAA,WAEA,YAAA1/E,IAAAmuM,EAAAvyC,QA/oCA,SAAArqI,EAAAqqI,EAAAh8C,GAKA,IAHA,IAAAovF,GAAA,EACAC,GAAA,EAEAzvM,EAAA,EAAA+0B,EAAAqnI,EAAAt8J,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA4B,EAAAw6J,EAAAp8J,GAKA,QAHAQ,IAAAoB,EAAAirM,WAAA2C,GAAA,QACAhvM,IAAAoB,EAAAkrM,SAAA2C,GAAA,GAEAD,GAAAC,EAAA,MAIA,IAAAD,IAAAC,EAAA,OAAA9tB,QAAAC,QAAA7vJ,GAKA,IAHA,IAAA29K,KACAC,KAEA3vM,EAAA,EAAA+0B,EAAAqnI,EAAAt8J,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA4B,EAAAw6J,EAAAp8J,GAEA,GAAAwvM,EAAA,CAEA,IAAAI,OAAApvM,IAAAoB,EAAAirM,SACAzsF,EAAAspF,cAAA,WAAA9nM,EAAAirM,UACA96K,EAAA+jB,WAAAvsB,SAEAmmL,EAAA3kM,KAAA6kM,GAIA,GAAAH,EAAA,CAEA,IAAAG,OAAApvM,IAAAoB,EAAAkrM,OACA1sF,EAAAspF,cAAA,WAAA9nM,EAAAkrM,QACA/6K,EAAA+jB,WAAA56B,OAEAy0L,EAAA5kM,KAAA6kM,IAMA,OAAAjuB,QAAAe,KACAf,QAAAe,IAAAgtB,GACA/tB,QAAAe,IAAAitB,KACAzvH,KAAA,SAAAqpH,GAEA,IAAAlT,EAAAkT,EAAA,GACAr2J,EAAAq2J,EAAA,GAMA,OAJAiG,IAAAz9K,EAAAgkB,gBAAAxsB,SAAA8sK,GACAoZ,IAAA19K,EAAAgkB,gBAAA76B,OAAAg4B,GACAnhB,EAAAikB,sBAAA,EAEAjkB,IAqlCA8hK,CAAA9hK,EAAA48K,EAAAvyC,QAAAh8C,GACAruF,IAWA,SAAA89K,EAAA99K,EAAAL,GAEA,IAAA3vB,EAAAgwB,EAAAokB,WAIA,GAAA,OAAAp0C,EAAA,CAEA,IAAAu2C,KAEA/uB,EAAAwI,EAAAskB,aAAA,YAEA,QAAA71C,IAAA+oB,EAcA,OADAxZ,QAAAmJ,MAAA,kGACA6Y,EAZA,IAAA,IAAA/xB,EAAA,EAAAA,EAAAupB,EAAAlM,MAAArd,IAEAs4C,EAAAvtC,KAAA/K,GAIA+xB,EAAAqkB,SAAAkC,GACAv2C,EAAAgwB,EAAAokB,WAaA,IAAA25J,EAAA/tM,EAAAsb,MAAA,EACA0yL,KAEA,GAAAr+K,IAAAs6F,EAAAxiH,oBAIA,IAAA,IAAAxJ,EAAA,EAAAA,GAAA8vM,EAAA9vM,IAEA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAA,IACA88L,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,IACA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,EAAA,SAQA,IAAA,IAAAA,EAAA,EAAAA,EAAA8vM,EAAA9vM,IAEAA,EAAA,GAAA,GAEA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,IACA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,EAAA,IACA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,EAAA,MAKA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,EAAA,IACA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,EAAA,IACA+vM,EAAAhlM,KAAAhJ,EAAAkR,KAAAjT,KAQA+vM,EAAAjwM,OAAA,IAAAgwM,GAEA//L,QAAAmJ,MAAA,2FAMA,IAAA+hJ,EAAAlpI,EAAAriB,QAGA,OAFAurJ,EAAA7kH,SAAA25J,GAEA90C,EAyvBA,OA7zDA+qC,EAAA5kM,UAAAsxB,MAAA,SAAAipF,EAAAE,GAEA,IAAAuE,EAAA5+G,KACA6zG,EAAA7zG,KAAA6zG,KACA5yD,EAAAjhD,KAAAihD,WAGAjhD,KAAA6wB,MAAA08K,YAGAvtM,KAAAwuM,WAEAruB,QAAAe,KAEAlhL,KAAAyuM,gBAAA,SACAzuM,KAAAyuM,gBAAA,aACAzuM,KAAAyuM,gBAAA,YAEA/vH,KAAA,SAAAgwH,GAEA,IAAAhjI,GACA1nB,MAAA0qJ,EAAA,GAAA76F,EAAA7vD,OAAA,GACA2qJ,OAAAD,EAAA,GACA/1F,WAAA+1F,EAAA,GACAl4H,QAAAk4H,EAAA,GACA1yB,MAAAnoE,EAAAmoE,MACAp9D,OAAAA,EACAvyF,aAGAogL,EAAAxrJ,EAAAyqB,EAAAmoC,GAEAg5F,EAAAnhI,EAAAmoC,GAEAsG,EAAAzuC,KAEAqhD,MAAA1S,IAOAmqF,EAAA5kM,UAAA4uM,SAAA,WAWA,IATA,IAAAI,EAAA5uM,KAAA6zG,KAAAu9D,UACAy9B,EAAA7uM,KAAA6zG,KAAAi7F,UACAC,EAAA/uM,KAAA6zG,KAAAq+C,WAEA88C,KACAC,KAIAx7B,EAAA,EAAAy7B,EAAAL,EAAAvwM,OAAAm1K,EAAAy7B,EAAAz7B,IAIA,IAFA,IAAAhB,EAAAo8B,EAAAp7B,GAAAhB,OAEAj0K,EAAA,EAAA+0B,EAAAk/I,EAAAn0K,OAAAE,EAAA+0B,EAAA/0B,IAEAowM,EAAAn8B,EAAAj0K,IAAAi6F,QAAA,EAWA,IAAA,IAAA02G,EAAA,EAAAC,EAAAR,EAAAtwM,OAAA6wM,EAAAC,EAAAD,IAAA,CAEA,IAAAE,EAAAT,EAAAO,QAEAnwM,IAAAqwM,EAAAvyJ,YAEA99C,IAAAgwM,EAAAK,EAAAvyJ,QAEAkyJ,EAAAK,EAAAvyJ,MAAAmyJ,EAAAI,EAAAvyJ,MAAA,GAIAkyJ,EAAAK,EAAAvyJ,aAKA99C,IAAAqwM,EAAAt8B,OAEAg8B,EAAAM,EAAAvyJ,MAAAwnB,eAAA,IAQAtkE,KAAA6zG,KAAAm7F,eAAAA,EACAhvM,KAAA6zG,KAAAo7F,SAAAA,GAUAzK,EAAA5kM,UAAAsoM,cAAA,SAAAh/L,EAAA3I,GAEA,IAAAg9D,EAAAr0D,EAAA,IAAA3I,EACA+uM,EAAAtvM,KAAA6wB,MAAA9wB,IAAAw9D,GAEA,IAAA+xI,EAAA,CAEA,OAAApmM,GAEA,IAAA,QACAomM,EAAAtvM,KAAAuvM,UAAAhvM,GACA,MAEA,IAAA,OACA+uM,EAAAtvM,KAAAwvM,SAAAjvM,GACA,MAEA,IAAA,OACA+uM,EAAAtvM,KAAAyvM,SAAAlvM,GACA,MAEA,IAAA,WACA+uM,EAAAtvM,KAAA0vM,aAAAnvM,GACA,MAEA,IAAA,aACA+uM,EAAAtvM,KAAA2vM,eAAApvM,GACA,MAEA,IAAA,SACA+uM,EAAAtvM,KAAA4vM,WAAArvM,GACA,MAEA,IAAA,WACA+uM,EAAAtvM,KAAA6vM,aAAAtvM,GACA,MAEA,IAAA,UACA+uM,EAAAtvM,KAAA4/G,YAAAr/G,GACA,MAEA,IAAA,OACA+uM,EAAAtvM,KAAA8vM,SAAAvvM,GACA,MAEA,IAAA,YACA+uM,EAAAtvM,KAAA+vM,cAAAxvM,GACA,MAEA,IAAA,SACA+uM,EAAAtvM,KAAAgwM,WAAAzvM,GACA,MAEA,IAAA,QACA+uM,EAAAtvM,KAAAihD,WAAAwhJ,EAAAe,qBAAAkB,UAAAnkM,GACA,MAEA,QACA,MAAA,IAAAyN,MAAA,iBAAA9E,GAIAlJ,KAAA6wB,MAAAviB,IAAAivD,EAAA+xI,GAIA,OAAAA,GASA9K,EAAA5kM,UAAA6uM,gBAAA,SAAAvlM,GAEA,IAAAwlM,EAAA1uM,KAAA6wB,MAAA9wB,IAAAmJ,GAEA,IAAAwlM,EAAA,CAEA,IAAA9vF,EAAA5+G,KACAiwM,EAAAjwM,KAAA6zG,KAAA3qG,GAAA,SAAAA,EAAA,KAAA,UAEAwlM,EAAAvuB,QAAAe,IAAA+uB,EAAAlkK,IAAA,SAAAmkK,EAAA3vM,GAEA,OAAAq+G,EAAAspF,cAAAh/L,EAAA3I,MAIAP,KAAA6wB,MAAAviB,IAAApF,EAAAwlM,GAIA,OAAAA,GASAlK,EAAA5kM,UAAAgwM,WAAA,SAAAO,GAEA,IAAAC,EAAApwM,KAAA6zG,KAAA9gD,QAAAo9I,GACAh1F,EAAAn7G,KAAAytM,WAEA,GAAA2C,EAAAlnM,MAAA,gBAAAknM,EAAAlnM,KAEA,MAAA,IAAA8E,MAAA,qBAAAoiM,EAAAlnM,KAAA,kCAKA,QAAAlK,IAAAoxM,EAAAC,KAAA,IAAAF,EAEA,OAAAhwB,QAAAC,QAAApgL,KAAAihD,WAAAwhJ,EAAAC,iBAAAlhB,MAIA,IAAAngK,EAAArhB,KAAAqhB,QAEA,OAAA,IAAA8+J,QAAA,SAAAC,EAAAC,GAEAllE,EAAAS,KAAAb,EAAAq1F,EAAAC,IAAAhvL,EAAAljB,MAAAiiL,OAAAphL,EAAA,WAEAqhL,EAAA,IAAAryK,MAAA,4CAAAoiM,EAAAC,IAAA,YAaA7L,EAAA5kM,UAAA+vM,eAAA,SAAArI,GAEA,IAAAgJ,EAAAtwM,KAAA6zG,KAAA08F,YAAAjJ,GAEA,OAAAtnM,KAAAkoM,cAAA,SAAAoI,EAAAn9I,QAAAurB,KAAA,SAAAvrB,GAEA,IAAA0sH,EAAAywB,EAAAzwB,YAAA,EACAujB,EAAAkN,EAAAlN,YAAA,EACA,OAAAjwI,EAAAppD,MAAAq5L,EAAAA,EAAAvjB,MAWA2kB,EAAA5kM,UAAA8vM,aAAA,SAAA9B,GAEA,IAAAhvF,EAAA5+G,KACA6zG,EAAA7zG,KAAA6zG,KAEAi0F,EAAA9nM,KAAA6zG,KAAAk0F,UAAA6F,GAEA,QAAA5uM,IAAA8oM,EAAAP,iBAAAvoM,IAAA8oM,EAAA0I,OAKA,OAAArwB,QAAAC,QAAA,MAIA,IAAAqwB,KAmBA,YAjBAzxM,IAAA8oM,EAAAP,WAEAkJ,EAAAlnM,KAAAvJ,KAAAkoM,cAAA,aAAAJ,EAAAP,aAIAkJ,EAAAlnM,KAAA,WAIAvK,IAAA8oM,EAAA0I,SAEAC,EAAAlnM,KAAAvJ,KAAAkoM,cAAA,aAAAJ,EAAA0I,OAAA15J,QAAAywJ,aACAkJ,EAAAlnM,KAAAvJ,KAAAkoM,cAAA,aAAAJ,EAAA0I,OAAA1/K,OAAAy2K,cAIApnB,QAAAe,IAAAuvB,GAAA/xH,KAAA,SAAA6xH,GAEA,IAWAzmM,EAAA4/G,EAXA69E,EAAAgJ,EAAA,GAEArjK,EAAA29J,EAAA/C,EAAA5+L,MACAwnM,EAAAzI,EAAAH,EAAAE,eAGA2I,EAAAD,EAAAh9I,kBACAk9I,EAAAD,EAAAzjK,EACAk2J,EAAA0E,EAAA1E,YAAA,EACAyN,OAAA7xM,IAAA8oM,EAAAP,WAAA1zF,EAAA08F,YAAAzI,EAAAP,YAAAsJ,gBAAA7xM,EACAmuC,GAAA,IAAA26J,EAAA36J,WAIA,GAAA0jK,GAAAA,IAAAD,EAAA,CAIA,IAAAE,EAAA3xM,KAAAK,MAAA4jM,EAAAyN,GACAE,EAAA,qBAAAjJ,EAAAP,WAAA,IAAAO,EAAAE,cAAA,IAAA8I,EAAA,IAAAhJ,EAAAjsL,MACAm1L,EAAApyF,EAAA/tF,MAAA9wB,IAAAgxM,GAEAC,IAEAlnM,EAAA,IAAA4mM,EAAAnJ,EAAAuJ,EAAAD,EAAA/I,EAAAjsL,MAAAg1L,EAAAF,GAGAK,EAAA,IAAAxmF,EAAAx0B,kBAAAlsF,EAAA+mM,EAAAF,GAEA/xF,EAAA/tF,MAAAviB,IAAAyiM,EAAAC,IAIAtnF,EAAA,IAAAc,EAAAv0B,2BAAA+6G,EAAA9jK,EAAAk2J,EAAAyN,EAAAF,EAAAxjK,QAMArjC,EAFA,OAAAy9L,EAEA,IAAAmJ,EAAA5I,EAAAjsL,MAAAqxB,GAIA,IAAAwjK,EAAAnJ,EAAAnE,EAAA0E,EAAAjsL,MAAAqxB,GAIAw8E,EAAA,IAAAc,EAAAv9E,gBAAAnjC,EAAAojC,EAAAC,GAKA,QAAAnuC,IAAA8oM,EAAA0I,OAAA,CAEA,IAAAS,EAAApG,EAAAC,OACAoG,EAAAjJ,EAAAH,EAAA0I,OAAA15J,QAAAkxJ,eAEAmJ,EAAArJ,EAAA0I,OAAA15J,QAAAssJ,YAAA,EACAgO,EAAAtJ,EAAA0I,OAAA1/K,OAAAsyK,YAAA,EAEAiO,EAAA,IAAAH,EAAAX,EAAA,GAAAY,EAAArJ,EAAA0I,OAAA30L,MAAAo1L,GACAK,EAAA,IAAAZ,EAAAH,EAAA,GAAAa,EAAAtJ,EAAA0I,OAAA30L,MAAAqxB,GAEA,OAAAq6J,IAGA79E,EAAA,IAAAc,EAAAv9E,gBAAAy8E,EAAA5/G,MAAAC,QAAA2/G,EAAAx8E,SAAAw8E,EAAAv8E,aAIA,IAAA,IAAA3uC,EAAA,EAAA+0B,EAAA89K,EAAA/yM,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA+B,EAAA8wM,EAAA7yM,GAMA,GAJAkrH,EAAA77G,KAAAtN,EAAA+wM,EAAA9yM,EAAA0uC,IACAA,GAAA,GAAAw8E,EAAA57G,KAAAvN,EAAA+wM,EAAA9yM,EAAA0uC,EAAA,IACAA,GAAA,GAAAw8E,EAAAnyG,KAAAhX,EAAA+wM,EAAA9yM,EAAA0uC,EAAA,IACAA,GAAA,GAAAw8E,EAAAzmG,KAAA1iB,EAAA+wM,EAAA9yM,EAAA0uC,EAAA,IACAA,GAAA,EAAA,MAAA,IAAAl/B,MAAA,sEAMA,OAAA07G,KAWA86E,EAAA5kM,UAAAggH,YAAA,SAAA2xF,GAEA,IAWA9wM,EAXAm+G,EAAA5+G,KACA6zG,EAAA7zG,KAAA6zG,KACAxyF,EAAArhB,KAAAqhB,QACAgqI,EAAArrJ,KAAAqrJ,cAEAuG,EAAA+yB,KAAA/yB,KAAA+yB,KAAA6sB,UAEAC,EAAA59F,EAAAxxF,SAAAkvL,GAEAG,EAAAD,EAAAxwJ,eAcA0wG,GARAlxJ,EAFAixM,EAAAjP,EAAAyB,kBAEArwF,EAAApxF,OAAAivL,EAAAjP,EAAAyB,kBAAAzjM,QAIAozG,EAAApxF,OAAAgvL,EAAAhxM,SAIA4vM,IACAsB,GAAA,EAiBA,YAfA3yM,IAAAyB,EAAA8mM,aAIA51C,EAAA/yC,EAAAspF,cAAA,aAAAznM,EAAA8mM,YAAA7oH,KAAA,SAAA6oH,GAEAoK,GAAA,EACA,IAAA9kF,EAAA,IAAAlO,MAAA4oF,IAAAr+L,KAAAzI,EAAA29G,WAEA,OADAuzC,EAAAC,EAAAC,gBAAAhlC,MAOAszD,QAAAC,QAAAzuB,GAAAjzE,KAAA,SAAAizE,GAIA,IAAAx2C,EAAA95F,EAAAo6F,QAAAJ,WAAAs2C,GAUA,OARAx2C,IAEAA,EAAAu2F,EAAAjP,EAAAyB,kBACAtlF,EAAA39D,WAAAwhJ,EAAAyB,kBAAAhC,UACA72C,GAIA,IAAA80B,QAAA,SAAAC,EAAAC,GAEAllE,EAAAS,KAAAb,EAAA42C,EAAAtwI,EAAAljB,MAAAiiL,OAAAphL,EAAAqhL,OAIA3hG,KAAA,SAAAj9D,IAIA,IAAAkwL,GAEA//C,EAAAE,gBAAAH,GAIAlwI,EAAAV,OAAA,EAEA0wL,EAAAhzM,OAAAgjB,EAAAhjB,KAAAgzM,EAAAhzM,MAGAgC,EAAA29G,YAAAiuF,IAEA5qL,EAAApB,OAAAgsL,EAAA5rM,EAAA29G,WAIA,IAAAsyD,EAAA78D,EAAA68D,aACAH,EAAAG,EAAA+gC,EAAAlhC,aAOA,OALA9uJ,EAAAtB,UAAA+pL,EAAA35B,EAAApwJ,YAAAqqG,EAAA3lH,aACA4c,EAAArB,UAAA8pL,EAAA35B,EAAAnwJ,YAAAoqG,EAAAzlH,yBACA0c,EAAAxB,MAAAwqL,EAAAl6B,EAAAtwJ,QAAAuqG,EAAAjmH,eACAkd,EAAAvB,MAAAuqL,EAAAl6B,EAAArwJ,QAAAsqG,EAAAjmH,eAEAkd,KAaA+iL,EAAA5kM,UAAA4lM,cAAA,SAAAN,EAAA0M,EAAAC,GAEA,IAAAjzF,EAAA5+G,KAEA,OAAAA,KAAAkoM,cAAA,UAAA2J,EAAAtxM,OAAAm+E,KAAA,SAAAj9D,GAEA,IAAAA,EAAA0vD,oBAEA,OAAAygI,GAEA,IAAA,QACA,IAAA,cACA,IAAA,eACA,IAAA,YACA,IAAA,eACAnwL,EAAApB,OAAAmqG,EAAA3kH,UAeA,QANA7G,IAAA6yM,EAAAzJ,UAAA,GAAAyJ,EAAAzJ,UAAA,UAAAwJ,GAAA,GAAAC,EAAAzJ,UAEA75L,QAAAC,KAAA,mCAAAqjM,EAAAzJ,SAAA,gBAAAwJ,EAAA,uBAIAhzF,EAAA39D,WAAAwhJ,EAAA2B,uBAAA,CAEA,IAAArlH,OAAA//E,IAAA6yM,EAAA5wJ,WAAA4wJ,EAAA5wJ,WAAAwhJ,EAAA2B,4BAAAplM,EAEA+/E,IAEAt9D,EAAAm9F,EAAA39D,WAAAwhJ,EAAA2B,uBAAA+D,cAAA1mL,EAAAs9D,IAMAmmH,EAAA0M,GAAAnwL,KAcA+iL,EAAA5kM,UAAAkyM,oBAAA,SAAAh1J,GAEA,IAAAvsB,EAAAusB,EAAAvsB,SACAG,EAAAosB,EAAApsB,SAEAqhL,OAAA/yM,IAAAuxB,EAAA+jB,WAAAc,QACA48J,OAAAhzM,IAAAuxB,EAAA+jB,WAAAvN,MACAkrK,OAAAjzM,IAAAuxB,EAAA+jB,WAAA56B,OACA4xD,GAAA,IAAAxuB,EAAAwnB,cACA4tI,EAAAryM,OAAA+3C,KAAArnB,EAAAgkB,iBAAAj2C,OAAA,EACA6zM,EAAAD,QAAAlzM,IAAAuxB,EAAAgkB,gBAAA76B,OAEA,GAAAojC,EAAAxsB,SAAA,CAEA,IAAAitC,EAAA,kBAAA7sC,EAAA9lB,KAEAwnM,EAAApyM,KAAA6wB,MAAA9wB,IAAAw9D,GAEA60I,IAEAA,EAAA,IAAA5nF,EAAA7mD,eACA6mD,EAAA/gF,SAAA7pC,UAAAwO,KAAAxN,KAAAwxM,EAAA1hL,GACA0hL,EAAArrK,MAAA34B,KAAAsiB,EAAAqW,OACAqrK,EAAArmK,IAAArb,EAAAqb,IACAqmK,EAAA9gK,iBAAA,EAEAtxC,KAAA6wB,MAAAviB,IAAAivD,EAAA60I,IAIA1hL,EAAA0hL,OAEA,GAAAt1J,EAAAzsB,OAAA,CAEA,IAAAktC,EAAA,qBAAA7sC,EAAA9lB,KAEAynM,EAAAryM,KAAA6wB,MAAA9wB,IAAAw9D,GAEA80I,IAEAA,EAAA,IAAA7nF,EAAA/mD,kBACA+mD,EAAA/gF,SAAA7pC,UAAAwO,KAAAxN,KAAAyxM,EAAA3hL,GACA2hL,EAAAtrK,MAAA34B,KAAAsiB,EAAAqW,OAEA/mC,KAAA6wB,MAAAviB,IAAAivD,EAAA80I,IAIA3hL,EAAA2hL,EAKA,GAAAN,GAAAC,GAAAC,GAAA3mI,GAAA4mI,EAAA,CAEA,IAAA30I,EAAA,kBAAA7sC,EAAA9lB,KAAA,IAEA8lB,EAAAq1K,mCAAAxoI,GAAA,wBACA+N,IAAA/N,GAAA,aACAw0I,IAAAx0I,GAAA,oBACAy0I,IAAAz0I,GAAA,kBACA00I,IAAA10I,GAAA,iBACA20I,IAAA30I,GAAA,kBACA40I,IAAA50I,GAAA,kBAEA,IAAA4O,EAAAnsE,KAAA6wB,MAAA9wB,IAAAw9D,GAEA4O,IAEAA,EAAAz7C,EAAAxiB,QAEAo9D,IAAAa,EAAAr/B,UAAA,GACAilK,IAAA5lI,EAAAtiC,gBAAA,GACAmoK,IAAA7lI,EAAAhlC,cAAA,GACA8qK,IAAA9lI,EAAAviC,aAAA,GACAsoK,IAAA/lI,EAAAp/B,cAAA,GACAolK,IAAAhmI,EAAAz6B,cAAA,GAEA1xC,KAAA6wB,MAAAviB,IAAAivD,EAAA4O,IAIAz7C,EAAAy7C,EAMAz7C,EAAAwb,YAAAltC,IAAAuxB,EAAA+jB,WAAApY,UAAAl9B,IAAAuxB,EAAA+jB,WAAAvxB,IAEAwN,EAAAukB,aAAA,MAAA,IAAA01E,EAAAv9E,gBAAA1c,EAAA+jB,WAAAvxB,GAAAjZ,MAAA,IAKA4mB,EAAAmgB,cAAAkhK,IAEArhL,EAAAmgB,YAAAnlC,GAAAglB,EAAAmgB,YAAAnlC,GAIAglB,EAAA6f,uBAAAwhK,IAEArhL,EAAA6f,qBAAA7kC,GAAAglB,EAAA6f,qBAAA7kC,GAIAoxC,EAAApsB,SAAAA,GASA8zK,EAAA5kM,UAAAiwM,aAAA,SAAA7oK,GAEA,IAKAsrK,EAJAz+F,EAAA7zG,KAAA6zG,KACA5yD,EAAAjhD,KAAAihD,WACAkkJ,EAAAtxF,EAAAnkF,UAAAsX,GAGAk+J,KACAqN,EAAApN,EAAAlkJ,eAEAskF,KAEA,GAAAgtE,EAAA9P,EAAAqB,uCAAA,CAEA,IAAA0O,EAAAvxJ,EAAAwhJ,EAAAqB,uCACAwO,EAAAE,EAAAxN,kBACAz/D,EAAAh8H,KAAAipM,EAAAvN,aAAAC,EAAAC,EAfAnlM,YAiBA,GAAAuyM,EAAA9P,EAAAmB,qBAAA,CAEA,IAAA6O,EAAAxxJ,EAAAwhJ,EAAAmB,qBACA0O,EAAAG,EAAAzN,kBACAz/D,EAAAh8H,KAAAkpM,EAAAxN,aAAAC,EAAAC,EArBAnlM,WAuBA,CAKAsyM,EAAA9nF,EAAAlnD,qBAEA,IAAA8hI,EAAAD,EAAAE,yBAKA,GAHAH,EAAAn+J,MAAA,IAAAyjF,EAAA/jF,MAAA,EAAA,EAAA,GACAy+J,EAAAp7J,QAAA,EAEAnnB,MAAAC,QAAAwiL,EAAAE,iBAAA,CAEA,IAAAx7L,EAAAs7L,EAAAE,gBAEAJ,EAAAn+J,MAAA31B,UAAAtH,GACAo7L,EAAAp7J,QAAAhgC,EAAA,QAIA9K,IAAAomM,EAAAG,kBAEAhgE,EAAAh8H,KA9CAvJ,KA8CAwlM,cAAAN,EAAA,MAAAE,EAAAG,mBAIAL,EAAAp1J,eAAA9wC,IAAAomM,EAAAsN,eAAAtN,EAAAsN,eAAA,EACAxN,EAAAr1J,eAAA7wC,IAAAomM,EAAAuN,gBAAAvN,EAAAuN,gBAAA,OAEA3zM,IAAAomM,EAAAwN,2BAEArtE,EAAAh8H,KAvDAvJ,KAuDAwlM,cAAAN,EAAA,eAAAE,EAAAwN,2BACArtE,EAAAh8H,KAxDAvJ,KAwDAwlM,cAAAN,EAAA,eAAAE,EAAAwN,6BAMA,IAAAzN,EAAAxlI,cAEAulI,EAAAv7J,KAAA6gF,EAAAnpH,YAIA,IAAAwxM,EAAA1N,EAAA0N,WAAA5G,EAAAC,OA2DA,GAzDA2G,IAAA5G,EAAAG,OAEAlH,EAAAn7J,aAAA,EAGAm7J,EAAA16J,YAAA,IAIA06J,EAAAn7J,aAAA,EAEA8oK,IAAA5G,EAAAE,OAEAjH,EAAAv5J,eAAA3sC,IAAAmmM,EAAA2N,YAAA3N,EAAA2N,YAAA,UAMA9zM,IAAAmmM,EAAA4N,eAAAT,IAAA9nF,EAAA1+E,oBAEAy5F,EAAAh8H,KA3FAvJ,KA2FAwlM,cAAAN,EAAA,YAAAC,EAAA4N,gBAEA7N,EAAAr0J,YAAA,IAAA25E,EAAA19G,QAAA,EAAA,QAEA9N,IAAAmmM,EAAA4N,cAAAl0L,OAEAqmL,EAAAr0J,YAAArjC,IAAA23L,EAAA4N,cAAAl0L,MAAAsmL,EAAA4N,cAAAl0L,aAMA7f,IAAAmmM,EAAA6N,kBAAAV,IAAA9nF,EAAA1+E,oBAEAy5F,EAAAh8H,KAzGAvJ,KAyGAwlM,cAAAN,EAAA,QAAAC,EAAA6N,wBAEAh0M,IAAAmmM,EAAA6N,iBAAAC,WAEA/N,EAAA/4J,eAAAg5J,EAAA6N,iBAAAC,gBAMAj0M,IAAAmmM,EAAA+N,gBAAAZ,IAAA9nF,EAAA1+E,oBAEAo5J,EAAAl1J,UAAA,IAAAw6E,EAAA/jF,OAAAr1B,UAAA+zL,EAAA+N,sBAIAl0M,IAAAmmM,EAAAgO,iBAAAb,IAAA9nF,EAAA1+E,mBAEAy5F,EAAAh8H,KA3HAvJ,KA2HAwlM,cAAAN,EAAA,cAAAC,EAAAgO,kBAIAZ,EAAA9P,EAAAiB,yBAAA,CAEA,IAAA0P,EAAAnyJ,EAAAwhJ,EAAAiB,yBACA4O,EAAAc,EAAApO,kBACAz/D,EAAAh8H,KAAA6pM,EAAAnO,aAAAC,GAAAjkJ,WAAAsxJ,GAnIAvyM,OAuIA,OAAAmgL,QAAAe,IAAA37C,GAAA7mD,KAAA,WAEA,IAAAhuD,EAsBA,OAlBAA,EAFA4hL,IAAAxM,EAEA7kJ,EAAAwhJ,EAAAqB,uCAAAqD,eAAAjC,GAIA,IAAAoN,EAAApN,GAIAC,EAAA1mM,OAAAiyB,EAAAjyB,KAAA0mM,EAAA1mM,MAGAiyB,EAAAqb,MAAArb,EAAAqb,IAAAxrB,SAAAiqG,EAAAtiH,cACAwoB,EAAAygB,cAAAzgB,EAAAygB,YAAA5wB,SAAAiqG,EAAAtiH,cAEA2kM,EAAAn8K,EAAAy0K,GAEAA,EAAAlkJ,YAAAwrJ,EAAAxrJ,EAAAvwB,EAAAy0K,GAEAz0K,KA0QA8zK,EAAA5kM,UAAAyzM,eAAA,SAAA37B,GAEA,IAAA94D,EAAA5+G,KACAihD,EAAAjhD,KAAAihD,WACApwB,EAAA7wB,KAAAwtM,eAEA,SAAA8F,EAAAh8B,GAEA,OAAAr2H,EAAAwhJ,EAAAuB,4BACAqD,gBAAA/vB,EAAA14D,GACAlgC,KAAA,SAAAnuD,GAEA,OAAAm9K,EAAAn9K,EAAA+mJ,EAAA14D,KAQA,IAFA,IAAA2mB,KAEA/mI,EAAA,EAAA+0B,EAAAmkJ,EAAAp5K,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAaA+0M,EAbAj8B,EAAAI,EAAAl5K,GACA++D,EAAA2vI,EAAA51B,GAGAr5D,EAAAptF,EAAA0sC,GAEA,GAAA0gD,EAGAsnB,EAAAh8H,KAAA00G,EAAA2hE,cASA2zB,EAHAj8B,EAAAr2H,YAAAq2H,EAAAr2H,WAAAwhJ,EAAAuB,4BAGAsP,EAAAh8B,GAKAo2B,EAAA,IAAAljF,EAAAn2E,eAAAijI,EAAA14D,GAKA/tF,EAAA0sC,IAAA+5G,UAAAA,EAAAsI,QAAA2zB,GAEAhuE,EAAAh8H,KAAAgqM,GAMA,OAAApzB,QAAAe,IAAA37C,IASAi/D,EAAA5kM,UAAA6vM,SAAA,SAAA+D,GAUA,IARA,IAAA50F,EAAA5+G,KACA6zG,EAAA7zG,KAAA6zG,KAEAm5F,EAAAn5F,EAAAq+C,OAAAshD,GACA97B,EAAAs1B,EAAAt1B,WAEAnyC,KAEA/mI,EAAA,EAAA+0B,EAAAmkJ,EAAAp5K,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAAkyB,OAAA1xB,IAAA04K,EAAAl5K,GAAAkyB,SACA87K,EAAAxsM,KAAA6wB,OACA7wB,KAAAkoM,cAAA,WAAAxwB,EAAAl5K,GAAAkyB,UAEA60G,EAAAh8H,KAAAmnB,GAMA,OAFA60G,EAAAh8H,KAAAq1G,EAAAy0F,eAAA37B,IAEAyI,QAAAe,IAAA37C,GAAA7mD,KAAA,SAAAugD,GAOA,IALA,IAAAvvG,EAAAuvG,EAAAl1H,MAAA,EAAAk1H,EAAA3gI,OAAA,GACAmxB,EAAAwvG,EAAAA,EAAA3gI,OAAA,GAEA4zJ,KAEA1zJ,EAAA,EAAA+0B,EAAA9D,EAAAnxB,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAKAs+C,EALAvsB,EAAAd,EAAAjxB,GACA84K,EAAAI,EAAAl5K,GAMAkyB,EAAAhB,EAAAlxB,GAEA,GAAA84K,EAAA1sF,OAAA69G,EAAAc,WACAjyB,EAAA1sF,OAAA69G,EAAAe,gBACAlyB,EAAA1sF,OAAA69G,EAAAgB,mBACAzqM,IAAAs4K,EAAA1sF,MAOA,KAJA9tC,GAAA,IAAAkwJ,EAAA1oI,cACA,IAAAkmD,EAAA/yB,YAAAlnE,EAAAG,GACA,IAAA85F,EAAAvxE,KAAA1oB,EAAAG,IAEA4zC,eAAAxnB,EAAAvsB,SAAA+jB,WAAA4jD,WAAA/qD,YAIA2P,EAAAm7C,uBAIAq/E,EAAA1sF,OAAA69G,EAAAe,eAEA1sJ,EAAAvsB,SAAA89K,EAAAvxJ,EAAAvsB,SAAAi6F,EAAAziH,uBAEAuvK,EAAA1sF,OAAA69G,EAAAgB,eAEA3sJ,EAAAvsB,SAAA89K,EAAAvxJ,EAAAvsB,SAAAi6F,EAAAxiH,2BAIA,GAAAsvK,EAAA1sF,OAAA69G,EAAAW,MAEAtsJ,EAAA,IAAA0tE,EAAA/vB,aAAAlqE,EAAAG,QAEA,GAAA4mJ,EAAA1sF,OAAA69G,EAAAa,WAEAxsJ,EAAA,IAAA0tE,EAAA7wB,KAAAppE,EAAAG,QAEA,GAAA4mJ,EAAA1sF,OAAA69G,EAAAY,UAEAvsJ,EAAA,IAAA0tE,EAAA9vB,SAAAnqE,EAAAG,OAEA,CAAA,GAAA4mJ,EAAA1sF,OAAA69G,EAAAU,OAMA,MAAA,IAAAn7L,MAAA,iDAAAspK,EAAA1sF,MAJA9tC,EAAA,IAAA0tE,EAAAzvB,OAAAxqE,EAAAG,GAQA7wB,OAAA+3C,KAAAkF,EAAAvsB,SAAAgkB,iBAAAj2C,OAAA,GAEA46C,EAAA4D,EAAAkwJ,GAIAlwJ,EAAAr+C,KAAAuuM,EAAAvuM,MAAA,QAAA+0M,EAEA/jL,EAAAnxB,OAAA,IAAAw+C,EAAAr+C,MAAA,IAAAD,GAEAquM,EAAA/vJ,EAAAkwJ,GAEApuF,EAAAkzF,oBAAAh1J,GAEAo1G,EAAA3oJ,KAAAuzC,GAIA,GAAA,IAAAo1G,EAAA5zJ,OAEA,OAAA4zJ,EAAA,GAMA,IAFA,IAAAp/G,EAAA,IAAA03E,EAAA7yC,MAEAn5E,EAAA,EAAA+0B,EAAA2+H,EAAA5zJ,OAAAE,EAAA+0B,EAAA/0B,IAEAs0C,EAAAxkC,IAAA4jJ,EAAA1zJ,IAIA,OAAAs0C,KAWA0xJ,EAAA5kM,UAAAowM,WAAA,SAAAyD,GAEA,IAAAj7L,EACAk7L,EAAA1zM,KAAA6zG,KAAAr9B,QAAAi9H,GACA/yG,EAAAgzG,EAAAA,EAAAxqM,MAEA,GAAAw3F,EAqBA,MAdA,gBAAAgzG,EAAAxqM,KAEAsP,EAAA,IAAAgyG,EAAA9oE,kBAAA8oE,EAAAm+B,UAAAr8I,SAAAo0F,EAAA61E,MAAA71E,EAAAm2E,aAAA,EAAAn2E,EAAA+1E,OAAA,EAAA/1E,EAAAg2E,MAAA,KAEA,iBAAAg9B,EAAAxqM,OAEAsP,EAAA,IAAAgyG,EAAA9E,mBAAAhlB,EAAAk2E,MAAA,EAAAl2E,EAAAk2E,KAAA,EAAAl2E,EAAAi2E,KAAA,EAAAj2E,EAAAi2E,MAAA,EAAAj2E,EAAA+1E,MAAA/1E,EAAAg2E,OAIAg9B,EAAAj1M,OAAA+Z,EAAA/Z,KAAAi1M,EAAAj1M,MAEAouM,EAAAr0L,EAAAk7L,GAEAvzB,QAAAC,QAAA5nK,GAnBAjK,QAAAC,KAAA,iDA4BAg2L,EAAA5kM,UAAAkwM,SAAA,SAAAr8B,GAEA,IAAAkgC,EAAA3zM,KAAA6zG,KAAAi7F,MAAAr7B,GAEAmgC,GAAAnhC,OAAAkhC,EAAAlhC,QAEA,YAAAzzK,IAAA20M,EAAAE,oBAEA1zB,QAAAC,QAAAwzB,GAIA5zM,KAAAkoM,cAAA,WAAAyL,EAAAE,qBAAAn1H,KAAA,SAAAy4F,GAIA,OAFAy8B,EAAAC,oBAAA18B,EAEAy8B,KAWApP,EAAA5kM,UAAAmwM,cAAA,SAAA+D,GAYA,IAVA,IAAAjgG,EAAA7zG,KAAA6zG,KAEAkgG,EAAAlgG,EAAA8E,WAAAm7F,GAEAE,KACAC,KACAC,KACAC,KACAC,KAEA51M,EAAA,EAAA+0B,EAAAwgL,EAAAtjC,SAAAnyK,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAAyrB,EAAA8pL,EAAAtjC,SAAAjyK,GACA+xK,EAAAwjC,EAAArjC,SAAAzmJ,EAAAsmJ,SACAnwK,EAAA6pB,EAAA7pB,OACA3B,OAAAO,IAAAoB,EAAAm7H,KAAAn7H,EAAAm7H,KAAAn7H,EAAAquB,GACAypJ,OAAAl5K,IAAA+0M,EAAAvjL,WAAAujL,EAAAvjL,WAAA+/I,EAAA2H,OAAA3H,EAAA2H,MACA53K,OAAAtB,IAAA+0M,EAAAvjL,WAAAujL,EAAAvjL,WAAA+/I,EAAAjwK,QAAAiwK,EAAAjwK,OAEA0zM,EAAAzqM,KAAAvJ,KAAAkoM,cAAA,OAAAzpM,IACAw1M,EAAA1qM,KAAAvJ,KAAAkoM,cAAA,WAAAhwB,IACAg8B,EAAA3qM,KAAAvJ,KAAAkoM,cAAA,WAAA5nM,IACA6zM,EAAA5qM,KAAAgnK,GACA6jC,EAAA7qM,KAAAnJ,GAIA,OAAA+/K,QAAAe,KAEAf,QAAAe,IAAA8yB,GACA7zB,QAAAe,IAAA+yB,GACA9zB,QAAAe,IAAAgzB,GACA/zB,QAAAe,IAAAizB,GACAh0B,QAAAe,IAAAkzB,KAEA11H,KAAA,SAAAgwH,GAUA,IARA,IAAAt9B,EAAAs9B,EAAA,GACA2F,EAAA3F,EAAA,GACA4F,EAAA5F,EAAA,GACAh+B,EAAAg+B,EAAA,GACA9zC,EAAA8zC,EAAA,GAEAj9F,KAEAjzG,EAAA,EAAA+0B,EAAA69I,EAAA9yK,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA+8H,EAAA61C,EAAA5yK,GACA+1M,EAAAF,EAAA71M,GACAg2M,EAAAF,EAAA91M,GACA+xK,EAAAG,EAAAlyK,GACA4B,EAAAw6J,EAAAp8J,GAEA,QAAAQ,IAAAu8H,EAAA,CAKA,IAAAvjB,EAEA,OALAujB,EAAAt5G,eACAs5G,EAAA36G,kBAAA,EAIAirL,EAAAzrM,EAAAjC,OAEA,KAAA0tM,EAAA/tD,QAEA9lC,EAAAwS,EAAAnX,oBACA,MAEA,KAAAw4F,EAAAntL,SAEAs5F,EAAAwS,EAAAjX,wBACA,MAEA,KAAAs4F,EAAA9jL,SACA,KAAA8jL,EAAAhtL,MACA,QAEAm5F,EAAAwS,EAAA/W,oBAKA,IAAAghG,EAAAl5E,EAAA98H,KAAA88H,EAAA98H,KAAA88H,EAAA3wH,KAEAkoG,OAAA9zG,IAAAuxK,EAAAz9D,cAAAg5F,EAAAv7B,EAAAz9D,eAAA0X,EAAA+tB,kBAEA00D,KAEApB,EAAAzrM,EAAAjC,QAAA0tM,EAAA/tD,QAGAviB,EAAApsG,SAAA,SAAAb,IAEA,IAAAA,EAAA2B,QAAA3B,EAAAkrB,uBAEAyzJ,EAAA1jM,KAAA+kB,EAAA7vB,KAAA6vB,EAAA7vB,KAAA6vB,EAAA1jB,QAQAqiM,EAAA1jM,KAAAkrM,GAIA,IAAAC,EAAAF,EAAA1qM,MAEA,GAAA0qM,EAAArnK,WAAA,CAEA,IAAAtuB,EAEA,GAAA61L,EAAAvmM,cAAAo/B,UAEA1uB,EAAA,EAAA,SAEA,GAAA61L,EAAAvmM,cAAAs/B,WAEA5uB,EAAA,EAAA,SAEA,GAAA61L,EAAAvmM,aAAA0/B,WAEAhvB,EAAA,EAAA,UAEA,CAAA,GAAA61L,EAAAvmM,cAAA4/B,YAMA,MAAA,IAAA//B,MAAA,iEAJA6Q,EAAA,EAAA,MAUA,IAFA,IAAA81L,EAAA,IAAAtmK,aAAAqmK,EAAAp2M,QAEAi0B,EAAA,EAAA4jB,EAAAu+J,EAAAp2M,OAAAi0B,EAAA4jB,EAAA5jB,IAEAoiL,EAAApiL,GAAAmiL,EAAAniL,GAAA1T,EAIA61L,EAAAC,EAIA,IAAA,IAAApiL,EAAA,EAAA4jB,EAAA82J,EAAA3uM,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAAm/E,EAAA,IAAAsG,EACAi1F,EAAA16K,GAAA,IAAAs5K,EAAAzrM,EAAAjC,MACAo2M,EAAAzqM,MACA4qM,EACA5hG,GAIA,gBAAAy9D,EAAAz9D,gBAEApB,EAAAmF,kBAAA,SAAAnrC,GAMA,OAAA,IAAA07H,EAAApnM,KAAA4wG,MAAA5wG,KAAA8wB,OAAA9wB,KAAA4xG,eAAA,EAAAlmC,IAKAgmC,EAAAmF,kBAAA+9F,2CAAA,GAIAnjG,EAAAloG,KAAAmoG,KAMA,IAAAjzG,EAAAs1M,EAAAt1M,KAAAs1M,EAAAt1M,KAAA,aAAAq1M,EAEA,OAAA,IAAAtpF,EAAA9W,cAAAj1G,OAAAO,EAAAyyG,MAWA+yF,EAAA5kM,UAAA4vM,SAAA,SAAAL,GAEA,IAWA5pE,EAXA1xB,EAAA7zG,KAAA6zG,KACA5yD,EAAAjhD,KAAAihD,WACA29D,EAAA5+G,KAEAgvM,EAAAn7F,EAAAm7F,eACAC,EAAAp7F,EAAAo7F,SAEAI,EAAAx7F,EAAAu9D,MAAA+9B,GAEA,OAEA5pE,UAEAvmI,IAAAqwM,EAAAvyJ,MAEAyoF,EAAAh8H,KAAAq1G,EAAAspF,cAAA,OAAAmH,EAAAvyJ,MAAA4hC,KAAA,SAAA5hC,GAEA,IAAAy+E,EAEA,GAAAyzE,EAAAK,EAAAvyJ,MAAA,EAAA,CAEA,IAAA+3J,EAAA5F,EAAAI,EAAAvyJ,SAEAy+E,EAAAz+E,EAAA5uC,SACAzP,MAAA,aAAAo2M,OAIAt5E,EAAAz+E,EAqBA,YAhBA99C,IAAAqwM,EAAAvxD,SAEAviB,EAAApsG,SAAA,SAAAwsE,GAEA,GAAAA,EAAA1rE,OAEA,IAAA,IAAAzxB,EAAA,EAAA+0B,EAAA87K,EAAAvxD,QAAAx/I,OAAAE,EAAA+0B,EAAA/0B,IAEAm9F,EAAAniD,sBAAAh7C,GAAA6wM,EAAAvxD,QAAAt/I,KAQA+8H,UAMAv8H,IAAAqwM,EAAA72L,QAEA+sH,EAAAh8H,KAAAq1G,EAAAspF,cAAA,SAAAmH,EAAA72L,SAIA62L,EAAApuJ,YACAouJ,EAAApuJ,WAAAwhJ,EAAAe,2BACAxkM,IAAAqwM,EAAApuJ,WAAAwhJ,EAAAe,qBAAAx8H,OAEAu+D,EAAAh8H,KAAAq1G,EAAAspF,cAAA,QAAAmH,EAAApuJ,WAAAwhJ,EAAAe,qBAAAx8H,QAIAm5G,QAAAe,IAAA37C,IAEA7mD,KAAA,SAAAgC,GAEA,IAAA66C,EAqBA,IAhBAA,GAFA,IAAA8zE,EAAA52G,OAEA,IAAA+xB,EAAAjyB,KAEA7X,EAAApiF,OAAA,EAEA,IAAAksH,EAAA7yC,MAEA,IAAA+I,EAAApiF,OAEAoiF,EAAA,GAIA,IAAA8pC,EAAAl/F,YAIAo1D,EAAA,GAEA,IAAA,IAAAliF,EAAA,EAAA+0B,EAAAmtD,EAAApiF,OAAAE,EAAA+0B,EAAA/0B,IAEA+8H,EAAAjtH,IAAAoyE,EAAAliF,IAiBA,GAXA6wM,EAAA5wM,OAEA88H,EAAAlvG,SAAA5tB,KAAA4wM,EAAA5wM,KACA88H,EAAA98H,KAAA+rH,EAAAyQ,gBAAA8D,iBAAAswE,EAAA5wM,OAIAouM,EAAAtxE,EAAA8zE,GAEAA,EAAApuJ,YAAAwrJ,EAAAxrJ,EAAAs6E,EAAA8zE,QAEArwM,IAAAqwM,EAAA5xL,OAAA,CAEA,IAAAA,EAAA,IAAA+sG,EAAAxmG,QACAvG,EAAArM,UAAAi+L,EAAA5xL,QACA89G,EAAAzjH,aAAA2F,aAIAze,IAAAqwM,EAAAtgB,aAEAxzD,EAAAxzG,SAAA3W,UAAAi+L,EAAAtgB,kBAIA/vL,IAAAqwM,EAAA3wL,UAEA68G,EAAA7nH,WAAAtC,UAAAi+L,EAAA3wL,eAIA1f,IAAAqwM,EAAAxwL,OAEA08G,EAAA18G,MAAAzN,UAAAi+L,EAAAxwL,OAMA,OAAA08G,KAWAipE,EAAA5kM,UAAA2vM,UAAA,WAIA,SAAAuF,EAAAC,EAAAC,EAAAnhG,EAAA+K,GAEA,IAAAywF,EAAAx7F,EAAAu9D,MAAA2jC,GAEA,OAAAn2F,EAAAspF,cAAA,OAAA6M,GAAAr2H,KAAA,SAAA68C,GAEA,YAAAv8H,IAAAqwM,EAAAt8B,KAAAx3C,EAMA3c,EAAAspF,cAAA,OAAAmH,EAAAt8B,MAAAr0F,KAAA,SAAAq0F,GAMA,IAFA,IAAAkiC,KAEAz2M,EAAA,EAAA+0B,GAJAqgL,EAAA7gC,GAIAN,OAAAn0K,OAAAE,EAAA+0B,EAAA/0B,IAEAy2M,EAAA1rM,KAAAq1G,EAAAspF,cAAA,OAAA0L,EAAAnhC,OAAAj0K,KAIA,OAAA2hL,QAAAe,IAAA+zB,KAEAv2H,KAAA,SAAAw2H,GAuCA,OArCA35E,EAAApsG,SAAA,SAAA2tB,GAEA,GAAAA,EAAA7sB,OAAA,CAKA,IAHA,IAAAs0C,KACA+zB,KAEA/lE,EAAA,EAAA4jB,EAAA++J,EAAA52M,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAA4iL,EAAAD,EAAA3iL,GAEA,GAAA4iL,EAAA,CAEA5wI,EAAAh7D,KAAA4rM,GAEA,IAAArzF,EAAA,IAAA0I,EAAAxmG,aAEAhlB,IAAA40M,EAAAC,qBAEA/xF,EAAA1wG,UAAAwiM,EAAAC,oBAAA/pM,MAAA,GAAAyoB,GAIA+lE,EAAA/uF,KAAAu4G,QAIAvzG,QAAAC,KAAA,mDAAAolM,EAAAnhC,OAAAlgJ,IAMAuqB,EAAAi7C,KAAA,IAAAyyB,EAAAnyB,SAAA9zB,EAAA+zB,GAAAx7C,EAAAjkC,gBAIA0iH,IAvDA,IAAAq4E,IA2DAl1H,KAAA,SAAA68C,GAIAy5E,EAAA1mM,IAAAitH,GAEA,IAAAgK,KAEA,GAAA8pE,EAAA7jL,SAIA,IAFA,IAAAA,EAAA6jL,EAAA7jL,SAEAhtB,EAAA,EAAA+0B,EAAA/H,EAAAltB,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAAowB,EAAApD,EAAAhtB,GACA+mI,EAAAh8H,KAAAurM,EAAAlmL,EAAA2sG,EAAA1nB,EAAA+K,IAMA,OAAAuhE,QAAAe,IAAA37C,KAMA,OAAA,SAAA6vE,GAEA,IAAAvhG,EAAA7zG,KAAA6zG,KACA5yD,EAAAjhD,KAAAihD,WACAo0J,EAAAr1M,KAAA6zG,KAAA86F,OAAAyG,GAKApxJ,EAAA,IAAAwmE,EAAA7yC,MACA09H,EAAA52M,OAAAulD,EAAAvlD,KAAA42M,EAAA52M,MAEAouM,EAAA7oJ,EAAAqxJ,GAEAA,EAAAp0J,YAAAwrJ,EAAAxrJ,EAAA+C,EAAAqxJ,GAMA,IAJA,IAAAC,EAAAD,EAAAjkC,UAEA7rC,KAEA/mI,EAAA,EAAA+0B,EAAA+hL,EAAAh3M,OAAAE,EAAA+0B,EAAA/0B,IAEA+mI,EAAAh8H,KAAAurM,EAAAQ,EAAA92M,GAAAwlD,EAAA6vD,EAjBA7zG,OAqBA,OAAAmgL,QAAAe,IAAA37C,GAAA7mD,KAAA,WAEA,OAAA16B,KAhIA,GAwIAg+I,EApsGA,GAwsGAx3E,EAAAw3E,aAGA/jM,EAAA,wCACA,mBACA,SAAAusH,GAshBA,OA/gBAA,EAAA+qF,UAAA,SAAA95F,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAA+qF,UAAA31M,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA+qF,UAeA35F,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEA7B,EAAA,KAAA6B,KAAA7B,KAAAqsH,EAAA5B,YAAAM,eAAAxmG,GAAA1iB,KAAA7B,KAEAg9G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,EAAAxtG,KAEAi8G,EAAAC,IAIAm7F,mBAAA,SAAAl2M,GAGA,OADAU,KAAAy1M,gBAAAn2M,EACAU,MAeAkxB,MAAA,SAAAy6E,EAAAxtG,GAOA,IALA,IAAAu9D,EAAAiwC,EAAAttG,MAAA,MACAm8D,KACAk7I,EAAA,MACAC,KAEAn3M,EAAA,EAAAA,EAAAk9D,EAAAp9D,OAAAE,IAAA,CAEA,IAAAu7B,EAAA2hC,EAAAl9D,GAGA,GAAA,KAFAu7B,EAAAA,EAAAyhC,QAEAl9D,QAAA,MAAAy7B,EAAAgO,OAAA,GAAA,CAOA,IAAAw8H,EAAAxqI,EAAAzwB,QAAA,KAEAynB,EAAAwzI,GAAA,EAAAxqI,EAAA21F,UAAA,EAAA60C,GAAAxqI,EACAhJ,EAAAA,EAAAijF,cAEA,IAAA10G,EAAAilK,GAAA,EAAAxqI,EAAA21F,UAAA60C,EAAA,GAAA,GAGA,GAFAjlK,EAAAA,EAAAk8D,OAEA,WAAAzqC,EAIAypC,GAAA/7D,KAAAa,GACAq2M,EAAAr2M,GAAAk7D,OAIA,GAAA,OAAAzpC,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,EAAA,CAEA,IAAA6kL,EAAAt2M,EAAAjB,MAAAq3M,EAAA,GACAl7I,EAAAzpC,IAAA4W,WAAAiuK,EAAA,IAAAjuK,WAAAiuK,EAAA,IAAAjuK,WAAAiuK,EAAA,UAIAp7I,EAAAzpC,GAAAzxB,GAQA,IAAAu2M,EAAA,IAAArrF,EAAA+qF,UAAAO,gBAAA91M,KAAA27G,cAAAx9G,EAAA6B,KAAAy1M,iBAIA,OAHAI,EAAAh6F,eAAA77G,KAAA07G,aACAm6F,EAAAE,WAAA/1M,KAAAy7G,SACAo6F,EAAAG,aAAAL,GACAE,KAsBArrF,EAAA+qF,UAAAO,gBAAA,SAAAG,EAAA50L,GAEArhB,KAAAi2M,QAAAA,GAAA,GACAj2M,KAAAqhB,QAAAA,EACArhB,KAAA21M,iBACA31M,KAAA0vB,aACA1vB,KAAAk2M,kBACAl2M,KAAAm2M,cAEAn2M,KAAA2pC,KAAA3pC,KAAAqhB,SAAArhB,KAAAqhB,QAAAsoB,KAAA3pC,KAAAqhB,QAAAsoB,KAAA6gF,EAAArpH,UACAnB,KAAAwiB,KAAAxiB,KAAAqhB,SAAArhB,KAAAqhB,QAAAmB,KAAAxiB,KAAAqhB,QAAAmB,KAAAgoG,EAAAjmH,gBAIAimH,EAAA+qF,UAAAO,gBAAAl2M,WAEAuO,YAAAq8G,EAAA+qF,UAAAO,gBAEAp6F,YAAA,YAEAG,eAAA,SAAAv8G,GAGA,OADAU,KAAA07G,YAAAp8G,EACAU,MAIA+1M,WAAA,SAAAz2M,GAEAU,KAAAy7G,QAAAn8G,GAIA02M,aAAA,SAAAL,GAEA31M,KAAA21M,cAAA31M,KAAAqxE,QAAAskI,GACA31M,KAAA0vB,aACA1vB,KAAAk2M,kBACAl2M,KAAAm2M,eAIA9kI,QAAA,SAAAskI,GAEA,IAAA31M,KAAAqhB,QAAA,OAAAs0L,EAEA,IAAAS,KAEA,IAAA,IAAAC,KAAAV,EAAA,CAIA,IAAA7zF,EAAA6zF,EAAAU,GAEAC,KAIA,IAAA,IAAArzC,KAFAmzC,EAAAC,GAAAC,EAEAx0F,EAAA,CAEA,IAAAy0F,GAAA,EACAj3M,EAAAwiH,EAAAmhD,GACAuzC,EAAAvzC,EAAAjvD,cAEA,OAAAwiG,GAEA,IAAA,KACA,IAAA,KACA,IAAA,KAIAx2M,KAAAqhB,SAAArhB,KAAAqhB,QAAAo1L,eAEAn3M,GAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,MAIAU,KAAAqhB,SAAArhB,KAAAqhB,QAAAq1L,gBAEA,IAAAp3M,EAAA,IAAA,IAAAA,EAAA,IAAA,IAAAA,EAAA,KAIAi3M,GAAA,GAcAA,IAEAD,EAAAE,GAAAl3M,IAQA,OAAA82M,GAIAv1B,QAAA,WAEA,IAAA,IAAAw1B,KAAAr2M,KAAA21M,cAEA31M,KAAA+hB,OAAAs0L,IAMA1hK,SAAA,SAAAgiK,GAEA,OAAA32M,KAAAm2M,WAAAQ,IAIAC,WAAA,WAEA,IAAAr2M,EAAA,EAEA,IAAA,IAAA81M,KAAAr2M,KAAA21M,cAEA31M,KAAAk2M,eAAA31M,GAAAP,KAAA+hB,OAAAs0L,GACAr2M,KAAAm2M,WAAAE,GAAA91M,EACAA,IAIA,OAAAP,KAAAk2M,gBAIAn0L,OAAA,SAAA40L,GAQA,YANA33M,IAAAgB,KAAA0vB,UAAAinL,IAEA32M,KAAA62M,gBAAAF,GAIA32M,KAAA0vB,UAAAinL,IAIAE,gBAAA,SAAAF,GAIA,IAAA37J,EAAAh7C,KACA8hH,EAAA9hH,KAAA21M,cAAAgB,GACAj2G,GAEAjiG,KAAAk4M,EACAhtK,KAAA3pC,KAAA2pC,MAgBA,SAAAmtK,EAAAC,EAAAz3M,GAEA,IAAAohG,EAAAq2G,GAAA,CAEA,IAhBAd,EAAAvzL,EAgBAs0L,EAAAh8J,EAAAi8J,iBAAA33M,EAAAohG,GACA30D,EAAAiP,EAAA4kE,aAjBAq2F,EAiBAj7J,EAAAi7J,QAfA,iBAFAvzL,EAiBAs0L,EAAAt0L,MAfA,KAAAA,EACA,GAGA,gBAAA6H,KAAA7H,GAAAA,EAEAuzL,EAAAvzL,IAWAqpB,EAAAprB,OAAAvS,KAAA4oM,EAAAn4L,OACAktB,EAAA16B,OAAAjD,KAAA4oM,EAAA3lM,QAEA06B,EAAA9rB,MAAA+6B,EAAAx4B,KACAupB,EAAA7rB,MAAA86B,EAAAx4B,KAEAk+E,EAAAq2G,GAAAhrK,GAIA,IAAA,IAAAk3H,KAAAnhD,EAAA,CAEA,IACA52G,EADA5L,EAAAwiH,EAAAmhD,GAGA,GAAA,KAAA3jK,EAEA,OAAA2jK,EAAAjvD,eAIA,IAAA,KAIAtT,EAAA35D,OAAA,IAAAyjF,EAAA/jF,OAAAr1B,UAAA9R,GAEA,MAEA,IAAA,KAGAohG,EAAAxwD,UAAA,IAAAs6E,EAAA/jF,OAAAr1B,UAAA9R,GAEA,MAEA,IAAA,KAGAohG,EAAA1wD,UAAA,IAAAw6E,EAAA/jF,OAAAr1B,UAAA9R,GAEA,MAEA,IAAA,SAIAw3M,EAAA,MAAAx3M,GAEA,MAEA,IAAA,SAIAw3M,EAAA,cAAAx3M,GAEA,MAEA,IAAA,SAIAw3M,EAAA,cAAAx3M,GAEA,MAEA,IAAA,OAEAw3M,EAAA,YAAAx3M,GAEA,MAEA,IAAA,WACA,IAAA,OAIAw3M,EAAA,UAAAx3M,GAEA,MAEA,IAAA,QAIAw3M,EAAA,WAAAx3M,GACAohG,EAAA32D,aAAA,EAEA,MAEA,IAAA,KAKA22D,EAAAvwD,UAAAxI,WAAAroC,GAEA,MAEA,IAAA,KACA4L,EAAAy8B,WAAAroC,IAEA,IAEAohG,EAAA52D,QAAA5+B,EACAw1F,EAAA32D,aAAA,GAIA,MAEA,IAAA,KACA7+B,EAAAy8B,WAAAroC,GAEAU,KAAAqhB,SAAArhB,KAAAqhB,QAAA61L,mBAAAhsM,EAAA,EAAAA,GAEAA,EAAA,IAEAw1F,EAAA52D,QAAA,EAAA5+B,EACAw1F,EAAA32D,aAAA,IAcA,OADA/pC,KAAA0vB,UAAAinL,GAAA,IAAAnsF,EAAApnD,kBAAAs9B,GACA1gG,KAAA0vB,UAAAinL,IAIAM,iBAAA,SAAA33M,EAAA63M,GAEA,IAQA5yC,EARAyyC,GAEAn4L,MAAA,IAAA2rG,EAAA19G,QAAA,EAAA,GACAuE,OAAA,IAAAm5G,EAAA19G,QAAA,EAAA,IAIAsqM,EAAA93M,EAAAjB,MAAA,OA+BA,OA5BAkmK,EAAA6yC,EAAA9tM,QAAA,SAEA,IAEA6tM,EAAAzmK,UAAA/I,WAAAyvK,EAAA7yC,EAAA,IACA6yC,EAAAztM,OAAA46J,EAAA,KAIAA,EAAA6yC,EAAA9tM,QAAA,QAEA,IAEA0tM,EAAAn4L,MAAArR,IAAAm6B,WAAAyvK,EAAA7yC,EAAA,IAAA58H,WAAAyvK,EAAA7yC,EAAA,KACA6yC,EAAAztM,OAAA46J,EAAA,KAIAA,EAAA6yC,EAAA9tM,QAAA,QAEA,IAEA0tM,EAAA3lM,OAAA7D,IAAAm6B,WAAAyvK,EAAA7yC,EAAA,IAAA58H,WAAAyvK,EAAA7yC,EAAA,KACA6yC,EAAAztM,OAAA46J,EAAA,IAIAyyC,EAAAt0L,IAAA00L,EAAAxyJ,KAAA,KAAA4W,OACAw7I,GAIAp3F,YAAA,SAAAl9F,EAAA1C,EAAAm6F,EAAAC,EAAAC,GAEA,IAAA54F,EACAg6F,OAAAz8G,IAAAgB,KAAAy7G,QAAAz7G,KAAAy7G,QAAA+O,EAAAjP,sBACAJ,EAAAM,EAAAJ,WAAA34F,GAaA,OAXA,OAAAy4F,IAEAA,EAAA,IAAAqP,EAAAjO,cAAAd,IAIAN,EAAAU,gBAAAV,EAAAU,eAAA77G,KAAA07G,aACAj6F,EAAA05F,EAAAS,KAAAl5F,EAAAy3F,EAAAC,EAAAC,QAEAr7G,IAAAghB,IAAAyB,EAAAzB,QAAAA,GAEAyB,IAMA+oG,EAAA+qF,YAGAt3M,EAAA,wCACA,mBACA,SAAAusH,GA6xBA,OAxxBAA,EAAA6sF,UAAA,WAGA,IAAAC,EAAA,gBAEAC,EAAA,WAEAC,EAAA,WAEAC,EAAA,WAkWA,SAAAJ,EAAA57F,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAA0vB,UAAA,KAqaA,OAjaA2nL,EAAAz3M,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAkpM,EAEAz7F,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,KAEAyO,EAAAC,IAIA27F,aAAA,SAAAtmL,GAIA,OAFA1vB,KAAA0vB,UAAAA,EAEA1vB,MAIAkxB,MAAA,SAAAy6E,GAEA,IAAAxkC,EAAA,IApYA,WAEA,IAAAA,GACAuZ,WACApyD,UAEAmgB,YACAC,WACAC,UACAC,OAEAlf,aACAgoL,qBAEAC,YAAA,SAAAl5M,EAAAm5M,GAIA,GAAA53M,KAAAsuB,SAAA,IAAAtuB,KAAAsuB,OAAAspL,gBAIA,OAFA53M,KAAAsuB,OAAA7vB,KAAAA,OACAuB,KAAAsuB,OAAAspL,iBAAA,IAAAA,GAKA,IAAAC,EAAA73M,KAAAsuB,QAAA,mBAAAtuB,KAAAsuB,OAAAwpL,gBAAA93M,KAAAsuB,OAAAwpL,uBAAA94M,EA8HA,GA5HAgB,KAAAsuB,QAAA,mBAAAtuB,KAAAsuB,OAAAypL,WAEA/3M,KAAAsuB,OAAAypL,WAAA,GAIA/3M,KAAAsuB,QACA7vB,KAAAA,GAAA,GACAm5M,iBAAA,IAAAA,EAEArnL,UACAke,YACAC,WACAC,UACAC,QAEAlf,aACAsoL,QAAA,EAEAC,cAAA,SAAAx5M,EAAA0iL,GAEA,IAAA+2B,EAAAl4M,KAAA+3M,WAAA,GAIAG,IAAAA,EAAAC,WAAAD,EAAAh4J,YAAA,IAEAlgD,KAAA0vB,UAAA/lB,OAAAuuM,EAAA33M,MAAA,GAIA,IAAAmwB,GACAnwB,MAAAP,KAAA0vB,UAAApxB,OACAG,KAAAA,GAAA,GACA25M,OAAAz1L,MAAAC,QAAAu+J,IAAAA,EAAA7iL,OAAA,EAAA6iL,EAAAA,EAAA7iL,OAAA,GAAA,GACA05M,YAAAh5M,IAAAk5M,EAAAA,EAAAF,OAAAh4M,KAAAg4M,OACA54J,gBAAApgD,IAAAk5M,EAAAA,EAAAG,SAAA,EACAA,UAAA,EACAn4J,YAAA,EACAi4J,WAAA,EAEAjqM,MAAA,SAAA3N,GAEA,IAAA+3M,GACA/3M,MAAA,iBAAAA,EAAAA,EAAAP,KAAAO,MACA9B,KAAAuB,KAAAvB,KACA25M,OAAAp4M,KAAAo4M,OACAJ,OAAAh4M,KAAAg4M,OACA54J,WAAA,EACAi5J,UAAA,EACAn4J,YAAA,EACAi4J,WAAA,GAGA,OADAG,EAAApqM,MAAAlO,KAAAkO,MAAA6pF,KAAAugH,GACAA,IAOA,OAFAt4M,KAAA0vB,UAAAnmB,KAAAmnB,GAEAA,GAIAonL,gBAAA,WAEA,GAAA93M,KAAA0vB,UAAApxB,OAAA,EAEA,OAAA0B,KAAA0vB,UAAA1vB,KAAA0vB,UAAApxB,OAAA,IAQAy5M,UAAA,SAAA19K,GAEA,IAAAk+K,EAAAv4M,KAAA83M,kBAUA,GATAS,IAAA,IAAAA,EAAAF,WAEAE,EAAAF,SAAAr4M,KAAAuwB,SAAAke,SAAAnwC,OAAA,EACAi6M,EAAAr4J,WAAAq4J,EAAAF,SAAAE,EAAAn5J,WACAm5J,EAAAJ,WAAA,GAKA99K,GAAAr6B,KAAA0vB,UAAApxB,OAAA,EAEA,IAAA,IAAAk6M,EAAAx4M,KAAA0vB,UAAApxB,OAAA,EAAAk6M,GAAA,EAAAA,IAEAx4M,KAAA0vB,UAAA8oL,GAAAt4J,YAAA,GAEAlgD,KAAA0vB,UAAA/lB,OAAA6uM,EAAA,GAkBA,OATAn+K,GAAA,IAAAr6B,KAAA0vB,UAAApxB,QAEA0B,KAAA0vB,UAAAnmB,MACA9K,KAAA,GACAu5M,OAAAh4M,KAAAg4M,SAKAO,IAWAV,GAAAA,EAAAp5M,MAAA,mBAAAo5M,EAAA3pM,MAAA,CAEA,IAAAuqM,EAAAZ,EAAA3pM,MAAA,GACAuqM,EAAAN,WAAA,EACAn4M,KAAAsuB,OAAAoB,UAAAnmB,KAAAkvM,GAIAz4M,KAAA0gF,QAAAn3E,KAAAvJ,KAAAsuB,SAIAoqL,SAAA,WAEA14M,KAAAsuB,QAAA,mBAAAtuB,KAAAsuB,OAAAypL,WAEA/3M,KAAAsuB,OAAAypL,WAAA,IAMAY,iBAAA,SAAAr5M,EAAA+T,GAEA,IAAA9S,EAAAunC,SAAAxoC,EAAA,IACA,OAAA,GAAAiB,GAAA,EAAAA,EAAA,EAAAA,EAAA8S,EAAA,IAIAulM,iBAAA,SAAAt5M,EAAA+T,GAEA,IAAA9S,EAAAunC,SAAAxoC,EAAA,IACA,OAAA,GAAAiB,GAAA,EAAAA,EAAA,EAAAA,EAAA8S,EAAA,IAIAwlM,aAAA,SAAAv5M,EAAA+T,GAEA,IAAA9S,EAAAunC,SAAAxoC,EAAA,IACA,OAAA,GAAAiB,GAAA,EAAAA,EAAA,EAAAA,EAAA8S,EAAA,IAIA62F,UAAA,SAAAt7F,EAAAC,EAAAgD,GAEA,IAAAwN,EAAArf,KAAAyuC,SACAp8B,EAAArS,KAAAsuB,OAAAiC,SAAAke,SAEAp8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,IACAyD,EAAA9I,KAAA8V,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,IACAwD,EAAA9I,KAAA8V,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,KAIAinM,eAAA,SAAAlqM,GAEA,IAAAyQ,EAAArf,KAAAyuC,SACAp8B,EAAArS,KAAAsuB,OAAAiC,SAAAke,SAEAp8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,KAIAmqM,cAAA,SAAAnqM,GAEA,IAAAyQ,EAAArf,KAAAyuC,SACAp8B,EAAArS,KAAAsuB,OAAAiC,SAAAke,SAEAp8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,KAIAoqM,UAAA,SAAApqM,EAAAC,EAAAgD,GAEA,IAAAwN,EAAArf,KAAA0uC,QACAr8B,EAAArS,KAAAsuB,OAAAiC,SAAAme,QAEAr8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,IACAyD,EAAA9I,KAAA8V,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,IACAwD,EAAA9I,KAAA8V,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,KAIAonM,SAAA,SAAArqM,EAAAC,EAAAgD,GAEA,IAAAwN,EAAArf,KAAA2uC,OACAt8B,EAAArS,KAAAsuB,OAAAiC,SAAAoe,OAEAt8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,IACAyD,EAAA9I,KAAA8V,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,IACAwD,EAAA9I,KAAA8V,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,KAIAw4F,MAAA,SAAAz7F,EAAAC,EAAAgD,GAEA,IAAAwN,EAAArf,KAAA4uC,IACAv8B,EAAArS,KAAAsuB,OAAAiC,SAAAqe,IAEAv8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,IACAyD,EAAA9I,KAAA8V,EAAAxQ,EAAA,GAAAwQ,EAAAxQ,EAAA,IACAwD,EAAA9I,KAAA8V,EAAAxN,EAAA,GAAAwN,EAAAxN,EAAA,KAIAqnM,UAAA,SAAAtqM,GAEA,IAAAyQ,EAAArf,KAAA4uC,IACAv8B,EAAArS,KAAAsuB,OAAAiC,SAAAqe,IAEAv8B,EAAA9I,KAAA8V,EAAAzQ,EAAA,GAAAyQ,EAAAzQ,EAAA,KAIAqsC,QAAA,SAAArsC,EAAAC,EAAAgD,EAAAsnM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAz5M,KAAAyuC,SAAAnwC,OAEAo7M,EAAA15M,KAAA24M,iBAAA/pM,EAAA6qM,GACAzI,EAAAhxM,KAAA24M,iBAAA9pM,EAAA4qM,GACAE,EAAA35M,KAAA24M,iBAAA9mM,EAAA4nM,GAUA,GARAz5M,KAAAkqG,UAAAwvG,EAAA1I,EAAA2I,GAEA35M,KAAA2uC,OAAArwC,OAAA,GAEA0B,KAAAi5M,SAAAS,EAAA1I,EAAA2I,QAIA36M,IAAAm6M,GAAA,KAAAA,EAAA,CAEA,IAAAS,EAAA55M,KAAA4uC,IAAAtwC,OACAo7M,EAAA15M,KAAA64M,aAAAM,EAAAS,GACA5I,EAAAhxM,KAAA64M,aAAAO,EAAAQ,GACAD,EAAA35M,KAAA64M,aAAAQ,EAAAO,GACA55M,KAAAqqG,MAAAqvG,EAAA1I,EAAA2I,GAIA,QAAA36M,IAAAs6M,GAAA,KAAAA,EAAA,CAGA,IAAAO,EAAA75M,KAAA0uC,QAAApwC,OACAo7M,EAAA15M,KAAA44M,iBAAAU,EAAAO,GAEA7I,EAAAsI,IAAAC,EAAAG,EAAA15M,KAAA44M,iBAAAW,EAAAM,GACAF,EAAAL,IAAAE,EAAAE,EAAA15M,KAAA44M,iBAAAY,EAAAK,GAEA75M,KAAAg5M,UAAAU,EAAA1I,EAAA2I,KAMAG,iBAAA,SAAArrK,GAEAzuC,KAAAsuB,OAAAiC,SAAArnB,KAAA,SAIA,IAFA,IAAAuwM,EAAAz5M,KAAAyuC,SAAAnwC,OAEAy7M,EAAA,EAAA/vM,EAAAykC,EAAAnwC,OAAAy7M,EAAA/vM,EAAA+vM,IAEA/5M,KAAA84M,eAAA94M,KAAA24M,iBAAAlqK,EAAAsrK,GAAAN,KAMAO,gBAAA,SAAAvrK,EAAAG,GAEA5uC,KAAAsuB,OAAAiC,SAAArnB,KAAA,OAKA,IAHA,IAAAuwM,EAAAz5M,KAAAyuC,SAAAnwC,OACAs7M,EAAA55M,KAAA4uC,IAAAtwC,OAEAy7M,EAAA,EAAA/vM,EAAAykC,EAAAnwC,OAAAy7M,EAAA/vM,EAAA+vM,IAEA/5M,KAAA+4M,cAAA/4M,KAAA24M,iBAAAlqK,EAAAsrK,GAAAN,IAIA,IAAA,IAAAQ,EAAA,EAAAjwM,EAAA4kC,EAAAtwC,OAAA27M,EAAAjwM,EAAAiwM,IAEAj6M,KAAAk5M,UAAAl5M,KAAA64M,aAAAjqK,EAAAqrK,GAAAL,MAUA,OAFAzyI,EAAAwwI,YAAA,IAAA,GAEAxwI,IA4CA,IAAAwkC,EAAAriG,QAAA,UAGAqiG,EAAAA,EAAA3vC,QAAA,QAAA,QAIA,IAAA2vC,EAAAriG,QAAA,UAGAqiG,EAAAA,EAAA3vC,QAAA,QAAA,KAYA,IARA,IAAAN,EAAAiwC,EAAAttG,MAAA,MACA07B,EAAA,GAAAmgL,EAAA,GAEAxuI,KAGAyuI,EAAA,kBAAA,GAAAA,SAEA37M,EAAA,EAAAwL,EAAA0xD,EAAAp9D,OAAAE,EAAAwL,EAAAxL,IAQA,GANAu7B,EAAA2hC,EAAAl9D,GAEAu7B,EAAAogL,EAAApgL,EAAAogL,WAAApgL,EAAAyhC,OAIA,IAFAzhC,EAAAz7B,QAOA,OAHA47M,EAAAngL,EAAAgO,OAAA,IAKA,GAAA,MAAAmyK,EAAA,CAEA,IAAAlpL,EAAA+I,EAAA17B,MAAA,OAEA,OAAA2yB,EAAA,IAEA,IAAA,IACAm2C,EAAA14B,SAAAllC,KACAo+B,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,KAEAA,EAAA1yB,QAAA,GAEA6oE,EAAAx4B,OAAAplC,KACAo+B,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,KAKA,MACA,IAAA,KACAm2C,EAAAz4B,QAAAnlC,KACAo+B,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,KAEA,MACA,IAAA,KACAm2C,EAAAv4B,IAAArlC,KACAo+B,WAAA3W,EAAA,IACA2W,WAAA3W,EAAA,WAMA,GAAA,MAAAkpL,EAAA,CAQA,IANA,IAAAE,EAAArgL,EAAAqmF,OAAA,GAAA5kD,OACA6+I,EAAAD,EAAA/7M,MAAA,OACAi8M,KAIA/nL,EAAA,EAAA4jB,EAAAkkK,EAAA/7M,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAAuoB,EAAAu/J,EAAA9nL,GAEA,GAAAuoB,EAAAx8C,OAAA,EAAA,CAEA,IAAAi8M,EAAAz/J,EAAAz8C,MAAA,KACAi8M,EAAA/wM,KAAAgxM,IAUA,IAFA,IAAAtpM,EAAAqpM,EAAA,GAEA/nL,EAAA,EAAA4jB,EAAAmkK,EAAAh8M,OAAA,EAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAArhB,EAAAopM,EAAA/nL,GACA8wF,EAAAi3F,EAAA/nL,EAAA,GAEA40C,EAAAlsB,QACAhqC,EAAA,GAAAC,EAAA,GAAAmyG,EAAA,GACApyG,EAAA,GAAAC,EAAA,GAAAmyG,EAAA,GACApyG,EAAA,GAAAC,EAAA,GAAAmyG,EAAA,UAKA,GAAA,MAAA62F,EAAA,CAEA,IAAAM,EAAAzgL,EAAA21F,UAAA,GAAAl0D,OAAAn9D,MAAA,KACAo8M,KAAAC,KAEA,IAAA,IAAA3gL,EAAAzwB,QAAA,KAEAmxM,EAAAD,OAIA,IAAA,IAAAG,EAAA,EAAAC,EAAAJ,EAAAl8M,OAAAq8M,EAAAC,EAAAD,IAAA,CAEA,IAAA5hG,EAAAyhG,EAAAG,GAAAt8M,MAAA,KAEA,KAAA06G,EAAA,IAAA0hG,EAAAlxM,KAAAwvG,EAAA,IACA,KAAAA,EAAA,IAAA2hG,EAAAnxM,KAAAwvG,EAAA,IAKA5xC,EAAA6yI,gBAAAS,EAAAC,QAEA,GAAA,MAAAR,EAAA,CAEA,IAAAE,EAAArgL,EAAAqmF,OAAA,GAAA5kD,OACAq/I,EAAAT,EAAA/7M,MAAA,KAEA8oE,EAAA2yI,iBAAAe,QAEA,GAAA,QAAAnvI,EAAA4rI,EAAA1vK,KAAA7N,IAAA,CAQA,IAAAt7B,GAAA,IAAAitE,EAAA,GAAA00C,OAAA,GAAA5kD,QAAA4kD,OAAA,GAEAj5C,EAAAwwI,YAAAl5M,QAEA,GAAA+4M,EAAAjtL,KAAAwP,GAIAotC,EAAA74C,OAAA2pL,cAAAl+K,EAAA21F,UAAA,GAAAl0D,OAAA2L,EAAAuwI,wBAEA,GAAAH,EAAAhtL,KAAAwP,GAIAotC,EAAAuwI,kBAAAnuM,KAAAwwB,EAAA21F,UAAA,GAAAl0D,aAEA,GAAAi8I,EAAAltL,KAAAwP,GAKAxrB,QAAAC,KAAA,6GAEA,GAAA,MAAA0rM,EAAA,CAwBA,IAtBAxuI,EAAA3xC,EAAA17B,MAAA,MAsBAC,OAAA,EAAA,CAEA,IAAAgB,EAAAosE,EAAA,GAAAlQ,OAAAw4C,cACA7sC,EAAA74C,OAAA0pL,OAAA,MAAA14M,GAAA,QAAAA,OAKA6nE,EAAA74C,OAAA0pL,QAAA,EAGA,IAAAtnL,EAAAy2C,EAAA74C,OAAAwpL,kBACApnL,IAAAA,EAAAsnL,OAAA7wI,EAAA74C,OAAA0pL,YAEA,CAGA,GAAA,OAAAj+K,EAAA,SAEAxrB,QAAAC,KAAA,sCAAAurB,EAAA,KAMAotC,EAAAuxI,WAEA,IAAA9+I,EAAA,IAAA4wD,EAAA7yC,MACA/d,EAAA89I,qBAAAjwG,OAAAtgC,EAAAuwI,mBAEA,IAAA,IAAAl5M,EAAA,EAAAwL,EAAAm9D,EAAAuZ,QAAApiF,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAA8vB,EAAA64C,EAAAuZ,QAAAliF,GACA+xB,EAAAjC,EAAAiC,SACAb,EAAApB,EAAAoB,UACAW,EAAA,SAAAE,EAAArnB,KACAonB,EAAA,WAAAC,EAAArnB,KACA4xM,GAAA,EAGA,GAAA,IAAAvqL,EAAAke,SAAAnwC,OAAA,CAEA,IAAA0sF,EAAA,IAAAw/B,EAAAn2E,eAEA22C,EAAAl2C,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAA7d,EAAAke,SAAA,IAEAle,EAAAme,QAAApwC,OAAA,EAEA0sF,EAAAl2C,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAA7d,EAAAme,QAAA,IAIAs8C,EAAA30C,uBAIA9lB,EAAAoe,OAAArwC,OAAA,IAEAw8M,GAAA,EACA9vH,EAAAl2C,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAA7d,EAAAoe,OAAA,KAIApe,EAAAqe,IAAAtwC,OAAA,GAEA0sF,EAAAl2C,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAA7d,EAAAqe,IAAA,IAQA,IAFA,IA8DAkO,EA9DAi+J,KAEAvC,EAAA,EAAAwC,EAAAtrL,EAAApxB,OAAAk6M,EAAAwC,EAAAxC,IAAA,CAEA,IAAAyC,EAAAvrL,EAAA8oL,GACA0C,EAAAD,EAAAx8M,KAAA,IAAAw8M,EAAAjD,OAAA,IAAA8C,EACApqL,EAAAy2C,EAAAz3C,UAAAwrL,GAEA,GAAA,OAAAl7M,KAAA0vB,UAKA,GAHAgB,EAAA1wB,KAAA0vB,UAAA3N,OAAAk5L,EAAAx8M,OAGA4xB,IAAAK,GAAAA,aAAA85F,EAAA/mD,mBAOA,GAAAnzC,GAAAI,KAAAA,aAAA85F,EAAA7mD,gBAAA,CAEA,IAAAw3I,EAAA,IAAA3wF,EAAA7mD,gBAAAjwC,KAAA,GAAA4d,iBAAA,IACAk5E,EAAA/gF,SAAA7pC,UAAAwO,KAAAxN,KAAAu6M,EAAAzqL,GACAyqL,EAAAp0K,MAAA34B,KAAAsiB,EAAAqW,OACAo0K,EAAApvK,IAAArb,EAAAqb,IACArb,EAAAyqL,OAbA,CAEA,IAAAC,EAAA,IAAA5wF,EAAA/mD,kBACA+mD,EAAA/gF,SAAA7pC,UAAAwO,KAAAxN,KAAAw6M,EAAA1qL,GACA0qL,EAAAr0K,MAAA34B,KAAAsiB,EAAAqW,OACArW,EAAA0qL,OAcAp8M,IAAA0xB,KAIAA,EAFAL,EAEA,IAAAm6F,EAAA/mD,kBAEAnzC,EAEA,IAAAk6F,EAAA7mD,gBAAAjwC,KAAA,EAAA4d,iBAAA,IAIA,IAAAk5E,EAAApnD,mBAIA3kE,KAAAw8M,EAAAx8M,KACAiyB,EAAAkZ,aAAAqxK,EAAAjD,OACAtnL,EAAAyW,aAAA2zK,EAEA3zI,EAAAz3C,UAAAwrL,GAAAxqL,GAIAqqL,EAAAxxM,KAAAmnB,GAQA,GAAAqqL,EAAAz8M,OAAA,EAAA,CAEA,IAAA,IAAAk6M,EAAA,EAAAwC,EAAAtrL,EAAApxB,OAAAk6M,EAAAwC,EAAAxC,IAAA,CAEA,IAAAyC,EAAAvrL,EAAA8oL,GACAxtH,EAAAh2C,SAAAimK,EAAA77J,WAAA67J,EAAA/6J,WAAAs4J,GAMA17J,EAFAzsB,EAEA,IAAAm6F,EAAA/vB,aAAAzP,EAAA+vH,GAEAzqL,EAEA,IAAAk6F,EAAAzvB,OAAA/P,EAAA+vH,GAIA,IAAAvwF,EAAAvxE,KAAA+xC,EAAA+vH,QAQAj+J,EAFAzsB,EAEA,IAAAm6F,EAAA/vB,aAAAzP,EAAA+vH,EAAA,IAEAzqL,EAEA,IAAAk6F,EAAAzvB,OAAA/P,EAAA+vH,EAAA,IAIA,IAAAvwF,EAAAvxE,KAAA+xC,EAAA+vH,EAAA,IAMAj+J,EAAAr+C,KAAA6vB,EAAA7vB,KAEAm7D,EAAAtrD,IAAAwuC,IAIA,OAAA8c,KAMAy9I,EApxBA,GAwxBA7sF,EAAA6sF,YAGAp5M,EAAA,wCACA,mBACA,SAAAusH,GA0YA,OAlYAA,EAAA6wF,UAAA,SAAA5/F,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAomK,cAAA,GAKA57C,EAAA6wF,UAAAz7M,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA6wF,UAEAz/F,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAsO,GAEA,IAEAmpF,EAAAn/D,EAAA9pB,MAAAF,EAAAtO,IAEA,MAAAnT,GAEA,IAAA8qG,EAMA,MAAA9qG,EAJA8qG,EAAA9qG,KAUA6qG,EAAAC,IAIAnpF,MAAA,SAAAF,EAAAtO,GAqKA,IAAA44L,EAAA9wF,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,IAIAuqL,EAjHA,SAAAvqL,GAEA,IAAAuqL,KACAC,EAAAxqL,EAAAuvF,OAAA,wBACAk7F,EAAA,uBAAA7zK,KAAA5W,EAAAovF,OAAAo7F,EAAA,IAEAD,EAAAvqL,KAAAyqL,EAAA,GACAF,EAAAG,UAAAD,EAAA,GAAAn9M,OAAAk9M,EACAD,EAAAj7C,IAAAtvI,EAAAovF,OAAA,EAAAm7F,EAAAG,WAIAH,EAAAj7C,IAAAi7C,EAAAj7C,IAAAtkG,QAAA,SAAA,IAIAu/I,EAAAt6L,QAAA,gBAAA2mB,KAAA2zK,EAAAj7C,KACAi7C,EAAAI,OAAA,eAAA/zK,KAAA2zK,EAAAj7C,KACAi7C,EAAA7nL,KAAA,aAAAkU,KAAA2zK,EAAAj7C,KACAi7C,EAAAryM,KAAA,aAAA0+B,KAAA2zK,EAAAj7C,KACAi7C,EAAA1/L,MAAA,cAAA+rB,KAAA2zK,EAAAj7C,KACAi7C,EAAAhuM,MAAA,cAAAq6B,KAAA2zK,EAAAj7C,KACAi7C,EAAA9tM,OAAA,eAAAm6B,KAAA2zK,EAAAj7C,KACAi7C,EAAAK,UAAA,kBAAAh0K,KAAA2zK,EAAAj7C,KACAi7C,EAAAloL,OAAA,eAAAuU,KAAA2zK,EAAAj7C,KAIA,OAAAi7C,EAAAt6L,UACAs6L,EAAAt6L,QAAA0mB,WAAA4zK,EAAAt6L,QAAA,KAEA,OAAAs6L,EAAAI,SACAJ,EAAAI,OAAAJ,EAAAI,OAAA,GAAAt9M,MAAA,MAEA,OAAAk9M,EAAAryM,OACAqyM,EAAAryM,KAAAqyM,EAAAryM,KAAA,GAAA7K,MAAA,MAEA,OAAAk9M,EAAAhuM,QACAguM,EAAAhuM,MAAAu6B,SAAAyzK,EAAAhuM,MAAA,KAEA,OAAAguM,EAAA9tM,SACA8tM,EAAA9tM,OAAAq6B,SAAAyzK,EAAA9tM,OAAA,KAEA,OAAA8tM,EAAAK,YACAL,EAAAK,UAAAL,EAAAK,UAAA,IAEA,OAAAL,EAAAloL,SACAkoL,EAAAloL,OAAAyU,SAAAyzK,EAAAloL,OAAA,GAAA,KAEA,OAAAkoL,EAAAloL,SACAkoL,EAAAloL,OAAAkoL,EAAAhuM,MAAAguM,EAAA9tM,QAEA,OAAA8tM,EAAA7nL,OAEA6nL,EAAA7nL,KAAA6nL,EAAA7nL,KAAA,GAAAr1B,MAAA,KAAA0tC,IAAA,SAAArsC,GAEA,OAAAooC,SAAApoC,EAAA,OAMA,GAAA,OAAA67M,EAAA1/L,MAEA0/L,EAAA1/L,MAAA0/L,EAAA1/L,MAAA,GAAAxd,MAAA,KAAA0tC,IAAA,SAAArsC,GAEA,OAAAooC,SAAApoC,EAAA,UAIA,CAEA67M,EAAA1/L,SAEA,IAAA,IAAArd,EAAA,EAAAwL,EAAAuxM,EAAAI,OAAAr9M,OAAAE,EAAAwL,EAAAxL,IAEA+8M,EAAA1/L,MAAAtS,KAAA,GAMAgyM,EAAAlqM,UAIA,IAFA,IAAAwqM,EAAA,EAEAr9M,EAAA,EAAAwL,EAAAuxM,EAAAI,OAAAr9M,OAAAE,EAAAwL,EAAAxL,IAEA,UAAA+8M,EAAAvqL,KAEAuqL,EAAAlqM,OAAAkqM,EAAAI,OAAAn9M,IAAAA,GAIA+8M,EAAAlqM,OAAAkqM,EAAAI,OAAAn9M,IAAAq9M,EACAA,GAAAN,EAAA7nL,KAAAl1B,IAUA,OAFA+8M,EAAAO,QAAAD,EAEAN,EAQAQ,CAAAT,GAIAvzL,KACArO,KACAqtB,KAIA,GAAA,UAAAw0K,EAAAvqL,KAMA,IAJA,IAAA3f,EAAAkqM,EAAAlqM,OACA2qM,EAAAV,EAAAl7F,OAAAm7F,EAAAG,WACAhgJ,EAAAsgJ,EAAA39M,MAAA,MAEAG,EAAA,EAAAwL,EAAA0xD,EAAAp9D,OAAAE,EAAAwL,EAAAxL,IAEA,GAAA,KAAAk9D,EAAAl9D,GAAA,CAEA,IAAAu7B,EAAA2hC,EAAAl9D,GAAAH,MAAA,KAUA,QARAW,IAAAqS,EAAA3R,IAEAqoB,EAAAxe,KAAAo+B,WAAA5N,EAAA1oB,EAAA3R,KACAqoB,EAAAxe,KAAAo+B,WAAA5N,EAAA1oB,EAAA3F,KACAqc,EAAAxe,KAAAo+B,WAAA5N,EAAA1oB,EAAArE,WAIAhO,IAAAqS,EAAA4qM,IAAA,CAEA,IAAAA,EAAAt0K,WAAA5N,EAAA1oB,EAAA4qM,MACAzmM,EAAAymM,GAAA,GAAA,IACA3+L,EAAA2+L,GAAA,EAAA,IACAptM,EAAAotM,GAAA,EAAA,IACAl1K,EAAAx9B,KAAAiM,EAAA,IAAA8H,EAAA,IAAAzO,EAAA,UAIA7P,IAAAqS,EAAA6qM,WAEAxiM,EAAAnQ,KAAAo+B,WAAA5N,EAAA1oB,EAAA6qM,YACAxiM,EAAAnQ,KAAAo+B,WAAA5N,EAAA1oB,EAAA8qM,YACAziM,EAAAnQ,KAAAo+B,WAAA5N,EAAA1oB,EAAA+qM,aAcA,GAAA,sBAAAb,EAAAvqL,KAUA,IARA,IAAAqrL,EAAA,IAAAluK,YAAAnd,EAAAjnB,MAAAwxM,EAAAG,UAAAH,EAAAG,UAAA,IACAlwC,EAAA6wC,EAAA,GACAC,EAAAD,EAAA,GACAE,EApOA,SAAAC,EAAAC,GAEA,IAIAC,EACArpM,EACAspM,EANAC,EAAAJ,EAAAl+M,OACAu+M,EAAA,IAAApvK,WAAAgvK,GACAK,EAAA,EACAC,EAAA,EAIA,GAGA,IADAL,EAAAF,EAAAM,MACA,GAAA,CAGA,GAAAC,KADAL,EACAD,EAAA,MAAA,IAAAzuM,MAAA,qCACA,GAAA8uM,EAAAJ,EAAAE,EAAA,MAAA,IAAA5uM,MAAA,2BACA,GAEA6uM,EAAAE,KAAAP,EAAAM,aAEAJ,OAEA,CAIA,GAFArpM,EAAAqpM,GAAA,EACAC,EAAAI,IAAA,GAAAL,IAAA,GAAA,EACAI,GAAAF,EAAA,MAAA,IAAA5uM,MAAA,2BACA,GAAA,IAAAqF,IAEAA,GAAAmpM,EAAAM,KACAA,GAAAF,GAAA,MAAA,IAAA5uM,MAAA,2BAIA,GADA2uM,GAAAH,EAAAM,KACAC,EAAA1pM,EAAA,EAAAopM,EAAA,MAAA,IAAAzuM,MAAA,qCACA,GAAA2uM,EAAA,EAAA,MAAA,IAAA3uM,MAAA,2BACA,GAAA2uM,GAAAI,EAAA,MAAA,IAAA/uM,MAAA,2BACA,GAEA6uM,EAAAE,KAAAF,EAAAF,WAEA,IAAAtpM,UAIAypM,EAAAF,GAEA,OAAAC,EAoLAG,CAAA,IAAAvvK,WAAAzc,EAAAuqL,EAAAG,UAAA,EAAAlwC,GAAA8wC,GACAh2C,EAAA,IAAA51D,SAAA6rG,EAAAppJ,QAEA9hD,EAAAkqM,EAAAlqM,OAEA7S,EAAA,EAAAA,EAAA+8M,EAAAloL,OAAA70B,SAEAQ,IAAAqS,EAAA3R,IAEAqoB,EAAAxe,KAAA+8J,EAAA9E,WAAA+5C,EAAAloL,OAAAhiB,EAAA3R,EAAA67M,EAAA7nL,KAAA,GAAAl1B,EAAAwB,KAAAomK,eACAr+I,EAAAxe,KAAA+8J,EAAA9E,WAAA+5C,EAAAloL,OAAAhiB,EAAA3F,EAAA6vM,EAAA7nL,KAAA,GAAAl1B,EAAAwB,KAAAomK,eACAr+I,EAAAxe,KAAA+8J,EAAA9E,WAAA+5C,EAAAloL,OAAAhiB,EAAArE,EAAAuuM,EAAA7nL,KAAA,GAAAl1B,EAAAwB,KAAAomK,qBAIApnK,IAAAqS,EAAA4qM,MAEAl1K,EAAAx9B,KAAA+8J,EAAAhO,SAAAijD,EAAAloL,OAAAhiB,EAAA4qM,IAAAV,EAAA7nL,KAAA,GAAAl1B,EAAA,GAAA,KACAuoC,EAAAx9B,KAAA+8J,EAAAhO,SAAAijD,EAAAloL,OAAAhiB,EAAA4qM,IAAAV,EAAA7nL,KAAA,GAAAl1B,EAAA,GAAA,KACAuoC,EAAAx9B,KAAA+8J,EAAAhO,SAAAijD,EAAAloL,OAAAhiB,EAAA4qM,IAAAV,EAAA7nL,KAAA,GAAAl1B,EAAA,GAAA,WAIAQ,IAAAqS,EAAA6qM,WAEAxiM,EAAAnQ,KAAA+8J,EAAA9E,WAAA+5C,EAAAloL,OAAAhiB,EAAA6qM,SAAAX,EAAA7nL,KAAA,GAAAl1B,EAAAwB,KAAAomK,eACA1sJ,EAAAnQ,KAAA+8J,EAAA9E,WAAA+5C,EAAAloL,OAAAhiB,EAAA8qM,SAAAZ,EAAA7nL,KAAA,GAAAl1B,EAAAwB,KAAAomK,eACA1sJ,EAAAnQ,KAAA+8J,EAAA9E,WAAA+5C,EAAAloL,OAAAhiB,EAAA+qM,SAAAb,EAAA7nL,KAAA,GAAAl1B,EAAAwB,KAAAomK,gBAUA,GAAA,WAAAm1C,EAAAvqL,KAKA,IAHA,IAAAs1I,EAAA,IAAA51D,SAAA1/E,EAAAuqL,EAAAG,WACArqM,EAAAkqM,EAAAlqM,OAEA7S,EAAA,EAAAy+M,EAAA,EAAAz+M,EAAA+8M,EAAAloL,OAAA70B,IAAAy+M,GAAA1B,EAAAO,aAEA98M,IAAAqS,EAAA3R,IAEAqoB,EAAAxe,KAAA+8J,EAAA9E,WAAAy7C,EAAA5rM,EAAA3R,EAAAM,KAAAomK,eACAr+I,EAAAxe,KAAA+8J,EAAA9E,WAAAy7C,EAAA5rM,EAAA3F,EAAA1L,KAAAomK,eACAr+I,EAAAxe,KAAA+8J,EAAA9E,WAAAy7C,EAAA5rM,EAAArE,EAAAhN,KAAAomK,qBAIApnK,IAAAqS,EAAA4qM,MAEAl1K,EAAAx9B,KAAA+8J,EAAAhO,SAAA2kD,EAAA5rM,EAAA4qM,IAAA,GAAA,KACAl1K,EAAAx9B,KAAA+8J,EAAAhO,SAAA2kD,EAAA5rM,EAAA4qM,IAAA,GAAA,KACAl1K,EAAAx9B,KAAA+8J,EAAAhO,SAAA2kD,EAAA5rM,EAAA4qM,IAAA,GAAA,WAIAj9M,IAAAqS,EAAA6qM,WAEAxiM,EAAAnQ,KAAA+8J,EAAA9E,WAAAy7C,EAAA5rM,EAAA6qM,SAAAl8M,KAAAomK,eACA1sJ,EAAAnQ,KAAA+8J,EAAA9E,WAAAy7C,EAAA5rM,EAAA8qM,SAAAn8M,KAAAomK,eACA1sJ,EAAAnQ,KAAA+8J,EAAA9E,WAAAy7C,EAAA5rM,EAAA+qM,SAAAp8M,KAAAomK,gBAUA,IAAA71I,EAAA,IAAAi6F,EAAAn2E,eAEAtsB,EAAAzpB,OAAA,GAAAiyB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAArmB,EAAA,IACArO,EAAApb,OAAA,GAAAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAA10B,EAAA,IACAqtB,EAAAzoC,OAAA,GAAAiyB,EAAAukB,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAArH,EAAA,IAEAxW,EAAA8kB,wBAIA,IAAA3kB,EAAA,IAAA85F,EAAA7mD,gBAAAjwC,KAAA,OAEAqT,EAAAzoC,OAAA,EAEAoyB,EAAAyW,cAAA,EAIAzW,EAAAqW,MAAAK,OAAA,SAAAjoC,KAAAqL,UAMA,IAAAsyC,EAAA,IAAA0tE,EAAAzvB,OAAAxqE,EAAAG,GACAjyB,EAAAikB,EAAArkB,MAAA,IAAAmpG,UAAA5iD,KAAA,IAKA,OAHAnmD,GADAA,EAAA,WAAAmpC,KAAAnpC,IACA,GAAAJ,MAAA,IAAAmpG,UAAA5iD,KAAA,IACA9H,EAAAr+C,KAAAA,EAEAq+C,KAMA0tE,EAAA6wF,YAGAp9M,EAAA,wCACA,mBACA,SAAAusH,GAofA,OAtdAA,EAAA0yF,UAAA,SAAAzhG,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAm9M,wBAIA3yF,EAAA0yF,UAAAt9M,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA0yF,UAEAthG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,KAEAyO,EAAAC,IAIA+iG,uBAAA,SAAAp9L,GAEAhgB,KAAAm9M,oBAAAn9L,GAIAkR,MAAA,SAAAF,GAEA,SAAA+qL,EAAA/qL,GAEA,IACAqsL,EAAA,GACAC,EAAA,EACA5xI,EAHA,8BAGA9jC,KAAA5W,GAEA,OAAA06C,IAEA2xI,EAAA3xI,EAAA,GACA4xI,EAAA5xI,EAAA,GAAAptE,QAIA,IAOAi/M,EACAC,EAAAC,EARAx+F,GACAy+F,YACAluM,YACA8tM,aAAAA,GAGA5hJ,EAAA2hJ,EAAAh/M,MAAA,MAIA,SAAAs/M,EAAAC,EAAAT,GAEA,IAAA/8J,GAAAl3C,KAAA00M,EAAA,IAoBA,MAlBA,SAAAx9J,EAAAl3C,MAEAk3C,EAAA3hD,KAAAm/M,EAAA,GACAx9J,EAAAy9J,UAAAD,EAAA,GACAx9J,EAAA09J,SAAAF,EAAA,IAIAx9J,EAAA3hD,KAAAm/M,EAAA,GAIAx9J,EAAA3hD,QAAA0+M,IAEA/8J,EAAA3hD,KAAA0+M,EAAA/8J,EAAA3hD,OAIA2hD,EAIA,IAAA,IAAA5hD,EAAA,EAAAA,EAAAk9D,EAAAp9D,OAAAE,IAAA,CAEA,IAAAu7B,EAAA2hC,EAAAl9D,GAGA,GAAA,MAFAu7B,EAAAA,EAAAyhC,QAQA,OAJAiiJ,EAAA1jL,EAAA17B,MAAA,OACAm/M,EAAAC,EAAA3rG,QACA/3E,EAAA0jL,EAAA74J,KAAA,KAEA44J,GAEA,IAAA,SAEAv+F,EAAA5+F,OAAAo9L,EAAA,GACAx+F,EAAAh+F,QAAAw8L,EAAA,GAEA,MAEA,IAAA,UAEAx+F,EAAAy+F,SAAAn0M,KAAAwwB,GAEA,MAEA,IAAA,eAEA/6B,IAAAu+M,GAEAt+F,EAAAzvG,SAAAjG,KAAAg0M,IAIAA,MACA9+M,KAAAg/M,EAAA,GACAF,EAAA1hM,MAAAisB,SAAA21K,EAAA,IACAF,EAAA1tJ,cAEA,MAEA,IAAA,WAEA0tJ,EAAA1tJ,WAAAtmD,KAAAo0M,EAAAF,EAAAziK,EAAAmiK,sBAEA,MAGA,QAEA5uM,QAAA5B,IAAA,YAAA6wM,EAAAC,IAYA,YANAz+M,IAAAu+M,GAEAt+F,EAAAzvG,SAAAjG,KAAAg0M,GAIAt+F,EAIA,SAAA8+F,EAAA7yM,EAAAhC,GAEA,OAAAA,GAEA,IAAA,OAAA,IAAA,QAAA,IAAA,QAAA,IAAA,SAAA,IAAA,MAAA,IAAA,OACA,IAAA,OAAA,IAAA,QAAA,IAAA,QAAA,IAAA,SAAA,IAAA,QAAA,IAAA,SAEA,OAAA4+B,SAAA58B,GAEA,IAAA,QAAA,IAAA,SAAA,IAAA,UAAA,IAAA,UAEA,OAAAy8B,WAAAz8B,IAMA,SAAA8yM,EAAAnuJ,EAAA91B,GAMA,IAJA,IAAAjJ,EAAAiJ,EAAA17B,MAAA,OAEAyxB,KAEAtxB,EAAA,EAAAA,EAAAqxD,EAAAvxD,OAAAE,IAEA,GAAA,SAAAqxD,EAAArxD,GAAA0K,KAAA,CAKA,IAHA,IAAA+iF,KACA/gF,EAAA6yM,EAAAjtL,EAAAghF,QAAAjiD,EAAArxD,GAAAq/M,WAEAtrL,EAAA,EAAAA,EAAArnB,EAAAqnB,IAEA05D,EAAA1iF,KAAAw0M,EAAAjtL,EAAAghF,QAAAjiD,EAAArxD,GAAAs/M,WAIAhuL,EAAA+/B,EAAArxD,GAAAC,MAAAwtF,OAIAn8D,EAAA+/B,EAAArxD,GAAAC,MAAAs/M,EAAAjtL,EAAAghF,QAAAjiD,EAAArxD,GAAA0K,MAMA,OAAA4mB,EAIA,SAAAmuL,EAAAjtL,EAAAiuF,GAIA,IASAvzC,EATAvY,GACArc,WACArI,YACAC,WACAE,OACAuE,iBACAxE,WAMA6yI,EAAA,GACA,QAAA91G,EAFA,yBAEA9jC,KAAA5W,MAEAwwJ,EAAA91G,EAAA,IAQA,IAJA,IAAAhQ,EAAA8lH,EAAAnjL,MAAA,MACAk/M,EAAA,EACAW,EAAA,EAEA1/M,EAAA,EAAAA,EAAAk9D,EAAAp9D,OAAAE,IAAA,CAEA,IAAAu7B,EAAA2hC,EAAAl9D,GAEA,GAAA,MADAu7B,EAAAA,EAAAyhC,QACA,CAMA0iJ,GAAAj/F,EAAAzvG,SAAA+tM,GAAA1hM,QAEA0hM,IACAW,EAAA,GAIA,IAAApuL,EAAAkuL,EAAA/+F,EAAAzvG,SAAA+tM,GAAA1tJ,WAAA91B,GAEAokL,EAAAhrJ,EAAA8rD,EAAAzvG,SAAA+tM,GAAA9+M,KAAAqxB,GAEAouL,KAIA,OAAAE,EAAAjrJ,GAIA,SAAAirJ,EAAAjrJ,GAEA,IAAA5iC,EAAA,IAAAi6F,EAAAn2E,eAyCA,OArCA8e,EAAArc,QAAAx4C,OAAA,GAEAiyB,EAAAqkB,SAAAue,EAAArc,SAIAvmB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAA+kB,EAAA1kB,SAAA,IAIA0kB,EAAAzkB,QAAApwC,OAAA,GAEAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAA+kB,EAAAzkB,QAAA,IAIAykB,EAAAvkB,IAAAtwC,OAAA,GAEAiyB,EAAAukB,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAA+kB,EAAAvkB,IAAA,IAIAukB,EAAAxkB,OAAArwC,OAAA,GAEAiyB,EAAAukB,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAA+kB,EAAAxkB,OAAA,IAIAwkB,EAAAhgB,cAAA70C,OAAA,IAEAiyB,EAAAA,EAAA+mB,gBACAxC,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAA+kB,EAAAhgB,cAAA,IAIA5iB,EAAA8kB,wBAEA9kB,EAIA,SAAA4tL,EAAAhrJ,EAAAkrJ,EAAAvuL,GAEA,GAAA,WAAAuuL,EAEAlrJ,EAAA1kB,SAAAllC,KAAAumB,EAAApwB,EAAAowB,EAAApkB,EAAAokB,EAAA9iB,GAEA,OAAA8iB,GAAA,OAAAA,GAAA,OAAAA,GAEAqjC,EAAAzkB,QAAAnlC,KAAAumB,EAAA6nI,GAAA7nI,EAAA8nI,GAAA9nI,EAAA+nI,IAIA,MAAA/nI,GAAA,MAAAA,GAEAqjC,EAAAvkB,IAAArlC,KAAAumB,EAAAnhB,EAAAmhB,EAAAnkB,GAIA,QAAAmkB,GAAA,UAAAA,GAAA,SAAAA,GAEAqjC,EAAAxkB,OAAAplC,KAAAumB,EAAA6U,IAAA,IAAA7U,EAAA2Q,MAAA,IAAA3Q,EAAA8N,KAAA,UAIA,GAAA,SAAAygL,EAAA,CAEA,IAAAC,EAAAxuL,EAAAwuL,gBAAAxuL,EAAAyuL,aACAC,EAAA1uL,EAAA0uL,SAEA,IAAAF,EAAAhgN,QAEA60D,EAAArc,QAAAvtC,KAAA+0M,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAE,GAAA,IAAAA,EAAAlgN,SAEA60D,EAAAhgB,cAAA5pC,KAAAi1M,EAAA,GAAAA,EAAA,IACArrJ,EAAAhgB,cAAA5pC,KAAAi1M,EAAA,GAAAA,EAAA,IACArrJ,EAAAhgB,cAAA5pC,KAAAi1M,EAAA,GAAAA,EAAA,MAIA,IAAAF,EAAAhgN,SAEA60D,EAAArc,QAAAvtC,KAAA+0M,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAnrJ,EAAArc,QAAAvtC,KAAA+0M,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAQA,SAAAG,EAAAn4C,EAAA3vI,EAAAztB,EAAAw1M,GAEA,OAAAx1M,GAGA,IAAA,OAAA,IAAA,OAAA,OAAAo9J,EAAAq4C,QAAAhoL,GAAA,GACA,IAAA,QAAA,IAAA,QAAA,OAAA2vI,EAAAhO,SAAA3hI,GAAA,GACA,IAAA,QAAA,IAAA,QAAA,OAAA2vI,EAAAk4B,SAAA7nK,EAAA+nL,GAAA,GACA,IAAA,SAAA,IAAA,SAAA,OAAAp4C,EAAAM,UAAAjwI,EAAA+nL,GAAA,GACA,IAAA,QAAA,IAAA,MAAA,OAAAp4C,EAAA+3B,SAAA1nK,EAAA+nL,GAAA,GACA,IAAA,SAAA,IAAA,OAAA,OAAAp4C,EAAAQ,UAAAnwI,EAAA+nL,GAAA,GACA,IAAA,UAAA,IAAA,QAAA,OAAAp4C,EAAA9E,WAAA7qI,EAAA+nL,GAAA,GACA,IAAA,UAAA,IAAA,SAAA,OAAAp4C,EAAAG,WAAA9vI,EAAA+nL,GAAA,IAMA,SAAAE,EAAAt4C,EAAA3vI,EAAAk5B,EAAA6uJ,GAKA,IAHA,IACAhzI,EADA57C,KACA22J,EAAA,EAEAjoL,EAAA,EAAAA,EAAAqxD,EAAAvxD,OAAAE,IAEA,GAAA,SAAAqxD,EAAArxD,GAAA0K,KAAA,CAEA,IAAA+iF,KAGA/gF,GADAwgE,EAAA+yI,EAAAn4C,EAAA3vI,EAAA8vJ,EAAA52H,EAAArxD,GAAAq/M,UAAAa,IACA,GACAj4B,GAAA/6G,EAAA,GAEA,IAAA,IAAAn5C,EAAA,EAAAA,EAAArnB,EAAAqnB,IAEAm5C,EAAA+yI,EAAAn4C,EAAA3vI,EAAA8vJ,EAAA52H,EAAArxD,GAAAs/M,SAAAY,GACAzyH,EAAA1iF,KAAAmiE,EAAA,IACA+6G,GAAA/6G,EAAA,GAIA57C,EAAA+/B,EAAArxD,GAAAC,MAAAwtF,OAIAvgB,EAAA+yI,EAAAn4C,EAAA3vI,EAAA8vJ,EAAA52H,EAAArxD,GAAA0K,KAAAw1M,GACA5uL,EAAA+/B,EAAArxD,GAAAC,MAAAitE,EAAA,GACA+6G,GAAA/6G,EAAA,GAMA,OAAA57C,EAAA22J,GAuCA,IAAAl2J,EACAyqB,EAAAh7C,KAEA,GAAAgxB,aAAAw/E,YAAA,CAEA,IAAA7E,EAAA6e,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,IACAiuF,EAAA88F,EAAApwG,GAEAp7E,EAAA,UAAA0uF,EAAA5+F,OAAA49L,EAAAtyG,EAAAsT,GA3CA,SAAAjuF,EAAAiuF,GAeA,IAbA,IAWAvzC,EAXAvY,GACArc,WACArI,YACAC,WACAE,OACAuE,iBACAxE,WAGA+vK,EAAA,yBAAAz/F,EAAA5+F,OACAmhK,EAAA,IAAA9wE,SAAA1/E,EAAAiuF,EAAAq+F,cACAuB,EAAA,EAEAtB,EAAA,EAAAA,EAAAt+F,EAAAzvG,SAAAlR,OAAAi/M,IAEA,IAAA,IAAAW,EAAA,EAAAA,EAAAj/F,EAAAzvG,SAAA+tM,GAAA1hM,MAAAqiM,IAAA,CAEAxyI,EAAAkzI,EAAAp9B,EAAAq9B,EAAA5/F,EAAAzvG,SAAA+tM,GAAA1tJ,WAAA6uJ,GACAG,GAAAnzI,EAAA,GACA,IAAA57C,EAAA47C,EAAA,GAEAyyI,EAAAhrJ,EAAA8rD,EAAAzvG,SAAA+tM,GAAA9+M,KAAAqxB,GAMA,OAAAsuL,EAAAjrJ,GAcA2rJ,CAAA9tL,EAAAiuF,QAIA1uF,EAAA0tL,EAAAjtL,EAAA+qL,EAAA/qL,IAIA,OAAAT,KAMAi6F,EAAA0yF,YAGAj/M,EAAA,yCACA,mBACA,SAAAusH,GAkSA,OA5RAA,EAAAu0F,WAAA,WAEA,IAAAC,EAAA,KAMA,SAAAC,IAEA,GAAA,OAAAD,EAAA,CAEA,IAAA7rJ,EAAA,IAAAq9C,YAAA,GACA0uG,EAAA,IAAAzxK,WAAA0lB,GACAgsJ,EAAA,IAAApxK,YAAAolB,GAEA+rJ,EAAA,GAAA,IACAA,EAAA,GAAA,IACAF,EAAA,QAAAG,EAAA,GAIA,OAAAH,EAKA,IAAAI,GACA,KACA/wK,aACA,KACAd,UACAM,WACA,KACAI,WACAR,WACAM,YACA,KACAI,aAIAkxK,GACAtxK,YAAA,YACAI,YAAA,YACAN,WAAA,WACAI,WAAA,WACAI,aAAA,aACAE,aAAA,cAIA,SAAA+wK,EAAAC,EAAAC,EAAAz3L,EAAAzpB,EAAAmhN,GAEA,IACA/zI,EADAjY,EAAA+rJ,EAAA9rJ,kBAGA,GAAA+rJ,IAAAR,KAAA,IAAAxrJ,EAEAiY,EAAA,IAAA8zI,EAAAD,EAAAx3L,EAAAzpB,OAEA,CAEA,IAAAohN,EAAA,IAAAhvG,SAAA6uG,EAAAx3L,EAAAzpB,EAAAm1D,GACAksJ,EAAAN,EAAAG,EAAA/gN,MACA2nK,GAAAq5C,EACAjhN,EAAA,EAIA,IAFAktE,EAAA,IAAA8zI,EAAAlhN,GAEAE,EAAAF,EAAAE,IAEAktE,EAAAltE,GAAAkhN,EAAAC,GAAAnhN,EAAAi1D,EAAA2yG,GAMA,OAAA16F,EA6IA,SAAAqzI,EAAAtjG,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GA2DA,OAvDAsjG,EAAAn/M,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAA4wM,EAEAnjG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eAEA/8F,EAAAA,EAAAs5C,QAAA,MAAAijJ,IAAA,KAAA,MAEA9jG,EAAAS,KAAAl5F,EAAA,SAAAk9L,GAEAzlG,EAAAn/D,EAAA9pB,MAAA0uL,KAEAxlG,EAAAC,IAIAnpF,MAAA,SAAA0uL,GAEA,IAGApuM,EACAhT,EAJAwyB,EAtKA,SAAAmiC,GAEA,IAAArpD,EAAA,IAAA2jC,WAAA0lB,GACAlyC,EAAAnX,EAAA,GACAwjK,EAAAxjK,EAAA,GACA+1M,KAAAvyC,GAAA,EAAA,GACAwyC,EAAAxyC,GAAA,EAAA,EACAyyC,EAAA,IAAAzyC,GAAA,EAAA,GACA0yC,EAAA,GAAA1yC,EACA2yC,EAAA,EACAC,EAAA,EAEAH,GAEAE,GAAAn2M,EAAA,IAAA,KAAAA,EAAA,IAAA,GAAAA,EAAA,GACAo2M,GAAAp2M,EAAA,IAAA,KAAAA,EAAA,IAAA,GAAAA,EAAA,KAIAm2M,EAAAn2M,EAAA,IAAAA,EAAA,IAAA,IAAAA,EAAA,IAAA,IACAo2M,EAAAp2M,EAAA,IAAAA,EAAA,IAAA,IAAAA,EAAA,IAAA,KAMA,GAAA,IAAAmX,EAEA,MAAA,IAAAjT,MAAA,2CAEA,GAAA,IAAAiT,EAEA,MAAA,IAAAjT,MAAA,6CAAAiT,GAIA,IAAA4+L,EAAA,CAEA,GAAA,IAAAC,EAEA,MAAA,IAAA9xM,MAAA,0EAEA,GAAA,IAAAkyM,EAEA,MAAA,IAAAlyM,MAAA,+EAQA,IAGAk0K,EACAt2D,EACAu2D,EACAg+B,EAEAC,EACAtvL,EACAgmB,EACAt4C,EAXA+lK,EAAA,EAEAjwH,KAWA,IAAA91C,EAAA,EAAAA,EAAAwhN,EAAAxhN,IAAA,CAIA,IAFA0jL,EAAA,GAEA3d,EAAAz6J,EAAAxL,SAEAstH,EAAA9hH,EAAAy6J,GACAA,IAEA,IAAA34C,IAMAs2D,GAAApoI,OAAAkvE,aAAA4C,GAMA0hD,EAAAxjK,EAAAy6J,GAEA4d,EAAA7U,GAAA,EAAA,EACA6yC,EAAA,GAAA7yC,GAAA,EAAA,GAEA8yC,EAAAhB,EADA,GAAA9xC,GAGA/I,IAGAA,EAAA,EAAAplK,KAAAuN,KAAA63J,EAAA,GAEAzzI,EAAAwuL,EAAAnsJ,EAAAitJ,EAAA77C,EAAA47C,EAAAF,EAAAF,GAEAx7C,GAAA67C,EAAA1sJ,kBAAAysJ,EAAAF,EAEA3rK,EAAA4tI,IACAh5K,KAAAi5K,EACAg+B,YAAAA,EACArvL,OAAAA,GAKAyzI,EAAA,EAAAplK,KAAAuN,KAAA63J,EAAA,GAEAztH,EAAA,KAEA+oK,IAEA/oK,EAAAwoK,EACAnsJ,EACA,IAAA2sJ,EAAA3xK,YAAAJ,YACAw2H,EACA27C,EACAH,IAKA,OACA9+L,QAAAA,EACAqzB,WAAAA,EACAwC,QAAAA,GAqCAupK,CAAAT,GACAtS,EAAAztM,OAAA+3C,KAAA5mB,EAAAsjB,YACAuqD,EAAA,IAAA2rB,EAAAn2E,eAIA,IAAA71C,EAAA,EAAAA,EAAA8uM,EAAAhvM,OAAAE,IAEAgT,EAAAwf,EAAAsjB,WAAAg5J,EAAA9uM,IACAqgG,EAAA/pD,aAAAw4J,EAAA9uM,GAAA,IAAAgsH,EAAAv9E,gBAAAz7B,EAAAsf,OAAAtf,EAAA2uM,YAAA3uM,EAAA27B,aAUA,OANA,OAAAnc,EAAA8lB,SAEA+nD,EAAAjqD,SAAA,IAAA41E,EAAAv9E,gBAAAjc,EAAA8lB,QAAA,IAIA+nD,KAMAkgH,EAAAE,oBAAA,WAEA,OAAAA,KAIAF,EAxRA,GA4RAv0F,EAAAu0F,aAGA9gN,EAAA,wCACA,mBACA,SAAAusH,GAqYA,OA1UAA,EAAA81F,UAAA,SAAA7kG,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAA81F,UAAA1gN,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA81F,UAEA1kG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEA,IAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,IAEA,MAAA40G,GAEAlmG,GAEAA,EAAAkmG,KAMAnmG,EAAAC,IAIAnpF,MAAA,SAAAF,GA0CA,SAAAwvL,EAAAC,EAAAl/C,EAAAlwJ,GAIA,IAAA,IAAA7S,EAAA,EAAA+0B,EAAAktL,EAAAniN,OAAAE,EAAA+0B,EAAA/0B,IAEA,GAAAiiN,EAAAjiN,KAAA+iK,EAAAjJ,SAAAjnJ,EAAA7S,GAAA,GAAA,OAAA,EAIA,OAAA,EAyOA,IAAAkiN,EAvBA,SAAAvtJ,GAEA,GAAA,iBAAAA,EAAA,CAGA,IADA,IAAAwtJ,EAAA,IAAAlzK,WAAA0lB,EAAA70D,QACAE,EAAA,EAAAA,EAAA20D,EAAA70D,OAAAE,IAEAmiN,EAAAniN,GAAA,IAAA20D,EAAAurD,WAAAlgH,GAIA,OAAAmiN,EAAAxtJ,QAAAwtJ,EAIA,OAAAxtJ,EAQAytJ,CAAA5vL,GAEA,OA7RA,SAAAA,GAEA,IAAA6vL,EAAAt/C,EAMA,GALAA,EAAA,IAAA7wD,SAAA1/E,GACA,GACA6vL,EAAAt/C,EAAAuF,UAAA,IAAA,GACA,GAFA,GAEA+5C,IAEAt/C,EAAAse,WAEA,OAAA,EAgBA,IAFA,IAAA9xD,GAAA,IAAA,IAAA,IAAA,IAAA,KAEA+8C,EAAA,EAAAA,EAAA,EAAAA,IAIA,GAAA01C,EAAAzyF,EAAAwzC,EAAAuJ,GAAA,OAAA,EAMA,OAAA,EAyPAg2C,CAAAJ,GAvOA,SAAA1vL,GAWA,IATA,IAGAxb,EAAA8H,EAAAzO,EAAA8/B,EACAoyK,EAAAC,EAAAC,EAAAlwM,EAJAwwJ,EAAA,IAAA7wD,SAAA1/E,GACA+hB,EAAAwuH,EAAAuF,UAAA,IAAA,GAEAh4E,GAAA,EAMAvuF,EAAA,EAAAA,EAAA,GAAAA,IAEA,YAAAghK,EAAAuF,UAAAvmK,GAAA,IACA,IAAAghK,EAAAjJ,SAAA/3J,EAAA,IACA,IAAAghK,EAAAjJ,SAAA/3J,EAAA,KAEAuuF,GAAA,EACAngD,EAAA,IAAAN,aAAA,EAAA0E,EAAA,GAEAguK,EAAAx/C,EAAAjJ,SAAA/3J,EAAA,GAAA,IACAygN,EAAAz/C,EAAAjJ,SAAA/3J,EAAA,GAAA,IACA0gN,EAAA1/C,EAAAjJ,SAAA/3J,EAAA,GAAA,IACAwQ,EAAAwwJ,EAAAjJ,SAAA/3J,EAAA,GAAA,KAcA,IARA,IAGAgwB,EAAA,IAAAi6F,EAAAn2E,eAEA5F,EAAA,IAAAJ,aAAA,EAAA0E,EAAA,GACArE,EAAA,IAAAL,aAAA,EAAA0E,EAAA,GAEAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA,CAEA,IAAA/Y,EAVA,GACA,GASA+Y,EACAkuK,EAAA3/C,EAAAC,WAAAvnI,GAAA,GACAknL,EAAA5/C,EAAAC,WAAAvnI,EAAA,GAAA,GACAmnL,EAAA7/C,EAAAC,WAAAvnI,EAAA,GAAA,GAEA,GAAA60D,EAAA,CAEA,IAAAuyH,EAAA9/C,EAAAqF,UAAA3sI,EAAA,IAAA,GAEA,IAAA,MAAAonL,IAIA7rM,GAAA,GAAA6rM,GAAA,GACA/jM,GAAA+jM,GAAA,EAAA,IAAA,GACAxyM,GAAAwyM,GAAA,GAAA,IAAA,KAIA7rM,EAAAurM,EACAzjM,EAAA0jM,EACAnyM,EAAAoyM,GAMA,IAAA,IAAAziN,EAAA,EAAAA,GAAA,EAAAA,IAAA,CAEA,IAAA8iN,EAAArnL,EAAA,GAAAz7B,EACA+iN,EAAA,EAAAvuK,EAAA,EAAA,GAAAx0C,EAAA,GAEAiwC,EAAA8yK,GAAAhgD,EAAAC,WAAA8/C,GAAA,GACA7yK,EAAA8yK,EAAA,GAAAhgD,EAAAC,WAAA8/C,EAAA,GAAA,GACA7yK,EAAA8yK,EAAA,GAAAhgD,EAAAC,WAAA8/C,EAAA,GAAA,GAEA5yK,EAAA6yK,GAAAL,EACAxyK,EAAA6yK,EAAA,GAAAJ,EACAzyK,EAAA6yK,EAAA,GAAAH,EAEAtyH,IAEAngD,EAAA4yK,GAAA/rM,EACAm5B,EAAA4yK,EAAA,GAAAjkM,EACAqxB,EAAA4yK,EAAA,GAAA1yM,IAQA0hB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAAwB,EAAA,IACAle,EAAAukB,aAAA,SAAA,IAAA01E,EAAAv9E,gBAAAyB,EAAA,IAEAogD,IAEAv+D,EAAAukB,aAAA,QAAA,IAAA01E,EAAAv9E,gBAAA0B,EAAA,IACApe,EAAAu+D,WAAA,EACAv+D,EAAAxf,MAAAA,GAIA,OAAAwf,EAiIAuuL,CAAA4B,GA7HA,SAAA1vL,GAEA,IAcA06C,EAdAn7C,EAAA,IAAAi6F,EAAAn2E,eACAmtK,EAAA,2BACAC,EAAA,2BACAC,EAAA,EAEAC,EAAA,iDAAAlhN,OACAmhN,EAAA,IAAAvnF,OAAA,SAAAsnF,EAAAA,EAAAA,EAAA,KACAE,EAAA,IAAAxnF,OAAA,SAAAsnF,EAAAA,EAAAA,EAAA,KAEAlzK,KACAC,KAEAh1B,EAAA,IAAA8wG,EAAApzG,QAIA8oC,EAAA,EACA4hK,EAAA,EACAC,EAAA,EAEA,KAAA,QAAAr2I,EAAA81I,EAAA55K,KAAA5W,KAAA,CAEA8wL,EAAAC,EAIA,IAFA,IAAAh0F,EAAAriD,EAAA,GAEA,QAAAA,EAAA+1I,EAAA75K,KAAAmmF,KAAA,CAOA,IALA,IAAAi0F,EAAA,EACAC,EAAA,EAEAt2G,EAAAjgC,EAAA,GAEA,QAAAA,EAAAm2I,EAAAj6K,KAAA+jE,KAEAjyF,EAAAha,EAAAioC,WAAA+jC,EAAA,IACAhyD,EAAAhO,EAAAi8B,WAAA+jC,EAAA,IACAhyD,EAAA1M,EAAA26B,WAAA+jC,EAAA,IACAu2I,IAIA,KAAA,QAAAv2I,EAAAk2I,EAAAh6K,KAAA+jE,KAEAl9D,EAAAllC,KAAAo+B,WAAA+jC,EAAA,IAAA/jC,WAAA+jC,EAAA,IAAA/jC,WAAA+jC,EAAA,KACAh9B,EAAAnlC,KAAAmQ,EAAAha,EAAAga,EAAAhO,EAAAgO,EAAA1M,GACAg1M,IACAD,IAMA,IAAAE,GAEA1zM,QAAAmJ,MAAA,yEAAAgqM,GAMA,IAAAM,GAEAzzM,QAAAmJ,MAAA,2EAAAgqM,GAIAA,IAIA,IAAAznL,EAAA6nL,EACAjmM,EAAAkmM,EAAAD,EAEAvxL,EAAAykB,SAAA/a,EAAApe,EAAAqkC,GACAA,IAOA,OAHA3vB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAK,EAAA,IACAle,EAAAukB,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAAM,EAAA,IAEAne,EAyCA0tL,CArCA,SAAA9qJ,GAEA,GAAA,iBAAAA,EAEA,OAAAq3D,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAA0lB,IAIA,OAAAA,EA6BA+uJ,CAAAlxL,OAMAw5F,EAAA81F,YAGAriN,EAAA,wCACA,mBACA,SAAAusH,GA2yCA,IAEA23F,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAguBA,OAthEA34F,EAAA44F,UAAA,SAAA3nG,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAGAz7G,KAAAqjN,WAAA,GAGArjN,KAAAsjN,YAAA,MAIA94F,EAAA44F,UAAAxjN,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAA44F,UAEAxnG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,KAEAyO,EAAAC,IAIAnpF,MAAA,SAAAy6E,GAEA,IAAA3wD,EAAAh7C,KAmhBA,SAAAujN,EAAAplN,EAAAqlN,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3pL,EAAAI,GAEAqpL,EAAAA,EAAAvkN,KAAAiL,GAAA,IAGAo5M,EAAArkN,KAAAkR,IAAAmzM,GACAC,EAAAtkN,KAAAkR,IAAAozM,GAGA,IAAAI,GAAA5pL,EAAAv6B,EAAA26B,EAAA36B,GAAA,EACAokN,GAAA7pL,EAAAvuB,EAAA2uB,EAAA3uB,GAAA,EACAq4M,EAAA5kN,KAAA2S,IAAA4xM,GAAAG,EAAA1kN,KAAA4S,IAAA2xM,GAAAI,EACAE,GAAA7kN,KAAA4S,IAAA2xM,GAAAG,EAAA1kN,KAAA2S,IAAA4xM,GAAAI,EAGAG,EAAAT,EAAAA,EACAU,EAAAT,EAAAA,EACAU,EAAAJ,EAAAA,EACAK,EAAAJ,EAAAA,EAGAK,EAAAF,EAAAF,EAAAG,EAAAF,EAEA,GAAAG,EAAA,EAAA,CAGA,IAAA11M,EAAAxP,KAAAgR,KAAAk0M,GAGAJ,GAFAT,GAAA70M,GAEA60M,EACAU,GAFAT,GAAA90M,GAEA80M,EAIA,IAAAa,EAAAL,EAAAG,EAAAF,EAAAC,EACAI,GAAAN,EAAAC,EAAAI,GAAAA,EACA5uM,EAAAvW,KAAAgR,KAAAhR,KAAA6L,IAAA,EAAAu5M,IACAZ,IAAAC,IAAAluM,GAAAA,GACA,IAAA8uM,EAAA9uM,EAAA8tM,EAAAQ,EAAAP,EACAgB,GAAA/uM,EAAA+tM,EAAAM,EAAAP,EAGA7kM,EAAAxf,KAAA2S,IAAA4xM,GAAAc,EAAArlN,KAAA4S,IAAA2xM,GAAAe,GAAAxqL,EAAAv6B,EAAA26B,EAAA36B,GAAA,EACAkf,EAAAzf,KAAA4S,IAAA2xM,GAAAc,EAAArlN,KAAA2S,IAAA4xM,GAAAe,GAAAxqL,EAAAvuB,EAAA2uB,EAAA3uB,GAAA,EAGAkO,EAAA8qM,EAAA,EAAA,GAAAX,EAAAS,GAAAhB,GAAAQ,EAAAS,GAAAhB,GACAzpL,EAAA0qL,GAAAX,EAAAS,GAAAhB,GAAAQ,EAAAS,GAAAhB,IAAAM,EAAAS,GAAAhB,IAAAQ,EAAAS,GAAAhB,IAAA,EAAAtkN,KAAAiL,IAEAjM,EAAAstH,YAAAnE,WAAA3oG,EAAAC,EAAA4kM,EAAAC,EAAA7pM,EAAAA,EAAAogB,EAAA,IAAA4pL,EAAAF,GAIA,SAAAgB,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAA90M,EAAA20M,EAAAE,EAAAD,EAAAE,EACAzxM,EAAAlU,KAAAgR,KAAAw0M,EAAAA,EAAAC,EAAAA,GAAAzlN,KAAAgR,KAAA00M,EAAAA,EAAAC,EAAAA,GACAC,EAAA5lN,KAAAwW,KAAAxW,KAAA6L,KAAA,EAAA7L,KAAA4L,IAAA,EAAAiF,EAAAqD,KAEA,OADAsxM,EAAAG,EAAAF,EAAAC,EAAA,IAAAE,GAAAA,GACAA,EAoKA,SAAAC,EAAAzpF,EAAA/zF,GAIA,SAAAy9K,EAAAC,EAAAC,EAAAC,QAEApmN,IAAAomN,IAAAA,EAAA,SAAA/2M,GAEA,OAAAA,IAIAktH,EAAA0gD,aAAAipC,KAAA19K,EAAA29K,GAAAC,EAAA7pF,EAAA1mF,aAAAqwK,KACA3pF,EAAA/zF,OAAA,KAAA+zF,EAAA/zF,MAAA09K,KAAA19K,EAAA29K,GAAAC,EAAA7pF,EAAA/zF,MAAA09K,KAIA,SAAAp6M,EAAAuD,GAEA,OAAAlP,KAAA6L,IAAA,EAAA7L,KAAA4L,IAAA,EAAAs6M,EAAAh3M,KAIA,SAAAi3M,EAAAj3M,GAEA,OAAAlP,KAAA6L,IAAA,EAAAq6M,EAAAh3M,IAaA,OApCAm5B,EAAA3nC,OAAAM,UAAAqnC,GA2BAy9K,EAAA,OAAA,QACAA,EAAA,eAAA,cAAAn6M,GACAm6M,EAAA,SAAA,UACAA,EAAA,iBAAA,gBAAAn6M,GACAm6M,EAAA,eAAA,cAAAK,GACAL,EAAA,kBAAA,kBACAA,EAAA,iBAAA,iBACAA,EAAA,oBAAA,mBAAAK,GAEA99K,EAMA,SAAA+9K,EAAA32M,EAAAC,GAEA,OAAAD,GAAAC,EAAAD,GAIA,SAAA4gK,EAAA9nI,GAIA,IAFA,IAAA59B,EAAA49B,EAAArpC,MAAA,uBAEAG,EAAA,EAAAA,EAAAsL,EAAAxL,OAAAE,IAAA,CAEA,IAAAgnN,EAAA17M,EAAAtL,GAKA,GAAAgnN,EAAAl8M,QAAA,OAAAk8M,EAAAr8F,YAAA,KAIA,IAFA,IAAA9qH,EAAAmnN,EAAAnnN,MAAA,KAEAsQ,EAAA,EAAAA,EAAAtQ,EAAAC,OAAAqQ,IAEA7E,EAAAH,OAAAnL,EAAAmQ,EAAA,EAAA,EAAA,KAAAtQ,EAAAsQ,IAMA7E,EAAAtL,GAAA6mN,EAAAG,GAIA,OAAA17M,EAOA,IAAAivD,GAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAGA0sJ,GAEAC,IACAA,GAAA,EACAC,GAAA,GACAC,GAAA,EAAA,KACAj+G,GAAA,GAAA,KACAk+G,GAAA,EAAA,KACAphH,IAAA,GAEAkhH,IACAD,GAAA,GACAC,GAAA,EACAC,GAAA,EAAA,KACAj+G,GAAA,GAAA,KACAk+G,GAAA,EAAA,KACAphH,IAAA,GAEAmhH,IACAF,GAAA,KACAC,GAAA,KACAC,GAAA,EACAj+G,GAAA,GACAk+G,GAAA,EACAphH,IAAA,GAEAkD,IACA+9G,GAAA,KAAA,GACAC,GAAA,KAAA,GACAC,GAAA,EAAA,GACAj+G,GAAA,EACAk+G,GAAA,EAAA,GACAphH,IAAA,GAEAohH,IACAH,GAAA,KAAA,EACAC,GAAA,KAAA,EACAC,GAAA,EAAA,EACAj+G,GAAA,GACAk+G,GAAA,EACAphH,IAAA,GAEAA,IACAA,GAAA,IAKA,SAAA4gH,EAAA39K,GAEA,IAAAo+K,EAAA,KAEA,GAAA,iBAAAp+K,GAAAA,aAAAoS,OAEA,IAAA,IAAAt7C,EAAA,EAAA0M,EAAA6tD,EAAAz6D,OAAAE,EAAA0M,EAAA1M,IAAA,CAEA,IAAAs9B,EAAAi9B,EAAAv6D,GAEA,GAAAkpC,EAAAq+K,SAAAjqL,GAAA,CAEAgqL,EAAAhqL,EACA4L,EAAAA,EAAAgoF,UAAA,EAAAhoF,EAAAppC,OAAAw9B,EAAAx9B,QACA,OAQA,IAAAugB,OAAA7f,EAsBA,MApBA,OAAA8mN,GAAA,OAAA9qK,EAAAsoK,YAIAzkM,EAAA4mM,EAAA,GAAAzqK,EAAAsoK,aAAAtoK,EAAAqoK,YAIAxkM,EAAA4mM,EAAAK,GAAA9qK,EAAAsoK,cAEA,IAIAzkM,EAAA4mM,EAAAK,GAAA,GAAA9qK,EAAAqoK,YAMAxkM,EAAA8oB,WAAAD,GAMA,SAAAs+K,EAAAzqF,GAEA,IAAAA,EAAA0gD,aAAA,aAEA,OAAA,KAIA,IAAAl9F,EAeA,SAAAw8C,GAMA,IAJA,IAAAx8C,EAAA,IAAAyrC,EAAA1vG,QACAmrM,EAAAC,EACAC,EAAA5qF,EAAA1mF,aAAA,aAAAx2C,MAAA,KAEA+nN,EAAAD,EAAA7nN,OAAA,EAAA8nN,GAAA,EAAAA,IAAA,CAEA,IAAAC,EAAAF,EAAAC,GAAA5qJ,OAEA,GAAA,KAAA6qJ,EAAA,CAEA,IAAAC,EAAAD,EAAA/8M,QAAA,KACAi9M,EAAAF,EAAA/nN,OAEA,GAAAgoN,EAAA,GAAAA,EAAAC,EAAA,CAEA,IAAAC,EAAAH,EAAAjmG,OAAA,EAAAkmG,GAEAx8M,EAAA0lK,EAAA62C,EAAAjmG,OAAAkmG,EAAA,EAAAC,EAAAD,EAAA,IAIA,OAFAL,EAAAxqM,WAEA+qM,GAEA,IAAA,YAEA,GAAA18M,EAAAxL,QAAA,EAAA,CAEA,IAAAkgB,EAAA1U,EAAA,GACA2U,EAAAD,EAEA1U,EAAAxL,QAAA,IAEAmgB,EAAA3U,EAAA,IAIAm8M,EAAAlnM,UAAAP,EAAAC,GAIA,MAEA,IAAA,SAEA,GAAA3U,EAAAxL,QAAA,EAAA,CAEA,IAAAiS,EAAA,EACAoO,EAAA,EACAC,EAAA,EAGArO,GAAAzG,EAAA,GAAA3K,KAAAiL,GAAA,IAEAN,EAAAxL,QAAA,IAGAqgB,EAAA7U,EAAA,GACA8U,EAAA9U,EAAA,IAKA28M,EAAAhrM,WAAAsD,WAAAJ,GAAAC,GACA8nM,EAAAjrM,WAAAqD,OAAAvO,GACAo2M,EAAA5qM,iBAAA2qM,EAAAD,GACAA,EAAAhrM,WAAAsD,UAAAJ,EAAAC,GACAqnM,EAAAlqM,iBAAA0qM,EAAAE,GAIA,MAEA,IAAA,QAEA,GAAA78M,EAAAxL,QAAA,EAAA,CAEA,IAAA2mB,EAAAnb,EAAA,GACAob,EAAAD,EAEAnb,EAAAxL,QAAA,IAEA4mB,EAAApb,EAAA,IAIAm8M,EAAApnM,MAAAoG,EAAAC,GAIA,MAEA,IAAA,QAEA,IAAApb,EAAAxL,QAEA2nN,EAAAz4M,IACA,EAAArO,KAAAymC,IAAA97B,EAAA,GAAA3K,KAAAiL,GAAA,KAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAKA,MAEA,IAAA,QAEA,IAAAN,EAAAxL,QAEA2nN,EAAAz4M,IACA,EAAA,EAAA,EACArO,KAAAymC,IAAA97B,EAAA,GAAA3K,KAAAiL,GAAA,KAAA,EAAA,EACA,EAAA,EAAA,GAKA,MAEA,IAAA,SAEA,IAAAN,EAAAxL,QAEA2nN,EAAAz4M,IACA1D,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA,EAAA,EAAA,IAWAi1E,EAAA7oE,YAAA+vM,IAIA,OAAAlnI,EA9JA6nI,CAAArrF,GAWA,OATAsrF,EAAAvoN,OAAA,GAEAygF,EAAA7oE,YAAA2wM,EAAAA,EAAAvoN,OAAA,IAIA2nN,EAAA73M,KAAA2wE,GACA8nI,EAAAt9M,KAAAw1E,GAEAA,EA8NA,SAAA+nI,EAAA37M,GAEA,IAAAuJ,EAAAvJ,EAAAqE,SACA,OAAArQ,KAAAgR,KAAAuE,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA,SAAAqyM,EAAA57M,GAEA,IAAAuJ,EAAAvJ,EAAAqE,SACA,OAAArQ,KAAAgR,KAAAuE,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAMA,IAAAw6G,KAEA23F,KAEAX,EAAA,IAAA17F,EAAA1vG,QACA2rM,EAAA,IAAAj8F,EAAA1vG,QACA4rM,EAAA,IAAAl8F,EAAA1vG,QACA6rM,EAAA,IAAAn8F,EAAA1vG,QACAksM,EAAA,IAAAx8F,EAAA19G,QACAm6M,EAAA,IAAAz8F,EAAApzG,QAEA6uM,EAAA,IAAAz7F,EAAA1vG,QAEAw0J,GAAA,IAAAzwD,WAAAC,gBAAAnT,EAAA,kBAvrCA,SAAAmuE,EAAAv+C,EAAA/zF,GAEA,GAAA,IAAA+zF,EAAAy0C,SAAA,OAEA,IAAAjxF,EAAAinI,EAAAzqF,GAEA,IAAAp9H,EAAA,KAEA,OAAAo9H,EAAAE,UAEA,IAAA,MACA,MAEA,IAAA,IACAj0F,EAAAw9K,EAAAzpF,EAAA/zF,GACA,MAEA,IAAA,OACAA,EAAAw9K,EAAAzpF,EAAA/zF,GACA+zF,EAAA0gD,aAAA,OAAA99K,EAgFA,SAAAo9H,GAiBA,IAfA,IAAAp9H,EAAA,IAAAqsH,EAAAe,UAEAr3F,EAAA,IAAAs2F,EAAA19G,QACAo6M,EAAA,IAAA18F,EAAA19G,QAEA06G,EAAA,IAAAgD,EAAA19G,QACAq6M,GAAA,EACAC,GAAA,EAMAx9D,EAJAruB,EAAA1mF,aAAA,KAIA30C,MAAA,wBAEA1B,EAAA,EAAAwL,EAAA4/I,EAAAtrJ,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAqrJ,EAAAD,EAAAprJ,GAEA0K,EAAA2gJ,EAAA9hH,OAAA,GACA/W,EAAA64H,EAAAzpC,OAAA,GAAA5kD,OASA,QAPA,IAAA2rJ,IAEAC,GAAA,EACAD,GAAA,GAIAj+M,GAEA,IAAA,IAEA,IADA,IAAAm+M,EAAA73C,EAAAx+I,GACAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EAEA,IAAA6mB,EAEAp0B,EAAAsoH,OAAAvyF,EAAAx0B,EAAAw0B,EAAAxoB,GAIAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAIA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,IAEA2B,EAAAx0B,EAAA2nN,EAAA90L,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAEA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,IAEA2B,EAAAxoB,EAAA27M,EAAA90L,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAEA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAEA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEAp0B,EAAA2oH,cACAugG,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAA2nN,EAAA90L,EAAA,GACA20L,EAAAx7M,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEAp0B,EAAA2oH,cACAy+F,EAAArxL,EAAAx0B,EAAAwnN,EAAAxnN,GACA6lN,EAAArxL,EAAAxoB,EAAAw7M,EAAAx7M,GACA27M,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAA2nN,EAAA90L,EAAA,GACA20L,EAAAx7M,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEAp0B,EAAAwoH,iBACA0gG,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAA2nN,EAAA90L,EAAA,GACA20L,EAAAx7M,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAAA,CAEA,IAAAixL,EAAA+B,EAAArxL,EAAAx0B,EAAAwnN,EAAAxnN,GACA+jN,EAAA8B,EAAArxL,EAAAxoB,EAAAw7M,EAAAx7M,GACAvN,EAAAwoH,iBACA68F,EACAC,EACA4D,EAAA90L,EAAA,GACA80L,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAA8jN,EACA0D,EAAAx7M,EAAA+3M,EACAvvL,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAAA,CAEA,IAAA0H,EAAA/F,EAAAhmB,QACAgmB,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACA63M,EACAplN,EAAAkpN,EAAA90L,GAAA80L,EAAA90L,EAAA,GAAA80L,EAAA90L,EAAA,GAAA80L,EAAA90L,EAAA,GAAA80L,EAAA90L,EAAA,GAAA0H,EAAA/F,GAGA,IAAA3B,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEA2B,EAAAx0B,GAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,GAAA27M,EAAA90L,EAAA,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EAEA,IAAA6mB,EAEAp0B,EAAAsoH,OAAAvyF,EAAAx0B,EAAAw0B,EAAAxoB,GAIAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAIA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,IAEA2B,EAAAx0B,GAAA2nN,EAAA90L,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAEA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,IAEA2B,EAAAxoB,GAAA27M,EAAA90L,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAEA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEA2B,EAAAx0B,GAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,GAAA27M,EAAA90L,EAAA,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACAvN,EAAAuoH,OAAAxyF,EAAAx0B,EAAAw0B,EAAAxoB,GAEA,IAAA6mB,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEAp0B,EAAA2oH,cACA5yF,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAAw0B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA20L,EAAAx7M,EAAAwoB,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,GAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,GAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEAp0B,EAAA2oH,cACAy+F,EAAArxL,EAAAx0B,EAAAwnN,EAAAxnN,GACA6lN,EAAArxL,EAAAxoB,EAAAw7M,EAAAx7M,GACAwoB,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAAw0B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA20L,EAAAx7M,EAAAwoB,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,GAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,GAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAEAp0B,EAAAwoH,iBACAzyF,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAAw0B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA20L,EAAAx7M,EAAAwoB,EAAAxoB,EAAA27M,EAAA90L,EAAA,GACA2B,EAAAx0B,GAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,GAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAAA,CAEA,IAAAixL,EAAA+B,EAAArxL,EAAAx0B,EAAAwnN,EAAAxnN,GACA+jN,EAAA8B,EAAArxL,EAAAxoB,EAAAw7M,EAAAx7M,GACAvN,EAAAwoH,iBACA68F,EACAC,EACAvvL,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAA27M,EAAA90L,EAAA,IAEA20L,EAAAxnN,EAAA8jN,EACA0D,EAAAx7M,EAAA+3M,EACAvvL,EAAAx0B,EAAAw0B,EAAAx0B,EAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,EAAAwoB,EAAAxoB,EAAA27M,EAAA90L,EAAA,GAEA,IAAAA,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IAGA,IAFA,IAAAmzL,EAAA73C,EAAAx+I,GAEAuB,EAAA,EAAA4jB,EAAAkxK,EAAA/oN,OAAAi0B,EAAA4jB,EAAA5jB,GAAA,EAAA,CAEA,IAAA0H,EAAA/F,EAAAhmB,QACAgmB,EAAAx0B,GAAA2nN,EAAA90L,EAAA,GACA2B,EAAAxoB,GAAA27M,EAAA90L,EAAA,GACA20L,EAAAxnN,EAAAw0B,EAAAx0B,EACAwnN,EAAAx7M,EAAAwoB,EAAAxoB,EACA63M,EACAplN,EAAAkpN,EAAA90L,GAAA80L,EAAA90L,EAAA,GAAA80L,EAAA90L,EAAA,GAAA80L,EAAA90L,EAAA,GAAA80L,EAAA90L,EAAA,GAAA0H,EAAA/F,GAGA,IAAA3B,IAAA,IAAA60L,GAAA5/F,EAAAp5G,KAAA8lB,GAGA,MAEA,IAAA,IACA,IAAA,IACA/1B,EAAAstH,YAAAhH,WAAA,EAEAtmH,EAAAstH,YAAAjH,OAAAlmH,OAAA,IAGA41B,EAAA9lB,KAAAo5G,GACArpH,EAAAstH,YAAA9G,aAAAv2G,KAAA8lB,GACAizL,GAAA,GAGA,MAEA,QACA54M,QAAAC,KAAAq7I,GAMAu9D,GAAA,EAIA,OAAAjpN,EAjfAmpN,CAAA/rF,IACA,MAEA,IAAA,OACA/zF,EAAAw9K,EAAAzpF,EAAA/zF,GACArpC,EA4jBA,SAAAo9H,GAEA,IAAA77H,EAAA2lN,EAAA9pF,EAAA1mF,aAAA,MAAA,GACAnpC,EAAA25M,EAAA9pF,EAAA1mF,aAAA,MAAA,GACA2uK,EAAA6B,EAAA9pF,EAAA1mF,aAAA,OAAA,GACA4uK,EAAA4B,EAAA9pF,EAAA1mF,aAAA,OAAA,GACA5nC,EAAAo4M,EAAA9pF,EAAA1mF,aAAA,UACAt3B,EAAA8nM,EAAA9pF,EAAA1mF,aAAA,WAEA12C,EAAA,IAAAqsH,EAAAe,UACAptH,EAAAsoH,OAAA/mH,EAAA,EAAA8jN,EAAA93M,GACAvN,EAAAuoH,OAAAhnH,EAAAuN,EAAA,EAAAu2M,EAAA93M,IACA,IAAA83M,GAAA,IAAAC,IAAAtlN,EAAA2oH,cAAApnH,EAAAuN,EAAAvB,EAAAhM,EAAAuN,EAAAvB,EAAAhM,EAAAuN,EAAAvB,EAAA,EAAA+3M,GACAtlN,EAAAuoH,OAAAhnH,EAAAuN,EAAAvB,EAAA6R,EAAA,EAAAkmM,IACA,IAAAD,GAAA,IAAAC,IAAAtlN,EAAA2oH,cAAApnH,EAAAuN,EAAAvB,EAAA6R,EAAA7d,EAAAuN,EAAAvB,EAAA6R,EAAA7d,EAAAuN,EAAA,EAAAu2M,EAAA93M,EAAA6R,GACApf,EAAAuoH,OAAAhnH,EAAA,EAAA8jN,EAAA93M,EAAA6R,IAEA,IAAAimM,GAAA,IAAAC,IAEAtlN,EAAA2oH,cAAApnH,EAAAgM,EAAA6R,EAAA7d,EAAAgM,EAAA6R,EAAA7d,EAAAgM,EAAA6R,EAAA,EAAAkmM,GAIAtlN,EAAAuoH,OAAAhnH,EAAAgM,EAAA,EAAA+3M,IAEA,IAAAD,GAAA,IAAAC,IAEAtlN,EAAA2oH,cAAApnH,EAAAgM,EAAAhM,EAAAgM,EAAAhM,EAAA,EAAA8jN,EAAA93M,GAIA,OAAAvN,EA3lBAopN,CAAAhsF,GACA,MAEA,IAAA,UACA/zF,EAAAw9K,EAAAzpF,EAAA/zF,GACArpC,EA0lBA,SAAAo9H,GAqBA,IAEAp9H,EAAA,IAAAqsH,EAAAe,UAEAhrH,EAAA,EAMA,OAJAg7H,EAAA1mF,aAAA,UAAAmnB,QANA,kCAnBA,SAAA97D,EAAA0O,EAAAC,GAEA,IAAAnP,EAAA2lN,EAAAz2M,GACAlD,EAAA25M,EAAAx2M,GAEA,IAAAtO,EAEApC,EAAAsoH,OAAA/mH,EAAAgM,GAIAvN,EAAAuoH,OAAAhnH,EAAAgM,GAIAnL,MAYApC,EAAAstH,YAAAhH,WAAA,EAEAtmH,EAznBAqpN,CAAAjsF,GACA,MAEA,IAAA,WACA/zF,EAAAw9K,EAAAzpF,EAAA/zF,GACArpC,EAwnBA,SAAAo9H,GAqBA,IAEAp9H,EAAA,IAAAqsH,EAAAe,UAEAhrH,EAAA,EAMA,OAJAg7H,EAAA1mF,aAAA,UAAAmnB,QANA,kCAnBA,SAAA97D,EAAA0O,EAAAC,GAEA,IAAAnP,EAAA2lN,EAAAz2M,GACAlD,EAAA25M,EAAAx2M,GAEA,IAAAtO,EAEApC,EAAAsoH,OAAA/mH,EAAAgM,GAIAvN,EAAAuoH,OAAAhnH,EAAAgM,GAIAnL,MAYApC,EAAAstH,YAAAhH,WAAA,EAEAtmH,EAvpBAspN,CAAAlsF,GACA,MAEA,IAAA,SACA/zF,EAAAw9K,EAAAzpF,EAAA/zF,GACArpC,EAspBA,SAAAo9H,GAEA,IAAA77H,EAAA2lN,EAAA9pF,EAAA1mF,aAAA,OACAnpC,EAAA25M,EAAA9pF,EAAA1mF,aAAA,OACAr/B,EAAA6vM,EAAA9pF,EAAA1mF,aAAA,MAEA6yK,EAAA,IAAAl9F,EAAA9F,KACAgjG,EAAArgG,OAAA3nH,EAAAgM,EAAA8J,EAAA,EAAA,EAAArW,KAAAiL,IAEA,IAAAjM,EAAA,IAAAqsH,EAAAe,UAGA,OAFAptH,EAAAqtH,SAAAjiH,KAAAm+M,GAEAvpN,EAlqBAwpN,CAAApsF,GACA,MAEA,IAAA,UACA/zF,EAAAw9K,EAAAzpF,EAAA/zF,GACArpC,EAiqBA,SAAAo9H,GAEA,IAAA77H,EAAA2lN,EAAA9pF,EAAA1mF,aAAA,OACAnpC,EAAA25M,EAAA9pF,EAAA1mF,aAAA,OACA2uK,EAAA6B,EAAA9pF,EAAA1mF,aAAA,OACA4uK,EAAA4B,EAAA9pF,EAAA1mF,aAAA,OAEA6yK,EAAA,IAAAl9F,EAAA9F,KACAgjG,EAAApgG,WAAA5nH,EAAAgM,EAAA83M,EAAAC,EAAA,EAAA,EAAAtkN,KAAAiL,IAEA,IAAAjM,EAAA,IAAAqsH,EAAAe,UAGA,OAFAptH,EAAAqtH,SAAAjiH,KAAAm+M,GAEAvpN,EA9qBAypN,CAAArsF,GACA,MAEA,IAAA,OACA/zF,EAAAw9K,EAAAzpF,EAAA/zF,GACArpC,EA6qBA,SAAAo9H,GAEA,IAAAxoH,EAAAsyM,EAAA9pF,EAAA1mF,aAAA,OACA7hC,EAAAqyM,EAAA9pF,EAAA1mF,aAAA,OACA7sB,EAAAq9L,EAAA9pF,EAAA1mF,aAAA,OACA5sB,EAAAo9L,EAAA9pF,EAAA1mF,aAAA,OAEA12C,EAAA,IAAAqsH,EAAAe,UAKA,OAJAptH,EAAAsoH,OAAA1zG,EAAAC,GACA7U,EAAAuoH,OAAA1+F,EAAAC,GACA9pB,EAAAstH,YAAAhH,WAAA,EAEAtmH,EAzrBA0pN,CAAAtsF,GACA,MAEA,QACAhtH,QAAA5B,IAAA4uH,GAIAp9H,SAEAa,IAAAwoC,EAAAsgL,MAAA,SAAAtgL,EAAAsgL,MAEA3pN,EAAA4oC,MAAAM,SAAAG,EAAAsgL,MAshCA,SAAA3pN,EAAAgN,GAEA,SAAA48M,EAAA72M,GAEA+1M,EAAAz5M,IAAA0D,EAAAxR,EAAAwR,EAAAxF,EAAA,GAAA4D,aAAAnE,GAEA+F,EAAA1D,IAAAy5M,EAAAvnN,EAAAunN,EAAAv7M,GAQA,IAJA,IAAAs8M,EAuDA,SAAA78M,GAEA,OAAA,IAAAA,EAAAqE,SAAA,IAAA,IAAArE,EAAAqE,SAAA,GAzDAy4M,CAAA98M,GAEAqgH,EAAArtH,EAAAqtH,SAEAhtH,EAAA,EAAA0M,EAAAsgH,EAAAltH,OAAAE,EAAA0M,EAAA1M,IAKA,IAHA,IAAA0pN,EAAA18F,EAAAhtH,GACAgmH,EAAA0jG,EAAA1jG,OAEAjyF,EAAA,EAAAA,EAAAiyF,EAAAlmH,OAAAi0B,IAAA,CAEA,IAAAyzF,EAAAxB,EAAAjyF,GAEAyzF,EAAA/B,aAEA8jG,EAAA/hG,EAAA/0G,IACA82M,EAAA/hG,EAAA90G,KAEA80G,EAAAjC,oBAEAgkG,EAAA/hG,EAAA3zF,IACA01L,EAAA/hG,EAAA/0G,IACA82M,EAAA/hG,EAAA90G,IACA62M,EAAA/hG,EAAA3C,KAEA2C,EAAA7B,wBAEA4jG,EAAA/hG,EAAA3zF,IACA01L,EAAA/hG,EAAA/0G,IACA82M,EAAA/hG,EAAA90G,KAEA80G,EAAA9D,iBAEA8lG,GAEAz5M,QAAAC,KAAA,8EAIAw4M,EAAAx5M,IAAAw4G,EAAArJ,GAAAqJ,EAAApJ,IACAmrG,EAAAf,GACAhhG,EAAArJ,GAAAqqG,EAAAtnN,EACAsmH,EAAApJ,GAAAoqG,EAAAt7M,EAEAs6G,EAAAnJ,SAAAiqG,EAAA37M,GACA66G,EAAAlJ,SAAAiqG,EAAA57M,KAzkCAg9M,CAAAhqN,EAAA8nN,GAEA/2F,EAAA3lH,KAAApL,GAEAA,EAAAkuB,UAAAkvG,KAAAA,EAAA/zF,MAAAA,IAIA,IAAA4pI,EAAA71C,EAAAo7B,WAEA,IAAA,IAAAn4J,EAAA,EAAAA,EAAA4yK,EAAA9yK,OAAAE,IAEAs7K,EAAA1I,EAAA5yK,GAAAgpC,GAIAu3C,IAEA8nI,EAAA/gJ,MAEA+gJ,EAAAvoN,OAAA,EAEA2nN,EAAA73M,KAAAy4M,EAAAA,EAAAvoN,OAAA,IAIA2nN,EAAAxqM,YA8lCAq+J,CAAAxK,EAAA/Z,iBACAuyD,KAAA,OACAM,YAAA,EACAC,cAAA,EACAC,YAAA,EACAC,eAAA,QACAC,cAAA,OACAC,iBAAA,IAGA,IAAAz3L,GAAAk+F,MAAAA,EAAAogD,IAAAA,EAAA/Z,iBAGA,OAAAvkI,KAMAw5F,EAAA44F,UAAAsF,eAAA,SAAAn7M,EAAAw5B,EAAA4hL,EAAAC,EAAAC,GAeA,OANAt7M,OAAAvO,IAAAuO,EAAAA,EAAA,GAOAu7M,YANA/hL,OAAA/nC,IAAA+nC,EAAAA,EAAA,OAOAuhL,YAAA/6M,EACAg7M,eAPAI,OAAA3pN,IAAA2pN,EAAAA,EAAA,QAQAH,cAPAI,OAAA5pN,IAAA4pN,EAAAA,EAAA,OAQAH,iBAPAI,OAAA7pN,IAAA6pN,EAAAA,EAAA,IAYAr+F,EAAA44F,UAAA2F,eAAA,SAAA11L,EAAAmU,EAAAwhL,EAAA1pE,GAUA,IAAA7wG,KACAC,KACAE,KAEA,GAAA,IAAA47E,EAAA44F,UAAA6F,0BAAA51L,EAAAmU,EAAAwhL,EAAA1pE,EAAA7wG,EAAAC,EAAAE,GAEA,OAAA,KAIA,IAAAre,EAAA,IAAAi6F,EAAAn2E,eAKA,OAJA9jB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAK,EAAA,IACAle,EAAAukB,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAAM,EAAA,IACAne,EAAAukB,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAAQ,EAAA,IAEAre,GAIAi6F,EAAA44F,UAAA6F,2BAEA9G,EAAA,IAAA33F,EAAA19G,QACAs1M,EAAA,IAAA53F,EAAA19G,QACAu1M,EAAA,IAAA73F,EAAA19G,QACAw1M,EAAA,IAAA93F,EAAA19G,QACAy1M,EAAA,IAAA/3F,EAAA19G,QACA01M,EAAA,IAAAh4F,EAAA19G,QACA21M,EAAA,IAAAj4F,EAAA19G,QACA41M,EAAA,IAAAl4F,EAAA19G,QACA61M,EAAA,IAAAn4F,EAAA19G,QACA81M,EAAA,IAAAp4F,EAAA19G,QACA+1M,EAAA,IAAAr4F,EAAA19G,QACAg2M,EAAA,IAAAt4F,EAAA19G,QACAi2M,EAAA,IAAAv4F,EAAA19G,QACAk2M,EAAA,IAAAx4F,EAAA19G,QACAm2M,EAAA,IAAAz4F,EAAA19G,QACAo2M,EAAA,IAAA14F,EAAA19G,QACAq2M,EAAA,IAAA34F,EAAA19G,QAEA,SAAAumB,EAAAmU,EAAAwhL,EAAA1pE,EAAA7wG,EAAAC,EAAAE,EAAAkN,GASAktK,OAAAhqN,IAAAgqN,EAAAA,EAAA,GACA1pE,OAAAtgJ,IAAAsgJ,EAAAA,EAAA,KACAxjG,OAAA98C,IAAA88C,EAAAA,EAAA,EAKA,IAAAymI,GAFAlvJ,EAsqBA,SAAAA,GAMA,IADA,IAAA61L,GAAA,EACA1qN,EAAA,EAAA0M,EAAAmoB,EAAA/0B,OAAA,EAAAE,EAAA0M,EAAA1M,IAEA,GAAA60B,EAAA70B,GAAAiS,WAAA4iB,EAAA70B,EAAA,IAAA8gJ,EAAA,CAEA4pE,GAAA,EACA,MAMA,IAAAA,EAAA,OAAA71L,EAEA,IAAA81L,KACAA,EAAA5/M,KAAA8pB,EAAA,IAEA,IAAA,IAAA70B,EAAA,EAAA0M,EAAAmoB,EAAA/0B,OAAA,EAAAE,EAAA0M,EAAA1M,IAEA60B,EAAA70B,GAAAiS,WAAA4iB,EAAA70B,EAAA,KAAA8gJ,GAEA6pE,EAAA5/M,KAAA8pB,EAAA70B,IAQA,OAFA2qN,EAAA5/M,KAAA8pB,EAAAA,EAAA/0B,OAAA,IAEA6qN,EAxsBAC,CAAA/1L,IAEA/0B,OAEA,GAAAikL,EAAA,EAAA,OAAA,EAEA,IAEA59D,EAEA0kG,EAOAC,EACAC,EACAC,EAbAC,EAAAp2L,EAAA,GAAAliB,OAAAkiB,EAAAkvJ,EAAA,IAGAmnC,EAAAr2L,EAAA,GAGAs2L,EAAAniL,EAAA8gL,YAAA,EAEAsB,EAAA,GAAArnC,EAAA,GACAsnC,EAAA,EAKAC,GAAA,EAEAC,EAAA,EACAC,EAAA,EAAAluK,EACAmuK,EAAA,EAAAnuK,EAGA1gB,EAAA/H,EAAA,GAAAA,EAAA,GAAA8uL,GAAAhzM,eAAAw6M,GACAjH,EAAAt0M,KAAAilB,EAAA,IAAAtkB,IAAAozM,GACAQ,EAAAv0M,KAAAilB,EAAA,IAAA/kB,IAAA6zM,GACAS,EAAAx0M,KAAAs0M,GACAG,EAAAz0M,KAAAu0M,GAEA,IAAA,IAAAuH,EAAA,EAAAA,EAAA3nC,EAAA2nC,IAAA,CAEAvlG,EAAAtxF,EAAA62L,GAQAb,EALAa,IAAA3nC,EAAA,EAEAknC,EAGAp2L,EAAA,QAEAr0B,EAIAq0B,EAAA62L,EAAA,GAKA,IAAAC,EAAAhI,EACA/mL,EAAAsuL,EAAA/kG,EAAAwlG,GAEA9H,EAAAj0M,KAAA+7M,GAAAh7M,eAAAw6M,GACA7G,EAAA10M,KAAAu2G,GAAA51G,IAAAszM,GACAU,EAAA30M,KAAAu2G,GAAAr2G,IAAA+zM,GAEA,IAAA+H,EAAAP,EAAAD,EAIA,GAFAN,GAAA,OAEAtqN,IAAAqqN,EAAA,CAGAjuL,EAAAupF,EAAA0kG,EAAAjH,GAEAC,EAAAj0M,KAAAg0M,GAAAjzM,eAAAw6M,GACA3G,EAAA50M,KAAAu2G,GAAA51G,IAAAszM,GACAY,EAAA70M,KAAAu2G,GAAAr2G,IAAA+zM,GAEAkH,GAAA,EACAlH,EAAArzM,WAAAq6M,EAAAK,GACAS,EAAAn6M,IAAAqyM,GAAA,IAEAkH,GAAA,GAGA,IAAAW,IAAAJ,EAAAP,GAEAlH,EAAArzM,WAAAq6M,EAAA1kG,GACA09F,EAAA/xM,YACA,IAAAN,EAAA7Q,KAAAkR,IAAA85M,EAAAn6M,IAAAqyM,IAGA,GAAA,IAAAryM,EAAA,CAGA,IAAAq6M,EAAAV,EAAA35M,EACAqyM,EAAAlzM,gBAAAk7M,GACA/H,EAAAtzM,WAAA21G,EAAA+kG,GACAnH,EAAAn0M,KAAAk0M,GAAAxxM,UAAAu5M,GAAA/7M,IAAA+zM,GACAa,EAAA90M,KAAAm0M,GAAAxyM,SACA,IAAAu6M,EAAA/H,EAAAjkN,SACAisN,EAAAjI,EAAAhkN,SACAgkN,EAAAjzM,aAAAk7M,GACA/H,EAAAxzM,WAAAq6M,EAAA1kG,GACA,IAAA6lG,EAAAhI,EAAAlkN,SAmCA,OAlCAkkN,EAAAnzM,aAAAm7M,GAEAlI,EAAAtyM,IAAAkzM,GAAAqH,GAAA/H,EAAAxyM,IAAAkzM,GAAAsH,IAEAlB,GAAA,GAGAnG,EAAA/0M,KAAAm0M,GAAAj0M,IAAAq2G,GACAu+F,EAAA50M,IAAAq2G,GAEA6kG,GAAA,EAEAF,EAEAC,GAEAtG,EAAA70M,KAAA80M,GACAH,EAAA30M,KAAA80M,KAIAF,EAAA50M,KAAA80M,GACAJ,EAAA10M,KAAA80M,IAQAuH,KAIAjjL,EAAA+gL,gBAEA,IAAA,QAEAmC,GAAAnB,EAAAD,EAAAc,GAEA,MAEA,IAAA,QAIAO,GAAApB,EAAAD,GAIAC,EAEAqB,EAAAjmG,EAAAm+F,EAAAE,EAAAoH,EAAA,GAIAQ,EAAAjmG,EAAAs+F,EAAAF,EAAAqH,EAAA,GAIA,MAEA,IAAA,QACA,IAAA,aACA,QAEA,IAAAS,EAAAlB,EAAAniL,EAAAihL,iBAAA6B,EAEA,GAAAO,EAAA,EAAA,CAIA,GAAA,eAAArjL,EAAA+gL,eAAA,CAEAmC,GAAAnB,EAAAD,EAAAc,GACA,MAMAO,GAAApB,EAAAD,GAIAC,GAEA/G,EAAAxzM,WAAAm0M,EAAAL,GAAA3zM,eAAA07M,GAAAv8M,IAAAw0M,GACAL,EAAAzzM,WAAAm0M,EAAAH,GAAA7zM,eAAA07M,GAAAv8M,IAAA00M,GAEA94G,EAAA44G,EAAAsH,EAAA,GACAlgH,EAAAs4G,EAAA4H,EAAA,GACAlgH,EAAAya,EAAAylG,EAAA,IAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAs4G,EAAA4H,EAAA,GACAlgH,EAAAu4G,EAAA2H,EAAA,GAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAu4G,EAAA2H,EAAA,GACAlgH,EAAA84G,EAAAoH,EAAA,KAIA5H,EAAAxzM,WAAAm0M,EAAAJ,GAAA5zM,eAAA07M,GAAAv8M,IAAAy0M,GACAN,EAAAzzM,WAAAm0M,EAAAF,GAAA9zM,eAAA07M,GAAAv8M,IAAA20M,GAEA/4G,EAAA64G,EAAAqH,EAAA,GACAlgH,EAAAs4G,EAAA4H,EAAA,GACAlgH,EAAAya,EAAAylG,EAAA,IAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAs4G,EAAA4H,EAAA,GACAlgH,EAAAu4G,EAAA2H,EAAA,GAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAu4G,EAAA2H,EAAA,GACAlgH,EAAA+4G,EAAAmH,EAAA,SAUAd,GAIAC,GAEAr/G,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAAi5G,EAAAiH,EAAA,GAEAlgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAi5G,EAAAiH,EAAA,GACAlgH,EAAAg5G,EAAAkH,EAAA,KAIAlgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAAi5G,EAAAiH,EAAA,GAEAlgH,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAAg5G,EAAAkH,EAAA,GACAlgH,EAAAi5G,EAAAiH,EAAA,IAKAb,EAEAvG,EAAA50M,KAAA+0M,GAIAF,EAAA70M,KAAA+0M,IASAoG,GAEAr/G,EAAA44G,EAAAsH,EAAA,GACAlgH,EAAAi5G,EAAAiH,EAAA,GACAlgH,EAAAya,EAAAylG,EAAA,IAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAi5G,EAAAiH,EAAA,GACAlgH,EAAA84G,EAAAoH,EAAA,KAIAlgH,EAAA64G,EAAAqH,EAAA,GACAlgH,EAAAi5G,EAAAiH,EAAA,GACAlgH,EAAAya,EAAAylG,EAAA,IAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAi5G,EAAAiH,EAAA,GACAlgH,EAAA+4G,EAAAmH,EAAA,IAMAZ,GAAA,QAYAiB,UAQAA,KAIAhB,GAAAS,IAAA3nC,EAAA,GAGAuoC,GAAAz3L,EAAA,GAAAuvL,EAAAC,EAAA0G,GAAA,EAAAM,GAMAA,EAAAO,EAEAV,EAAA/kG,EAEA+9F,EAAAt0M,KAAA40M,GACAL,EAAAv0M,KAAA60M,GAIA,GAAAwG,GAKA,GAAAH,GAAA76K,EAAA,CAIA,IAAAs8K,EAAA5H,EACA6H,EAAA9H,EAEA4G,IAAAP,IAEAwB,EAAA7H,EACA8H,EAAA7H,GAIAoG,GAEAC,GAAAM,KAEAkB,EAAA15M,QAAAm9B,EAAA,GACAu8K,EAAA15M,QAAAm9B,EAAA,GAEA+6K,GAEAuB,EAAAz5M,QAAAm9B,EAAA,KAQA+6K,GAAAM,IAEAkB,EAAA15M,QAAAm9B,EAAA,GACAu8K,EAAA15M,QAAAm9B,EAAA,GAEA+6K,GAEAuB,EAAAz5M,QAAAm9B,EAAA,UAxCAq8K,GAAAnmG,EAAAm+F,EAAAC,EAAAwG,GAAA,EAAAa,GAkDA,OAAAL,EAMA,SAAA3uL,EAAA3I,EAAAC,EAAAg5C,GAGA,OADAA,EAAA18D,WAAA0jB,EAAAD,GACAi5C,EAAAl+D,KAAAk+D,EAAAhgE,EAAAggE,EAAAhsE,GAAA4Q,YAIA,SAAA45F,EAAAniF,EAAA+T,EAAAztB,GAEAogC,IAEAA,EAAAu7K,GAAAjiM,EAAAroB,EACA+uC,EAAAu7K,EAAA,GAAAjiM,EAAArc,EACA+iC,EAAAu7K,EAAA,GAAA,EAEAt7K,IAEAA,EAAAs7K,GAAA,EACAt7K,EAAAs7K,EAAA,GAAA,EACAt7K,EAAAs7K,EAAA,GAAA,GAIAA,GAAA,EAEAp7K,IAEAA,EAAAq7K,GAAAnuL,EACA8S,EAAAq7K,EAAA,GAAA57M,EAEA47M,GAAA,IAMAF,GAAA,EAIA,SAAAa,EAAAh5M,EAAA6gB,EAAAC,EAAAoJ,EAAAztB,GAKA8zM,EAAA/zM,KAAAqkB,GAAA1jB,IAAA6C,GAAAtB,YACA8xM,EAAAh0M,KAAAskB,GAAA3jB,IAAA6C,GAAAtB,YAEA,IAAAC,EAAApR,KAAAiL,GACA4F,EAAAmyM,EAAAnyM,IAAAoyM,GACAjjN,KAAAkR,IAAAL,GAAA,IAAAO,EAAApR,KAAAkR,IAAAlR,KAAAwW,KAAA3F,KAEAO,GAAAy4M,EAEA3G,EAAAj0M,KAAAqkB,GAEA,IAAA,IAAAj0B,EAAA,EAAA+0B,EAAAy1L,EAAA,EAAAxqN,EAAA+0B,EAAA/0B,IAEA8jN,EAAAl0M,KAAAi0M,GAAA1wM,aAAAC,EAAArB,GAEA25F,EAAAm4G,EAAAvmL,EAAAztB,GACA67F,EAAAo4G,EAAAxmL,EAAAztB,GACA67F,EAAAt4F,EAAAkqB,EAAA,IAEAumL,EAAAj0M,KAAAk0M,GAIAp4G,EAAAo4G,EAAAxmL,EAAAztB,GACA67F,EAAAx3E,EAAAoJ,EAAAztB,GACA67F,EAAAt4F,EAAAkqB,EAAA,IAIA,SAAA2uL,KAEAvgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAA44G,EAAAsH,EAAA,GAEAlgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAA44G,EAAAsH,EAAA,GACAlgH,EAAA64G,EAAAqH,EAAA,GAIA,SAAAM,GAAAnB,EAAAD,EAAAxtL,GAEAwtL,EAIAC,GAIAr/G,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAA44G,EAAAsH,EAAA,GAEAlgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAA44G,EAAAsH,EAAA,GACAlgH,EAAAg5G,EAAAkH,EAAA,GAIAlgH,EAAA44G,EAAAhnL,EAAA,GACAouE,EAAA84G,EAAAlnL,EAAA,GACAouE,EAAAg5G,EAAApnL,EAAA,MAMAouE,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAA64G,EAAAqH,EAAA,GAEAlgH,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAAg5G,EAAAkH,EAAA,GACAlgH,EAAA64G,EAAAqH,EAAA,GAIAlgH,EAAA64G,EAAAjnL,EAAA,GACAouE,EAAA+4G,EAAAnnL,EAAA,GACAouE,EAAAg5G,EAAApnL,EAAA,KAQAytL,GAEAr/G,EAAA44G,EAAAhnL,EAAA,GACAouE,EAAA84G,EAAAlnL,EAAA,GACAouE,EAAAya,EAAA7oF,EAAA,MAIAouE,EAAA64G,EAAAjnL,EAAA,GACAouE,EAAA+4G,EAAAnnL,EAAA,GACAouE,EAAAya,EAAA7oF,EAAA,KAQA,SAAA6uL,GAAApB,EAAAD,GAEAA,IAEAC,GAEAr/G,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAA44G,EAAAsH,EAAA,GAEAlgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAA44G,EAAAsH,EAAA,GACAlgH,EAAAg5G,EAAAkH,EAAA,GAEAlgH,EAAA44G,EAAA+G,EAAA,GACA3/G,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAg5G,EAAAkH,EAAA,GAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAA84G,EAAA6G,EAAA,GACA3/G,EAAAg5G,EAAAkH,EAAA,KAIAlgH,EAAAy4G,EAAAkH,EAAA,GACA3/G,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAA64G,EAAAqH,EAAA,GAEAlgH,EAAAw4G,EAAAmH,EAAA,GACA3/G,EAAAg5G,EAAAkH,EAAA,GACAlgH,EAAA64G,EAAAqH,EAAA,GAEAlgH,EAAA64G,EAAA8G,EAAA,GACA3/G,EAAAg5G,EAAAkH,EAAA,GACAlgH,EAAAya,EAAAylG,EAAA,IAEAlgH,EAAAya,EAAAylG,EAAA,IACAlgH,EAAAg5G,EAAAkH,EAAA,GACAlgH,EAAA+4G,EAAA4G,EAAA,KAQA,SAAAiB,GAAAl5M,EAAA6gB,EAAAC,EAAA62L,EAAAtvL,EAAA6B,GAKA,OAAA0L,EAAAghL,eAEA,IAAA,QAEAvuL,EAEA2wL,EAAAh5M,EAAA8gB,EAAAD,EAAAqJ,EAAA,IAIA8uL,EAAAh5M,EAAA6gB,EAAAC,EAAAoJ,EAAA,IAIA,MAEA,IAAA,SAEA,GAAA7B,EAEAkoL,EAAAnzM,WAAAyjB,EAAA7gB,GACAwwM,EAAA50M,IAAA20M,EAAAz2M,GAAAy2M,EAAAziN,GAEA2iN,EAAA5zM,WAAA0zM,EAAAC,GAAA9zM,IAAAsD,GACA0wM,EAAAtzM,WAAAozM,EAAAD,GAAA7zM,IAAAsD,GAGA23M,GAEAlH,EAAA/wM,QAAAm9B,EAAA,GACA6zK,EAAAhxM,QAAAm9B,EAAA,GACA6zK,EAAAhxM,QAAAm9B,EAAA,KAIA4zK,EAAA/wM,QAAAm9B,EAAA,GACA4zK,EAAA/wM,QAAAm9B,EAAA,GACA6zK,EAAAhxM,QAAAm9B,EAAA,QAIA,CAEA0zK,EAAAnzM,WAAA0jB,EAAA9gB,GACAwwM,EAAA50M,IAAA20M,EAAAz2M,GAAAy2M,EAAAziN,GAEA2iN,EAAA5zM,WAAA0zM,EAAAC,GAAA9zM,IAAAsD,GACA0wM,EAAAtzM,WAAAozM,EAAAD,GAAA7zM,IAAAsD,GAEA,IAAAupC,EAAA1M,EAAAnwC,OAGAirN,GAEAlH,EAAA/wM,QAAAm9B,EAAA0M,EAAA,GACAmnK,EAAAhxM,QAAAm9B,EAAA0M,EAAA,GACAmnK,EAAAhxM,QAAAm9B,EAAA0M,EAAA,MAIAknK,EAAA/wM,QAAAm9B,EAAA0M,EAAA,GACAmnK,EAAAhxM,QAAAm9B,EAAA0M,EAAA,GACAmnK,EAAAhxM,QAAAm9B,EAAA0M,EAAA,UA4DAqvE,EAAA44F,YAGAnlN,EAAA,wCACA,mBACA,SAAAusH,GAYAA,EAAAygG,UAAA,SAAAxvG,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEAz7G,KAAAmhE,OAAA,EAEAnhE,KAAA8yC,MAAA,KACA9yC,KAAA+nB,SAAA,EAEA/nB,KAAA0vB,aACA1vB,KAAAkyJ,WAIA1nC,EAAAygG,UAAArrN,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAygG,UAWArvG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEA7B,EAAA,KAAA68C,EAAA78C,KAAAqsH,EAAA5B,YAAAM,eAAAxmG,GAAAs4B,EAAA78C,KAEAg9G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAsE,gBAAA,eAEAtE,EAAAS,KAAAl5F,EAAA,SAAAsO,GAEAmpF,EAAAn/D,EAAA9pB,MAAAF,EAAA7yB,KAEAi8G,EAAAC,IAYAnpF,MAAA,SAAAw4H,EAAAvrJ,GAEA6B,KAAA8yC,MAAA,IAAA03E,EAAA7yC,MACA33E,KAAA+nB,SAAA,EACA/nB,KAAA0vB,aACA1vB,KAAAkyJ,UAEAlyJ,KAAAkrN,SAAAxhE,EAAAvrJ,GAEA,IAAA,IAAAK,EAAA,EAAAA,EAAAwB,KAAAkyJ,OAAA5zJ,OAAAE,IAEAwB,KAAA8yC,MAAAxkC,IAAAtO,KAAAkyJ,OAAA1zJ,IAIA,OAAAwB,KAAA8yC,OAWAo4K,SAAA,SAAAxhE,EAAAvrJ,GAEA,IAAA6yB,EAAA,IAAA0/E,SAAAg5C,GACAyhE,EAAAnrN,KAAAorN,UAAAp6L,GAEA,GAAAm6L,EAAA18L,KAAA48L,GAAAF,EAAA18L,KAAA68L,GAAAH,EAAA18L,KAAA88L,EAIA,IAFA,IAAAnxJ,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAEA,IAAA/wJ,GAAA,CAEA,GAAAA,IAAAqxJ,EAAA,CAEA,IAAAxqM,EAAAjhB,KAAA0rN,UAAA16L,GACAhxB,KAAA2rN,aAAA,qBAAA1qM,QAEAm5C,IAAAwxJ,GAEA5rN,KAAA6rN,cAAA76L,GACAhxB,KAAA8rN,aAAA96L,EAAA7yB,IAIA6B,KAAA2rN,aAAA,uBAAAvxJ,EAAAn6D,SAAA,KAIAm6D,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAMAnrN,KAAA2rN,aAAA,UAAA3rN,KAAAkyJ,OAAA5zJ,OAAA,YAWAwtN,aAAA,SAAA96L,EAAA7yB,GAKA,IAHA,IAAAgtN,EAAAnrN,KAAAorN,UAAAp6L,GACAopC,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAEA,IAAA/wJ,GAAA,CAEA,GAAAA,IAAA2xJ,EAAA,CAEA,IAAA9qM,GAAAjhB,KAAA0rN,UAAA16L,GACAhxB,KAAA2rN,aAAA,iBAAA1qM,QAEA,GAAAm5C,IAAA4xJ,EAAA,CAEA,IAAAntM,EAAA7e,KAAAqmK,UAAAr1I,GACAhxB,KAAA2rN,aAAA,iBAAA9sM,GACA7e,KAAA8yC,MAAAj0B,MAAArR,IAAAqR,EAAAA,EAAAA,QAEAu7C,IAAA6xJ,GAEAjsN,KAAA2rN,aAAA,gBACA3rN,KAAA6rN,cAAA76L,GACAhxB,KAAAksN,gBAAAl7L,IAEAopC,IAAA+xJ,GAEAnsN,KAAA2rN,aAAA,YACA3rN,KAAA6rN,cAAA76L,GACAhxB,KAAAosN,kBAAAp7L,EAAA7yB,IAIA6B,KAAA2rN,aAAA,wBAAAvxJ,EAAAn6D,SAAA,KAIAm6D,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,KAYAe,gBAAA,SAAAl7L,GAEA,IAAAm6L,EAAAnrN,KAAAorN,UAAAp6L,GACAvyB,EAAAuB,KAAAqsN,WAAAr7L,EAAA,IACAm6L,EAAAmB,IAAAtsN,KAAA+nB,SAGA,IADA,IAAAqyC,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GACA,IAAA/wJ,GAAA,CAEA,GAAAA,IAAAmyJ,EAAA,CAEAvsN,KAAA6rN,cAAA76L,GACA,IAAA8rB,EAAA98C,KAAAwsN,SAAAx7L,GACA8rB,EAAAr+C,KAAAA,EACAuB,KAAAkyJ,OAAA3oJ,KAAAuzC,QAIA98C,KAAA2rN,aAAA,+BAAAvxJ,EAAAn6D,SAAA,KAIAm6D,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAIAnrN,KAAAysN,SAAAtB,IAWAiB,kBAAA,SAAAp7L,EAAA7yB,GAMA,IAJA,IAAAgtN,EAAAnrN,KAAAorN,UAAAp6L,GACAopC,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GACAz6L,EAAA,IAAA85F,EAAApnD,kBAEA,IAAAhJ,GAAA,CAEA,GAAAA,IAAAsyJ,EAEAh8L,EAAAjyB,KAAAuB,KAAAqsN,WAAAr7L,EAAA,IACAhxB,KAAA2rN,aAAA,YAAAj7L,EAAAjyB,WAEA,GAAA27D,IAAAuyJ,EAEA3sN,KAAA2rN,aAAA,gBACAj7L,EAAAgc,WAAA,OAEA,GAAA0tB,IAAAwyJ,EAAA,CAEA,IAAAttN,EAAAU,KAAA6sN,SAAA77L,GACAN,EAAAic,mBAAArtC,EACAU,KAAA2rN,aAAA,2BAAArsN,QAEA,GAAA86D,IAAA0yJ,EAEAp8L,EAAAiZ,KAAA6gF,EAAAnpH,WACArB,KAAA2rN,aAAA,uBAEA,GAAAvxJ,IAAA2yJ,EAEA/sN,KAAA2rN,aAAA,wBACAj7L,EAAAgZ,SAAA8gF,EAAA7oH,sBAEA,GAAAy4D,IAAA4yJ,EAEAhtN,KAAA2rN,aAAA,oBACAj7L,EAAAqW,MAAA/mC,KAAAitN,UAAAj8L,QAEA,GAAAopC,IAAA8yJ,EAEAltN,KAAA2rN,aAAA,qBACAj7L,EAAAwf,SAAAlwC,KAAAitN,UAAAj8L,QAEA,GAAAopC,IAAA+yJ,EAEAntN,KAAA2rN,aAAA,oBACAj7L,EAAAqW,MAAA/mC,KAAAitN,UAAAj8L,QAEA,GAAAopC,IAAAgzJ,EAAA,CAEA,IAAAj9K,EAAAnwC,KAAAqtN,SAAAr8L,GACAN,EAAAyf,UAAAA,EACAnwC,KAAA2rN,aAAA,kBAAAx7K,QAEA,GAAAiqB,IAAAkzJ,EAAA,CAEA,IAAAxjL,EAAA9pC,KAAAqtN,SAAAr8L,GACAN,EAAAoZ,QAAA,IAAAA,EACA9pC,KAAA2rN,aAAA,eAAA7hL,GACApZ,EAAAqZ,YAAAD,EAAA,SAEAswB,IAAAmzJ,GAEAvtN,KAAA2rN,aAAA,eACA3rN,KAAA6rN,cAAA76L,GACAN,EAAAqb,IAAA/rC,KAAAwtN,QAAAx8L,EAAA7yB,IAEAi8D,IAAAqzJ,GAEAztN,KAAA2rN,aAAA,cACA3rN,KAAA6rN,cAAA76L,GACAN,EAAA+f,QAAAzwC,KAAAwtN,QAAAx8L,EAAA7yB,IAEAi8D,IAAAszJ,GAEA1tN,KAAA2rN,aAAA,iBACA3rN,KAAA6rN,cAAA76L,GACAN,EAAA2b,SAAArsC,KAAAwtN,QAAAx8L,EAAA7yB,IAEAi8D,IAAAuzJ,GAEA3tN,KAAA2rN,aAAA,kBACA3rN,KAAA6rN,cAAA76L,GACAN,EAAA0b,YAAApsC,KAAAwtN,QAAAx8L,EAAA7yB,IAIA6B,KAAA2rN,aAAA,8BAAAvxJ,EAAAn6D,SAAA,KAIAm6D,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAIAnrN,KAAAysN,SAAAtB,GAEAnrN,KAAA0vB,UAAAgB,EAAAjyB,MAAAiyB,GAWA87L,SAAA,SAAAx7L,GAEA,IAAAm6L,EAAAnrN,KAAAorN,UAAAp6L,GACAopC,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAEA56L,EAAA,IAAAi6F,EAAAn2E,eACAzF,KAEAle,EAAA,IAAA85F,EAAApnD,kBACAtmB,EAAA,IAAA0tE,EAAAvxE,KAAA1oB,EAAAG,GAGA,IAFAosB,EAAAr+C,KAAA,OAEA,IAAA27D,GAAA,CAEA,GAAAA,IAAAwzJ,EAAA,CAEA,IAAAv6L,EAAArzB,KAAAqtN,SAAAr8L,GAEAhxB,KAAA2rN,aAAA,cAAAt4L,GAMA,IAFA,IAAAob,KAEAjwC,EAAA,EAAAA,EAAA60B,EAAA70B,IAEAiwC,EAAAllC,KAAAvJ,KAAAqmK,UAAAr1I,IACAyd,EAAAllC,KAAAvJ,KAAAqmK,UAAAr1I,IACAyd,EAAAllC,KAAAvJ,KAAAqmK,UAAAr1I,IAIAT,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAK,EAAA,SAEA,GAAA2rB,IAAAyzJ,EAEA7tN,KAAA6rN,cAAA76L,GACAhxB,KAAA8tN,cAAA98L,EAAA8rB,QAEA,GAAAsd,IAAA2zJ,EAAA,CAEA,IAAAC,EAAAhuN,KAAAqtN,SAAAr8L,GAEAhxB,KAAA2rN,aAAA,UAAAqC,GAMA,IAFA,IAAAp/K,KAEApwC,EAAA,EAAAA,EAAAwvN,EAAAxvN,IAEAowC,EAAArlC,KAAAvJ,KAAAqmK,UAAAr1I,IACA4d,EAAArlC,KAAAvJ,KAAAqmK,UAAAr1I,IAIAT,EAAAukB,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAAQ,EAAA,SAGA,GAAAwrB,IAAA6zJ,EAAA,CAEAjuN,KAAA2rN,aAAA,kCAGA,IADA,IAAA76L,KACAtyB,EAAA,EAAAA,EAAA,GAAAA,IAEAsyB,EAAAtyB,GAAAwB,KAAAqmK,UAAAr1I,GAIA,IAAAvT,EAAA,IAAA+sG,EAAAxmG,QAGAvG,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,GAGArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,IAGArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,GAAAshB,EAAA,GACArT,EAAAjO,SAAA,IAAAshB,EAAA,GACArT,EAAAjO,SAAA,IAAAshB,EAAA,IAGArT,EAAAjO,SAAA,IAAA,EACAiO,EAAAjO,SAAA,IAAA,EACAiO,EAAAjO,SAAA,IAAA,EACAiO,EAAAjO,SAAA,IAAA,EAEAiO,EAAAS,YAEA,IAAApI,EAAA,IAAA00G,EAAAxmG,QACAlO,EAAA0H,WAAAC,GACA8S,EAAAzY,aAAAhC,GAEA2H,EAAA6K,UAAAw0B,EAAA/0B,SAAA+0B,EAAAppC,WAAAopC,EAAAj+B,YAIA7e,KAAA2rN,aAAA,0BAAAvxJ,EAAAn6D,SAAA,KAIAm6D,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAQA,OAJAnrN,KAAAysN,SAAAtB,GAEA56L,EAAA8lB,uBAEAyG,GAWAgxK,cAAA,SAAA98L,EAAA8rB,GAEA,IAAAquK,EAAAnrN,KAAAorN,UAAAp6L,GACA+hB,EAAA/yC,KAAAqtN,SAAAr8L,GAEAhxB,KAAA2rN,aAAA,aAAA54K,GAIA,IAFA,IAAAxyC,KAEA/B,EAAA,EAAAA,EAAAu0C,IAAAv0C,EAEA+B,EAAAgJ,KAAAvJ,KAAAqtN,SAAAr8L,GAAAhxB,KAAAqtN,SAAAr8L,GAAAhxB,KAAAqtN,SAAAr8L,IAEAhxB,KAAAqtN,SAAAr8L,GAQA,IAJA8rB,EAAAvsB,SAAAqkB,SAAAr0C,GAIAP,KAAA+nB,SAAAojM,EAAA9wL,KAAA,CAEA,IAAA8wL,EAAAnrN,KAAAorN,UAAAp6L,GAEA,GAAAm6L,EAAA18L,KAAAy/L,EAAA,CAEAluN,KAAA2rN,aAAA,wBAEA3rN,KAAA6rN,cAAA76L,GAEA,IAAA8hB,EAAA9yC,KAAAmuN,kBAAAn9L,GAEAN,EAAA1wB,KAAA0vB,UAAAojB,EAAAr0C,WAEAO,IAAA0xB,IAEAosB,EAAApsB,SAAAA,EAEA,KAAAA,EAAAjyB,OAEAiyB,EAAAjyB,KAAAq+C,EAAAr+C,YAQAuB,KAAA2rN,aAAA,mCAAAR,EAAAlrN,SAAA,KAIAD,KAAAysN,SAAAtB,GAIAnrN,KAAAysN,SAAAtB,IAYAqC,QAAA,SAAAx8L,EAAA7yB,GAEA,IAAAgtN,EAAAnrN,KAAAorN,UAAAp6L,GACAopC,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GACA1pM,KAEA05F,EAAA,IAAAqP,EAAAjO,cAAAv8G,KAAAy7G,SAGA,IAFAN,EAAAW,QAAA97G,KAAA27G,cAAAx9G,GAAA09G,eAAA77G,KAAA07G,aAEA,IAAAthD,GAAA,CAEA,GAAAA,IAAAg0J,EAAA,CAEA,IAAA3vN,EAAAuB,KAAAqsN,WAAAr7L,EAAA,KACAvP,EAAA05F,EAAAS,KAAAn9G,GAEAuB,KAAA2rN,aAAA,eAAAxtN,EAAAM,QAEA27D,IAAAi0J,GAEA5sM,EAAApQ,OAAA3R,EAAAM,KAAAqmK,UAAAr1I,GACAhxB,KAAA2rN,aAAA,kBAAAlqM,EAAApQ,OAAA3R,IAEA06D,IAAAk0J,GAEA7sM,EAAApQ,OAAA3F,EAAA1L,KAAAqmK,UAAAr1I,GACAhxB,KAAA2rN,aAAA,kBAAAlqM,EAAApQ,OAAA3F,IAEA0uD,IAAAm0J,GAEA9sM,EAAAd,OAAAjhB,EAAAM,KAAAqmK,UAAAr1I,GACAhxB,KAAA2rN,aAAA,kBAAAlqM,EAAAd,OAAAjhB,IAEA06D,IAAAo0J,GAEA/sM,EAAAd,OAAAjV,EAAA1L,KAAAqmK,UAAAr1I,GACAhxB,KAAA2rN,aAAA,kBAAAlqM,EAAAd,OAAAjV,IAIA1L,KAAA2rN,aAAA,4BAAAvxJ,EAAAn6D,SAAA,KAIAm6D,EAAAp6D,KAAAwrN,UAAAx6L,EAAAm6L,GAMA,OAFAnrN,KAAAysN,SAAAtB,GAEA1pM,GAWA0sM,kBAAA,SAAAn9L,GAEAhxB,KAAAorN,UAAAp6L,GACA,IAAAvyB,EAAAuB,KAAAqsN,WAAAr7L,EAAA,IACA+zJ,EAAA/kL,KAAAqtN,SAAAr8L,GAEAhxB,KAAA2rN,aAAA,kBAAAltN,GACAuB,KAAA2rN,aAAA,mBAAA5mC,GAGA,IADA,IAAAxkL,KACA/B,EAAA,EAAAA,EAAAumL,IAAAvmL,EAEA+B,EAAAgJ,KAAAvJ,KAAAqtN,SAAAr8L,IAIA,OAAAvyB,KAAAA,EAAA8B,MAAAA,IAWA0sN,UAAA,SAAAj8L,GAEA,IAAAm6L,EAAAnrN,KAAAorN,UAAAp6L,GACA+V,EAAA,IAAAyjF,EAAA/jF,MAEA,GAAA0kL,EAAA18L,KAAAggM,GAAAtD,EAAA18L,KAAAigM,EAAA,CAEA,IAAAl5M,EAAAxV,KAAA6sN,SAAA77L,GACA1T,EAAAtd,KAAA6sN,SAAA77L,GACAniB,EAAA7O,KAAA6sN,SAAA77L,GAEA+V,EAAAL,OAAAlxB,EAAA,IAAA8H,EAAA,IAAAzO,EAAA,KAEA7O,KAAA2rN,aAAA,gBAAA5kL,EAAAvxB,EAAA,KAAAuxB,EAAAzpB,EAAA,KAAAypB,EAAAl4B,QAEA,GAAAs8M,EAAA18L,KAAAkgM,GAAAxD,EAAA18L,KAAAmgM,EAAA,CAEA,IAAAp5M,EAAAxV,KAAAqmK,UAAAr1I,GACA1T,EAAAtd,KAAAqmK,UAAAr1I,GACAniB,EAAA7O,KAAAqmK,UAAAr1I,GAEA+V,EAAAL,OAAAlxB,EAAA8H,EAAAzO,GAEA7O,KAAA2rN,aAAA,gBAAA5kL,EAAAvxB,EAAA,KAAAuxB,EAAAzpB,EAAA,KAAAypB,EAAAl4B,QAIA7O,KAAA2rN,aAAA,8BAAAR,EAAAlrN,SAAA,KAKA,OADAD,KAAAysN,SAAAtB,GACApkL,GAWAqkL,UAAA,SAAAp6L,GAEA,IAAAm6L,KAQA,OANAA,EAAAmB,IAAAtsN,KAAA+nB,SACAojM,EAAA18L,GAAAzuB,KAAAqtN,SAAAr8L,GACAm6L,EAAAz3L,KAAA1zB,KAAA0rN,UAAA16L,GACAm6L,EAAA9wL,IAAA8wL,EAAAmB,IAAAnB,EAAAz3L,KACAy3L,EAAAmB,KAAA,EAEAnB,GAUAsB,SAAA,SAAAtB,GAEAnrN,KAAA+nB,SAAAojM,EAAA9wL,KAWAmxL,UAAA,SAAAx6L,EAAAm6L,GAEA,GAAAA,EAAAmB,KAAAnB,EAAA9wL,IAEA,OAAA,EAIAr6B,KAAA+nB,SAAAojM,EAAAmB,IAEA,IAEA,IAAAlyJ,EAAAp6D,KAAAorN,UAAAp6L,GAEA,OADAm6L,EAAAmB,KAAAlyJ,EAAA1mC,KACA0mC,EAAA3rC,GAEA,MAAAlf,GAGA,OADAvP,KAAA2rN,aAAA,2BAAA3rN,KAAA+nB,UACA,IAWA8jM,cAAA,WAEA7rN,KAAA+nB,UAAA,GAWA8kM,SAAA,SAAA77L,GAEA,IAAA3iB,EAAA2iB,EAAAsnI,SAAAt4J,KAAA+nB,UAAA,GAEA,OADA/nB,KAAA+nB,UAAA,EACA1Z,GAWAg4J,UAAA,SAAAr1I,GAEA,IAEA,IAAA3iB,EAAA2iB,EAAAwwI,WAAAxhK,KAAA+nB,UAAA,GAEA,OADA/nB,KAAA+nB,UAAA,EACA1Z,EAEA,MAAAkB,GAEAvP,KAAA2rN,aAAAp8M,EAAA,IAAAvP,KAAA+nB,SAAA,IAAAiJ,EAAA6uJ,cAaAgvC,QAAA,SAAA79L,GAEA,IAAA3iB,EAAA2iB,EAAAqtK,SAAAr+L,KAAA+nB,UAAA,GAEA,OADA/nB,KAAA+nB,UAAA,EACA1Z,GAWAygN,UAAA,SAAA99L,GAEA,IAAA3iB,EAAA2iB,EAAAwtK,SAAAx+L,KAAA+nB,UAAA,GAEA,OADA/nB,KAAA+nB,UAAA,EACA1Z,GAWAq9M,UAAA,SAAA16L,GAEA,IAAA3iB,EAAA2iB,EAAA81I,UAAA9mK,KAAA+nB,UAAA,GAEA,OADA/nB,KAAA+nB,UAAA,EACA1Z,GAWAg/M,SAAA,SAAAr8L,GAEA,IAAA3iB,EAAA2iB,EAAA41I,UAAA5mK,KAAA+nB,UAAA,GAEA,OADA/nB,KAAA+nB,UAAA,EACA1Z,GAYAg+M,WAAA,SAAAr7L,EAAA+9L,GAIA,IAFA,IAAApgN,EAAA,GAEAnQ,EAAA,EAAAA,EAAAuwN,EAAAvwN,IAAA,CAEA,IAAAqT,EAAA7R,KAAA6sN,SAAA77L,GACA,IAAAnf,EAEA,MAIAlD,GAAAmrC,OAAAkvE,aAAAn3G,GAIA,OAAAlD,GAYAg9M,aAAA,SAAArnI,GAEAtkF,KAAAmhE,OAEA5yD,QAAA5B,IAAA23E,MASA,IAAAinI,EAAA,MAGAF,EAAA,MAEAC,EAAA,MACAG,EAAA,EAEAkD,EAAA,GACAF,EAAA,GACAC,EAAA,GACAE,EAAA,GAGAhD,EAAA,MACAG,EAAA,MACAC,EAAA,IAwBAG,EAAA,MACAO,EAAA,MACAS,EAAA,MACAH,EAAA,MACAE,EAAA,MACAE,EAAA,MAEAE,EAAA,MAOAR,EAAA,MAEAC,EAAA,MACAJ,EAAA,MAKAC,EAAA,MACAW,EAAA,MAQAG,EAAA,MAIAD,EAAA,MAIAE,EAAA,MAgBAS,EAAA,MAGAG,EAAA,MACAC,EAAA,MACAH,EAAA,MACAC,EAAA,MAOArC,EAAA,MA8BAM,EAAA,MACAqB,EAAA,MAEAC,EAAA,MACAK,EAAA,MAGAH,EAAA,MACAE,EAAA,MAuEA,OAAAzjG,EAAAygG,YAGAhtN,EAAA,wCACA,mBACA,SAAAusH,EAAA66D,GA4pCA,OAhpCA76D,EAAAwkG,UAAA,SAAAvzG,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,IAIA+O,EAAAwkG,UAAApvN,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAAhP,OAAA57G,YAEAuO,YAAAq8G,EAAAwkG,UAEApzG,KAAA,SAAAl5F,EAAAy3F,EAAAC,EAAAC,GAEA,IAAAr/D,EAAAh7C,KAEAm7G,EAAA,IAAAqP,EAAAvO,WAAAjhE,EAAAygE,SACAN,EAAAW,QAAA9gE,EAAA78C,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAAl5F,EAAA,SAAAipF,GAEAwO,EAAAn/D,EAAA9pB,MAAAy6E,KAEAyO,EAAAC,IAIAnpF,MAAA,SAAAF,GA+eA,SAAAi+L,EAAAC,EAAAC,GAEA,IAAAC,EAAAF,EAAA5wN,OAAAotE,EAAA,IAAAr9B,aAAA+gL,EAAAD,EAAA7wN,QAKA,OAHAotE,EAAAl+D,IAAA0hN,GACAxjJ,EAAAl+D,IAAA2hN,EAAAC,GAEA1jJ,EAIA,SAAA2jJ,EAAAH,EAAAC,GAEA,IAAAC,EAAAF,EAAA5wN,OAAAotE,EAAA,IAAAz9B,WAAAmhL,EAAAD,EAAA7wN,QAKA,OAHAotE,EAAAl+D,IAAA0hN,GACAxjJ,EAAAl+D,IAAA2hN,EAAAC,GAEA1jJ,EAglBA,SAAA4jJ,EAAAt+L,GAOA,IALA,IAAAu+L,EAAA,GACAC,EAAA,IAAA/hL,WAAAzc,GACAxyB,EAAA,EACA6U,EAAAm8M,EAAAlxN,OAEA+U,KAEAk8M,GAAAz1K,OAAAkvE,aAAAwmG,EAAAhxN,MAIA,OAAA+wN,EAKA,IAAAptM,EAAAqoG,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,EAAA,EAAA,MAAA3yB,MAAA,MAEA,OAAA,IAAA8jB,EAAA,GAAA7Y,QAAA,OAhmBA,SAAAimN,GA0EA,SAAAE,EAAAC,GAEA,IACAlxN,EAqBA+zB,EAAAvoB,EAAAmU,EAAAwxM,EAAAC,EAtBAC,EAAA,oBAAApiL,WAAAA,WAAA9qB,MAEAmtM,KACAC,KACAC,EAAA,mEACA38M,EAAA28M,EAAA1xN,OAEA,IAAAE,EAAA,EAAAA,EAAA6U,EAAA7U,IAEAsxN,EAAAtxN,GAAAwxN,EAAAxxN,GAIA,IAAAA,EAAA,EAAAA,EAAA6U,IAAA7U,EAEAuxN,EAAAC,EAAAtxG,WAAAlgH,IAAAA,EAIAuxN,EAAA,IAAArxG,WAAA,IAAA,GACAqxG,EAAA,IAAArxG,WAAA,IAAA,GAGA,IAAArrG,EAAAq8M,EAAApxN,OAEA,GAAA+U,EAAA,EAAA,EAEA,MAAA,IAAArF,MAAA,kDAIA2hN,EAAA,MAAAD,EAAAr8M,EAAA,GAAA,EAAA,MAAAq8M,EAAAr8M,EAAA,GAAA,EAAA,EACAu8M,EAAA,IAAAC,EAAA,EAAAx8M,EAAA,EAAAs8M,GACA3lN,EAAA2lN,EAAA,EAAAt8M,EAAA,EAAAA,EAEA,IAAA48M,EAAA,EAEA,IAAAzxN,EAAA,EAAA+zB,EAAA,EAAA/zB,EAAAwL,EAAAxL,GAAA,EAAA+zB,GAAA,EAEApU,EAAA4xM,EAAAL,EAAAhxG,WAAAlgH,KAAA,GAAAuxN,EAAAL,EAAAhxG,WAAAlgH,EAAA,KAAA,GAAAuxN,EAAAL,EAAAhxG,WAAAlgH,EAAA,KAAA,EAAAuxN,EAAAL,EAAAhxG,WAAAlgH,EAAA,IACAoxN,EAAAK,MAAA,SAAA9xM,IAAA,GACAyxM,EAAAK,MAAA,MAAA9xM,IAAA,EACAyxM,EAAAK,KAAA,IAAA9xM,EAiBA,OAbA,IAAAwxM,GAEAxxM,EAAA4xM,EAAAL,EAAAhxG,WAAAlgH,KAAA,EAAAuxN,EAAAL,EAAAhxG,WAAAlgH,EAAA,KAAA,EACAoxN,EAAAK,KAAA,IAAA9xM,GAEA,IAAAwxM,IAEAxxM,EAAA4xM,EAAAL,EAAAhxG,WAAAlgH,KAAA,GAAAuxN,EAAAL,EAAAhxG,WAAAlgH,EAAA,KAAA,EAAAuxN,EAAAL,EAAAhxG,WAAAlgH,EAAA,KAAA,EACAoxN,EAAAK,KAAA9xM,GAAA,EAAA,IACAyxM,EAAAK,KAAA,IAAA9xM,GAIAyxM,EAIA,SAAAM,EAAAC,EAAA/lD,GAEA,IAAAgmD,EAAA,EAcA,GAZA,WAAAv8G,EAAAv/D,WAAA+7K,YAEAD,EAAA,EAEA,WAAAv8G,EAAAv/D,WAAA+7K,cAEAD,EAAA,GAMA,WAAAD,EAAA77K,WAAAj0B,QAAA+pJ,EAAA,CAEA,IAAAkmD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEA,GAAA,YAAAT,EAAA77K,WAAAprC,KAEA,IAAA2nN,EAAA,IAAAxiL,kBAEA,GAAA,UAAA8hL,EAAA77K,WAAAprC,KAEA,IAAA2nN,EAAA,IAAA5iL,WAgBAqiL,EAAAH,EAAA,SAEAI,EAAAd,EAAAa,GAEAE,EAAAD,EAAA,GACA,IAAA,IAAA/xN,EAAA,EAAAA,EAAA4xN,EAAA,EAAA5xN,IAEAgyN,GAAAD,EAAA/xN,IAAAA,EAAA4xN,EAIAM,GAAAF,EAAA,GAAAJ,EAKAQ,EAHAF,GADAA,EAAA,EAAA,EAAA,EAAAA,EAAA,EAAA,GAGAC,MAEApnN,KAAAqnN,GAIAH,EAAA,EAAAL,EAEA,IAAA,IAAA5xN,EAAA,EAAAA,EAAAgyN,EAAAhyN,IAAA,CAIA,IAFA,IAAAsyN,EAAAP,EAAA/xN,EAAA4xN,EAAAK,GAEAl+L,EAAA,EAAAA,EAAA69L,EAAA,EAAA79L,IAGAu+L,GAAAP,EAAA/xN,EAAA4xN,EAAAK,EAAAl+L,IAAA,EAAAA,EAIAq+L,GAAAE,EACAH,EAAApnN,KAAAqnN,GAIA,IAAA,IAAApyN,EAAA,EAAAA,EAAAmyN,EAAAryN,OAAA,EAAAE,IAAA,CAEA,IAAAwgM,EAAA,IAAA3Z,EAAA4Z,QAAAsxB,EAAAxmN,MAAA4mN,EAAAnyN,GAAAmyN,EAAAnyN,EAAA,KAAAuyN,QAAA,EAAAC,QAAA,IAEAlkD,GADAA,EAAAkyB,EAAAG,cACAhsI,OAEA,YAAAg9J,EAAA77K,WAAAprC,MAEA4jK,EAAA,IAAAz+H,aAAAy+H,GACA+jD,EAAA5B,EAAA4B,EAAA/jD,IAEA,UAAAqjD,EAAA77K,WAAAprC,OAEA4jK,EAAA,IAAA7+H,WAAA6+H,GACA+jD,EAAAxB,EAAAwB,EAAA/jD,WAMAqjD,EAAA,SAEA,UAAAA,EAAA77K,WAAAprC,MAEA,WAAAinN,EAAA77K,WAAAj0B,SAEAwwM,EAAAA,EAAAlyJ,OAAA,SAAAsyJ,EAAA7zK,GAEA,GAAAA,EAAA,GAAA,EAAA,OAAA,SAQA,CAEA,GAAA,WAAA+yK,EAAA77K,WAAAj0B,QAAA+pJ,EAWA,GAAA+lD,EAAA,SAEA,IAAArjD,EAAAqjD,EAAA,SAAA9xN,MAAA,OAAAsgE,OAAA,SAAAsyJ,GAEA,GAAA,KAAAA,EAAA,OAAAA,SAMA,IAAAnkD,EAAA,IAAA7+H,WAAA,GAAAklB,WArBA,CAEA,IAAA25G,EAAA2iD,EAAAU,EAAA,UAKArjD,EAAAA,EAAA/iK,MAAAqmN,GAAAj9J,OAuBA,UAHAg9J,EAAA,SAGA,YAAAA,EAAA77K,WAAAprC,KAEA,IAAA2nN,EAAA,IAAAxiL,aAAAy+H,QAEA,GAAA,UAAAqjD,EAAA77K,WAAAprC,KAEA,IAAA2nN,EAAA,IAAA5iL,WAAA6+H,QAEA,GAAA,UAAAqjD,EAAA77K,WAAAprC,KAAA,CAEA,IAAA2nN,EAAA,IAAA5iL,WAAA6+H,GAEA,WAAAqjD,EAAA77K,WAAAj0B,SAEAwwM,EAAAA,EAAAlyJ,OAAA,SAAAsyJ,EAAA7zK,GAEA,GAAAA,EAAA,GAAA,EAAA,OAAA,MAUA,OAAAyzK,EAMA,IAAAK,EAAA,KAEA,GAAAr3I,OAAAglC,UAEA,IAEAqyG,GAAA,IAAAryG,WAAAC,gBAAAywG,EAAA,YAEA,MAAAhgN,GAEA2hN,EAAA,SAIA,CAAA,IAAAr3I,OAAAs3I,cAqBA,MAAA,IAAAnjN,MAAA,4BAnBA,IAKA,IAHAkjN,EAAA,IAAAC,cAAA,qBACAC,OAAA,GAEAF,EAAAG,UAEA,MAAA,IAAArjN,MAAAkjN,EAAAI,WAAAC,OAAAL,EAAAI,WAAAE,SAIA,MAAAjiN,GAEA2hN,EAAA,MAWA,IAEAr9G,EAtWA,SAAA49G,EAAAniD,GAGA,IAAAzwK,KAEA,GAAA,IAAAywK,EAAAU,UAIA,GAAAV,EAAAh7H,YAEAg7H,EAAAh7H,WAAAh2C,OAAA,EAAA,CAEAO,EAAA,cAEA,IAAA,IAAA0zB,EAAA,EAAAA,EAAA+8I,EAAAh7H,WAAAh2C,OAAAi0B,IAAA,CAEA,IAAA/gB,EAAA89J,EAAAh7H,WAAAo9K,KAAAn/L,GACA1zB,EAAA,WAAA2S,EAAAiqH,UAAAjqH,EAAA4lJ,UAAA57F,cAQA,IAAA8zG,EAAAU,WAEAnxK,EAAAywK,EAAAlY,UAAA57F,QAKA,GAAA8zG,EAAAqiD,gBAEA,IAAA,IAAAnzN,EAAA,EAAAA,EAAA8wK,EAAA3Y,WAAAr4J,OAAAE,IAAA,CAEA,IAAAkzN,EAAApiD,EAAA3Y,WAAA+6D,KAAAlzN,GACAi9H,EAAAi2F,EAAAj2F,SAEA,QAAA,IAAA58H,EAAA48H,GAAA,CAEA,IAAAt9G,EAAAszM,EAAAC,GAEA,KAAAvzM,IAAAtf,EAAA48H,GAAAt9G,OAEA,CAEA,QAAA,IAAAtf,EAAA48H,GAAAlyH,KAAA,CAEA,IAAAqoN,EAAA/yN,EAAA48H,GACA58H,EAAA48H,IAAAm2F,GAIA,IAAAzzM,EAAAszM,EAAAC,GAEA,KAAAvzM,GAAAtf,EAAA48H,GAAAlyH,KAAA4U,IAQA,OAAAtf,EAqSA4yN,CAFAP,EAAA37D,iBAGAliI,KACAqb,KACAoI,KAEA,GAAA+8D,EAAAg+G,SAAA,CAUA,IARA,IAAAC,EAAAj+G,EAAAg+G,SAAAE,MACA3nD,EAAAv2D,EAAAv/D,WAAA3zC,eAAA,cAIAqxN,GAAA,YAAA,SAAA,SAAA,SACAC,EAAA,EAAAC,EAAAF,EAAA1zN,OAEA2zN,EAAAC,GAAA,CAEA,IAAAC,EAAAL,EAAAE,EAAAC,IAIA,GAAAE,GAAAA,EAAAC,UAAA,CAIA,GAAA,mBAAAvyN,OAAAD,UAAAK,SAAAW,KAAAuxN,EAAAC,WAEA,IAAAxC,EAAAuC,EAAAC,eAIA,IAAAxC,GAAAuC,EAAAC,WAMA,IAFA,IAAAC,EAAA,EAAAC,EAAA1C,EAAAtxN,OAEA+zN,EAAAC,GAGA,UAAA1C,EAAAyC,IAAAzC,EAAAyC,GAAA,SAAA/zN,OAAA,IAEAsxN,EAAAyC,GAAA1mH,KAAAukH,EAAAN,EAAAyC,GAAAjoD,IAIAioD,IAIA,OAAAL,EAAAC,IAGA,IAAA,YAEA,IAAAM,EAAAzqL,SAAAgqL,EAAAx9K,WAAAk+K,gBACAC,EAAAN,EAAA79K,WAAA+gJ,QAEA,GAAAk9B,EAAA,EAEA,IAAA,IAAA/zN,EAAA,EAAA6U,EAAAu8M,EAAAtxN,OAAAE,EAAA6U,EAAA7U,IAEA,GAAAi0N,IAAA7C,EAAApxN,GAAA81C,WAAAo+K,KAAA,CAEA,IAAA7qL,EAAA+nL,EAAApxN,GAAA81C,WAAAq+K,oBACAjkL,EAAA,IAAAL,aAAAkkL,EAAA1qL,IACAr6B,IAAAoiN,EAAApxN,GAAAmtG,KAAA,GAQA,MAGA,IAAA,SAEA,IAAA4mH,EAAAzqL,SAAAgqL,EAAAx9K,WAAAk+K,gBAEA,GAAAD,EAAA,EAAA,CAEA,IAAA1qL,EAAAsqL,EAAAC,UAAA99K,WAAAq+K,oBACAt/L,EAAA,IAAAgb,aAAAkkL,EAAA1qL,IACAr6B,IAAA2kN,EAAAC,UAAAzmH,KAAA,GAIA,MAGA,IAAA,SAEA,IAAAinH,EAAA9qL,SAAAgqL,EAAAx9K,WAAAu+K,gBAEA,GAAAD,EAAA,EAAA,CAEA,IAAAE,EAAA,IAAA7kL,WAAAkkL,EAAAC,UAAA,GAAAzmH,KAAArtG,QACA+S,EAAA,IAAA48B,WAAAkkL,EAAAC,UAAA,GAAAzmH,KAAArtG,QACAw0N,EAAAtlN,IAAA2kN,EAAAC,UAAA,GAAAzmH,KAAA,GACAt6F,EAAA7D,IAAA2kN,EAAAC,UAAA,GAAAzmH,KAAA,GAEA,IAAAj4E,EAAAk/L,EAAAE,EAAAx0N,OACAw4C,EAAA,IAAA3I,YAAA,EAAAza,EAAA,EAAAk/L,GAIA,IAFA,IAAAG,EAAA,EAEAv0N,EAAA,EAAA6U,EAAAu/M,EAAAp0N,EAAA6U,EAAA7U,IAAA,CAIA,IAFA,IAAAw0N,KAEArkN,EAAA,EAAA03I,EAAAh1I,EAAA7S,GAAAy0N,EAAA,EAAAtkN,EAAA03I,EAAA4sE,EAAAtkN,IAEAqkN,EAAAzpN,KAAAupN,EAAAnkN,IAEAnQ,EAAA,IAAAy0N,EAAA5hN,EAAA7S,EAAA,IAIA,IAAA,IAAA+zB,EAAA,EAAA8zH,EAAAh1I,EAAA7S,GAAAy0N,EAAA,EAAA1gM,EAAA8zH,EAAA4sE,EAAA,EAAA1gM,IAEAA,EAAA,GAEAukB,EAAAi8K,KAAAC,EAAAzgM,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,KAIAukB,EAAAi8K,KAAAC,EAAAzgM,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,IAIA/zB,EAAA,IAAAy0N,EAAA5hN,EAAA7S,EAAA,KAQA,MAGA,IAAA,QAEA,IAAA00N,EAAAprL,SAAAgqL,EAAAx9K,WAAA6+K,eAEA,GAAAD,EAAA,EAAA,CAEA,IAAAJ,EAAA,IAAA7kL,WAAAkkL,EAAAC,UAAA,GAAAzmH,KAAArtG,QACA+S,EAAA,IAAA48B,WAAAkkL,EAAAC,UAAA,GAAAzmH,KAAArtG,QACAw0N,EAAAtlN,IAAA2kN,EAAAC,UAAA,GAAAzmH,KAAA,GACAt6F,EAAA7D,IAAA2kN,EAAAC,UAAA,GAAAzmH,KAAA,GAEA,IAAAj4E,EAAAw/L,EAAAJ,EAAAx0N,OACAw4C,EAAA,IAAA3I,YAAA,EAAAza,EAAA,EAAAw/L,GAIA,IAHA,IAAAH,EAAA,EAAAK,EAAA,EACA50N,EAAA,EAAA6U,EAAA6/M,EAAAD,EAAA,EAEAz0N,EAAA6U,GAAA,CAKA,IAHA,IAAAggN,KACA1kN,EAAA,EAAA03I,EAAAh1I,EAAA7S,GAEAmQ,EAAA03I,EAAA4sE,GAEAI,EAAA9pN,KAAAupN,EAAAM,MACAzkN,IAMA,IAFA,IAAA4jB,EAAA,EAEAA,EAAA8zH,EAAA4sE,EAAA,GAEAn8K,EAAAi8K,KAAAM,EAAA,GACAv8K,EAAAi8K,KAAAM,EAAA9gM,GACAukB,EAAAi8K,KAAAM,EAAA9gM,EAAA,GACAA,IAKA0gM,EAAA5hN,IADA7S,EACA,MAeAyzN,IAIA,IAAA1hM,EAAA,IAAAi6F,EAAAn2E,eAUA,OATA9jB,EAAAqkB,SAAA,IAAA41E,EAAAv9E,gBAAA6J,EAAA,IACAvmB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAA5Z,EAAA,IAEAqb,EAAApwC,SAAA+0B,EAAA/0B,QAEAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAv9E,gBAAAyB,EAAA,IAIAne,EAIA,MAAA,IAAAviB,MAAA,4BA4BAslN,CAAAhE,EAAAt+L,IAEA7O,EAAA,GAAAoxM,SAAA,SAvmCA,SAAAviM,GAGA,IAWA06C,EAXA50B,KAGAxB,KAGA3G,KAGAD,KAKA8kL,EAAA,cAGAC,EAAA,yEAIAC,EAAA,qBAGAC,EAAA,WAGAC,EAAA,aAGAC,EAAA,oBAGAC,EAAA,uBAGAC,EAAA,sBAGAC,EAAA,+BAGAC,EAAA,6BAEAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EAEA94J,EAAA1qC,EAAA3yB,MAAA,MAEA,IAAA,IAAAG,KAAAk9D,EAAA,CAEA,IAAA3hC,EAAA2hC,EAAAl9D,GAAAg9D,OAEA,GAAA,IAAAzhC,EAAAzwB,QAAA,WAAA,CAEA,IAAAmrN,EAAA16L,EAAA17B,MAAA,KAAA,GAEA,GAAA,aAAAo2N,EAAA,MAAA,IAAAzmN,MAAA,6BAAAymN,QAEA,GAAAP,EAGA,KAAA,QAAAxoJ,EAAA+nJ,EAAA7rL,KAAA7N,KAEA,OAAAy5L,EAAA5rL,KAAA7N,IAFA,CAIA,IAAAr6B,EAAAioC,WAAA+jC,EAAA,IACAhgE,EAAAi8B,WAAA+jC,EAAA,IACA1+D,EAAA26B,WAAA+jC,EAAA,IACAp2B,EAAA/rC,KAAA7J,EAAAgM,EAAAsB,QAIA,GAAAmnN,GAEA,GAAA,QAAAzoJ,EAAAgoJ,EAAA9rL,KAAA7N,IAAA,CAGA,IAAAgwL,EAAAjiL,SAAA4jC,EAAA,IACAgpJ,EAAAhpJ,EAAA,GAAArtE,MAAA,OAEA,GAAA0rN,GAAA,EAMA,IAJA,IAAAztL,EAAAwL,SAAA4sL,EAAA,IAEA/3K,EAAA,EAEApqB,EAAA,EAAAA,EAAAw3L,EAAA,IAAAx3L,EAEAgK,EAAAuL,SAAA4sL,EAAA/3K,IACAngB,EAAAsL,SAAA4sL,EAAA/3K,EAAA,IACA7F,EAAAvtC,KAAA+yB,EAAAC,EAAAC,GACAmgB,UAQA,GAAAy3K,GAEA,GAAA,QAAA1oJ,EAAAgoJ,EAAA9rL,KAAA7N,IAAA,CAGA,IAAAgwL,EAAAjiL,SAAA4jC,EAAA,IACAgpJ,EAAAhpJ,EAAA,GAAArtE,MAAA,OAEA,GAAA0rN,GAAA,EAIA,IAFA,IAAAxtL,EAAAC,EAEAjK,EAAA,EAAAA,EAAAw3L,EAAA,EAAAx3L,IAEAA,EAAA,GAAA,GAEA+J,EAAAwL,SAAA4sL,EAAAniM,IACAgK,EAAAuL,SAAA4sL,EAAAniM,EAAA,IACAiK,EAAAsL,SAAA4sL,EAAAniM,EAAA,IACAukB,EAAAvtC,KAAA+yB,EAAAC,EAAAC,KAIAF,EAAAwL,SAAA4sL,EAAAniM,IACAgK,EAAAuL,SAAA4sL,EAAAniM,EAAA,IACAiK,EAAAsL,SAAA4sL,EAAAniM,EAAA,IACAukB,EAAAvtC,KAAA+yB,EAAAC,EAAAC,UAUA,GAAA63L,GAAAC,EAEA,GAAAC,EAIA,KAAA,QAAA7oJ,EAAA+nJ,EAAA7rL,KAAA7N,KAEA,OAAAy5L,EAAA5rL,KAAA7N,IAFA,CAIA,IAAAvkB,EAAAmyB,WAAA+jC,EAAA,IACApuD,EAAAqqB,WAAA+jC,EAAA,IACA78D,EAAA84B,WAAA+jC,EAAA,IACA/8B,EAAAplC,KAAAiM,EAAA8H,EAAAzO,QAIA,GAAA2lN,EAIA,KAAA,QAAA9oJ,EAAA+nJ,EAAA7rL,KAAA7N,KAEA,OAAAy5L,EAAA5rL,KAAA7N,IAFA,CAIA,IAAA49H,EAAAhwH,WAAA+jC,EAAA,IACAksF,EAAAjwH,WAAA+jC,EAAA,IACAmsF,EAAAlwH,WAAA+jC,EAAA,IACAh9B,EAAAnlC,KAAAouJ,EAAAC,EAAAC,GAQA,OAAA+7D,EAAAhsL,KAAA7N,IAEAo6L,GAAA,EACAD,GAAA,EACAE,GAAA,GAEA,OAAAT,EAAA/rL,KAAA7N,IAEAo6L,GAAA,EACAD,GAAA,EACAE,GAAA,GAEA,OAAAP,EAAAjsL,KAAA7N,IAEAo6L,GAAA,EACAD,GAAA,EACAE,GAAA,GAEA,OAAAN,EAAAlsL,KAAA7N,IAEAs6L,GAAA,EACAH,GAAA,EACAC,GAAA,EACAC,GAAA,GAEA,OAAAL,EAAAnsL,KAAA7N,IAEAu6L,GAAA,EACAJ,GAAA,EACAC,GAAA,EACAC,GAAA,GAEA,OAAAJ,EAAApsL,KAAA7N,IAEAw6L,GAAA,EACAC,GAAA,EACAN,GAAA,EACAC,GAAA,EACAC,GAAA,GAEA,OAAAH,EAAArsL,KAAA7N,KAEAy6L,GAAA,EACAD,GAAA,EACAL,GAAA,EACAC,GAAA,EACAC,GAAA,GAMA,IAAA7jM,EAAA,IAAAi6F,EAAAn2E,eACA9jB,EAAAqkB,SAAAkC,GACAvmB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAAkH,EAAA,IAEA5G,EAAApwC,SAAAg3C,EAAAh3C,QAEAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAAM,EAAA,IAIA,GAAAC,EAAArwC,SAAAw4C,EAAAx4C,OAIAqwC,EAAArwC,SAAAg3C,EAAAh3C,QAEAiyB,EAAAukB,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAAO,EAAA,QAIA,CAKA,IAAAgmL,GADApkM,EAAAA,EAAA+mB,gBACAhD,WAAAvsB,SAAAlM,MAAA,EAEA,GAAA8yB,EAAArwC,SAAA,EAAAq2N,EAAA,CAIA,IAFA,IAAAC,KAEAp2N,EAAA,EAAAA,EAAAm2N,EAAAn2N,IAAA,CAEA,IAAAgX,EAAAm5B,EAAA,EAAAnwC,EAAA,GACA8e,EAAAqxB,EAAA,EAAAnwC,EAAA,GACAqQ,EAAA8/B,EAAA,EAAAnwC,EAAA,GAEAo2N,EAAArrN,KAAAiM,EAAA8H,EAAAzO,GACA+lN,EAAArrN,KAAAiM,EAAA8H,EAAAzO,GACA+lN,EAAArrN,KAAAiM,EAAA8H,EAAAzO,GAIA0hB,EAAAukB,aAAA,QAAA,IAAA01E,EAAAp8E,uBAAAwmL,EAAA,KAMA,OAAArkM,EAg1BA0tL,CAAAqR,EAAAt+L,IA50BA,SAAAA,GAEA,IAAAnV,EAAAg5M,EAAAr2N,EAAA+zN,EAAA5jN,EAiCAw4D,EAAAptC,EAhCAo5B,EAAA,IAAA1lB,WAAAzc,GACA8jM,EAAA,IAAApkH,SAAA1/E,GAGAqC,KACAqb,KACAoI,KAGAi+K,KACAx0N,EAAA,EAEA,SAAAy0N,EAAA7hK,EAAAl5B,GAKA,IAHA,IAAA15B,EAAA05B,EACApoB,EAAAshD,EAAA5yD,GACAoO,KACA,KAAAkD,GAEAlD,EAAApF,KAAAuwC,OAAAkvE,aAAAn3G,IAEAA,EAAAshD,IADA5yD,GAKA,OAAA05B,MAAAA,EACAI,IAAA95B,EACA65D,KAAA75D,EAAA,EACA00N,aAAAtmN,EAAAi2C,KAAA,KAMA,OAAA,CAMA,GAHAuiB,EAAA6tJ,EAAA7hK,EAAA5yD,GAGA,KAFAw5B,EAAAotC,EAAA8tJ,cAEA3rN,QAAA,WAAA,CAEA,IAAAmrN,EAAA16L,EAAA17B,MAAA,KAAA,GAEA,GAAA,aAAAo2N,EAAA,MAAA,IAAAzmN,MAAA,6BAAAymN,QAEA,GAAA,IAAA16L,EAAAzwB,QAAA,UAAA,CAYA,IAVAyrN,EAAAxrN,KAAAwwB,GAEAw4L,EAAAzqL,SAAA/N,EAAA17B,MAAA,KAAA,GAAA,IAGAwd,EAAA,EAAA02M,EAAA,EAEAl/L,EAAA,IAAAgb,aAAA,EAAAkkL,GAEAsC,EAAA1tJ,EAAA/M,KACA57D,EAAA,EAAAA,EAAA+zN,EAAA/zN,IAEA60B,EAAA,EAAA70B,GAAAs2N,EAAAtzD,WAAAqzD,GAAA,GACAxhM,EAAA,EAAA70B,EAAA,GAAAs2N,EAAAtzD,WAAAqzD,EAAA,GAAA,GACAxhM,EAAA,EAAA70B,EAAA,GAAAs2N,EAAAtzD,WAAAqzD,EAAA,GAAA,GACAA,GAAA,GAIA1tJ,EAAA/M,KAAA+M,EAAA/M,KAAAv+C,EAAA,OAEA,GAAA,IAAAke,EAAAzwB,QAAA,mBAAA,CAEA,IAAAspN,EAAA9qL,SAAA/N,EAAA17B,MAAA,KAAA,GAAA,IACAq1B,EAAAoU,SAAA/N,EAAA17B,MAAA,KAAA,GAAA,IAEAwd,EAAA,EAAA6X,EAEAojB,EAAA,IAAA3I,YAAA,EAAAza,EAAA,EAAAk/L,GACA,IAAAG,EAAA,EAGA,IADA8B,EAAA1tJ,EAAA/M,KACA57D,EAAA,EAAAA,EAAAo0N,EAAAp0N,IAAA,CAGA,IAAA02N,EAAAJ,EAAAz2B,SAAAw2B,GAAA,GACA7B,KAEA,IADA6B,GAAA,EACAlmN,EAAA,EAAAA,EAAAumN,EAAAvmN,IAEAqkN,EAAAzpN,KAAAurN,EAAAz2B,SAAAw2B,GAAA,IACAA,GAAA,EAKA,IAAA,IAAAtiM,EAAA,EAAAA,EAAA2iM,EAAA,EAAA3iM,IAEAA,EAAA,GAEAukB,EAAAi8K,KAAAC,EAAAzgM,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,KAKAukB,EAAAi8K,KAAAC,EAAAzgM,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,IAQA40C,EAAA/M,KAAA+M,EAAA/M,KAAAv+C,EAAA,OAEA,GAAA,IAAAke,EAAAzwB,QAAA,YAAA,CAEA,IAAAspN,EAAA9qL,SAAA/N,EAAA17B,MAAA,KAAA,GAAA,IACAq1B,EAAAoU,SAAA/N,EAAA17B,MAAA,KAAA,GAAA,IAEAwd,EAAA,EAAA6X,EAEAojB,EAAA,IAAA3I,YAAA,EAAAza,EAAA,EAAAk/L,GACA,IAAAG,EAAA,EAGA,IADA8B,EAAA1tJ,EAAA/M,KACA57D,EAAA,EAAAA,EAAAo0N,EAAAp0N,IAAA,CAGA,IAAA02N,EAAAJ,EAAAz2B,SAAAw2B,GAAA,GACA7B,KAEA,IADA6B,GAAA,EACAlmN,EAAA,EAAAA,EAAAumN,EAAAvmN,IAEAqkN,EAAAzpN,KAAAurN,EAAAz2B,SAAAw2B,GAAA,IACAA,GAAA,EAKA,IAAA,IAAAtiM,EAAA,EAAAA,EAAA2iM,EAAA,EAAA3iM,IAEAukB,EAAAi8K,KAAAC,EAAA,GACAl8K,EAAAi8K,KAAAC,EAAAzgM,GACAukB,EAAAi8K,KAAAC,EAAAzgM,EAAA,GAMA40C,EAAA/M,KAAA+M,EAAA/M,KAAAv+C,EAAA,OAEA,GAAA,IAAAke,EAAAzwB,QAAA,cAAA,CAYA,IAVAipN,EAAAzqL,SAAA/N,EAAA17B,MAAA,KAAA,GAAA,IAGA8oE,EAAA6tJ,EAAA7hK,EAAAgU,EAAA/M,MAGAv+C,EAAA,EAAA02M,EAAA,EAEA7jL,EAAA,IAAAL,aAAA,EAAAkkL,GACAsC,EAAA1tJ,EAAA/M,KACA57D,EAAA,EAAAA,EAAA+zN,EAAA/zN,IAEAkwC,EAAA,EAAAlwC,GAAAs2N,EAAAtzD,WAAAqzD,GAAA,GACAnmL,EAAA,EAAAlwC,EAAA,GAAAs2N,EAAAtzD,WAAAqzD,EAAA,GAAA,GACAnmL,EAAA,EAAAlwC,EAAA,GAAAs2N,EAAAtzD,WAAAqzD,EAAA,GAAA,GACAA,GAAA,GAKA1tJ,EAAA/M,KAAA+M,EAAA/M,KAAAv+C,EAOA,IAFAtb,EAAA4mE,EAAA/M,OAEAjH,EAAA0sH,WAEA,MAMA,IAAAtvJ,EAAA,IAAAi6F,EAAAn2E,eACA9jB,EAAAqkB,SAAA,IAAA41E,EAAAv9E,gBAAA6J,EAAA,IACAvmB,EAAAukB,aAAA,WAAA,IAAA01E,EAAAv9E,gBAAA5Z,EAAA,IAEAqb,EAAApwC,SAAA+0B,EAAA/0B,QAEAiyB,EAAAukB,aAAA,SAAA,IAAA01E,EAAAv9E,gBAAAyB,EAAA,IAIA,OAAAne,EAooBAuuL,CAAA9tL,MAQAw5F,EAAAwkG,YAGA/wN,EAAA,sCACA,mBACA,SAAAusH,GAKA,IAEA2qG,EAUAC,EAuCAC,EAcAC,EAuHAC,EAm7CA,OA3mDA/qG,EAAAgrG,SAEAL,EAAA,SAAA36C,EAAAi7C,GAEA,KAAAj7C,aAAAi7C,GAEA,MAAA,IAAAp1N,UAAA,sCAMA+0N,EAAA,WAEA,SAAA9nN,EAAAlN,EAAA28L,GAEA,IAAA,IAAAv+L,EAAA,EAAAA,EAAAu+L,EAAAz+L,OAAAE,IAAA,CAEA,IAAAk3N,EAAA34B,EAAAv+L,GACAk3N,EAAA/pM,WAAA+pM,EAAA/pM,aAAA,EACA+pM,EAAAhqM,cAAA,EACA,UAAAgqM,IAAAA,EAAAC,UAAA,GACA91N,OAAAC,eAAAM,EAAAs1N,EAAA3kM,IAAA2kM,IAMA,OAAA,SAAAD,EAAAG,EAAAC,GAIA,OAFAD,GAAAtoN,EAAAmoN,EAAA71N,UAAAg2N,GACAC,GAAAvoN,EAAAmoN,EAAAI,GACAJ,GApBA,GAuCAJ,EAAA,SAAAA,IAEAF,EAAAn1N,KAAAq1N,GAEAr1N,KAAA81N,UAAA,GACA91N,KAAA85G,SAAA,GACA95G,KAAA+1N,WAAA,KACA/1N,KAAAg2N,QAAA,EACAh2N,KAAAi2N,aAAA,EACAj2N,KAAAk2N,aACAl2N,KAAAm2N,UAAA,MAIAb,EAAA,WAEA,SAAAA,EAAAc,GAEAjB,EAAAn1N,KAAAs1N,GAEAt1N,KAAAuxG,IAAA,GACAvxG,KAAAvB,KAAA,aACAuB,KAAA1B,OAAA,EACA0B,KAAA05G,aACA15G,KAAAq2N,SAAAD,OACAp3N,IAAAgB,KAAAq2N,SAAAC,SAEAt2N,KAAAq2N,SAAAC,QAAA,QAGAt3N,IAAAgB,KAAAq2N,SAAAE,SAEAv2N,KAAAq2N,SAAAE,QAAA,QAGAv3N,IAAAgB,KAAAq2N,SAAAG,SAEAx2N,KAAAq2N,SAAAG,QAAA,GA4FA,OAtFApB,EAAAE,IACAvkM,IAAA,OACAzxB,MAAA,SAAAm3N,GAEA,IAAA,IAAAj4N,EAAA,EAAAA,EAAAi4N,EAAAn4N,OAAAE,IAEAwB,KAAA05G,UAAAnwG,KAAAvJ,KAAA02N,aAAAD,EAAAj4N,KAGAwB,KAAA1B,OAAA0B,KAAA05G,UAAA,GAAA9hE,KAAA53C,KAAA05G,UAAA,GAAA9hE,KAAAt5C,OAAA,GAAAi0D,QAIAxhC,IAAA,QACAzxB,MAAA,WAEA,OAAAO,OAAAM,UAAAH,SAIA+wB,IAAA,eACAzxB,MAAA,SAAA+1N,GAEA,IAAAsB,KASA,OARAA,EAAAl4N,KAAA42N,EAAAv7G,SACA68G,EAAAprM,OAAA,GACAorM,EAAA/+K,KAAA53C,KAAA42N,iBAAAvB,GACAsB,EAAAvoN,KAAA,WAEA,OAAAvO,OAAAM,UAAAH,OAGA22N,KAIA5lM,IAAA,mBACAzxB,MAAA,SAAA+1N,GAGA,IADA,IAAAz9K,KACAp5C,EAAA,EAAAA,EAAA62N,EAAAa,UAAA53N,OAAAE,IAAA,CAEA,IAAAqzK,KACAA,EAAAt/G,KAAA8iK,EAAAa,UAAA13N,GAAA+zD,KAAAvyD,KAAAuxG,IACA8jH,EAAAa,UAAA13N,GAAA+lK,KAAAvkK,KAAAq2N,SAAAC,SAEAzkD,EAAAtN,IAAA8wD,EAAAa,UAAA13N,GAAA+lK,KAGA8wD,EAAAa,UAAA13N,GAAAq4N,KAAA72N,KAAAq2N,SAAAE,SAEA1kD,EAAAglD,IAAAxB,EAAAa,UAAA13N,GAAAq4N,KAGAxB,EAAAa,UAAA13N,GAAAs4N,KAAA92N,KAAAq2N,SAAAG,SAEA3kD,EAAAilD,IAAAzB,EAAAa,UAAA13N,GAAAs4N,KAGAzB,EAAAa,UAAA13N,GAAAif,SAEAo0J,EAAAp0J,OAAA43M,EAAAa,UAAA13N,GAAAif,OACAzd,KAAAq2N,SAAAC,SAEAzkD,EAAAtN,KAAA,IAAA/5C,EAAApzG,SAAAiD,sBAAAw3J,EAAAp0J,SAGAzd,KAAAq2N,SAAAE,SAEA1kD,EAAAglD,KAAA,IAAArsG,EAAAz9G,YAAA0H,sBAAAo9J,EAAAp0J,SAGAzd,KAAAq2N,SAAAG,SAEA3kD,EAAAilD,KAAA,IAAAtsG,EAAApzG,SAAAkD,mBAAAu3J,EAAAp0J,UAKAm6B,EAAAruC,KAAAsoK,GAGA,OAAAj6H,MAIA09K,EAnHA,GAuHAC,EAAA,SAAAA,IAEAJ,EAAAn1N,KAAAu1N,GAEAv1N,KAAAO,MAAA,EACAP,KAAA+2N,MAAA,EACA/2N,KAAAuyD,KAAA,EACAvyD,KAAAyd,OAAA,MAIA,WAEA,SAAA+3M,EAAA/5G,GAEA+O,EAAAhP,OAAA56G,KAAAZ,KAAAy7G,GAEA05G,EAAAn1N,KAAAw1N,GAEAx1N,KAAAmhE,OAAA,EACAnhE,KAAAg3N,UAAA,IAAAxsG,EAAAjO,cAAAv8G,KAAAy7G,SACAz7G,KAAA0iB,IAAA,GACA1iB,KAAAi3N,cAAA,EACAj3N,KAAAk3N,QAAA,KACAl3N,KAAAm3N,cAAA,GACAn3N,KAAAo3N,mBACAp3N,KAAAq3N,eACAr3N,KAAAs3N,YACAt3N,KAAAu3N,kBACAv3N,KAAAw3N,iBACAx3N,KAAAy3N,MAAA,KACAz3N,KAAAm6G,OAAA,KACAn6G,KAAA03N,cAAA,EACA13N,KAAA23N,UACA33N,KAAA24G,cACA34G,KAAA43N,mBAAA,GACA53N,KAAA63N,YAAA,KACA73N,KAAA83N,cAAA,KACA93N,KAAA+3N,oBAAA,KAq4CA,OAj4CA3C,EAAAI,IACAzkM,IAAA,gBACAzxB,MAAA,SAAA04N,GAEA,IAAA1+H,EAAA94F,UAAAlC,OAAA,QAAAU,IAAAwB,UAAA,GAAAA,UAAA,GAAA,EAEA,GAAAw3N,EAAA,CAKA,IAAA,IAAAx5N,EAAA86F,EAAA96F,EAAAw5N,EAAA15N,OAAAE,IAEA,OAAAA,GAEA,KAAA,EACAwB,KAAA0iB,IAAAs1M,EAAAx5N,GACA,MACA,KAAA,EACAwB,KAAAqhB,QAAA22M,EAAAx5N,QAMAQ,IAAAgB,KAAAqhB,UAEArhB,KAAAqhB,gBAMA0P,IAAA,OACAzxB,MAAA,SAAA04N,EAAA79G,EAAAC,EAAAC,GAEA,IAAAp5B,EAAAjhF,KAEAA,KAAAi4N,cAAAD,GACA,IAAA78G,EAAA,IAAAqP,EAAAvO,WAAAj8G,KAAAy7G,SACAN,EAAAW,QAAA97G,KAAA7B,MACAg9G,EAAAsE,gBAAA,eACAtE,EAAAS,KAAA57G,KAAA0iB,IAAA,SAAA87F,GAEAv9B,EAAA/vD,MAAAstF,EAAArE,IAEAC,EAAAC,MAIAtpF,IAAA,YACAzxB,MAAA,SAAAy6B,GAGA,IADA,IAAAm+L,EAAA,IACA,CAEA,IAAA78D,GAAA,EAOA,IALA,KADAA,EAAAthI,EAAAzwB,QAAA,KAAA4uN,MAGA78D,EAAAthI,EAAAzwB,QAAA,IAAA4uN,MAGA78D,GAAA,GAAAA,EAAA,GAyBA,MAvBA,IAAA88D,GAAA,GACAA,EAAAp+L,EAAAzwB,QAAA,OAAA4uN,IACA,EAEAA,EAAAC,EAAA,GAIAA,EAAAp+L,EAAAzwB,QAAA,KAAA4uN,GAGAA,EAFAC,EAAA,EAEAA,EAAA,EAIAp+L,EAAAzwB,QAAA,KAAA4uN,GAAA,GAaA,OAAAn+L,EAAAqmF,OAAA83G,MAIAnnM,IAAA,YACAzxB,MAAA,SAAAy6B,GAGA,IADA,IAAAm+L,EAAA,IACA,CAEA,IAAA78D,GAAA,EAOA,IALA,KADAA,EAAAthI,EAAAzwB,QAAA,KAAA4uN,MAGA78D,EAAAthI,EAAAzwB,QAAA,IAAA4uN,MAGA78D,GAAA,GAAAA,EAAA,GAyBA,MAvBA,IAAA88D,GAAA,GACAA,EAAAp+L,EAAAzwB,QAAA,OAAA4uN,IACA,EAEAA,EAAAC,EAAA,GAIAA,EAAAp+L,EAAAzwB,QAAA,KAAA4uN,GAGAA,EAFAC,EAAA,EAEAA,EAAA,EAIAp+L,EAAAzwB,QAAA,KAAA4uN,GAAA,GAaA,OAAAn+L,EAAAqmF,OAAA83G,MAIAnnM,IAAA,YACAzxB,MAAA,SAAAohN,GAEA,IAAAn/C,EAAA,IAAA7wD,SAAAgwG,GAEAG,EAAAt/C,EAAAuF,UAAA,IAAA,GACAsxD,EAAA,GAFA,GAEAvX,EACA,GAAAuX,IAAA72D,EAAAse,WAEA,OAAA,EAIA,IADA,IAAAw4C,EAAA92D,EAAAse,WACAt/K,EAAA,EAAAA,EAAA83N,EAAA93N,IAEA,GAAAghK,EAAAjJ,SAAA/3J,GAAA,GAAA,IAEA,OAAA,EAKA,OAAA,KAIAwwB,IAAA,gBACAzxB,MAAA,SAAAg5N,GAEA,GAAA,iBAAAA,EAAA,CAGA,IADA,IAAA3X,EAAA,IAAAlzK,WAAA6qL,EAAAh6N,QACAE,EAAA,EAAAA,EAAA85N,EAAAh6N,OAAAE,IAEAmiN,EAAAniN,GAAA,IAAA85N,EAAA55G,WAAAlgH,GAGA,OAAAmiN,EAAAxtJ,QAAAwtJ,EAIA,OAAA2X,KAMAvnM,IAAA,gBACAzxB,MAAA,SAAAg5N,GAEA,MAAA,iBAAAA,EAEA9tG,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAA6qL,IAIAA,KAMAvnM,IAAA,QACAzxB,MAAA,SAAA0xB,EAAAmpF,GAEA,IAAAumG,EAAA1gN,KAAAu4N,cAAAvnM,GAGA,OAFAhxB,KAAAy3N,MAAAz3N,KAAAw4N,cAAAxnM,GACAhxB,KAAAm6G,OAAAA,EACAn6G,KAAAy4N,UAAA/X,GAAA1gN,KAAA04N,aAAAhY,GAAA1gN,KAAA24N,iBAIA5nM,IAAA,eACAzxB,MAAA,SAAA0xB,GAEA,OAAAhxB,KAAA24N,YAAAnuG,EAAA5B,YAAAC,WAAA,IAAAp7E,WAAAzc,QAIAD,IAAA,cACAzxB,MAAA,WAEA,IAAAnB,EAIAA,EAFA,KAAA6B,KAAA27G,aAEA37G,KAAA27G,aAEA,KAAA37G,KAAA7B,KAEA6B,KAAA7B,KAIAqsH,EAAA5B,YAAAM,eAAAlpH,KAAA0iB,KAIA1iB,KAAAg3N,UAAAl7G,QAAA39G,GAAA09G,eAAA77G,KAAA07G,aAGA17G,KAAAq3N,YAAA7rM,YACAxrB,KAAA44N,iBAAA54N,KAAAq3N,YAFA,IAGAr3N,KAAA64N,cACA74N,KAAAu3N,eAAAv3N,KAAAq3N,YAAA7rM,SAAAsmF,QACA9xG,KAAA84N,eAIA/nM,IAAA,mBACAzxB,MAAA,SAAAy5N,EAAAx/H,GAGA,IADA,IAAAy/H,EAAAz/H,IACA,CAEA,IAAA0/H,EAAAj5N,KAAAy3N,MAAAnuN,QAAA,IAAA0vN,GAAA,EACAE,EAAAl5N,KAAAy3N,MAAAnuN,QAAA,IAAA0vN,GACAG,EAAAn5N,KAAAy3N,MAAAnuN,QAAA,IAAA2vN,GAAA,EACA,KAAAA,EAAA,GAAAC,EAAAD,GAyDA,CAEAD,GAAA,IAAAC,EAAAj5N,KAAAy3N,MAAAn5N,OAAA46N,EAAA,EACA,MA1DA,IAAA3B,GACA/rM,aACA4tM,EAAAp5N,KAAAq5N,UAAAr5N,KAAAy3N,MAAAr3G,OAAA44G,EAAAC,EAAAD,EAAA,IAAAx9J,OACA89J,EAAAF,EAAA/6N,MAAA,MAoBA,GAnBAi7N,EAAAh7N,OAAA,GAEAi5N,EAAAruN,KAAAowN,EAAA,GACAA,EAAAh7N,QAAA,EAEAi5N,EAAA94N,KAAA66N,EAAA,GAIA/B,EAAA94N,KAAA66N,EAAA,GAAAt5N,KAAAq3N,YAAA7rM,SAAAltB,SAMAi5N,EAAA94N,KAAA26N,EACA7B,EAAAruN,KAAA,IAGA,cAAAquN,EAAAruN,KAAA,CAEAquN,EAAAvmM,KAAAhxB,KAAAy3N,MAAAr3G,OAAA+4G,EAAAD,EAAAC,GAAA39J,OACA,IAAA+9J,EAAAv5N,KAAA44N,iBAAArB,EAAA2B,EAAA,GACAF,EAAAO,EAAAl/L,IACAk9L,EAAA/rM,SAAA+tM,EAAAhuM,OAAAC,aAEA,CAEA,IAAAguM,EAAAx5N,KAAAy3N,MAAAtuG,YAAA,IAAAgwG,EAAA,EAAAh6N,KAAA4L,IAAAouN,EAAAD,GAAAA,GAEA,GADA3B,EAAAvmM,KAAAhxB,KAAAy3N,MAAAr3G,OAAA64G,EAAAO,EAAAP,GAAAz9J,OACA29J,GAAA,GAAAD,EAAAC,EAEAH,EAAAE,EAAA,MAEA,CAEA,IAAAO,EAAAt6N,KAAA6L,IAAAwuN,EAAA,EAAAP,GACAS,EAAA15N,KAAA44N,iBAAArB,EAAAkC,GACAT,EAAAU,EAAAr/L,IACAk9L,EAAA/rM,SAAAkuM,EAAAnuM,OAAAC,UAKA+rM,EAAAhsM,OAAAwtM,EACA,YAAAxB,EAAAruN,MAEA6vN,EAAAvtM,SAAAjiB,KAAAguN,GAYA,OACAhsM,OAAAwtM,EACA1+L,IAAA2+L,MAKAjoM,IAAA,YACAzxB,MAAA,WAEA,IAAAq6N,EAAA35N,KAEAA,KAAA45N,YACA55N,KAAAu3N,eAAAhsM,QAAAvrB,KAAAu3N,eAAA/rM,SAAAltB,OAAA,IAAA0B,KAAAu3N,eAAAsC,OAEA37G,WAAA,WAEAy7G,EAAAb,aAEA,GAIA56G,WAAA,WAEAy7G,EAAAx/G,QACA2/G,OAAAH,EAAAhC,OACAh/G,WAAAghH,EAAAhhH,cAGA,MAMA5nF,IAAA,YACAzxB,MAAA,WAGA,IADA,IAAAy6N,GAAA,IACA,CAEA,IAAA/5N,KAAAu3N,eAAAsC,OAAA,CAEA,OAAA75N,KAAAu3N,eAAAruN,MAEA,IAAA,WACA,MACA,IAAA,qBACAlJ,KAAA43N,mBAAA9vL,SAAA9nC,KAAAu3N,eAAAvmM,MACA,MACA,IAAA,QACAhxB,KAAAg6N,YACA,MACA,IAAA,uBACAh6N,KAAAi6N,2BACA,MACA,IAAA,OACAj6N,KAAA64N,cACA74N,KAAA63N,eACA73N,KAAA63N,YAAAp5N,KAAAuB,KAAAu3N,eAAA94N,KAAA+8D,OACAx7D,KAAA63N,YAAAp7B,WAAAz8L,KAAAk6N,eAAAl6N,KAAAu3N,gBAAA/7J,OACAx7D,KAAA63N,YAAAsC,wBACAn6N,KAAA63N,YAAAuC,cACA3rL,YACAC,WACAE,OACAI,eACAD,eACA+H,WACAo/I,oBAEAl2L,KAAA63N,YAAA7nH,aACAhwG,KAAA63N,YAAAwC,iBACAr6N,KAAA63N,YAAAyC,YACAt6N,KAAA63N,YAAA0C,UAAAv6N,KAAAw3N,cACAx3N,KAAAw6N,6BACAx6N,KAAAy6N,mBACAV,GAAA,EACA,MACA,IAAA,cACA/5N,KAAAy6N,mBACA,MACA,IAAA,oBACAz6N,KAAA06N,wBACA,MACA,IAAA,2BACA,MACA,IAAA,mBACA16N,KAAA26N,uBACA,MACA,IAAA,WACA36N,KAAA46N,eACA,MACA,IAAA,cACA56N,KAAA66N,kBACA,MACA,IAAA,eACA76N,KAAA64N,cACA74N,KAAA83N,iBACA93N,KAAA83N,cAAAr5N,KAAAuB,KAAAu3N,eAAA94N,KAAA+8D,OACAx7D,KAAA83N,cAAAgD,eACA,MACA,IAAA,YACA96N,KAAA+3N,qBAEA/3N,KAAA83N,cAAAgD,YAAAvxN,KAAAvJ,KAAA+3N,qBAGA/3N,KAAA+3N,oBAAA,IAAA1C,EACAr1N,KAAA+3N,oBAAAj+G,SAAA95G,KAAAu3N,eAAAvmM,KAAAwqC,OACA,MACA,IAAA,eACAx7D,KAAA+6N,oBACAhB,GAAA,EAIA/5N,KAAAu3N,eAAAsC,QAAA,EAGA,GAAA75N,KAAAu3N,eAAA/rM,SAAAltB,OAAA,GAQA,GANA0B,KAAAu3N,eAAAv3N,KAAAu3N,eAAA/rM,SAAAsmF,QACA9xG,KAAAmhE,OAEA5yD,QAAA5B,IAAA,cAAA3M,KAAAu3N,eAAA94N,MAGAs7N,EAAA,WAsBA,GAlBA/5N,KAAAu3N,eAAAsC,QAEA75N,KAAAu3N,eAAAhsM,SAAAvrB,KAAAu3N,eAAAhsM,OAAAA,QAEAvrB,KAAA64N,cAKA74N,KAAAu3N,eAAAhsM,OAEAvrB,KAAAu3N,eAAAv3N,KAAAu3N,eAAAhsM,OAIAwuM,GAAA,EAGAA,EAAA,UASAhpM,IAAA,cACAzxB,MAAA,WAEA,MAAAU,KAAA63N,aAAA73N,KAAA63N,YAAAp5N,MAEAuB,KAAAg7N,sBAGAh7N,KAAA63N,eACA,MAAA73N,KAAA83N,eAAA93N,KAAA83N,cAAAr5N,OAEAuB,KAAA+3N,sBAEA/3N,KAAA83N,cAAAgD,YAAAvxN,KAAAvJ,KAAA+3N,qBACA/3N,KAAA+3N,oBAAA,MAGA/3N,KAAAi7N,wBAGAj7N,KAAA83N,oBAIA/mM,IAAA,iBACAzxB,MAAA,SAAA00C,GAEA,OAAAA,EAAAzoB,OAEAyoB,EAAAzoB,OAAA9sB,KAEAu1C,EAAAzoB,OAAA9sB,KAIAuB,KAAAk6N,eAAAlmL,EAAAzoB,QAMA,MAMAwF,IAAA,YACAzxB,MAAA,WAEAU,KAAAm3N,cAAAn3N,KAAAu3N,eAAA94N,KAAA+8D,OACAx7D,KAAAw3N,iBACAx3N,KAAAw3N,cAAA/4N,KAAAuB,KAAAm3N,cACAn3N,KAAAw3N,cAAAhsM,YACAxrB,KAAAu3N,eAAAhsM,QAAAvrB,KAAAu3N,eAAAhsM,OAAA9sB,OAEAuB,KAAAw3N,cAAA/6B,WAAAz8L,KAAAu3N,eAAAhsM,OAAA9sB,MAGAuB,KAAAo3N,gBAAA7tN,KAAAvJ,KAAAm3N,eACAn3N,KAAAs3N,SAAAt3N,KAAAm3N,eAAAn3N,KAAAw3N,iBAIAzmM,IAAA,2BACAzxB,MAAA,WAEAU,KAAAw3N,cAAA0D,qBAAA,IAAA1wG,EAAAxmG,QACA,IAAAgN,EAAAhxB,KAAAu3N,eAAAvmM,KAAA3yB,MAAA,KACA2B,KAAAm7N,iBAAAn7N,KAAAw3N,cAAA0D,qBAAAlqM,GACAhxB,KAAAw6N,gCAIAzpM,IAAA,6BACAzxB,MAAA,WAEA,GAAAU,KAAAw3N,cAAA0D,qBAAA,CAKA,IAAArsN,EAAA,IAAA27G,EAAAjyB,KAMA,GALA1pF,EAAApQ,KAAAuB,KAAAw3N,cAAA/4N,KACAoQ,EAAAiJ,aAAA9X,KAAAw3N,cAAA0D,sBACArsN,EAAAgK,YAAAhK,EAAA4O,OACA5O,EAAAqsN,qBAAAl7N,KAAAw3N,cAAA0D,qBACAl7N,KAAAw3N,cAAA4D,QAAAvsN,EACA7O,KAAAw3N,cAAA/6B,WAEA,IAAA,IAAAjqI,KAAAxyD,KAAAs3N,SAEAt3N,KAAAs3N,SAAA9kK,GAAA/zD,OAAAuB,KAAAw3N,cAAA/6B,YAEAz8L,KAAAs3N,SAAA9kK,GAAA4oK,QAAA9sN,IAAAtO,KAAAw3N,cAAA4D,aAUArqM,IAAA,mBACAzxB,MAAA,WAMA,IAJA,IAAA05N,EAAA,EACApuI,EAAA,EACAywI,EAAA,EACAtM,EAAA,IACA,CAEA,IAAAuM,GAAA,EACA,GAAA,IAAAD,EAAA,CAEA,IAAAE,EAAAv7N,KAAAw7N,UAAAxC,GACAA,EAAAuC,EAAAvC,QACAqC,EAAA,GACAtM,EAAA/uN,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,KAAA0vN,GAAA,IACA,IAEAjK,EAAA/uN,KAAAu3N,eAAAvmM,KAAA1yB,YAIA,CAEA,IAAA+8J,EAAA,EACA,OAAAzwE,GAEA,KAAA,EACAywE,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GAAA,EACA,MACA,KAAA,EACA39D,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,KAAA0vN,GAAA,EAWA,QAPA,IAAA39D,GAAAA,EAAA0zD,KAEA1zD,EAAA0zD,EACAsM,EAAA,EACAC,GAAA,GAGAt7N,KAAAu3N,eAAAruN,MAEA,IAAA,OACA,OAAA0hF,GAEA,KAAA,EACA5qF,KAAAy7N,aAAAz7N,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,IACA,MACA,KAAA,EACAh5N,KAAA07N,WAAA17N,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,IAIA,MACA,IAAA,cACA,OAAApuI,GAEA,KAAA,EACA5qF,KAAA27N,mBAAA37N,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,KAOAA,EAAA39D,EAAA,EACAigE,GAEA1wI,IAKA,GAAAouI,GAAAh5N,KAAAu3N,eAAAvmM,KAAA1yB,OAEA,UAQAyyB,IAAA,YACAzxB,MAAA,SAAA26B,GAEA,IAAAohI,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA2wB,GACA,OACA2hM,KAAA9zL,SAAA9nC,KAAAu3N,eAAAvmM,KAAAovF,OAAAnmF,EAAAohI,EAAAphI,IACA++L,QAAA39D,EAAA,MAKAtqI,IAAA,eACAzxB,MAAA,SAAAy6B,GAEA,IAAA/I,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAA4kD,OAAA,EAAArmF,EAAAz7B,OAAA,GAAAD,MAAA,KACA2B,KAAA63N,YAAAuC,aAAA3rL,SAAAllC,KAAAo+B,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,KACAhxB,KAAA63N,YAAAuC,aAAAprL,YAAAzlC,KAAA,EAAA,EAAA,EAAA,GACAvJ,KAAA63N,YAAAuC,aAAArrL,YAAAxlC,KAAA,EAAA,EAAA,EAAA,GACAvJ,KAAA63N,YAAAsC,qBAAA5wN,KAAA,MAIAwnB,IAAA,aACAzxB,MAAA,SAAAy6B,GAEA,IAAA/I,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAA4kD,OAAA,EAAArmF,EAAAz7B,OAAA,GAAAD,MAAA,KACA2B,KAAA63N,YAAAuC,aAAAtjL,QAAAvtC,KAAAu+B,SAAA9W,EAAA,GAAA,IAAA8W,SAAA9W,EAAA,GAAA,IAAA8W,SAAA9W,EAAA,GAAA,QAIAD,IAAA,qBACAzxB,MAAA,SAAAy6B,GAEA,IAAA/I,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAA4kD,OAAA,EAAArmF,EAAAz7B,OAAA,GAAAD,MAAA,KACA2B,KAAA63N,YAAAuC,aAAA1rL,QAAAnlC,KAAAo+B,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,QAIAD,IAAA,iBACAzxB,MAAA,WAaA,IAXA,IAAAu/F,EAAA,IAAA2rB,EAAAn2E,eACAtsB,KACA2mB,KACAE,KACAI,KACAD,KAIA/d,EAAAhxB,KAAA63N,YAAAuC,aAEA57N,EAAA,EAAAwL,EAAAgnB,EAAA8lB,QAAAx4C,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAA6pM,EAAA,EAAAr3K,EAAA8lB,QAAAt4C,GACA8pM,EAAA,EAAAt3K,EAAA8lB,QAAAt4C,GACAq9N,EAAA,EAAA7qM,EAAA8lB,QAAAt4C,GAEAupB,EAAAxe,KAAAynB,EAAAyd,SAAA65J,GAAAt3K,EAAAyd,SAAA65J,EAAA,GAAAt3K,EAAAyd,SAAA65J,EAAA,IACA55J,EAAAnlC,KAAAynB,EAAA0d,QAAA45J,GAAAt3K,EAAA0d,QAAA45J,EAAA,GAAAt3K,EAAA0d,QAAA45J,EAAA,IACAt5J,EAAAzlC,KAAAynB,EAAAge,YAAA6sL,GAAA7qM,EAAAge,YAAA6sL,EAAA,GAAA7qM,EAAAge,YAAA6sL,EAAA,GAAA7qM,EAAAge,YAAA6sL,EAAA,IACA9sL,EAAAxlC,KAAAynB,EAAA+d,YAAA8sL,GAAA7qM,EAAA+d,YAAA8sL,EAAA,GAAA7qM,EAAA+d,YAAA8sL,EAAA,GAAA7qM,EAAA+d,YAAA8sL,EAAA,IACAjtL,EAAArlC,KAAAynB,EAAA4d,IAAAy5J,GAAAr3K,EAAA4d,IAAAy5J,EAAA,IAcA,OARAxpG,EAAA/pD,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAArmB,EAAA,IACA82E,EAAA/pD,aAAA,SAAA,IAAA01E,EAAAp8E,uBAAAM,EAAA,IACAmwD,EAAA/pD,aAAA,KAAA,IAAA01E,EAAAp8E,uBAAAQ,EAAA,IACAiwD,EAAA/pD,aAAA,YAAA,IAAA01E,EAAA18E,sBAAAkB,EAAA,IACA6vD,EAAA/pD,aAAA,aAAA,IAAA01E,EAAAp8E,uBAAAW,EAAA,IAEA/uC,KAAA87N,eAAAj9H,EAAA7tE,EAAAklK,iBAEAr3F,KAIA9tE,IAAA,iBACAzxB,MAAA,SAAAu/F,EAAAq3F,GAMA,IAJA,IAAApjJ,EACAhE,KACA9H,OAAAhoC,EAEAR,EAAA,EAAAA,EAAA03L,EAAA53L,OAAAE,IAAA,CAEA,IAAAu9N,EAAA7lC,EAAA13L,GAEAu9N,IAAA/0L,IAEAA,EAAA+0L,OAEA/8N,IAAA8zC,IAEAA,EAAAj3B,MAAA,EAAArd,EAAAs0C,EAAA7Y,MACA6U,EAAAvlC,KAAAupC,IAIAA,GACA7Y,MAAA,EAAAz7B,EACAwoC,cAAAA,SAOAhoC,IAAA8zC,IAEAA,EAAAj3B,MAAA,EAAArd,EAAAs0C,EAAA7Y,MACA6U,EAAAvlC,KAAAupC,IAIA+rD,EAAA/vD,OAAAA,KAIA/d,IAAA,wBACAzxB,MAAA,WAKA,IAHA,IAAA05N,EAAA,EACApuI,EAAA,EACAywI,EAAA,IACA,CAEA,OAAAzwI,GAEA,KAAA,EACA,GAAA,IAAAywI,EAAA,CAEA,IAAAE,EAAAv7N,KAAAw7N,UAAA,GACAxC,EAAAuC,EAAAvC,QACAqC,EAAA,MAEA,CAEA,IAAAhgE,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GAAA,EACA,IAAA39D,IAEAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1yB,OACAssF,EAAA,EACAywI,EAAA,GAGA,IAAAthM,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACAhoM,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACA2B,KAAA03N,aAEA13N,KAAA63N,YAAAuC,aAAAxrL,IAAArlC,KAAAo+B,WAAA3W,EAAA,IAAA,EAAA2W,WAAA3W,EAAA,KAIAhxB,KAAA63N,YAAAuC,aAAAxrL,IAAArlC,KAAAo+B,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,KAGAgoM,EAAA39D,EAAA,GAMA,GAAA29D,GAAAh5N,KAAAu3N,eAAAvmM,KAAA1yB,OAEA,UAQAyyB,IAAA,uBACAzxB,MAAA,WAKA,IAHA,IAAA05N,EAAA,EACApuI,EAAA,EACAywI,EAAA,IACA,CAEA,GAAAA,EAAA,EAAA,CAEA,IAAAE,EAAAv7N,KAAAw7N,UAAAxC,GACAA,EAAAuC,EAAAvC,QACAqC,QAEA,CAEA,IAAAhgE,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,IACA,IAAA39D,IAEAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1yB,OACAssF,EAAA,EACAywI,EAAA,GAKA,IAFA,IAAAthM,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACAhoM,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACAG,EAAA,EAAAA,EAAAwyB,EAAA1yB,OAAAE,IAEAwB,KAAA63N,YAAAuC,aAAAlkC,gBAAA13L,GAAAspC,SAAA9W,EAAAxyB,IAGAw6N,EAAAh5N,KAAAu3N,eAAAvmM,KAAA1yB,OAGA,GAAA06N,GAAAh5N,KAAAu3N,eAAAvmM,KAAA1yB,QAAAssF,GAAA,EAEA,UAQA75D,IAAA,eACAzxB,MAAA,WAEA,IAAA43N,EAAA,IAAA1sG,EAAApnD,mBACAr8B,MAAA,SAAA5nC,KAAAqL,WAEA0sN,EAAAvtL,KAAA6gF,EAAArpH,UACA+1N,EAAAz4N,KAAAuB,KAAAu3N,eAAA94N,KACA,IAAAu6N,EAAA,EACA39D,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,KAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACAhoM,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACA64N,EAAAnwL,MAAAvxB,EAAAmyB,WAAA3W,EAAA,IACAkmM,EAAAnwL,MAAAzpB,EAAAqqB,WAAA3W,EAAA,IACAkmM,EAAAnwL,MAAAl4B,EAAA84B,WAAA3W,EAAA,IACAgoM,EAAA39D,EAAA,EACAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACA9B,EAAA/mL,UAAAxI,WAAA3nC,KAAAq5N,UAAAt/L,IACAi/L,EAAA39D,EAAA,EACAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,KAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACA,IAAAgD,EAAAh8N,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACA64N,EAAAhnL,SAAA16B,EAAAmyB,WAAAq0L,EAAA,IACA9E,EAAAhnL,SAAA5yB,EAAAqqB,WAAAq0L,EAAA,IACA9E,EAAAhnL,SAAArhC,EAAA84B,WAAAq0L,EAAA,IACAhD,EAAA39D,EAAA,GAEA,KADAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,KAAA0vN,MAGA39D,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1yB,QAGAy7B,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACA,IAAAiD,EAAAj8N,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACA64N,EAAAlnL,SAAAx6B,EAAAmyB,WAAAs0L,EAAA,IACA/E,EAAAlnL,SAAA1yB,EAAAqqB,WAAAs0L,EAAA,IACA/E,EAAAlnL,SAAAnhC,EAAA84B,WAAAs0L,EAAA,IAEA,IADA,IAAAC,EAAA,KAGAl8N,KAAAu3N,eAAA/rM,SAAAltB,OAAA,GAFA,CAIA49N,EAAAl8N,KAAAu3N,eAAA/rM,SAAAsmF,QACA9xG,KAAAmhE,OAEA5yD,QAAA5B,IAAA,cAAAuvN,EAAAz9N,MAGA,IAAA+pL,EAAA0zC,EAAAlrM,KAAAovF,OAAA,EAAA87G,EAAAlrM,KAAA1yB,OAAA,GACA,OAAA49N,EAAAhzN,MAEA,IAAA,kBACAguN,EAAAnrL,IAAA/rC,KAAAg3N,UAAAp7G,KAAA4sE,GACA,MACA,IAAA,kBACA0uC,EAAAzmL,QAAAzwC,KAAAg3N,UAAAp7G,KAAA4sE,GACA0uC,EAAAxmL,UAAA,IACA,MACA,IAAA,oBACAwmL,EAAAvmL,UAAA3wC,KAAAg3N,UAAAp7G,KAAA4sE,GACA0uC,EAAArmL,YAAA,IAAA25E,EAAA19G,QAAA,EAAA,GACA,MACA,IAAA,sBACAoqN,EAAA/lL,YAAAnxC,KAAAg3N,UAAAp7G,KAAA4sE,GACA,MACA,IAAA,mBACA0uC,EAAAlrL,SAAAhsC,KAAAg3N,UAAAp7G,KAAA4sE,IAYAxoL,KAAA63N,YAAA7nH,UAAAzmG,KAAA2tN,MAIAnmM,IAAA,kBACAzxB,MAAA,WAEA,IAAA68N,EAAA,IAlpCA,SAAAC,IAEAjH,EAAAn1N,KAAAo8N,GAEAp8N,KAAA85G,SAAA,GACA95G,KAAAq8N,UAAA,EACAr8N,KAAAs8N,WACAt8N,KAAAsrL,WACAtrL,KAAAu8N,WAAA,KACAv8N,KAAAw8N,aAAA,MA0oCAxD,EAAA,EACA39D,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACAA,EAAA39D,EAAA,EACA8gE,EAAAriH,SAAA//E,EAAAqmF,OAAA,EAAArmF,EAAAz7B,OAAA,GACA69N,EAAAE,UAAAr8N,KAAA63N,YAAAyC,SAAAh8N,OACA+8J,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAA,EAAA39D,EAAA,EACAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GAEA,IADA,IAAAhoM,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACAG,EAAA,EAAAA,EAAAwyB,EAAA1yB,OAAAE,IAEA29N,EAAAG,QAAA/yN,KAAAu+B,SAAA9W,EAAAxyB,KAGAw6N,EAAA39D,EAAA,EACAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GAEA,IADA,IAAAgD,EAAAh8N,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACAo+N,EAAA,EAAAA,EAAAT,EAAA19N,OAAAm+N,IAEAN,EAAA7wC,QAAA/hL,KAAAo+B,WAAAq0L,EAAAS,KAGAzD,EAAA39D,EAAA,GACAA,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,KACA,IAEA39D,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1yB,QAGAy7B,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACA,IAAAiD,EAAAj8N,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,KACA89N,EAAAK,aAAA,IAAAhyG,EAAAxmG,QACAhkB,KAAAm7N,iBAAAgB,EAAAK,aAAAP,GACAj8N,KAAA63N,YAAAyC,SAAA/wN,KAAA4yN,MAIAprM,IAAA,mBACAzxB,MAAA,SAAAo9N,EAAAz8D,GAEA,IAAA08D,GAAA,EACA,IAAA,IAAAnqK,KAAAxyD,KAAAs3N,SAEA,GAAAt3N,KAAAs3N,SAAA9kK,GAAA/zD,OAAAi+N,GAAAC,EAAA,CAEAA,GAAA,EACA,IAAA9tN,EAAA,IAAA27G,EAAAjyB,KAQA,GAPA1pF,EAAApQ,KAAAuB,KAAAs3N,SAAA9kK,GAAA/zD,KACAoQ,EAAAiJ,aAAA9X,KAAAs3N,SAAA9kK,GAAA0oK,sBACArsN,EAAAgK,YAAAhK,EAAA4O,OACA5O,EAAAqsN,qBAAAl7N,KAAAs3N,SAAA9kK,GAAA0oK,qBACArsN,EAAA01J,KAAA,IAAA/5C,EAAApzG,SAAAiD,sBAAAxL,EAAAqsN,sBAAA5pN,UACAzC,EAAA+tN,MAAA,IAAApyG,EAAAz9G,YAAA0H,sBAAA5F,EAAAqsN,sBAAA5pN,UACAzC,EAAAioN,KAAA,IAAAtsG,EAAApzG,SAAAkD,mBAAAzL,EAAAqsN,sBAAA5pN,UACAtR,KAAAs3N,SAAA9kK,GAAAiqI,YAAAz8L,KAAAs3N,SAAA9kK,GAAAiqI,WAAAn+L,OAAA,EAEA,IAAA,IAAAE,EAAA,EAAAA,EAAAyhK,EAAA3hK,OAAAE,IAEA,GAAAwB,KAAAs3N,SAAA9kK,GAAAiqI,aAAAx8B,EAAAzhK,GAAAC,KAAA,CAEAwhK,EAAAzhK,GAAA8P,IAAAO,GACAA,EAAA0c,OAAA/sB,EACA,MAOAyhK,EAAA12J,KAAAsF,OAQAkiB,IAAA,sBACAzxB,MAAA,WAEA,IAAAw9C,EAAA,KACA,GAAA98C,KAAA63N,YAAAyC,SAAAh8N,OAAA,EAAA,CAEA,IAAAu+N,KACA78N,KAAA88N,iBAAA98N,KAAA63N,YAAA0C,UAAA99B,WAAAogC,GACA,IAAA,IAAAE,EAAA,EAAAA,EAAA/8N,KAAA63N,YAAAyC,SAAAh8N,OAAAy+N,IAAA,CAGA,IADA,IAAAC,EAAA,EACAC,EAAA,EAAAA,EAAAJ,EAAAv+N,OAAA2+N,IAEA,GAAAJ,EAAAI,GAAAx+N,OAAAuB,KAAA63N,YAAAyC,SAAAyC,GAAAjjH,SAAA,CAEAkjH,EAAAC,EACAJ,EAAAI,GAAAT,aAAA,IAAAhyG,EAAAxmG,QACA64M,EAAAI,GAAAT,aAAApuN,KAAApO,KAAA63N,YAAAyC,SAAAyC,GAAAP,cACA,MAKA,IAAA,IAAAziB,EAAA,EAAAA,EAAA/5M,KAAA63N,YAAAyC,SAAAyC,GAAAT,QAAAh+N,OAAAy7M,IAAA,CAEA,IAAAmjB,EAAAl9N,KAAA63N,YAAAyC,SAAAyC,GAAAT,QAAAviB,GACAojB,EAAAn9N,KAAA63N,YAAAyC,SAAAyC,GAAAzxC,QAAAyuB,GAEAnqH,EAAA,EAAAstI,EAEA,OAAAl9N,KAAA63N,YAAAsC,qBAAA+C,IAEA,KAAA,EACAl9N,KAAA63N,YAAAuC,aAAAprL,YAAA4gD,GAAAotI,EACAh9N,KAAA63N,YAAAuC,aAAArrL,YAAA6gD,GAAAutI,EACA,MACA,KAAA,EACAn9N,KAAA63N,YAAAuC,aAAAprL,YAAA4gD,EAAA,GAAAotI,EACAh9N,KAAA63N,YAAAuC,aAAArrL,YAAA6gD,EAAA,GAAAutI,EACA,MACA,KAAA,EACAn9N,KAAA63N,YAAAuC,aAAAprL,YAAA4gD,EAAA,GAAAotI,EACAh9N,KAAA63N,YAAAuC,aAAArrL,YAAA6gD,EAAA,GAAAutI,EACA,MACA,KAAA,EACAn9N,KAAA63N,YAAAuC,aAAAprL,YAAA4gD,EAAA,GAAAotI,EACAh9N,KAAA63N,YAAAuC,aAAArrL,YAAA6gD,EAAA,GAAAutI,EAIAn9N,KAAA63N,YAAAsC,qBAAA+C,KACAl9N,KAAA63N,YAAAsC,qBAAA+C,GAAA,GAEA3uN,QAAA5B,IAAA,8BAAAuwN,IAOA,IAAA,IAAAE,EAAA,EAAAA,EAAAp9N,KAAA63N,YAAA7nH,UAAA1xG,OAAA8+N,IAEAp9N,KAAA63N,YAAA7nH,UAAAotH,GAAAtwL,UAAA,EAIA,IADA,IAAAuwL,KACAC,EAAA,EAAAA,EAAAT,EAAAv+N,OAAAg/N,IAEAT,EAAAS,GAAAd,aAEAa,EAAA9zN,KAAAszN,EAAAS,GAAAd,cAIAa,EAAA9zN,KAAA,IAAAihH,EAAAxmG,SAMA,IAAA66E,EAAA7+F,KAAAu9N,iBACAzgL,EAAA,IAAA0tE,EAAA/yB,YAAAoH,EAAA,IAAA7+F,KAAA63N,YAAA7nH,UAAA1xG,OAAA0B,KAAA63N,YAAA7nH,UAAA,GAAAhwG,KAAA63N,YAAA7nH,WAEAhwG,KAAAw9N,cAAA1gL,EAAA+/K,EAAAQ,OAEA,CAEA,IAAAhyI,EAAArrF,KAAAu9N,iBACAzgL,EAAA,IAAA0tE,EAAAvxE,KAAAoyC,EAAA,IAAArrF,KAAA63N,YAAA7nH,UAAA1xG,OAAA0B,KAAA63N,YAAA7nH,UAAA,GAAAhwG,KAAA63N,YAAA7nH,WAGAlzD,EAAAr+C,KAAAuB,KAAA63N,YAAAp5N,KACA,IAAAg/N,EAAA,IAAAjzG,EAAAxmG,QACA05M,EAAA19N,KAAA63N,YAAA0C,UAAAa,QACA,GAAAsC,GAAAA,EAAAnyM,OAAA,CAEA,KAEAmyM,EAAAA,EAAAnyM,QAGAkyM,EAAAvuN,SAAAwuN,EAAAxC,sBASAp+K,EAAAhlC,aAAA2lN,GAGAz9N,KAAA23N,OAAApuN,KAAAuzC,MAIA/rB,IAAA,gBACAzxB,MAAA,SAAAw9C,EAAA6uF,EAAArzC,GAEA,IAAAE,EAAAmlI,EACAn/N,EAAA+0B,EADAgxC,KAGA,IAAA/lE,EAAA,EAAA+0B,EAAAo4G,EAAArtI,OAAAE,EAAA+0B,EAAA/0B,IAEAm/N,EAAAhyF,EAAAntI,GAEAg6F,EAAA,IAAAgyB,EAAAjyB,KACAh0B,EAAAh7D,KAAAivF,GAEAA,EAAA/5F,KAAAk/N,EAAAl/N,KACA+5F,EAAAzwE,SAAA3W,UAAAusN,EAAAp5D,KACA/rE,EAAA9kF,WAAAtC,UAAAusN,EAAAf,WACA59N,IAAA2+N,EAAA7G,KAAAt+H,EAAA35E,MAAAzN,UAAAusN,EAAA7G,KAIA,IAAAt4N,EAAA,EAAA+0B,EAAAo4G,EAAArtI,OAAAE,EAAA+0B,EAAA/0B,KAIA,KAFAm/N,EAAAhyF,EAAAntI,IAEA+sB,QAAA,OAAAoyM,EAAApyM,aAAAvsB,IAAAulE,EAAAo5J,EAAApyM,QAEAg5C,EAAAo5J,EAAApyM,QAAAjd,IAAAi2D,EAAA/lE,IAIAs+C,EAAAxuC,IAAAi2D,EAAA/lE,IAMAs+C,EAAAhuB,mBAAA,GAEA,IAAA01C,EAAA,IAAAgmD,EAAAnyB,SAAA9zB,EAAA+zB,GACAx7C,EAAAi7C,KAAAvzB,EAAA1nB,EAAAjkC,gBAKAkY,IAAA,oBACAzxB,MAAA,WAEA,IAAA05N,EAAA,EACA39D,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAj/L,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,EAAA39D,EAAA29D,GACAA,EAAA39D,EAAA,EACA,IAAAuiE,EAAA91L,SAAA9nC,KAAAq5N,UAAAt/L,IACAshI,EAAAr7J,KAAAu3N,eAAAvmM,KAAA1nB,QAAA,IAAA0vN,GACAA,EAAA39D,EAAA,EACAthI,EAAA/5B,KAAAu3N,eAAAvmM,KAAAovF,OAAA44G,GAEA,IADA,IAAAhoM,EAAAhxB,KAAAq5N,UAAAt/L,EAAAyhC,QAAAn9D,MAAA,OACAG,EAAA,EAAAA,EAAAwyB,EAAA1yB,OAAAE,IAAA,CAEA,IAAAw9N,EAAAhrM,EAAAxyB,GAAAH,MAAA,KACAw/N,EAAA,IAAAtI,EAKA,GAJAsI,EAAA30N,KAAA00N,EACAC,EAAA9G,MAAAjvL,SAAAk0L,EAAA,IACA6B,EAAAt9N,MAAAP,KAAA+3N,oBAAA7B,UAAA53N,OACAu/N,EAAAtrK,KAAAsrK,EAAA9G,MACA,GAAA6G,EAAA,CAGA,IADA,IAAAE,GAAA,EACApY,EAAA,EAAAA,EAAA1lN,KAAA+3N,oBAAA7B,UAAA53N,OAAAonN,IAEA,GAAA1lN,KAAA+3N,oBAAA7B,UAAAxQ,GAAAqR,QAAA8G,EAAA9G,MAAA,CAEA8G,EAAA79N,KAAA+3N,oBAAA7B,UAAAxQ,GACAoY,GAAA,EACA,MAKA,IAAAC,EAAA/B,EAAA,GAAA39N,MAAA,KACA,OAAAu/N,GAEA,KAAA,EACAC,EAAAhH,IAAA,IAAArsG,EAAAz9G,WAAA46B,WAAAo2L,EAAA,IAAAp2L,WAAAo2L,EAAA,IAAAp2L,WAAAo2L,EAAA,KAAA,EAAAp2L,WAAAo2L,EAAA,KACA,MACA,KAAA,EACAF,EAAA/G,IAAA,IAAAtsG,EAAApzG,QAAAuwB,WAAAo2L,EAAA,IAAAp2L,WAAAo2L,EAAA,IAAAp2L,WAAAo2L,EAAA,KACA,MACA,KAAA,EACAF,EAAAt5D,IAAA,IAAA/5C,EAAApzG,QAAAuwB,WAAAo2L,EAAA,IAAAp2L,WAAAo2L,EAAA,IAAAp2L,WAAAo2L,EAAA,KAIAD,GAEA99N,KAAA+3N,oBAAA7B,UAAA3sN,KAAAs0N,QAMAA,EAAApgN,OAAA,IAAA+sG,EAAAxmG,QACAhkB,KAAAm7N,iBAAA0C,EAAApgN,OAAAu+M,EAAA,GAAA39N,MAAA,MACA2B,KAAA+3N,oBAAA7B,UAAA3sN,KAAAs0N,OAQA9sM,IAAA,uBACAzxB,MAAA,WAEA,IAAA0+N,EAAA,IAAA1I,EAAAt1N,KAAAqhB,SACA28M,EAAAzsH,IAAAvxG,KAAA43N,mBACAoG,EAAAv/N,KAAAuB,KAAA83N,cAAAr5N,KACAu/N,EAAAC,KAAAj+N,KAAA83N,cAAAgD,aACA96N,KAAA24G,WAAApvG,KAAAy0N,MAIAjtM,IAAA,kBACAzxB,MAAA,SAAA4+N,EAAAC,GAEA,IAAAxoE,EAAAuoE,EACAvjJ,EAAAwjJ,EAWA,GAVAxoE,IAEAA,EAAA31J,KAAA23N,OAAA,IAGAh9I,IAEAA,EAAA36E,KAAA24G,WAAA,KAGAg9C,IAAAh7E,EAEA,OAAA,KAGA,IAAAyjJ,KACAA,EAAA7sH,IAAA52B,EAAA42B,IACA6sH,EAAA3/N,KAAAk8E,EAAAl8E,KACA2/N,EAAA9/N,OAAAq8E,EAAAr8E,OACA8/N,EAAA1kH,aACA,IAAA,IAAA7qG,EAAA,EAAAA,EAAA8mJ,EAAAnxF,SAAAD,MAAAjmE,OAAAuQ,IAAA,CAGA,IADA,IAAAwvN,GAAA,EACA7/N,EAAA,EAAAA,EAAAm8E,EAAA++B,UAAAp7G,OAAAE,IAEA,GAAAm3J,EAAAnxF,SAAAD,MAAA11D,GAAApQ,OAAAk8E,EAAA++B,UAAAl7G,GAAAC,KAAA,CAEA4/N,GAAA,EACA,IAAAC,EAAA3jJ,EAAA++B,UAAAl7G,GAAA4P,OAEA,GADAkwN,EAAA/yM,QAAA,EACAoqI,EAAAnxF,SAAAD,MAAA11D,GAAA0c,QAAA,SAAAoqI,EAAAnxF,SAAAD,MAAA11D,GAAA0c,OAAAriB,KAEA,IAAA,IAAA+zN,EAAA,EAAAA,EAAAmB,EAAA1kH,UAAAp7G,OAAA2+N,IAEAmB,EAAA1kH,UAAAujH,GAAAx+N,OAAAk3J,EAAAnxF,SAAAD,MAAA11D,GAAA0c,OAAA9sB,OAEA6/N,EAAA/yM,OAAA0xM,EACAqB,EAAA7hC,WAAA9mC,EAAAnxF,SAAAD,MAAA11D,GAAA0c,OAAA9sB,MAOA2/N,EAAA1kH,UAAAnwG,KAAA+0N,GACA,MAKA,IAAAD,EAAA,CAEA,IAAAE,EAAA5jJ,EAAA++B,UAAA,GAAAtrG,OACAmwN,EAAA9/N,KAAAk3J,EAAAnxF,SAAAD,MAAA11D,GAAApQ,KACA8/N,EAAAhzM,QAAA,EACA,IAAA,IAAAoxB,EAAA,EAAAA,EAAA4hL,EAAA3mL,KAAAt5C,OAAAq+C,IAEA4hL,EAAA3mL,KAAA+E,GAAA4nH,KAEAg6D,EAAA3mL,KAAA+E,GAAA4nH,IAAA/2J,IAAA,EAAA,EAAA,GAGA+wN,EAAA3mL,KAAA+E,GAAAm6K,KAEAyH,EAAA3mL,KAAA+E,GAAAm6K,IAAAtpN,IAAA,EAAA,EAAA,GAGA+wN,EAAA3mL,KAAA+E,GAAAk6K,KAEA0H,EAAA3mL,KAAA+E,GAAAk6K,IAAArpN,IAAA,EAAA,EAAA,EAAA,GAKA4wN,EAAA1kH,UAAAnwG,KAAAg1N,IAkBA,OAbA5oE,EAAAplI,SAAAooF,aAEAg9C,EAAAplI,SAAAooF,eAIAg9C,EAAAplI,SAAAooF,WAAApvG,KAAAihH,EAAA9W,cAAAwF,eAAAklH,EAAAzoE,EAAAnxF,SAAAD,QACAoxF,EAAA6oE,iBAEA7oE,EAAA6oE,eAAA,IAAAh0G,EAAAsT,eAAA63B,IAIAyoE,KAIArtM,IAAA,mBACAzxB,MAAA,SAAAm/N,EAAAztM,GAEAytM,EAAAjxN,IAAAm6B,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,KAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,KAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,KAAA2W,WAAA3W,EAAA,KAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,IAAA2W,WAAA3W,EAAA,KAAA2W,WAAA3W,EAAA,UAIAwkM,EAh6CA,IAw6CAhrG,EAAAgrG,UAGAv3N,EAAA,wCACA,mBACA,SAAAusH,GAmRA,OA9QAA,EAAAk0G,UAAA,SAAAjjH,GAEA+O,EAAArO,wBAAAv7G,KAAAZ,KAAAy7G,IAIA+O,EAAAk0G,UAAA9+N,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAArO,wBAAAv8G,YAEAuO,YAAAq8G,EAAAk0G,UAEAxtM,MAAA,SAAAiiC,EAAAwrK,GAEA,IAAAC,GAAAn+M,WAAAlT,MAAA,EAAAE,OAAA,EAAA4S,OAAA,KAAA0/F,YAAA,GAuCA,SAAA8+G,EAAAv/N,GAEA,OAAAA,EAAAo/G,WAAA,IACAp/G,EAAAo/G,WAAA,IAAA,IACAp/G,EAAAo/G,WAAA,IAAA,KACAp/G,EAAAo/G,WAAA,IAAA,IAeA,SAAAogH,EAAA3rK,EAAA4rK,EAAAxxN,EAAAE,GAOA,IALA,IAAAuxN,EAAAzxN,EAAAE,EAAA,EACAwxN,EAAA,IAAAxxL,WAAA0lB,EAAA4rK,EAAAC,GACAE,EAAA,IAAAzxL,WAAAuxL,GACA3sN,EAAA,EACAgN,EAAA,EACA3T,EAAA,EAAAA,EAAA+B,EAAA/B,IAEA,IAAA,IAAAhM,EAAA,EAAAA,EAAA6N,EAAA7N,IAAA,CAEA,IAAAmP,EAAAowN,EAAA5/M,GACA/B,EAAA2hN,IADA5/M,GAEA7J,EAAAypN,IADA5/M,GAEAzQ,EAAAqwN,IADA5/M,GACAA,IACA6/M,EAAA7sN,GAAAmD,EACA0pN,IADA7sN,GACAiL,EACA4hN,IADA7sN,GACAxD,EACAqwN,IADA7sN,GACAzD,EAAAyD,IAKA,OAAA6sN,EAIA,IAiDAC,EAjDAC,EAAAP,EAAA,QACAQ,EAAAR,EAAA,QACAS,EAAAT,EAAA,QACAU,EAAAV,EAAA,QA8BA5/G,EAAA,IAAAhxE,WAAAklB,EAAA,EA5BA,IA8BA,GAjHA,YAiHA8rD,EA1BA,GA6BA,OADA1wG,QAAAmJ,MAAA,8DACAknN,EAIA,GA9FA,GA8FA3/G,EAxBA,IA2BA,OADA1wG,QAAAmJ,MAAA,0EACAknN,EAMA,IAzFAt/N,EAyFAkgO,EAAAvgH,EAhCA,IAkCAwgH,GAAA,EAEA,OAAAD,GAEA,KAAAJ,EAEAD,EAAA,EACAP,EAAAv+M,OAAAmqG,EAAAnkH,qBACA,MAEA,KAAAg5N,EAEAF,EAAA,GACAP,EAAAv+M,OAAAmqG,EAAAjkH,sBACA,MAEA,KAAA+4N,EAEAH,EAAA,GACAP,EAAAv+M,OAAAmqG,EAAAhkH,sBACA,MAEA,KAAA+4N,EAEAJ,EAAA,EACAP,EAAAv+M,OAAAmqG,EAAA3jH,gBACA,MAEA,QAEA,KAAA,KAAAo4G,EA/DA,KAgEA,SAAAA,EA/DA,KAgEA,MAAAA,EA/DA,KAgEA,IAAAA,EA/DA,KAgEA,WAAAA,EA/DA,KAwEA,OADA1wG,QAAAmJ,MAAA,mDArIApY,EAqIAkgO,EAnIA1lL,OAAAkvE,aACA,IAAA1pH,EACAA,GAAA,EAAA,IACAA,GAAA,GAAA,IACAA,GAAA,GAAA,OAgIAs/N,EAPAa,GAAA,EACAN,EAAA,GACAP,EAAAv+M,OAAAmqG,EAAA1kH,WAWA84N,EAAA7+G,YAAA,EA7KA,OA+KAd,EA5FA,KA4FA,IAAA0/G,IAEAC,EAAA7+G,YAAA5gH,KAAA6L,IAAA,EAAAi0G,EA1FA,KA8FA,IAAAygH,EAAAzgH,EAnFA,IAqFA,GADA2/G,EAAA5+G,aA9KA,IA8KA0/G,GACAd,EAAA5+G,cA9KA,KA+KA0/G,MA9KA,KA+KAA,MA9KA,KA+KAA,MA9KA,KA+KAA,MA9KA,MA+KAA,MA9KA,MA+KAA,IAIA,OADAnxN,QAAAmJ,MAAA,mDACAknN,EAIAA,EAAArxN,MAAA0xG,EAhHA,GAiHA2/G,EAAAnxN,OAAAwxG,EAlHA,GA0HA,IANA,IAAA8/G,EAAA9/G,EAtHA,GAsHA,EAIAlsE,EAAA6rL,EAAA5+G,UAAA,EAAA,EAEAhtE,EAAA,EAAAA,EAAAD,EAAAC,IAKA,IAHA,IAAAzlC,EAAAqxN,EAAArxN,MACAE,EAAAmxN,EAAAnxN,OAEAjP,EAAA,EAAAA,EAAAogO,EAAA7+G,YAAAvhH,IAAA,CAEA,GAAAihO,EAEA,IAAAP,EAAAJ,EAAA3rK,EAAA4rK,EAAAxxN,EAAAE,GACAuxN,EAAAE,EAAA5gO,YAIA,IAAA0gO,EAAA7/N,KAAA6L,IAAA,EAAAuC,GAAA,EAAApO,KAAA6L,IAAA,EAAAyC,GAAA,EAAA0xN,EACAD,EAAA,IAAAzxL,WAAA0lB,EAAA4rK,EAAAC,GAIA,IAAAxtJ,GAAAxgD,KAAAkuM,EAAA3xN,MAAAA,EAAAE,OAAAA,GACAmxN,EAAAn+M,QAAAlX,KAAAioE,GAEAutJ,GAAAC,EAEAzxN,EAAApO,KAAA6L,IAAAuC,GAAA,EAAA,GACAE,EAAAtO,KAAA6L,IAAAyC,GAAA,EAAA,GAMA,OAAAmxN,KAMAp0G,EAAAk0G,YAGAzgO,EAAA,wCACA,mBACA,SAAAusH,GAwPA,OA7OAA,EAAAm1G,UAAA,SAAAlkH,GAEA+O,EAAArO,wBAAAv7G,KAAAZ,KAAAy7G,IAIA+O,EAAAm1G,UAAA//N,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAArO,wBAAAv8G,YAEAuO,YAAAq8G,EAAAm1G,UAEAzuM,MAAA,SAAAiiC,EAAAwrK,GAEA,IACA1/G,EAAA,IAAA9wE,YAAAglB,EAAA,EADA,IAGAysK,GACAzsK,OAAAA,EACA8rD,OAAAA,EACA0/G,YAAAA,GAGA,OAAA,WAAA1/G,EAAA,GAIAuL,EAAAm1G,UAAAE,SAAAD,GAEA,YAAA3gH,EAAA,IAIAuL,EAAAm1G,UAAAG,SAAAF,QAIArxN,QAAAmJ,MAAA,2CAQA8yG,EAAAm1G,UAAAE,SAAA,SAAAD,GAEA,IACAG,EAAA1/M,EADA4+F,EAAA2gH,EAAA3gH,OAIA+gH,EAAA/gH,EAAA,IACAghH,EAAAhhH,EAAA,GACAxxG,EAAAwxG,EAAA,GACA1xG,EAAA0xG,EAAA,GAEA8lE,EAAA9lE,EAAA,IACAihH,EAAAjhH,EAAA,IAEA,OAAAghH,GAEA,KAAA,EACAF,EAAA,EACA1/M,EAAAmqG,EAAA9jH,wBACA,MAEA,KAAA,EACAq5N,EAAA,EACA1/M,EAAAmqG,EAAA5jH,yBACA,MAEA,KAAA,EACAm5N,EAAA,EACA1/M,EAAAmqG,EAAA/jH,wBACA,MAEA,KAAA,EACAs5N,EAAA,EACA1/M,EAAAmqG,EAAA7jH,yBACA,MAEA,QACA4H,QAAAmJ,MAAA,2CAAAuoN,GAaA,OATAL,EAAAO,QAAA,GAAAH,EACAJ,EAAAG,IAAAA,EACAH,EAAAv/M,OAAAA,EACAu/M,EAAAryN,MAAAA,EACAqyN,EAAAnyN,OAAAA,EACAmyN,EAAAQ,YAAAr7C,EACA66C,EAAAM,WAAAA,EACAN,EAAA5/G,UAAA,IAAA+kE,EAEAv6D,EAAAm1G,UAAAU,SAAAT,IAIAp1G,EAAAm1G,UAAAG,SAAA,SAAAF,GAEA,IAuBAG,EAAA1/M,EAvBA4+F,EAAA2gH,EAAA3gH,OAEAq+F,EAAAr+F,EAAA,GACAxxG,EAAAwxG,EAAA,GACA1xG,EAAA0xG,EAAA,GACAihH,EAAAjhH,EAAA,GACAquD,EAAAruD,EAAA,GAMAqhH,EAAArhH,EAAA,IAEAshH,EAAAthH,EAAA,IAOAuhH,EAJA,IAIAlzD,EAGAmzD,EAAAH,EAAA,EA8BA,OAnCA,KAOAE,GAEAngN,EAAAogN,EAAAj2G,EAAA7jH,yBAAA6jH,EAAA/jH,wBACAs5N,EAAA,GAXA,KAaAS,GAEAngN,EAAAogN,EAAAj2G,EAAA5jH,yBAAA4jH,EAAA9jH,wBACAq5N,EAAA,GAIAxxN,QAAAmJ,MAAA,uCAAA8oN,GAIAZ,EAAAO,QAAA7iB,EACAsiB,EAAAG,IAAAA,EACAH,EAAAv/M,OAAAA,EACAu/M,EAAAryN,MAAAA,EACAqyN,EAAAnyN,OAAAA,EACAmyN,EAAAQ,YAAAG,EACAX,EAAAM,WAAAA,EAAA,EAIAN,EAAA5/G,UAAA,IAAAugH,EAEA/1G,EAAAm1G,UAAAU,SAAAT,IAKAp1G,EAAAm1G,UAAAU,SAAA,SAAAT,GAEA,IAAAc,GACAjgN,WACAlT,MAAAqyN,EAAAryN,MACAE,OAAAmyN,EAAAnyN,OACA4S,OAAAu/M,EAAAv/M,OACA0/F,YAAA6/G,EAAAM,WACAlgH,UAAA4/G,EAAA5/G,WAGA7sD,EAAAysK,EAAAzsK,OAEA4rK,EAAAa,EAAAO,QACAJ,EAAAH,EAAAG,IACAQ,EAAAX,EAAAQ,YACA3qC,EAAA,EACAhgI,EAAA,EACAkrK,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA,IAAAf,GAEAY,EAAA,EACAC,EAAA,IAIAD,EAAA,EACAC,EAAA,GAIAnrK,EAAAkrK,EAAAC,EAAAb,EAAA,EAEAW,EAAAjgN,QAAAniB,OAAAshO,EAAAM,WAAAK,EAIA,IAFA,IAAAQ,EAAA,EAEAA,EAAAnB,EAAAM,YAAA,CAEA,IAAAc,EAAApB,EAAAryN,OAAAwzN,EACAE,EAAArB,EAAAnyN,QAAAszN,EAGAD,EAAAG,EAAAL,GADAC,EAAAG,EAAAL,GAIA,IAAAE,EAAA,GACAC,EAAA,IAAAA,EAAA,GAEArrC,EAAAorC,EAAAC,EAAArrK,EAEA,IAAA,IAAAyrK,EAAA,EAAAA,EAAAX,EAAAW,IAAA,CAEA,IAAAhC,EAAA,IAAAzxL,WAAA0lB,EAAA4rK,EAAAtpC,GAEAjkH,GACAxgD,KAAAkuM,EACA3xN,MAAAyzN,EACAvzN,OAAAwzN,GAGAP,EAAAjgN,QAAAygN,EAAAtB,EAAAM,WAAAa,GAAAvvJ,EAEAutJ,GAAAtpC,EAIAsrC,IAIA,OAAAL,GAIAl2G,EAAAm1G,YAGA1hO,EAAA,wCACA,mBACA,SAAAusH,GAWAA,EAAA22G,UAAA,SAAA1lH,GAEA+O,EAAArO,wBAAAv7G,KAAAZ,KAAAy7G,IAIA+O,EAAA22G,UAAAvhO,UAAAC,OAAAM,OAAAN,OAAAkiB,OAAAyoG,EAAArO,wBAAAv8G,YAEAuO,YAAAq8G,EAAA22G,UAEAjwM,MAAA,SAAAiiC,EAAAwrK,GAEA,IAAAyC,EAAA,IAAAC,EAAAluK,EAAA,GAEA,OACA1yC,QAAA2gN,EAAA3gN,QAAAk+M,GACApxN,MAAA6zN,EAAAE,WACA7zN,OAAA2zN,EAAAG,YACAlhN,OAAA+gN,EAAA9vJ,iBACA0uC,UAAA,IAAAohH,EAAAI,cACAzhH,YAAAqhH,EAAAK,yBAOA,IAAAJ,EAAA,WAQA,SAAAA,EAAAzhB,EAAA8hB,GAEA1hO,KAAA4/M,YAAAA,EAKA,IAAA+hB,EAAA,IAAAl0L,WAAAztC,KAAA4/M,YAAA,EAAA,IACA,GAAA,MAAA+hB,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,IACA,MAAAA,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,IACA,KAAAA,EAAA,KACA,KAAAA,EAAA,IAXA,CAmBA,IAAAlsC,EAAAtnJ,YAAAulB,kBACAkuK,EAAA,IAAAlxH,SAAA1wG,KAAA4/M,YAAA,GAAA,GAAAnqB,GACAosC,EAAAD,EAAA96D,UAAA,GAAA,GACAV,EAAA,WAAAy7D,EAEA7hO,KAAAkvE,OAAA0yJ,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAA8hO,WAAAF,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAivE,SAAA2yJ,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAsxE,iBAAAswJ,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAA+hO,qBAAAH,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAshO,WAAAM,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAuhO,YAAAK,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAgiO,WAAAJ,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAiiO,sBAAAL,EAAA96D,UAAA,EAAA2uB,EAAArvB,GACApmK,KAAAwhO,cAAAI,EAAA96D,UAAA,GAAA2uB,EAAArvB,GACApmK,KAAAyhO,qBAAAG,EAAA96D,UAAA,GAAA2uB,EAAArvB,GACApmK,KAAAkiO,oBAAAN,EAAA96D,UAAA,GAAA2uB,EAAArvB,GAGA,IAAApmK,KAAAkvE,QAQAlvE,KAAAyhO,qBAAAtiO,KAAA6L,IAAA,EAAAhL,KAAAyhO,sBAGA,IAAAzhO,KAAAuhO,aAAA,IAAAvhO,KAAAgiO,WAMA,IAAAhiO,KAAAiiO,sBAMAjiO,KAAAwhO,gBAAAE,EAQA1hO,KAAAmiO,SAAAd,EAAAe,cANA7zN,QAAAC,KAAA,2BAAAkzN,EAAA,eAAA1hO,KAAAwhO,eANAjzN,QAAAC,KAAA,0CANAD,QAAAC,KAAA,yCAXAD,QAAAC,KAAA,oDA3BAD,QAAAmJ,MAAA,kCAsGA,OAzCA2pN,EAAAzhO,UAAA6gB,QAAA,SAAAk+M,GAUA,IARA,IAAAl+M,KAGAs+M,EAAAsC,EAAAgB,WAAAriO,KAAAkiO,oBACA30N,EAAAvN,KAAAshO,WACA7zN,EAAAzN,KAAAuhO,YACAxhH,EAAA4+G,EAAA3+N,KAAAyhO,qBAAA,EAEAlsI,EAAA,EAAAA,EAAAwqB,EAAAxqB,IAAA,CAEA,IAAA+sI,EAAA,IAAAr0L,WAAAjuC,KAAA4/M,YAAAmf,EAAA,GAAA,GACAA,GAAA,EAEA,IAAA,IAAA/rL,EAAA,EAAAA,EAAAhzC,KAAAwhO,cAAAxuL,IAAA,CAEA,IAAAksL,EAAA,IAAAzxL,WAAAztC,KAAA4/M,YAAAmf,EAAAuD,GAEA7hN,EAAAlX,MAAAynB,KAAAkuM,EAAA3xN,MAAAA,EAAAE,OAAAA,IAEAsxN,GAAAuD,EACAvD,GAAA,GAAAuD,EAAA,GAAA,EAGA/0N,EAAApO,KAAA6L,IAAA,EAAA,GAAAuC,GACAE,EAAAtO,KAAA6L,IAAA,EAAA,GAAAyC,GAIA,OAAAgT,GAIA4gN,EAAAgB,WAAA,GAEAhB,EAAAe,cAAA,EACAf,EAAAkB,cAAA,EACAlB,EAAAmB,OAAA,EACAnB,EAAAoB,OAAA,EAEApB,EAnIA,GAwIA,OAAA72G,EAAA22G,YAGAljO,EAAA,iDACA,mBACA,SAAAusH,GAgfA,OAreAA,EAAAk4G,iBAAA,aAEA,WAEA,IAAA9rL,EAAA,IAAA4zE,EAAApzG,QAAAy/B,EAAA,IAAA2zE,EAAApzG,QAQA,SAAAurN,EAAA74N,EAAAwkB,GAEA,IAAAquB,EAAA7yC,EAAAR,QAAAglB,GACAquB,GAAA,GAAA7yC,EAAAH,OAAAgzC,EAAA,GAIA,SAAAimL,EAAA9mM,EAAAztB,GAKA,IAIA7P,EAAAw0C,EAAA6vL,EAJAC,EAAAz0N,EAAA0Z,SAAAtX,WAAAqrB,EAAA/T,UACAg7M,EAAA,EAEAC,KACAzvM,EAAAuI,EAAAiX,MAAAz0C,OAGA,IAAAE,EAAA,EAAAA,EAAA+0B,EAAA/0B,KAEAw0C,EAAAlX,EAAAiX,MAAAv0C,IAEAykO,UAAA50N,IAEA20N,EAAAz5N,KAAAypC,GAQA,IAAAx0C,EAAA,EAAAA,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA0kO,EAAA,EACAlwL,EAAAlX,EAAAiX,MAAAv0C,GAEA,IAAA,IAAA+zB,EAAA,EAAAA,EAAAywM,EAAA1kO,OAAAi0B,IAAA,CAEAswM,EAAAG,EAAAzwM,GAEA,IAAA4wM,EAAAnwL,EAAAt5B,OAAA1J,IAAA6yN,EAAAnpN,QACAwpN,EAAA/jO,KAAA4L,IAAAm4N,GAAA,MAAAC,GAAA,GAIAJ,EAAA5jO,KAAA6L,IAAA+3N,EAAAG,GAOAF,EAAA1kO,OAAA,IAIAykO,EAAA,GAIA,IAAAK,EAAAN,EAAAC,EATA,EAWA,OAAAK,EAIA,SAAAC,EAAAh1N,GASA,GAAA,IAAAA,EAAAi1N,UAAAhlO,OAMA,OAHA+P,EAAAk1N,iBAAA,UACAl1N,EAAAm1N,cAAA,KAMAn1N,EAAAm1N,aAAA,IACAn1N,EAAAk1N,iBAAA,KAGA,IAAA,IAAA/kO,EAAA,EAAAA,EAAA6P,EAAAi1N,UAAAhlO,OAAAE,IAAA,CAEA,IAAAglO,EAAAZ,EAAAv0N,EAAAA,EAAAi1N,UAAA9kO,IAEA6P,EAAAk1N,mBAEAl1N,EAAAk1N,iBAAAl1N,EAAAi1N,UAAA9kO,GACA6P,EAAAm1N,aAAAA,EACAn1N,EAAAo1N,QAAAD,EACAn1N,EAAAq1N,UAAA,EACAr1N,EAAAs1N,UAAA,GAIAt1N,EAAAs1N,YACAt1N,EAAAq1N,WAAAF,EAEAA,EAAAn1N,EAAAo1N,UAEAp1N,EAAAk1N,iBAAAl1N,EAAAi1N,UAAA9kO,GACA6P,EAAAo1N,QAAAD,GAOAn1N,EAAAm1N,aAAAn1N,EAAAq1N,UAAAr1N,EAAAs1N,UAKA,SAAAC,EAAAv1N,EAAAogC,GAIA,IAFAlgC,QAAAs1N,OAAA,IAAAx1N,EAAA0kC,MAAAz0C,QAEA+P,EAAAi1N,UAAAhlO,QAAA,CAEA,IAAA4M,EAAAmD,EAAAi1N,UAAAx9J,MACA68J,EAAAz3N,EAAAo4N,UAAAj1N,GAIAs0N,EAAAl0L,EAAApgC,GAIA,SAAAy1N,EAAAvwN,EAAAw/B,GAEA4vL,EAAA5vL,EAAAx/B,GAEAA,EAAAtC,IAAA0xN,EAAApvN,EAAAtC,GAAA8hC,MAAAx/B,GACAA,EAAArC,IAAAyxN,EAAApvN,EAAArC,GAAA6hC,MAAAx/B,GACAA,EAAA8vG,IAAAs/G,EAAApvN,EAAA8vG,GAAAtwE,MAAAx/B,GAMA,IAHA,IACAtC,EAAAC,EADA6yN,GAAAxwN,EAAAtC,GAAAsC,EAAArC,GAAAqC,EAAA8vG,IAGA7kH,EAAA,EAAAA,EAAA,EAAAA,IAGA0S,EAAA6yN,GAAAvlO,EAAA,GAAA,IADAyS,EAAA8yN,EAAAvlO,KAGA0S,IAEAD,EAAA+yN,oBAAA9yN,GACAA,EAAA8yN,oBAAA/yN,IAMA,SAAAgzN,EAAAx1L,EAAAsE,EAAAjX,EAAAztB,GAIA,GAAAA,EAAA,CAQA,IAAA7P,EACA0lO,KAEA,IAAA1lO,EAAA,EAAAA,EAAAs9B,EAAAwnM,UAAAhlO,OAAAE,IAEA0lO,EAAA36N,KAAAuyB,EAAAwnM,UAAA9kO,IAMA,IAAAA,EAAAs9B,EAAAiX,MAAAz0C,OAAA,EAAAE,GAAA,EAAAA,IAEAs9B,EAAAiX,MAAAv0C,GAAAykO,UAAA50N,IAEAy1N,EAAAhoM,EAAAiX,MAAAv0C,GAAAu0C,GAOA,IAAAv0C,EAAAs9B,EAAAiX,MAAAz0C,OAAA,EAAAE,GAAA,EAAAA,IAEAs9B,EAAAiX,MAAAv0C,GAAA2lO,cAAAroM,EAAAztB,GAQA,IAHAu1N,EAAA9nM,EAAA2S,GAGAjwC,EAAA,EAAAA,EAAA0lO,EAAA5lO,OAAAE,IAEA6kO,EAAAa,EAAA1lO,SAvCAolO,EAAA9nM,EAAA2S,GA+CA,SAAA21L,EAAA31L,GAMA,IAFA,IAAA41L,EAAA51L,EAAA,GAEAjwC,EAAA,EAAAA,EAAAiwC,EAAAnwC,OAAAE,IAEAiwC,EAAAjwC,GAAAglO,aAAAa,EAAAb,eAEAa,EAAA51L,EAAAjwC,IAMA,OAAA6lO,EAMA,SAAAlpM,EAAAlqB,EAAAC,EAAAmyG,EAAAz0G,EAAAC,EAAAgD,GAEA7R,KAAA4O,EAAAA,EACA5O,KAAA6O,EAAAA,EACA7O,KAAA6R,EAAAA,EAEA7R,KAAAiR,GAAAA,EACAjR,KAAAkR,GAAAA,EACAlR,KAAAqjH,GAAAA,EAEArjH,KAAA0Z,OAAA,IAAA8wG,EAAApzG,QAEApX,KAAAskO,gBAEArzN,EAAA8hC,MAAAxpC,KAAAvJ,MACAiR,EAAAszN,kBAAArzN,GACAD,EAAAszN,kBAAAlhH,GAEAnyG,EAAA6hC,MAAAxpC,KAAAvJ,MACAkR,EAAAqzN,kBAAAtzN,GACAC,EAAAqzN,kBAAAlhH,GAGAA,EAAAtwE,MAAAxpC,KAAAvJ,MACAqjH,EAAAkhH,kBAAAtzN,GACAoyG,EAAAkhH,kBAAArzN,GAwDA,SAAAmqI,EAAAhtI,EAAAogB,GAEAzuB,KAAA+nB,SAAA1Z,EAEArO,KAAAyuB,GAAAA,EAEAzuB,KAAA+yC,SACA/yC,KAAAsjO,aAGAtjO,KAAAwjO,aAAA,EACAxjO,KAAAujO,iBAAA,KA/DApoM,EAAAv7B,UAAA0kO,cAAA,WAEA,IAAAhuL,EAAAt2C,KAAAiR,GAAA8W,SACAwuB,EAAAv2C,KAAAkR,GAAA6W,SACAyuB,EAAAx2C,KAAAqjH,GAAAt7F,SAEA6uB,EAAA5nC,WAAAwnC,EAAAD,GACAM,EAAA7nC,WAAAsnC,EAAAC,GACAK,EAAA3mC,MAAA4mC,GAAAvmC,YAEAtQ,KAAA0Z,OAAAtL,KAAAwoC,IAIAzb,EAAAv7B,UAAAqjO,UAAA,SAAA50N,GAEA,OAAAA,IAAArO,KAAAiR,IAAA5C,IAAArO,KAAAkR,IAAA7C,IAAArO,KAAAqjH,IAIAloF,EAAAv7B,UAAAukO,cAAA,SAAAK,EAAAC,GAEAD,IAAAxkO,KAAAiR,GAAAjR,KAAAiR,GAAAwzN,EACAD,IAAAxkO,KAAAkR,GAAAlR,KAAAkR,GAAAuzN,EACAD,IAAAxkO,KAAAqjH,KAAArjH,KAAAqjH,GAAAohH,GAEA9B,EAAA6B,EAAAzxL,MAAA/yC,MACAykO,EAAA1xL,MAAAxpC,KAAAvJ,MAGAwkO,EAAAR,oBAAAhkO,KAAAiR,IACAjR,KAAAiR,GAAA+yN,oBAAAQ,GAEAA,EAAAR,oBAAAhkO,KAAAkR,IACAlR,KAAAkR,GAAA8yN,oBAAAQ,GAEAA,EAAAR,oBAAAhkO,KAAAqjH,IACArjH,KAAAqjH,GAAA2gH,oBAAAQ,GAEAxkO,KAAAiR,GAAAszN,kBAAAvkO,KAAAkR,IACAlR,KAAAiR,GAAAszN,kBAAAvkO,KAAAqjH,IAEArjH,KAAAkR,GAAAqzN,kBAAAvkO,KAAAiR,IACAjR,KAAAkR,GAAAqzN,kBAAAvkO,KAAAqjH,IAEArjH,KAAAqjH,GAAAkhH,kBAAAvkO,KAAAiR,IACAjR,KAAAqjH,GAAAkhH,kBAAAvkO,KAAAkR,IAEAlR,KAAAskO,iBAmBAjpF,EAAAz7I,UAAA2kO,kBAAA,SAAAzpL,GAtVA,IAAAhxC,EAAAwkB,EAAAxkB,EAwVA9J,KAAAsjO,UAxVAh1M,EAwVAwsB,GAtVA,IAAAhxC,EAAAR,QAAAglB,IAAAxkB,EAAAP,KAAA+kB,IA0VA+sH,EAAAz7I,UAAAokO,oBAAA,SAAA94N,GAEA,IAAAo4N,EAAAtjO,KAAAsjO,UACAvwL,EAAA/yC,KAAA+yC,MAEA1hC,EAAAiyN,EAAAh6N,QAAA4B,GACA,IAAA,IAAAmG,EAAA,CACA,IAAA,IAAA7S,EAAA,EAAAA,EAAAu0C,EAAAz0C,OAAAE,IAEA,GAAAu0C,EAAAv0C,GAAAykO,UAAA/3N,GAAA,OAIAo4N,EAAA35N,OAAA0H,EAAA,KAIAm5G,EAAAk4G,iBAAA9iO,UAAA8kO,OAAA,SAAAn0M,EAAA1U,GAEA0U,EAAAmkB,mBAEAnkB,GAAA,IAAAi6F,EAAA3vE,UAAAE,mBAAAxqB,IAIAA,EAAAwsB,gBAEA,IAOAv+C,EAAA+0B,EAsCAoxM,EA7CAC,EAAAr0M,EAAAke,SACAo2L,EAAAt0M,EAAAwiB,MAGAtE,KACAsE,KAUA,IAAAv0C,EAAA,EAAA+0B,EAAAqxM,EAAAtmO,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAAs8C,EAAA,IAAAugG,EAAAupF,EAAApmO,GAAAA,GACAiwC,EAAAllC,KAAAuxC,GAMA,IAAAt8C,EAAA,EAAA+0B,EAAAsxM,EAAAvmO,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAAw0C,EAAA6xL,EAAArmO,GAEAoQ,EAAAokC,EAAApkC,EACAC,EAAAmkC,EAAAnkC,EACAgD,EAAAmhC,EAAAnhC,EAEAqjB,EAAA,IAAAiG,EAAAsT,EAAA7/B,GAAA6/B,EAAA5/B,GAAA4/B,EAAA58B,GAAAjD,EAAAC,EAAAgD,GACAkhC,EAAAxpC,KAAA2rB,GAMA,IAAA12B,EAAA,EAAA+0B,EAAAkb,EAAAnwC,OAAAE,EAAA+0B,EAAA/0B,IAEA6kO,EAAA50L,EAAAjwC,IAQA,IAFA,IAAAwO,EAAA6O,EAEA7O,KAAA,CAIA,KAFA23N,EAAAP,EAAA31L,IAEA,CAEAlgC,QAAA5B,IAAA,0CACA,MAIAs3N,EAAAx1L,EAAAsE,EAAA4xL,EAAAA,EAAApB,kBAMA,IAAAuB,EAAA,IAAAt6G,EAAAn2E,eACAtsB,KACAxnB,KAIA,IAAA/B,EAAA,EAAAA,EAAAiwC,EAAAnwC,OAAAE,IAAA,CAEA,IAAAs8C,EAAArM,EAAAjwC,GAAAupB,SACAA,EAAAxe,KAAAuxC,EAAAp7C,EAAAo7C,EAAApvC,EAAAovC,EAAA9tC,GAMA,IAAAxO,EAAA,EAAAA,EAAAu0C,EAAAz0C,OAAAE,IAAA,CAEA,IAAAw0C,EAAAD,EAAAv0C,GAEAoQ,EAAA6/B,EAAAnlC,QAAA0pC,EAAA/hC,IACApC,EAAA4/B,EAAAnlC,QAAA0pC,EAAA9hC,IACAW,EAAA48B,EAAAnlC,QAAA0pC,EAAAqwE,IAEA9iH,EAAAgJ,KAAAqF,EAAAC,EAAAgD,GASA,OAHAizN,EAAAhwL,aAAA,WAAA,IAAA01E,EAAAp8E,uBAAArmB,EAAA,IACA+8M,EAAAlwL,SAAAr0C,GAEAukO,GA7dA,GAmeAt6G,EAAAk4G,mBAGAzkO,EAAA,oDACA,mBACA,SAAAusH,GAgaA,OA/YAA,EAAAu6G,oBAAA,SAAAC,GAEAhlO,KAAAglO,kBAAAhmO,IAAAgmO,EAAA,EAAAA,GAKAx6G,EAAAu6G,oBAAAnlO,UAAA8kO,OAAA,SAAAn0M,IAIAA,EAFAA,EAAAmkB,kBAEA,IAAA81E,EAAA3vE,UAAAE,mBAAAxqB,GAIAA,EAAAriB,SAIA6uC,gBAIA,IAFA,IAAAkoL,EAAAjlO,KAAAglO,aAEAC,KAAA,GAEAjlO,KAAAg4M,OAAAznL,GAOA,OAHAA,EAAA6lB,qBACA7lB,EAAA8lB,uBAEA9lB,GAIA,WAGA,IAAA20M,GAAA,IAAA,IAAA,KAGA,SAAAC,EAAAv2N,EAAAC,EAAAk9B,GAEA,IAAAq5L,EAAAjmO,KAAA4L,IAAA6D,EAAAC,GACAw2N,EAAAlmO,KAAA6L,IAAA4D,EAAAC,GAEAkiB,EAAAq0M,EAAA,IAAAC,EAEA,OAAAt5L,EAAAhb,GAKA,SAAAu0M,EAAA12N,EAAAC,EAAA4/B,EAAA1C,EAAAiH,EAAAuyL,GAEA,IAKAxpI,EALAqpI,EAAAjmO,KAAA4L,IAAA6D,EAAAC,GACAw2N,EAAAlmO,KAAA6L,IAAA4D,EAAAC,GAEAkiB,EAAAq0M,EAAA,IAAAC,EAIA,GAAAt0M,KAAAgb,EAEAgwD,EAAAhwD,EAAAhb,OAEA,CAEA,IAAAy0M,EAAA/2L,EAAA22L,GACAK,EAAAh3L,EAAA42L,GAEAtpI,GAEAntF,EAAA42N,EACA32N,EAAA42N,EACAC,QAAA,KAGA3yL,UAIAhH,EAAAhb,GAAAgrE,EAIAA,EAAAhpD,MAAAxpC,KAAAypC,GAEAuyL,EAAA32N,GAAAotF,MAAAzyF,KAAAwyF,GACAwpI,EAAA12N,GAAAmtF,MAAAzyF,KAAAwyF,GA2BA,SAAA4pI,EAAAC,EAAAh3N,EAAAC,EAAAgD,EAAAm1B,GAEA4+L,EAAAr8N,KAAA,IAAAihH,EAAA1jF,MAAAl4B,EAAAC,EAAAgD,OAAA7S,OAAAA,EAAAgoC,IAIA,SAAAsqG,EAAA1iI,EAAAC,GAEA,OAAA1P,KAAAkR,IAAAxB,EAAAD,GAAA,EAAAzP,KAAA4L,IAAA6D,EAAAC,GAIA,SAAAg3N,EAAAC,EAAAl3N,EAAAC,EAAAgD,GAEAi0N,EAAAv8N,MAAAqF,EAAAV,QAAAW,EAAAX,QAAA2D,EAAA3D,UAOAs8G,EAAAu6G,oBAAAnlO,UAAAo4M,OAAA,SAAAznL,GAEA,IAEAq0M,EAAAC,EAAAkB,EACAC,EAAAJ,EAEA16N,EAAA1M,EAAA+0B,EAAAopB,EACA4oL,EAGAU,EAAAC,EAAAC,EATAhoN,EAAA,IAAAqsG,EAAApzG,QAGAgvN,KAQAxB,EAAAr0M,EAAAke,SACAo2L,EAAAt0M,EAAAwiB,MAGA,IAiCA22F,EAAA28F,EAAAX,EAAA1yL,EACAszL,EAAAC,EAAAC,EA+DAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAlGAl4I,OAAA7vF,KAFA+mO,EAAAx1M,EAAA4iB,eAEA,IAAA4yL,EAAA,GAAAznO,OAAA,EAEA,GAAAuwF,EAEA,IAAA,IAAAt8D,EAAA,EAAAA,EAAAwzM,EAAAznO,OAAAi0B,IAEA6zM,EAAA78N,SA8BA,IAAA/K,KAlBA+mO,EAAA,IAAA5iN,MAAAiiN,EAAAtmO,QA9EA,SAAAmwC,EAAAsE,EAAAwyL,EAAAvpI,GAEA,IAAAx9F,EAAA+0B,EAAAyf,EAEA,IAAAx0C,EAAA,EAAA+0B,EAAAkb,EAAAnwC,OAAAE,EAAA+0B,EAAA/0B,IAEA+mO,EAAA/mO,IAAAw9F,UAIA,IAAAx9F,EAAA,EAAA+0B,EAAAwf,EAAAz0C,OAAAE,EAAA+0B,EAAA/0B,IAIA8mO,GAFAtyL,EAAAD,EAAAv0C,IAEAoQ,EAAAokC,EAAAnkC,EAAA4/B,EAAAutD,EAAAhpD,EAAAuyL,GACAD,EAAAtyL,EAAAnkC,EAAAmkC,EAAAnhC,EAAA48B,EAAAutD,EAAAhpD,EAAAuyL,GACAD,EAAAtyL,EAAAnhC,EAAAmhC,EAAApkC,EAAA6/B,EAAAutD,EAAAhpD,EAAAuyL,GAiEAyB,CAAApC,EAAAC,EAAAU,EAFAU,MAaAC,KAIAD,EAAA,CA6BA,IA3BAI,EAAAJ,EAAAznO,GACAknO,EAAA,IAAAl7G,EAAApzG,QAEAkvN,EAAA,EAAA,EACAC,EAAA,EAAA,EAKA,IAHAC,EAAAH,EAAAtzL,MAAAz0C,UAMAgoO,EAAA,GACAC,EAAA,GAUAb,EAAAj3N,WAAA43N,EAAAz3N,EAAAy3N,EAAAx3N,GAAAM,eAAAm3N,GAEAnoN,EAAA3Q,IAAA,EAAA,EAAA,GAEA+kB,EAAA,EAAAA,EAAAi0M,EAAAj0M,IAAA,CAIA,IAFAygB,EAAAqzL,EAAAtzL,MAAAxgB,GAEAoqB,EAAA,EAAAA,EAAA,KAEA+sF,EAAAk7F,EAAA5xL,EAAAkyL,EAAAvoL,QACA0pL,EAAAz3N,GAAA86H,IAAA28F,EAAAx3N,GAHA8tC,KAOAx+B,EAAA7P,IAAAo7H,GAIAvrH,EAAAhP,eAAAo3N,GACAb,EAAAp3N,IAAA6P,GAEAkoN,EAAAX,QAAAQ,EAAA5nO,OACA4nO,EAAA38N,KAAAm8N,GAiBA,IAFAS,KAEA3nO,EAAA,EAAA+0B,EAAAqxM,EAAAtmO,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAsDA,IApDAsoO,EAAAlC,EAAApmO,GAGAqoO,EAAAtB,EAAA/mO,GAAAw9F,MAGA,IAFA9wF,EAAA27N,EAAAvoO,QAIAmoO,EAAA,EAAA,GAEAv7N,EAAA,IAEAu7N,EAAA,GAAA,EAAAv7N,IAOAw7N,EAAA,EAAAx7N,EAAAu7N,EACAE,EAAAF,EAEAv7N,GAAA,GAKA,GAAAA,IAGAw7N,EAAA,IACAC,EAAA,EAAA,GAiBAI,EAAAD,EAAA54N,QAAAiB,eAAAu3N,GAEAvoN,EAAA3Q,IAAA,EAAA,EAAA,GAEA+kB,EAAA,EAAAA,EAAArnB,EAAAqnB,IAEAq0M,EAAAC,EAAAt0M,GACAm3G,EAAAk9F,EAAAh4N,IAAAk4N,EAAAF,EAAAh4N,EAAAg4N,EAAA/3N,EACAsP,EAAA7P,IAAAo7H,GAIAvrH,EAAAhP,eAAAw3N,GACAI,EAAAz4N,IAAA6P,GAEAgoN,EAAA58N,KAAAw9N,GAaAf,EAAAG,EAAA1+H,OAAAy+H,GACA,IAAArqI,EAAAC,EAAAmrI,EAGAlkN,EAAApQ,EAAAI,EAAAiV,EAHA6hF,EAAAs8H,EAAA7nO,OACAsnO,KAGA,IAAApoH,EAAA,IAAAgN,EAAA19G,QACAo6N,EAAA,IAAA18G,EAAA19G,QACAq6N,EAAA,IAAA38G,EAAA19G,QAEA,IAAAtO,EAAA,EAAA+0B,EAAAsxM,EAAAvmO,OAAAE,EAAA+0B,EAAA/0B,IAmBA,GAjBAw0C,EAAA6xL,EAAArmO,GAIAq9F,EAAAspI,EAAAnyL,EAAApkC,EAAAokC,EAAAnkC,EAAAo3N,GAAAP,QAAA77H,EACA/N,EAAAqpI,EAAAnyL,EAAAnkC,EAAAmkC,EAAAnhC,EAAAo0N,GAAAP,QAAA77H,EACAo9H,EAAA9B,EAAAnyL,EAAAnhC,EAAAmhC,EAAApkC,EAAAq3N,GAAAP,QAAA77H,EAIA87H,EAAAC,EAAA/pI,EAAAC,EAAAmrI,EAAAj0L,EAAAhM,eACA2+L,EAAAC,EAAA5yL,EAAApkC,EAAAitF,EAAAorI,EAAAj0L,EAAAhM,eACA2+L,EAAAC,EAAA5yL,EAAAnkC,EAAAitF,EAAAD,EAAA7oD,EAAAhM,eACA2+L,EAAAC,EAAA5yL,EAAAnhC,EAAAo1N,EAAAnrI,EAAA9oD,EAAAhM,eAIA6nD,EAEA,IAAA,IAAAt8D,EAAA,EAAAA,EAAAwzM,EAAAznO,OAAAi0B,IAEAxP,EAAAgjN,EAAAxzM,GAAA/zB,GAEAmU,EAAAoQ,EAAA,GACAhQ,EAAAgQ,EAAA,GACAiF,EAAAjF,EAAA,GAEAy6F,EAAAhwG,IAAA8jI,EAAA3+H,EAAAjT,EAAAqT,EAAArT,GAAA4xI,EAAA3+H,EAAAjH,EAAAqH,EAAArH,IACAw7N,EAAA15N,IAAA8jI,EAAAv+H,EAAArT,EAAAsoB,EAAAtoB,GAAA4xI,EAAAv+H,EAAArH,EAAAsc,EAAAtc,IACAy7N,EAAA35N,IAAA8jI,EAAA3+H,EAAAjT,EAAAsoB,EAAAtoB,GAAA4xI,EAAA3+H,EAAAjH,EAAAsc,EAAAtc,IAEAm6N,EAAAO,EAAA7zM,GAAAirF,EAAA0pH,EAAAC,GACAtB,EAAAO,EAAA7zM,GAAA5f,EAAA6qG,EAAA2pH,GAEAtB,EAAAO,EAAA7zM,GAAAxf,EAAAm0N,EAAA1pH,GACAqoH,EAAAO,EAAA7zM,GAAAvK,EAAAm/M,EAAAD,GASA32M,EAAAke,SAAAu3L,EACAz1M,EAAAwiB,MAAA6yL,EACA/2I,IAAAt+D,EAAA4iB,cAAAizL,IAnWA,GA2WA57G,EAAAu6G,sBAGA9mO,EAAA,8CACA,mBACA,SAAAusH,GAgNA,OA5LAA,EAAA48G,cAAA,aAEA58G,EAAA48G,cAAAxnO,WAEAuO,YAAAq8G,EAAA48G,cAEAl2M,MAAA,SAAAX,EAAAlP,GAGA,QAAAriB,IAAAqoO,mBAEA,MAAA,IAAAr5N,MAAA,iEAIAhP,IAAAqiB,IAEAA,GAEAimN,YAAA,EACAC,YAAA,EACAC,cAAAh9G,EAAA48G,cAAAK,0BACAC,cAAA,GAAA,EAAA,EAAA,EAAA,GACAC,WAAA,EACAC,eAAA,EACAC,aAAA,IAMA,IAAAC,EAAAT,qBACAU,EAAA,IAAAD,EAAAE,QACA10E,EAAA,IAAAw0E,EAAAG,YACAnrL,EAAA,IAAAgrL,EAAA7uL,KAEA,IAAA,IAAA1oB,EAAAilB,WAAA,CAEA,IAAAqpD,EAAA,IAAA2rB,EAAAn2E,eACAwqD,EAAA5rD,aAAA1iB,GACAA,EAAAsuE,EAIA,IAAA,IAAAtuE,EAAAmkB,iBAEA,MAAA,IAAA1mC,MAAA,oHAIA,IAAAygC,EAAAle,EAAAskB,aAAA,YACAy+G,EAAA40E,wBAAAprL,EAAAgrL,EAAAz8B,SAAA58J,EAAA5yB,MAAA4yB,EAAAvB,SAAAuB,EAAA3kC,OAEA,IAAAipC,EAAAxiB,EAAAokB,WAEA,GAAA,OAAA5B,EAEAugH,EAAA60E,eAAArrL,EAAA/J,EAAAl3B,MAAAk3B,EAAAjpC,WAEA,CAIA,IAFA,IAAAipC,EAAA,IAAAtE,EAAA5yB,MAAA,MAAAsyB,YAAAJ,aAAAU,EAAA5yB,OAEArd,EAAA,EAAAA,EAAAu0C,EAAAz0C,OAAAE,IAEAu0C,EAAAv0C,GAAAA,EAIA80J,EAAA60E,eAAArrL,EAAArO,EAAA5yB,MAAAk3B,GAIA,IAAA,IAAA1xB,EAAAumN,cAAA,CAEA,IAAAl5L,EAAAne,EAAAskB,aAAA,eAEA71C,IAAA0vC,GAEA4kH,EAAA40E,wBAAAprL,EAAAgrL,EAAAx8B,OAAA58J,EAAA7yB,MAAA6yB,EAAAxB,SAAAwB,EAAA5kC,OAMA,IAAA,IAAAuX,EAAAsmN,UAAA,CAEA,IAAA/4L,EAAAre,EAAAskB,aAAA,WAEA71C,IAAA4vC,GAEA0kH,EAAA40E,wBAAAprL,EAAAgrL,EAAAM,UAAAx5L,EAAA/yB,MAAA+yB,EAAA1B,SAAA0B,EAAA9kC,OAMA,IAAA,IAAAuX,EAAAwmN,YAAA,CAEA,IAAAl5L,EAAApe,EAAAskB,aAAA,cAEA71C,IAAA2vC,GAEA2kH,EAAA40E,wBAAAprL,EAAAgrL,EAAAO,MAAA15L,EAAA9yB,MAAA8yB,EAAAzB,SAAAyB,EAAA7kC,OAQA,IAAAw+N,EAAA,IAAAR,EAAAllD,eAgBA,GAZAmlD,EAAAQ,gBAAAlnN,EAAAkmN,aAAA,EAAAlmN,EAAAimN,aAAA,QAIAtoO,IAAAqiB,EAAAmmN,eAEAO,EAAAS,kBAAAnnN,EAAAmmN,oBAMAxoO,IAAAqiB,EAAAqmN,aAEA,IAAA,IAAAlpO,EAAA,EAAAA,EAAA,EAAAA,SAEAQ,IAAAqiB,EAAAqmN,aAAAlpO,IAEAupO,EAAAU,yBAAAjqO,EAAA6iB,EAAAqmN,aAAAlpO,IAQA,IAAAF,EAAAypO,EAAAW,wBAAA5rL,EAAAwrL,GAGA,GAFAR,EAAAxlK,QAAAxlB,GAEA,IAAAx+C,EAEA,MAAA,IAAA0P,MAAA,+CAOA,IAFA,IAAA26N,EAAA,IAAAp7L,UAAA,IAAAijE,YAAAlyG,IAEAE,EAAA,EAAAA,EAAAF,EAAAE,IAEAmqO,EAAAnqO,GAAA8pO,EAAA9kD,SAAAhlL,GAQA,OAJAspO,EAAAxlK,QAAAgmK,GACAR,EAAAxlK,QAAAylK,GACAD,EAAAxlK,QAAAgxF,GAEAq1E,IAQAn+G,EAAA48G,cAAAK,0BAAA,EACAj9G,EAAA48G,cAAAwB,yBAAA,EAIAp+G,EAAA48G,cAAA/iD,YAAA,EACA75D,EAAA48G,cAAAjjD,gBAAA,EAIA35D,EAAA48G,cAAAyB,SAAA,EACAr+G,EAAA48G,cAAA/7B,SAAA,EACA7gF,EAAA48G,cAAA97B,OAAA,EACA9gF,EAAA48G,cAAAiB,MAAA,EACA79G,EAAA48G,cAAAgB,UAAA,EACA59G,EAAA48G,cAAA0B,QAAA,EAEAt+G,EAAA48G,gBAGAnpO,EAAA,4CACA,mBACA,SAAAusH,GAwQA,OAnQAA,EAAAu+G,YAAA,aAEAv+G,EAAAu+G,YAAAnpO,WAEAuO,YAAAq8G,EAAAu+G,YAEA73M,MAAA,SAAA5C,GAEA,IAUA9vB,EAAA+zB,EAAAoqB,EAAA3yC,EAAAmB,EAVA7K,EAAA,GAEA0oO,EAAA,EACAC,EAAA,EACAC,EAAA,EAEApuL,EAAA,IAAA0vE,EAAApzG,QACAsC,EAAA,IAAA8wG,EAAApzG,QACA2L,EAAA,IAAAynG,EAAA19G,QAEAkmC,KA2OA,OAhBA1kB,EAAAa,SAAA,SAAAP,GAEAA,aAAA47F,EAAAvxE,MA3NA,SAAA6D,GAEA,IAAAqsL,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA94M,EAAAusB,EAAAvsB,SAEA+4M,EAAA,IAAA9+G,EAAA1vG,QAEAyV,aAAAi6F,EAAA3vE,WAEAtqB,GAAA,IAAAi6F,EAAAn2E,gBAAAzgB,cAAAkpB,IAIA,GAAAvsB,aAAAi6F,EAAAn2E,eAAA,CAGA,IAAA5F,EAAAle,EAAAskB,aAAA,YACAnG,EAAAne,EAAAskB,aAAA,UACAjG,EAAAre,EAAAskB,aAAA,MACAiC,EAAAvmB,EAAAokB,WAcA,GAXAr0C,GAAA,KAAAw8C,EAAAr+C,KAAA,KAGAq+C,EAAApsB,UAAAosB,EAAApsB,SAAAjyB,OAEA6B,GAAA,UAAAw8C,EAAApsB,SAAAjyB,KAAA,WAMAO,IAAAyvC,EAEA,IAAAjwC,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,IAAA2qO,IAEAruL,EAAAp7C,EAAA+uC,EAAAh9B,KAAAjT,GACAs8C,EAAApvC,EAAA+iC,EAAA/8B,KAAAlT,GACAs8C,EAAA9tC,EAAAyhC,EAAA9zB,KAAAnc,GAGAs8C,EAAAhjC,aAAAglC,EAAAjkC,aAGAvY,GAAA,KAAAw6C,EAAAp7C,EAAA,IAAAo7C,EAAApvC,EAAA,IAAAovC,EAAA9tC,EAAA,KAQA,QAAAhO,IAAA4vC,EAEA,IAAApwC,EAAA,EAAAwL,EAAA4kC,EAAA/yB,MAAArd,EAAAwL,EAAAxL,IAAA6qO,IAEAtmN,EAAArjB,EAAAkvC,EAAAn9B,KAAAjT,GACAukB,EAAArX,EAAAkjC,EAAAl9B,KAAAlT,GAGA8B,GAAA,MAAAyiB,EAAArjB,EAAA,IAAAqjB,EAAArX,EAAA,KAQA,QAAA1M,IAAA0vC,EAIA,IAFA46L,EAAAlrN,gBAAA0+B,EAAAjkC,aAEAra,EAAA,EAAAwL,EAAA0kC,EAAA7yB,MAAArd,EAAAwL,EAAAxL,IAAA4qO,IAEA1vN,EAAAha,EAAAgvC,EAAAj9B,KAAAjT,GACAkb,EAAAhO,EAAAgjC,EAAAh9B,KAAAlT,GACAkb,EAAA1M,EAAA0hC,EAAA/zB,KAAAnc,GAGAkb,EAAApK,aAAAg6N,GAAAh5N,YAGAhQ,GAAA,MAAAoZ,EAAAha,EAAA,IAAAga,EAAAhO,EAAA,IAAAgO,EAAA1M,EAAA,KAQA,GAAA,OAAA8pC,EAEA,IAAAt4C,EAAA,EAAAwL,EAAA8sC,EAAAj7B,MAAArd,EAAAwL,EAAAxL,GAAA,EAAA,CAEA,IAAA2M,EAAA,EAAAA,EAAA,EAAAA,IAEAonB,EAAAukB,EAAArlC,KAAAjT,EAAA2M,GAAA,EAEA6nC,EAAA7nC,GAAA69N,EAAAz2M,GAAAmc,GAAAE,EAAA,KAAAA,EAAAq6L,EAAA12M,EAAA,KAAAmc,EAAA,KAAAw6L,EAAA32M,GAAA,IAAA,IAKAjyB,GAAA,KAAA0yC,EAAA4R,KAAA,KAAA,UAMA,IAAApmD,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,GAAA,EAAA,CAEA,IAAA2M,EAAA,EAAAA,EAAA,EAAAA,IAEAonB,EAAA/zB,EAAA2M,EAAA,EAEA6nC,EAAA7nC,GAAA69N,EAAAz2M,GAAAmc,GAAAE,EAAA,KAAAA,EAAAq6L,EAAA12M,EAAA,KAAAmc,EAAA,KAAAw6L,EAAA32M,GAAA,IAAA,IAKAjyB,GAAA,KAAA0yC,EAAA4R,KAAA,KAAA,WAQAr2C,QAAAC,KAAA,2DAAA+hB,GAKAy4M,GAAAG,EACAF,GAAAI,EACAH,GAAAE,EAkFAG,CAAA36M,GAIAA,aAAA47F,EAAA7wB,MAlFA,SAAA5/D,GAEA,IAAAovM,EAAA,EAEA54M,EAAAwJ,EAAAxJ,SACArnB,EAAA6wB,EAAA7wB,KAEAqnB,aAAAi6F,EAAA3vE,WAEAtqB,GAAA,IAAAi6F,EAAAn2E,gBAAAzgB,cAAAmG,IAIA,GAAAxJ,aAAAi6F,EAAAn2E,eAAA,CAGA,IAAA5F,EAAAle,EAAAskB,aAAA,YAKA,GAFAv0C,GAAA,KAAAy5B,EAAAt7B,KAAA,UAEAO,IAAAyvC,EAEA,IAAAjwC,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,IAAA2qO,IAEAruL,EAAAp7C,EAAA+uC,EAAAh9B,KAAAjT,GACAs8C,EAAApvC,EAAA+iC,EAAA/8B,KAAAlT,GACAs8C,EAAA9tC,EAAAyhC,EAAA9zB,KAAAnc,GAGAs8C,EAAAhjC,aAAAiiB,EAAAlhB,aAGAvY,GAAA,KAAAw6C,EAAAp7C,EAAA,IAAAo7C,EAAApvC,EAAA,IAAAovC,EAAA9tC,EAAA,KAMA,GAAA,SAAA9D,EAAA,CAIA,IAFA5I,GAAA,KAEAiyB,EAAA,EAAAvoB,EAAAykC,EAAA5yB,MAAA0W,GAAAvoB,EAAAuoB,IAEAjyB,GAAA0oO,EAAAz2M,EAAA,IAIAjyB,GAAA,KAIA,GAAA,iBAAA4I,EAEA,IAAAyzC,GAAApqB,EAAA,GAAA,EAAAvoB,EAAAykC,EAAA5yB,MAAA0W,EAAAvoB,EAAA2yC,GAAApqB,GAAA,GAAA,EAEAjyB,GAAA,MAAA0oO,EAAAz2M,GAAA,KAAAy2M,EAAArsL,GAAA,UAQApuC,QAAAC,KAAA,2DAAA+hB,GAKAy4M,GAAAG,EAcAK,CAAA56M,KAMAtuB,IAMAkqH,EAAAu+G,cAGA9qO,EAAA,4CACA,mBACA,SAAAusH,GAqBA,IAEAv8F,EACAq7M,EAgJA,OAzJA9+G,EAAAi/G,YAAA,aAEAj/G,EAAAi/G,YAAA7pO,WAEAuO,YAAAq8G,EAAAi/G,YAEAv4M,OAEAjD,EAAA,IAAAu8F,EAAApzG,QACAkyN,EAAA,IAAA9+G,EAAA1vG,QAEA,SAAAkpC,EAAA3iC,QAEAriB,IAAAqiB,IAAAA,MAEA,IAAAqoN,OAAA1qO,IAAAqiB,EAAAqoN,QAAAroN,EAAAqoN,OAIAhpJ,KACAgK,EAAA,EA+BA,GA7BA1mC,EAAA70B,SAAA,SAAAb,GAEA,GAAAA,EAAA2B,OAAA,CAEA,IAAAM,EAAAjC,EAAAiC,SAEAA,EAAAmkB,mBAEAnkB,GAAA,IAAAi6F,EAAA3vE,UAAAE,mBAAAxqB,IAIAA,EAAAilB,aAEAk1C,GAAAn6D,EAAAwiB,MAAAz0C,OAEAoiF,EAAAn3E,MAEAgnB,SAAAA,EACA1X,YAAAyV,EAAAzV,kBAUA6wN,EAAA,CAEA,IAAAr4N,EAAA,GACAs4N,EAAA,EAAAj/I,EAAA,EAAAA,EAAA,EAAA,EAAA,GAAA,EACAk1H,EAAA,IAAApvG,YAAAm5H,GACArpO,EAAA,IAAAowG,SAAAkvG,GACAt/M,EAAAspO,UAAAv4N,EAAAq5E,GAAA,GAAAr5E,GAAA,EAEA,IAAA,IAAA7S,EAAA,EAAA+0B,EAAAmtD,EAAApiF,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA8vB,EAAAoyD,EAAAliF,GAEAiwC,EAAAngB,EAAAiC,SAAAke,SACAsE,EAAAzkB,EAAAiC,SAAAwiB,MACAl6B,EAAAyV,EAAAzV,YAEAywN,EAAAlrN,gBAAAvF,GAEA,IAAA,IAAA0Z,EAAA,EAAA4jB,EAAApD,EAAAz0C,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAAygB,EAAAD,EAAAxgB,GAEAtE,EAAA7f,KAAA4kC,EAAAt5B,QAAApK,aAAAg6N,GAAAh5N,YAEAhQ,EAAAupO,WAAAx4N,EAAA4c,EAAAvuB,GAAA,GAAA2R,GAAA,EACA/Q,EAAAupO,WAAAx4N,EAAA4c,EAAAviB,GAAA,GAAA2F,GAAA,EACA/Q,EAAAupO,WAAAx4N,EAAA4c,EAAAjhB,GAAA,GAAAqE,GAAA,EAIA,IAFA,IAAAylC,GAAA9D,EAAApkC,EAAAokC,EAAAnkC,EAAAmkC,EAAAnhC,GAEA8qC,EAAA,EAAAA,EAAA,EAAAA,IAEA1uB,EAAA7f,KAAAqgC,EAAAqI,EAAA6F,KAAA7kC,aAAAe,GAEAvY,EAAAupO,WAAAx4N,EAAA4c,EAAAvuB,GAAA,GAAA2R,GAAA,EACA/Q,EAAAupO,WAAAx4N,EAAA4c,EAAAviB,GAAA,GAAA2F,GAAA,EACA/Q,EAAAupO,WAAAx4N,EAAA4c,EAAAjhB,GAAA,GAAAqE,GAAA,EAIA/Q,EAAAwpO,UAAAz4N,EAAA,GAAA,GAAAA,GAAA,GAMA,OAAA/Q,EAIA,IAAAA,EAAA,GAEAA,GAAA,mBAEA,IAAA,IAAA9B,EAAA,EAAA+0B,EAAAmtD,EAAApiF,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA8vB,EAAAoyD,EAAAliF,GAEAiwC,EAAAngB,EAAAiC,SAAAke,SACAsE,EAAAzkB,EAAAiC,SAAAwiB,MACAl6B,EAAAyV,EAAAzV,YAEAywN,EAAAlrN,gBAAAvF,GAEA,IAAA,IAAA0Z,EAAA,EAAA4jB,EAAApD,EAAAz0C,OAAAi0B,EAAA4jB,EAAA5jB,IAAA,CAEA,IAAAygB,EAAAD,EAAAxgB,GAEAtE,EAAA7f,KAAA4kC,EAAAt5B,QAAApK,aAAAg6N,GAAAh5N,YAEAhQ,GAAA,kBAAA2tB,EAAAvuB,EAAA,IAAAuuB,EAAAviB,EAAA,IAAAuiB,EAAAjhB,EAAA,KACA1M,GAAA,mBAIA,IAFA,IAAAw2C,GAAA9D,EAAApkC,EAAAokC,EAAAnkC,EAAAmkC,EAAAnhC,GAEA8qC,EAAA,EAAAA,EAAA,EAAAA,IAEA1uB,EAAA7f,KAAAqgC,EAAAqI,EAAA6F,KAAA7kC,aAAAe,GAEAvY,GAAA,gBAAA2tB,EAAAvuB,EAAA,IAAAuuB,EAAAviB,EAAA,IAAAuiB,EAAAjhB,EAAA,KAIA1M,GAAA,gBACAA,GAAA,gBAQA,OAFAA,GAAA,yBAYAkqH,EAAAi/G,cAGAxrO,EAAA,6CACA,mBACA,SAAAusH,GAUA,IAAAi+E,GACAU,OAAA,EACAC,MAAA,EACAC,UAAA,EACAC,WAAA,EACAC,UAAA,EACAC,eAAA,EACAC,aAAA,EAEAC,cAAA,KACAC,eAAA,KACAjB,MAAA,KACAqhC,aAAA,KACAC,aAAA,MACAC,qBAAA,MAEAC,QAAA,KACAlhC,OAAA,KACAmhC,uBAAA,KACAC,sBAAA,KACAC,sBAAA,KACAC,qBAAA,KAEAC,cAAA,MACAC,gBAAA,MACAvhC,OAAA,OAGAwhC,KAEAA,EAAAjgH,EAAA9lH,eAAA+jM,EAAAyhC,QACAO,EAAAjgH,EAAA7lH,4BAAA8jM,EAAA0hC,uBACAM,EAAAjgH,EAAA5lH,2BAAA6jM,EAAA4hC,sBACAI,EAAAjgH,EAAA3lH,cAAA4jM,EAAAO,OACAyhC,EAAAjgH,EAAA1lH,2BAAA2jM,EAAA2hC,sBACAK,EAAAjgH,EAAAzlH,0BAAA0jM,EAAA6hC,qBAEAG,EAAAjgH,EAAAhmH,qBAAAikM,EAAA8hC,cACAE,EAAAjgH,EAAAjmH,gBAAAkkM,EAAAQ,OACAwhC,EAAAjgH,EAAA/lH,wBAAAgkM,EAAA+hC,gBAEA,IAAA3+B,GACAhtL,MAAA,QACAkJ,SAAA,cACArU,WAAA,WACA8lC,sBAAA,WAosEA,OA9rEAgxE,EAAAkgH,aAAA,aAEAlgH,EAAAkgH,aAAA9qO,WAEAuO,YAAAq8G,EAAAkgH,aAQAx5M,MAAA,SAAAgnJ,EAAAyyD,EAAAtpN,GAEA,IAAAupN,GACAlB,QAAA,EACAmB,KAAA,EACAC,aAAA,EACAC,mBAAA,EACAC,aAAA,EACAnhK,eAAA33C,EAAAA,EACAymF,cACAsyH,cAAA,EACAC,yBAAA,EACAC,yBAAA,IAGA9pN,EAAAxhB,OAAAM,UAAAyqO,EAAAvpN,IAEAs3F,WAAAr6G,OAAA,IAGA+iB,EAAAwpN,KAAA,GAIA,IA4BAO,EA5BAC,GAEArvD,OAEA/6J,QAAA,MACAsB,UAAA,uBAMA6gL,EAAA,EACArwI,KACAwyE,KACA+lG,EAAA,IAAArkD,IACA6nB,KACAzL,KACAkoC,GAEAr5E,OAAA,IAAA+0B,IACA3yI,WAAA,IAAA2yI,IACAukD,qBAAA,IAAAvkD,IACAv3J,UAAA,IAAAu3J,IACA5kK,SAAA,IAAA4kK,IACAxkK,OAAA,IAAAwkK,KAMAwkD,EAAA,IAAAxkD,IACAykD,EAAA,EAQA,SAAAC,EAAAr9M,GAIA,OAFAm9M,EAAAv/I,IAAA59D,IAAAm9M,EAAAj+N,IAAA8gB,EAAAo9M,KAEAD,EAAA1rO,IAAAuuB,GAUA,SAAAs9M,EAAAC,EAAAr0L,GAEA,OAAAq0L,EAAAvtO,SAAAk5C,EAAAl5C,QAAAutO,EAAAC,MAAA,SAAAh8M,EAAAvvB,GAEA,OAAAuvB,IAAA0nB,EAAAj3C,KA+JA,SAAAwrO,EAAAC,GAEA,OAAA,EAAA7sO,KAAAuN,KAAAs/N,EAAA,GAWA,SAAAC,EAAArsB,EAAAssB,GAEAA,EAAAA,GAAA,EAEA,IAAAC,EAAAJ,EAAAnsB,EAAA//B,YAEA,GAAAssD,IAAAvsB,EAAA//B,WAAA,CAEA,IAAA/1K,EAAA,IAAA2jC,WAAA0+L,GAGA,GAFAriO,EAAA0D,IAAA,IAAAigC,WAAAmyK,IAEA,IAAAssB,EAEA,IAAA,IAAA1tO,EAAAohN,EAAA//B,WAAArhL,EAAA2tO,EAAA3tO,IAEAsL,EAAAtL,GAAA0tO,EAMA,OAAApiO,EAAAqpD,OAIA,OAAAysJ,EAUA,SAAAwsB,EAAA99M,EAAA+9M,GAEA,GAAA,IAAAxsO,OAAA+3C,KAAAtpB,EAAAjC,UAAA/tB,OAMA,IAEA,IAAAu1G,EAAA9jF,KAAAmB,MAAAnB,KAAAC,UAAA1B,EAAAjC,WAEA,GAAAhL,EAAA8pN,yBAAAt3H,EAAA+4F,eAAA,CAQA,IAAA,IAAAtJ,UANAtkM,IAAAqtO,EAAAprL,aAEAorL,EAAAprL,eAIA4yD,EAAA+4F,eAEAy/B,EAAAprL,WAAAqiJ,GAAAzvF,EAAA+4F,eAAAtJ,GACAD,EAAAC,IAAA,SAIAzvF,EAAA+4F,eAIA/sM,OAAA+3C,KAAAi8D,GAAAv1G,OAAA,IAEA+tO,EAAAt/B,OAAAl5F,GAIA,MAAAn8F,GAEAnJ,QAAAC,KAAA,oCAAA8f,EAAA7vB,KAAA,2DACAiZ,EAAA4sE,UAUA,SAAAgoJ,EAAAz6B,EAAApwL,GAEA,IAAA8qN,GAAA,EACAC,KAEA,IAAA/qN,EAAApQ,OAAA3R,GAAA,IAAA+hB,EAAApQ,OAAA3F,IAEA8gO,EAAAn7N,OAAAoQ,EAAApQ,OAAAC,UACAi7N,GAAA,GAIA,IAAA9qN,EAAA/C,WAEA8tN,EAAA9tN,SAAA+C,EAAA/C,SACA6tN,GAAA,GAIA,IAAA9qN,EAAAd,OAAAjhB,GAAA,IAAA+hB,EAAAd,OAAAjV,IAEA8gO,EAAA3tN,MAAA4C,EAAAd,OAAArP,UACAi7N,GAAA,GAIAA,IAEA16B,EAAA5wJ,WAAA4wJ,EAAA5wJ,eACA4wJ,EAAA5wJ,WAAA,sBAAAurL,EACAnpC,EAAA,uBAAA,GAWA,SAAAopC,EAAAt5K,GAWA,OATAk4K,EAAAt4K,UAEAs4K,EAAAt4K,UAAA8sH,WAAA,KAKA9sH,EAAAxpD,KAAA4pD,GAEA,EA2JA,SAAAu5K,EAAAl7N,EAAA+e,EAAA0J,EAAApe,GAEA,IAUAmsL,EAGA,GAAAx2L,EAAA1H,MAAAqE,cAAAkgC,aAEA25J,EAAAS,EAAAC,WAEA,GAAAl3L,EAAA1H,MAAAqE,cAAAggC,YAEA65J,EAAAS,EAAAshC,kBAEA,GAAAv4N,EAAA1H,MAAAqE,cAAA4/B,YAEAi6J,EAAAS,EAAAkB,mBAEA,CAAA,GAAAn4L,EAAA1H,MAAAqE,cAAAs/B,WAMA,MAAA,IAAAz/B,MAAA,mEAJAg6L,EAAAS,EAAAiB,cAYA,QAJA1qM,IAAAi7B,IAAAA,EAAA,QACAj7B,IAAA6c,IAAAA,EAAArK,EAAAqK,OAGAwF,EAAA0pN,wBAAA/rO,IAAAuxB,GAAA,OAAAA,EAAAhwB,MAAA,CAEA,IAAA85B,EAAAJ,EAAApe,EACA8wN,EAAAp8M,EAAAkkB,UAAA54B,QAAAqW,EAAAA,EACA1gB,EAAAqK,MACA0U,EAAAkkB,UAAAxa,MAAA1J,EAAAkkB,UAAA54B,MAEAoe,EAAA96B,KAAA6L,IAAAivB,EAAA1J,EAAAkkB,UAAAxa,QACApe,EAAA1c,KAAA4L,IAAAsvB,EAAAsyM,GAAA1yM,GAEA,IAAApe,EAAA,GAKA,GAAA,IAAAA,EAEA,OAAA,KAIA,IAEA+wN,EAFAC,EAreA,SAAAr7N,EAAAyoB,EAAApe,GASA,IAPA,IAAAvb,GAEAyK,IAAA,IAAA4X,MAAAnR,EAAA07B,UAAA46K,KAAA7oN,OAAA6tO,mBACA9hO,IAAA,IAAA2X,MAAAnR,EAAA07B,UAAA46K,KAAA7oN,OAAA8tO,oBAIAvuO,EAAAy7B,EAAAz7B,EAAAy7B,EAAApe,EAAArd,IAEA,IAAA,IAAAoQ,EAAA,EAAAA,EAAA4C,EAAA07B,SAAAt+B,IAAA,CAEA,IAAAtP,EAAAkS,EAAA1H,MAAAtL,EAAAgT,EAAA07B,SAAAt+B,GACAtO,EAAAyK,IAAA6D,GAAAzP,KAAA4L,IAAAzK,EAAAyK,IAAA6D,GAAAtP,GACAgB,EAAA0K,IAAA4D,GAAAzP,KAAA6L,IAAA1K,EAAA0K,IAAA4D,GAAAtP,GAMA,OAAAgB,EAgdA0sO,CAAAx7N,EAAAyoB,EAAApe,QAMA7c,IAAAuxB,IAEAq8M,EAAAp7N,IAAA+e,EAAAhwB,MAAAkoM,EAAAwhC,qBAAAxhC,EAAAuhC,cAIA,IAAAziC,EAxNA,SAAA/1L,EAAAw2L,EAAA/tK,EAAApe,EAAAzb,GAEAirO,EAAA96B,cAEA86B,EAAA96B,gBAMA,IAAA08B,EAIAA,EAFAjlC,IAAAS,EAAAiB,cAEA,EAEA1B,IAAAS,EAAAkB,eAEA,EAIA,EAQA,IAJA,IAAA9pB,EAAAksD,EAAAlwN,EAAArK,EAAA07B,SAAA+/L,GACAnY,EAAA,IAAApkH,SAAA,IAAAF,YAAAqvE,IACAxuK,EAAA,EAEA7S,EAAAy7B,EAAAz7B,EAAAy7B,EAAApe,EAAArd,IAEA,IAAA,IAAAoQ,EAAA,EAAAA,EAAA4C,EAAA07B,SAAAt+B,IAAA,CAIA,IAAAtP,EAAAkS,EAAA1H,MAAAtL,EAAAgT,EAAA07B,SAAAt+B,GAEAo5L,IAAAS,EAAAC,MAEAosB,EAAA+U,WAAAx4N,EAAA/R,GAAA,GAEA0oM,IAAAS,EAAAshC,aAEAjV,EAAA8U,UAAAv4N,EAAA/R,GAAA,GAEA0oM,IAAAS,EAAAkB,eAEAmrB,EAAAgV,UAAAz4N,EAAA/R,GAAA,GAEA0oM,IAAAS,EAAAiB,eAEAorB,EAAAoY,SAAA77N,EAAA/R,GAIA+R,GAAA47N,EAMA,IAAAE,GAEAh6K,OAAAs5K,EAAA3X,EAAA3hK,QACAiwI,WAAAA,EACAvjB,WAAAA,QAIA7gL,IAAAoB,IAAA+sO,EAAA/sO,OAAAA,GAEAA,IAAAqoM,EAAAuhC,eAGAmD,EAAAt8B,WAAAr/L,EAAA07B,SAAA+/L,GAgBA,OAZA7pC,GAAAvjB,EAEAwrD,EAAA96B,YAAAhnM,KAAA4jO,IAKA1+M,GAAA48M,EAAA96B,YAAAjyM,OAAA,EACAuhL,WAAA,GAiIAutD,CAAA57N,EAAAw2L,EAAA/tK,EAAApe,EAAA+wN,GAEAS,GAEA9lC,WAAAA,EAAA94K,GACA20K,WAAAmE,EAAAnE,WACA4E,cAAAA,EACAnsL,MAAAA,EACA7Q,IAAA6hO,EAAA7hO,IACAD,IAAA8hO,EAAA9hO,IACA7B,MAhFAohE,EAAA,SACAC,EAAA,OACA+iK,EAAA,OACAC,EAAA,OACAC,GAAA,QA4EAh8N,EAAA07B,WAYA,OARAm+L,EAAAtjC,YAEAsjC,EAAAtjC,cAIAsjC,EAAAtjC,UAAAx+L,KAAA8jO,GAEAhC,EAAAtjC,UAAAzpM,OAAA,EAWA,SAAAmvO,EAAAvuN,EAAAmB,EAAAU,GAEAwqN,EAAA9oN,OAAAypE,IAAAhtE,IAEAqsN,EAAA9oN,OAAAjV,IAAA0R,MAIA,IAAAwuN,EAAAnC,EAAA9oN,OAAA1iB,IAAAmf,GACAk/F,EAAA/9F,IAAAmqG,EAAA1kH,WAAA,YAAA,aACAirB,EAAAqtF,EAAA,UAAAr9F,EAAA9gB,WAEA,QAAAjB,IAAA0uO,EAAA38M,GAEA,OAAA28M,EAAA38M,GAIAs6M,EAAA5oN,SAEA4oN,EAAA5oN,WAIA,IAAAkrN,GAAAvvH,SAAAA,GAEA,GAAA/8F,EAAA2pN,YAAA,CAEA,IAAA7rN,EAAAisN,EAAAA,GAAA9rN,SAAAsuJ,cAAA,UAEAzuJ,EAAA5R,MAAApO,KAAA4L,IAAAmU,EAAA3R,MAAA8T,EAAAwoD,gBACA1qD,EAAA1R,OAAAtO,KAAA4L,IAAAmU,EAAAzR,OAAA4T,EAAAwoD,gBAEAxoD,EAAA6pN,0BAnhBA,SAAAhsN,GAEA,OAAAsrG,EAAAm+B,UAAAn8I,aAAA0S,EAAA3R,QAAAi9G,EAAAm+B,UAAAn8I,aAAA0S,EAAAzR,QAihBAjB,CAAA2S,KAEA5Q,QAAAC,KAAA,gDAAA0Q,GAEAC,EAAA5R,MAAAi9G,EAAAm+B,UAAA97I,gBAAAsS,EAAA5R,OACA4R,EAAA1R,OAAA+8G,EAAAm+B,UAAA97I,gBAAAsS,EAAA1R,SAIA,IAAAmgO,EAAAzuN,EAAAM,WAAA,OAEA,IAAAsB,IAEA6sN,EAAA7uN,UAAA,EAAAI,EAAA1R,QACAmgO,EAAA/uN,MAAA,GAAA,IAIA+uN,EAAAhuN,UAAAV,EAAA,EAAA,EAAAC,EAAA5R,MAAA4R,EAAA1R,SAEA,IAAA4T,EAAAqoN,OAEAnkG,EAAAh8H,KAAA,IAAA42K,QAAA,SAAAC,GAEAjhK,EAAA0uN,OAAA,SAAAhhH,IA9MA,SAAAA,GAEAw+G,EAAA96B,cAEA86B,EAAA96B,gBAIA,OAAA,IAAApwB,QAAA,SAAAC,GAEA,IAAA7e,EAAA,IAAA1nF,OAAAi0J,WACAvsE,EAAAwsE,kBAAAlhH,GACA00C,EAAAysE,UAAA,WAEA,IAAA76K,EAAA84K,EAAA1qE,EAAA71F,QAEA67H,GACAp0I,OAAAs5K,EAAAt5K,GACAiwI,WAAAA,EACAvjB,WAAA1sH,EAAA0sH,YAGAujB,GAAAjwI,EAAA0sH,WAEAwrD,EAAA96B,YAAAhnM,KAAAg+L,GAEAnnB,EAAAirD,EAAA96B,YAAAjyM,OAAA,OAsLA2vO,CAAAphH,GAAAnuC,KAAA,SAAA4oH,GAEAqmC,EAAApmC,WAAAD,EAEAlnB,OAIAhiE,MAMAuvH,EAAAt9B,IAAAlxL,EAAAU,UAAAu+F,QAMAuvH,EAAAt9B,IAAAnxL,EAAAG,IAIAgsN,EAAA5oN,OAAAlZ,KAAAokO,GAEA,IAAAptO,EAAA8qO,EAAA5oN,OAAAnkB,OAAA,EAGA,OAFAovO,EAAA38M,GAAAxwB,EAEAA,EAqCA,SAAA2tO,EAAAniM,GAEA,GAAAw/L,EAAAlpN,SAAA6pE,IAAAngD,GAEA,OAAAw/L,EAAAlpN,SAAAtiB,IAAAgsC,GAIAs/L,EAAAhpN,WAEAgpN,EAAAhpN,aAIA,IAAA8rN,GAEA59D,QA5CA,SAAAxkI,GAEAs/L,EAAA36D,WAEA26D,EAAA36D,aAIA,IAAA09D,GAEAjuN,UAAAsqN,EAAA1+L,EAAA5rB,WACAC,UAAAqqN,EAAA1+L,EAAA3rB,WACAH,MAAAwqN,EAAA1+L,EAAA9rB,OACAC,MAAAuqN,EAAA1+L,EAAA7rB,QAMA,OAFAmrN,EAAA36D,SAAAnnK,KAAA6kO,GAEA/C,EAAA36D,SAAApyK,OAAA,EAyBA+vO,CAAAtiM,GACAtrC,OAAAgtO,EAAA1hM,EAAA7sB,MAAA6sB,EAAA1rB,OAAA0rB,EAAAhrB,QAIAgrB,EAAAttC,OAEA0vO,EAAA1vO,KAAAstC,EAAAttC,MAIA4sO,EAAAhpN,SAAA9Y,KAAA4kO,GAEA,IAAA5tO,EAAA8qO,EAAAhpN,SAAA/jB,OAAA,EAGA,OAFAitO,EAAAlpN,SAAA7U,IAAAu+B,EAAAxrC,GAEAA,EASA,SAAA+tO,EAAA59M,GAEA,GAAA66M,EAAA77M,UAAAw8D,IAAAx7D,GAEA,OAAA66M,EAAA77M,UAAA3vB,IAAA2wB,GAIA,GAAAA,EAAAyxB,iBAGA,OADA5zC,QAAAC,KAAA,qDACA,KAIA68N,EAAA37M,YAEA27M,EAAA37M,cAKA,IAAA6+M,GAEAlpC,yBAIA30K,EAAAmhB,qBAEA08L,EAAAttL,YAAAutL,wBAEAnrC,EAAA,qBAAA,GAEA3yK,EAAAq1K,kCAEAwoC,EAAAttL,YAAAwtL,wCAEAprC,EAAA,qCAAA,GAEA3yK,EAAAmhE,wBAEAtjF,QAAAC,KAAA,iFAKA,IAAAu4B,EAAArW,EAAAqW,MAAAz1B,UAAAm2F,QAAA/2E,EAAAoZ,UA0BA,GAxBA8hM,EAAA7kM,GAAA,EAAA,EAAA,EAAA,MAEAwnM,EAAAlpC,qBAAAC,gBAAAv+J,GAIArW,EAAAmhE,wBAEA08I,EAAAlpC,qBAAAqN,eAAAhiL,EAAAof,UACAy+L,EAAAlpC,qBAAAsN,gBAAAjiL,EAAAmf,WAEAnf,EAAAmhB,qBAEA08L,EAAAlpC,qBAAAqN,eAAA,EACA67B,EAAAlpC,qBAAAsN,gBAAA,KAIA47B,EAAAlpC,qBAAAqN,eAAA,GACA67B,EAAAlpC,qBAAAsN,gBAAA,IAKAjiL,EAAAq1K,iCAAA,CAEAwoC,EAAAlpC,qBAAAC,kBAEAipC,EAAAttL,WAAAwtL,oCAAA5nC,cAAA0nC,EAAAlpC,qBAAAC,iBAIA,IAAA0B,GAAA,EAAA,EAAA,GACAt2K,EAAAwf,SAAA5+B,QAAA01L,EAAA,GACAunC,EAAAttL,WAAAwtL,oCAAAznC,eAAAA,EAEAunC,EAAAttL,WAAAwtL,oCAAA1nC,iBAAAr2K,EAAA21K,WAKA,GAAA31K,EAAAwgB,cAAAxgB,EAAAugB,aAEA,GAAAvgB,EAAAwgB,eAAAxgB,EAAAugB,aAAA,CAEA,IAAAy9L,GAAAnuO,MAAA2tO,EAAAx9M,EAAAwgB,eACAo7L,EAAAoC,EAAAh+M,EAAAwgB,cACAq9L,EAAAlpC,qBAAAuN,yBAAA87B,OAIAngO,QAAAC,KAAA,qGAOA,GAAAkiB,EAAAqb,IAAA,CAEA,IAAA4iM,GAAApuO,MAAA2tO,EAAAx9M,EAAAqb,MACAugM,EAAAqC,EAAAj+M,EAAAqb,KAEArb,EAAAq1K,mCAEAwoC,EAAAttL,WAAAwtL,oCAAA3nC,eAAA6nC,GAIAJ,EAAAlpC,qBAAAE,iBAAAopC,EAKA,GAAAj+M,EAAAq1K,kCAAAr1K,EAAA0b,YAAA,CAEA,IAAAwiM,GAAAruO,MAAA2tO,EAAAx9M,EAAA0b,cACAkgM,EAAAsC,EAAAl+M,EAAA0b,aACAmiM,EAAAttL,WAAAwtL,oCAAAxnC,0BAAA2nC,EAIA,GAAAl+M,EAAAsf,SAAA,CAGA,IAAAA,EAAAtf,EAAAsf,SAAA9hC,QAAAiB,eAAAuhB,EAAAuf,mBAAA3+B,UASA,GAPAs6N,EAAA57L,GAAA,EAAA,EAAA,MAEAu+L,EAAAr7B,eAAAljK,GAKAtf,EAAAygB,YAAA,CAEA,IAAA09L,GAAAtuO,MAAA2tO,EAAAx9M,EAAAygB,cACAm7L,EAAAuC,EAAAn+M,EAAAygB,aACAo9L,EAAAp7B,gBAAA07B,GAOA,GAAAn+M,EAAAigB,UAAA,CAEA,IAAAm+L,GAAAvuO,MAAA2tO,EAAAx9M,EAAAigB,YAEAjgB,EAAAmgB,cAAA,IAAAngB,EAAAmgB,YAAAnxC,IAEAgxB,EAAAmgB,YAAAnxC,IAAAgxB,EAAAmgB,YAAAnlC,GAEA6C,QAAAC,KAAA,0FAIAsgO,EAAAjwN,MAAA6R,EAAAmgB,YAAAnxC,GAIA4sO,EAAAwC,EAAAp+M,EAAAigB,WAEA49L,EAAAx7B,cAAA+7B,EAKA,GAAAp+M,EAAAwb,MAAA,CAEA,IAAA6iM,GACAxuO,MAAA2tO,EAAAx9M,EAAAwb,OACAk8J,SAAA,GAGA,IAAA13K,EAAAyb,iBAEA4iM,EAAA97B,SAAAviL,EAAAyb,gBAIAmgM,EAAAyC,EAAAr+M,EAAAwb,OAEAqiM,EAAAv7B,iBAAA+7B,EAKAr+M,EAAAqZ,YAEAwkM,EAAA17B,UAAA,QAIAniL,EAAAib,UAAA,IAEA4iM,EAAA17B,UAAA,OACA07B,EAAAz7B,YAAApiL,EAAAib,WAOAjb,EAAAiZ,OAAA6gF,EAAAnpH,aAEAktO,EAAA5uK,aAAA,GAIA,KAAAjvC,EAAAjyB,OAEA8vO,EAAA9vO,KAAAiyB,EAAAjyB,MAIA2tO,EAAA17M,EAAA69M,GAEAlD,EAAA37M,UAAAnmB,KAAAglO,GAEA,IAAAhuO,EAAA8qO,EAAA37M,UAAApxB,OAAA,EAGA,OAFAitO,EAAA77M,UAAAliB,IAAAkjB,EAAAnwB,GAEAA,EASA,SAAAyuO,EAAAlyL,GAEA,IAAAmyL,GAAAnyL,EAAAvsB,SAAA3lB,MACA,GAAA+X,MAAAC,QAAAk6B,EAAApsB,UAEA,IAAA,IAAAlyB,EAAA,EAAAwL,EAAA8yC,EAAApsB,SAAApyB,OAAAE,EAAAwL,EAAAxL,IAEAywO,EAAA1lO,KAAAuzC,EAAApsB,SAAAlyB,GAAAoM,WAMAqkO,EAAA1lO,KAAAuzC,EAAApsB,SAAA9lB,MAIA,IAAAskO,EAAAD,EAAArqL,KAAA,KACA,GAAA2mL,EAAAr5E,OAAAhmE,IAAAgjJ,GAEA,OAAA3D,EAAAr5E,OAAAnyJ,IAAAmvO,GAIA,IAEAtkJ,EAFAr6D,EAAAusB,EAAAvsB,SAOAq6D,EAFA9tC,EAAA6zC,eAEA83G,EAAAW,MAEAtsJ,EAAA8zC,WAEA63G,EAAAY,UAEAvsJ,EAAAzsB,OAEAo4K,EAAAa,WAEAxsJ,EAAAxsB,SAEAm4K,EAAAU,OAIArsJ,EAAApsB,SAAAgc,UAAA+7J,EAAAW,MAAAX,EAAAc,UAIAh5K,EAAAmkB,mBAEAnmC,QAAAC,KAAA,qGACA+hB,GAAA,IAAAi6F,EAAAn2E,gBAAAzgB,cAAAkpB,IAIA,IAAAqyL,KAEA76L,KACAojI,KACA9c,KAGAw0E,GAEArsN,GAAA,aACAmZ,IAAA,aACA6K,MAAA,UACAmxD,WAAA,YACAu7E,UAAA,YAIA47D,EAAA9+M,EAAAskB,aAAA,eAEA71C,IAAAqwO,GAz8BA,SAAA31N,GAEA,GAAA6xN,EAAAC,qBAAAt/I,IAAAxyE,GAEA,OAAA,EAMA,IAFA,IAAArL,EAAA,IAAAm8G,EAAApzG,QAEA5Y,EAAA,EAAA+0B,EAAA7Z,EAAAmC,MAAArd,EAAA+0B,EAAA/0B,IAGA,GAAAW,KAAAkR,IAAAhC,EAAA+C,UAAAsI,EAAA5P,MAAA,EAAAtL,GAAAF,SAAA,GAAA,KAAA,OAAA,EAIA,OAAA,EAw7BAgxO,CAAAD,KAEA9gO,QAAAC,KAAA,yFAEA+hB,EAAAukB,aAAA,SAj7BA,SAAAp7B,GAEA,GAAA6xN,EAAAC,qBAAAt/I,IAAAxyE,GAEA,OAAA6xN,EAAAC,qBAAAzrO,IAAA2Z,GAQA,IAJA,IAAAlI,EAAAkI,EAAAxL,QAEAG,EAAA,IAAAm8G,EAAApzG,QAEA5Y,EAAA,EAAA+0B,EAAA/hB,EAAAqK,MAAArd,EAAA+0B,EAAA/0B,IAEA6P,EAAA+C,UAAAI,EAAA1H,MAAA,EAAAtL,GAEA,IAAA6P,EAAA3O,GAAA,IAAA2O,EAAA3C,GAAA,IAAA2C,EAAArB,EAGAqB,EAAAR,KAAA,GAIAQ,EAAAiC,YAIAjC,EAAAiD,QAAAE,EAAA1H,MAAA,EAAAtL,GAMA,OAFA+sO,EAAAC,qBAAAh+N,IAAAkM,EAAAlI,GAEAA,EAg5BA+9N,CAAAF,KAMA,IAAAG,EAAA,KACA,IAAA,IAAAttD,KAAA3xJ,EAAA+jB,WAGA,GAAA,UAAA4tI,EAAA9hE,OAAA,EAAA,GAAA,CAEA,IAAA5uG,EAAA+e,EAAA+jB,WAAA4tI,GACAA,EAAAktD,EAAAltD,IAAAA,EAAAr3K,cAYA,GAPA,4EACA0f,KAAA23J,KAEAA,EAAA,IAAAA,GAIAqpD,EAAAj3L,WAAA43C,IAAAy/I,EAAAn6N,IAEA8iC,EAAA4tI,GAAAqpD,EAAAj3L,WAAAv0C,IAAA4rO,EAAAn6N,QAFA,CAQAg+N,EAAA,KACA,IAAA1lO,EAAA0H,EAAA1H,MACA,aAAAo4K,GACAp4K,aAAAikC,aACAjkC,aAAA2jC,aAEAl/B,QAAAC,KAAA,yEACAghO,EAAA,IAAAhlH,EAAAv9E,gBAAA,IAAAc,YAAAjkC,GAAA0H,EAAA07B,SAAA17B,EAAA27B,aAIA,IAAAgqI,EAAAu1D,EAAA8C,GAAAh+N,EAAA+e,GACA,OAAA4mJ,IAEA7iI,EAAA4tI,GAAA/K,EACAo0D,EAAAj3L,WAAA9mC,IAAAm+N,EAAAn6N,GAAA2lK,KASA,QAHAn4K,IAAAqwO,GAAA9+M,EAAAukB,aAAA,SAAAu6L,GAGA,IAAAxvO,OAAA+3C,KAAAtD,GAAAh2C,OAEA,OAAA,KAKA,QAAAU,IAAA89C,EAAAtD,uBAAAsD,EAAAtD,sBAAAl7C,OAAA,EAAA,CAEA,IAAAw/I,KACAmvD,KACAwiC,KAEA,QAAAzwO,IAAA89C,EAAAlD,sBAEA,IAAA,IAAA7oB,KAAA+rB,EAAAlD,sBAEA61L,EAAA3yL,EAAAlD,sBAAA7oB,IAAAA,EAMA,IAAA,IAAAvyB,EAAA,EAAAA,EAAAs+C,EAAAtD,sBAAAl7C,SAAAE,EAAA,CAEA,IAAA4B,KAEAsvO,GAAA,EAEA,IAAA,IAAAxtD,KAAA3xJ,EAAAgkB,gBAKA,GAAA,aAAA2tI,GAAA,WAAAA,EAAA,CAaA,IAAA1wK,EAAA+e,EAAAgkB,gBAAA2tI,GAAA1jL,GACAqvM,EAAA3rB,EAAAr3K,cAOA8kO,EAAAp/M,EAAA+jB,WAAA4tI,GAEA,GAAAqpD,EAAAj3L,WAAA43C,IAAAy/I,EAAAn6N,IAEApR,EAAAytM,GAAA09B,EAAAj3L,WAAAv0C,IAAA4rO,EAAAn6N,QAFA,CAQA,IAAAo+N,EAAAp+N,EAAAtD,QAEA,IAAAqiB,EAAAikB,qBAEA,IAAA,IAAAjiB,EAAA,EAAA4jB,EAAA3kC,EAAAqK,MAAA0W,EAAA4jB,EAAA5jB,IAEAq9M,EAAA9zN,OACAyW,EACA/gB,EAAAC,KAAA8gB,GAAAo9M,EAAAl+N,KAAA8gB,GACA/gB,EAAAE,KAAA6gB,GAAAo9M,EAAAj+N,KAAA6gB,GACA/gB,EAAAmJ,KAAA4X,GAAAo9M,EAAAh1N,KAAA4X,IAOAnyB,EAAAytM,GAAA6+B,EAAAkD,EAAAr/M,GACAg7M,EAAAj3L,WAAA9mC,IAAAm+N,EAAAgE,GAAAvvO,EAAAytM,UA/CA6hC,IAEAnhO,QAAAC,KAAA,+DACAkhO,GAAA,GAgDA90E,EAAArxJ,KAAAnJ,GAEA09I,EAAAv0I,KAAAuzC,EAAAtD,sBAAAh7C,SACAQ,IAAA89C,EAAAlD,uBAAAqzJ,EAAA1jM,KAAAkmO,EAAAjxO,IAIA2wO,EAAArxF,QAAAA,EAEAmvD,EAAA3uM,OAAA,IAEA6wO,EAAApiC,UACAoiC,EAAApiC,OAAAE,YAAAA,GAMA,IAAAg+B,EAAA5pN,EAAA4pN,aACA5wL,EAAA13B,MAAAC,QAAAk6B,EAAApsB,UAEA,GAAA2pB,GAAA,IAAA9pB,EAAAue,OAAAxwC,OAAA,OAAA,MAEA2sO,GAAA,OAAA16M,EAAAhwB,OAAA85C,IAGA9rC,QAAAC,KAAA,2EACAy8N,GAAA,GAIA,IAAA4E,GAAA,EAEA,GAAA,OAAAt/M,EAAAhwB,OAAA0qO,EAAA,CAIA,IAFA,IAAAn0L,KAEAt4C,EAAA,EAAA+0B,EAAAhD,EAAA+jB,WAAAvsB,SAAAlM,MAAArd,EAAA+0B,EAAA/0B,IAEAs4C,EAAAt4C,GAAAA,EAIA+xB,EAAAqkB,SAAAkC,GAEA+4L,GAAA,EAOA,IAHA,IAAAngN,EAAA2qB,EAAAyC,EAAApsB,UAAAosB,EAAApsB,UACAoe,EAAAuL,EAAA9pB,EAAAue,SAAA9H,cAAA,EAAA/M,WAAAj7B,EAAA6c,WAAA7c,IAEAR,EAAA,EAAA+0B,EAAAub,EAAAxwC,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAA84K,GACA1sF,KAAAA,EACAt2C,WAAAA,GAOA,GAJA83L,EAAA77M,EAAA+mJ,GAEA1c,EAAAt8J,OAAA,IAAAg5K,EAAA1c,QAAAA,GAEA,OAAArqI,EAAAhwB,MAAA,CAEA,IAAAg9D,EAAAouK,EAAAp7M,EAAAhwB,YAEAvB,IAAA8vC,EAAAtwC,GAAAy7B,YAAAj7B,IAAA8vC,EAAAtwC,GAAAqd,QAEA0hD,GAAA,IAAAzuB,EAAAtwC,GAAAy7B,MAAA,IAAA6U,EAAAtwC,GAAAqd,OAIA0vN,EAAAj3L,WAAA43C,IAAA3uB,GAEA+5G,EAAAxgI,QAAAy0L,EAAAj3L,WAAAv0C,IAAAw9D,IAIA+5G,EAAAxgI,QAAA41L,EAAAn8M,EAAAhwB,MAAAgwB,EAAAue,EAAAtwC,GAAAy7B,MAAA6U,EAAAtwC,GAAAqd,OACA0vN,EAAAj3L,WAAA9mC,IAAA+vD,EAAA+5G,EAAAxgI,UAIA,OAAAwgI,EAAAxgI,gBAAAwgI,EAAAxgI,QAIA,IAAApmB,EAAA49M,EAAA5+M,EAAAof,EAAAtwC,GAAAwoC,gBAEA,OAAAtW,IAEA4mJ,EAAA5mJ,SAAAA,GAIAgnJ,EAAAnuK,KAAA+tK,GAIAu4D,GAEAt/M,EAAAqkB,SAAA,MAIAu6L,EAAAz3D,WAAAA,EAEA2zD,EAAAn5E,SAEAm5E,EAAAn5E,WAIAm5E,EAAAn5E,OAAA3oJ,KAAA4lO,GAEA,IAAA5uO,EAAA8qO,EAAAn5E,OAAA5zJ,OAAA,EAGA,OAFAitO,EAAAr5E,OAAA1kJ,IAAA0hO,EAAA3uO,GAEAA,EAuEA,SAAAuvO,EAAAt+H,EAAAusB,GAEAstG,EAAA1yH,aAEA0yH,EAAA1yH,eAUA,IAJA,IAAAlH,GAFAD,EAAAgZ,EAAAkgH,aAAAqF,MAAAC,uBAAAx+H,EAAAtjG,QAAA6vH,IAEAtsB,OACAg/D,KACAC,KAEAlyK,EAAA,EAAAA,EAAAizG,EAAAnzG,SAAAE,EAAA,CAEA,IAAAkzG,EAAAD,EAAAjzG,GACAyxO,EAAAzlH,EAAAyQ,gBAAAC,eAAAxpB,EAAAjzG,MACAyxO,EAAA1lH,EAAAyQ,gBAAAO,SAAAuC,EAAAkyG,EAAAx0G,UACA00G,EAAAtkC,EAAAokC,EAAA32H,cAgBA,GAdA,UAAA22H,EAAA/wG,aAIAgxG,GAFA,IAAAA,EAAA5rK,cAEA4rK,EAAA1rK,SAAAk0B,cAAAu3I,EAAA9wG,kBAIAngI,IAMAkxO,IAAAC,EAGA,OADA5hO,QAAAC,KAAA,6DAAAkjG,EAAAjzG,MACA,KAIA,IASAq0G,EARAs9H,EAAA1+H,EAAA5gF,OAAAxyB,OAAAozG,EAAAd,MAAAtyG,OAEA6xO,IAAAtkC,EAAAryJ,wBAEA42L,GAAAF,EAAA12L,sBAAAl7C,SAWA,IAAAozG,EAAAmF,kBAAA+9F,2CAEA9hG,EAAA,cAKAs9H,GAAA,GAIAt9H,EAFApB,EAAA6E,qBAAAiU,EAAA8tB,oBAEA,OAIA,SAIAo4B,EAAAnnK,MAEA2uK,MAAAw0D,EAAA,IAAAliH,EAAAv9E,gBAAAykE,EAAAd,MArCA,IAsCAtwG,OAAAosO,EAAA,IAAAliH,EAAAv9E,gBAAAykE,EAAA5gF,OAAAs/M,IACAt9H,cAAAA,IAIA29D,EAAAlnK,MAEAgnK,QAAAG,EAAApyK,OAAA,EACA8B,QACAm7H,KAAA+vG,EAAAvrO,IAAAmwO,GACA/xO,KAAAgyO,KAeA,OARA9E,EAAA1yH,WAAApvG,MAEA9K,KAAA+yG,EAAA/yG,MAAA,QAAA4sO,EAAA1yH,WAAAr6G,OACAoyK,SAAAA,EACAD,SAAAA,IAIA46D,EAAA1yH,WAAAr6G,OAAA,EAIA,SAAA+xO,EAAA/hN,GAEA,IAAAitG,EAAA8vG,EAAAj6D,MAAAk6D,EAAAvrO,IAAAuuB,IAEAk2C,EAAAl2C,EAAAk2C,SAEA,QAAAxlE,IAAAwlE,EAAA,OAAA,KAEA,IAAA8rK,EAAAhiN,EAAAk2C,SAAAD,MAAA,GAEA,QAAAvlE,IAAAsxO,EAAA,OAAA,KAKA,IAHA,IAAA79D,KACAohC,EAAA,IAAAxlK,aAAA,GAAAm2B,EAAAD,MAAAjmE,QAEAE,EAAA,EAAAA,EAAAgmE,EAAAD,MAAAjmE,SAAAE,EAEAi0K,EAAAlpK,KAAA+hO,EAAAvrO,IAAAykE,EAAAD,MAAA/lE,KAEAgmE,EAAA8zB,aAAA95F,GAAA8S,QAAAuiM,EAAA,GAAAr1M,QAIAQ,IAAAqsO,EAAAv8B,QAEAu8B,EAAAv8B,UAIAu8B,EAAAv8B,MAAAvlM,MAEAsqM,oBAAA64B,EAAA,IAAAliH,EAAAv9E,gBAAA4mK,EAAA,KACAphC,OAAAA,EACAjuG,SAAA8mK,EAAAvrO,IAAAuwO,KAIA,IAAA78D,EAAAl4C,EAAAw3C,KAAAs4D,EAAAv8B,MAAAxwM,OAAA,EAEA,OAAAm1K,EA8DA,SAAA88D,EAAAjiN,GAEA+8M,EAAAj6D,QAEAi6D,EAAAj6D,UAIA,IAAAo/D,KAEA,GAAAnvN,EAAAwpN,IAAA,CAEA,IAAAnsN,EAAA4P,EAAA5a,WAAApC,UACAyW,EAAAuG,EAAAvG,SAAAzW,UACAuN,EAAAyP,EAAAzP,MAAAvN,UAEAs6N,EAAAltN,GAAA,EAAA,EAAA,EAAA,MAEA8xN,EAAA9xN,SAAAA,GAIAktN,EAAA7jN,GAAA,EAAA,EAAA,MAEAyoN,EAAAzhD,YAAAhnK,GAIA6jN,EAAA/sN,GAAA,EAAA,EAAA,MAEA2xN,EAAA3xN,MAAAA,QAMAyP,EAAA1N,kBAEA0N,EAAArM,eAIA2pN,EAAAt9M,EAAA7Q,OAAAjO,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAEAghO,EAAA/yN,OAAA6Q,EAAA7Q,OAAAjO,UAeA,GARA,KAAA8e,EAAA7vB,OAEA+xO,EAAA/xO,KAAAq7C,OAAAxrB,EAAA7vB,OAIA2tO,EAAA99M,EAAAkiN,GAEAliN,EAAA2B,QAAA3B,EAAA+B,QAAA/B,EAAAgC,SAAA,CAEA,IAAAwsB,EAAAkyL,EAAA1gN,GAEA,OAAAwuB,IAEA0zL,EAAA1zL,KAAAA,QAIA,GAAAxuB,EAAAF,SAEAoiN,EAAAh4N,OAvVA,SAAAA,GAEA6yN,EAAA70J,UAEA60J,EAAA70J,YAIA,IAAAi6J,EAAAj4N,EAAAk6E,qBAEAg+I,GAEAxnO,KAAAunO,EAAA,eAAA,eAIAA,EAEAC,EAAAC,cAEA/5D,KAAA,EAAAp+J,EAAAoQ,MACA+tJ,KAAA,EAAAn+J,EAAAqQ,IACA6tJ,KAAAl+J,EAAAwQ,KAAA,EAAA,KAAAxQ,EAAAwQ,IACAytJ,MAAAj+J,EAAAuQ,KAAA,EAAA,EAAAvQ,EAAAuQ,MAMA2nN,EAAAE,aAEA/5D,YAAAr+J,EAAAopC,OACA20H,KAAA/rD,EAAAm+B,UAAAv8I,SAAAoM,EAAAmpC,KACA+0H,KAAAl+J,EAAAwQ,KAAA,EAAA,KAAAxQ,EAAAwQ,IACAytJ,MAAAj+J,EAAAuQ,KAAA,EAAA,EAAAvQ,EAAAuQ,MAMA,KAAAvQ,EAAA/Z,OAEAiyO,EAAAjyO,KAAA+Z,EAAAtP,MAMA,OAFAmiO,EAAA70J,QAAAjtE,KAAAmnO,GAEArF,EAAA70J,QAAAl4E,OAAA,EAuSAuyO,CAAAviN,QAEA,GAAAA,EAAAi6C,oBAAAj6C,EAAAu6C,cAAAv6C,EAAAo6C,YAEA26H,EAAA,sBAEAgoC,EAAApqL,WAAAoqL,EAAApqL,eACAoqL,EAAApqL,WAAA,qBAAAF,WACAsiJ,EAAA,qBAAA,GAIAmtC,EAAAvvL,WAAAuvL,EAAAvvL,eACAuvL,EAAAvvL,WAAA,qBAAA+lB,MA9IA,SAAAA,GAEA,IAAA69H,KAEA79H,EAAAvoE,OAAAomM,EAAApmM,KAAAuoE,EAAAvoE,MAEAomM,EAAA99J,MAAAigC,EAAAjgC,MAAAz1B,UAEAuzL,EAAA38H,UAAAlB,EAAAkB,UAEAlB,EAAAuB,mBAEAs8H,EAAA37L,KAAA,cAEA89D,EAAA6B,cAEAg8H,EAAA37L,KAAA,QACA89D,EAAAp5C,SAAA,IAAAi3K,EAAA14L,MAAA66D,EAAAp5C,WAEAo5C,EAAA0B,cAEAm8H,EAAA37L,KAAA,OACA89D,EAAAp5C,SAAA,IAAAi3K,EAAA14L,MAAA66D,EAAAp5C,UACAi3K,EAAAx/H,QACAw/H,EAAAx/H,KAAAy/H,gBAAA99H,EAAA2B,SAAA,GAAA3B,EAAAz2D,OAAA,EACAs0L,EAAAx/H,KAAA0/H,eAAA/9H,EAAAz2D,YAIAvR,IAAAgoE,EAAAzW,OAAA,IAAAyW,EAAAzW,OAEAhiD,QAAAC,KAAA,sGAKAw4D,EAAA5mE,QACA4mE,EAAA5mE,OAAAmrB,SAAAy7C,GACA,IAAAA,EAAA5mE,OAAA2nB,SAAAroB,GACA,IAAAsnE,EAAA5mE,OAAA2nB,SAAArc,IACA,IAAAs7D,EAAA5mE,OAAA2nB,SAAA/a,GAEAuB,QAAAC,KAAA,mIAKA,IAAAuyC,EAAAsqL,EAAApqL,WAAA,oBAAAF,OAEA,OADAA,EAAAx3C,KAAAs7L,GACA9jJ,EAAAziD,OAAA,EA6FAwyO,CAAAxiN,SAEA,GAAAA,EAAAD,QAGA,OADA9f,QAAAC,KAAA,8EAAA8f,GACA,KAUA,GANAA,EAAAg2C,eAEAwqI,EAAAvlM,KAAA+kB,GAIAA,EAAA9C,SAAAltB,OAAA,EAAA,CAIA,IAFA,IAAAktB,KAEAhtB,EAAA,EAAAwL,EAAAskB,EAAA9C,SAAAltB,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAAN,EAAA9C,SAAAhtB,GAEA,GAAAowB,EAAA5C,UAAA,IAAA3K,EAAAypN,YAAA,CAEA,IAAAvvG,EAAAg1G,EAAA3hN,GAEA,OAAA2sG,GAEA/vG,EAAAjiB,KAAAgyH,IAQA/vG,EAAAltB,OAAA,IAEAkyO,EAAAhlN,SAAAA,GAOA6/M,EAAAj6D,MAAA7nK,KAAAinO,GAEA,IAAArhC,EAAAk8B,EAAAj6D,MAAA9yK,OAAA,EAGA,OAFAgtO,EAAA99N,IAAA8gB,EAAA6gL,GAEAA,EAQA,SAAA4hC,EAAA/sL,GAEAqnL,EAAA18B,SAEA08B,EAAA18B,UACA08B,EAAArnL,MAAA,GAIA,IAAAgtL,KAEA,KAAAhtL,EAAAvlD,OAEAuyO,EAAAvyO,KAAAulD,EAAAvlD,MAIA4sO,EAAA18B,OAAAplM,KAAAynO,GAIA,IAFA,IAAA5/D,KAEA5yK,EAAA,EAAAwL,EAAAg6C,EAAAx4B,SAAAltB,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAowB,EAAAo1B,EAAAx4B,SAAAhtB,GAEA,GAAAowB,EAAA5C,UAAA,IAAA3K,EAAAypN,YAAA,CAEA,IAAAvvG,EAAAg1G,EAAA3hN,GAEA,OAAA2sG,GAEA61C,EAAA7nK,KAAAgyH,IAQA61C,EAAA9yK,OAAA,IAEA0yO,EAAA5/D,MAAAA,GAIAg7D,EAAApoL,EAAAgtL,IAyBA,SAAA94D,GAEAA,EAAAA,aAAAv1J,MAAAu1J,GAAAA,GAIA,IAFA,IAAA+4D,KAEAzyO,EAAA,EAAAA,EAAA05K,EAAA55K,OAAAE,IAEA05K,EAAA15K,aAAAgsH,EAAAl+F,MAEAykN,EAAA74D,EAAA15K,IAIAyyO,EAAA1nO,KAAA2uK,EAAA15K,IAMAyyO,EAAA3yO,OAAA,GArCA,SAAAoiF,GAEA,IAAA18B,EAAA,IAAAwmE,EAAAl+F,MACA03B,EAAAvlD,KAAA,WAEA,IAAA,IAAAD,EAAA,EAAAA,EAAAkiF,EAAApiF,OAAAE,IAIAwlD,EAAAx4B,SAAAjiB,KAAAm3E,EAAAliF,IAIAuyO,EAAA/sL,GA0BAktL,CAAAD,GAIA,IAAA,IAAAzyO,EAAA,EAAAA,EAAAswM,EAAAxwM,SAAAE,EAEA6xO,EAAAvhC,EAAAtwM,IAIA,IAAA,IAAAA,EAAA,EAAAA,EAAA6iB,EAAAs3F,WAAAr6G,SAAAE,EAEAsxO,EAAAzuN,EAAAs3F,WAAAn6G,GAAA05K,EAAA,IAMAi5D,CAAAj5D,GAEAiI,QAAAe,IAAA37C,GAAA7mD,KAAA,WAGA,IAAAmuC,EAAA,IAAAlO,KAAA5rD,GAAA7pD,KAAA,6BAGAkoO,EAAAvxO,OAAA+3C,KAAAyrJ,GAMA,GALA+tC,EAAA9yO,OAAA,IAAA+sO,EAAAhoC,eAAA+tC,GAGA/F,EAAAt4K,SAAAs4K,EAAAt4K,QAAAz0D,OAAA,IAAA+sO,EAAAt4K,QAAA,GAAA8sH,WAAAhzD,EAAAn5F,OAEA,IAAArS,EAAAqoN,OAAA,CAIA,IAQAnoE,EAAA,IAAA1nF,OAAAi0J,WACAvsE,EAAAwsE,kBAAAlhH,GACA00C,EAAAysE,UAAA,WAGA,IAAAqD,EAAApF,EAAA1qE,EAAA71F,QACA4lK,EAAA,IAAA5gI,SAAA,IAAAF,YAVA,IAWA8gI,EAAA1H,UAAA,EAAAyH,EAAAxxD,YAAA,GACAyxD,EAAA1H,UAAA,EAVA,SAUA,GAGA,IAAA2H,EAAAtF,EA11DA,SAAAtgI,GAEA,QAAA3sG,IAAA66E,OAAA23J,YAEA,OAAA,IAAAA,aAAAC,OAAA9lI,GAAAx4C,OAMA,IAFA,IAAArpD,EAAA,IAAA2jC,WAAA,IAAA+iE,YAAA7E,EAAArtG,SAEAE,EAAA,EAAA+0B,EAAAo4E,EAAArtG,OAAAE,EAAA+0B,EAAA/0B,IAAA,CAEA,IAAAc,EAAAqsG,EAAA+S,WAAAlgH,GAGAsL,EAAAtL,GAAAc,EAAA,IAAA,GAAAA,EAIA,OAAAwK,EAAAqpD,OAu0DAu+K,CAAA3hN,KAAAC,UAAAq7M,IAAA,IACAsG,EAAA,IAAAjhI,SAAA,IAAAF,YAhBA,IAiBAmhI,EAAA/H,UAAA,EAAA2H,EAAA1xD,YAAA,GACA8xD,EAAA/H,UAAA,EAjBA,YAiBA,GAGA,IAAA3qH,EAAA,IAAAzO,YAzBA,IA0BAmyF,EAAA,IAAAjyF,SAAAuO,GACA0jF,EAAAinC,UAAA,EA1BA,YA0BA,GACAjnC,EAAAinC,UAAA,EA1BA,GA0BA,GACA,IAAAgI,EA7BA,GA8BAD,EAAA9xD,WAAA0xD,EAAA1xD,WACAyxD,EAAAzxD,WAAAwxD,EAAAxxD,WACA8iB,EAAAinC,UAAA,EAAAgI,GAAA,GAEA,IAAAC,EAAA,IAAAlzH,MACAM,EACA0yH,EACAJ,EACAD,EACAD,IACAnoO,KAAA,6BAEA4oO,EAAA,IAAAj4J,OAAAi0J,WACAgE,EAAA/D,kBAAA8D,GACAC,EAAA9D,UAAA,WAEArD,EAAAmH,EAAApmK,eAQA,GAAA2/J,EAAAt4K,SAAAs4K,EAAAt4K,QAAAz0D,OAAA,EAAA,CAEA,IAAAijK,EAAA,IAAA1nF,OAAAi0J,WACAvsE,EAAAwwE,cAAAllH,GACA00C,EAAAysE,UAAA,WAEA,IAAAgE,EAAAzwE,EAAA71F,OACA2/J,EAAAt4K,QAAA,GAAAs9I,IAAA2hC,EACArH,EAAAU,SAMAV,EAAAU,OAYA7gH,EAAAkgH,aAAAqF,OAEAkC,eAAA,SAAAvgI,EAAAn/C,GAEA,IAOAhyD,EANAoxG,EAAAD,EAAAE,eAEAhB,EAAA,IAAAc,EAAAqB,eAAArB,EAAAd,MAAAtyG,OAAA,GACAwyB,EAAA,IAAA4gF,EAAAsB,gBAAAtB,EAAA5gF,OAAAxyB,OAAAqzG,GACAkrB,EAAAnrB,EAAAmF,kBAAA,IAAAnF,EAAAsB,gBAAArB,IAIA,GAAA,IAAAD,EAAAd,MAAAtyG,OAAA,CAEAsyG,EAAA,GAAAr+C,EAEA,IAAA,IAAA/zD,EAAA,EAAAA,EAAAmzG,EAAAnzG,IAEAsyB,EAAAtyB,GAAA,EAIA+B,EAAA,OAEA,GAAAgyD,EAAAm/C,EAAAd,MAAA,GAAA,CAEA,GAAAzxG,KAAAkR,IAAAqhG,EAAAd,MAAA,GAAAr+C,GAvBA,KAuBA,OAAA,EAEAq+C,EAAA,GAAAr+C,EACAq+C,EAAApjG,IAAAkkG,EAAAd,MAAA,GAEA9/E,EAAAtjB,IAAAqvH,EAAA3oB,SAAA3hD,GAAA,GACAzhC,EAAAtjB,IAAAkkG,EAAA5gF,OAAA6gF,GAEApxG,EAAA,OAEA,GAAAgyD,EAAAm/C,EAAAd,MAAAc,EAAAd,MAAAtyG,OAAA,GAAA,CAEA,GAAAa,KAAAkR,IAAAqhG,EAAAd,MAAAc,EAAAd,MAAAtyG,OAAA,GAAAi0D,GAnCA,KAqCA,OAAAm/C,EAAAd,MAAAtyG,OAAA,EAIAsyG,EAAAA,EAAAtyG,OAAA,GAAAi0D,EACAq+C,EAAApjG,IAAAkkG,EAAAd,MAAA,GAEA9/E,EAAAtjB,IAAAkkG,EAAA5gF,OAAA,GACAA,EAAAtjB,IAAAqvH,EAAA3oB,SAAA3hD,GAAAm/C,EAAA5gF,OAAAxyB,QAEAiC,EAAAqwG,EAAAtyG,OAAA,OAIA,IAAA,IAAAE,EAAA,EAAAA,EAAAkzG,EAAAd,MAAAtyG,OAAAE,IAAA,CAEA,GAAAW,KAAAkR,IAAAqhG,EAAAd,MAAApyG,GAAA+zD,GArDA,KAqDA,OAAA/zD,EAEA,GAAAkzG,EAAAd,MAAApyG,GAAA+zD,GAAAm/C,EAAAd,MAAApyG,EAAA,GAAA+zD,EAAA,CAEAq+C,EAAApjG,IAAAkkG,EAAAd,MAAA7mG,MAAA,EAAAvL,EAAA,GAAA,GACAoyG,EAAApyG,EAAA,GAAA+zD,EACAq+C,EAAApjG,IAAAkkG,EAAAd,MAAA7mG,MAAAvL,EAAA,GAAAA,EAAA,GAEAsyB,EAAAtjB,IAAAkkG,EAAA5gF,OAAA/mB,MAAA,GAAAvL,EAAA,GAAAmzG,GAAA,GACA7gF,EAAAtjB,IAAAqvH,EAAA3oB,SAAA3hD,IAAA/zD,EAAA,GAAAmzG,GACA7gF,EAAAtjB,IAAAkkG,EAAA5gF,OAAA/mB,OAAAvL,EAAA,GAAAmzG,IAAAnzG,EAAA,GAAAmzG,GAEApxG,EAAA/B,EAAA,EAEA,OAWA,OAHAkzG,EAAAd,MAAAA,EACAc,EAAA5gF,OAAAA,EAEAvwB,GAIAyvO,uBAAA,SAAAx+H,EAAAusB,GAMA,IAJA,IAAAtsB,KACAygI,KACAC,EAAA3gI,EAAAC,OAEAjzG,EAAA,EAAAA,EAAA2zO,EAAA7zO,SAAAE,EAAA,CAEA,IAAA4zO,EAAAD,EAAA3zO,GACA6zO,EAAA7nH,EAAAyQ,gBAAAC,eAAAk3G,EAAA3zO,MACA6zO,EAAA9nH,EAAAyQ,gBAAAO,SAAAuC,EAAAs0G,EAAA52G,UAEA,GAAA,0BAAA42G,EAAA/4H,mBAAAt6G,IAAAqzO,EAAAjzG,cAAA,CAQA,GAAAgzG,EAAAv7H,oBAAAu7H,EAAA37H,kCACA27H,EAAAv7H,oBAAAu7H,EAAA17H,+BAAA,CAEA,GAAA07H,EAAAv7H,kBAAA+9F,0CAIA,MAAA,IAAA5mM,MAAA,gFAIAO,QAAAC,KAAA,iGAEA4jO,EAAAA,EAAAlkO,SACA+kG,iBAAAuX,EAAA+tB,mBAIA,IASAg6F,EATAC,EAAAF,EAAA94L,sBAAAl7C,OACAm0O,EAAAH,EAAA14L,sBAAAy4L,EAAAjzG,eAEA,QAAApgI,IAAAyzO,EAEA,MAAA,IAAAzkO,MAAA,oDAAAqkO,EAAAjzG,eAQA,QAAApgI,IAAAkzO,EAAAI,EAAA1nO,MAAA,CAsBA,IAAA8nO,EAAAN,EAAAv7H,kBAAA,IAAAu7H,EAAAp/H,gBAAA,IAEAu/H,EAAAL,EAAAI,EAAA1nO,MAIA,IAAA,IAAA2nB,EAAA,EAAAA,EAAAggN,EAAA3hI,MAAAtyG,OAAAi0B,IAEAggN,EAAAzhN,OAAAyB,EAAAigN,EAAAC,GAAAC,EAAAx+H,SAAAq+H,EAAA3hI,MAAAr+E,IAOA,IAAA,IAAAA,EAAA,EAAAA,EAAA6/M,EAAAxhI,MAAAtyG,OAAAi0B,IAAA,CAEA,IAAAogN,EAAA3yO,KAAAiyO,eAAAM,EAAAH,EAAAxhI,MAAAr+E,IACAggN,EAAAzhN,OAAA6hN,EAAAH,EAAAC,GAAAL,EAAAthN,OAAAyB,QAxCA,CAMA,IAFA,IAAAzB,EAAA,KAFAyhN,EAAAH,EAAAlkO,SAEA8kG,iBAAAw/H,EAAAD,EAAA3hI,MAAAtyG,QAEAi0B,EAAA,EAAAA,EAAAggN,EAAA3hI,MAAAtyG,OAAAi0B,IAEAzB,EAAAyB,EAAAigN,EAAAC,GAAAF,EAAAzhN,OAAAyB,GAIAggN,EAAA9zO,KAAA,yBACA8zO,EAAAzhN,OAAAA,EAEAohN,EAAAI,EAAA1nO,MAAA2nO,EACA9gI,EAAAloG,KAAAgpO,SApDA9gI,EAAAloG,KAAA6oO,GAoFA,OAFA5gI,EAAAC,OAAAA,EAEAD,IAMAgZ,EAAAkgH,eAGAzsO,EAAA,gDACA,mBACA,SAAAusH,GAgpBA,OAloBAA,EAAAooH,gBAAA,aAEApoH,EAAAooH,gBAAAhzO,WAEAuO,YAAAq8G,EAAAooH,gBAEA1hN,MAAA,SAAA5C,EAAAq8M,EAAAtpN,GAEAA,EAAAA,MAQA,MANAA,EAAAxhB,OAAAM,QACA8gB,QAAA,QACAo4I,OAAA,KACAw5E,iBAAA,IACAxxN,IAEAwxN,mBAEAxxN,EAAAwxN,oBAAAxxN,EAAAwxN,oBACA72K,QAAA,MAAA,KACAA,QAAA,OAAA,MAIA,IA2DA78C,EAAAyuN,EA3DA3sN,EAAAI,EAAAJ,QACA,GAAA,UAAAA,GAAA,UAAAA,EAGA,OADA1S,QAAAC,kCAAAyS,qDACA,KAwDA,SAAA6xN,EAAA5zN,EAAAq1D,GAEAp1D,EAAAA,GAAAG,SAAAsuJ,cAAA,UACAggE,EAAAA,GAAAzuN,EAAAM,WAAA,MAEAN,EAAA5R,MAAA2R,EAAA6zN,aACA5zN,EAAA1R,OAAAyR,EAAA8zN,cAEApF,EAAAhuN,UAAAV,EAAA,EAAA,GAGA,IAAA8yN,EAAA7yN,EACAU,mBAAA00D,IAAA,GACAvY,QAAA,iCAAA,IAGA,OAhCA,SAAAskG,GAKA,IAHA,IAAAzxJ,EAAA0vG,KAAA+hD,GACAg4D,EAAA,IAAA7qL,WAAA5+B,EAAAvQ,QAEAE,EAAA,EAAAwL,EAAAsuN,EAAAh6N,OAAAE,EAAAwL,EAAAxL,IAEA85N,EAAA95N,GAAAqQ,EAAA6vG,WAAAlgH,GAIA,OAAA85N,EAqBA2a,CAAAjB,GAKA,IA8DAkB,EA9DAC,GAAA,OAAA,OAAA,OAAA,QACA,SAAAC,EAAA59E,GAEA,GAAAA,EAAAviG,6BAAA,CAKA,IAFA,IAAA28J,EAAA,IAAAp6D,EAAA1rJ,MAAAqE,YAAAqnJ,EAAA35I,MAAA25I,EAAAtoH,UACAxZ,EAAA8hI,EAAAtoH,SACA1uC,EAAA,EAAAwL,EAAAwrJ,EAAA35I,MAAArd,EAAAwL,EAAAxL,IAEA,IAAA,IAAA+zB,EAAA,EAAAA,EAAAmB,EAAAnB,IAEAq9L,EAAApxN,EAAAk1B,EAAAnB,GAAAijI,EAAA29E,EAAA5gN,IAAA/zB,GAMA,OAAAoxN,EAIA,OAAAp6D,EAAA1rJ,MAQA,SAAAupO,EAAAzjB,EAAA0jB,EAAAC,GAEA,OAAA5wN,MAAAC,QAAAgtM,GAAAA,EAAA7lN,MAAAupO,EAAAA,EAAAC,GACA,IAAA3jB,EAAAzhN,YAAAyhN,EAAAz8J,OAAAmgL,EAAA1jB,EAAAl8J,kBAAA6/K,GAKA,SAAA1+L,EAAA2gH,EAAA/2J,EAAAiiG,EAAAx3F,GAEA,IAAAY,EAAAspO,EAAA59E,GACA5oC,iBACAnuH,0BAEAA,mBAAAqL,EAAAxL,WACAwL,EAAA86C,KAAA,KACA,yDAGAnmD,mBAAAU,KAAAK,MAAAsK,EAAAxL,OAAAk3J,EAAAtoH,sBAAAsoH,EAAAtoH,aAEAwzD,EAAA30D,IAAA7gC,mBAAAA,YAAAhC,SAAA07C,KAAA,IAEA,0CAIA,OAAAgoE,EAkIA,SAAAshH,EAAAllE,GAEA,IAAAvc,EAAA+mF,EAAAzzO,IAAAipK,GACA,GAAA,MAAAvc,EAAA,CAEAA,WAAAgnF,EAAAn1O,OAAA,IAEA,IACAG,EAAAuqK,EAAAvqK,MAAAguJ,EACAinF,gBAAAjnF,YAAAhuJ,MAIAi1O,GAFA,UAAAzyN,qBAEAI,EAAAwxN,mBAAAp0O,wCAKA4iB,EAAAwxN,mBAAAp0O,oBAIAi1O,GAAA,WAEAD,EAAAlqO,KAAAmqO,GACAF,EAAAhmO,IAAAw7J,EAAAvc,GACApqI,EAAA9Y,MACAoqO,UAAAtyN,EAAAwxN,iBACAp0O,KAAAA,EACA81E,IAtBA,MAuBAvjD,KAAA8hN,EAAA9pE,EAAA9pJ,MAvBA,OAwBA00N,SAAA5qE,IAKA,OAAAvc,EAgQA,IAAAonF,EAAA,IAAA7gL,QACAi/F,EAAA,IAAAj/F,QACAwgL,EAAA,IAAAxgL,QACA3wC,KAEAoxN,KACAK,KACAC,KACAC,KACAC,EA3EA,SAAAC,EAAAv4I,GAEA,IAAA4/B,iBAAA5/B,EAAAl9F,SAEA88H,GAlWA,SAAA5/B,GASA,OALAA,EAAA15E,gBAEAixN,EAAAA,GAAA,IAAA1oH,EAAAxmG,SACA5V,KAAAutF,EAAAl+E,QACAy1N,EAAAh1N,uBACAg1N,EAAA5hO,UAAAszC,KAAA,gBAyVAuvL,CAAAx4I,GAEA,GAAAA,aAAA6uB,EAAAvxE,MAAA,MAAA0iD,EAAAprE,SAAA,CAIA,IAAA6jN,EAzVA,SAAA92N,GAEA,IAAAk9C,EAAAq5K,EAAA9zO,IAAAud,GAEA,IAAAk9C,EAAA,CAGA,IAAAqkC,EAAAvhF,EACAuhF,aAAA2rB,EAAA3vE,WAEAgkD,GAAA,IAAA2rB,EAAAn2E,gBAAApB,aAAA4rD,IAIA,IAAAw1I,SAAAP,EAAAx1O,OAAA,IAEA42N,EACAr2H,EAAAt+F,MACAs+F,EAAAt+F,MAAAsb,MAAAgjF,EAAAt+F,MAAA2sC,SACA2xD,EAAAvqD,WAAAvsB,SAAAlM,MAEAizB,EACA,MAAA+vD,EAAA/vD,QAAA,IAAA+vD,EAAA/vD,OAAAxwC,OACAugG,EAAA/vD,SACA7U,MAAA,EAAApe,MAAAq5M,EAAAluL,cAAA,IAGAstM,EAAAh3N,EAAA7e,eAAA6e,EAAA7e,QAAA,GACA81O,mBAAAF,KAAAC,WAGAE,KAAAH,aACAI,KAAAJ,aACAE,GAAA1/L,EAAAgqD,EAAAvqD,WAAAvsB,SAAAysN,GAAA,IAAA,IAAA,KAAA,SACAD,oBAAAE,0CAAAD,mBAQA,IAAAE,uCAAAD,mBACA,GAAA,WAAA51I,EAAAvqD,WAAA,CAEA,IAAAqgM,KAAAN,WACAE,GAAA1/L,EAAAgqD,EAAAvqD,WAAA56B,OAAAi7N,GAAA,IAAA,IAAA,KAAA,SACAD,wCAAAC,mBAKA,GAAA,OAAA91I,EAAAvqD,WAAA,CAEA,IAAAsgM,KAAAP,aACAE,GAAA1/L,EAAAgqD,EAAAvqD,WAAAvxB,GAAA6xN,GAAA,IAAA,KAAA,SACAF,0CAAAE,2BAKA,GAAA,UAAA/1I,EAAAvqD,WAAA,CAEA,IAAAugM,KAAAR,UACAE,GAAA1/L,EAAAgqD,EAAAvqD,WAAAvN,MAAA8tM,GAAA,IAAA,IAAA,KAAA,SACAH,uCAAAG,mBAIA,IAAAjmI,EAAA,KACA,GAAA/P,EAAAt+F,MAEAquG,EAAAwkI,EAAAv0I,EAAAt+F,YAKA,IAAA,IAAA/B,EAAA,EAAAwL,GADA4kG,EAAA,IAAAjsF,MAAAuyM,IACA52N,OAAAE,EAAAwL,EAAAxL,IAAAowG,EAAApwG,GAAAA,EAIA,IAAA,IAAAA,EAAA,EAAAwL,EAAA8kC,EAAAxwC,OAAAE,EAAAwL,EAAAxL,IAAA,CAEA,IAAAs0C,EAAAhE,EAAAtwC,GACAs2O,EAAAzB,EAAAzkI,EAAA97D,EAAA7Y,MAAA6Y,EAAAj3B,OACAk5N,EAAAD,EAAAx2O,OAAA,EACAi2O,yCAAAzhM,EAAA9L,yBAAA+tM,MACAR,GAAAG,EAEAH,SAAAO,EAAAlwL,KAAA,WACA2vL,GAAA,eAIAA,GAAA,qBAEAT,EAAAvqO,KAAAgrO,GAEA/5K,GAAA65K,OAAAA,EAAAx1I,eAAAA,GACAg1I,EAAArmO,IAAA8P,EAAAk9C,GAIA,OAAAA,EAkPAw6K,CAAAr5I,EAAAprE,UACA8jN,EAAAD,EAAAC,OACA9jN,EAAA6jN,EAAAv1I,eAGAo2I,EAAA,KACAC,KAKApzH,EAAAnmB,EAAAjrE,UAAA,IAAA85F,EAAA1+E,kBACApc,EAAA/M,MAAAC,QAAAk/F,GAAAA,GAAAA,GAIAozH,EAFA3kN,EAAAue,OAAAxwC,OAAAoxB,EAAApxB,OAEA,IAAAqkB,MAAA4N,EAAAue,OAAAxwC,QAIA,IAAAqkB,MAAA+M,EAAApxB,QAGA22O,EAAAC,EAAAptB,OACA/7K,IAAA,CAAA19B,EAAA7P,KA1NA,SAAA2M,GAEA,IAAAgqO,EAAAljF,EAAAlyJ,IAAAoL,GAEA,GAAA,MAAAgqO,EAAA,CAEAA,QAAApB,EAAAz1O,OAAA,IAEA,IAAA4K,EAAA,QAEAiC,aAAAq/G,EAAArnD,oBAEAj6D,EAAA,UAEAiC,aAAAq/G,EAAA1+E,oBAEA5iC,EAAA,WAEA,OAAAiC,EAAA4gC,KAKAx9B,QAAAC,KAAA,wEAMA,IAAAwhC,EAAA7kC,EAAA6kC,SAAA7kC,EAAA6kC,SAAA,IAAAw6E,EAAA/jF,MAAA,EAAA,EAAA,GACA8nB,EAAApjD,EAAA47B,MAAA57B,EAAA47B,MAAA,IAAAyjF,EAAA/jF,MAAA,EAAA,EAAA,GACAyJ,EAAA/kC,EAAA+kC,SAAA/kC,EAAA+kC,SAAA,IAAAs6E,EAAA/jF,MAAA,EAAA,EAAA,GACA0J,EAAAhlC,EAAAglC,WAAA,EACA3D,EAAArhC,EAAAqhC,cAAA,EAKA4oM,EAAA,IACA,IAAAjqO,EAAA4+B,cAEAqrM,GACA,iBAEAjqO,EAAA4gC,IACA,gDACA,oBAEA,iBAEA5gC,EAAA2+B,QAAA,IAEAsrM,2BAAAjqO,EAAA2+B,mCAMA,IAAAurM,8BAAAnsO,KAEA,cAGAiC,EAAAgmC,YACA,sFACAnB,EAAAx6B,KAAAw6B,EAAA1yB,KAAA0yB,EAAAnhC,eAGA,eAGA,aAAA3F,EACA,aAGAiC,EAAA4gC,IACA,oFACAwiB,EAAA/4C,KAAA+4C,EAAAjxC,KAAAixC,EAAA1/C,eAEA,aACA,KAIA,aAAA3F,EACA,UAGAiC,EAAAwlC,UAAA,yDAAA,IAEA,UACA,KAIA,UAAAznC,qCACAgnC,EAAA16B,KAAA06B,EAAA5yB,KAAA4yB,EAAArhC,yBAEA,eAGA1D,EAAAihC,YACA,uFACA+D,aAGA,eACA,0BAGAoe,EAAA/4C,KAAA+4C,EAAAjxC,KAAAixC,EAAA1/C,mDAEA29B,2BAEA4oM,OAEAlsO,iBAEAosO,iBACAH,aACA,oBAGAhqO,EAAA4gC,IACA,oEACAmiM,EAAA/iO,EAAA4gC,mBACA,0HAEA,KAIA5gC,EAAAihC,YACA,qEACA8hM,EAAA/iO,EAAAihC,2BACA,4HAEA,KAIAjhC,EAAAgmC,YACA,qEACA+8L,EAAA/iO,EAAAgmC,2BACA,4HAEA,KAIAhmC,EAAAwlC,UACA,iEACAu9L,EAAA/iO,EAAAwlC,yBACA,oHAEA,IAGA0kM,GAGAlqO,EAAAw+B,OAAA6gF,EAAAnpH,WACA,uHACA,IAGA,6BAIAs1M,EAAAxrM,EAAA1M,eAAA0M,EAAA1M,QAAA,GACA+qL,mBAAA2rD,KAAAx+B,4BAAAw+B,0BAEAnB,EAAAzqO,KAAAigL,GACAuqD,EAAAxqO,KAAA+rO,GACArjF,EAAAzkJ,IAAArC,EAAAgqO,GAIA,OAAAA,GAuCA7G,CAAA5+M,EAAAlxB,EAAAkxB,EAAApxB,UAEAi9H,+BACA84G,OAGA,MAAAY,EACA,oCACAA,EAAAlpM,IAAA,CAAAtd,EAAAjwB,gDAEAA,eAAAiwB,OAEA,yGAGAm2B,KAAA,IACA,sCACA,IAGA,uBAIA+2C,EAAAnwE,SAAAo6E,QAAA/zF,GAAA0pH,GAAA24G,EAAAriO,IAEA0pH,GAAA,UAEA,OAAAA,EAaA24G,CAAA5lN,GAEAinN,EAAA,UAAAt0N,EAAA,+CAAA,mCACAu0N,EACA,6EACAD,eAAAt0N,MACA,kFAIA,OAAAI,EAAAg4I,kBAAAh4I,EAAAg4I,kBAAA,IACA,8BACA,IAAApnC,MAAAwjH,wCACA,IAAAxjH,MAAAwjH,2BACA,kCAIAD,sBAAA/B,EAAA7uL,KAAA,uBAEA4wL,uBAAAzB,EAAAnvL,KAAA,wBAEA4wL,yBAAAxB,EAAApvL,KAAA,0BAEA4wL,0BAAA1B,EAAAlvL,KAAA,2BAEA4wL,mEAAAvB,2CAEAuB,GAAA,uDAIA,IAhlBAE,EAEAC,EACAC,EACAC,EAEAC,EAEAC,EAwkBAnpH,GACA57F,MAjlBA0kN,EA8kBAF,GAAA,aA5kBAG,EAAA,OACAC,EAAA,gBACAC,EAAA,wBAEAC,EAAA,EAAAE,EAAAtvD,IAAAA,EAAA,EAAAsvD,EAAAF,EAAAE,EAAAtvD,EAAA,GAAA,IAEAqvD,EAAA,EACAL,EACAx1O,MAAA,sCACA6rC,IAAAkqM,IAEAJ,EAAAtrN,KAAA0rN,IAAAL,EAAArrN,KAAA0rN,KAAAN,EAAAprN,KAAA0rN,IAEAF,IAIA,IAAAnpH,KAAAkpH,EAAA,KAAAC,KAAAE,IAQA,OANAJ,EAAAtrN,KAAA0rN,IAAAL,EAAArrN,KAAA0rN,IAAAN,EAAAprN,KAAA0rN,IAEAF,IAIAnpH,IAGAhoE,KAAA,OAojBAviC,SAAAA,GASA,MANA,mBAAAsoN,GAEAl4K,sBAAA,IAAAk4K,EAAA/9G,IAIAA,IAMApC,EAAAooH,kBAGA30O,EAAA,4CACA,mBACA,SAAAusH,GAyhBA,OA1gBAA,EAAA0rH,YAAA,aAEA1rH,EAAA0rH,YAAAt2O,WAEAuO,YAAAq8G,EAAA0rH,YAEAhlN,MAAA,SAAA5C,EAAAq8M,EAAAtpN,GAWA,SAAA80N,EAAAv/L,GAEAtoB,EAAAa,SAAA,SAAAP,GAEA,IAAA,IAAAA,EAAAqB,OAAA,CAEA,IAAA6sB,EAAAluB,EACA2B,EAAAusB,EAAAvsB,UAEA,IAAAA,EAAAilB,aAEAjlB,EAAA6lN,EAAAr2O,IAAAwwB,KAIA,IAAAA,EAAAmkB,uBAEA11C,IAAAuxB,EAAAskB,aAAA,aAEA+B,EAAAkG,EAAAvsB,MA5BAo6M,GAAA,iBAAAA,IAEAp8N,QAAAC,KAAA,sIACA6S,EAAAspN,EACAA,OAAA3rO,GAqCA,IAQAq3O,GAFAh1N,EAAAxhB,OAAAM,QALAupO,QAAA,EACA2M,qBACAjwE,cAAA,GAGA/kJ,IAEAg1N,kBACAD,EAAA,IAAApjL,QACAsjL,GAAA,EACAC,GAAA,EACAC,GAAA,EAIAC,EAAA,EACAC,EAAA,EACApoN,EAAAa,SAAA,SAAAP,GAEA,IAAA,IAAAA,EAAAqB,OAAA,CAEA,IAAA6sB,EAAAluB,EACA2B,EAAAusB,EAAAvsB,SAEA,IAAA,IAAAA,EAAAilB,WAAA,CAEA,IAAAqpD,EAAAu3I,EAAAr2O,IAAAwwB,KAAA,IAAAi6F,EAAAn2E,gBAAAzgB,cAAAkpB,GACAs5L,EAAA5oO,IAAA+iB,EAAAsuE,GACAtuE,EAAAsuE,EAIA,IAAA,IAAAtuE,EAAAmkB,iBAAA,CAEA,IAAAjG,EAAAle,EAAAskB,aAAA,YACAnG,EAAAne,EAAAskB,aAAA,UACAjG,EAAAre,EAAAskB,aAAA,MACAlG,EAAApe,EAAAskB,aAAA,SACAiC,EAAAvmB,EAAAokB,WAEA,QAAA31C,IAAAyvC,EAEA,OAIAgoM,GAAAhoM,EAAA5yB,MACA66N,GAAA5/L,EAAAA,EAAAj7B,MAAA,EAAA4yB,EAAA5yB,MAAA,OAEA7c,IAAA0vC,IAAA4nM,GAAA,QAEAt3O,IAAA4vC,IAAA4nM,GAAA,QAEAx3O,IAAA2vC,IAAA4nM,GAAA,OAQA,IAAAI,GAAA,IAAAN,EAAA/sO,QAAA,SAMA,GALAgtO,EAAAA,IAAA,IAAAD,EAAA/sO,QAAA,UACAitO,EAAAA,IAAA,IAAAF,EAAA/sO,QAAA,SACAktO,EAAAA,IAAA,IAAAH,EAAA/sO,QAAA,MAGAqtO,GAAAD,IAAAv3O,KAAAK,MAAAk3O,GAYA,OAPAnoO,QAAAmJ,MAEA,+HAKA,KAIA,IAEAunG,EACA,kBACA59F,EAAAqoN,OAAAroN,EAAA+kJ,aAAA,uBAAA,oBAAA,kCACAqwE,MAGA,0DAIA,IAAAH,IAGAr3H,GACA,8DAMA,IAAAu3H,IAGAv3H,GACA,yCAKA,IAAAs3H,IAGAt3H,GACA,oEAMA,IAAA03H,IAGA13H,mBACAy3H,MACA,0CAIAz3H,GAAA,eAIA,IAAAnkE,EAAA,IAAA0vE,EAAApzG,QACAkyN,EAAA,IAAA9+G,EAAA1vG,QACA4wD,EAAA,KAEA,IAAA,IAAArqD,EAAAqoN,OAAA,CAGA,IAAAkN,GAAA,IAAApF,aAAAC,OAAAxyH,GAMA43H,EAAAJ,GAAA,IAAAH,EAAA,GAAA,IAAAC,EAAA,EAAA,IAAAC,EAAA,EAAA,IAIAM,EAAAH,EAAA,GAAAD,EAAA,EACAp2O,EAAA,IAAAowG,SAAA,IAAAF,YAAAomI,EAAAt4O,OAAAu4O,EAAAC,IACA,IAAArpM,WAAAntC,EAAA6yD,QAAA3lD,IAAAopO,EAAA,GAGA,IAAAG,EAAAH,EAAAt4O,OACA04O,EAAAJ,EAAAt4O,OAAAu4O,EACAI,EAAA,EACAd,EAAA,SAAAr5L,EAAAvsB,GAEA,IAAAke,EAAAle,EAAAskB,aAAA,YACAnG,EAAAne,EAAAskB,aAAA,UACAjG,EAAAre,EAAAskB,aAAA,MACAlG,EAAApe,EAAAskB,aAAA,SACAiC,EAAAvmB,EAAAokB,WAEA20L,EAAAlrN,gBAAA0+B,EAAAjkC,aAEA,IAAA,IAAAra,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,IAEAs8C,EAAAp7C,EAAA+uC,EAAAh9B,KAAAjT,GACAs8C,EAAApvC,EAAA+iC,EAAA/8B,KAAAlT,GACAs8C,EAAA9tC,EAAAyhC,EAAA9zB,KAAAnc,GAEAs8C,EAAAhjC,aAAAglC,EAAAjkC,aAIAvY,EAAAupO,WAAAkN,EAAAj8L,EAAAp7C,EAAA2hB,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAAj8L,EAAApvC,EAAA2V,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAAj8L,EAAA9tC,EAAAqU,EAAA+kJ,cACA2wE,GAAA,GAGA,IAAAT,IAEA,MAAA5nM,GAEAoM,EAAAp7C,EAAAgvC,EAAAj9B,KAAAjT,GACAs8C,EAAApvC,EAAAgjC,EAAAh9B,KAAAlT,GACAs8C,EAAA9tC,EAAA0hC,EAAA/zB,KAAAnc,GAEAs8C,EAAAxrC,aAAAg6N,GAAAh5N,YAEAhQ,EAAAupO,WAAAkN,EAAAj8L,EAAAp7C,EAAA2hB,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAAj8L,EAAApvC,EAAA2V,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAAj8L,EAAA9tC,EAAAqU,EAAA+kJ,cACA2wE,GAAA,IAIAz2O,EAAAupO,WAAAkN,EAAA,EAAA11N,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAA,EAAA11N,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAA,EAAA11N,EAAA+kJ,cACA2wE,GAAA,KAOA,IAAAP,IAEA,MAAA5nM,GAEAtuC,EAAAupO,WAAAkN,EAAAnoM,EAAAn9B,KAAAjT,GAAA6iB,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAAnoM,EAAAl9B,KAAAlT,GAAA6iB,EAAA+kJ,cACA2wE,GAAA,IAEA,IAAAP,IAEAl2O,EAAAupO,WAAAkN,EAAA,EAAA11N,EAAA+kJ,cACA2wE,GAAA,EAEAz2O,EAAAupO,WAAAkN,EAAA,EAAA11N,EAAA+kJ,cACA2wE,GAAA,KAOA,IAAAR,IAEA,MAAA5nM,GAEAruC,EAAA4sO,SAAA6J,EAAA53O,KAAAK,MAAA,IAAAmvC,EAAAl9B,KAAAjT,KACAu4O,GAAA,EAEAz2O,EAAA4sO,SAAA6J,EAAA53O,KAAAK,MAAA,IAAAmvC,EAAAj9B,KAAAlT,KACAu4O,GAAA,EAEAz2O,EAAA4sO,SAAA6J,EAAA53O,KAAAK,MAAA,IAAAmvC,EAAAh0B,KAAAnc,KACAu4O,GAAA,IAIAz2O,EAAA4sO,SAAA6J,EAAA,KACAA,GAAA,EAEAz2O,EAAA4sO,SAAA6J,EAAA,KACAA,GAAA,EAEAz2O,EAAA4sO,SAAA6J,EAAA,KACAA,GAAA,IAQA,IAAA,IAAAJ,EAIA,GAAA,OAAA7/L,EAEA,IAAA,IAAAt4C,EAAA,EAAAwL,EAAA8sC,EAAAj7B,MAAArd,EAAAwL,EAAAxL,GAAA,EAEA8B,EAAA4sO,SAAA8J,EAAA,GACAA,GAAA,EAEA12O,EAAAspO,UAAAoN,EAAAlgM,EAAArlC,KAAAjT,EAAA,GAAAy4O,EAAA51N,EAAA+kJ,cACA4wE,GAjNA,EAmNA12O,EAAAspO,UAAAoN,EAAAlgM,EAAArlC,KAAAjT,EAAA,GAAAy4O,EAAA51N,EAAA+kJ,cACA4wE,GApNA,EAsNA12O,EAAAspO,UAAAoN,EAAAlgM,EAAArlC,KAAAjT,EAAA,GAAAy4O,EAAA51N,EAAA+kJ,cACA4wE,GAvNA,OA6NA,IAAA,IAAAx4O,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,GAAA,EAEA8B,EAAA4sO,SAAA8J,EAAA,GACAA,GAAA,EAEA12O,EAAAspO,UAAAoN,EAAAC,EAAAz4O,EAAA6iB,EAAA+kJ,cACA4wE,GAnOA,EAqOA12O,EAAAspO,UAAAoN,EAAAC,EAAAz4O,EAAA,EAAA6iB,EAAA+kJ,cACA4wE,GAtOA,EAwOA12O,EAAAspO,UAAAoN,EAAAC,EAAAz4O,EAAA,EAAA6iB,EAAA+kJ,cACA4wE,GAzOA,EAoPAC,GAAAxoM,EAAA5yB,QAIA6vD,EAAAprE,EAAA6yD,WAEA,CAIA,IAAA8jL,EAAA,EACAC,EAAA,GACAC,EAAA,GAEAhB,EAAA,SAAAr5L,EAAAvsB,GAEA,IAAAke,EAAAle,EAAAskB,aAAA,YACAnG,EAAAne,EAAAskB,aAAA,UACAjG,EAAAre,EAAAskB,aAAA,MACAlG,EAAApe,EAAAskB,aAAA,SACAiC,EAAAvmB,EAAAokB,WAEA20L,EAAAlrN,gBAAA0+B,EAAAjkC,aAGA,IAAA,IAAAra,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,IAAA,CAEAs8C,EAAAp7C,EAAA+uC,EAAAh9B,KAAAjT,GACAs8C,EAAApvC,EAAA+iC,EAAA/8B,KAAAlT,GACAs8C,EAAA9tC,EAAAyhC,EAAA9zB,KAAAnc,GAEAs8C,EAAAhjC,aAAAglC,EAAAjkC,aAIA,IAAAkhB,EACA+gB,EAAAp7C,EAAA,IACAo7C,EAAApvC,EAAA,IACAovC,EAAA9tC,GAGA,IAAAspO,IAEA,MAAA5nM,GAEAoM,EAAAp7C,EAAAgvC,EAAAj9B,KAAAjT,GACAs8C,EAAApvC,EAAAgjC,EAAAh9B,KAAAlT,GACAs8C,EAAA9tC,EAAA0hC,EAAA/zB,KAAAnc,GAEAs8C,EAAAxrC,aAAAg6N,GAAAh5N,YAEAypB,GAAA,IACA+gB,EAAAp7C,EAAA,IACAo7C,EAAApvC,EAAA,IACAovC,EAAA9tC,GAIA+sB,GAAA,WAOA,IAAAy8M,IAEA,MAAA5nM,EAEA7U,GAAA,IACA6U,EAAAn9B,KAAAjT,GAAA,IACAowC,EAAAl9B,KAAAlT,IAEA,IAAAg4O,IAEAz8M,GAAA,UAOA,IAAAw8M,IAIAx8M,GAFA,MAAA4U,EAEA,IACAxvC,KAAAK,MAAA,IAAAmvC,EAAAl9B,KAAAjT,IAAA,IACAW,KAAAK,MAAA,IAAAmvC,EAAAj9B,KAAAlT,IAAA,IACAW,KAAAK,MAAA,IAAAmvC,EAAAh0B,KAAAnc,IAIA,gBAMA04O,GAAAn9M,EAAA,KAKA,IAAA,IAAA48M,EAAA,CAEA,GAAA,OAAA7/L,EAEA,IAAA,IAAAt4C,EAAA,EAAAwL,EAAA8sC,EAAAj7B,MAAArd,EAAAwL,EAAAxL,GAAA,EAEA24O,QAAArgM,EAAArlC,KAAAjT,EAAA,GAAAy4O,IACAE,OAAArgM,EAAArlC,KAAAjT,EAAA,GAAAy4O,IACAE,OAAArgM,EAAArlC,KAAAjT,EAAA,GAAAy4O,WAMA,IAAA,IAAAz4O,EAAA,EAAAwL,EAAAykC,EAAA5yB,MAAArd,EAAAwL,EAAAxL,GAAA,EAEA24O,QAAAF,EAAAz4O,KAAAy4O,EAAAz4O,EAAA,KAAAy4O,EAAAz4O,EAAA,MAMAk4O,GAAA5/L,EAAAA,EAAAj7B,MAAA,EAAA4yB,EAAA5yB,MAAA,EAIAo7N,GAAAxoM,EAAA5yB,QAIA6vD,KAAAuzC,IAAAi4H,IAAAP,KAAAQ,MAAA,OAKA,MADA,mBAAAxM,GAAAl4K,sBAAA,IAAAk4K,EAAAj/J,IACAA,IAMA8+C,EAAA0rH,cAGAj4O,EAAA,2BACA,kBAEA,uBACA,wBACA,sBACA,mCACA,kCACA,8BACA,qCACA,uBACA,uBACA,uBACA,4BACA,6BACA,gCACA,2BACA,0BACA,8BACA,gCAEA,kCACA,8BACA,8BACA,4BAEA,sBACA,wBACA,sBAEA,sBACA,sBACA,sBAEA,sBAEA,sBACA,sBAEA,yBAGA,0BACA,wBACA,sBACA,wBACA,uBACA,sBACA,sBAEA,sBACA,sBACA,uBACA,sBACA,sBACA,sBAEA,sBACA,oBACA,sBACA,sBACA,sBACA,sBAEA,+BACA,kCAEA,4BACA,0BACA,0BACA,2BACA,8BACA,2BAEA,SAAAusH,GACA,OAAAA,IAEAvsH,EAAA,sBAAA,2BAAA,SAAAa,GAAA,OAAAA","file":"../skylark-threejs-ex-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-threejs/three',[], function () { \r\n\t'use strict';\r\n\r\n\tvar exports = {};\r\n\r\n\t// Polyfills\r\n\r\n\tif ( Number.EPSILON === undefined ) {\r\n\r\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n\t}\r\n\r\n\tif ( Number.isInteger === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\r\n\r\n\t\tNumber.isInteger = function ( value ) {\r\n\r\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( Math.sign === undefined ) {\r\n\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\t\tMath.sign = function ( x ) {\r\n\r\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tif ( 'name' in Function.prototype === false ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\t\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif ( Object.assign === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\t\tObject.assign = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = Object( target );\r\n\r\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\r\n\r\n\t\t\t\tvar source = arguments[ index ];\r\n\r\n\t\t\t\tif ( source !== undefined && source !== null ) {\r\n\r\n\t\t\t\t\tfor ( var nextKey in source ) {\r\n\r\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\r\n\r\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar REVISION = '111';\r\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\n\tvar CullFaceNone = 0;\r\n\tvar CullFaceBack = 1;\r\n\tvar CullFaceFront = 2;\r\n\tvar CullFaceFrontBack = 3;\r\n\tvar FrontFaceDirectionCW = 0;\r\n\tvar FrontFaceDirectionCCW = 1;\r\n\tvar BasicShadowMap = 0;\r\n\tvar PCFShadowMap = 1;\r\n\tvar PCFSoftShadowMap = 2;\r\n\tvar VSMShadowMap = 3;\r\n\tvar FrontSide = 0;\r\n\tvar BackSide = 1;\r\n\tvar DoubleSide = 2;\r\n\tvar FlatShading = 1;\r\n\tvar SmoothShading = 2;\r\n\tvar NoColors = 0;\r\n\tvar FaceColors = 1;\r\n\tvar VertexColors = 2;\r\n\tvar NoBlending = 0;\r\n\tvar NormalBlending = 1;\r\n\tvar AdditiveBlending = 2;\r\n\tvar SubtractiveBlending = 3;\r\n\tvar MultiplyBlending = 4;\r\n\tvar CustomBlending = 5;\r\n\tvar AddEquation = 100;\r\n\tvar SubtractEquation = 101;\r\n\tvar ReverseSubtractEquation = 102;\r\n\tvar MinEquation = 103;\r\n\tvar MaxEquation = 104;\r\n\tvar ZeroFactor = 200;\r\n\tvar OneFactor = 201;\r\n\tvar SrcColorFactor = 202;\r\n\tvar OneMinusSrcColorFactor = 203;\r\n\tvar SrcAlphaFactor = 204;\r\n\tvar OneMinusSrcAlphaFactor = 205;\r\n\tvar DstAlphaFactor = 206;\r\n\tvar OneMinusDstAlphaFactor = 207;\r\n\tvar DstColorFactor = 208;\r\n\tvar OneMinusDstColorFactor = 209;\r\n\tvar SrcAlphaSaturateFactor = 210;\r\n\tvar NeverDepth = 0;\r\n\tvar AlwaysDepth = 1;\r\n\tvar LessDepth = 2;\r\n\tvar LessEqualDepth = 3;\r\n\tvar EqualDepth = 4;\r\n\tvar GreaterEqualDepth = 5;\r\n\tvar GreaterDepth = 6;\r\n\tvar NotEqualDepth = 7;\r\n\tvar MultiplyOperation = 0;\r\n\tvar MixOperation = 1;\r\n\tvar AddOperation = 2;\r\n\tvar NoToneMapping = 0;\r\n\tvar LinearToneMapping = 1;\r\n\tvar ReinhardToneMapping = 2;\r\n\tvar Uncharted2ToneMapping = 3;\r\n\tvar CineonToneMapping = 4;\r\n\tvar ACESFilmicToneMapping = 5;\r\n\r\n\tvar UVMapping = 300;\r\n\tvar CubeReflectionMapping = 301;\r\n\tvar CubeRefractionMapping = 302;\r\n\tvar EquirectangularReflectionMapping = 303;\r\n\tvar EquirectangularRefractionMapping = 304;\r\n\tvar SphericalReflectionMapping = 305;\r\n\tvar CubeUVReflectionMapping = 306;\r\n\tvar CubeUVRefractionMapping = 307;\r\n\tvar RepeatWrapping = 1000;\r\n\tvar ClampToEdgeWrapping = 1001;\r\n\tvar MirroredRepeatWrapping = 1002;\r\n\tvar NearestFilter = 1003;\r\n\tvar NearestMipmapNearestFilter = 1004;\r\n\tvar NearestMipMapNearestFilter = 1004;\r\n\tvar NearestMipmapLinearFilter = 1005;\r\n\tvar NearestMipMapLinearFilter = 1005;\r\n\tvar LinearFilter = 1006;\r\n\tvar LinearMipmapNearestFilter = 1007;\r\n\tvar LinearMipMapNearestFilter = 1007;\r\n\tvar LinearMipmapLinearFilter = 1008;\r\n\tvar LinearMipMapLinearFilter = 1008;\r\n\tvar UnsignedByteType = 1009;\r\n\tvar ByteType = 1010;\r\n\tvar ShortType = 1011;\r\n\tvar UnsignedShortType = 1012;\r\n\tvar IntType = 1013;\r\n\tvar UnsignedIntType = 1014;\r\n\tvar FloatType = 1015;\r\n\tvar HalfFloatType = 1016;\r\n\tvar UnsignedShort4444Type = 1017;\r\n\tvar UnsignedShort5551Type = 1018;\r\n\tvar UnsignedShort565Type = 1019;\r\n\tvar UnsignedInt248Type = 1020;\r\n\tvar AlphaFormat = 1021;\r\n\tvar RGBFormat = 1022;\r\n\tvar RGBAFormat = 1023;\r\n\tvar LuminanceFormat = 1024;\r\n\tvar LuminanceAlphaFormat = 1025;\r\n\tvar RGBEFormat = RGBAFormat;\r\n\tvar DepthFormat = 1026;\r\n\tvar DepthStencilFormat = 1027;\r\n\tvar RedFormat = 1028;\r\n\tvar RGB_S3TC_DXT1_Format = 33776;\r\n\tvar RGBA_S3TC_DXT1_Format = 33777;\r\n\tvar RGBA_S3TC_DXT3_Format = 33778;\r\n\tvar RGBA_S3TC_DXT5_Format = 33779;\r\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\r\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\r\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\r\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\r\n\tvar RGB_ETC1_Format = 36196;\r\n\tvar RGBA_ASTC_4x4_Format = 37808;\r\n\tvar RGBA_ASTC_5x4_Format = 37809;\r\n\tvar RGBA_ASTC_5x5_Format = 37810;\r\n\tvar RGBA_ASTC_6x5_Format = 37811;\r\n\tvar RGBA_ASTC_6x6_Format = 37812;\r\n\tvar RGBA_ASTC_8x5_Format = 37813;\r\n\tvar RGBA_ASTC_8x6_Format = 37814;\r\n\tvar RGBA_ASTC_8x8_Format = 37815;\r\n\tvar RGBA_ASTC_10x5_Format = 37816;\r\n\tvar RGBA_ASTC_10x6_Format = 37817;\r\n\tvar RGBA_ASTC_10x8_Format = 37818;\r\n\tvar RGBA_ASTC_10x10_Format = 37819;\r\n\tvar RGBA_ASTC_12x10_Format = 37820;\r\n\tvar RGBA_ASTC_12x12_Format = 37821;\r\n\tvar LoopOnce = 2200;\r\n\tvar LoopRepeat = 2201;\r\n\tvar LoopPingPong = 2202;\r\n\tvar InterpolateDiscrete = 2300;\r\n\tvar InterpolateLinear = 2301;\r\n\tvar InterpolateSmooth = 2302;\r\n\tvar ZeroCurvatureEnding = 2400;\r\n\tvar ZeroSlopeEnding = 2401;\r\n\tvar WrapAroundEnding = 2402;\r\n\tvar TrianglesDrawMode = 0;\r\n\tvar TriangleStripDrawMode = 1;\r\n\tvar TriangleFanDrawMode = 2;\r\n\tvar LinearEncoding = 3000;\r\n\tvar sRGBEncoding = 3001;\r\n\tvar GammaEncoding = 3007;\r\n\tvar RGBEEncoding = 3002;\r\n\tvar LogLuvEncoding = 3003;\r\n\tvar RGBM7Encoding = 3004;\r\n\tvar RGBM16Encoding = 3005;\r\n\tvar RGBDEncoding = 3006;\r\n\tvar BasicDepthPacking = 3200;\r\n\tvar RGBADepthPacking = 3201;\r\n\tvar TangentSpaceNormalMap = 0;\r\n\tvar ObjectSpaceNormalMap = 1;\r\n\r\n\tvar ZeroStencilOp = 0;\r\n\tvar KeepStencilOp = 7680;\r\n\tvar ReplaceStencilOp = 7681;\r\n\tvar IncrementStencilOp = 7682;\r\n\tvar DecrementStencilOp = 7683;\r\n\tvar IncrementWrapStencilOp = 34055;\r\n\tvar DecrementWrapStencilOp = 34056;\r\n\tvar InvertStencilOp = 5386;\r\n\r\n\tvar NeverStencilFunc = 512;\r\n\tvar LessStencilFunc = 513;\r\n\tvar EqualStencilFunc = 514;\r\n\tvar LessEqualStencilFunc = 515;\r\n\tvar GreaterStencilFunc = 516;\r\n\tvar NotEqualStencilFunc = 517;\r\n\tvar GreaterEqualStencilFunc = 518;\r\n\tvar AlwaysStencilFunc = 519;\r\n\r\n\tvar StaticDrawUsage = 35044;\r\n\tvar DynamicDrawUsage = 35048;\r\n\tvar StreamDrawUsage = 35040;\r\n\tvar StaticReadUsage = 35045;\r\n\tvar DynamicReadUsage = 35049;\r\n\tvar StreamReadUsage = 35041;\r\n\tvar StaticCopyUsage = 35046;\r\n\tvar DynamicCopyUsage = 35050;\r\n\tvar StreamCopyUsage = 35042;\r\n\r\n\t/**\r\n\t * https://github.com/mrdoob/eventdispatcher.js/\r\n\t */\r\n\r\n\tfunction EventDispatcher() {}\r\n\r\n\tObject.assign( EventDispatcher.prototype, {\r\n\r\n\t\taddEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\thasEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return false; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t\t},\r\n\r\n\t\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tdispatchEvent: function ( event ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tevent.target = this;\r\n\r\n\t\t\t\tvar array = listenerArray.slice( 0 );\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _lut = [];\r\n\r\n\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t}\r\n\r\n\tvar _Math = {\r\n\r\n\t\tDEG2RAD: Math.PI / 180,\r\n\t\tRAD2DEG: 180 / Math.PI,\r\n\r\n\t\tgenerateUUID: function () {\r\n\r\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\r\n\r\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\t\t\treturn uuid.toUpperCase();\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( value, min, max ) {\r\n\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t\t},\r\n\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t\t},\r\n\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t\t},\r\n\r\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\t\tlerp: function ( x, y, t ) {\r\n\r\n\t\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t\t},\r\n\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) { return 0; }\r\n\t\t\tif ( x >= max ) { return 1; }\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t},\r\n\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) { return 0; }\r\n\t\t\tif ( x >= max ) { return 1; }\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t\t},\r\n\r\n\t\t// Random integer from <low, high> interval\r\n\r\n\t\trandInt: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <low, high> interval\r\n\r\n\t\trandFloat: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\r\n\t\trandFloatSpread: function ( range ) {\r\n\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t\t},\r\n\r\n\t\tdegToRad: function ( degrees ) {\r\n\r\n\t\t\treturn degrees * _Math.DEG2RAD;\r\n\r\n\t\t},\r\n\r\n\t\tradToDeg: function ( radians ) {\r\n\r\n\t\t\treturn radians * _Math.RAD2DEG;\r\n\r\n\t\t},\r\n\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t\t},\r\n\r\n\t\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tfunction Vector2( x, y ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.x = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.y = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tisVector2: true,\r\n\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v ) {\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tangle: function () {\r\n\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\r\n\r\n\t\t\treturn angle;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateAround: function ( center, angle ) {\r\n\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Quaternion( x, y, z, w ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.assign( Quaternion, {\r\n\r\n\t\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t\t},\r\n\r\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\t\tx0 *= f;\r\n\t\t\t\t\ty0 *= f;\r\n\t\t\t\t\tz0 *= f;\r\n\t\t\t\t\tw0 *= f;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdst[ dstOffset ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Quaternion.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tw: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._w = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Quaternion.prototype, {\r\n\r\n\t\tisQuaternion: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( quaternion ) {\r\n\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\t\tvar cos = Math.cos;\r\n\t\t\tvar sin = Math.sin;\r\n\r\n\t\t\tvar c1 = cos( x / 2 );\r\n\t\t\tvar c2 = cos( y / 2 );\r\n\t\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\t\tvar s1 = sin( x / 2 );\r\n\t\t\tvar s2 = sin( y / 2 );\r\n\t\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\r\n\t\t\tif ( trace > 0 ) {\r\n\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\r\n\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\r\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\t\tthis._z = 0;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( q ) {\r\n\r\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t\t},\r\n\r\n\t\trotateTowards: function ( q, step ) {\r\n\r\n\t\t\tvar angle = this.angleTo( q );\r\n\r\n\t\t\tif ( angle === 0 ) { return this; }\r\n\r\n\t\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\t\tthis.slerp( q, t );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tinverse: function () {\r\n\r\n\t\t\t// quaternion is assumed to have unit length\r\n\r\n\t\t\treturn this.conjugate();\r\n\r\n\t\t},\r\n\r\n\t\tconjugate: function () {\r\n\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tvar l = this.length();\r\n\r\n\t\t\tif ( l === 0 ) {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl = 1 / l;\r\n\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( q, p ) {\r\n\r\n\t\t\tif ( p !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( q ) {\r\n\r\n\t\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tslerp: function ( qb, t ) {\r\n\r\n\t\t\tif ( t === 0 ) { return this; }\r\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\r\n\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.copy( qb );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\t\tvar s = 1 - t;\r\n\t\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\t\tthis.normalize();\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( quaternion ) {\r\n\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _vector = new Vector3();\r\n\tvar _quaternion = new Quaternion();\r\n\r\n\tfunction Vector3( x, y, z ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tisVector3: true,\r\n\r\n\t\tset: function ( x, y, z ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyNormalMatrix: function ( m ) {\r\n\r\n\t\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t\t// calculate quat * vector\r\n\r\n\t\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t\t// calculate result * inverse quat\r\n\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tunproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\ttransformDirection: function ( m ) {\r\n\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t\t},\r\n\r\n\t\t// TODO lengthSquared?\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.crossVectors( this, v );\r\n\r\n\t\t},\r\n\r\n\t\tcrossVectors: function ( a, b ) {\r\n\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnVector: function ( v ) {\r\n\r\n\t\t\t// v cannot be the zero v\r\n\r\n\t\t\tvar scalar = v.dot( this ) / v.lengthSq();\r\n\r\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnPlane: function ( planeNormal ) {\r\n\r\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( _vector );\r\n\r\n\t\t},\r\n\r\n\t\treflect: function ( normal ) {\r\n\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\r\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( v ) {\r\n\r\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\t\tif ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\\'t handle zero length vectors.' ); }\r\n\r\n\t\t\tvar theta = this.dot( v ) / denominator;\r\n\r\n\t\t\t// clamp, to handle numerical problems\r\n\r\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSpherical: function ( s ) {\r\n\r\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.x = radius * Math.sin( theta );\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 12 ];\r\n\t\t\tthis.y = e[ 13 ];\r\n\t\t\tthis.z = e[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t * @author tschw\r\n\t */\r\n\r\n\tvar _vector$1 = new Vector3();\r\n\r\n\tfunction Matrix3() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tisMatrix3: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix4: function ( m ) {\r\n\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector$1.x = attribute.getX( i );\r\n\t\t\t\t_vector$1.y = attribute.getY( i );\r\n\t\t\t\t_vector$1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t_vector$1.applyMatrix3( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar me = matrix.elements,\r\n\t\t\t\tte = this.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\t\tte[ 3 ] = t12 * detInv;\r\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\t\tte[ 6 ] = t13 * detInv;\r\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar tmp, m = this.elements;\r\n\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t\t},\r\n\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\t\tvar m = this.elements;\r\n\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\t\tvar c = Math.cos( rotation );\r\n\t\t\tvar s = Math.sin( rotation );\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t\t0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( sx, sy ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\r\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotate: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta );\r\n\t\t\tvar s = Math.sin( theta );\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\r\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\r\n\r\n\t\t\tte[ 0 ] = c * a11 + s * a21;\r\n\t\t\tte[ 3 ] = c * a12 + s * a22;\r\n\t\t\tte[ 6 ] = c * a13 + s * a23;\r\n\r\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\r\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\r\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( tx, ty ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\r\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar _canvas;\r\n\r\n\tvar ImageUtils = {\r\n\r\n\t\tgetDataURL: function ( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\r\n\r\n\t\t\t\treturn image.src;\r\n\r\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\r\n\r\n\t\t\t\t_canvas.width = image.width;\r\n\t\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\t\tvar context = _canvas.getContext( '2d' );\r\n\r\n\t\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcanvas = _canvas;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar textureId = 0;\r\n\r\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\r\n\r\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\r\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\r\n\r\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\r\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\r\n\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.matrixAutoUpdate = true;\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t\t//\r\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\r\n\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\r\n\t}\r\n\r\n\tTexture.DEFAULT_IMAGE = undefined;\r\n\tTexture.DEFAULT_MAPPING = UVMapping;\r\n\r\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Texture,\r\n\r\n\t\tisTexture: true,\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.image = source.image;\r\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\t\tthis.mapping = source.mapping;\r\n\r\n\t\t\tthis.wrapS = source.wrapS;\r\n\t\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\t\tthis.magFilter = source.magFilter;\r\n\t\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\t\tthis.format = source.format;\r\n\t\t\tthis.type = source.type;\r\n\r\n\t\t\tthis.offset.copy( source.offset );\r\n\t\t\tthis.repeat.copy( source.repeat );\r\n\t\t\tthis.center.copy( source.center );\r\n\t\t\tthis.rotation = source.rotation;\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\t\tthis.flipY = source.flipY;\r\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\t\tthis.encoding = source.encoding;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = {\r\n\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Texture',\r\n\t\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t\t},\r\n\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\tname: this.name,\r\n\r\n\t\t\t\tmapping: this.mapping,\r\n\r\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\t\trotation: this.rotation,\r\n\r\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\t\tformat: this.format,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\tencoding: this.encoding,\r\n\r\n\t\t\t\tminFilter: this.minFilter,\r\n\t\t\t\tmagFilter: this.magFilter,\r\n\t\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\t\tflipY: this.flipY,\r\n\r\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\r\n\t\t\t\tunpackAlignment: this.unpackAlignment\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\t\tvar image = this.image;\r\n\r\n\t\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tvar url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( image ) ) {\r\n\r\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\r\n\r\n\t\t\t\t\t\turl = [];\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// process single image\r\n\r\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\t\turl: url\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutput.image = image.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t},\r\n\r\n\t\ttransformUv: function ( uv ) {\r\n\r\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\r\n\r\n\t\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.flipY ) {\r\n\r\n\t\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uv;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Vector4( x, y, z, w ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector4.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.z = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.w = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tisVector4: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\t\tthis.w = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( w ) {\r\n\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t\t// q is assumed to be normalized\r\n\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t\tthis.x = 1;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = q.x / s;\r\n\t\t\t\tthis.y = q.y / s;\r\n\t\t\t\tthis.z = q.z / s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\t\tte = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\t\tangle = Math.PI;\r\n\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\r\n\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\t\t\tthis.w = attribute.getW( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Marius Kintel / https://github.com/kintel\r\n\t */\r\n\r\n\t/*\r\n\t In options, we can specify:\r\n\t * Texture parameters for an auto-generated target texture\r\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n\t*/\r\n\tfunction WebGLRenderTarget( width, height, options ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\toptions = options || {};\r\n\r\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\r\n\r\n\t\tthis.texture.image = {};\r\n\t\tthis.texture.image.width = width;\r\n\t\tthis.texture.image.height = height;\r\n\r\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\r\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\r\n\r\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\r\n\r\n\t}\r\n\r\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: WebGLRenderTarget,\r\n\r\n\t\tisWebGLRenderTarget: true,\r\n\r\n\t\tsetSize: function ( width, height ) {\r\n\r\n\t\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tthis.texture.image.width = width;\r\n\t\t\t\tthis.texture.image.height = height;\r\n\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\t\tthis.texture = source.texture.clone();\r\n\r\n\t\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\t\tthis.depthTexture = source.depthTexture;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t */\r\n\r\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.samples = 4;\r\n\r\n\t}\r\n\r\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\r\n\r\n\t\tconstructor: WebGLMultisampleRenderTarget,\r\n\r\n\t\tisWebGLMultisampleRenderTarget: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.samples = source.samples;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _v1 = new Vector3();\r\n\tvar _m1 = new Matrix4();\r\n\tvar _zero = new Vector3( 0, 0, 0 );\r\n\tvar _one = new Vector3( 1, 1, 1 );\r\n\tvar _x = new Vector3();\r\n\tvar _y = new Vector3();\r\n\tvar _z = new Vector3();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author jordi_ros / http://plattsoft.com\r\n\t * @author D1plo1d / http://github.com/D1plo1d\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author timknip / http://www.floorplanner.com/\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Matrix4() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\tisMatrix4: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyPosition: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractRotation: function ( m ) {\r\n\r\n\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bottom row\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\t// last column\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\t_z.subVectors( eye, target );\r\n\r\n\t\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\t_z.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_z.normalize();\r\n\t\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_x.normalize();\r\n\t\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m, n ) {\r\n\r\n\t\t\tif ( n !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_v1.x = attribute.getX( i );\r\n\t\t\t\t_v1.y = attribute.getY( i );\r\n\t\t\t\t_v1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t_v1.applyMatrix4( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, _v1.x, _v1.y, _v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPosition: function ( x, y, z ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\tte[ 12 ] = x.x;\r\n\t\t\t\tte[ 13 ] = x.y;\r\n\t\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tte[ 12 ] = x;\r\n\t\t\t\tte[ 13 ] = y;\r\n\t\t\t\tte[ 14 ] = z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements,\r\n\t\t\t\tme = m.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 4 ] = t12 * detInv;\r\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 8 ] = t13 * detInv;\r\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 12 ] = t14 * detInv;\r\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( v ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t\t},\r\n\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationX: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s, c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationY: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts, c, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\t return this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, y, z, 0,\r\n\t\t\t\tx, 1, z, 0,\r\n\t\t\t\tx, y, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = position.x;\r\n\t\t\tte[ 13 ] = position.y;\r\n\t\t\tte[ 14 ] = position.z;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdecompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) { sx = - sx; }\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\t\t\t_m1.copy( this );\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tif ( far === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = 1.0 / ( right - left );\r\n\t\t\tvar h = 1.0 / ( top - bottom );\r\n\t\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\t\tvar x = ( right + left ) * w;\r\n\t\t\tvar y = ( top + bottom ) * h;\r\n\t\t\tvar z = ( far + near ) * p;\r\n\r\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _matrix = new Matrix4();\r\n\tvar _quaternion$1 = new Quaternion();\r\n\r\n\tfunction Euler( x, y, z, order ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._order = order || Euler.DefaultOrder;\r\n\r\n\t}\r\n\r\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\n\tEuler.DefaultOrder = 'XYZ';\r\n\r\n\tObject.defineProperties( Euler.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\torder: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._order;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._order = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Euler.prototype, {\r\n\r\n\t\tisEuler: true,\r\n\r\n\t\tset: function ( x, y, z, order ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( euler ) {\r\n\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\t\tvar clamp = _Math.clamp;\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\torder = order || this._order;\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._order = order;\r\n\r\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromQuaternion: function ( q, order, update ) {\r\n\r\n\t\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t\t},\r\n\r\n\t\treorder: function ( newOrder ) {\r\n\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t\t_quaternion$1.setFromEuler( this );\r\n\r\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( euler ) {\r\n\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array ) {\r\n\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\t\tif ( optionalResult ) {\r\n\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Layers() {\r\n\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Layers.prototype, {\r\n\r\n\t\tset: function ( channel ) {\r\n\r\n\t\t\tthis.mask = 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenable: function ( channel ) {\r\n\r\n\t\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenableAll: function () {\r\n\r\n\t\t\tthis.mask = 0xffffffff | 0;\r\n\r\n\t\t},\r\n\r\n\t\ttoggle: function ( channel ) {\r\n\r\n\t\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tdisable: function ( channel ) {\r\n\r\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t\t},\r\n\r\n\t\tdisableAll: function () {\r\n\r\n\t\t\tthis.mask = 0;\r\n\r\n\t\t},\r\n\r\n\t\ttest: function ( layers ) {\r\n\r\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _object3DId = 0;\r\n\r\n\tvar _v1$1 = new Vector3();\r\n\tvar _q1 = new Quaternion();\r\n\tvar _m1$1 = new Matrix4();\r\n\tvar _target = new Vector3();\r\n\r\n\tvar _position = new Vector3();\r\n\tvar _scale = new Vector3();\r\n\tvar _quaternion$2 = new Quaternion();\r\n\r\n\tvar _xAxis = new Vector3( 1, 0, 0 );\r\n\tvar _yAxis = new Vector3( 0, 1, 0 );\r\n\tvar _zAxis = new Vector3( 0, 0, 1 );\r\n\r\n\tvar _addedEvent = { type: 'added' };\r\n\tvar _removedEvent = { type: 'removed' };\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author elephantatwork / www.elephantatwork.ch\r\n\t */\r\n\r\n\tfunction Object3D() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DefaultUp.clone();\r\n\r\n\t\tvar position = new Vector3();\r\n\t\tvar rotation = new Euler();\r\n\t\tvar quaternion = new Quaternion();\r\n\t\tvar scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\r\n\tObject3D.DefaultMatrixAutoUpdate = true;\r\n\r\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Object3D,\r\n\r\n\t\tisObject3D: true,\r\n\r\n\t\tonBeforeRender: function () {},\r\n\t\tonAfterRender: function () {},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// assumes q is normalized\r\n\r\n\t\t\tthis.quaternion.copy( q );\r\n\r\n\t\t},\r\n\r\n\t\trotateOnAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// rotate object on axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateOnWorldAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// rotate object on axis in world space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\t\t// method assumes no rotated parent\r\n\r\n\t\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateOnAxis: function ( axis, distance ) {\r\n\r\n\t\t\t// translate object by distance along axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslateX: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateY: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateZ: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\tlocalToWorld: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tworldToLocal: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( x, y, z ) {\r\n\r\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\t_target.copy( x );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_target.set( x, y, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\r\n\r\n\t\t\tif ( parent ) {\r\n\r\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\r\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\r\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object === this ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( object && object.isObject3D ) ) {\r\n\r\n\t\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.parent = this;\r\n\t\t\t\tthis.children.push( object );\r\n\r\n\t\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tobject.parent = null;\r\n\t\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( object ) {\r\n\r\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1$1.getInverse( this.matrixWorld );\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.applyMatrix( _m1$1 );\r\n\r\n\t\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectById: function ( id ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByName: function ( name ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\t\tif ( this[ name ] === value ) { return this; }\r\n\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar child = this.children[ i ];\r\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldPosition: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldQuaternion: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\r\n\t\t\t\ttarget = new Quaternion();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldScale: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\traycast: function () {},\r\n\r\n\t\ttraverse: function ( callback ) {\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseVisible: function ( callback ) {\r\n\r\n\t\t\tif ( this.visible === false ) { return; }\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tcallback( parent );\r\n\r\n\t\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t\tforce = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\t\tvar children = this.children;\r\n\r\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\t// meta is a string when called from JSON.stringify\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tvar output = {};\r\n\r\n\t\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t\t// not providing it implies that this is the root object\r\n\t\t\t// being serialized.\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\t// initialize meta obj\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\tgeometries: {},\r\n\t\t\t\t\tmaterials: {},\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {},\r\n\t\t\t\t\tshapes: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t\toutput.metadata = {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Object',\r\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// standard Object3D serialization\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tobject.uuid = this.uuid;\r\n\t\t\tobject.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\r\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\r\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\r\n\t\t\tif ( this.visible === false ) { object.visible = false; }\r\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\r\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\r\n\r\n\t\t\tobject.layers = this.layers.mask;\r\n\t\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\r\n\r\n\t\t\t// object specific properties\r\n\r\n\t\t\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }\r\n\r\n\t\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\t\tobject.count = this.count;\r\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn element.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\t\tvar parameters = this.geometry.parameters;\r\n\r\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\t\tvar shapes = parameters.shapes;\r\n\r\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\t\tvar uuids = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\t\tobject.children = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\r\n\r\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\r\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\r\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\r\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\r\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.object = object;\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t\t// extract data from the cache hash\r\n\t\t\t// remove metadata on each item\r\n\t\t\t// and return as array\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function ( recursive ) {\r\n\r\n\t\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tif ( recursive === undefined ) { recursive = true; }\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.up.copy( source.up );\r\n\r\n\t\t\tthis.position.copy( source.position );\r\n\t\t\tthis.quaternion.copy( source.quaternion );\r\n\t\t\tthis.scale.copy( source.scale );\r\n\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\t\tthis.layers.mask = source.layers.mask;\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.castShadow = source.castShadow;\r\n\t\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Scene() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Scene';\r\n\r\n\t\tthis.background = null;\r\n\t\tthis.fog = null;\r\n\t\tthis.overrideMaterial = null;\r\n\r\n\t\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Scene,\r\n\r\n\t\tisScene: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\r\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\r\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\r\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _points = [\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3()\r\n\t];\r\n\r\n\tvar _vector$2 = new Vector3();\r\n\r\n\tvar _box = new Box3();\r\n\r\n\t// triangle centered vertices\r\n\r\n\tvar _v0 = new Vector3();\r\n\tvar _v1$2 = new Vector3();\r\n\tvar _v2 = new Vector3();\r\n\r\n\t// triangle edge vectors\r\n\r\n\tvar _f0 = new Vector3();\r\n\tvar _f1 = new Vector3();\r\n\tvar _f2 = new Vector3();\r\n\r\n\tvar _center = new Vector3();\r\n\tvar _extents = new Vector3();\r\n\tvar _triangleNormal = new Vector3();\r\n\tvar _testAxis = new Vector3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tisBox3: true,\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromArray: function ( array ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar x = array[ i ];\r\n\t\t\t\tvar y = array[ i + 1 ];\r\n\t\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\tif ( z < minZ ) { minZ = z; }\r\n\r\n\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar x = attribute.getX( i );\r\n\t\t\t\tvar y = attribute.getY( i );\r\n\t\t\t\tvar z = attribute.getZ( i );\r\n\r\n\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\tif ( z < minZ ) { minZ = z; }\r\n\r\n\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\treturn this.expandByObject( object );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByObject: function ( object ) {\r\n\r\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box.copy( geometry.boundingBox );\r\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tthis.expandByPoint( _box.min );\r\n\t\t\t\tthis.expandByPoint( _box.max );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByObject( children[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, _vector$2 );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\t\tvar min, max;\r\n\r\n\t\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsTriangle: function ( triangle ) {\r\n\r\n\t\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute box center and extents\r\n\t\t\tthis.getCenter( _center );\r\n\t\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t\t// translate triangle to aabb origin\r\n\t\t\t_v0.subVectors( triangle.a, _center );\r\n\t\t\t_v1$2.subVectors( triangle.b, _center );\r\n\t\t\t_v2.subVectors( triangle.c, _center );\r\n\r\n\t\t\t// compute edge vectors for triangle\r\n\t\t\t_f0.subVectors( _v1$2, _v0 );\r\n\t\t\t_f1.subVectors( _v2, _v1$2 );\r\n\t\t\t_f2.subVectors( _v0, _v2 );\r\n\r\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\t\tvar axes = [\r\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t\t];\r\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// test 3 face normals from the aabb\r\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// finally testing the face normal of the triangle\r\n\t\t\t// use already existing triangle edge vectors here\r\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingSphere: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\r\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( _vector$2 ).length() * 0.5;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif ( this.isEmpty() ) { return this; }\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\t\tthis.setFromPoints( _points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t\t_testAxis.fromArray( axes, i );\r\n\t\t\t// project the aabb onto the seperating axis\r\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\r\n\t\t\tvar p0 = v0.dot( _testAxis );\r\n\t\t\tvar p1 = v1.dot( _testAxis );\r\n\t\t\tvar p2 = v2.dot( _testAxis );\r\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t\t// the axis is seperating and we can exit\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tvar _box$1 = new Box3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Sphere( center, radius ) {\r\n\r\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Sphere.prototype, {\r\n\r\n\t\tset: function ( center, radius ) {\r\n\r\n\t\t\tthis.center.copy( center );\r\n\t\t\tthis.radius = radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sphere ) {\r\n\r\n\t\t\tthis.center.copy( sphere.center );\r\n\t\t\tthis.radius = sphere.radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tempty: function () {\r\n\r\n\t\t\treturn ( this.radius <= 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsSphere( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.copy( point );\r\n\r\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingBox: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\r\n\t\t\t\ttarget = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.set( this.center, this.center );\r\n\t\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.center.applyMatrix4( matrix );\r\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.center.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _vector$3 = new Vector3();\r\n\tvar _segCenter = new Vector3();\r\n\tvar _segDir = new Vector3();\r\n\tvar _diff = new Vector3();\r\n\r\n\tvar _edge1 = new Vector3();\r\n\tvar _edge2 = new Vector3();\r\n\tvar _normal = new Vector3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Ray( origin, direction ) {\r\n\r\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\r\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\r\n\r\n\t}\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\tthis.origin.copy( origin );\r\n\t\t\tthis.direction.copy( direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( ray ) {\r\n\r\n\t\t\tthis.origin.copy( ray.origin );\r\n\t\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( v ) {\r\n\r\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trecast: function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, _vector$3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\t\tvar directionDistance = target.dot( this.direction );\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToPoint: function ( point ) {\r\n\r\n\t\t\tvar directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn _vector$3.distanceToSquared( point );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( _segDir );\r\n\t\t\tvar b0 = _diff.dot( this.direction );\r\n\t\t\tvar b1 = - _diff.dot( _segDir );\r\n\t\t\tvar c = _diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t},\r\n\r\n\t\tintersectSphere: function ( sphere, target ) {\r\n\r\n\t\t\t_vector$3.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = _vector$3.dot( this.direction );\r\n\t\t\tvar d2 = _vector$3.dot( _vector$3 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) { return null; }\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t\t// Return if the ray never intersects the plane\r\n\r\n\t\t\treturn t >= 0 ? t : null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectPlane: function ( plane, target ) {\r\n\r\n\t\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\t\tif ( t === null ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.at( t, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// check if the ray lies on the plane first\r\n\r\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t},\r\n\r\n\t\tintersectBox: function ( box, target ) {\r\n\r\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\t\tvar origin = this.origin;\r\n\r\n\t\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\r\n\r\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\r\n\r\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\r\n\r\n\t\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\r\n\r\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\r\n\r\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\r\n\r\n\t\t\t//return point closest to the ray (positive side)\r\n\r\n\t\t\tif ( tmax < 0 ) { return null; }\r\n\r\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, _vector$3 ) !== null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\t_edge1.subVectors( b, a );\r\n\t\t\t_edge2.subVectors( c, a );\r\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( _normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) { return null; }\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_diff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( ray ) {\r\n\r\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _vector1 = new Vector3();\r\n\tvar _vector2 = new Vector3();\r\n\tvar _normalMatrix = new Matrix3();\r\n\r\n\tfunction Plane( normal, constant ) {\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Plane.prototype, {\r\n\r\n\t\tisPlane: true,\r\n\r\n\t\tset: function ( normal, constant ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( plane ) {\r\n\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t\t},\r\n\r\n\t\tprojectPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\r\n\r\n\t\t},\r\n\r\n\t\tintersectLine: function ( line, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar direction = line.delta( _vector1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsLine: function ( line ) {\r\n\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tcoplanarPoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( plane ) {\r\n\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _v0$1 = new Vector3();\r\n\tvar _v1$3 = new Vector3();\r\n\tvar _v2$1 = new Vector3();\r\n\tvar _v3 = new Vector3();\r\n\r\n\tvar _vab = new Vector3();\r\n\tvar _vac = new Vector3();\r\n\tvar _vbc = new Vector3();\r\n\tvar _vap = new Vector3();\r\n\tvar _vbp = new Vector3();\r\n\tvar _vcp = new Vector3();\r\n\r\n\tfunction Triangle( a, b, c ) {\r\n\r\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\r\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\r\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tgetNormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( c, b );\r\n\t\t\t_v0$1.subVectors( a, b );\r\n\t\t\ttarget.cross( _v0$1 );\r\n\r\n\t\t\tvar targetLengthSq = target.lengthSq();\r\n\t\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t\t},\r\n\r\n\t\t// static/instance method to calculate barycentric coordinates\r\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\r\n\r\n\t\t\t_v0$1.subVectors( c, a );\r\n\t\t\t_v1$3.subVectors( b, a );\r\n\t\t\t_v2$1.subVectors( point, a );\r\n\r\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\r\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\r\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\r\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\r\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\r\n\r\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// collinear or singular triangle\r\n\t\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar invDenom = 1 / denom;\r\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point, a, b, c ) {\r\n\r\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\r\n\r\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\r\n\r\n\t\t\ttarget.set( 0, 0 );\r\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\r\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\r\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tisFrontFacing: function ( a, b, c, direction ) {\r\n\r\n\t\t\t_v0$1.subVectors( c, b );\r\n\t\t\t_v1$3.subVectors( a, b );\r\n\r\n\t\t\t// strictly front facing\r\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tset: function ( a, b, c ) {\r\n\r\n\t\t\tthis.a.copy( a );\r\n\t\t\tthis.b.copy( b );\r\n\t\t\tthis.c.copy( c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\t\tthis.a.copy( points[ i0 ] );\r\n\t\t\tthis.b.copy( points[ i1 ] );\r\n\t\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( triangle ) {\r\n\r\n\t\t\tthis.a.copy( triangle.a );\r\n\t\t\tthis.b.copy( triangle.b );\r\n\t\t\tthis.c.copy( triangle.c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetArea: function () {\r\n\r\n\t\t\t_v0$1.subVectors( this.c, this.b );\r\n\t\t\t_v1$3.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tgetMidpoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t\t},\r\n\r\n\t\tgetNormal: function ( target ) {\r\n\r\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetPlane: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\r\n\t\t\t\ttarget = new Plane();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tgetBarycoord: function ( point, target ) {\r\n\r\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tisFrontFacing: function ( direction ) {\r\n\r\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsTriangle( this );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( p, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar a = this.a, b = this.b, c = this.c;\r\n\t\t\tvar v, w;\r\n\r\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t\t_vab.subVectors( b, a );\r\n\t\t\t_vac.subVectors( c, a );\r\n\t\t\t_vap.subVectors( p, a );\r\n\t\t\tvar d1 = _vab.dot( _vap );\r\n\t\t\tvar d2 = _vac.dot( _vap );\r\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\t\treturn target.copy( a );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vbp.subVectors( p, b );\r\n\t\t\tvar d3 = _vab.dot( _vbp );\r\n\t\t\tvar d4 = _vac.dot( _vbp );\r\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\t\treturn target.copy( b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vc = d1 * d4 - d3 * d2;\r\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vcp.subVectors( p, c );\r\n\t\t\tvar d5 = _vab.dot( _vcp );\r\n\t\t\tvar d6 = _vac.dot( _vcp );\r\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\t\treturn target.copy( c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vb = d5 * d2 - d1 * d6;\r\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar va = d3 * d6 - d5 * d4;\r\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t\t_vbc.subVectors( c, b );\r\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face region\r\n\t\t\tvar denom = 1 / ( va + vb + vc );\r\n\t\t\t// u = va * denom\r\n\t\t\tv = vb * denom;\r\n\t\t\tw = vc * denom;\r\n\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( triangle ) {\r\n\r\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n\tvar _hslA = { h: 0, s: 0, l: 0 };\r\n\tvar _hslB = { h: 0, s: 0, l: 0 };\r\n\r\n\tfunction Color( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\t\t\treturn this.set( r );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.setRGB( r, g, b );\r\n\r\n\t}\r\n\r\n\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\tif ( t < 0 ) { t += 1; }\r\n\t\tif ( t > 1 ) { t -= 1; }\r\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\r\n\t\tif ( t < 1 / 2 ) { return q; }\r\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction SRGBToLinear( c ) {\r\n\r\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n\t}\r\n\r\n\tfunction LinearToSRGB( c ) {\r\n\r\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n\t}\r\n\r\n\tObject.assign( Color.prototype, {\r\n\r\n\t\tisColor: true,\r\n\r\n\t\tr: 1, g: 1, b: 1,\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.r = scalar;\r\n\t\t\tthis.g = scalar;\r\n\t\t\tthis.b = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHex: function ( hex ) {\r\n\r\n\t\t\thex = Math.floor( hex );\r\n\r\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\t\tthis.r = r;\r\n\t\t\tthis.g = g;\r\n\t\t\tthis.b = b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHSL: function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = _Math.euclideanModulo( h, 1 );\r\n\t\t\ts = _Math.clamp( s, 0, 1 );\r\n\t\t\tl = _Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetStyle: function ( style ) {\r\n\r\n\t\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\t\tif ( string === undefined ) { return; }\r\n\r\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar m;\r\n\r\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t\t// rgb / hsl\r\n\r\n\t\t\t\tvar color;\r\n\t\t\t\tvar name = m[ 1 ];\r\n\t\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'rgb':\r\n\t\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'hsl':\r\n\t\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t\t// hex color\r\n\r\n\t\t\t\tvar hex = m[ 1 ];\r\n\t\t\t\tvar size = hex.length;\r\n\r\n\t\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t\t// #ff0\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t\t// #ff0000\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t\treturn this.setColorName( style );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetColorName: function ( style ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = _colorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( color ) {\r\n\r\n\t\t\tthis.r = color.r;\r\n\t\t\tthis.g = color.g;\r\n\t\t\tthis.b = color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\r\n\r\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\r\n\r\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopySRGBToLinear: function ( color ) {\r\n\r\n\t\t\tthis.r = SRGBToLinear( color.r );\r\n\t\t\tthis.g = SRGBToLinear( color.g );\r\n\t\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToSRGB: function ( color ) {\r\n\r\n\t\t\tthis.r = LinearToSRGB( color.r );\r\n\t\t\tthis.g = LinearToSRGB( color.g );\r\n\t\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertSRGBToLinear: function () {\r\n\r\n\t\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToSRGB: function () {\r\n\r\n\t\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetHex: function () {\r\n\r\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t\t},\r\n\r\n\t\tgetHexString: function () {\r\n\r\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t\t},\r\n\r\n\t\tgetHSL: function ( target ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\r\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\t\tvar max = Math.max( r, g, b );\r\n\t\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\t\tvar hue, saturation;\r\n\t\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\t\tif ( min === max ) {\r\n\r\n\t\t\t\thue = 0;\r\n\t\t\t\tsaturation = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar delta = max - min;\r\n\r\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thue /= 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.h = hue;\r\n\t\t\ttarget.s = saturation;\r\n\t\t\ttarget.l = lightness;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetStyle: function () {\r\n\r\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t\t},\r\n\r\n\t\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\t\tthis.getHSL( _hslA );\r\n\r\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\r\n\r\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( color ) {\r\n\r\n\t\t\tthis.r += color.r;\r\n\t\t\tthis.g += color.g;\r\n\t\t\tthis.b += color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddColors: function ( color1, color2 ) {\r\n\r\n\t\t\tthis.r = color1.r + color2.r;\r\n\t\t\tthis.g = color1.g + color2.g;\r\n\t\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.r += s;\r\n\t\t\tthis.g += s;\r\n\t\t\tthis.b += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( color ) {\r\n\r\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( color ) {\r\n\r\n\t\t\tthis.r *= color.r;\r\n\t\t\tthis.g *= color.g;\r\n\t\t\tthis.b *= color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tthis.r *= s;\r\n\t\t\tthis.g *= s;\r\n\t\t\tthis.b *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( color, alpha ) {\r\n\r\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpHSL: function ( color, alpha ) {\r\n\r\n\t\t\tthis.getHSL( _hslA );\r\n\t\t\tcolor.getHSL( _hslB );\r\n\r\n\t\t\tvar h = _Math.lerp( _hslA.h, _hslB.h, alpha );\r\n\t\t\tvar s = _Math.lerp( _hslA.s, _hslB.s, alpha );\r\n\t\t\tvar l = _Math.lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\t\tthis.setHSL( h, s, l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( c ) {\r\n\r\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.r = array[ offset ];\r\n\t\t\tthis.g = array[ offset + 1 ];\r\n\t\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.r;\r\n\t\t\tarray[ offset + 1 ] = this.g;\r\n\t\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn this.getHex();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tColor.NAMES = _colorKeywords;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\r\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\r\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Face3.prototype, {\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.a = source.a;\r\n\t\t\tthis.b = source.b;\r\n\t\t\tthis.c = source.c;\r\n\r\n\t\t\tthis.normal.copy( source.normal );\r\n\t\t\tthis.color.copy( source.color );\r\n\r\n\t\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar materialId = 0;\r\n\r\n\tfunction Material() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.flatShading = false;\r\n\t\tthis.vertexTangents = false;\r\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\t\tthis.stencilRef = 0;\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaTest = 0;\r\n\t\tthis.premultipliedAlpha = false;\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Material,\r\n\r\n\t\tisMaterial: true,\r\n\r\n\t\tonBeforeCompile: function () {},\r\n\r\n\t\tsetValues: function ( values ) {\r\n\r\n\t\t\tif ( values === undefined ) { return; }\r\n\r\n\t\t\tfor ( var key in values ) {\r\n\r\n\t\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for backward compatability if shading is set in the constructor\r\n\t\t\t\tif ( key === 'shading' ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Material',\r\n\t\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Material serialization\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\r\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\r\n\r\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\r\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\r\n\r\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\r\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\r\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\r\n\r\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\r\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\r\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\r\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\r\n\r\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\r\n\r\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\r\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\r\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\r\n\r\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\r\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\r\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\r\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\r\n\r\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\r\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\r\n\r\n\t\t\tdata.depthFunc = this.depthFunc;\r\n\t\t\tdata.depthTest = this.depthTest;\r\n\t\t\tdata.depthWrite = this.depthWrite;\r\n\r\n\t\t\tdata.stencilWrite = this.stencilWrite;\r\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\r\n\t\t\tdata.stencilFunc = this.stencilFunc;\r\n\t\t\tdata.stencilRef = this.stencilRef;\r\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\r\n\t\t\tdata.stencilFail = this.stencilFail;\r\n\t\t\tdata.stencilZFail = this.stencilZFail;\r\n\t\t\tdata.stencilZPass = this.stencilZPass;\r\n\r\n\t\t\t// rotation (SpriteMaterial)\r\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\r\n\r\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\r\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\r\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\r\n\r\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\r\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\r\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\r\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\r\n\r\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\r\n\r\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\r\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\r\n\r\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\r\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\r\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\r\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\r\n\r\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\r\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\r\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\r\n\r\n\t\t\tif ( this.visible === false ) { data.visible = false; }\r\n\r\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\r\n\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\r\n\r\n\t\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\r\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.fog = source.fog;\r\n\r\n\t\t\tthis.blending = source.blending;\r\n\t\t\tthis.side = source.side;\r\n\t\t\tthis.flatShading = source.flatShading;\r\n\t\t\tthis.vertexTangents = source.vertexTangents;\r\n\t\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\t\tthis.opacity = source.opacity;\r\n\t\t\tthis.transparent = source.transparent;\r\n\r\n\t\t\tthis.blendSrc = source.blendSrc;\r\n\t\t\tthis.blendDst = source.blendDst;\r\n\t\t\tthis.blendEquation = source.blendEquation;\r\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\t\tthis.depthFunc = source.depthFunc;\r\n\t\t\tthis.depthTest = source.depthTest;\r\n\t\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\t\tthis.stencilRef = source.stencilRef;\r\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\t\tthis.stencilFail = source.stencilFail;\r\n\t\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\t\tvar srcPlanes = source.clippingPlanes,\r\n\t\t\t\tdstPlanes = null;\r\n\r\n\t\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\t\tvar n = srcPlanes.length;\r\n\t\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.clippingPlanes = dstPlanes;\r\n\t\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\t\tthis.precision = source.precision;\r\n\r\n\t\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\t\tthis.dithering = source.dithering;\r\n\r\n\t\t\tthis.alphaTest = source.alphaTest;\r\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\r\n\r\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\r\n\r\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\r\n\t\tisBufferAttribute: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetUsage: function ( value ) {\r\n\r\n\t\t\tthis.usage = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.itemSize = source.itemSize;\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.normalized = source.normalized;\r\n\r\n\t\t\tthis.usage = source.usage;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.itemSize;\r\n\t\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyArray: function ( array ) {\r\n\r\n\t\t\tthis.array.set( array );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\t\tcolor = new Color();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector2();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn {\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\ttype: this.array.constructor.name,\r\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\r\n\r\n\r\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\r\n\r\n\r\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\r\n\r\n\r\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\r\n\r\n\r\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\r\n\r\n\r\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\r\n\r\n\r\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectGeometry() {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.uvs2 = [];\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.morphTargets = {};\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\t// this.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( DirectGeometry.prototype, {\r\n\r\n\t\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\t\tvar group;\r\n\t\t\tvar groups = [];\r\n\t\t\tvar materialIndex = undefined;\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t// materials\r\n\r\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgroup = {\r\n\t\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.groups = groups;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\t\tvar morphTargetsPosition;\r\n\r\n\t\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\r\n\t\t\t\t\t\tname: morphTargets[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = geometry.morphNormals;\r\n\t\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\t\tvar morphTargetsNormal;\r\n\r\n\t\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\r\n\t\t\t\t\t\tname: morphNormals[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tvar skinIndices = geometry.skinIndices;\r\n\t\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// morphs\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// skins\r\n\r\n\t\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeGroups( geometry );\r\n\r\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction arrayMax( array ) {\r\n\r\n\t\tif ( array.length === 0 ) { return - Infinity; }\r\n\r\n\t\tvar max = array[ 0 ];\r\n\r\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\r\n\r\n\t\t}\r\n\r\n\t\treturn max;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\r\n\r\n\tvar _m1$2 = new Matrix4();\r\n\tvar _obj = new Object3D();\r\n\tvar _offset = new Vector3();\r\n\tvar _box$2 = new Box3();\r\n\tvar _boxMorphTargets = new Box3();\r\n\tvar _vector$4 = new Vector3();\r\n\r\n\tfunction BufferGeometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.morphTargetsRelative = false;\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometry,\r\n\r\n\t\tisBufferGeometry: true,\r\n\r\n\t\tgetIndex: function () {\r\n\r\n\t\t\treturn this.index;\r\n\r\n\t\t},\r\n\r\n\t\tsetIndex: function ( index ) {\r\n\r\n\t\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.index = index;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetAttribute: function ( name ) {\r\n\r\n\t\t\treturn this.attributes[ name ];\r\n\r\n\t\t},\r\n\r\n\t\tsetAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeleteAttribute: function ( name ) {\r\n\r\n\t\t\tdelete this.attributes[ name ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\t\tthis.groups.push( {\r\n\r\n\t\t\t\tstart: start,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclearGroups: function () {\r\n\r\n\t\t\tthis.groups = [];\r\n\r\n\t\t},\r\n\r\n\t\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\t\tthis.drawRange.start = start;\r\n\t\t\tthis.drawRange.count = count;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tmatrix.applyToBufferAttribute( position );\r\n\t\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normal = this.attributes.normal;\r\n\r\n\t\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\r\n\t\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tangent = this.attributes.tangent;\r\n\r\n\t\t\tif ( tangent !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\t// Tangent is vec4, but the '.w' component is a sign value (+1/-1).\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( tangent );\r\n\t\t\t\ttangent.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\t_m1$2.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\t_m1$2.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\t_m1$2.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( x, y, z ) {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\t_m1$2.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( x, y, z ) {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\t_m1$2.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( vector ) {\r\n\r\n\t\t\t_obj.lookAt( vector );\r\n\r\n\t\t\t_obj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( _obj.matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\r\n\r\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\r\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tvar position = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateFromObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\r\n\r\n\t\t\t\t\tdirect = undefined;\r\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry = direct;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.position;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.normal;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.color;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.uv;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.lineDistance;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t\t},\r\n\r\n\t\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\r\n\t\t\t\t\tattribute.name = morphTarget.name;\r\n\r\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning\r\n\r\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\t\tif ( position ) {\r\n\r\n\t\t\t\t// first, find the center of the bounding sphere\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\t_box$2.setFromBufferAttribute( position );\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box$2.getCenter( center );\r\n\r\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\r\n\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\r\n\r\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\r\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\t// backwards compatibility\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function () {\r\n\r\n\t\t\tvar index = this.index;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tif ( attributes.position ) {\r\n\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\t// indexed elements\r\n\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, offset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset === undefined ) {\r\n\r\n\t\t\t\toffset = 0;\r\n\r\n\t\t\t\tconsole.warn(\r\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\r\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\r\n\r\n\t\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\r\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\r\n\r\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeNormals: function () {\r\n\r\n\t\t\tvar normals = this.attributes.normal;\r\n\r\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t_vector$4.x = normals.getX( i );\r\n\t\t\t\t_vector$4.y = normals.getY( i );\r\n\t\t\t\t_vector$4.z = normals.getZ( i );\r\n\r\n\t\t\t\t_vector$4.normalize();\r\n\r\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoNonIndexed: function () {\r\n\r\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\t\tvar array = attribute.array;\r\n\t\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.index === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry2 = new BufferGeometry();\r\n\r\n\t\t\tvar indices = this.index.array;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = this.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar morphArray = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\r\n\r\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\t\tmorphArray.push( newAttribute );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry2;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard BufferGeometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = { attributes: {} };\r\n\r\n\t\t\tvar index = this.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdata.data.index = {\r\n\t\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\t\tvar attributeData = attribute.toJSON();\r\n\r\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\r\n\r\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = {};\r\n\t\t\tvar hasMorphAttributes = false;\r\n\r\n\t\t\tfor ( var key in this.morphAttributes ) {\r\n\r\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\r\n\r\n\t\t\t\tvar array = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar attribute = attributeArray[ i ];\r\n\r\n\t\t\t\t\tvar attributeData = attribute.toJSON();\r\n\r\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\r\n\r\n\t\t\t\t\tarray.push( attributeData );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( array.length > 0 ) {\r\n\r\n\t\t\t\t\tmorphAttributes[ key ] = array;\r\n\r\n\t\t\t\t\thasMorphAttributes = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphAttributes ) {\r\n\r\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\r\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new BufferGeometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar name, i, l;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.index = null;\r\n\t\t\tthis.attributes = {};\r\n\t\t\tthis.morphAttributes = {};\r\n\t\t\tthis.groups = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// index\r\n\r\n\t\t\tvar index = source.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tvar attributes = source.attributes;\r\n\r\n\t\t\tfor ( name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = source.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = source.groups;\r\n\r\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// draw range\r\n\r\n\t\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t\t// user data\r\n\r\n\t\t\tthis.userData = source.userData;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author jonobr1 / http://jonobr1.com/\r\n\t */\r\n\r\n\tvar _inverseMatrix = new Matrix4();\r\n\tvar _ray = new Ray();\r\n\tvar _sphere = new Sphere();\r\n\r\n\tvar _vA = new Vector3();\r\n\tvar _vB = new Vector3();\r\n\tvar _vC = new Vector3();\r\n\r\n\tvar _tempA = new Vector3();\r\n\tvar _tempB = new Vector3();\r\n\tvar _tempC = new Vector3();\r\n\r\n\tvar _morphA = new Vector3();\r\n\tvar _morphB = new Vector3();\r\n\tvar _morphC = new Vector3();\r\n\r\n\tvar _uvA = new Vector2();\r\n\tvar _uvB = new Vector2();\r\n\tvar _uvC = new Vector2();\r\n\r\n\tvar _intersectionPoint = new Vector3();\r\n\tvar _intersectionPointWorld = new Vector3();\r\n\r\n\tfunction Mesh( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.drawMode = TrianglesDrawMode;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Mesh,\r\n\r\n\t\tisMesh: true,\r\n\r\n\t\tsetDrawMode: function ( value ) {\r\n\r\n\t\t\tthis.drawMode = value;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.drawMode = source.drawMode;\r\n\r\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\tif ( material === undefined ) { return; }\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\r\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t\t// Check boundingBox before continuing\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check unsupported draw modes\r\n\r\n\t\t\tif ( this.drawMode !== TrianglesDrawMode ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar intersection;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar position = geometry.attributes.position;\r\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\r\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\r\n\t\t\t\tvar uv = geometry.attributes.uv;\r\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\r\n\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\tvar drawRange = geometry.drawRange;\r\n\t\t\t\tvar i, j, il, jl;\r\n\t\t\t\tvar group, groupMaterial;\r\n\t\t\t\tvar start, end;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t// indexed buffer geometry\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = index.getX( j );\r\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\r\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\ta = index.getX( i );\r\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\r\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\r\n\r\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = j;\r\n\t\t\t\t\t\t\t\tb = j + 1;\r\n\t\t\t\t\t\t\t\tc = j + 2;\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\ta = i;\r\n\t\t\t\t\t\t\tb = i + 1;\r\n\t\t\t\t\t\t\tc = i + 2;\r\n\r\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar uvs;\r\n\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\r\n\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\r\n\r\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\r\n\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\r\n\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\tvar intersect;\r\n\r\n\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n\t\t}\r\n\r\n\t\tif ( intersect === null ) { return null; }\r\n\r\n\t\t_intersectionPointWorld.copy( point );\r\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\r\n\r\n\t\treturn {\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: _intersectionPointWorld.clone(),\r\n\t\t\tobject: object\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\r\n\r\n\t\t_vA.fromBufferAttribute( position, a );\r\n\t\t_vB.fromBufferAttribute( position, b );\r\n\t\t_vC.fromBufferAttribute( position, c );\r\n\r\n\t\tvar morphInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\r\n\r\n\t\t\t_morphA.set( 0, 0, 0 );\r\n\t\t\t_morphB.set( 0, 0, 0 );\r\n\t\t\t_morphC.set( 0, 0, 0 );\r\n\r\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphInfluences[ i ];\r\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\r\n\r\n\t\t\t\tif ( influence === 0 ) { continue; }\r\n\r\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\r\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\r\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\r\n\r\n\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\r\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\r\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\r\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\r\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vA.add( _morphA );\r\n\t\t\t_vB.add( _morphB );\r\n\t\t\t_vC.add( _morphC );\r\n\r\n\t\t}\r\n\r\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\r\n\r\n\t\tif ( intersection ) {\r\n\r\n\t\t\tif ( uv ) {\r\n\r\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\r\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\r\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv2 ) {\r\n\r\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\r\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\r\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\r\n\r\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar face = new Face3( a, b, c );\r\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\r\n\r\n\t\t\tintersection.face = face;\r\n\r\n\t\t}\r\n\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\r\n\tvar _m1$3 = new Matrix4();\r\n\tvar _obj$1 = new Object3D();\r\n\tvar _offset$1 = new Vector3();\r\n\r\n\tfunction Geometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Geometry';\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [[]];\r\n\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\tthis.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.elementsNeedUpdate = false;\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.lineDistancesNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Geometry,\r\n\r\n\t\tisGeometry: true,\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\t_m1$3.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\t_m1$3.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\t_m1$3.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( x, y, z ) {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\t_m1$3.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( x, y, z ) {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\t_m1$3.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( vector ) {\r\n\r\n\t\t\t_obj$1.lookAt( vector );\r\n\r\n\t\t\t_obj$1.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( _obj$1.matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\r\n\t\t\tif ( attributes.position === undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\r\n\r\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\r\n\r\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\r\n\r\n\t\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\r\n\t\t\t\t\tscope.colors[ a ].clone(),\r\n\t\t\t\t\tscope.colors[ b ].clone(),\r\n\t\t\t\t\tscope.colors[ c ].clone() ];\r\n\r\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\r\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\r\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\r\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\r\n\t\t\t\t];\r\n\r\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\r\n\t\t\t\t\t] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\r\n\t\t\t\t\t] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\r\n\r\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\tvar center = this.boundingSphere.center;\r\n\t\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\t\tvar matrix = new Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\tthis.applyMatrix( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tcb.normalize();\r\n\r\n\t\t\t\tface.normal.copy( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\r\n\r\n\t\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFlatVertexNormals: function () {\r\n\r\n\t\t\tvar f, fl, face;\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeMorphNormals: function () {\r\n\r\n\t\t\tvar i, il, f, fl, face;\r\n\r\n\t\t\t// save original normals\r\n\t\t\t// - create temp variables on first access\r\n\t\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\r\n\r\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\t\tvar tmpGeo = new Geometry();\r\n\t\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// create on first access\r\n\r\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\tfaceNormal = new Vector3();\r\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\r\n\r\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t\t// set vertices to morph target\r\n\r\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t// compute morph normals\r\n\r\n\t\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t\t// store morph normals\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// restore original normals\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normalMatrix,\r\n\t\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\t\tvertices1 = this.vertices,\r\n\t\t\t\tvertices2 = geometry.vertices,\r\n\t\t\t\tfaces1 = this.faces,\r\n\t\t\t\tfaces2 = geometry.faces,\r\n\t\t\t\tcolors1 = this.colors,\r\n\t\t\t\tcolors2 = geometry.colors;\r\n\r\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\r\n\r\n\t\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\r\n\r\n\t\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmergeMesh: function ( mesh ) {\r\n\r\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\r\n\r\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Checks for duplicate vertices with hashmap.\r\n\t\t * Duplicated vertices are removed\r\n\t\t * and faces' vertices are updated.\r\n\t\t */\r\n\r\n\t\tmergeVertices: function () {\r\n\r\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\t\tvar unique = [], changes = [];\r\n\r\n\t\t\tvar v, key;\r\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\t\tvar i, il, face;\r\n\t\t\tvar indices, j, jl;\r\n\r\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tv = this.vertices[ i ];\r\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t\t// have to remove them from the geometry.\r\n\t\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Use unique set of vertices\r\n\r\n\t\t\tvar diff = this.vertices.length - unique.length;\r\n\t\t\tthis.vertices = unique;\r\n\t\t\treturn diff;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.vertices = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\t\tvar faces = this.faces;\r\n\t\t\tvar length = faces.length;\r\n\r\n\t\t\t// tag faces\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sort faces\r\n\r\n\t\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t\t// sort uvs\r\n\r\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\t\tvar newUvs1, newUvs2;\r\n\r\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\r\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\r\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\r\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Geometry',\r\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Geometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertices = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar normalsHash = {};\r\n\t\t\tvar colors = [];\r\n\t\t\tvar colorsHash = {};\r\n\t\t\tvar uvs = [];\r\n\t\t\tvar uvsHash = {};\r\n\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\t\tvar hasMaterial = true;\r\n\t\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\t\tvar faceType = 0;\r\n\r\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\t\tfaces.push( faceType );\r\n\t\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = {};\r\n\r\n\t\t\tdata.data.vertices = vertices;\r\n\t\t\tdata.data.normals = normals;\r\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\r\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\r\n\t\t\tdata.data.faces = faces;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new Geometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar i, il, j, jl, k, kl;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.colors = [];\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.faceVertexUvs = [[]];\r\n\t\t\tthis.morphTargets = [];\r\n\t\t\tthis.morphNormals = [];\r\n\t\t\tthis.skinWeights = [];\r\n\t\t\tthis.skinIndices = [];\r\n\t\t\tthis.lineDistances = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tvar vertices = source.vertices;\r\n\r\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tvar colors = source.colors;\r\n\r\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tvar faces = source.faces;\r\n\r\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face vertex uvs\r\n\r\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphTargets = source.morphTargets;\r\n\r\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = {};\r\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.vertices = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// normals\r\n\r\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.normals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph normals\r\n\r\n\t\t\tvar morphNormals = source.morphNormals;\r\n\r\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = {};\r\n\r\n\t\t\t\t// vertex normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.vertexNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\r\n\t\t\t\t\t\tvar destVertexNormal = {};\r\n\r\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\r\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\r\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\r\n\r\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// face normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.faceNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphNormals.push( morphNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin weights\r\n\r\n\t\t\tvar skinWeights = source.skinWeights;\r\n\r\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin indices\r\n\r\n\t\t\tvar skinIndices = source.skinIndices;\r\n\r\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tvar lineDistances = source.lineDistances;\r\n\r\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update flags\r\n\r\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\r\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\r\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// BoxGeometry\r\n\r\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\r\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\t\tGeometry.call(this);\r\n\r\n\t\t\tthis.type = 'BoxGeometry';\r\n\r\n\t\t\tthis.parameters = {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepth: depth,\r\n\t\t\t\twidthSegments: widthSegments,\r\n\t\t\t\theightSegments: heightSegments,\r\n\t\t\t\tdepthSegments: depthSegments\r\n\t\t\t};\r\n\r\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\t\t\tthis.mergeVertices();\r\n\r\n\t\t}\r\n\r\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\r\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\r\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\r\n\r\n\t\treturn BoxGeometry;\r\n\t}(Geometry));\r\n\r\n\t// BoxBufferGeometry\r\n\r\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\r\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\t\tBufferGeometry.call(this);\r\n\r\n\t\t\tthis.type = 'BoxBufferGeometry';\r\n\r\n\t\t\tthis.parameters = {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepth: depth,\r\n\t\t\t\twidthSegments: widthSegments,\r\n\t\t\t\theightSegments: heightSegments,\r\n\t\t\t\tdepthSegments: depthSegments\r\n\t\t\t};\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\twidth = width || 1;\r\n\t\t\theight = height || 1;\r\n\t\t\tdepth = depth || 1;\r\n\r\n\t\t\t// segments\r\n\r\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t\t\t// buffers\r\n\r\n\t\t\tvar indices = [];\r\n\t\t\tvar vertices = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar uvs = [];\r\n\r\n\t\t\t// helper variables\r\n\r\n\t\t\tvar numberOfVertices = 0;\r\n\t\t\tvar groupStart = 0;\r\n\r\n\t\t\t// build each side of the box geometry\r\n\r\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\r\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\r\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\r\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\r\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\r\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t\t\t// build geometry\r\n\r\n\t\t\tthis.setIndex( indices );\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\t\t\tvar segmentWidth = width / gridX;\r\n\t\t\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\t\t\tvar widthHalf = width / 2;\r\n\t\t\t\tvar heightHalf = height / 2;\r\n\t\t\t\tvar depthHalf = depth / 2;\r\n\r\n\t\t\t\tvar gridX1 = gridX + 1;\r\n\t\t\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\t\t\tvar vertexCounter = 0;\r\n\t\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t\tvar ix, iy;\r\n\r\n\t\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t\t\t// now apply vector to vertex buffer\r\n\r\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t\t\t// now apply vector to normal buffer\r\n\r\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t\t\t\t// counters\r\n\r\n\t\t\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t\t// increase counter\r\n\r\n\t\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t\t\t// calculate new start value for groups\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\r\n\t\t\t\t// update total number of vertices\r\n\r\n\t\t\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\r\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\r\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\r\n\r\n\t\treturn BoxBufferGeometry;\r\n\t}(BufferGeometry));\r\n\r\n\t/**\r\n\t * Uniform Utilities\r\n\t */\r\n\r\n\tfunction cloneUniforms( src ) {\r\n\r\n\t\tvar dst = {};\r\n\r\n\t\tfor ( var u in src ) {\r\n\r\n\t\t\tdst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in src[ u ] ) {\r\n\r\n\t\t\t\tvar property = src[ u ][ p ];\r\n\r\n\t\t\t\tif ( property && ( property.isColor ||\r\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\r\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\r\n\t\t\t\t\tproperty.isTexture ) ) {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( property ) ) {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tfunction mergeUniforms( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t}\r\n\r\n\t// Legacy\r\n\r\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\r\n\r\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\r\n\r\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  defines: { \"label\" : \"value\" },\r\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\r\n\t *\r\n\t *  fragmentShader: <string>,\r\n\t *  vertexShader: <string>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  lights: <bool>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShaderMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShaderMaterial';\r\n\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\r\n\t\tthis.vertexShader = default_vertex;\r\n\t\tthis.fragmentShader = default_fragment;\r\n\r\n\t\tthis.linewidth = 1;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\t\tthis.skinning = false; // set to use skinning attribute streams\r\n\t\tthis.morphTargets = false; // set to use morph targets\r\n\t\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\t\tthis.extensions = {\r\n\t\t\tderivatives: false, // set to use derivatives\r\n\t\t\tfragDepth: false, // set to use fragment depth values\r\n\t\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t\t};\r\n\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv2': [ 0, 0 ]\r\n\t\t};\r\n\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\tthis.uniformsNeedUpdate = false;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setValues( parameters );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShaderMaterial.prototype = Object.create( Material.prototype );\r\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\r\n\r\n\tShaderMaterial.prototype.isShaderMaterial = true;\r\n\r\n\tShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\r\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\r\n\r\n\t\tthis.defines = Object.assign( {}, source.defines );\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.lights = source.lights;\r\n\t\tthis.clipping = source.clipping;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\tthis.extensions = source.extensions;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.uniforms = {};\r\n\r\n\t\tfor ( var name in this.uniforms ) {\r\n\r\n\t\t\tvar uniform = this.uniforms[ name ];\r\n\t\t\tvar value = uniform.value;\r\n\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 't',\r\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isColor ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'c',\r\n\t\t\t\t\tvalue: value.getHex()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector2 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v2',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\r\n\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\tfor ( var key in this.extensions ) {\r\n\r\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\r\n\tfunction Camera() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Camera,\r\n\r\n\t\tisCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author greggman / http://games.greggman.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\tthis.fov = fov !== undefined ? fov : 50;\r\n\t\tthis.zoom = 1;\r\n\r\n\t\tthis.near = near !== undefined ? near : 0.1;\r\n\t\tthis.far = far !== undefined ? far : 2000;\r\n\t\tthis.focus = 10;\r\n\r\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: PerspectiveCamera,\r\n\r\n\t\tisPerspectiveCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.fov = source.fov;\r\n\t\t\tthis.zoom = source.zoom;\r\n\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\t\t\tthis.focus = source.focus;\r\n\r\n\t\t\tthis.aspect = source.aspect;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\tthis.filmGauge = source.filmGauge;\r\n\t\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t\t *\r\n\t\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t\t * a 35mm (full frame) camera.\r\n\t\t *\r\n\t\t * Values for focal length and film gauge must have the same unit.\r\n\t\t */\r\n\t\tsetFocalLength: function ( focalLength ) {\r\n\r\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t\t */\r\n\t\tgetFocalLength: function () {\r\n\r\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t\t},\r\n\r\n\t\tgetEffectiveFOV: function () {\r\n\r\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\r\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmWidth: function () {\r\n\r\n\t\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmHeight: function () {\r\n\r\n\t\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t\t * multi-monitor/multi-machine setups.\r\n\t\t *\r\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t\t * the monitors are in grid like this\r\n\t\t *\r\n\t\t *   +---+---+---+\r\n\t\t *   | A | B | C |\r\n\t\t *   +---+---+---+\r\n\t\t *   | D | E | F |\r\n\t\t *   +---+---+---+\r\n\t\t *\r\n\t\t * then for each monitor you would call it like this\r\n\t\t *\r\n\t\t *   var w = 1920;\r\n\t\t *   var h = 1080;\r\n\t\t *   var fullWidth = w * 3;\r\n\t\t *   var fullHeight = h * 2;\r\n\t\t *\r\n\t\t *   --A--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t\t *   --B--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t\t *   --C--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t\t *   --D--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t\t *   --E--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t\t *   --F--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t\t *\r\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t\t */\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar near = this.near,\r\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\r\n\t\t\t\theight = 2 * top,\r\n\t\t\t\twidth = this.aspect * height,\r\n\t\t\t\tleft = - 0.5 * width,\r\n\t\t\t\tview = this.view;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar fullWidth = view.fullWidth,\r\n\t\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\t\twidth *= view.width / fullWidth;\r\n\t\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar skew = this.filmOffset;\r\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\r\n\r\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.fov = this.fov;\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\t\t\tdata.object.focus = this.focus;\r\n\r\n\t\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\r\n\r\n\t\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Camera for rendering cube maps\r\n\t *\t- renders scene into axis-aligned cube\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'CubeCamera';\r\n\r\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\r\n\t\tthis.add( cameraPX );\r\n\r\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\r\n\t\tthis.add( cameraNX );\r\n\r\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\r\n\t\tthis.add( cameraPY );\r\n\r\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\r\n\t\tthis.add( cameraNY );\r\n\r\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\r\n\t\tthis.add( cameraPZ );\r\n\r\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\r\n\t\tthis.add( cameraNZ );\r\n\r\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\r\n\r\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\r\n\r\n\t\tthis.update = function ( renderer, scene ) {\r\n\r\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\r\n\t\t\trenderer.render( scene, cameraPX );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\r\n\t\t\trenderer.render( scene, cameraNX );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\r\n\t\t\trenderer.render( scene, cameraPY );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\r\n\t\t\trenderer.render( scene, cameraNY );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\r\n\t\t\trenderer.render( scene, cameraPZ );\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\r\n\t\t\trenderer.render( scene, cameraNZ );\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\r\n\r\n\t\t\t\trenderer.clear( color, depth, stencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\r\n\tCubeCamera.prototype.constructor = CubeCamera;\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction WebGLRenderTargetCube( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t}\r\n\r\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\r\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\r\n\r\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\r\n\r\n\tWebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\r\n\r\n\t\tthis.texture.type = texture.type;\r\n\t\tthis.texture.format = texture.format;\r\n\t\tthis.texture.encoding = texture.encoding;\r\n\r\n\t\tvar scene = new Scene();\r\n\r\n\t\tvar shader = {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\"varying vec3 vWorldDirection;\",\r\n\r\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\r\n\r\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\r\n\r\n\t\t\t\t\"\t#include <begin_vertex>\",\r\n\t\t\t\t\"\t#include <project_vertex>\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\"uniform sampler2D tEquirect;\",\r\n\r\n\t\t\t\t\"varying vec3 vWorldDirection;\",\r\n\r\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\r\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\r\n\r\n\t\t\t\t\"\tvec2 sampleUV;\",\r\n\r\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\r\n\r\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\r\n\r\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( '\\n' ),\r\n\t\t};\r\n\r\n\t\tvar material = new ShaderMaterial( {\r\n\r\n\t\t\ttype: 'CubemapFromEquirect',\r\n\r\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader,\r\n\t\t\tside: BackSide,\r\n\t\t\tblending: NoBlending\r\n\r\n\t\t} );\r\n\r\n\t\tmaterial.uniforms.tEquirect.value = texture;\r\n\r\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\r\n\r\n\t\tscene.add( mesh );\r\n\r\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\r\n\r\n\t\tcamera.renderTarget = this;\r\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\r\n\r\n\t\tcamera.update( renderer, scene );\r\n\r\n\t\tmesh.geometry.dispose();\r\n\t\tmesh.material.dispose();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tDataTexture.prototype = Object.create( Texture.prototype );\r\n\tDataTexture.prototype.constructor = DataTexture;\r\n\r\n\tDataTexture.prototype.isDataTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _sphere$1 = new Sphere();\r\n\tvar _vector$5 = new Vector3();\r\n\r\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tthis.planes = [\r\n\r\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\r\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\r\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\r\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\r\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\r\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( Frustum.prototype, {\r\n\r\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tplanes[ 0 ].copy( p0 );\r\n\t\t\tplanes[ 1 ].copy( p1 );\r\n\t\t\tplanes[ 2 ].copy( p2 );\r\n\t\t\tplanes[ 3 ].copy( p3 );\r\n\t\t\tplanes[ 4 ].copy( p4 );\r\n\t\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( frustum ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix: function ( m ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar me = m.elements;\r\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( _sphere$1 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSprite: function ( sprite ) {\r\n\r\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\r\n\t\t\t_sphere$1.radius = 0.7071067811865476;\r\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( _sphere$1 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar center = sphere.center;\r\n\t\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\t// corner at max distance\r\n\r\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\r\n\r\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\r\n\r\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\r\n\r\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\r\n\r\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\r\n\r\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\r\n\r\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\r\n\r\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\r\n\r\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\r\n\r\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\r\n\r\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\r\n\r\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\";\r\n\r\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = normalMatrix * objectTangent;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\r\n\r\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\r\n\r\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\r\n\r\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\r\n\r\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\r\n\r\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\r\n\r\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\r\n\r\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\r\n\r\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\r\n\r\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\r\n\r\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\r\n\r\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\r\n\r\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\r\n\r\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\r\n\r\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\r\n\r\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\r\n\r\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\r\n\r\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\r\n\r\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\r\n\r\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\r\n\r\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\r\n\r\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\r\n\r\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\r\n\r\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\r\n\r\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\r\n\r\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\r\n\r\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\r\n\r\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\r\n\r\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\r\n\r\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\r\n\r\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpack2HalfToRGBA( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\r\n\r\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\r\n\r\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\r\n\r\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\r\n\r\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\r\n\r\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\r\n\r\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\r\n\r\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\r\n\r\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\r\n\r\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\r\n\r\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\r\n\r\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\r\n\r\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\r\n\r\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\r\n\r\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\r\n\r\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\r\n\r\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\r\n\r\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\r\n\r\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\r\n\r\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\r\n\r\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\r\n\r\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\r\n\r\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\r\n\r\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\r\n\r\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\r\n\r\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar ShaderChunk = {\r\n\t\talphamap_fragment: alphamap_fragment,\r\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\r\n\t\talphatest_fragment: alphatest_fragment,\r\n\t\taomap_fragment: aomap_fragment,\r\n\t\taomap_pars_fragment: aomap_pars_fragment,\r\n\t\tbegin_vertex: begin_vertex,\r\n\t\tbeginnormal_vertex: beginnormal_vertex,\r\n\t\tbsdfs: bsdfs,\r\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\r\n\t\tclipping_planes_fragment: clipping_planes_fragment,\r\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\r\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\r\n\t\tclipping_planes_vertex: clipping_planes_vertex,\r\n\t\tcolor_fragment: color_fragment,\r\n\t\tcolor_pars_fragment: color_pars_fragment,\r\n\t\tcolor_pars_vertex: color_pars_vertex,\r\n\t\tcolor_vertex: color_vertex,\r\n\t\tcommon: common,\r\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\r\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\r\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\r\n\t\tdisplacementmap_vertex: displacementmap_vertex,\r\n\t\temissivemap_fragment: emissivemap_fragment,\r\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\r\n\t\tencodings_fragment: encodings_fragment,\r\n\t\tencodings_pars_fragment: encodings_pars_fragment,\r\n\t\tenvmap_fragment: envmap_fragment,\r\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\r\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\r\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\r\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\r\n\t\tenvmap_vertex: envmap_vertex,\r\n\t\tfog_vertex: fog_vertex,\r\n\t\tfog_pars_vertex: fog_pars_vertex,\r\n\t\tfog_fragment: fog_fragment,\r\n\t\tfog_pars_fragment: fog_pars_fragment,\r\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\r\n\t\tlightmap_fragment: lightmap_fragment,\r\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\r\n\t\tlights_lambert_vertex: lights_lambert_vertex,\r\n\t\tlights_pars_begin: lights_pars_begin,\r\n\t\tlights_phong_fragment: lights_phong_fragment,\r\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\r\n\t\tlights_physical_fragment: lights_physical_fragment,\r\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\r\n\t\tlights_fragment_begin: lights_fragment_begin,\r\n\t\tlights_fragment_maps: lights_fragment_maps,\r\n\t\tlights_fragment_end: lights_fragment_end,\r\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\r\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\r\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\r\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\r\n\t\tmap_fragment: map_fragment,\r\n\t\tmap_pars_fragment: map_pars_fragment,\r\n\t\tmap_particle_fragment: map_particle_fragment,\r\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\r\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\r\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\r\n\t\tmorphnormal_vertex: morphnormal_vertex,\r\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\r\n\t\tmorphtarget_vertex: morphtarget_vertex,\r\n\t\tnormal_fragment_begin: normal_fragment_begin,\r\n\t\tnormal_fragment_maps: normal_fragment_maps,\r\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\r\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\r\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\r\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\r\n\t\tpacking: packing,\r\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\r\n\t\tproject_vertex: project_vertex,\r\n\t\tdithering_fragment: dithering_fragment,\r\n\t\tdithering_pars_fragment: dithering_pars_fragment,\r\n\t\troughnessmap_fragment: roughnessmap_fragment,\r\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\r\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\r\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\r\n\t\tshadowmap_vertex: shadowmap_vertex,\r\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\r\n\t\tskinbase_vertex: skinbase_vertex,\r\n\t\tskinning_pars_vertex: skinning_pars_vertex,\r\n\t\tskinning_vertex: skinning_vertex,\r\n\t\tskinnormal_vertex: skinnormal_vertex,\r\n\t\tspecularmap_fragment: specularmap_fragment,\r\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\r\n\t\ttonemapping_fragment: tonemapping_fragment,\r\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\r\n\t\tuv_pars_fragment: uv_pars_fragment,\r\n\t\tuv_pars_vertex: uv_pars_vertex,\r\n\t\tuv_vertex: uv_vertex,\r\n\t\tuv2_pars_fragment: uv2_pars_fragment,\r\n\t\tuv2_pars_vertex: uv2_pars_vertex,\r\n\t\tuv2_vertex: uv2_vertex,\r\n\t\tworldpos_vertex: worldpos_vertex,\r\n\r\n\t\tbackground_frag: background_frag,\r\n\t\tbackground_vert: background_vert,\r\n\t\tcube_frag: cube_frag,\r\n\t\tcube_vert: cube_vert,\r\n\t\tdepth_frag: depth_frag,\r\n\t\tdepth_vert: depth_vert,\r\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\r\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\r\n\t\tequirect_frag: equirect_frag,\r\n\t\tequirect_vert: equirect_vert,\r\n\t\tlinedashed_frag: linedashed_frag,\r\n\t\tlinedashed_vert: linedashed_vert,\r\n\t\tmeshbasic_frag: meshbasic_frag,\r\n\t\tmeshbasic_vert: meshbasic_vert,\r\n\t\tmeshlambert_frag: meshlambert_frag,\r\n\t\tmeshlambert_vert: meshlambert_vert,\r\n\t\tmeshmatcap_frag: meshmatcap_frag,\r\n\t\tmeshmatcap_vert: meshmatcap_vert,\r\n\t\tmeshphong_frag: meshphong_frag,\r\n\t\tmeshphong_vert: meshphong_vert,\r\n\t\tmeshphysical_frag: meshphysical_frag,\r\n\t\tmeshphysical_vert: meshphysical_vert,\r\n\t\tnormal_frag: normal_frag,\r\n\t\tnormal_vert: normal_vert,\r\n\t\tpoints_frag: points_frag,\r\n\t\tpoints_vert: points_vert,\r\n\t\tshadow_frag: shadow_frag,\r\n\t\tshadow_vert: shadow_vert,\r\n\t\tsprite_frag: sprite_frag,\r\n\t\tsprite_vert: sprite_vert\r\n\t};\r\n\r\n\t/**\r\n\t * Uniforms library for shared webgl shaders\r\n\t */\r\n\r\n\tvar UniformsLib = {\r\n\r\n\t\tcommon: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\r\n\t\t\tmap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() },\r\n\r\n\t\t\talphaMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tspecularmap: {\r\n\r\n\t\t\tspecularMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tenvmap: {\r\n\r\n\t\t\tenvMap: { value: null },\r\n\t\t\tflipEnvMap: { value: - 1 },\r\n\t\t\treflectivity: { value: 1.0 },\r\n\t\t\trefractionRatio: { value: 0.98 },\r\n\t\t\tmaxMipLevel: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\taomap: {\r\n\r\n\t\t\taoMap: { value: null },\r\n\t\t\taoMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tlightmap: {\r\n\r\n\t\t\tlightMap: { value: null },\r\n\t\t\tlightMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\temissivemap: {\r\n\r\n\t\t\temissiveMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tbumpmap: {\r\n\r\n\t\t\tbumpMap: { value: null },\r\n\t\t\tbumpScale: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tnormalmap: {\r\n\r\n\t\t\tnormalMap: { value: null },\r\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\r\n\r\n\t\t},\r\n\r\n\t\tdisplacementmap: {\r\n\r\n\t\t\tdisplacementMap: { value: null },\r\n\t\t\tdisplacementScale: { value: 1 },\r\n\t\t\tdisplacementBias: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\troughnessmap: {\r\n\r\n\t\t\troughnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tmetalnessmap: {\r\n\r\n\t\t\tmetalnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tgradientmap: {\r\n\r\n\t\t\tgradientMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tfog: {\r\n\r\n\t\t\tfogDensity: { value: 0.00025 },\r\n\t\t\tfogNear: { value: 1 },\r\n\t\t\tfogFar: { value: 2000 },\r\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\r\n\r\n\t\t},\r\n\r\n\t\tlights: {\r\n\r\n\t\t\tambientLightColor: { value: [] },\r\n\r\n\t\t\tlightProbe: { value: [] },\r\n\r\n\t\t\tdirectionalLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tcolor: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tdirectionalShadowMap: { value: [] },\r\n\t\t\tdirectionalShadowMatrix: { value: [] },\r\n\r\n\t\t\tspotLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tdistance: {},\r\n\t\t\t\tconeCos: {},\r\n\t\t\t\tpenumbraCos: {},\r\n\t\t\t\tdecay: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tspotShadowMap: { value: [] },\r\n\t\t\tspotShadowMatrix: { value: [] },\r\n\r\n\t\t\tpointLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdecay: {},\r\n\t\t\t\tdistance: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {},\r\n\t\t\t\tshadowCameraNear: {},\r\n\t\t\t\tshadowCameraFar: {}\r\n\t\t\t} },\r\n\r\n\t\t\tpointShadowMap: { value: [] },\r\n\t\t\tpointShadowMatrix: { value: [] },\r\n\r\n\t\t\themisphereLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tskyColor: {},\r\n\t\t\t\tgroundColor: {}\r\n\t\t\t} },\r\n\r\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\r\n\t\t\trectAreaLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\twidth: {},\r\n\t\t\t\theight: {}\r\n\t\t\t} }\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tsize: { value: 1.0 },\r\n\t\t\tscale: { value: 1.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\talphaMap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\trotation: { value: 0.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\talphaMap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t */\r\n\r\n\tvar ShaderLib = {\r\n\r\n\t\tbasic: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\r\n\r\n\t\t},\r\n\r\n\t\tlambert: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\r\n\r\n\t\t},\r\n\r\n\t\tphong: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.gradientmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\r\n\t\t\t\t\tshininess: { value: 30 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\r\n\r\n\t\t},\r\n\r\n\t\tstandard: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.roughnessmap,\r\n\t\t\t\tUniformsLib.metalnessmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\troughness: { value: 0.5 },\r\n\t\t\t\t\tmetalness: { value: 0.5 },\r\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t\t},\r\n\r\n\t\tmatcap: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tmatcap: { value: null }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.points,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.points_vert,\r\n\t\t\tfragmentShader: ShaderChunk.points_frag\r\n\r\n\t\t},\r\n\r\n\t\tdashed: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tscale: { value: 1 },\r\n\t\t\t\t\tdashSize: { value: 1 },\r\n\t\t\t\t\ttotalSize: { value: 2 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\r\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\r\n\r\n\t\t},\r\n\r\n\t\tdepth: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.depth_vert,\r\n\t\t\tfragmentShader: ShaderChunk.depth_frag\r\n\r\n\t\t},\r\n\r\n\t\tnormal: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.normal_vert,\r\n\t\t\tfragmentShader: ShaderChunk.normal_frag\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.sprite,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\r\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\r\n\r\n\t\t},\r\n\r\n\t\tbackground: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tuvTransform: { value: new Matrix3() },\r\n\t\t\t\tt2D: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.background_vert,\r\n\t\t\tfragmentShader: ShaderChunk.background_frag\r\n\r\n\t\t},\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\r\n\t\tcube: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttCube: { value: null },\r\n\t\t\t\ttFlip: { value: - 1 },\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.cube_vert,\r\n\t\t\tfragmentShader: ShaderChunk.cube_frag\r\n\r\n\t\t},\r\n\r\n\t\tequirect: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\r\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\r\n\r\n\t\t},\r\n\r\n\t\tdistanceRGBA: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\treferencePosition: { value: new Vector3() },\r\n\t\t\t\t\tnearDistance: { value: 1 },\r\n\t\t\t\t\tfarDistance: { value: 1000 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\r\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\r\n\r\n\t\t},\r\n\r\n\t\tshadow: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t} ] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\r\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tShaderLib.physical = {\r\n\r\n\t\tuniforms: mergeUniforms( [\r\n\t\t\tShaderLib.standard.uniforms,\r\n\t\t\t{\r\n\t\t\t\ttransparency: { value: 0 },\r\n\t\t\t\tclearcoat: { value: 0 },\r\n\t\t\t\tclearcoatRoughness: { value: 0 },\r\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\r\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\r\n\t\t\t\tclearcoatNormalMap: { value: null },\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAnimation() {\r\n\r\n\t\tvar context = null;\r\n\t\tvar isAnimating = false;\r\n\t\tvar animationLoop = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tif ( isAnimating === false ) { return; }\r\n\r\n\t\t\tanimationLoop( time, frame );\r\n\r\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tstart: function () {\r\n\r\n\t\t\t\tif ( isAnimating === true ) { return; }\r\n\t\t\t\tif ( animationLoop === null ) { return; }\r\n\r\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t\t\tisAnimating = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tstop: function () {\r\n\r\n\t\t\t\tisAnimating = false;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetAnimationLoop: function ( callback ) {\r\n\r\n\t\t\t\tanimationLoop = callback;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t\tcontext = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAttributes( gl ) {\r\n\r\n\t\tvar buffers = new WeakMap();\r\n\r\n\t\tfunction createBuffer( attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar usage = attribute.usage;\r\n\r\n\t\t\tvar buffer = gl.createBuffer();\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\t\t\tgl.bufferData( bufferType, array, usage );\r\n\r\n\t\t\tattribute.onUploadCallback();\r\n\r\n\t\t\tvar type = 5126;\r\n\r\n\t\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\t\ttype = 5126;\r\n\r\n\t\t\t} else if ( array instanceof Float64Array ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\r\n\r\n\t\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\t\ttype = 5123;\r\n\r\n\t\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\t\ttype = 5122;\r\n\r\n\t\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\t\ttype = 5125;\r\n\r\n\t\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\t\ttype = 5124;\r\n\r\n\t\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\t\ttype = 5120;\r\n\r\n\t\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\t\ttype = 5121;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\ttype: type,\r\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\r\n\t\t\t\tversion: attribute.version\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar updateRange = attribute.updateRange;\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\r\n\t\t\tif ( updateRange.count === - 1 ) {\r\n\r\n\t\t\t\t// Not using update ranges\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\r\n\r\n\t\t\t\tupdateRange.count = - 1; // reset range\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction get( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\treturn buffers.get( attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data ) {\r\n\r\n\t\t\t\tgl.deleteBuffer( data.buffer );\r\n\r\n\t\t\t\tbuffers.delete( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( attribute, bufferType ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data === undefined ) {\r\n\r\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\r\n\r\n\t\t\t} else if ( data.version < attribute.version ) {\r\n\r\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\r\n\r\n\t\t\t\tdata.version = attribute.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PlaneGeometry\r\n\r\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\r\n\r\n\t// PlaneBufferGeometry\r\n\r\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\twidth = width || 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\r\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar segment_width = width / gridX;\r\n\t\tvar segment_height = height / gridY;\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\t\tvertices.push( x, - y, 0 );\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\r\n\r\n\t\tvar clearColor = new Color( 0x000000 );\r\n\t\tvar clearAlpha = 0;\r\n\r\n\t\tvar planeMesh;\r\n\t\tvar boxMesh;\r\n\t\t// Store the current background texture and its `version`\r\n\t\t// so we can recompile the material accordingly.\r\n\t\tvar currentBackground = null;\r\n\t\tvar currentBackgroundVersion = 0;\r\n\r\n\t\tfunction render( renderList, scene, camera, forceClear ) {\r\n\r\n\t\t\tvar background = scene.background;\r\n\r\n\t\t\t// Ignore background in AR\r\n\t\t\t// TODO: Reconsider this.\r\n\r\n\t\t\tvar vr = renderer.vr;\r\n\t\t\tvar session = vr.getSession && vr.getSession();\r\n\r\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\r\n\r\n\t\t\t\tbackground = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background === null ) {\r\n\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\t\t\t\tcurrentBackground = null;\r\n\t\t\t\tcurrentBackgroundVersion = 0;\r\n\r\n\t\t\t} else if ( background && background.isColor ) {\r\n\r\n\t\t\t\tsetClear( background, 1 );\r\n\t\t\t\tforceClear = true;\r\n\t\t\t\tcurrentBackground = null;\r\n\t\t\t\tcurrentBackgroundVersion = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderer.autoClear || forceClear ) {\r\n\r\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\r\n\r\n\t\t\t\tif ( boxMesh === undefined ) {\r\n\r\n\t\t\t\t\tboxMesh = new Mesh(\r\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\r\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\r\n\t\t\t\t\t\t\tside: BackSide,\r\n\t\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\r\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\r\n\r\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// enable code injection for non-built-in material\r\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'map', {\r\n\r\n\t\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\t\treturn this.uniforms.tCube.value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tobjects.update( boxMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\r\n\t\t\t\tboxMesh.material.uniforms.tCube.value = texture;\r\n\t\t\t\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\r\n\r\n\t\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\t     currentBackgroundVersion !== texture.version ) {\r\n\r\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\t\tcurrentBackground = background;\r\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\r\n\r\n\t\t\t} else if ( background && background.isTexture ) {\r\n\r\n\t\t\t\tif ( planeMesh === undefined ) {\r\n\r\n\t\t\t\t\tplaneMesh = new Mesh(\r\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\r\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\r\n\t\t\t\t\t\t\tside: FrontSide,\r\n\t\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\r\n\r\n\t\t\t\t\t// enable code injection for non-built-in material\r\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\r\n\r\n\t\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tobjects.update( planeMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\r\n\r\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tbackground.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\r\n\r\n\t\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\t\t   currentBackgroundVersion !== background.version ) {\r\n\r\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\t\tcurrentBackground = background;\r\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setClear( color, alpha ) {\r\n\r\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tgetClearColor: function () {\r\n\r\n\t\t\t\treturn clearColor;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearColor: function ( color, alpha ) {\r\n\r\n\t\t\t\tclearColor.set( color );\r\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\tgetClearAlpha: function () {\r\n\r\n\t\t\t\treturn clearAlpha;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearAlpha: function ( alpha ) {\r\n\r\n\t\t\t\tclearAlpha = alpha;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\trender: render\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawArrays( mode, start, count );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\r\n\r\n\t\t\tif ( primcount === 0 ) { return; }\r\n\r\n\t\t\tvar extension, methodName;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\t\t\t\tmethodName = 'drawArraysInstanced';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ methodName ]( mode, start, count, primcount );\r\n\r\n\t\t\tinfo.update( count, mode, primcount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n\t\tvar maxAnisotropy;\r\n\r\n\t\tfunction getMaxAnisotropy() {\r\n\r\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaxAnisotropy = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxAnisotropy;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\r\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'highp';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprecision = 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\r\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 'lowp';\r\n\r\n\t\t}\r\n\r\n\t\t/* eslint-disable no-undef */\r\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\r\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\r\n\t\t/* eslint-enable no-undef */\r\n\r\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\t\tvar maxPrecision = getMaxPrecision( precision );\r\n\r\n\t\tif ( maxPrecision !== precision ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n\t\t\tprecision = maxPrecision;\r\n\r\n\t\t}\r\n\r\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n\t\tvar maxTextures = gl.getParameter( 34930 );\r\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\r\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\r\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\r\n\r\n\t\tvar maxAttributes = gl.getParameter( 34921 );\r\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\r\n\t\tvar maxVaryings = gl.getParameter( 36348 );\r\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\r\n\r\n\t\tvar vertexTextures = maxVertexTextures > 0;\r\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\r\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\r\n\t\t\tgetMaxPrecision: getMaxPrecision,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\tmaxTextures: maxTextures,\r\n\t\t\tmaxVertexTextures: maxVertexTextures,\r\n\t\t\tmaxTextureSize: maxTextureSize,\r\n\t\t\tmaxCubemapSize: maxCubemapSize,\r\n\r\n\t\t\tmaxAttributes: maxAttributes,\r\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\r\n\t\t\tmaxVaryings: maxVaryings,\r\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\r\n\r\n\t\t\tvertexTextures: vertexTextures,\r\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\r\n\t\t\tfloatVertexTextures: floatVertexTextures,\r\n\r\n\t\t\tmaxSamples: maxSamples\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLClipping() {\r\n\r\n\t\tvar scope = this,\r\n\r\n\t\t\tglobalState = null,\r\n\t\t\tnumGlobalPlanes = 0,\r\n\t\t\tlocalClippingEnabled = false,\r\n\t\t\trenderingShadows = false,\r\n\r\n\t\t\tplane = new Plane(),\r\n\t\t\tviewNormalMatrix = new Matrix3(),\r\n\r\n\t\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\t\tthis.uniform = uniform;\r\n\t\tthis.numPlanes = 0;\r\n\t\tthis.numIntersection = 0;\r\n\r\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\r\n\r\n\t\t\tvar enabled =\r\n\t\t\t\tplanes.length !== 0 ||\r\n\t\t\t\tenableLocalClipping ||\r\n\t\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t\t// run another frame in order to reset the state:\r\n\t\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\t\tlocalClippingEnabled;\r\n\r\n\t\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\t\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\t\treturn enabled;\r\n\r\n\t\t};\r\n\r\n\t\tthis.beginShadows = function () {\r\n\r\n\t\t\trenderingShadows = true;\r\n\t\t\tprojectPlanes( null );\r\n\r\n\t\t};\r\n\r\n\t\tthis.endShadows = function () {\r\n\r\n\t\t\trenderingShadows = false;\r\n\t\t\tresetGlobalState();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\r\n\r\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\r\n\r\n\t\t\t\t// there's no local clipping\r\n\r\n\t\t\t\tif ( renderingShadows ) {\r\n\r\n\t\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresetGlobalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\t\tlGlobal = nGlobal * 4,\r\n\r\n\t\t\t\t\tdstArray = cache.clippingState || null;\r\n\r\n\t\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcache.clippingState = dstArray;\r\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\r\n\t\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t};\r\n\r\n\t\tfunction resetGlobalState() {\r\n\r\n\t\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\t\tuniform.value = globalState;\r\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = numGlobalPlanes;\r\n\t\t\tscope.numIntersection = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\r\n\t\t\t\tdstArray = null;\r\n\r\n\t\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniform.value = dstArray;\r\n\t\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = nPlanes;\r\n\r\n\t\t\treturn dstArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLExtensions( gl ) {\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( name ) {\r\n\r\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn extensions[ name ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar extension;\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\textensions[ name ] = extension;\r\n\r\n\t\t\t\treturn extension;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLGeometries( gl, attributes, info ) {\r\n\r\n\t\tvar geometries = new WeakMap();\r\n\t\tvar wireframeAttributes = new WeakMap();\r\n\r\n\t\tfunction onGeometryDispose( event ) {\r\n\r\n\t\t\tvar geometry = event.target;\r\n\t\t\tvar buffergeometry = geometries.get( geometry );\r\n\r\n\t\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in buffergeometry.attributes ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tgeometries.delete( geometry );\r\n\r\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\r\n\r\n\t\t\tif ( attribute ) {\r\n\r\n\t\t\t\tattributes.remove( attribute );\r\n\t\t\t\twireframeAttributes.delete( buffergeometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinfo.memory.geometries --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( object, geometry ) {\r\n\r\n\t\t\tvar buffergeometry = geometries.get( geometry );\r\n\r\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\r\n\r\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometries.set( geometry, buffergeometry );\r\n\r\n\t\t\tinfo.memory.geometries ++;\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( geometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattributes.update( index, 34963 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in geometryAttributes ) {\r\n\r\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\tvar geometryIndex = geometry.index;\r\n\t\t\tvar geometryPosition = geometry.attributes.position;\r\n\t\t\tvar version = 0;\r\n\r\n\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\tvar array = geometryIndex.array;\r\n\t\t\t\tversion = geometryIndex.version;\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar array = geometryPosition.array;\r\n\t\t\t\tversion = geometryPosition.version;\r\n\r\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = i + 0;\r\n\t\t\t\t\tvar b = i + 1;\r\n\t\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\r\n\t\t\tattribute.version = version;\r\n\r\n\t\t\tattributes.update( attribute, 34963 );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\r\n\r\n\t\t\t//\r\n\r\n\t\t\twireframeAttributes.set( geometry, attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\t\tif ( currentAttribute ) {\r\n\r\n\t\t\t\tvar geometryIndex = geometry.index;\r\n\r\n\t\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\t\t// if the attribute is obsolete, create a new one\r\n\r\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\r\n\r\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn wireframeAttributes.get( geometry );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tupdate: update,\r\n\r\n\t\t\tgetWireframeAttribute: getWireframeAttribute\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tvar type, bytesPerElement;\r\n\r\n\t\tfunction setIndex( value ) {\r\n\r\n\t\t\ttype = value.type;\r\n\t\t\tbytesPerElement = value.bytesPerElement;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\r\n\r\n\t\t\tif ( primcount === 0 ) { return; }\r\n\r\n\t\t\tvar extension, methodName;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\t\t\t\tmethodName = 'drawElementsInstanced';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\r\n\r\n\t\t\tinfo.update( count, mode, primcount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.setIndex = setIndex;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLInfo( gl ) {\r\n\r\n\t\tvar memory = {\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\t};\r\n\r\n\t\tvar render = {\r\n\t\t\tframe: 0,\r\n\t\t\tcalls: 0,\r\n\t\t\ttriangles: 0,\r\n\t\t\tpoints: 0,\r\n\t\t\tlines: 0\r\n\t\t};\r\n\r\n\t\tfunction update( count, mode, instanceCount ) {\r\n\r\n\t\t\tinstanceCount = instanceCount || 1;\r\n\r\n\t\t\trender.calls ++;\r\n\r\n\t\t\tswitch ( mode ) {\r\n\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 5:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\trender.lines += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\trender.points += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\trender.frame ++;\r\n\t\t\trender.calls = 0;\r\n\t\t\trender.triangles = 0;\r\n\t\t\trender.points = 0;\r\n\t\t\trender.lines = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmemory: memory,\r\n\t\t\trender: render,\r\n\t\t\tprograms: null,\r\n\t\t\tautoReset: true,\r\n\t\t\treset: reset,\r\n\t\t\tupdate: update\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\r\n\r\n\t}\r\n\r\n\tfunction WebGLMorphtargets( gl ) {\r\n\r\n\t\tvar influencesList = {};\r\n\t\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\t\tfunction update( object, geometry, material, program ) {\r\n\r\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\t\tvar length = objectInfluences.length;\r\n\r\n\t\t\tvar influences = influencesList[ geometry.id ];\r\n\r\n\t\t\tif ( influences === undefined ) {\r\n\r\n\t\t\t\t// initialise list\r\n\r\n\t\t\t\tinfluences = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\r\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\r\n\r\n\t\t\t// Remove current morphAttributes\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\r\n\r\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\r\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Collect influences\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tinfluence[ 0 ] = i;\r\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfluences.sort( absNumericalSort );\r\n\r\n\t\t\t// Add morphAttributes\r\n\r\n\t\t\tvar morphInfluencesSum = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 0 ];\r\n\t\t\t\t\tvar value = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( value ) {\r\n\r\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\r\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\r\n\r\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\r\n\t\t\t\t\t\tmorphInfluencesSum += value;\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmorphInfluences[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\r\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\r\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\r\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\r\n\r\n\t\tvar updateList = {};\r\n\r\n\t\tfunction update( object ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\r\n\r\n\t\t\t// Update once per frame\r\n\r\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometries.update( buffergeometry );\r\n\r\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tupdateList = {};\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\timages = images !== undefined ? images : [];\r\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\r\n\t\tformat = format !== undefined ? format : RGBFormat;\r\n\r\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t}\r\n\r\n\tCubeTexture.prototype = Object.create( Texture.prototype );\r\n\tCubeTexture.prototype.constructor = CubeTexture;\r\n\r\n\tCubeTexture.prototype.isCubeTexture = true;\r\n\r\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.image;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.image = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction DataTexture2DArray( data, width, height, depth ) {\r\n\r\n\t\tTexture.call( this, null );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\r\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\r\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\r\n\r\n\t/**\r\n\t * @author Artur Trzesiok\r\n\t */\r\n\r\n\tfunction DataTexture3D( data, width, height, depth ) {\r\n\r\n\t\t// We're going to add .setXXX() methods for setting properties later.\r\n\t\t// Users can still set in DataTexture3D directly.\r\n\t\t//\r\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\r\n\t\t// \ttexture.anisotropy = 16;\r\n\t\t//\r\n\t\t// See #14839\r\n\r\n\t\tTexture.call( this, null );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\r\n\t}\r\n\r\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\r\n\tDataTexture3D.prototype.constructor = DataTexture3D;\r\n\tDataTexture3D.prototype.isDataTexture3D = true;\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Uniforms of a program.\r\n\t * Those form a tree structure with a special top-level container for the root,\r\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\r\n\t *\r\n\t *\r\n\t * Properties of inner nodes including the top-level container:\r\n\t *\r\n\t * .seq - array of nested uniforms\r\n\t * .map - nested uniforms by name\r\n\t *\r\n\t *\r\n\t * Methods of all nodes except the top-level container:\r\n\t *\r\n\t * .setValue( gl, value, [textures] )\r\n\t *\r\n\t * \t\tuploads a uniform value(s)\r\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\r\n\t *\r\n\t *\r\n\t * Static methods of the top-level container (textures factorizations):\r\n\t *\r\n\t * .upload( gl, seq, values, textures )\r\n\t *\r\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n\t *\r\n\t * .seqWithValue( seq, values ) : filteredSeq\r\n\t *\r\n\t * \t\tfilters 'seq' entries with corresponding entry in values\r\n\t *\r\n\t *\r\n\t * Methods of the top-level container (textures factorizations):\r\n\t *\r\n\t * .setValue( gl, name, value, textures )\r\n\t *\r\n\t * \t\tsets uniform with  name 'name' to 'value'\r\n\t *\r\n\t * .setOptional( gl, obj, prop )\r\n\t *\r\n\t * \t\tlike .set for an optional property of the object\r\n\t *\r\n\t */\r\n\r\n\tvar emptyTexture = new Texture();\r\n\tvar emptyTexture2dArray = new DataTexture2DArray();\r\n\tvar emptyTexture3d = new DataTexture3D();\r\n\tvar emptyCubeTexture = new CubeTexture();\r\n\r\n\t// --- Utilities ---\r\n\r\n\t// Array Caches (provide typed arrays for temporary by size)\r\n\r\n\tvar arrayCacheF32 = [];\r\n\tvar arrayCacheI32 = [];\r\n\r\n\t// Float32Array caches used for uploading Matrix uniforms\r\n\r\n\tvar mat4array = new Float32Array( 16 );\r\n\tvar mat3array = new Float32Array( 9 );\r\n\tvar mat2array = new Float32Array( 4 );\r\n\r\n\t// Flattening for arrays of vectors and matrices\r\n\r\n\tfunction flatten( array, nBlocks, blockSize ) {\r\n\r\n\t\tvar firstElem = array[ 0 ];\r\n\r\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\r\n\t\t// unoptimized: ! isNaN( firstElem )\r\n\t\t// see http://jacksondunstan.com/articles/983\r\n\r\n\t\tvar n = nBlocks * blockSize,\r\n\t\t\tr = arrayCacheF32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Float32Array( n );\r\n\t\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tif ( nBlocks !== 0 ) {\r\n\r\n\t\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\t\toffset += blockSize;\r\n\t\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\tfunction arraysEqual( a, b ) {\r\n\r\n\t\tif ( a.length !== b.length ) { return false; }\r\n\r\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction copyArray( a, b ) {\r\n\r\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\r\n\r\n\t\t\ta[ i ] = b[ i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Texture unit allocation\r\n\r\n\tfunction allocTexUnits( textures, n ) {\r\n\r\n\t\tvar r = arrayCacheI32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Int32Array( n );\r\n\t\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\t// --- Setters ---\r\n\r\n\t// Note: Defining these methods externally, because they come in a bunch\r\n\t// and this way their names minify.\r\n\r\n\t// Single scalar\r\n\r\n\tfunction setValueV1f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) { return; }\r\n\r\n\t\tgl.uniform1f( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\t// Single float vector (from flat array or THREE.VectorN)\r\n\r\n\tfunction setValueV2f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform2fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueV3f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( v.r !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\r\n\t\t\t\tcache[ 0 ] = v.r;\r\n\t\t\t\tcache[ 1 ] = v.g;\r\n\t\t\t\tcache[ 2 ] = v.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueV4f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\t\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform4fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single matrix (from flat array or MatrixN)\r\n\r\n\tfunction setValueM2( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat2array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueM3( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat3array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueM4( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat4array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single texture (2D / Cube)\r\n\r\n\tfunction setValueT1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT2DArray1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT3D1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT6( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\r\n\tfunction setValueV1i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) { return; }\r\n\r\n\t\tgl.uniform1i( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\tfunction setValueV2i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for the singular case\r\n\r\n\tfunction getSingularSetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\r\n\t\t\tcase 0x8b5f: return setValueT3D1; // SAMPLER_3D\r\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\r\n\t\t\tcase 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Array of scalars\r\n\tfunction setValueV1fArray( gl, v ) {\r\n\r\n\t\tgl.uniform1fv( this.addr, v );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\tfunction setValueV1iArray( gl, v ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV2iArray( gl, v ) {\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3iArray( gl, v ) {\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4iArray( gl, v ) {\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\r\n\t// Array of vectors (flat or from THREE classes)\r\n\r\n\tfunction setValueV2fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 2 );\r\n\r\n\t\tgl.uniform2fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 3 );\r\n\r\n\t\tgl.uniform3fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tgl.uniform4fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\t// Array of matrices (flat or from THREE clases)\r\n\r\n\tfunction setValueM2Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM3Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 9 );\r\n\r\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM4Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 16 );\r\n\r\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\t// Array of textures (2D / Cube)\r\n\r\n\tfunction setValueT1Array( gl, v, textures ) {\r\n\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( textures, n );\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueT6Array( gl, v, textures ) {\r\n\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( textures, n );\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n\tfunction getPureArraySetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: return setValueT1Array; // SAMPLER_2D\r\n\t\t\tcase 0x8b60: return setValueT6Array; // SAMPLER_CUBE\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// --- Uniform Classes ---\r\n\r\n\tfunction SingleUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.size = activeInfo.size;\r\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\r\n\r\n\t\t\tthis.cache = new Float32Array( data.length );\r\n\r\n\t\t}\r\n\r\n\t\tcopyArray( cache, data );\r\n\r\n\t};\r\n\r\n\tfunction StructuredUniform( id ) {\r\n\r\n\t\tthis.id = id;\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t}\r\n\r\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\r\n\r\n\t\tvar seq = this.seq;\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ], textures );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// --- Top-level ---\r\n\r\n\t// Parser - builds up the property tree from the path strings\r\n\r\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\r\n\r\n\t// extracts\r\n\t// \t- the identifier (member name or array index)\r\n\t//  - followed by an optional right bracket (found when array index)\r\n\t//  - followed by an optional left bracket or dot (type of subscript)\r\n\t//\r\n\t// Note: These portions can be read in a non-overlapping fashion and\r\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\r\n\t// in the uniform names.\r\n\r\n\tfunction addUniform( container, uniformObject ) {\r\n\r\n\t\tcontainer.seq.push( uniformObject );\r\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n\t}\r\n\r\n\tfunction parseUniform( activeInfo, addr, container ) {\r\n\r\n\t\tvar path = activeInfo.name,\r\n\t\t\tpathLength = path.length;\r\n\r\n\t\t// reset RegExp object, because of the early exit of a previous run\r\n\t\tRePathPart.lastIndex = 0;\r\n\r\n\t\twhile ( true ) {\r\n\r\n\t\t\tvar match = RePathPart.exec( path ),\r\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\r\n\r\n\t\t\t\tid = match[ 1 ],\r\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\r\n\t\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\r\n\r\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\r\n\r\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\t\tvar map = container.map, next = map[ id ];\r\n\r\n\t\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontainer = next;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Root Container\r\n\r\n\tfunction WebGLUniforms( gl, program ) {\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, 35718 );\r\n\r\n\t\tfor ( var i = 0; i < n; ++ i ) {\r\n\r\n\t\t\tvar info = gl.getActiveUniform( program, i ),\r\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\r\n\r\n\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\r\n\r\n\t\tvar v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\r\n\r\n\t};\r\n\r\n\r\n\t// Static interface\r\n\r\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\t\t\t\tu.setValue( gl, v.value, textures );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\r\n\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tif ( u.id in values ) { r.push( u ); }\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\treturn shader;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase LinearEncoding:\r\n\t\t\t\treturn [ 'Linear', '( value )' ];\r\n\t\t\tcase sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB', '( value )' ];\r\n\t\t\tcase RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE', '( value )' ];\r\n\t\t\tcase RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\r\n\t\t\tcase RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\r\n\t\t\tcase RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\r\n\t\t\tcase GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tcase LogLuvEncoding:\r\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getShaderErrors( gl, shader, type ) {\r\n\r\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\r\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\r\n\r\n\t\tif ( status && log === '' ) { return ''; }\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\tvar source = gl.getShaderSource( shader );\r\n\r\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase LinearToneMapping:\r\n\t\t\t\ttoneMappingName = 'Linear';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = 'Reinhard';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = 'Uncharted2';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CineonToneMapping:\r\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ACESFilmicToneMapping:\r\n\t\t\t\ttoneMappingName = 'ACESFilmic';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) { continue; }\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, 35721 );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\r\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\r\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\r\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\r\n\r\n\t}\r\n\r\n\tfunction replaceClippingPlaneNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\r\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\r\n\r\n\t}\r\n\r\n\t// Resolve Includes\r\n\r\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n\r\n\tfunction resolveIncludes( string ) {\r\n\r\n\t\treturn string.replace( includePattern, includeReplacer );\r\n\r\n\t}\r\n\r\n\tfunction includeReplacer( match, include ) {\r\n\r\n\t\tvar string = ShaderChunk[ include ];\r\n\r\n\t\tif ( string === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t}\r\n\r\n\t\treturn resolveIncludes( string );\r\n\r\n\t}\r\n\r\n\t// Unroll Loops\r\n\r\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\treturn string.replace( loopPattern, loopReplacer );\r\n\r\n\t}\r\n\r\n\tfunction loopReplacer( match, start, end, snippet ) {\r\n\r\n\t\tvar string = '';\r\n\r\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\tstring += snippet\r\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\r\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\r\n\r\n\t\t}\r\n\r\n\t\treturn string;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction generatePrecision( parameters ) {\r\n\r\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\r\n\r\n\t\tif ( parameters.precision === \"highp\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\r\n\r\n\t\t} else if ( parameters.precision === \"mediump\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\r\n\r\n\t\t} else if ( parameters.precision === \"lowp\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\r\n\r\n\t\t}\r\n\r\n\t\treturn precisionstring;\r\n\r\n\t}\r\n\r\n\tfunction generateShadowMapTypeDefine( parameters ) {\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\r\n\r\n\t\t}\r\n\r\n\t\treturn shadowMapTypeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapTypeDefine( parameters ) {\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\t\tcase CubeReflectionMapping:\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase CubeUVReflectionMapping:\r\n\t\t\t\tcase CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase EquirectangularReflectionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapTypeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapModeDefine( parameters ) {\r\n\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapModeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapBlendingDefine( parameters ) {\r\n\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.combine ) {\r\n\r\n\t\t\t\tcase MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapBlendingDefine;\r\n\r\n\t}\r\n\r\n\tfunction WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {\r\n\r\n\t\tvar gl = renderer.getContext();\r\n\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = shader.vertexShader;\r\n\t\tvar fragmentShader = shader.fragmentShader;\r\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\r\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\r\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\r\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\r\n\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\r\n\r\n\t\tif ( material.isRawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixVertex.length > 0 ) {\r\n\r\n\t\t\t\tprefixVertex += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixFragment.length > 0 ) {\r\n\r\n\t\t\t\tprefixFragment += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\r\n\r\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\r\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\r\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t\t'#ifdef USE_INSTANCING',\r\n\r\n\t\t\t\t' attribute mat4 instanceMatrix;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_TANGENT',\r\n\r\n\t\t\t\t'\tattribute vec4 tangent;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\r\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\r\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\r\n\r\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\r\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n\r\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\r\n\r\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\r\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = resolveIncludes( vertexShader );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = resolveIncludes( fragmentShader );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\r\n\r\n\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\tif ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {\r\n\r\n\t\t\tvar isGLSL3ShaderMaterial = false;\r\n\r\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\r\n\r\n\t\t\tif ( material.isShaderMaterial &&\r\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\r\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\r\n\r\n\t\t\t\tisGLSL3ShaderMaterial = true;\r\n\r\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\r\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL 3.0 conversion\r\n\r\n\t\t\tprefixVertex = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define attribute in',\r\n\t\t\t\t'#define varying out',\r\n\t\t\t\t'#define texture2D texture'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\r\n\r\n\t\t\tprefixFragment = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define varying in',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\r\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\r\n\t\t\t\t'#define texture2D texture',\r\n\t\t\t\t'#define textureCube texture',\r\n\t\t\t\t'#define texture2DProj textureProj',\r\n\t\t\t\t'#define texture2DLodEXT textureLod',\r\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\r\n\t\t\t\t'#define textureCubeLodEXT textureLod',\r\n\t\t\t\t'#define texture2DGradEXT textureGrad',\r\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\r\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\r\n\r\n\t\t\t// Multiview\r\n\r\n\t\t\tif ( numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\tprefixVertex = prefixVertex.replace(\r\n\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\r\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\r\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixVertex = prefixVertex.replace(\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\r\n\t\t\t\t\t].join( '\\n' ),\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\r\n\r\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixFragment = prefixFragment.replace(\r\n\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\r\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixFragment = prefixFragment.replace(\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\r\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\t// check for link errors\r\n\t\tif ( renderer.debug.checkShaderErrors ) {\r\n\r\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\r\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\r\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\r\n\r\n\t\t\tvar runnable = true;\r\n\t\t\tvar haveDiagnostics = true;\r\n\r\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\r\n\r\n\t\t\t\trunnable = false;\r\n\r\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\r\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\r\n\r\n\t\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\t\thaveDiagnostics = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\t\trunnable: runnable,\r\n\t\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function () {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function () {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function () {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.name = shader.name;\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.cacheKey = cacheKey;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\t\tthis.numMultiviewViews = numMultiviewViews;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\r\n\r\n\t\tvar programs = [];\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\r\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\r\n\t\tvar precision = capabilities.precision;\r\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\tvar vertexTextures = capabilities.vertexTextures;\r\n\r\n\t\tvar shaderIDs = {\r\n\t\t\tMeshDepthMaterial: 'depth',\r\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\r\n\t\t\tMeshNormalMaterial: 'normal',\r\n\t\t\tMeshBasicMaterial: 'basic',\r\n\t\t\tMeshLambertMaterial: 'lambert',\r\n\t\t\tMeshPhongMaterial: 'phong',\r\n\t\t\tMeshToonMaterial: 'phong',\r\n\t\t\tMeshStandardMaterial: 'physical',\r\n\t\t\tMeshPhysicalMaterial: 'physical',\r\n\t\t\tMeshMatcapMaterial: 'matcap',\r\n\t\t\tLineBasicMaterial: 'basic',\r\n\t\t\tLineDashedMaterial: 'dashed',\r\n\t\t\tPointsMaterial: 'points',\r\n\t\t\tShadowMaterial: 'shadow',\r\n\t\t\tSpriteMaterial: 'sprite'\r\n\t\t};\r\n\r\n\t\tvar parameterNames = [\r\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\r\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\r\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\r\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\r\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\r\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\r\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\r\n\t\t\t\"sheen\"\r\n\t\t];\r\n\r\n\r\n\t\tfunction allocateBones( object ) {\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\tif ( floatVertexTextures ) {\r\n\r\n\t\t\t\treturn 1024;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// default for when object is not specified\r\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t\t//\r\n\t\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\r\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\r\n\r\n\t\t\t\tif ( maxBones < bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn maxBones;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\t\tvar encoding;\r\n\r\n\t\t\tif ( ! map ) {\r\n\r\n\t\t\t\tencoding = LinearEncoding;\r\n\r\n\t\t\t} else if ( map.isTexture ) {\r\n\r\n\t\t\t\tencoding = map.encoding;\r\n\r\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\t\tencoding = GammaEncoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn encoding;\r\n\r\n\t\t}\r\n\r\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\r\n\r\n\t\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t\t// (not to blow over maxLights budget)\r\n\r\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\r\n\r\n\t\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\r\n\r\n\t\t\tvar parameters = {\r\n\r\n\t\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\t\tshaderID: shaderID,\r\n\r\n\t\t\t\tprecision: precision,\r\n\r\n\t\t\t\tinstancing: object.isInstancedMesh === true,\r\n\r\n\t\t\t\tsupportsVertexTextures: vertexTextures,\r\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\r\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\r\n\t\t\t\tmap: !! material.map,\r\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\t\tmatcap: !! material.matcap,\r\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\r\n\t\t\t\tenvMap: !! material.envMap,\r\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\r\n\t\t\t\tlightMap: !! material.lightMap,\r\n\t\t\t\taoMap: !! material.aoMap,\r\n\t\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\r\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\r\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\r\n\t\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\t\tgradientMap: !! material.gradientMap,\r\n\r\n\t\t\t\tsheen: !! material.sheen,\r\n\r\n\t\t\t\tcombine: material.combine,\r\n\r\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\r\n\t\t\t\tvertexColors: material.vertexColors,\r\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\r\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\r\n\r\n\t\t\t\tfog: !! fog,\r\n\t\t\t\tuseFog: material.fog,\r\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\r\n\r\n\t\t\t\tflatShading: material.flatShading,\r\n\r\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\t\tskinning: material.skinning && maxBones > 0,\r\n\t\t\t\tmaxBones: maxBones,\r\n\t\t\t\tuseVertexTexture: floatVertexTextures,\r\n\r\n\t\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\t\tnumPointLights: lights.point.length,\r\n\t\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\r\n\t\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\r\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\r\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\r\n\r\n\t\t\t\tnumClippingPlanes: nClipPlanes,\r\n\t\t\t\tnumClipIntersection: nClipIntersection,\r\n\r\n\t\t\t\tdithering: material.dithering,\r\n\r\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\r\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\r\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\t\talphaTest: material.alphaTest,\r\n\t\t\t\tdoubleSided: material.side === DoubleSide,\r\n\t\t\t\tflipSided: material.side === BackSide,\r\n\r\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\r\n\r\n\t\t\t};\r\n\r\n\t\t\treturn parameters;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getProgramCacheKey = function ( material, parameters ) {\r\n\r\n\t\t\tvar array = [];\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarray.push( material.fragmentShader );\r\n\t\t\t\tarray.push( material.vertexShader );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\t\tarray.push( name );\r\n\t\t\t\t\tarray.push( material.defines[ name ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray.push( material.onBeforeCompile.toString() );\r\n\r\n\t\t\tarray.push( renderer.gammaOutput );\r\n\r\n\t\t\tarray.push( renderer.gammaFactor );\r\n\r\n\t\t\treturn array.join();\r\n\r\n\t\t};\r\n\r\n\t\tthis.acquireProgram = function ( material, shader, parameters, cacheKey ) {\r\n\r\n\t\t\tvar program;\r\n\r\n\t\t\t// Check if code has been already compiled\r\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tvar preexistingProgram = programs[ p ];\r\n\r\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\r\n\r\n\t\t\t\t\tprogram = preexistingProgram;\r\n\t\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );\r\n\t\t\t\tprograms.push( program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t};\r\n\r\n\t\tthis.releaseProgram = function ( program ) {\r\n\r\n\t\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t\t// Remove from unordered set\r\n\t\t\t\tvar i = programs.indexOf( program );\r\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\t\tprograms.pop();\r\n\r\n\t\t\t\t// Free WebGL resources\r\n\t\t\t\tprogram.destroy();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tthis.programs = programs;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fordacious / fordacious.github.io\r\n\t */\r\n\r\n\tfunction WebGLProperties() {\r\n\r\n\t\tvar properties = new WeakMap();\r\n\r\n\t\tfunction get( object ) {\r\n\r\n\t\t\tvar map = properties.get( object );\r\n\r\n\t\t\tif ( map === undefined ) {\r\n\r\n\t\t\t\tmap = {};\r\n\t\t\t\tproperties.set( object, map );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn map;\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( object ) {\r\n\r\n\t\t\tproperties.delete( object );\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( object, key, value ) {\r\n\r\n\t\t\tproperties.get( object )[ key ] = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tproperties = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction painterSortStable( a, b ) {\r\n\r\n\t\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.program !== b.program ) {\r\n\r\n\t\t\treturn a.program.id - b.program.id;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable( a, b ) {\r\n\r\n\t\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction WebGLRenderList() {\r\n\r\n\t\tvar renderItems = [];\r\n\t\tvar renderItemsIndex = 0;\r\n\r\n\t\tvar opaque = [];\r\n\t\tvar transparent = [];\r\n\r\n\t\tvar defaultProgram = { id: - 1 };\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\trenderItemsIndex = 0;\r\n\r\n\t\t\topaque.length = 0;\r\n\t\t\ttransparent.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\r\n\r\n\t\t\tif ( renderItem === undefined ) {\r\n\r\n\t\t\t\trenderItem = {\r\n\t\t\t\t\tid: object.id,\r\n\t\t\t\t\tobject: object,\r\n\t\t\t\t\tgeometry: geometry,\r\n\t\t\t\t\tmaterial: material,\r\n\t\t\t\t\tprogram: material.program || defaultProgram,\r\n\t\t\t\t\tgroupOrder: groupOrder,\r\n\t\t\t\t\trenderOrder: object.renderOrder,\r\n\t\t\t\t\tz: z,\r\n\t\t\t\t\tgroup: group\r\n\t\t\t\t};\r\n\r\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderItem.id = object.id;\r\n\t\t\t\trenderItem.object = object;\r\n\t\t\t\trenderItem.geometry = geometry;\r\n\t\t\t\trenderItem.material = material;\r\n\t\t\t\trenderItem.program = material.program || defaultProgram;\r\n\t\t\t\trenderItem.groupOrder = groupOrder;\r\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\r\n\t\t\t\trenderItem.z = z;\r\n\t\t\t\trenderItem.group = group;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderItemsIndex ++;\r\n\r\n\t\t\treturn renderItem;\r\n\r\n\t\t}\r\n\r\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\r\n\r\n\t\t}\r\n\r\n\t\tfunction sort() {\r\n\r\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }\r\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\topaque: opaque,\r\n\t\t\ttransparent: transparent,\r\n\r\n\t\t\tinit: init,\r\n\t\t\tpush: push,\r\n\t\t\tunshift: unshift,\r\n\r\n\t\t\tsort: sort\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderLists() {\r\n\r\n\t\tvar lists = new WeakMap();\r\n\r\n\t\tfunction onSceneDispose( event ) {\r\n\r\n\t\t\tvar scene = event.target;\r\n\r\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\tlists.delete( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar cameras = lists.get( scene );\r\n\t\t\tvar list;\r\n\t\t\tif ( cameras === undefined ) {\r\n\r\n\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\tlists.set( scene, new WeakMap() );\r\n\t\t\t\tlists.get( scene ).set( camera, list );\r\n\r\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlist = cameras.get( camera );\r\n\t\t\t\tif ( list === undefined ) {\r\n\r\n\t\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\t\tcameras.set( camera, list );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tlists = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction UniformsCache() {\r\n\r\n\t\tvar lights = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( light ) {\r\n\r\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn lights[ light.id ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniforms;\r\n\r\n\t\t\t\tswitch ( light.type ) {\r\n\r\n\t\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\r\n\t\t\t\t\t\t\tshadowCameraNear: 1,\r\n\t\t\t\t\t\t\tshadowCameraFar: 1000\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'HemisphereLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tskyColor: new Color(),\r\n\t\t\t\t\t\t\tgroundColor: new Color()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RectAreaLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\r\n\t\t\t\t\t\t\thalfHeight: new Vector3()\r\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\t\t\treturn uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar nextVersion = 0;\r\n\r\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\r\n\r\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\r\n\r\n\t}\r\n\r\n\tfunction WebGLLights() {\r\n\r\n\t\tvar cache = new UniformsCache();\r\n\r\n\t\tvar state = {\r\n\r\n\t\t\tversion: 0,\r\n\r\n\t\t\thash: {\r\n\t\t\t\tdirectionalLength: - 1,\r\n\t\t\t\tpointLength: - 1,\r\n\t\t\t\tspotLength: - 1,\r\n\t\t\t\trectAreaLength: - 1,\r\n\t\t\t\themiLength: - 1,\r\n\r\n\t\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\t\tnumPointShadows: - 1,\r\n\t\t\t\tnumSpotShadows: - 1,\r\n\t\t\t},\r\n\r\n\t\t\tambient: [ 0, 0, 0 ],\r\n\t\t\tprobe: [],\r\n\t\t\tdirectional: [],\r\n\t\t\tdirectionalShadowMap: [],\r\n\t\t\tdirectionalShadowMatrix: [],\r\n\t\t\tspot: [],\r\n\t\t\tspotShadowMap: [],\r\n\t\t\tspotShadowMatrix: [],\r\n\t\t\trectArea: [],\r\n\t\t\tpoint: [],\r\n\t\t\tpointShadowMap: [],\r\n\t\t\tpointShadowMatrix: [],\r\n\t\t\themi: [],\r\n\r\n\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\tnumPointShadows: - 1,\r\n\t\t\tnumSpotShadows: - 1\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\r\n\r\n\t\tvar vector3 = new Vector3();\r\n\t\tvar matrix4 = new Matrix4();\r\n\t\tvar matrix42 = new Matrix4();\r\n\r\n\t\tfunction setup( lights, shadows, camera ) {\r\n\r\n\t\t\tvar r = 0, g = 0, b = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\r\n\r\n\t\t\tvar directionalLength = 0;\r\n\t\t\tvar pointLength = 0;\r\n\t\t\tvar spotLength = 0;\r\n\t\t\tvar rectAreaLength = 0;\r\n\t\t\tvar hemiLength = 0;\r\n\r\n\t\t\tvar numDirectionalShadows = 0;\r\n\t\t\tvar numPointShadows = 0;\r\n\t\t\tvar numSpotShadows = 0;\r\n\r\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\tlights.sort( shadowCastingLightsFirst );\r\n\r\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tvar color = light.color;\r\n\t\t\t\tvar intensity = light.intensity;\r\n\t\t\t\tvar distance = light.distance;\r\n\r\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\t\tif ( light.isAmbientLight ) {\r\n\r\n\t\t\t\t\tr += color.r * intensity;\r\n\t\t\t\t\tg += color.g * intensity;\r\n\t\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t\t} else if ( light.isLightProbe ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\r\n\r\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumDirectionalShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\r\n\r\n\t\t\t\t\tdirectionalLength ++;\r\n\r\n\t\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumSpotShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\r\n\r\n\t\t\t\t\tspotLength ++;\r\n\r\n\t\t\t\t} else if ( light.isRectAreaLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\t// (a) intensity is the total visible light emitted\r\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\r\n\r\n\t\t\t\t\t// (b) intensity is the brightness of the light\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\r\n\t\t\t\t\tmatrix42.identity();\r\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\r\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\r\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\r\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\r\n\r\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\r\n\t\t\t\t\t// uniforms.distance = distance;\r\n\r\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\r\n\r\n\t\t\t\t\trectAreaLength ++;\r\n\r\n\t\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\r\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\r\n\r\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumPointShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\r\n\r\n\t\t\t\t\tpointLength ++;\r\n\r\n\t\t\t\t} else if ( light.isHemisphereLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\r\n\r\n\t\t\t\t\themiLength ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.ambient[ 0 ] = r;\r\n\t\t\tstate.ambient[ 1 ] = g;\r\n\t\t\tstate.ambient[ 2 ] = b;\r\n\r\n\t\t\tvar hash = state.hash;\r\n\r\n\t\t\tif ( hash.directionalLength !== directionalLength ||\r\n\t\t\t\thash.pointLength !== pointLength ||\r\n\t\t\t\thash.spotLength !== spotLength ||\r\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\r\n\t\t\t\thash.hemiLength !== hemiLength ||\r\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\r\n\t\t\t\thash.numPointShadows !== numPointShadows ||\r\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\r\n\r\n\t\t\t\tstate.directional.length = directionalLength;\r\n\t\t\t\tstate.spot.length = spotLength;\r\n\t\t\t\tstate.rectArea.length = rectAreaLength;\r\n\t\t\t\tstate.point.length = pointLength;\r\n\t\t\t\tstate.hemi.length = hemiLength;\r\n\r\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\r\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\r\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\r\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\r\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\r\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\r\n\r\n\t\t\t\thash.directionalLength = directionalLength;\r\n\t\t\t\thash.pointLength = pointLength;\r\n\t\t\t\thash.spotLength = spotLength;\r\n\t\t\t\thash.rectAreaLength = rectAreaLength;\r\n\t\t\t\thash.hemiLength = hemiLength;\r\n\r\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\r\n\t\t\t\thash.numPointShadows = numPointShadows;\r\n\t\t\t\thash.numSpotShadows = numSpotShadows;\r\n\r\n\t\t\t\tstate.version = nextVersion ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsetup: setup,\r\n\t\t\tstate: state\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLRenderState() {\r\n\r\n\t\tvar lights = new WebGLLights();\r\n\r\n\t\tvar lightsArray = [];\r\n\t\tvar shadowsArray = [];\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\tlightsArray.length = 0;\r\n\t\t\tshadowsArray.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushLight( light ) {\r\n\r\n\t\t\tlightsArray.push( light );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushShadow( shadowLight ) {\r\n\r\n\t\t\tshadowsArray.push( shadowLight );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setupLights( camera ) {\r\n\r\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\r\n\r\n\t\t}\r\n\r\n\t\tvar state = {\r\n\t\t\tlightsArray: lightsArray,\r\n\t\t\tshadowsArray: shadowsArray,\r\n\r\n\t\t\tlights: lights\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\tinit: init,\r\n\t\t\tstate: state,\r\n\t\t\tsetupLights: setupLights,\r\n\r\n\t\t\tpushLight: pushLight,\r\n\t\t\tpushShadow: pushShadow\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderStates() {\r\n\r\n\t\tvar renderStates = new WeakMap();\r\n\r\n\t\tfunction onSceneDispose( event ) {\r\n\r\n\t\t\tvar scene = event.target;\r\n\r\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\trenderStates.delete( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar renderState;\r\n\r\n\t\t\tif ( renderStates.has( scene ) === false ) {\r\n\r\n\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\trenderStates.set( scene, new WeakMap() );\r\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\r\n\r\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\r\n\r\n\t\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn renderState;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\trenderStates = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / https://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDepthMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\r\n\t\tthis.depthPacking = BasicDepthPacking;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\r\n\r\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\r\n\r\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.depthPacking = source.depthPacking;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  referencePosition: <float>,\r\n\t *  nearDistance: <float>,\r\n\t *  farDistance: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDistanceMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDistanceMaterial';\r\n\r\n\t\tthis.referencePosition = new Vector3();\r\n\t\tthis.nearDistance = 1;\r\n\t\tthis.farDistance = 1000;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\r\n\r\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\r\n\r\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.referencePosition.copy( source.referencePosition );\r\n\t\tthis.nearDistance = source.nearDistance;\r\n\t\tthis.farDistance = source.farDistance;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\r\n\r\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\r\n\r\n\t\tvar _frustum = new Frustum(),\r\n\r\n\t\t\t_shadowMapSize = new Vector2(),\r\n\t\t\t_viewportSize = new Vector2(),\r\n\r\n\t\t\t_viewport = new Vector4(),\r\n\r\n\t\t\t_depthMaterials = [],\r\n\t\t\t_distanceMaterials = [],\r\n\r\n\t\t\t_materialCache = {};\r\n\r\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\r\n\r\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\r\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tshadow_pass: { value: null },\r\n\t\t\t\tresolution: { value: new Vector2() },\r\n\t\t\t\tradius: { value: 4.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: vsm_vert,\r\n\r\n\t\t\tfragmentShader: vsm_frag\r\n\r\n\t\t} );\r\n\r\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\r\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\r\n\r\n\t\tvar fullScreenTri = new BufferGeometry();\r\n\t\tfullScreenTri.setAttribute(\r\n\t\t\t\"position\",\r\n\t\t\tnew BufferAttribute(\r\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\r\n\t\t\t\t3\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tthis.type = PCFShadowMap;\r\n\r\n\t\tthis.render = function ( lights, scene, camera ) {\r\n\r\n\t\t\tif ( scope.enabled === false ) { return; }\r\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\r\n\r\n\t\t\tif ( lights.length === 0 ) { return; }\r\n\r\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\r\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\r\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\r\n\r\n\t\t\tvar _state = _renderer.state;\r\n\r\n\t\t\t// Set GL state for depth map.\r\n\t\t\t_state.setBlending( NoBlending );\r\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\r\n\t\t\t_state.buffers.depth.setTest( true );\r\n\t\t\t_state.setScissorTest( false );\r\n\r\n\t\t\t// render depth map\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\r\n\r\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\r\n\r\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\r\n\r\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\r\n\r\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\r\n\r\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\r\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\r\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\r\n\r\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\r\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\r\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\r\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\r\n\t\t\t\t_renderer.clear();\r\n\r\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\r\n\r\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\r\n\r\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\r\n\r\n\t\t\t\t\t_viewport.set(\r\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\r\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\r\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\r\n\t\t\t\t\t\t_viewportSize.y * viewport.w\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t_state.viewport( _viewport );\r\n\r\n\t\t\t\t\tshadow.updateMatrices( light, vp );\r\n\r\n\t\t\t\t\t_frustum = shadow.getFrustum();\r\n\r\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do blur pass for VSM\r\n\r\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\t\tVSMPass( shadow, camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.needsUpdate = false;\r\n\r\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\r\n\r\n\t\t};\r\n\r\n\t\tfunction VSMPass( shadow, camera ) {\r\n\r\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\r\n\r\n\t\t\t// vertical pass\r\n\r\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\r\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\r\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\r\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\r\n\t\t\t_renderer.clear();\r\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\r\n\r\n\t\t\t// horizonal pass\r\n\r\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\r\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\r\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\r\n\t\t\t_renderer.setRenderTarget( shadow.map );\r\n\t\t\t_renderer.clear();\r\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\r\n\r\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\r\n\r\n\t\t\tvar material = _depthMaterials[ index ];\r\n\r\n\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\tmaterial = new MeshDepthMaterial( {\r\n\r\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\r\n\r\n\t\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_depthMaterials[ index ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\r\n\r\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\r\n\r\n\t\t\tvar material = _distanceMaterials[ index ];\r\n\r\n\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\r\n\r\n\t\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_distanceMaterials[ index ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tvar result = null;\r\n\r\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\r\n\t\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\t\tif ( light.isPointLight === true ) {\r\n\r\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\r\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customMaterial === undefined ) {\r\n\r\n\t\t\t\tvar useMorphing = false;\r\n\r\n\t\t\t\tif ( material.morphTargets === true ) {\r\n\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\r\n\r\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useSkinning = false;\r\n\r\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\t\t\tif ( material.skinning === true ) {\r\n\r\n\t\t\t\t\t\tuseSkinning = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\r\n\r\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = customMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _renderer.localClippingEnabled &&\r\n\t\t\t\t\tmaterial.clipShadows === true &&\r\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\r\n\r\n\t\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t\t// appropriate state\r\n\r\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.visible = material.visible;\r\n\t\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\t\tif ( type === VSMShadowMap ) {\r\n\r\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.clipShadows = material.clipShadows;\r\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\t\t\tresult.clipIntersection = material.clipIntersection;\r\n\r\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\r\n\r\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tresult.nearDistance = shadowCameraNear;\r\n\t\t\t\tresult.farDistance = shadowCameraFar;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\r\n\r\n\t\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\r\n\r\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\r\n\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\r\n\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLState( gl, extensions, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tfunction ColorBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar color = new Vector4();\r\n\t\t\tvar currentColorMask = null;\r\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetMask: function ( colorMask ) {\r\n\r\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\t\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcolor.set( r, g, b, a );\r\n\r\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentColorMask = null;\r\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction DepthBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentDepthMask = null;\r\n\t\t\tvar currentDepthFunc = null;\r\n\t\t\tvar currentDepthClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( depthTest ) {\r\n\r\n\t\t\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t\t\tenable( 2929 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( 2929 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( depthMask ) {\r\n\r\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.depthMask( depthMask );\r\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( depthFunc ) {\r\n\r\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\t\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\t\tcase NeverDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase EqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( depth ) {\r\n\r\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentDepthMask = null;\r\n\t\t\t\t\tcurrentDepthFunc = null;\r\n\t\t\t\t\tcurrentDepthClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction StencilBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentStencilMask = null;\r\n\t\t\tvar currentStencilFunc = null;\r\n\t\t\tvar currentStencilRef = null;\r\n\t\t\tvar currentStencilFuncMask = null;\r\n\t\t\tvar currentStencilFail = null;\r\n\t\t\tvar currentStencilZFail = null;\r\n\t\t\tvar currentStencilZPass = null;\r\n\t\t\tvar currentStencilClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( stencilTest ) {\r\n\r\n\t\t\t\t\tif ( ! locked ) {\r\n\r\n\t\t\t\t\t\tif ( stencilTest ) {\r\n\r\n\t\t\t\t\t\t\tenable( 2960 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tdisable( 2960 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\r\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\r\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\r\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( stencil ) {\r\n\r\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentStencilMask = null;\r\n\t\t\t\t\tcurrentStencilFunc = null;\r\n\t\t\t\t\tcurrentStencilRef = null;\r\n\t\t\t\t\tcurrentStencilFuncMask = null;\r\n\t\t\t\t\tcurrentStencilFail = null;\r\n\t\t\t\t\tcurrentStencilZFail = null;\r\n\t\t\t\t\tcurrentStencilZPass = null;\r\n\t\t\t\t\tcurrentStencilClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar colorBuffer = new ColorBuffer();\r\n\t\tvar depthBuffer = new DepthBuffer();\r\n\t\tvar stencilBuffer = new StencilBuffer();\r\n\r\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\r\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\r\n\r\n\t\tvar enabledCapabilities = {};\r\n\r\n\t\tvar currentProgram = null;\r\n\r\n\t\tvar currentBlendingEnabled = null;\r\n\t\tvar currentBlending = null;\r\n\t\tvar currentBlendEquation = null;\r\n\t\tvar currentBlendSrc = null;\r\n\t\tvar currentBlendDst = null;\r\n\t\tvar currentBlendEquationAlpha = null;\r\n\t\tvar currentBlendSrcAlpha = null;\r\n\t\tvar currentBlendDstAlpha = null;\r\n\t\tvar currentPremultipledAlpha = false;\r\n\r\n\t\tvar currentFlipSided = null;\r\n\t\tvar currentCullFace = null;\r\n\r\n\t\tvar currentLineWidth = null;\r\n\r\n\t\tvar currentPolygonOffsetFactor = null;\r\n\t\tvar currentPolygonOffsetUnits = null;\r\n\r\n\t\tvar maxTextures = gl.getParameter( 35661 );\r\n\r\n\t\tvar lineWidthAvailable = false;\r\n\t\tvar version = 0;\r\n\t\tvar glVersion = gl.getParameter( 7938 );\r\n\r\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\r\n\r\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvar currentTextureSlot = null;\r\n\t\tvar currentBoundTextures = {};\r\n\r\n\t\tvar currentScissor = new Vector4();\r\n\t\tvar currentViewport = new Vector4();\r\n\r\n\t\tfunction createTexture( type, target, count ) {\r\n\r\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\r\n\t\t\tvar texture = gl.createTexture();\r\n\r\n\t\t\tgl.bindTexture( type, texture );\r\n\t\t\tgl.texParameteri( type, 10241, 9728 );\r\n\t\t\tgl.texParameteri( type, 10240, 9728 );\r\n\r\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t\tvar emptyTextures = {};\r\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\r\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\r\n\r\n\t\t// init\r\n\r\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\r\n\t\tdepthBuffer.setClear( 1 );\r\n\t\tstencilBuffer.setClear( 0 );\r\n\r\n\t\tenable( 2929 );\r\n\t\tdepthBuffer.setFunc( LessEqualDepth );\r\n\r\n\t\tsetFlipSided( false );\r\n\t\tsetCullFace( CullFaceBack );\r\n\t\tenable( 2884 );\r\n\r\n\t\tsetBlending( NoBlending );\r\n\r\n\t\t//\r\n\r\n\t\tfunction initAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttribute( attribute ) {\r\n\r\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\r\n\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\r\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disableUnusedAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\r\n\r\n\t\t\t\tgl.enable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\r\n\r\n\t\t\t\tgl.disable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction useProgram( program ) {\r\n\r\n\t\t\tif ( currentProgram !== program ) {\r\n\r\n\t\t\t\tgl.useProgram( program );\r\n\r\n\t\t\t\tcurrentProgram = program;\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tvar equationToGL = {};\r\n\t\tequationToGL[ AddEquation ] = 32774;\r\n\t\tequationToGL[ SubtractEquation ] = 32778;\r\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\r\n\r\n\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\tequationToGL[ MinEquation ] = 32775;\r\n\t\t\tequationToGL[ MaxEquation ] = 32776;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\r\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar factorToGL = {};\r\n\t\tfactorToGL[ ZeroFactor ] = 0;\r\n\t\tfactorToGL[ OneFactor ] = 1;\r\n\t\tfactorToGL[ SrcColorFactor ] = 768;\r\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\r\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\r\n\t\tfactorToGL[ DstColorFactor ] = 774;\r\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\r\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\r\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\r\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\r\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\r\n\r\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\t\tif ( blending === NoBlending ) {\r\n\r\n\t\t\t\tif ( currentBlendingEnabled ) {\r\n\r\n\t\t\t\t\tdisable( 3042 );\r\n\t\t\t\t\tcurrentBlendingEnabled = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! currentBlendingEnabled ) {\r\n\r\n\t\t\t\tenable( 3042 );\r\n\t\t\t\tcurrentBlendingEnabled = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blending !== CustomBlending ) {\r\n\r\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\r\n\r\n\t\t\t\t\t\tgl.blendEquation( 32774 );\r\n\r\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\r\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// custom blending\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMaterial( material, frontFaceCW ) {\r\n\r\n\t\t\tmaterial.side === DoubleSide\r\n\t\t\t\t? disable( 2884 )\r\n\t\t\t\t: enable( 2884 );\r\n\r\n\t\t\tvar flipSided = ( material.side === BackSide );\r\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\r\n\r\n\t\t\tsetFlipSided( flipSided );\r\n\r\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\r\n\t\t\t\t? setBlending( NoBlending )\r\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\r\n\t\t\tdepthBuffer.setTest( material.depthTest );\r\n\t\t\tdepthBuffer.setMask( material.depthWrite );\r\n\t\t\tcolorBuffer.setMask( material.colorWrite );\r\n\r\n\t\t\tvar stencilWrite = material.stencilWrite;\r\n\t\t\tstencilBuffer.setTest( stencilWrite );\r\n\t\t\tif ( stencilWrite ) {\r\n\r\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\r\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\r\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setFlipSided( flipSided ) {\r\n\r\n\t\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t\tgl.frontFace( 2304 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.frontFace( 2305 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setCullFace( cullFace ) {\r\n\r\n\t\t\tif ( cullFace !== CullFaceNone ) {\r\n\r\n\t\t\t\tenable( 2884 );\r\n\r\n\t\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1029 );\r\n\r\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1028 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1032 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 2884 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentCullFace = cullFace;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setLineWidth( width ) {\r\n\r\n\t\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\r\n\r\n\t\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\r\n\r\n\t\t\tif ( polygonOffset ) {\r\n\r\n\t\t\t\tenable( 32823 );\r\n\r\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 32823 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setScissorTest( scissorTest ) {\r\n\r\n\t\t\tif ( scissorTest ) {\r\n\r\n\t\t\t\tenable( 3089 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 3089 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// texture\r\n\r\n\t\tfunction activeTexture( webglSlot ) {\r\n\r\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\r\n\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction bindTexture( webglType, webglTexture ) {\r\n\r\n\t\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t\tactiveTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\t\tboundTexture.type = webglType;\r\n\t\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction unbindTexture() {\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\r\n\r\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\r\n\r\n\t\t\t\tboundTexture.type = undefined;\r\n\t\t\t\tboundTexture.texture = undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction compressedTexImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage3D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction scissor( scissor ) {\r\n\r\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction viewport( viewport ) {\r\n\r\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tenabledCapabilities = {};\r\n\r\n\t\t\tcurrentTextureSlot = null;\r\n\t\t\tcurrentBoundTextures = {};\r\n\r\n\t\t\tcurrentProgram = null;\r\n\r\n\t\t\tcurrentBlending = null;\r\n\r\n\t\t\tcurrentFlipSided = null;\r\n\t\t\tcurrentCullFace = null;\r\n\r\n\t\t\tcolorBuffer.reset();\r\n\t\t\tdepthBuffer.reset();\r\n\t\t\tstencilBuffer.reset();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tbuffers: {\r\n\t\t\t\tcolor: colorBuffer,\r\n\t\t\t\tdepth: depthBuffer,\r\n\t\t\t\tstencil: stencilBuffer\r\n\t\t\t},\r\n\r\n\t\t\tinitAttributes: initAttributes,\r\n\t\t\tenableAttribute: enableAttribute,\r\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\r\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\r\n\t\t\tenable: enable,\r\n\t\t\tdisable: disable,\r\n\r\n\t\t\tuseProgram: useProgram,\r\n\r\n\t\t\tsetBlending: setBlending,\r\n\t\t\tsetMaterial: setMaterial,\r\n\r\n\t\t\tsetFlipSided: setFlipSided,\r\n\t\t\tsetCullFace: setCullFace,\r\n\r\n\t\t\tsetLineWidth: setLineWidth,\r\n\t\t\tsetPolygonOffset: setPolygonOffset,\r\n\r\n\t\t\tsetScissorTest: setScissorTest,\r\n\r\n\t\t\tactiveTexture: activeTexture,\r\n\t\t\tbindTexture: bindTexture,\r\n\t\t\tunbindTexture: unbindTexture,\r\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\r\n\t\t\ttexImage2D: texImage2D,\r\n\t\t\ttexImage3D: texImage3D,\r\n\r\n\t\t\tscissor: scissor,\r\n\t\t\tviewport: viewport,\r\n\r\n\t\t\treset: reset\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\t\tvar maxTextures = capabilities.maxTextures;\r\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\r\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\r\n\t\tvar maxSamples = capabilities.maxSamples;\r\n\r\n\t\tvar _videoTextures = new WeakMap();\r\n\t\tvar _canvas;\r\n\r\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\r\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\r\n\r\n\t\tvar useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\r\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\r\n\r\n\t\tfunction createCanvas( width, height ) {\r\n\r\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\r\n\r\n\t\t\treturn useOffscreenCanvas ?\r\n\t\t\t\tnew OffscreenCanvas( width, height ) :\r\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\r\n\t\t}\r\n\r\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\r\n\r\n\t\t\tvar scale = 1;\r\n\r\n\t\t\t// handle case if texture exceeds max size\r\n\r\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only perform resize if necessary\r\n\r\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\r\n\r\n\t\t\t\t// only perform resize for certain image types\r\n\r\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\r\n\r\n\t\t\t\t\tvar width = floor( scale * image.width );\r\n\t\t\t\t\tvar height = floor( scale * image.height );\r\n\r\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\r\n\r\n\t\t\t\t\t// cube textures can't reuse the same canvas\r\n\r\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\r\n\r\n\t\t\t\t\tcanvas.width = width;\r\n\t\t\t\t\tcanvas.height = height;\r\n\r\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\r\n\r\n\t\t\t\t\treturn canvas;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( 'data' in image ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn image;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\t\tif ( isWebGL2 ) { return false; }\r\n\r\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\r\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\r\n\r\n\t\t\treturn texture.generateMipmaps && supportsMips &&\r\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateMipmap( target, texture, width, height ) {\r\n\r\n\t\t\t_gl.generateMipmap( target );\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\r\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getInternalFormat( glFormat, glType ) {\r\n\r\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\r\n\r\n\t\t\tvar internalFormat = glFormat;\r\n\r\n\t\t\tif ( glFormat === 6403 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === 6407 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === 6408 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\r\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\r\n\r\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\r\n\r\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn internalFormat;\r\n\r\n\t\t}\r\n\r\n\t\t// Fallback filters for non-power-of-2 textures\r\n\r\n\t\tfunction filterFallback( f ) {\r\n\r\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\r\n\r\n\t\t\t\treturn 9728;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 9729;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction onTextureDispose( event ) {\r\n\r\n\t\t\tvar texture = event.target;\r\n\r\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\tdeallocateTexture( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\t\t_videoTextures.delete( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\t\tvar renderTarget = event.target;\r\n\r\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction deallocateTexture( texture ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\tproperties.remove( texture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\tif ( ! renderTarget ) { return; }\r\n\r\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\r\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\r\n\r\n\t\t\t\tinfo.memory.textures -= 2;\r\n\r\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tproperties.remove( renderTarget.texture );\r\n\t\t\tproperties.remove( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar textureUnits = 0;\r\n\r\n\t\tfunction resetTextureUnits() {\r\n\r\n\t\t\ttextureUnits = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction allocateTextureUnit() {\r\n\r\n\t\t\tvar textureUnit = textureUnits;\r\n\r\n\t\t\tif ( textureUnit >= maxTextures ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureUnits += 1;\r\n\r\n\t\t\treturn textureUnit;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tvar image = texture.image;\r\n\r\n\t\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\r\n\r\n\t\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTexture2DArray( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTexture3D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCube( texture, slot ) {\r\n\r\n\t\t\tif ( texture.image.length !== 6 ) { return; }\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tinitTexture( textureProperties, texture );\r\n\r\n\t\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\r\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\r\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\r\n\r\n\t\t\t\tvar mipmaps;\r\n\r\n\t\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmipmaps = texture.mipmaps;\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\t// We assume images for cube map have the same size.\r\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tvar wrappingToGL = {};\r\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\r\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\r\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\r\n\r\n\t\tvar filterToGL = {};\r\n\t\tfilterToGL[ NearestFilter ] = 9728;\r\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\r\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\r\n\t\tfilterToGL[ LinearFilter ] = 9729;\r\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\r\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\r\n\r\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\r\n\r\n\t\t\tif ( supportsMips ) {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\r\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\r\n\r\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\r\n\r\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\r\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\r\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\r\n\r\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\r\n\r\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension ) {\r\n\r\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\r\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\r\n\r\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\r\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction initTexture( textureProperties, texture ) {\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\t\tvar textureType = 3553;\r\n\r\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\r\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\r\n\r\n\t\t\tinitTexture( textureProperties, texture );\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\r\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\r\n\r\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\r\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\r\n\r\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture.isDepthTexture ) {\r\n\r\n\t\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\t\tglInternalFormat = 6402;\r\n\r\n\t\t\t\tif ( texture.type === FloatType ) {\r\n\r\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\r\n\t\t\t\t\tglInternalFormat = 36012;\r\n\r\n\t\t\t\t} else if ( isWebGL2 ) {\r\n\r\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\r\n\t\t\t\t\tglInternalFormat = 33189;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\r\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t\tglInternalFormat = 34041;\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t} else if ( texture.isDataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\r\n\r\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t} else if ( texture.isDataTexture3D ) {\r\n\r\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( 3553, texture, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\r\n\r\n\t\t}\r\n\r\n\t\t// Render targets\r\n\r\n\t\t// Setup storage for target texture and bind it to correct framebuffer\r\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\r\n\r\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\r\n\r\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\r\n\r\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( 36161, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\r\n\r\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\r\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\r\n\r\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\r\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// upload an empty depth texture with framebuffer size\r\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\r\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Setup GL resources for a non-texture depth buffer\r\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\r\n\r\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Set up GL resources for the render target\r\n\t\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\r\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\r\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t\t// Setup framebuffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\r\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\r\n\r\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( isMultiview ) {\r\n\r\n\t\t\t\t\tvar width = renderTarget.width;\r\n\t\t\t\t\tvar height = renderTarget.height;\r\n\t\t\t\t\tvar numViews = renderTarget.numViews;\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\r\n\r\n\t\t\t\t\tinfo.memory.textures += 2;\r\n\r\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\r\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\r\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\r\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\r\n\r\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\r\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\r\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\r\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\r\n\r\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\r\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\r\n\r\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\r\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\r\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\r\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\t\t\t\t\t_gl.bindTexture( 35866, null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup color buffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( 34067, null );\r\n\r\n\t\t\t} else if ( ! isMultiview ) {\r\n\r\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( 3553, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup depth and stencil buffers\r\n\r\n\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\r\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\r\n\r\n\t\t\t\tstate.bindTexture( target, webglTexture );\r\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\r\n\t\t\t\tstate.bindTexture( target, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\t\tvar width = renderTarget.width;\r\n\t\t\t\t\tvar height = renderTarget.height;\r\n\t\t\t\t\tvar mask = 16384;\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\r\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\r\n\r\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getRenderTargetSamples( renderTarget ) {\r\n\r\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\r\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateVideoTexture( texture ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\t// Check the last frame we updated the VideoTexture\r\n\r\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\r\n\r\n\t\t\t\t_videoTextures.set( texture, frame );\r\n\t\t\t\ttexture.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t\tvar warnedTexture2D = false;\r\n\t\tvar warnedTextureCube = false;\r\n\r\n\t\tfunction safeSetTexture2D( texture, slot ) {\r\n\r\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tif ( warnedTexture2D === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarnedTexture2D = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( texture, slot );\r\n\r\n\t\t}\r\n\r\n\t\tfunction safeSetTextureCube( texture, slot ) {\r\n\r\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tif ( warnedTextureCube === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarnedTextureCube = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\r\n\t\t\t// TODO: unify these code paths\r\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\r\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t// this function alone should take care of cube textures\r\n\t\t\t\tsetTextureCube( texture, slot );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\r\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\r\n\t\tthis.resetTextureUnits = resetTextureUnits;\r\n\r\n\t\tthis.setTexture2D = setTexture2D;\r\n\t\tthis.setTexture2DArray = setTexture2DArray;\r\n\t\tthis.setTexture3D = setTexture3D;\r\n\t\tthis.setTextureCube = setTextureCube;\r\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\r\n\t\tthis.setupRenderTarget = setupRenderTarget;\r\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\r\n\r\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\r\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author thespite / http://www.twitter.com/thespite\r\n\t */\r\n\r\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tfunction convert( p ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\r\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\r\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\r\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\r\n\r\n\t\t\tif ( p === ByteType ) { return 5120; }\r\n\t\t\tif ( p === ShortType ) { return 5122; }\r\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\r\n\t\t\tif ( p === IntType ) { return 5124; }\r\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\r\n\t\t\tif ( p === FloatType ) { return 5126; }\r\n\r\n\t\t\tif ( p === HalfFloatType ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\r\n\r\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\r\n\t\t\tif ( p === RGBFormat ) { return 6407; }\r\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\r\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\r\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\r\n\t\t\tif ( p === DepthFormat ) { return 6402; }\r\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\r\n\t\t\tif ( p === RedFormat ) { return 6403; }\r\n\r\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\r\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\r\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_ETC1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\r\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\t// TODO Complete?\r\n\r\n\t\t\t\t\treturn p;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === UnsignedInt248Type ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { convert: convert };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fernandojsg / http://fernandojsg.com\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.depthBuffer = false;\r\n\t\tthis.stencilBuffer = false;\r\n\r\n\t\tthis.numViews = numViews;\r\n\r\n\t}\r\n\r\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\r\n\r\n\t\tconstructor: WebGLMultiviewRenderTarget,\r\n\r\n\t\tisWebGLMultiviewRenderTarget: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.numViews = source.numViews;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetNumViews: function ( numViews ) {\r\n\r\n\t\t\tif ( this.numViews !== numViews ) {\r\n\r\n\t\t\t\tthis.numViews = numViews;\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author fernandojsg / http://fernandojsg.com\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction WebGLMultiview( renderer, gl ) {\r\n\r\n\t\tvar DEFAULT_NUMVIEWS = 2;\r\n\r\n\t\tvar extensions = renderer.extensions;\r\n\t\tvar properties = renderer.properties;\r\n\r\n\t\tvar renderTarget, currentRenderTarget;\r\n\t\tvar mat3, mat4, cameraArray, renderSize;\r\n\r\n\t\tvar available;\r\n\t\tvar maxNumViews = 0;\r\n\r\n\t\t//\r\n\r\n\t\tfunction isAvailable() {\r\n\r\n\t\t\tif ( available === undefined ) {\r\n\r\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\r\n\r\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\r\n\r\n\t\t\t\tif ( available ) {\r\n\r\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\r\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\r\n\r\n\t\t\t\t\trenderSize = new Vector2();\r\n\t\t\t\t\tmat4 = [];\r\n\t\t\t\t\tmat3 = [];\r\n\t\t\t\t\tcameraArray = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\r\n\r\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\r\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn available;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getCameraArray( camera ) {\r\n\r\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\r\n\r\n\t\t\tcameraArray[ 0 ] = camera;\r\n\r\n\t\t\treturn cameraArray;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\r\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction isMultiviewCompatible( camera ) {\r\n\r\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\r\n\r\n\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\r\n\r\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\r\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction resizeRenderTarget( camera ) {\r\n\r\n\t\t\tif ( currentRenderTarget ) {\r\n\r\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\r\n\r\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\r\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\r\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction attachCamera( camera ) {\r\n\r\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\r\n\r\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\r\n\t\t\tresizeRenderTarget( camera );\r\n\t\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\tfunction detachCamera( camera ) {\r\n\r\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t\tflush( camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction flush( camera ) {\r\n\r\n\t\t\tvar srcRenderTarget = renderTarget;\r\n\t\t\tvar numViews = srcRenderTarget.numViews;\r\n\r\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\r\n\r\n\t\t\tvar viewWidth = srcRenderTarget.width;\r\n\t\t\tvar viewHeight = srcRenderTarget.height;\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\r\n\r\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\r\n\r\n\t\t\t\t\tvar x1 = viewport.x;\r\n\t\t\t\t\tvar y1 = viewport.y;\r\n\t\t\t\t\tvar x2 = x1 + viewport.z;\r\n\t\t\t\t\tvar y2 = y1 + viewport.w;\r\n\r\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\r\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\r\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.isAvailable = isAvailable;\r\n\t\tthis.attachCamera = attachCamera;\r\n\t\tthis.detachCamera = detachCamera;\r\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\r\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\r\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Group() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Group';\r\n\r\n\t}\r\n\r\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Group,\r\n\r\n\t\tisGroup: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ArrayCamera( array ) {\r\n\r\n\t\tPerspectiveCamera.call( this );\r\n\r\n\t\tthis.cameras = array || [];\r\n\r\n\t}\r\n\r\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\r\n\r\n\t\tconstructor: ArrayCamera,\r\n\r\n\t\tisArrayCamera: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author jsantell / https://www.jsantell.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar cameraLPos = new Vector3();\r\n\tvar cameraRPos = new Vector3();\r\n\r\n\t/**\r\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\r\n\t * the cameras' projection and world matrices have already been set.\r\n\t * And that near and far planes are identical for both cameras.\r\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\r\n\t */\r\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\r\n\r\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\r\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\r\n\r\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\r\n\r\n\t\tvar projL = cameraL.projectionMatrix.elements;\r\n\t\tvar projR = cameraR.projectionMatrix.elements;\r\n\r\n\t\t// VR systems will have identical far and near planes, and\r\n\t\t// most likely identical top and bottom frustum extents.\r\n\t\t// Use the left camera for these values.\r\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\r\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\r\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\r\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\r\n\r\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\r\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\r\n\t\tvar left = near * leftFov;\r\n\t\tvar right = near * rightFov;\r\n\r\n\t\t// Calculate the new camera's position offset from the\r\n\t\t// left camera. xOffset should be roughly half `ipd`.\r\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\r\n\t\tvar xOffset = zOffset * - leftFov;\r\n\r\n\t\t// TODO: Better way to apply this offset?\r\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\r\n\t\tcamera.translateX( xOffset );\r\n\t\tcamera.translateZ( zOffset );\r\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t// Find the union of the frustum values of the cameras and scale\r\n\t\t// the values so that the near plane's position does not change in world space,\r\n\t\t// although must now be relative to the new union camera.\r\n\t\tvar near2 = near + zOffset;\r\n\t\tvar far2 = far + zOffset;\r\n\t\tvar left2 = left - xOffset;\r\n\t\tvar right2 = right + ( ipd - xOffset );\r\n\t\tvar top2 = topFov * far / far2 * near2;\r\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\r\n\r\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebVRManager( renderer ) {\r\n\r\n\t\tvar renderWidth, renderHeight;\r\n\t\tvar scope = this;\r\n\r\n\t\tvar device = null;\r\n\t\tvar frameData = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar standingMatrix = new Matrix4();\r\n\t\tvar standingMatrixInverse = new Matrix4();\r\n\r\n\t\tvar framebufferScaleFactor = 1.0;\r\n\r\n\t\tvar referenceSpaceType = 'local-floor';\r\n\r\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\r\n\r\n\t\t\tframeData = new window.VRFrameData();\r\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\r\n\r\n\t\t}\r\n\r\n\t\tvar matrixWorldInverse = new Matrix4();\r\n\t\tvar tempQuaternion = new Quaternion();\r\n\t\tvar tempPosition = new Vector3();\r\n\r\n\t\tvar tempCamera = new PerspectiveCamera();\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.viewport = new Vector4();\r\n\t\tcameraL.layers.enable( 1 );\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.viewport = new Vector4();\r\n\t\tcameraR.layers.enable( 2 );\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn device !== null && device.isPresenting === true;\r\n\r\n\t\t}\r\n\r\n\t\tvar currentSize = new Vector2(), currentPixelRatio;\r\n\r\n\t\tfunction onVRDisplayPresentChange() {\r\n\r\n\t\t\tif ( isPresenting() ) {\r\n\r\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\r\n\t\t\t\trenderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;\r\n\t\t\t\trenderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\r\n\r\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\r\n\t\t\t\trenderer.getSize( currentSize );\r\n\r\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );\r\n\r\n\t\t\t\tcameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );\r\n\t\t\t\tcameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );\r\n\r\n\t\t\t\tanimation.start();\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( scope.enabled ) {\r\n\r\n\t\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimation.stop();\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar triggers = [];\r\n\t\tvar grips = [];\r\n\r\n\t\tfunction findGamepad( id ) {\r\n\r\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\r\n\r\n\t\t\tfor ( var i = 0, l = gamepads.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar gamepad = gamepads[ i ];\r\n\r\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\r\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\r\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'HTC Vive Focus' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\r\n\r\n\t\t\t\t\tvar hand = gamepad.hand;\r\n\r\n\t\t\t\t\tif ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }\r\n\t\t\t\t\tif ( id === 1 && ( hand === 'left' ) ) { return gamepad; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateControllers() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar gamepad = findGamepad( i );\r\n\r\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\r\n\r\n\t\t\t\t\tif ( gamepad.pose === null ) { return; }\r\n\r\n\t\t\t\t\t// Pose\r\n\r\n\t\t\t\t\tvar pose = gamepad.pose;\r\n\r\n\t\t\t\t\tif ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }\r\n\r\n\t\t\t\t\tif ( pose.position !== null ) { controller.position.fromArray( pose.position ); }\r\n\t\t\t\t\tif ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }\r\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\r\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t// Trigger\r\n\r\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\r\n\r\n\t\t\t\t\tif ( triggers[ i ] === undefined ) { triggers[ i ] = false; }\r\n\r\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Grip\r\n\t\t\t\t\tbuttonId = 2;\r\n\r\n\t\t\t\t\tif ( grips[ i ] === undefined ) { grips[ i ] = false; }\r\n\r\n\t\t\t\t\t// Skip if the grip button doesn't exist on this controller\r\n\t\t\t\t\tif ( gamepad.buttons[ buttonId ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\t\tgrips[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\t\tif ( grips[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezestart' } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezeend' } );\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeeze' } );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateViewportFromBounds( viewport, bounds ) {\r\n\r\n\t\t\tif ( bounds !== null && bounds.length === 4 ) {\r\n\r\n\t\t\t\tviewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\treturn device;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function ( value ) {\r\n\r\n\t\t\tif ( value !== undefined ) { device = value; }\r\n\r\n\t\t\tanimation.setContext( value );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\r\n\r\n\t\t\tframebufferScaleFactor = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tvar userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;\r\n\r\n\t\t\tdevice.depthNear = camera.near;\r\n\t\t\tdevice.depthFar = camera.far;\r\n\r\n\t\t\tdevice.getFrameData( frameData );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\r\n\r\n\t\t\t\tvar stageParameters = device.stageParameters;\r\n\r\n\t\t\t\tif ( stageParameters ) {\r\n\r\n\t\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar pose = frameData.pose;\r\n\r\n\t\t\ttempCamera.matrix.copy( standingMatrix );\r\n\t\t\ttempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );\r\n\r\n\t\t\tif ( pose.orientation !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\r\n\t\t\t\ttempCamera.quaternion.multiply( tempQuaternion );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pose.position !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\r\n\t\t\t\ttempPosition.fromArray( pose.position );\r\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\r\n\t\t\t\ttempCamera.position.add( tempPosition );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttempCamera.updateMatrixWorld();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcamera.matrixWorld.copy( tempCamera.matrixWorld );\r\n\r\n\t\t\tvar children = camera.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcameraL.near = camera.near;\r\n\t\t\tcameraR.near = camera.near;\r\n\r\n\t\t\tcameraL.far = camera.far;\r\n\t\t\tcameraR.far = camera.far;\r\n\r\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\r\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\r\n\r\n\t\t\t// TODO (mrdoob) Double check this code\r\n\r\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\r\n\r\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = camera.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// envMap and Mirror needs camera.matrixWorld\r\n\r\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\r\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\r\n\r\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\r\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\r\n\r\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar layers = device.getLayers();\r\n\r\n\t\t\tif ( layers.length ) {\r\n\r\n\t\t\t\tvar layer = layers[ 0 ];\r\n\r\n\t\t\t\tupdateViewportFromBounds( cameraL.viewport, layer.leftBounds );\r\n\t\t\t\tupdateViewportFromBounds( cameraR.viewport, layer.rightBounds );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateControllers();\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\treturn standingMatrix;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tanimation.setAnimationLoop( callback );\r\n\r\n\t\t\tif ( isPresenting() ) { animation.start(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {\r\n\r\n\t\t\tif ( isPresenting() ) { device.submitFrame(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\tif ( typeof window !== 'undefined' ) {\r\n\r\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.setFrameOfReferenceType = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( WebVRManager.prototype, EventDispatcher.prototype );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebXRManager( renderer, gl ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar session = null;\r\n\r\n\t\t// var framebufferScaleFactor = 1.0;\r\n\r\n\t\tvar referenceSpace = null;\r\n\t\tvar referenceSpaceType = 'local-floor';\r\n\r\n\t\tvar pose = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar sortedInputSources = [];\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn session !== null && referenceSpace !== null;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.layers.enable( 1 );\r\n\t\tcameraL.viewport = new Vector4();\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.layers.enable( 2 );\r\n\t\tcameraR.viewport = new Vector4();\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tfunction onSessionEvent( event ) {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tif ( sortedInputSources[ i ] === event.inputSource ) {\r\n\r\n\t\t\t\t\tcontrollers[ i ].dispatchEvent( { type: event.type } );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction onSessionEnd() {\r\n\r\n\t\t\trenderer.setFramebuffer( null );\r\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\r\n\t\t\tanimation.stop();\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRequestReferenceSpace( value ) {\r\n\r\n\t\t\treferenceSpace = value;\r\n\r\n\t\t\tanimation.setContext( session );\r\n\t\t\tanimation.start();\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\r\n\r\n\t\t\t// framebufferScaleFactor = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSession = function () {\r\n\r\n\t\t\treturn session;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSession = function ( value ) {\r\n\r\n\t\t\tsession = value;\r\n\r\n\t\t\tif ( session !== null ) {\r\n\r\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\r\n\r\n\t\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\t\tsession.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );\r\n\r\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\r\n\r\n\t\t\t\tupdateInputSources();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction updateInputSources() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tsortedInputSources[ i ] = findInputSource( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction findInputSource( id ) {\r\n\r\n\t\t\tvar inputSources = session.inputSources;\r\n\r\n\t\t\tfor ( var i = 0; i < inputSources.length; i ++ ) {\r\n\r\n\t\t\t\tvar inputSource = inputSources[ i ];\r\n\t\t\t\tvar handedness = inputSource.handedness;\r\n\r\n\t\t\t\tif ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }\r\n\t\t\t\tif ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction updateCamera( camera, parent ) {\r\n\r\n\t\t\tif ( parent === null ) {\r\n\r\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tvar parent = camera.parent;\r\n\t\t\tvar cameras = cameraVR.cameras;\r\n\r\n\t\t\tupdateCamera( cameraVR, parent );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tupdateCamera( cameras[ i ], parent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update camera and its children\r\n\r\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\r\n\r\n\t\t\tvar children = camera.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tpose = frame.getViewerPose( referenceSpace );\r\n\r\n\t\t\tif ( pose !== null ) {\r\n\r\n\t\t\t\tvar views = pose.views;\r\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\r\n\r\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\r\n\r\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar view = views[ i ];\r\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\r\n\t\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\r\n\r\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\r\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\r\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\r\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\r\n\r\n\t\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar inputSource = sortedInputSources[ i ];\r\n\r\n\t\t\t\tif ( inputSource ) {\r\n\r\n\t\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\r\n\r\n\t\t\t\t\tif ( inputPose !== null ) {\r\n\r\n\t\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\r\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\r\n\t\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\r\n\t\t\treturn new Matrix4();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFrameOfReferenceType = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {};\r\n\r\n\t}\r\n\r\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLRenderer( parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\r\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\r\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\r\n\r\n\t\tvar currentRenderList = null;\r\n\t\tvar currentRenderState = null;\r\n\r\n\t\t// public properties\r\n\r\n\t\tthis.domElement = _canvas;\r\n\r\n\t\t// Debug configuration container\r\n\t\tthis.debug = {\r\n\r\n\t\t\t/**\r\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tcheckShaderErrors: true\r\n\t\t};\r\n\r\n\t\t// clearing\r\n\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\r\n\t\t// scene graph\r\n\r\n\t\tthis.sortObjects = true;\r\n\r\n\t\t// user-defined clipping\r\n\r\n\t\tthis.clippingPlanes = [];\r\n\t\tthis.localClippingEnabled = false;\r\n\r\n\t\t// physically based shading\r\n\r\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\t\tthis.gammaInput = false;\r\n\t\tthis.gammaOutput = false;\r\n\r\n\t\t// physical lights\r\n\r\n\t\tthis.physicallyCorrectLights = false;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tthis.toneMapping = LinearToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\t\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tthis.maxMorphTargets = 8;\r\n\t\tthis.maxMorphNormals = 4;\r\n\r\n\t\t// internal properties\r\n\r\n\t\tvar _this = this,\r\n\r\n\t\t\t_isContextLost = false,\r\n\r\n\t\t\t// internal state cache\r\n\r\n\t\t\t_framebuffer = null,\r\n\r\n\t\t\t_currentActiveCubeFace = 0,\r\n\t\t\t_currentActiveMipmapLevel = 0,\r\n\t\t\t_currentRenderTarget = null,\r\n\t\t\t_currentFramebuffer = null,\r\n\t\t\t_currentMaterialId = - 1,\r\n\r\n\t\t\t// geometry and program caching\r\n\r\n\t\t\t_currentGeometryProgram = {\r\n\t\t\t\tgeometry: null,\r\n\t\t\t\tprogram: null,\r\n\t\t\t\twireframe: false\r\n\t\t\t},\r\n\r\n\t\t\t_currentCamera = null,\r\n\t\t\t_currentArrayCamera = null,\r\n\r\n\t\t\t_currentViewport = new Vector4(),\r\n\t\t\t_currentScissor = new Vector4(),\r\n\t\t\t_currentScissorTest = null,\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_width = _canvas.width,\r\n\t\t\t_height = _canvas.height,\r\n\r\n\t\t\t_pixelRatio = 1,\r\n\r\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissorTest = false,\r\n\r\n\t\t\t// frustum\r\n\r\n\t\t\t_frustum = new Frustum(),\r\n\r\n\t\t\t// clipping\r\n\r\n\t\t\t_clipping = new WebGLClipping(),\r\n\t\t\t_clippingEnabled = false,\r\n\t\t\t_localClippingEnabled = false,\r\n\r\n\t\t\t// camera matrices cache\r\n\r\n\t\t\t_projScreenMatrix = new Matrix4(),\r\n\r\n\t\t\t_vector3 = new Vector3();\r\n\r\n\t\tfunction getTargetPixelRatio() {\r\n\r\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t\t}\r\n\r\n\t\t// initialize\r\n\r\n\t\tvar _gl;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tvar contextAttributes = {\r\n\t\t\t\talpha: _alpha,\r\n\t\t\t\tdepth: _depth,\r\n\t\t\t\tstencil: _stencil,\r\n\t\t\t\tantialias: _antialias,\r\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\r\n\t\t\t\tpowerPreference: _powerPreference,\r\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\r\n\t\t\t\txrCompatible: true\r\n\t\t\t};\r\n\r\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\r\n\r\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\r\n\r\n\t\t\tif ( _gl === null ) {\r\n\r\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\r\n\t\t\tthrow error;\r\n\r\n\t\t}\r\n\r\n\t\tvar extensions, capabilities, state, info;\r\n\t\tvar properties, textures, attributes, geometries, objects;\r\n\t\tvar programCache, renderLists, renderStates;\r\n\r\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\r\n\r\n\t\tvar utils;\r\n\r\n\t\tfunction initGLContext() {\r\n\r\n\t\t\textensions = new WebGLExtensions( _gl );\r\n\r\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\t\t\tif ( capabilities.isWebGL2 === false ) {\r\n\r\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\r\n\t\t\t\textensions.get( 'OES_texture_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\r\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\r\n\t\t\t\textensions.get( 'OES_element_index_uint' );\r\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\textensions.get( 'OES_texture_float_linear' );\r\n\r\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\r\n\r\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t\tinfo = new WebGLInfo( _gl );\r\n\t\t\tproperties = new WebGLProperties();\r\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\r\n\t\t\tattributes = new WebGLAttributes( _gl );\r\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\r\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\r\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\r\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\r\n\t\t\trenderLists = new WebGLRenderLists();\r\n\t\t\trenderStates = new WebGLRenderStates();\r\n\r\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\r\n\r\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\r\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\r\n\r\n\t\t\tinfo.programs = programCache.programs;\r\n\r\n\t\t\t_this.capabilities = capabilities;\r\n\t\t\t_this.extensions = extensions;\r\n\t\t\t_this.properties = properties;\r\n\t\t\t_this.renderLists = renderLists;\r\n\t\t\t_this.state = state;\r\n\t\t\t_this.info = info;\r\n\r\n\t\t}\r\n\r\n\t\tinitGLContext();\r\n\r\n\t\t// vr\r\n\r\n\t\tvar vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );\r\n\r\n\t\tthis.vr = vr;\r\n\r\n\t\t// Multiview\r\n\r\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\r\n\r\n\t\t// shadow map\r\n\r\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\r\n\r\n\t\tthis.shadowMap = shadowMap;\r\n\r\n\t\t// API\r\n\r\n\t\tthis.getContext = function () {\r\n\r\n\t\t\treturn _gl;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getContextAttributes = function () {\r\n\r\n\t\t\treturn _gl.getContextAttributes();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextLoss = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) { extension.loseContext(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextRestore = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) { extension.restoreContext(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.getPixelRatio = function () {\r\n\r\n\t\t\treturn _pixelRatio;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\t\tif ( value === undefined ) { return; }\r\n\r\n\t\t\t_pixelRatio = value;\r\n\r\n\t\t\tthis.setSize( _width, _height, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSize = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( _width, _height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\r\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\r\n\r\n\t\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDrawingBufferSize = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_pixelRatio = pixelRatio;\r\n\r\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\r\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCurrentViewport = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( _currentViewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getViewport = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _viewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_viewport.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissor = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _scissor );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_scissor.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissorTest = function () {\r\n\r\n\t\t\treturn _scissorTest;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t\t};\r\n\r\n\t\t// Clearing\r\n\r\n\t\tthis.getClearColor = function () {\r\n\r\n\t\t\treturn background.getClearColor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearColor = function () {\r\n\r\n\t\t\tbackground.setClearColor.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getClearAlpha = function () {\r\n\r\n\t\t\treturn background.getClearAlpha();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearAlpha = function () {\r\n\r\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\t\tvar bits = 0;\r\n\r\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\r\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\r\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\r\n\r\n\t\t\t_gl.clear( bits );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearColor = function () {\r\n\r\n\t\t\tthis.clear( true, false, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearDepth = function () {\r\n\r\n\t\t\tthis.clear( false, true, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearStencil = function () {\r\n\r\n\t\t\tthis.clear( false, false, true );\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\trenderLists.dispose();\r\n\t\t\trenderStates.dispose();\r\n\t\t\tproperties.dispose();\r\n\t\t\tobjects.dispose();\r\n\r\n\t\t\tvr.dispose();\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t};\r\n\r\n\t\t// Events\r\n\r\n\t\tfunction onContextLost( event ) {\r\n\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\r\n\r\n\t\t\t_isContextLost = true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onContextRestore( /* event */ ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\r\n\r\n\t\t\t_isContextLost = false;\r\n\r\n\t\t\tinitGLContext();\r\n\r\n\t\t}\r\n\r\n\t\tfunction onMaterialDispose( event ) {\r\n\r\n\t\t\tvar material = event.target;\r\n\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\tdeallocateMaterial( material );\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer deallocation\r\n\r\n\t\tfunction deallocateMaterial( material ) {\r\n\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\tproperties.remove( material );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\t\tmaterial.program = undefined;\r\n\r\n\t\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer rendering\r\n\r\n\t\tfunction renderObjectImmediate( object, program ) {\r\n\r\n\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t_this.renderBufferImmediate( object, program );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderBufferImmediate = function ( object, program ) {\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar buffers = properties.get( object );\r\n\r\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\r\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\r\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasUvs ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\r\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasColors ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\r\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t\t_gl.drawArrays( 4, 0, object.count );\r\n\r\n\t\t\tobject.count = 0;\r\n\r\n\t\t};\r\n\r\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\r\n\r\n\t\t\tstate.setMaterial( material, frontFaceCW );\r\n\r\n\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\tvar updateBuffers = false;\r\n\r\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\r\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\r\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\r\n\t\t\t\t_currentGeometryProgram.program = program.id;\r\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.morphTargetInfluences ) {\r\n\r\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\r\n\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar position = geometry.attributes.position;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( index !== null && index.count === 0 ) { return; }\r\n\t\t\tif ( position === undefined || position.count === 0 ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar rangeFactor = 1;\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\r\n\t\t\t\trangeFactor = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\t\t\tvar renderer = bufferRenderer;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattribute = attributes.get( index );\r\n\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar dataCount = Infinity;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdataCount = index.count;\r\n\r\n\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\tdataCount = position.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\r\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\r\n\r\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\r\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\r\n\r\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\r\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t\tif ( drawCount === 0 ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\t\trenderer.setMode( 1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\t\tcase TrianglesDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 4 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleStripDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 5 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleFanDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 6 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isLine ) {\r\n\r\n\t\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\r\n\r\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\t\tif ( object.isLineSegments ) {\r\n\r\n\t\t\t\t\trenderer.setMode( 1 );\r\n\r\n\t\t\t\t} else if ( object.isLineLoop ) {\r\n\r\n\t\t\t\t\trenderer.setMode( 2 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderer.setMode( 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints ) {\r\n\r\n\t\t\t\trenderer.setMode( 0 );\r\n\r\n\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\trenderer.setMode( 4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\r\n\r\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\r\n\r\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\r\n\r\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\r\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\r\n\r\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// Compile\r\n\r\n\t\tthis.compile = function ( scene, camera ) {\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.material ) {\r\n\r\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) { return; }\r\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\t\t\tvr.setAnimationLoop( callback );\r\n\r\n\t\t\tanimation.start();\r\n\r\n\t\t};\r\n\r\n\t\t// Rendering\r\n\r\n\t\tthis.render = function ( scene, camera ) {\r\n\r\n\t\t\tvar renderTarget, forceClear;\r\n\r\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\r\n\t\t\t\trenderTarget = arguments[ 2 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\r\n\t\t\t\tforceClear = arguments[ 3 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _isContextLost ) { return; }\r\n\r\n\t\t\t// reset caching for this frame\r\n\r\n\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t_currentGeometryProgram.wireframe = false;\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\r\n\r\n\t\t\tif ( vr.enabled && vr.isPresenting() ) {\r\n\r\n\t\t\t\tcamera = vr.getCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\r\n\r\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\r\n\t\t\tcurrentRenderList.init();\r\n\r\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\r\n\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\tcurrentRenderList.sort();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\r\n\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\r\n\r\n\t\t\tif ( renderTarget !== undefined ) {\r\n\r\n\t\t\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\r\n\r\n\t\t\t\tmultiview.attachCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\r\n\r\n\t\t\t// render scene\r\n\r\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\r\n\t\t\tvar transparentObjects = currentRenderList.transparent;\r\n\r\n\t\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\r\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\r\n\r\n\t\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tscene.onAfterRender( _this, scene, camera );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _currentRenderTarget !== null ) {\r\n\r\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\r\n\r\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\r\n\r\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\t\tstate.buffers.depth.setTest( true );\r\n\t\t\tstate.buffers.depth.setMask( true );\r\n\t\t\tstate.buffers.color.setMask( true );\r\n\r\n\t\t\tstate.setPolygonOffset( false );\r\n\r\n\t\t\tif ( vr.enabled ) {\r\n\r\n\t\t\t\tif ( multiview.isAvailable() ) {\r\n\r\n\t\t\t\t\tmultiview.detachCamera( camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvr.submitFrame();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// _gl.finish();\r\n\r\n\t\t\tcurrentRenderList = null;\r\n\t\t\tcurrentRenderState = null;\r\n\r\n\t\t};\r\n\r\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\r\n\r\n\t\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible ) {\r\n\r\n\t\t\t\tif ( object.isGroup ) {\r\n\r\n\t\t\t\t\tgroupOrder = object.renderOrder;\r\n\r\n\t\t\t\t} else if ( object.isLOD ) {\r\n\r\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\r\n\r\n\t\t\t\t} else if ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\t\t\t\t// update skeleton only once in a frame\r\n\r\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\r\n\r\n\t\t\t\t\t\t\tobject.skeleton.update();\r\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\r\n\r\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\t\tvar object = renderItem.object;\r\n\t\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\t\t_currentArrayCamera = camera;\r\n\r\n\t\t\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\r\n\r\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\r\n\r\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\r\n\r\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_currentArrayCamera = null;\r\n\r\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\r\n\r\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\tstate.setMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t\t_currentGeometryProgram.wireframe = false;\r\n\r\n\t\t\t\trenderObjectImmediate( object, program );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tvar lightsStateVersion = lights.state.version;\r\n\r\n\t\t\tvar parameters = programCache.getParameters(\r\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\r\n\r\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( material, parameters );\r\n\r\n\t\t\tvar program = materialProperties.program;\r\n\t\t\tvar programChange = true;\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\t// new material\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\r\n\r\n\t\t\t\t// changed glsl or parameters\r\n\t\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\r\n\r\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t\t// same glsl and uniform list\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// only rebuild uniform list\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( programChange ) {\r\n\r\n\t\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\r\n\r\n\t\t\t\t// Computing cache key again as onBeforeCompile may have changed the shaders\r\n\t\t\t\tprogramCacheKey = programCache.getProgramCacheKey( material, parameters );\r\n\r\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );\r\n\r\n\t\t\t\tmaterialProperties.program = program;\r\n\t\t\t\tmaterial.program = program;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( ! material.isShaderMaterial &&\r\n\t\t\t\t! material.isRawShaderMaterial ||\r\n\t\t\t\tmaterial.clipping === true ) {\r\n\r\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\r\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\r\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialProperties.fog = fog;\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\r\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\r\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\r\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\r\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\r\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\r\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\r\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\r\n\r\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\r\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\r\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\r\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\r\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\r\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\r\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\r\n\t\t\t\tuniformsList =\r\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\r\n\r\n\t\t\tmaterialProperties.uniformsList = uniformsList;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t\ttextures.resetTextureUnits();\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\r\n\t\t\tif ( _clippingEnabled ) {\r\n\r\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\r\n\r\n\t\t\t\t\tvar useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t\t_clipping.setState(\r\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\r\n\t\t\t\t\t\tcamera, materialProperties, useCache );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.version === materialProperties.__version ) {\r\n\r\n\t\t\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\r\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.version !== materialProperties.__version ) {\r\n\r\n\t\t\t\tinitMaterial( material, fog, object );\r\n\t\t\t\tmaterialProperties.__version = material.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar refreshProgram = false;\r\n\t\t\tvar refreshMaterial = false;\r\n\t\t\tvar refreshLights = false;\r\n\r\n\t\t\tvar program = materialProperties.program,\r\n\t\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( state.useProgram( program.program ) ) {\r\n\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\t\trefreshMaterial = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\r\n\r\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _currentCamera !== camera ) {\r\n\r\n\t\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// load material specific uniforms\r\n\t\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.envMap ) {\r\n\r\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\t\tuCamPos.setValue( _gl,\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.skinning ) {\r\n\r\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\t\tif ( material.skinning ) {\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\r\n\r\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\r\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\r\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\r\n\r\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\r\n\r\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\r\n\r\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\r\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\r\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\r\n\r\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\r\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\r\n\r\n\t\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t\t// values\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isPointsMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isShadowMaterial ) {\r\n\r\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// RectAreaLight Texture\r\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\r\n\r\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\r\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\r\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// common matrices\r\n\r\n\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t}\r\n\r\n\t\t// Uniforms (refresh uniforms objects)\r\n\r\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\r\n\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t\tif ( material.color ) {\r\n\r\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissive ) {\r\n\r\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.specularMap ) {\r\n\r\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\tuniforms.envMap.value = material.envMap;\r\n\r\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\r\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\r\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\r\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\r\n\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\r\n\r\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.lightMap ) {\r\n\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.aoMap ) {\r\n\r\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. specular map\r\n\t\t\t// 3. normal map\r\n\t\t\t// 4. bump map\r\n\t\t\t// 5. alpha map\r\n\t\t\t// 6. emissive map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\t// backwards compatibility\r\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLine( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDash( uniforms, material ) {\r\n\r\n\t\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\t\tuniforms.scale.value = material.scale;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\t\tuniforms.scale.value = _height * 0.5;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. alpha map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.rotation.value = material.rotation;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. alpha map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\r\n\r\n\t\t\tuniforms.fogColor.value.copy( fog.color );\r\n\r\n\t\t\tif ( fog.isFog ) {\r\n\r\n\t\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t\t} else if ( fog.isFogExp2 ) {\r\n\r\n\t\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\r\n\r\n\t\t\tuniforms.specular.value.copy( material.specular );\r\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsToon( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsPhong( uniforms, material );\r\n\r\n\t\t\tif ( material.gradientMap ) {\r\n\r\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\r\n\r\n\t\t\tuniforms.roughness.value = material.roughness;\r\n\t\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\r\n\r\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\r\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\r\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\r\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\r\n\r\n\t\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.transparency.value = material.transparency;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\r\n\r\n\t\t\tif ( material.matcap ) {\r\n\r\n\t\t\t\tuniforms.matcap.value = material.matcap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\r\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\r\n\t\t\tuniforms.farDistance.value = material.farDistance;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\r\n\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\t\t\tuniforms.lightProbe.needsUpdate = value;\r\n\r\n\t\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction materialNeedsLights( material ) {\r\n\r\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshPhongMaterial ||\r\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\r\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\t\tthis.setFramebuffer = function ( value ) {\r\n\r\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\r\n\r\n\t\t\t_framebuffer = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveCubeFace = function () {\r\n\r\n\t\t\treturn _currentActiveCubeFace;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveMipmapLevel = function () {\r\n\r\n\t\t\treturn _currentActiveMipmapLevel;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getRenderTarget = function () {\r\n\r\n\t\t\treturn _currentRenderTarget;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\r\n\r\n\t\t\t_currentRenderTarget = renderTarget;\r\n\t\t\t_currentActiveCubeFace = activeCubeFace;\r\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\r\n\r\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = _framebuffer;\r\n\t\t\tvar isCube = false;\r\n\r\n\t\t\tif ( renderTarget ) {\r\n\r\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\r\n\t\t\t\t\tisCube = true;\r\n\r\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\r\n\r\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\t\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport );\r\n\t\t\tstate.scissor( _currentScissor );\r\n\t\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\r\n\r\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {\r\n\r\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( framebuffer ) {\r\n\r\n\t\t\t\tvar restore = false;\r\n\r\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\r\n\t\t\t\t\trestore = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar texture = renderTarget.texture;\r\n\t\t\t\t\tvar textureFormat = texture.format;\r\n\t\t\t\t\tvar textureType = texture.type;\r\n\r\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\r\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\r\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\r\n\r\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} finally {\r\n\r\n\t\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\r\n\r\n\t\t\tif ( level === undefined ) { level = 0; }\r\n\r\n\t\t\tvar levelScale = Math.pow( 2, - level );\r\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\r\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\r\n\t\t\tvar glFormat = utils.convert( texture.format );\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\r\n\r\n\t\t\tvar width = srcTexture.image.width;\r\n\t\t\tvar height = srcTexture.image.height;\r\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\r\n\t\t\tvar glType = utils.convert( dstTexture.type );\r\n\r\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\r\n\r\n\t\t\tif ( srcTexture.isDataTexture ) {\r\n\r\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.initTexture = function ( texture ) {\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction FogExp2( color, density ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n\t}\r\n\r\n\tObject.assign( FogExp2.prototype, {\r\n\r\n\t\tisFogExp2: true,\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new FogExp2( this.color, this.density );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( /* meta */ ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'FogExp2',\r\n\t\t\t\tcolor: this.color.getHex(),\r\n\t\t\t\tdensity: this.density\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Fog( color, near, far ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n\t}\r\n\r\n\tObject.assign( Fog.prototype, {\r\n\r\n\t\tisFog: true,\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Fog( this.color, this.near, this.far );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( /* meta */ ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'Fog',\r\n\t\t\t\tcolor: this.color.getHex(),\r\n\t\t\t\tnear: this.near,\r\n\t\t\t\tfar: this.far\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBuffer( array, stride ) {\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\r\n\t\tisInterleavedBuffer: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetUsage: function ( value ) {\r\n\r\n\t\t\tthis.usage = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.stride = source.stride;\r\n\t\t\tthis.usage = source.usage;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.stride;\r\n\t\t\tindex2 *= attribute.stride;\r\n\r\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\r\n\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tcount: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tarray: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tisInterleavedBufferAttribute: true,\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *  rotation: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction SpriteMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'SpriteMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\r\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\r\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\r\n\r\n\tSpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar _geometry;\r\n\r\n\tvar _intersectPoint = new Vector3();\r\n\tvar _worldScale = new Vector3();\r\n\tvar _mvPosition = new Vector3();\r\n\r\n\tvar _alignedPosition = new Vector2();\r\n\tvar _rotatedPosition = new Vector2();\r\n\tvar _viewWorldMatrix = new Matrix4();\r\n\r\n\tvar _vA$1 = new Vector3();\r\n\tvar _vB$1 = new Vector3();\r\n\tvar _vC$1 = new Vector3();\r\n\r\n\tvar _uvA$1 = new Vector2();\r\n\tvar _uvB$1 = new Vector2();\r\n\tvar _uvC$1 = new Vector2();\r\n\r\n\tfunction Sprite( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( _geometry === undefined ) {\r\n\r\n\t\t\t_geometry = new BufferGeometry();\r\n\r\n\t\t\tvar float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = _geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Sprite,\r\n\r\n\t\tisSprite: true,\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tif ( raycaster.camera === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\r\n\r\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\r\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\r\n\r\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\r\n\r\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rotation = this.material.rotation;\r\n\t\t\tvar sin, cos;\r\n\t\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\t\tcos = Math.cos( rotation );\r\n\t\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\r\n\t\t\t_uvA$1.set( 0, 0 );\r\n\t\t\t_uvB$1.set( 1, 0 );\r\n\t\t\t_uvC$1.set( 1, 1 );\r\n\r\n\t\t\t// check first triangle\r\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\r\n\r\n\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t// check second triangle\r\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\t\t_uvB$1.set( 0, 1 );\r\n\r\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\r\n\t\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: _intersectPoint.clone(),\r\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.material ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t} );\r\n\r\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t\t// compute position in camera space\r\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t\t// to check if rotation is not zero\r\n\t\tif ( sin !== undefined ) {\r\n\r\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\r\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_rotatedPosition.copy( _alignedPosition );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvertexPosition.copy( mvPosition );\r\n\t\tvertexPosition.x += _rotatedPosition.x;\r\n\t\tvertexPosition.y += _rotatedPosition.y;\r\n\r\n\t\t// transform to world space\r\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _v1$4 = new Vector3();\r\n\tvar _v2$2 = new Vector3();\r\n\r\n\tfunction LOD() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'LOD';\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t}\r\n\r\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: LOD,\r\n\r\n\t\tisLOD: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\t\tvar levels = source.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddLevel: function ( object, distance ) {\r\n\r\n\t\t\tif ( distance === undefined ) { distance = 0; }\r\n\r\n\t\t\tdistance = Math.abs( distance );\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectForDistance: function ( distance ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn levels[ i - 1 ].object;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\r\n\r\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: function ( camera ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\r\n\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\r\n\r\n\t\t\tdata.object.levels = [];\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tdata.object.levels.push( {\r\n\t\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\t\tdistance: level.distance\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction SkinnedMesh( geometry, material ) {\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'SkinnedMesh';\r\n\r\n\t\tthis.bindMode = 'attached';\r\n\t\tthis.bindMatrix = new Matrix4();\r\n\t\tthis.bindMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: SkinnedMesh,\r\n\r\n\t\tisSkinnedMesh: true,\r\n\r\n\t\tbind: function ( skeleton, bindMatrix ) {\r\n\r\n\t\t\tthis.skeleton = skeleton;\r\n\r\n\t\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tthis.skeleton.pose();\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeSkinWeights: function () {\r\n\r\n\t\t\tvar vector = new Vector4();\r\n\r\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvector.x = skinWeight.getX( i );\r\n\t\t\t\tvector.y = skinWeight.getY( i );\r\n\t\t\t\tvector.z = skinWeight.getZ( i );\r\n\t\t\t\tvector.w = skinWeight.getW( i );\r\n\r\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tvector.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.bindMode === 'attached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t\t} else if ( this.bindMode === 'detached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author michael guerrero / http://realitymeltdown.com\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tvar _offsetMatrix = new Matrix4();\r\n\tvar _identityMatrix = new Matrix4();\r\n\r\n\tfunction Skeleton( bones, boneInverses ) {\r\n\r\n\t\t// copy the bone array\r\n\r\n\t\tbones = bones || [];\r\n\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\r\n\r\n\t\tthis.frame = - 1;\r\n\r\n\t\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\t\tif ( boneInverses === undefined ) {\r\n\r\n\t\t\tthis.calculateInverses();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\r\n\r\n\t\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Skeleton.prototype, {\r\n\r\n\t\tcalculateInverses: function () {\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar inverse = new Matrix4();\r\n\r\n\t\t\t\tif ( this.bones[ i ] ) {\r\n\r\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tvar bone, i, il;\r\n\r\n\t\t\t// recover the bind-time world matrices\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar bones = this.bones;\r\n\t\t\tvar boneInverses = this.boneInverses;\r\n\t\t\tvar boneMatrices = this.boneMatrices;\r\n\t\t\tvar boneTexture = this.boneTexture;\r\n\r\n\t\t\t// flatten bone matrices to array\r\n\r\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\r\n\r\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\r\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boneTexture !== undefined ) {\r\n\r\n\t\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\r\n\r\n\t\t},\r\n\r\n\t\tgetBoneByName: function ( name ) {\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar bone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone.name === name ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction Bone() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Bone';\r\n\r\n\t}\r\n\r\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Bone,\r\n\r\n\t\tisBone: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _instanceLocalMatrix = new Matrix4();\r\n\tvar _instanceWorldMatrix = new Matrix4();\r\n\r\n\tvar _instanceIntersects = [];\r\n\r\n\tvar _mesh = new Mesh();\r\n\r\n\tfunction InstancedMesh( geometry, material, count ) {\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\r\n\r\n\t\tthis.count = count;\r\n\r\n\t}\r\n\r\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: InstancedMesh,\r\n\r\n\t\tisInstancedMesh: true,\r\n\r\n\t\tgetMatrixAt: function ( index, matrix ) {\r\n\r\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar raycastTimes = this.count;\r\n\r\n\t\t\t_mesh.geometry = this.geometry;\r\n\t\t\t_mesh.material = this.material;\r\n\r\n\t\t\tif ( _mesh.material === undefined ) { return; }\r\n\r\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\r\n\r\n\t\t\t\t// calculate the world matrix for each instance\r\n\r\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\r\n\r\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\r\n\r\n\t\t\t\t// the mesh represents this single instance\r\n\r\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\r\n\r\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\r\n\r\n\t\t\t\t// process the result of raycast\r\n\r\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\r\n\r\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\r\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\r\n\r\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\r\n\r\n\t\t\t\t\t_instanceIntersects.length = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsetMatrixAt: function ( index, matrix ) {\r\n\r\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *  linecap: \"round\",\r\n\t *  linejoin: \"round\"\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\r\n\r\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\r\n\r\n\tLineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _start = new Vector3();\r\n\tvar _end = new Vector3();\r\n\tvar _inverseMatrix$1 = new Matrix4();\r\n\tvar _ray$1 = new Ray();\r\n\tvar _sphere$2 = new Sphere();\r\n\r\n\tfunction Line( geometry, material, mode ) {\r\n\r\n\t\tif ( mode === 1 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Line';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t}\r\n\r\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Line,\r\n\r\n\t\tisLine: true,\r\n\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\tvar lineDistances = [ 0 ];\r\n\r\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\r\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\tlineDistances[ 0 ] = 0;\r\n\r\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\r\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\r\n\t\t\t_sphere$2.radius += precision;\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\r\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\r\n\r\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\r\n\r\n\t\t\tvar vStart = new Vector3();\r\n\t\t\tvar vEnd = new Vector3();\r\n\t\t\tvar interSegment = new Vector3();\r\n\t\t\tvar interRay = new Vector3();\r\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _start$1 = new Vector3();\r\n\tvar _end$1 = new Vector3();\r\n\r\n\tfunction LineSegments( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineSegments,\r\n\r\n\t\tisLineSegments: true,\r\n\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\tvar lineDistances = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\r\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\r\n\r\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mgreter / http://github.com/mgreter\r\n\t */\r\n\r\n\tfunction LineLoop( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineLoop';\r\n\r\n\t}\r\n\r\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineLoop,\r\n\r\n\t\tisLineLoop: true,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  size: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t *\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction PointsMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'PointsMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tPointsMaterial.prototype = Object.create( Material.prototype );\r\n\tPointsMaterial.prototype.constructor = PointsMaterial;\r\n\r\n\tPointsMaterial.prototype.isPointsMaterial = true;\r\n\r\n\tPointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar _inverseMatrix$2 = new Matrix4();\r\n\tvar _ray$2 = new Ray();\r\n\tvar _sphere$3 = new Sphere();\r\n\tvar _position$1 = new Vector3();\r\n\r\n\tfunction Points( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Points';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Points,\r\n\r\n\t\tisPoints: true,\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\r\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\r\n\t\t\t_sphere$3.radius += threshold;\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\r\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\r\n\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\r\n\r\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\r\n\r\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\tvar intersectPoint = new Vector3();\r\n\r\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\r\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\tpoint: intersectPoint,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: object\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBFormat;\r\n\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\r\n\r\n\t\tconstructor: VideoTexture,\r\n\r\n\t\tisVideoTexture: true,\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar video = this.image;\r\n\r\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\r\n\tCompressedTexture.prototype.constructor = CompressedTexture;\r\n\r\n\tCompressedTexture.prototype.isCompressedTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\r\n\tCanvasTexture.prototype.constructor = CanvasTexture;\r\n\tCanvasTexture.prototype.isCanvasTexture = true;\r\n\r\n\t/**\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t * @author atix / arthursilber.de\r\n\t */\r\n\r\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\r\n\r\n\t\tformat = format !== undefined ? format : DepthFormat;\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\r\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps\t= false;\r\n\r\n\t}\r\n\r\n\tDepthTexture.prototype = Object.create( Texture.prototype );\r\n\tDepthTexture.prototype.constructor = DepthTexture;\r\n\tDepthTexture.prototype.isDepthTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WireframeGeometry( geometry ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'WireframeGeometry';\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j, l, o, ol;\r\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\t\tvar vertex;\r\n\r\n\t\t// different logic for Geometry and BufferGeometry\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t// create a data structure that contains all edges without duplicates\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate vertices\r\n\r\n\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar position, indices, groups;\r\n\t\t\tvar group, start, count;\r\n\t\t\tvar index1, index2;\r\n\r\n\t\t\tvertex = new Vector3();\r\n\r\n\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\t\t\t\tindices = geometry.index;\r\n\t\t\t\tgroups = geometry.groups;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a data structure that contains all eges without duplicates\r\n\r\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\t\tgroup = groups[ o ];\r\n\r\n\t\t\t\t\tstart = group.start;\r\n\t\t\t\t\tcount = group.count;\r\n\r\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\r\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\r\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// generate vertices\r\n\r\n\t\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\r\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\r\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\r\n\r\n\t\t\t\t\t\tindex1 = 3 * i + j;\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Parametric Surfaces Geometry\r\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n\t */\r\n\r\n\t// ParametricGeometry\r\n\r\n\tfunction ParametricGeometry( func, slices, stacks ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\r\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\r\n\r\n\t// ParametricBufferGeometry\r\n\r\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\tvar EPS = 0.00001;\r\n\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\r\n\t\tvar pu = new Vector3(), pv = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tif ( func.length < 3 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tvar sliceCount = slices + 1;\r\n\r\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\t\tvar v = i / stacks;\r\n\r\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\t\tvar u = j / slices;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tfunc( u, v, p0 );\r\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\t// approximate tangent vectors via finite differences\r\n\r\n\t\t\t\tif ( u - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u - EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u + EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( v - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u, v - EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u, v + EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// cross product of tangent vectors returns surface normal\r\n\r\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\t\tvar a = i * sliceCount + j;\r\n\t\t\t\tvar b = i * sliceCount + j + 1;\r\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\t\t// faces one and two\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\r\n\r\n\t/**\r\n\t * @author clockworkgeek / https://github.com/clockworkgeek\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PolyhedronGeometry\r\n\r\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\r\n\r\n\t// PolyhedronBufferGeometry\r\n\r\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tdetail = detail || 0;\r\n\r\n\t\t// default buffer data\r\n\r\n\t\tvar vertexBuffer = [];\r\n\t\tvar uvBuffer = [];\r\n\r\n\t\t// the subdivision creates the vertex buffer data\r\n\r\n\t\tsubdivide( detail );\r\n\r\n\t\t// all vertices should lie on a conceptual sphere with a given radius\r\n\r\n\t\tapplyRadius( radius );\r\n\r\n\t\t// finally, create the uv data\r\n\r\n\t\tgenerateUVs();\r\n\r\n\t\t// build non-indexed geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\r\n\r\n\t\tif ( detail === 0 ) {\r\n\r\n\t\t\tthis.computeVertexNormals(); // flat normals\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.normalizeNormals(); // smooth normals\r\n\r\n\t\t}\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction subdivide( detail ) {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\r\n\r\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t// get the vertices of the face\r\n\r\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\r\n\r\n\t\t\t\t// perform subdivision\r\n\r\n\t\t\t\tsubdivideFace( a, b, c, detail );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction subdivideFace( a, b, c, detail ) {\r\n\r\n\t\t\tvar cols = Math.pow( 2, detail );\r\n\r\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\r\n\r\n\t\t\tvar v = [];\r\n\r\n\t\t\tvar i, j;\r\n\r\n\t\t\t// construct all of the vertices for this subdivision\r\n\r\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\r\n\r\n\t\t\t\tv[ i ] = [];\r\n\r\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\r\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\r\n\r\n\t\t\t\tvar rows = cols - i;\r\n\r\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// construct all of the faces\r\n\r\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction applyRadius( radius ) {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\r\n\r\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\r\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\r\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\r\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\r\n\t\t\t\tuvBuffer.push( u, 1 - v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcorrectUVs();\r\n\r\n\t\t\tcorrectSeam();\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctSeam() {\r\n\r\n\t\t\t// handle case when face straddles the seam, see #3269\r\n\r\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\r\n\r\n\t\t\t\t// uv data of a single face\r\n\r\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\r\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\r\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\r\n\r\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\r\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\r\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushVertex( vertex ) {\r\n\r\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getVertexByIndex( index, vertex ) {\r\n\r\n\t\t\tvar stride = index * 3;\r\n\r\n\t\t\tvertex.x = vertices[ stride + 0 ];\r\n\t\t\tvertex.y = vertices[ stride + 1 ];\r\n\t\t\tvertex.z = vertices[ stride + 2 ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUVs() {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\tvar centroid = new Vector3();\r\n\r\n\t\t\tvar uvA = new Vector2();\r\n\t\t\tvar uvB = new Vector2();\r\n\t\t\tvar uvC = new Vector2();\r\n\r\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\r\n\r\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\r\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\r\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\r\n\r\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\r\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\r\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\r\n\r\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\r\n\r\n\t\t\t\tvar azi = azimuth( centroid );\r\n\r\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\r\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\r\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\r\n\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\t\tfunction azimuth( vector ) {\r\n\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Angle above the XZ plane.\r\n\r\n\t\tfunction inclination( vector ) {\r\n\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TetrahedronGeometry\r\n\r\n\tfunction TetrahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\r\n\r\n\t// TetrahedronBufferGeometry\r\n\r\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'TetrahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// OctahedronGeometry\r\n\r\n\tfunction OctahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\r\n\r\n\t// OctahedronBufferGeometry\r\n\r\n\tfunction OctahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\r\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\r\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\r\n\t\t\t1, 3, 4,\t1, 4, 2\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'OctahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// IcosahedronGeometry\r\n\r\n\tfunction IcosahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\r\n\r\n\t// IcosahedronBufferGeometry\r\n\r\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\r\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\r\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\r\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\r\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\r\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'IcosahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Abe Pazos / https://hamoid.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// DodecahedronGeometry\r\n\r\n\tfunction DodecahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\r\n\r\n\t// DodecahedronBufferGeometry\r\n\r\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tvar r = 1 / t;\r\n\r\n\t\tvar vertices = [\r\n\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\r\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\r\n\t\t\t1, - 1, - 1, 1, - 1, 1,\r\n\t\t\t1, 1, - 1, 1, 1, 1,\r\n\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t 0, - r, - t, 0, - r, t,\r\n\t\t\t 0, r, - t, 0, r, t,\r\n\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t, 0, - r, t, 0,\r\n\t\t\t r, - t, 0, r, t, 0,\r\n\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t, 0, - r, t, 0, - r,\r\n\t\t\t- t, 0, r, t, 0, r\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\r\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\r\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\r\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\r\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\r\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\r\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\r\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\r\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\r\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\r\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\r\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'DodecahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\r\n\t * @author WestLangley / https://github.com/WestLangley\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author miningold / https://github.com/miningold\r\n\t * @author jonobr1 / https://github.com/jonobr1\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t */\r\n\r\n\t// TubeGeometry\r\n\r\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\r\n\r\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = bufferGeometry.tangents;\r\n\t\tthis.normals = bufferGeometry.normals;\r\n\t\tthis.binormals = bufferGeometry.binormals;\r\n\r\n\t\t// create geometry\r\n\r\n\t\tthis.fromBufferGeometry( bufferGeometry );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTubeGeometry.prototype.constructor = TubeGeometry;\r\n\r\n\t// TubeBufferGeometry\r\n\r\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\ttubularSegments = tubularSegments || 64;\r\n\t\tradius = radius || 1;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\tclosed = closed || false;\r\n\r\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = frames.tangents;\r\n\t\tthis.normals = frames.normals;\r\n\t\tthis.binormals = frames.binormals;\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar P = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\t\tvar indices = [];\r\n\r\n\t\t// create buffer data\r\n\r\n\t\tgenerateBufferData();\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction generateBufferData() {\r\n\r\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tgenerateSegment( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\r\n\t\t\t// at the regular position on the given path\r\n\t\t\t//\r\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\r\n\r\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\r\n\r\n\t\t\t// uvs are generated in a separate function.\r\n\t\t\t// this makes it easy compute correct values for closed geometries\r\n\r\n\t\t\tgenerateUVs();\r\n\r\n\t\t\t// finally create faces\r\n\r\n\t\t\tgenerateIndices();\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateSegment( i ) {\r\n\r\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\r\n\r\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\r\n\r\n\t\t\t// retrieve corresponding normal and binormal\r\n\r\n\t\t\tvar N = frames.normals[ i ];\r\n\t\t\tvar B = frames.binormals[ i ];\r\n\r\n\t\t\t// generate normals and vertices for the current segment\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\tvar sin = Math.sin( v );\r\n\t\t\t\tvar cos = - Math.cos( v );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\r\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\r\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\r\n\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = P.x + radius * normal.x;\r\n\t\t\t\tvertex.y = P.y + radius * normal.y;\r\n\t\t\t\tvertex.z = P.z + radius * normal.z;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateIndices() {\r\n\r\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\t\tuv.x = i / tubularSegments;\r\n\t\t\t\t\tuv.y = j / radialSegments;\r\n\r\n\t\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\r\n\r\n\tTubeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tdata.path = this.parameters.path.toJSON();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * based on http://www.blackpawn.com/texts/pqtorus/\r\n\t */\r\n\r\n\t// TorusKnotGeometry\r\n\r\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\r\n\r\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\r\n\r\n\t// TorusKnotBufferGeometry\r\n\r\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\tp = p || 2;\r\n\t\tq = q || 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar P1 = new Vector3();\r\n\t\tvar P2 = new Vector3();\r\n\r\n\t\tvar B = new Vector3();\r\n\t\tvar T = new Vector3();\r\n\t\tvar N = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t\t// calculate orthonormal basis\r\n\r\n\t\t\tT.subVectors( P2, P1 );\r\n\t\t\tN.addVectors( P2, P1 );\r\n\t\t\tB.crossVectors( T, N );\r\n\t\t\tN.crossVectors( B, T );\r\n\r\n\t\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\t\tB.normalize();\r\n\t\t\tN.normalize();\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t\t// now calculate the final vertex position.\r\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\r\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// this function calculates the current position on the torus curve\r\n\r\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\t\tvar cu = Math.cos( u );\r\n\t\t\tvar su = Math.sin( u );\r\n\t\t\tvar quOverP = q / p * u;\r\n\t\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TorusGeometry\r\n\r\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusGeometry.prototype.constructor = TorusGeometry;\r\n\r\n\t// TorusBufferGeometry\r\n\r\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\t\tarc = arc || Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar center = new Vector3();\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\r\n\t */\r\n\r\n\tvar Earcut = {\r\n\r\n\t\ttriangulate: function ( data, holeIndices, dim ) {\r\n\r\n\t\t\tdim = dim || 2;\r\n\r\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\r\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\r\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\r\n\t\t\t\ttriangles = [];\r\n\r\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\r\n\r\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\r\n\r\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\t\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\t\tx = data[ i ];\r\n\t\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\treturn triangles;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// create a circular doubly linked list from polygon points in the specified winding order\r\n\tfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\t\tvar i, last;\r\n\r\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n\t\t}\r\n\r\n\t\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\t\tremoveNode( last );\r\n\t\t\tlast = last.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn last;\r\n\r\n\t}\r\n\r\n\t// eliminate colinear or duplicate points\r\n\tfunction filterPoints( start, end ) {\r\n\r\n\t\tif ( ! start ) { return start; }\r\n\t\tif ( ! end ) { end = start; }\r\n\r\n\t\tvar p = start,\r\n\t\t\tagain;\r\n\t\tdo {\r\n\r\n\t\t\tagain = false;\r\n\r\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tp = end = p.prev;\r\n\t\t\t\tif ( p === p.next ) { break; }\r\n\t\t\t\tagain = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = p.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t} while ( again || p !== end );\r\n\r\n\t\treturn end;\r\n\r\n\t}\r\n\r\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\t\tif ( ! ear ) { return; }\r\n\r\n\t\t// interlink polygon nodes in z-order\r\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\r\n\r\n\t\tvar stop = ear,\r\n\t\t\tprev, next;\r\n\r\n\t\t// iterate through ears, slicing them one by one\r\n\t\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\t\tprev = ear.prev;\r\n\t\t\tnext = ear.next;\r\n\r\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t\t// cut off the triangle\r\n\t\t\t\ttriangles.push( prev.i / dim );\r\n\t\t\t\ttriangles.push( ear.i / dim );\r\n\t\t\t\ttriangles.push( next.i / dim );\r\n\r\n\t\t\t\tremoveNode( ear );\r\n\r\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\r\n\t\t\t\tear = next.next;\r\n\t\t\t\tstop = next.next;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tear = next;\r\n\r\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\t\t\tif ( ear === stop ) {\r\n\r\n\t\t\t\t// try filtering points and slicing again\r\n\t\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\r\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// check whether a polygon node forms a valid ear with adjacent nodes\r\n\tfunction isEar( ear ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n\t\t// now make sure we don't have other points inside the potential ear\r\n\t\tvar p = ear.next.next;\r\n\r\n\t\twhile ( p !== ear.prev ) {\r\n\r\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n\t\t// triangle bbox; min & max are calculated like this for speed\r\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n\t\t// z-order range for the current triangle bbox;\r\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n\t\tvar p = ear.prevZ,\r\n\t\t\tn = ear.nextZ;\r\n\r\n\t\t// look for points inside the triangle in both directions\r\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\r\n\t\t\tn = n.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\t// look for remaining points in decreasing z-order\r\n\t\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t}\r\n\r\n\t\t// look for remaining points in increasing z-order\r\n\t\twhile ( n && n.z <= maxZ ) {\r\n\r\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\r\n\t\t\tn = n.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t// go through all polygon nodes and cure small local self-intersections\r\n\tfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\t\tvar p = start;\r\n\t\tdo {\r\n\r\n\t\t\tvar a = p.prev,\r\n\t\t\t\tb = p.next.next;\r\n\r\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\t\ttriangles.push( a.i / dim );\r\n\t\t\t\ttriangles.push( p.i / dim );\r\n\t\t\t\ttriangles.push( b.i / dim );\r\n\r\n\t\t\t\t// remove two nodes involved\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tremoveNode( p.next );\r\n\r\n\t\t\t\tp = start = b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\t// try splitting polygon into two and triangulate them independently\r\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t\t// look for a valid diagonal that divides the polygon into two\r\n\t\tvar a = start;\r\n\t\tdo {\r\n\r\n\t\t\tvar b = a.next.next;\r\n\t\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t\t// split the polygon in two by the diagonal\r\n\t\t\t\t\tvar c = splitPolygon( a, b );\r\n\r\n\t\t\t\t\t// filter colinear points around the cuts\r\n\t\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t\t// run earcut on each half\r\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tb = b.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ta = a.next;\r\n\r\n\t\t} while ( a !== start );\r\n\r\n\t}\r\n\r\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\r\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\t\tvar queue = [],\r\n\t\t\ti, len, start, end, list;\r\n\r\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\t\tstart = holeIndices[ i ] * dim;\r\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\t\tif ( list === list.next ) { list.steiner = true; }\r\n\t\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t\t}\r\n\r\n\t\tqueue.sort( compareX );\r\n\r\n\t\t// process holes from left to right\r\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\t\teliminateHole( queue[ i ], outerNode );\r\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\r\n\r\n\t\t}\r\n\r\n\t\treturn outerNode;\r\n\r\n\t}\r\n\r\n\tfunction compareX( a, b ) {\r\n\r\n\t\treturn a.x - b.x;\r\n\r\n\t}\r\n\r\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\r\n\tfunction eliminateHole( hole, outerNode ) {\r\n\r\n\t\touterNode = findHoleBridge( hole, outerNode );\r\n\t\tif ( outerNode ) {\r\n\r\n\t\t\tvar b = splitPolygon( outerNode, hole );\r\n\t\t\tfilterPoints( b, b.next );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\tfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\t\tvar p = outerNode,\r\n\t\t\thx = hole.x,\r\n\t\t\thy = hole.y,\r\n\t\t\tqx = - Infinity,\r\n\t\t\tm;\r\n\r\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t\t// segment's endpoint with lesser x will be potential connection point\r\n\t\tdo {\r\n\r\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\t\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\t\tqx = x;\r\n\t\t\t\t\tif ( x === hx ) {\r\n\r\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\r\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== outerNode );\r\n\r\n\t\tif ( ! m ) { return null; }\r\n\r\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\r\n\r\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t\t// if there are no points found, we have a valid connection;\r\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\t\tvar stop = m,\r\n\t\t\tmx = m.x,\r\n\t\t\tmy = m.y,\r\n\t\t\ttanMin = Infinity,\r\n\t\t\ttan;\r\n\r\n\t\tp = m.next;\r\n\r\n\t\twhile ( p !== stop ) {\r\n\r\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\r\n\r\n\t\t\t\t\tm = p;\r\n\t\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn m;\r\n\r\n\t}\r\n\r\n\t// interlink polygon nodes in z-order\r\n\tfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\t\tvar p = start;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\r\n\t\t\tp.prevZ = p.prev;\r\n\t\t\tp.nextZ = p.next;\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\tp.prevZ.nextZ = null;\r\n\t\tp.prevZ = null;\r\n\r\n\t\tsortLinked( p );\r\n\r\n\t}\r\n\r\n\t// Simon Tatham's linked list merge sort algorithm\r\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\tfunction sortLinked( list ) {\r\n\r\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\r\n\t\t\tinSize = 1;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tp = list;\r\n\t\t\tlist = null;\r\n\t\t\ttail = null;\r\n\t\t\tnumMerges = 0;\r\n\r\n\t\t\twhile ( p ) {\r\n\r\n\t\t\t\tnumMerges ++;\r\n\t\t\t\tq = p;\r\n\t\t\t\tpSize = 0;\r\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\t\tpSize ++;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tif ( ! q ) { break; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tqSize = inSize;\r\n\r\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\t\te = p;\r\n\t\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\te = q;\r\n\t\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\r\n\t\t\t\t\telse { list = e; }\r\n\r\n\t\t\t\t\te.prevZ = tail;\r\n\t\t\t\t\ttail = e;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttail.nextZ = null;\r\n\t\t\tinSize *= 2;\r\n\r\n\t\t} while ( numMerges > 1 );\r\n\r\n\t\treturn list;\r\n\r\n\t}\r\n\r\n\t// z-order of a point given coords and inverse of the longer side of data bbox\r\n\tfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t\t// coords are transformed into non-negative 15-bit integer range\r\n\t\tx = 32767 * ( x - minX ) * invSize;\r\n\t\ty = 32767 * ( y - minY ) * invSize;\r\n\r\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\t\treturn x | ( y << 1 );\r\n\r\n\t}\r\n\r\n\t// find the leftmost node of a polygon ring\r\n\tfunction getLeftmost( start ) {\r\n\r\n\t\tvar p = start,\r\n\t\t\tleftmost = start;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn leftmost;\r\n\r\n\t}\r\n\r\n\t// check if a point lies within a convex triangle\r\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n\t}\r\n\r\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\tfunction isValidDiagonal( a, b ) {\r\n\r\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\r\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\r\n\r\n\t}\r\n\r\n\t// signed area of a triangle\r\n\tfunction area( p, q, r ) {\r\n\r\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n\t}\r\n\r\n\t// check if two points are equal\r\n\tfunction equals( p1, p2 ) {\r\n\r\n\t\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n\t}\r\n\r\n\t// check if two segments intersect\r\n\tfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\r\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\r\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\r\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal intersects any polygon segments\r\n\tfunction intersectsPolygon( a, b ) {\r\n\r\n\t\tvar p = a;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal is locally inside the polygon\r\n\tfunction locallyInside( a, b ) {\r\n\r\n\t\treturn area( a.prev, a, a.next ) < 0 ?\r\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n\t}\r\n\r\n\t// check if the middle point of a polygon diagonal is inside the polygon\r\n\tfunction middleInside( a, b ) {\r\n\r\n\t\tvar p = a,\r\n\t\t\tinside = false,\r\n\t\t\tpx = ( a.x + b.x ) / 2,\r\n\t\t\tpy = ( a.y + b.y ) / 2;\r\n\t\tdo {\r\n\r\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\r\n\t\t\t\t{ inside = ! inside; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn inside;\r\n\r\n\t}\r\n\r\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\tfunction splitPolygon( a, b ) {\r\n\r\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\r\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\t\tan = a.next,\r\n\t\t\tbp = b.prev;\r\n\r\n\t\ta.next = b;\r\n\t\tb.prev = a;\r\n\r\n\t\ta2.next = an;\r\n\t\tan.prev = a2;\r\n\r\n\t\tb2.next = a2;\r\n\t\ta2.prev = b2;\r\n\r\n\t\tbp.next = b2;\r\n\t\tb2.prev = bp;\r\n\r\n\t\treturn b2;\r\n\r\n\t}\r\n\r\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\tfunction insertNode( i, x, y, last ) {\r\n\r\n\t\tvar p = new Node( i, x, y );\r\n\r\n\t\tif ( ! last ) {\r\n\r\n\t\t\tp.prev = p;\r\n\t\t\tp.next = p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp.next = last.next;\r\n\t\t\tp.prev = last;\r\n\t\t\tlast.next.prev = p;\r\n\t\t\tlast.next = p;\r\n\r\n\t\t}\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction removeNode( p ) {\r\n\r\n\t\tp.next.prev = p.prev;\r\n\t\tp.prev.next = p.next;\r\n\r\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\r\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\r\n\r\n\t}\r\n\r\n\tfunction Node( i, x, y ) {\r\n\r\n\t\t// vertex index in coordinates array\r\n\t\tthis.i = i;\r\n\r\n\t\t// vertex coordinates\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\t// previous and next vertex nodes in a polygon ring\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\r\n\t\t// z-order curve value\r\n\t\tthis.z = null;\r\n\r\n\t\t// previous and next nodes in z-order\r\n\t\tthis.prevZ = null;\r\n\t\tthis.nextZ = null;\r\n\r\n\t\t// indicates whether this is a steiner point\r\n\t\tthis.steiner = false;\r\n\r\n\t}\r\n\r\n\tfunction signedArea( data, start, end, dim ) {\r\n\r\n\t\tvar sum = 0;\r\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\t\tj = i;\r\n\r\n\t\t}\r\n\r\n\t\treturn sum;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tvar ShapeUtils = {\r\n\r\n\t\t// calculate area of the contour polygon\r\n\r\n\t\tarea: function ( contour ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\t\t\tvar a = 0.0;\r\n\r\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tisClockWise: function ( pts ) {\r\n\r\n\t\t\treturn ShapeUtils.area( pts ) < 0;\r\n\r\n\t\t},\r\n\r\n\t\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\t\t\tvar holeIndices = []; // array of hole indices\r\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n\t\t\tremoveDupEndPts( contour );\r\n\t\t\taddContour( vertices, contour );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar holeIndex = contour.length;\r\n\r\n\t\t\tholes.forEach( removeDupEndPts );\r\n\r\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\r\n\r\n\t\t\t\tholeIndices.push( holeIndex );\r\n\t\t\t\tholeIndex += holes[ i ].length;\r\n\t\t\t\taddContour( vertices, holes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\r\n\r\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn faces;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeDupEndPts( points ) {\r\n\r\n\t\tvar l = points.length;\r\n\r\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\tpoints.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction addContour( vertices, contour ) {\r\n\r\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\r\n\r\n\t\t\tvertices.push( contour[ i ].x );\r\n\t\t\tvertices.push( contour[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Creates extruded geometry from a path shape.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n\t *  depth: <float>, // Depth to extrude the shape\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\r\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\r\n\t *  bevelSegments: <int>, // number of bevel layers\r\n\t *\r\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\r\n\t *\r\n\t *  UVGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\t// ExtrudeGeometry\r\n\r\n\tfunction ExtrudeGeometry( shapes, options ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\r\n\r\n\tExtrudeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t// ExtrudeBufferGeometry\r\n\r\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar verticesArray = [];\r\n\t\tvar uvArray = [];\r\n\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar shape = shapes[ i ];\r\n\t\t\taddShape( shape );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar placeholder = [];\r\n\r\n\t\t\t// options\r\n\r\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\r\n\r\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\r\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\r\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\r\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\t\t\tvar extrudePath = options.extrudePath;\r\n\r\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\r\n\r\n\t\t\t// deprecated options\r\n\r\n\t\t\tif ( options.amount !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\r\n\t\t\t\tdepth = options.amount;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar extrudePts, extrudeByPath = false;\r\n\t\t\tvar splineTube, binormal, normal, position2;\r\n\r\n\t\t\tif ( extrudePath ) {\r\n\r\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\t\t\textrudeByPath = true;\r\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t\t\t// SETUP TNB variables\r\n\r\n\t\t\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\r\n\r\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\t\t\tbinormal = new Vector3();\r\n\t\t\t\tnormal = new Vector3();\r\n\t\t\t\tposition2 = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Safeguards if bevels are not enabled\r\n\r\n\t\t\tif ( ! bevelEnabled ) {\r\n\r\n\t\t\t\tbevelSegments = 0;\r\n\t\t\t\tbevelThickness = 0;\r\n\t\t\t\tbevelSize = 0;\r\n\t\t\t\tbevelOffset = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Variables initialization\r\n\r\n\t\t\tvar ahole, h, hl; // looping of holes\r\n\r\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar vertices = shapePoints.shape;\r\n\t\t\tvar holes = shapePoints.holes;\r\n\r\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\r\n\r\n\t\t\tif ( reverse ) {\r\n\r\n\t\t\t\tvertices = vertices.reverse();\r\n\r\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t\t\t/* Vertices */\r\n\r\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\tvertices = vertices.concat( ahole );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction scalePt2( pt, vec, size ) {\r\n\r\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\r\n\r\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar b, bs, t, z,\r\n\t\t\t\tvert, vlen = vertices.length,\r\n\t\t\t\tface, flen = faces.length;\r\n\r\n\r\n\t\t\t// Find directions for point movement\r\n\r\n\r\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t\t//\r\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n\r\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\r\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\r\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\r\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\r\n\r\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t\t\t// check for collinear edges\r\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not collinear\r\n\r\n\t\t\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\r\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\r\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\t\tv_trans_y = v_prev_x;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar contourMovements = [];\r\n\r\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\tif ( j === il ) { j = 0; }\r\n\t\t\t\tif ( k === il ) { k = 0; }\r\n\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesMovements = [],\r\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\toneHoleMovements = [];\r\n\r\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\t\tif ( j === il ) { j = 0; }\r\n\t\t\t\t\tif ( k === il ) { k = 0; }\r\n\r\n\t\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbs = bevelSize + bevelOffset;\r\n\r\n\t\t\t// Back facing vertices\r\n\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Add stepped vertices...\r\n\t\t\t// Including front facing vertices\r\n\r\n\t\t\tvar s;\r\n\r\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Add bevel segments planes\r\n\r\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* Faces */\r\n\r\n\t\t\t// Top and bottom faces\r\n\r\n\t\t\tbuildLidFaces();\r\n\r\n\t\t\t// Sides faces\r\n\r\n\t\t\tbuildSideFaces();\r\n\r\n\r\n\t\t\t/////  Internal functions\r\n\r\n\t\t\tfunction buildLidFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\r\n\t\t\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Create faces for the z-sides of the shape\r\n\r\n\t\t\tfunction buildSideFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\t\t\t\tvar layeroffset = 0;\r\n\t\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\t\tlayeroffset += contour.length;\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t\t\t//, true\r\n\t\t\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\t\t\tvar j, k;\r\n\t\t\t\ti = contour.length;\r\n\r\n\t\t\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\t\t\tj = i;\r\n\t\t\t\t\tk = i - 1;\r\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\r\n\r\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\t\t\tvar s = 0,\r\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\r\n\r\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\t\t\tf4( a, b, c, d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction v( x, y, z ) {\r\n\r\n\t\t\t\tplaceholder.push( x );\r\n\t\t\t\tplaceholder.push( y );\r\n\t\t\t\tplaceholder.push( z );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction f3( a, b, c ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction f4( a, b, c, d ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( d );\r\n\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\t\t\t\taddVertex( d );\r\n\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addVertex( index ) {\r\n\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction addUV( vector2 ) {\r\n\r\n\t\t\t\tuvArray.push( vector2.x );\r\n\t\t\t\tuvArray.push( vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\r\n\r\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar WorldUVGenerator = {\r\n\r\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_x, a_y ),\r\n\t\t\t\tnew Vector2( b_x, b_y ),\r\n\t\t\t\tnew Vector2( c_x, c_y )\r\n\t\t\t];\r\n\r\n\t\t},\r\n\r\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\r\n\t\t\tvar d_x = vertices[ indexD * 3 ];\r\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\r\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\r\n\r\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tfunction toJSON( shapes, options, data ) {\r\n\r\n\t\t//\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Text = 3D Text\r\n\t *\r\n\t * parameters = {\r\n\t *  font: <THREE.Font>, // font\r\n\t *\r\n\t *  size: <float>, // size of the text\r\n\t *  height: <float>, // thickness to extrude text\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into text bevel goes\r\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n\t *  bevelOffset: <float> // how far from text outline does bevel start\r\n\t * }\r\n\t */\r\n\r\n\t// TextGeometry\r\n\r\n\tfunction TextGeometry( text, parameters ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\ttext: text,\r\n\t\t\tparameters: parameters\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTextGeometry.prototype.constructor = TextGeometry;\r\n\r\n\t// TextBufferGeometry\r\n\r\n\tfunction TextBufferGeometry( text, parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar font = parameters.font;\r\n\r\n\t\tif ( ! ( font && font.isFont ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\t\treturn new Geometry();\r\n\r\n\t\t}\r\n\r\n\t\tvar shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t// translate parameters to ExtrudeGeometry API\r\n\r\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t\t// defaults\r\n\r\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\r\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\r\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\r\n\r\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\r\n\r\n\t\tthis.type = 'TextBufferGeometry';\r\n\r\n\t}\r\n\r\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\r\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// SphereGeometry\r\n\r\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\r\n\tSphereGeometry.prototype.constructor = SphereGeometry;\r\n\r\n\t// SphereBufferGeometry\r\n\r\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\tvar index = 0;\r\n\t\tvar grid = [];\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tvar verticesRow = [];\r\n\r\n\t\t\tvar v = iy / heightSegments;\r\n\r\n\t\t\t// special case for the poles\r\n\r\n\t\t\tvar uOffset = 0;\r\n\r\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\r\n\r\n\t\t\t\tuOffset = 0.5 / widthSegments;\r\n\r\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\r\n\r\n\t\t\t\tuOffset = - 0.5 / widthSegments;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.copy( vertex ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tvar b = grid[ iy ][ ix ];\r\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Kaleb Murphy\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// RingGeometry\r\n\r\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\r\n\tRingGeometry.prototype.constructor = RingGeometry;\r\n\r\n\t// RingBufferGeometry\r\n\r\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tinnerRadius = innerRadius || 0.5;\r\n\t\touterRadius = outerRadius || 1;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// some helper variables\r\n\r\n\t\tvar segment;\r\n\t\tvar radius = innerRadius;\r\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\t\t// values are generate from the inside of the ring to the outside\r\n\r\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// increase the radius for next row of vertices\r\n\r\n\t\t\tradius += radiusStep;\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t\tvar a = segment;\r\n\t\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// LatheGeometry\r\n\r\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\r\n\tLatheGeometry.prototype.constructor = LatheGeometry;\r\n\r\n\t// LatheBufferGeometry\r\n\r\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tsegments = Math.floor( segments ) || 12;\r\n\t\tphiStart = phiStart || 0;\r\n\t\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\r\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar base;\r\n\t\tvar inverseSegments = 1.0 / segments;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar i, j;\r\n\r\n\t\t// generate vertices and uvs\r\n\r\n\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\t\tvar sin = Math.sin( phi );\r\n\t\t\tvar cos = Math.cos( phi );\r\n\r\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\t\tvertex.y = points[ j ].y;\r\n\t\t\t\tvertex.z = points[ j ].x * cos;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = i / segments;\r\n\t\t\t\tuv.y = j / ( points.length - 1 );\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t\tvar a = base;\r\n\t\t\t\tvar b = base + points.length;\r\n\t\t\t\tvar c = base + points.length + 1;\r\n\t\t\t\tvar d = base + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// generate normals\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\t\tif ( phiLength === Math.PI * 2 ) {\r\n\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\t\tvar n1 = new Vector3();\r\n\t\t\tvar n2 = new Vector3();\r\n\t\t\tvar n = new Vector3();\r\n\r\n\t\t\t// this is the buffer offset for the last line of vertices\r\n\r\n\t\t\tbase = segments * points.length * 3;\r\n\r\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t\t// select the normal of the vertex in the first line\r\n\r\n\t\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t\t// select the normal of the vertex in the last line\r\n\r\n\t\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t\t// average normals\r\n\r\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t\t// assign the new values to both normals\r\n\r\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\r\n\r\n\t/**\r\n\t * @author jonobr1 / http://jonobr1.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// ShapeGeometry\r\n\r\n\tfunction ShapeGeometry( shapes, curveSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeGeometry';\r\n\r\n\t\tif ( typeof curveSegments === 'object' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\r\n\r\n\t\t\tcurveSegments = curveSegments.curveSegments;\r\n\r\n\t\t}\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\r\n\r\n\tShapeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t// ShapeBufferGeometry\r\n\r\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tcurveSegments = curveSegments || 12;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar groupStart = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\t// allow single and array values for \"shapes\" parameter\r\n\r\n\t\tif ( Array.isArray( shapes ) === false ) {\r\n\r\n\t\t\taddShape( shapes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\r\n\r\n\t\t\t\taddShape( shapes[ i ] );\r\n\r\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\t\t\t\tgroupCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar i, l, shapeHole;\r\n\r\n\t\t\tvar indexOffset = vertices.length / 3;\r\n\t\t\tvar points = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar shapeVertices = points.shape;\r\n\t\t\tvar shapeHoles = points.holes;\r\n\r\n\t\t\t// check direction of vertices\r\n\r\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\r\n\r\n\t\t\t\tshapeVertices = shapeVertices.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\r\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\r\n\r\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\r\n\r\n\t\t\t// join vertices of inner and outer paths to a single array\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices, normals, uvs\r\n\r\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = shapeVertices[ i ];\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// incides\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\r\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\r\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\r\n\r\n\t\t\t\tindices.push( a, b, c );\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\r\n\r\n\tShapeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction toJSON$1( shapes, data ) {\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'EdgesGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tthresholdAngle: thresholdAngle\r\n\t\t};\r\n\r\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\r\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\t// prepare source geometry\r\n\r\n\t\tvar geometry2;\r\n\r\n\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\tgeometry2 = new Geometry();\r\n\t\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgeometry2 = geometry.clone();\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.mergeVertices();\r\n\t\tgeometry2.computeFaceNormals();\r\n\r\n\t\tvar sourceVertices = geometry2.vertices;\r\n\t\tvar faces = geometry2.faces;\r\n\r\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\r\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tedges[ key ].face2 = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices\r\n\r\n\t\tfor ( key in edges ) {\r\n\r\n\t\t\tvar e = edges[ key ];\r\n\r\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\r\n\r\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// CylinderGeometry\r\n\r\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\r\n\r\n\t// CylinderBufferGeometry\r\n\r\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\r\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar index = 0;\r\n\t\tvar indexArray = [];\r\n\t\tvar halfHeight = height / 2;\r\n\t\tvar groupStart = 0;\r\n\r\n\t\t// generate geometry\r\n\r\n\t\tgenerateTorso();\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\r\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction generateTorso() {\r\n\r\n\t\t\tvar x, y;\r\n\t\t\tvar normal = new Vector3();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t// this will be used to calculate the normal\r\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\t\tvar indexRow = [];\r\n\r\n\t\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t\t// calculate the radius of the current row\r\n\r\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\r\n\t\t\t\t\t// vertex\r\n\r\n\t\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t// normal\r\n\r\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\r\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\t// uv\r\n\r\n\t\t\t\t\tuvs.push( u, 1 - v );\r\n\r\n\t\t\t\t\t// save index of vertex in respective row\r\n\r\n\t\t\t\t\tindexRow.push( index ++ );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// now save vertices of the row in our index array\r\n\r\n\t\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t\t// we use the index array to access the correct indices\r\n\r\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\r\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\r\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// update group counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateCap( top ) {\r\n\r\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\r\n\t\t\tvar uv = new Vector2();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t\t// save the index of the first center vertex\r\n\t\t\tcenterIndexStart = index;\r\n\r\n\t\t\t// first we generate the center vertex data of the cap.\r\n\t\t\t// because the geometry needs one set of uvs per face,\r\n\t\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// save the index of the last center vertex\r\n\r\n\t\t\tcenterIndexEnd = index;\r\n\r\n\t\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar c = centerIndexStart + x;\r\n\t\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t\t// face top\r\n\r\n\t\t\t\t\tindices.push( i, i + 1, c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// face bottom\r\n\r\n\t\t\t\t\tindices.push( i + 1, i, c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\t// ConeGeometry\r\n\r\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\r\n\tConeGeometry.prototype.constructor = ConeGeometry;\r\n\r\n\t// ConeBufferGeometry\r\n\r\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\r\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author hughes\r\n\t */\r\n\r\n\t// CircleGeometry\r\n\r\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCircleGeometry.prototype.constructor = CircleGeometry;\r\n\r\n\t// CircleBufferGeometry\r\n\r\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, s;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\r\n\t\t// center point\r\n\r\n\t\tvertices.push( 0, 0, 0 );\r\n\t\tnormals.push( 0, 0, 1 );\r\n\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\r\n\r\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\r\n\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\r\n\r\n\r\n\r\n\tvar Geometries = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tWireframeGeometry: WireframeGeometry,\r\n\t\tParametricGeometry: ParametricGeometry,\r\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\r\n\t\tTetrahedronGeometry: TetrahedronGeometry,\r\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\r\n\t\tOctahedronGeometry: OctahedronGeometry,\r\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\r\n\t\tIcosahedronGeometry: IcosahedronGeometry,\r\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\r\n\t\tDodecahedronGeometry: DodecahedronGeometry,\r\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\r\n\t\tPolyhedronGeometry: PolyhedronGeometry,\r\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\r\n\t\tTubeGeometry: TubeGeometry,\r\n\t\tTubeBufferGeometry: TubeBufferGeometry,\r\n\t\tTorusKnotGeometry: TorusKnotGeometry,\r\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\r\n\t\tTorusGeometry: TorusGeometry,\r\n\t\tTorusBufferGeometry: TorusBufferGeometry,\r\n\t\tTextGeometry: TextGeometry,\r\n\t\tTextBufferGeometry: TextBufferGeometry,\r\n\t\tSphereGeometry: SphereGeometry,\r\n\t\tSphereBufferGeometry: SphereBufferGeometry,\r\n\t\tRingGeometry: RingGeometry,\r\n\t\tRingBufferGeometry: RingBufferGeometry,\r\n\t\tPlaneGeometry: PlaneGeometry,\r\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\r\n\t\tLatheGeometry: LatheGeometry,\r\n\t\tLatheBufferGeometry: LatheBufferGeometry,\r\n\t\tShapeGeometry: ShapeGeometry,\r\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\r\n\t\tExtrudeGeometry: ExtrudeGeometry,\r\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\r\n\t\tEdgesGeometry: EdgesGeometry,\r\n\t\tConeGeometry: ConeGeometry,\r\n\t\tConeBufferGeometry: ConeBufferGeometry,\r\n\t\tCylinderGeometry: CylinderGeometry,\r\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\r\n\t\tCircleGeometry: CircleGeometry,\r\n\t\tCircleBufferGeometry: CircleBufferGeometry,\r\n\t\tBoxGeometry: BoxGeometry,\r\n\t\tBoxBufferGeometry: BoxBufferGeometry\r\n\t});\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <THREE.Color>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShadowMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShadowMaterial';\r\n\r\n\t\tthis.color = new Color( 0x000000 );\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tShadowMaterial.prototype = Object.create( Material.prototype );\r\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\r\n\r\n\tShadowMaterial.prototype.isShadowMaterial = true;\r\n\r\n\tShadowMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction RawShaderMaterial( parameters ) {\r\n\r\n\t\tShaderMaterial.call( this, parameters );\r\n\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\r\n\t}\r\n\r\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\r\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\r\n\r\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  roughness: <float>,\r\n\t *  metalness: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  roughnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  metalnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  envMapIntensity: <float>\r\n\t *\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshStandardMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 0.5;\r\n\t\tthis.metalness = 0.5;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.roughnessMap = null;\r\n\r\n\t\tthis.metalnessMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapIntensity = 1.0;\r\n\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\r\n\r\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\r\n\r\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  reflectivity: <float>\r\n\t *  clearcoat: <float>\r\n\t *  clearcoatRoughness: <float>\r\n\t *\r\n\t *  sheen: <Color>\r\n\t *\r\n\t *  clearcoatNormalScale: <Vector2>,\r\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhysicalMaterial( parameters ) {\r\n\r\n\t\tMeshStandardMaterial.call( this );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n\t\tthis.clearcoat = 0.0;\r\n\t\tthis.clearcoatRoughness = 0.0;\r\n\r\n\t\tthis.sheen = null; // null will disable sheen bsdf\r\n\r\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\r\n\t\tthis.clearcoatNormalMap = null;\r\n\r\n\t\tthis.transparency = 0.0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\r\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\r\n\r\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\r\n\r\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\r\n\t\tthis.clearcoat = source.clearcoat;\r\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\r\n\r\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\r\n\t\telse { this.sheen = null; }\r\n\r\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\r\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\r\n\r\n\t\tthis.transparency = source.transparency;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  specular: <hex>,\r\n\t *  shininess: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.MultiplyOperation,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhongMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\r\n\r\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\r\n\r\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahirox / http://github.com/takahirox\r\n\t *\r\n\t * parameters = {\r\n\t *  gradientMap: new THREE.Texture( <Image> )\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshToonMaterial( parameters ) {\r\n\r\n\t\tMeshPhongMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'TOON': '' };\r\n\r\n\t\tthis.type = 'MeshToonMaterial';\r\n\r\n\t\tthis.gradientMap = null;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\r\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\r\n\r\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\r\n\r\n\tMeshToonMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.gradientMap = source.gradientMap;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshNormalMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\r\n\r\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\r\n\r\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshLambertMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\r\n\r\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\r\n\r\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  matcap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshMatcapMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.type = 'MeshMatcapMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.matcap = null;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\r\n\r\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\r\n\r\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.matcap = source.matcap;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *\r\n\t *  scale: <float>,\r\n\t *  dashSize: <float>,\r\n\t *  gapSize: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineDashedMaterial( parameters ) {\r\n\r\n\t\tLineBasicMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\r\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\r\n\r\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\r\n\r\n\tLineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Materials = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tShadowMaterial: ShadowMaterial,\r\n\t\tSpriteMaterial: SpriteMaterial,\r\n\t\tRawShaderMaterial: RawShaderMaterial,\r\n\t\tShaderMaterial: ShaderMaterial,\r\n\t\tPointsMaterial: PointsMaterial,\r\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\r\n\t\tMeshStandardMaterial: MeshStandardMaterial,\r\n\t\tMeshPhongMaterial: MeshPhongMaterial,\r\n\t\tMeshToonMaterial: MeshToonMaterial,\r\n\t\tMeshNormalMaterial: MeshNormalMaterial,\r\n\t\tMeshLambertMaterial: MeshLambertMaterial,\r\n\t\tMeshDepthMaterial: MeshDepthMaterial,\r\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\r\n\t\tMeshBasicMaterial: MeshBasicMaterial,\r\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\r\n\t\tLineDashedMaterial: LineDashedMaterial,\r\n\t\tLineBasicMaterial: LineBasicMaterial,\r\n\t\tMaterial: Material\r\n\t});\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tvar AnimationUtils = {\r\n\r\n\t\t// same as Array.prototype.slice, but also works on typed arrays\r\n\t\tarraySlice: function ( array, from, to ) {\r\n\r\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\r\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\r\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array.slice( from, to );\r\n\r\n\t\t},\r\n\r\n\t\t// converts an array to a specific type\r\n\t\tconvertArray: function ( array, type, forceClone ) {\r\n\r\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\r\n\r\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t\t},\r\n\r\n\t\tisTypedArray: function ( object ) {\r\n\r\n\t\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t\t},\r\n\r\n\t\t// returns an array by which times and values can be sorted\r\n\t\tgetKeyframeOrder: function ( times ) {\r\n\r\n\t\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar n = times.length;\r\n\t\t\tvar result = new Array( n );\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\r\n\r\n\t\t\tresult.sort( compareTime );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\t\tsortedArray: function ( values, stride, order ) {\r\n\r\n\t\t\tvar nValues = values.length;\r\n\t\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// function for parsing AOS keyframe formats\r\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( key === undefined ) { return; } // no data\r\n\r\n\t\t\tvar value = key[ valuePropertyName ];\r\n\t\t\tif ( value === undefined ) { return; } // no data\r\n\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else if ( value.toArray !== undefined ) {\r\n\r\n\t\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// otherwise push as-is\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\r\n\r\n\t\t\tfps = fps || 30;\r\n\r\n\t\t\tvar clip = sourceClip.clone();\r\n\r\n\t\t\tclip.name = name;\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tvar track = clip.tracks[ i ];\r\n\t\t\t\tvar valueSize = track.getValueSize();\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\r\n\r\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\r\n\r\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\r\n\r\n\t\t\t\t\ttimes.push( track.times[ j ] );\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\r\n\r\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( times.length === 0 ) { continue; }\r\n\r\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\r\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\r\n\r\n\t\t\t\ttracks.push( track );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip.tracks = tracks;\r\n\r\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\r\n\r\n\t\t\tvar minStartTime = Infinity;\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\r\n\r\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// shift all tracks such that clip begins at t=0\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip.resetDuration();\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Abstract base class of interpolants over parametric samples.\r\n\t *\r\n\t * The parameter domain is one dimensional, typically the time or a path\r\n\t * along a curve defined by the data.\r\n\t *\r\n\t * The sample values can have any dimensionality and derived classes may\r\n\t * apply special interpretations to the data.\r\n\t *\r\n\t * This class provides the interval seek in a Template Method, deferring\r\n\t * the actual interpolation to derived classes.\r\n\t *\r\n\t * Time complexity is O(1) for linear access crossing at most two points\r\n\t * and O(log N) for random access, where N is the number of positions.\r\n\t *\r\n\t * References:\r\n\t *\r\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t}\r\n\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\tevaluate: function ( t ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\t\tt1 = pp[ i1 ],\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\tvalidate_interval: {\r\n\r\n\t\t\t\tseek: {\r\n\r\n\t\t\t\t\tvar right;\r\n\r\n\t\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\r\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\r\n\r\n\t\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\r\n\r\n\t\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\r\n\r\n\t\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t\t// binary search\r\n\r\n\t\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // seek\r\n\r\n\t\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t\t} // validate_interval\r\n\r\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t\t},\r\n\r\n\t\tsettings: null, // optional, subclass-specific settings structure\r\n\t\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t\t// --- Protected interface\r\n\r\n\t\tDefaultSettings_: {},\r\n\r\n\t\tgetSettings_: function () {\r\n\r\n\t\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t\t},\r\n\r\n\t\tcopySampleValue_: function ( index ) {\r\n\r\n\t\t\t// copies a sample value to the result buffer\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = index * stride;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// Template methods for derived classes:\r\n\r\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\t\tthrow new Error( 'call to abstract method' );\r\n\t\t\t// implementations shall return this.resultBuffer\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\r\n\r\n\t\t\t// empty\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\t//( 0, t, t0 ), returns this.resultBuffer\r\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Fast and simple cubic spline interpolant.\r\n\t *\r\n\t * It was derived from a Hermitian construction setting the first derivative\r\n\t * at each sample position to the linear slope between neighboring positions\r\n\t * over their parameter interval.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t}\r\n\r\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: CubicInterpolant,\r\n\r\n\t\tDefaultSettings_: {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\tiPrev = i1 - 2,\r\n\t\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\t\tstride = this.valueSize;\r\n\r\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\t\tthis._offsetPrev = iPrev * stride;\r\n\t\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t\t},\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tpp = p * p,\r\n\t\t\t\tppp = pp * p;\r\n\r\n\t\t\t// evaluate polynomials\r\n\r\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\t\tvar sN = wN * ppp - wN * pp;\r\n\r\n\t\t\t// combine data linearly\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: LinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset1 = i1 * stride,\r\n\t\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Interpolant that evaluates to the sample value at the position preceeding\r\n\t * the parameter.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: DiscreteInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\r\n\r\n\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A timed sequence of keyframes for a specific property.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\r\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\t}\r\n\r\n\t// Static methods\r\n\r\n\tObject.assign( KeyframeTrack, {\r\n\r\n\t\t// Serialization (in static context, because of constructor invocation\r\n\t\t// and automatic invocation of .toJSON):\r\n\r\n\t\ttoJSON: function ( track ) {\r\n\r\n\t\t\tvar trackType = track.constructor;\r\n\r\n\t\t\tvar json;\r\n\r\n\t\t\t// derived classes can define a static toJSON method\r\n\t\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\t\tjson = {\r\n\r\n\t\t\t\t\t'name': track.name,\r\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( KeyframeTrack.prototype, {\r\n\r\n\t\tconstructor: KeyframeTrack,\r\n\r\n\t\tTimeBufferType: Float32Array,\r\n\r\n\t\tValueBufferType: Float32Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\r\n\r\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\r\n\r\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tsetInterpolation: function ( interpolation ) {\r\n\r\n\t\t\tvar factoryMethod;\r\n\r\n\t\t\tswitch ( interpolation ) {\r\n\r\n\t\t\t\tcase InterpolateDiscrete:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateLinear:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateSmooth:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInterpolation: function () {\r\n\r\n\t\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\t\treturn InterpolateDiscrete;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\t\treturn InterpolateLinear;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\t\treturn InterpolateSmooth;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetValueSize: function () {\r\n\r\n\t\t\treturn this.values.length / this.times.length;\r\n\r\n\t\t},\r\n\r\n\t\t// move all keyframes either forwards or backwards in time\r\n\t\tshift: function ( timeOffset ) {\r\n\r\n\t\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\t\tscale: function ( timeScale ) {\r\n\r\n\t\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\t\ttrim: function ( startTime, endTime ) {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tnKeys = times.length,\r\n\t\t\t\tfrom = 0,\r\n\t\t\t\tto = nKeys - 1;\r\n\r\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\r\n\r\n\t\t\t\t++ from;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\r\n\r\n\t\t\t\t-- to;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\t\tif ( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\r\n\r\n\t\t\t\tvar stride = this.getValueSize();\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tvar valueSize = this.getValueSize();\r\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\r\n\t\t\t\tnKeys = times.length;\r\n\r\n\t\t\tif ( nKeys === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevTime = null;\r\n\r\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprevTime = currTime;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( values !== undefined ) {\r\n\r\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\r\n\t\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\t// removes equivalent sequential keys as common in morph target sequences\r\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\t\toptimize: function () {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\t\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n\r\n\t\t\t\twriteIndex = 1,\r\n\t\t\t\tlastIndex = times.length - 1;\r\n\r\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\r\n\r\n\t\t\t\tvar keep = false;\r\n\r\n\t\t\t\tvar time = times[ i ];\r\n\t\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t\tif ( ! smoothInterpolation ) {\r\n\r\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\r\n\t\t\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in-place compaction\r\n\r\n\t\t\t\tif ( keep ) {\r\n\r\n\t\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// flush last keyframe (compaction looks ahead)\r\n\r\n\t\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\r\n\r\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\r\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\r\n\r\n\t\t\tvar TypedKeyframeTrack = this.constructor;\r\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\r\n\r\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\r\n\t\t\ttrack.createInterpolant = this.createInterpolant;\r\n\r\n\t\t\treturn track;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of Boolean keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction BooleanKeyframeTrack( name, times, values ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values );\r\n\r\n\t}\r\n\r\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: BooleanKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'bool',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t\t// Note: Actually this track could have a optimized / compressed\r\n\t\t// representation of a single value and a custom interpolant that\r\n\t\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of keyframe values that represent color.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: ColorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'color'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t\t// Note: Very basic implementation and nothing special yet.\r\n\t\t// However, this is the place for color space parameterization.\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of numeric keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: NumberKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'number'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Spherical linear unit quaternion interpolant.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: QuaternionLinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset = i1 * stride,\r\n\r\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of quaternion keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: QuaternionKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'quaternion',\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Strings\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: StringKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'string',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of vectored keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: VectorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'vector'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Reusable set of Tracks that represent an animation.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tfunction AnimationClip( name, duration, tracks ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\r\n\t\t\tthis.resetDuration();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTrackTypeForValueTypeName( typeName ) {\r\n\r\n\t\tswitch ( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase 'scalar':\r\n\t\t\tcase 'double':\r\n\t\t\tcase 'float':\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'integer':\r\n\r\n\t\t\t\treturn NumberKeyframeTrack;\r\n\r\n\t\t\tcase 'vector':\r\n\t\t\tcase 'vector2':\r\n\t\t\tcase 'vector3':\r\n\t\t\tcase 'vector4':\r\n\r\n\t\t\t\treturn VectorKeyframeTrack;\r\n\r\n\t\t\tcase 'color':\r\n\r\n\t\t\t\treturn ColorKeyframeTrack;\r\n\r\n\t\t\tcase 'quaternion':\r\n\r\n\t\t\t\treturn QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase 'bool':\r\n\t\t\tcase 'boolean':\r\n\r\n\t\t\t\treturn BooleanKeyframeTrack;\r\n\r\n\t\t\tcase 'string':\r\n\r\n\t\t\t\treturn StringKeyframeTrack;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\r\n\r\n\t}\r\n\r\n\tfunction parseKeyframeTrack( json ) {\r\n\r\n\t\tif ( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume a constructor compatible with the base\r\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationClip, {\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tjsonTracks = json.tracks,\r\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( clip ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\t\tvar json = {\r\n\r\n\t\t\t\t'name': clip.name,\r\n\t\t\t\t'duration': clip.duration,\r\n\t\t\t\t'tracks': tracks,\r\n\t\t\t\t'uuid': clip.uuid\r\n\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t},\r\n\r\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\r\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t\t// last frame as well for perfect loop.\r\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttracks.push(\r\n\t\t\t\t\tnew NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( name, - 1, tracks );\r\n\r\n\t\t},\r\n\r\n\t\tfindByName: function ( objectOrClipArray, name ) {\r\n\r\n\t\t\tvar clipArray = objectOrClipArray;\r\n\r\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\t\tvar o = objectOrClipArray;\r\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\r\n\r\n\t\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t\t// sort morph target names into animation groups based\r\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clips = [];\r\n\r\n\t\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn clips;\r\n\r\n\t\t},\r\n\r\n\t\t// parse the animation.hierarchy format\r\n\t\tparseAnimation: function ( animation, bones ) {\r\n\r\n\t\t\tif ( ! animation ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t\t// only return track if there are actually keys.\r\n\t\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tvar clipName = animation.name || 'default';\r\n\t\t\t// automatic length determination in AnimationClip.\r\n\t\t\tvar duration = animation.length || - 1;\r\n\t\t\tvar fps = animation.fps || 30;\r\n\r\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t\t// skip empty tracks\r\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\r\n\r\n\t\t\t\t// process morph targets\r\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\r\n\r\n\t\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\t\tvar morphTargetNames = {};\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t\t// the morphTarget is named.\r\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\t\tvar times = [];\r\n\t\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\r\n\r\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( AnimationClip.prototype, {\r\n\r\n\t\tresetDuration: function () {\r\n\r\n\t\t\tvar tracks = this.tracks, duration = 0;\r\n\r\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.duration = duration;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttrim: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\toptimize: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar Cache = {\r\n\r\n\t\tenabled: false,\r\n\r\n\t\tfiles: {},\r\n\r\n\t\tadd: function ( key, file ) {\r\n\r\n\t\t\tif ( this.enabled === false ) { return; }\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\t\tthis.files[ key ] = file;\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( key ) {\r\n\r\n\t\t\tif ( this.enabled === false ) { return; }\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\t\treturn this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( key ) {\r\n\r\n\t\t\tdelete this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tclear: function () {\r\n\r\n\t\t\tthis.files = {};\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar isLoading = false;\r\n\t\tvar itemsLoaded = 0;\r\n\t\tvar itemsTotal = 0;\r\n\t\tvar urlModifier = undefined;\r\n\t\tvar handlers = [];\r\n\r\n\t\t// Refer to #5689 for the reason why we don't set .onStart\r\n\t\t// in the constructor\r\n\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\r\n\t\tthis.itemStart = function ( url ) {\r\n\r\n\t\t\titemsTotal ++;\r\n\r\n\t\t\tif ( isLoading === false ) {\r\n\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = true;\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemEnd = function ( url ) {\r\n\r\n\t\t\titemsLoaded ++;\r\n\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\t\tisLoading = false;\r\n\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemError = function ( url ) {\r\n\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\t\tscope.onError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.resolveURL = function ( url ) {\r\n\r\n\t\t\tif ( urlModifier ) {\r\n\r\n\t\t\t\treturn urlModifier( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn url;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setURLModifier = function ( transform ) {\r\n\r\n\t\t\turlModifier = transform;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.addHandler = function ( regex, loader ) {\r\n\r\n\t\t\thandlers.push( regex, loader );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.removeHandler = function ( regex ) {\r\n\r\n\t\t\tvar index = handlers.indexOf( regex );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\thandlers.splice( index, 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getHandler = function ( file ) {\r\n\r\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tvar regex = handlers[ i ];\r\n\t\t\t\tvar loader = handlers[ i + 1 ];\r\n\r\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\r\n\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\t\treturn loader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar DefaultLoadingManager = new LoadingManager();\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Loader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\t\tthis.path = '';\r\n\t\tthis.resourcePath = '';\r\n\r\n\t}\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\r\n\r\n\t\tparse: function ( /* data */ ) {},\r\n\r\n\t\tsetCrossOrigin: function ( crossOrigin ) {\r\n\r\n\t\t\tthis.crossOrigin = crossOrigin;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( path ) {\r\n\r\n\t\t\tthis.path = path;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetResourcePath: function ( resourcePath ) {\r\n\r\n\t\t\tthis.resourcePath = resourcePath;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar loading = {};\r\n\r\n\tfunction FileLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: FileLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) { url = ''; }\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if request is duplicate\r\n\r\n\t\t\tif ( loading[ url ] !== undefined ) {\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check for data: URI\r\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\r\n\r\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n\t\t\tif ( dataUriRegexResult ) {\r\n\r\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\r\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\r\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\r\n\r\n\t\t\t\tdata = decodeURIComponent( data );\r\n\r\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar response;\r\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\r\n\r\n\t\t\t\t\tswitch ( responseType ) {\r\n\r\n\t\t\t\t\t\tcase 'arraybuffer':\r\n\t\t\t\t\t\tcase 'blob':\r\n\r\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\r\n\r\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tresponse = view.buffer;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'document':\r\n\r\n\t\t\t\t\t\t\tvar parser = new DOMParser();\r\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'json':\r\n\r\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault: // 'text' or other\r\n\r\n\t\t\t\t\t\t\tresponse = data;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\r\n\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Initialise array for duplicate requests\r\n\r\n\t\t\t\tloading[ url ] = [];\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\r\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\t\t\tvar response = this.response;\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\r\n\r\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\r\n\r\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\r\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\r\n\t\t\t\t\t\tCache.add( url, response );\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\r\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\r\n\r\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\r\n\r\n\t\t\t\tfor ( var header in this.requestHeader ) {\r\n\r\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn request;\r\n\r\n\t\t},\r\n\r\n\t\tsetResponseType: function ( value ) {\r\n\r\n\t\t\tthis.responseType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetWithCredentials: function ( value ) {\r\n\r\n\t\t\tthis.withCredentials = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMimeType: function ( value ) {\r\n\r\n\t\t\tthis.mimeType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRequestHeader: function ( value ) {\r\n\r\n\t\t\tthis.requestHeader = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io/\r\n\t */\r\n\r\n\tfunction AnimationLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: AnimationLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n\t *\r\n\t * Sub classes have to implement the parse() method which will be used in load().\r\n\t */\r\n\r\n\tfunction CompressedTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: CompressedTextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar images = [];\r\n\r\n\t\t\tvar texture = new CompressedTexture();\r\n\t\t\ttexture.image = images;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\r\n\r\n\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\tvar loaded = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Nikos M. / https://github.com/foo123/\r\n\t *\r\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n\t *\r\n\t * Sub classes have to implement the parse() method which will be used in load().\r\n\t */\r\n\r\n\tfunction DataTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: DataTextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar texture = new DataTexture();\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texData = scope.parse( buffer );\r\n\r\n\t\t\t\tif ( ! texData ) { return; }\r\n\r\n\t\t\t\tif ( texData.image !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t\t} else if ( texData.data !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\r\n\r\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\r\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\r\n\r\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\r\n\r\n\t\t\t\tif ( texData.format !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( texData.type !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ImageLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ImageLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\r\n\r\n\t\t\tfunction onImageLoad() {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tCache.add( url, this );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction onImageError( event ) {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tif ( onError ) { onError( event ); }\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\r\n\t\t\timage.addEventListener( 'error', onImageError, false );\r\n\r\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\r\n\r\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\timage.src = url;\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction CubeTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: CubeTextureLoader,\r\n\r\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new CubeTexture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\t\tloaded ++;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, undefined, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction TextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: TextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new Texture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\t\ttexture.image = image;\r\n\r\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\r\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\r\n\r\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Extensible curve object\r\n\t *\r\n\t * Some common of curve methods:\r\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\r\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\r\n\t * .getPoints(), .getSpacedPoints()\r\n\t * .getLength()\r\n\t * .updateArcLengths()\r\n\t *\r\n\t * This following curves inherit from THREE.Curve:\r\n\t *\r\n\t * -- 2D curves --\r\n\t * THREE.ArcCurve\r\n\t * THREE.CubicBezierCurve\r\n\t * THREE.EllipseCurve\r\n\t * THREE.LineCurve\r\n\t * THREE.QuadraticBezierCurve\r\n\t * THREE.SplineCurve\r\n\t *\r\n\t * -- 3D curves --\r\n\t * THREE.CatmullRomCurve3\r\n\t * THREE.CubicBezierCurve3\r\n\t * THREE.LineCurve3\r\n\t * THREE.QuadraticBezierCurve3\r\n\t *\r\n\t * A series of curves can be represented as a THREE.CurvePath.\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tAbstract Curve base class\r\n\t **************************************************************/\r\n\r\n\tfunction Curve() {\r\n\r\n\t\tthis.type = 'Curve';\r\n\r\n\t\tthis.arcLengthDivisions = 200;\r\n\r\n\t}\r\n\r\n\tObject.assign( Curve.prototype, {\r\n\r\n\t\t// Virtual base class method to overwrite and implement in subclasses\r\n\t\t//\t- t [0 .. 1]\r\n\r\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// Get point at relative position in curve according to arc length\r\n\t\t// - u [0 .. 1]\r\n\r\n\t\tgetPointAt: function ( u, optionalTarget ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getPoint( t, optionalTarget );\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPoint( t )\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPointAt( u )\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get total curve arc length\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lengths = this.getLengths();\r\n\t\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// Get list of cumulative segment lengths\r\n\r\n\t\tgetLengths: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\r\n\r\n\t\t\tif ( this.cacheArcLengths &&\r\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\r\n\t\t\t\t! this.needsUpdate ) {\r\n\r\n\t\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.needsUpdate = false;\r\n\r\n\t\t\tvar cache = [];\r\n\t\t\tvar current, last = this.getPoint( 0 );\r\n\t\t\tvar p, sum = 0;\r\n\r\n\t\t\tcache.push( 0 );\r\n\r\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\t\tcurrent = this.getPoint( p / divisions );\r\n\t\t\t\tsum += current.distanceTo( last );\r\n\t\t\t\tcache.push( sum );\r\n\t\t\t\tlast = current;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n\r\n\t\t},\r\n\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.getLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\t\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\t\tif ( distance ) {\r\n\r\n\t\t\t\ttargetArcLength = distance;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\t\twhile ( low <= high ) {\r\n\r\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\thigh = i;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// DONE\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti = high;\r\n\r\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\t\treturn i / ( il - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t\t// add that fractional amount to t\r\n\r\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\t// Returns a unit vector tangent at t\r\n\t\t// In case any sub curve does not implement its tangent derivation,\r\n\t\t// 2 points a small delta apart will be used to find its gradient\r\n\t\t// which seems to give a reasonable approximation\r\n\r\n\t\tgetTangent: function ( t ) {\r\n\r\n\t\t\tvar delta = 0.0001;\r\n\t\t\tvar t1 = t - delta;\r\n\t\t\tvar t2 = t + delta;\r\n\r\n\t\t\t// Capping in case of danger\r\n\r\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\r\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\r\n\r\n\t\t\tvar pt1 = this.getPoint( t1 );\r\n\t\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\t\treturn vec.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tgetTangentAt: function ( u ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getTangent( t );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\r\n\r\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\r\n\t\t\tvar normal = new Vector3();\r\n\r\n\t\t\tvar tangents = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar binormals = [];\r\n\r\n\t\t\tvar vec = new Vector3();\r\n\t\t\tvar mat = new Matrix4();\r\n\r\n\t\t\tvar i, u, theta;\r\n\r\n\t\t\t// compute the tangent vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tu = i / segments;\r\n\r\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\r\n\t\t\t\ttangents[ i ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t\t// and in the direction of the minimum tangent xyz component\r\n\r\n\t\t\tnormals[ 0 ] = new Vector3();\r\n\t\t\tbinormals[ 0 ] = new Vector3();\r\n\t\t\tvar min = Number.MAX_VALUE;\r\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\r\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\r\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\t\tif ( tx <= min ) {\r\n\r\n\t\t\t\tmin = tx;\r\n\t\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ty <= min ) {\r\n\r\n\t\t\t\tmin = ty;\r\n\t\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tz <= min ) {\r\n\r\n\t\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\r\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvec.normalize();\r\n\r\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\t\t\tif ( closed === true ) {\r\n\r\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\r\n\t\t\t\ttheta /= segments;\r\n\r\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\r\n\r\n\t\t\t\t\ttheta = - theta;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\t\t// twist a little...\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttangents: tangents,\r\n\t\t\t\tnormals: normals,\r\n\t\t\t\tbinormals: binormals\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Curve',\r\n\t\t\t\t\tgenerator: 'Curve.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'EllipseCurve';\r\n\r\n\t\tthis.aX = aX || 0;\r\n\t\tthis.aY = aY || 0;\r\n\r\n\t\tthis.xRadius = xRadius || 1;\r\n\t\tthis.yRadius = yRadius || 1;\r\n\r\n\t\tthis.aStartAngle = aStartAngle || 0;\r\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\r\n\r\n\t\tthis.aClockwise = aClockwise || false;\r\n\r\n\t\tthis.aRotation = aRotation || 0;\r\n\r\n\t}\r\n\r\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\r\n\tEllipseCurve.prototype.constructor = EllipseCurve;\r\n\r\n\tEllipseCurve.prototype.isEllipseCurve = true;\r\n\r\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar twoPi = Math.PI * 2;\r\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t\t// ensures that deltaAngle is 0 .. 2 PI\r\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\r\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\r\n\r\n\t\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\t\tif ( samePoints ) {\r\n\r\n\t\t\t\tdeltaAngle = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\t\tvar cos = Math.cos( this.aRotation );\r\n\t\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\t\tvar tx = x - this.aX;\r\n\t\t\tvar ty = y - this.aY;\r\n\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( x, y );\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.aX = source.aX;\r\n\t\tthis.aY = source.aY;\r\n\r\n\t\tthis.xRadius = source.xRadius;\r\n\t\tthis.yRadius = source.yRadius;\r\n\r\n\t\tthis.aStartAngle = source.aStartAngle;\r\n\t\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\t\tthis.aClockwise = source.aClockwise;\r\n\r\n\t\tthis.aRotation = source.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\tEllipseCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.aX = this.aX;\r\n\t\tdata.aY = this.aY;\r\n\r\n\t\tdata.xRadius = this.xRadius;\r\n\t\tdata.yRadius = this.yRadius;\r\n\r\n\t\tdata.aStartAngle = this.aStartAngle;\r\n\t\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\t\tdata.aClockwise = this.aClockwise;\r\n\r\n\t\tdata.aRotation = this.aRotation;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.aX = json.aX;\r\n\t\tthis.aY = json.aY;\r\n\r\n\t\tthis.xRadius = json.xRadius;\r\n\t\tthis.yRadius = json.yRadius;\r\n\r\n\t\tthis.aStartAngle = json.aStartAngle;\r\n\t\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\t\tthis.aClockwise = json.aClockwise;\r\n\r\n\t\tthis.aRotation = json.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\tthis.type = 'ArcCurve';\r\n\r\n\t}\r\n\r\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\r\n\tArcCurve.prototype.constructor = ArcCurve;\r\n\r\n\tArcCurve.prototype.isArcCurve = true;\r\n\r\n\t/**\r\n\t * @author zz85 https://github.com/zz85\r\n\t *\r\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\r\n\t * cusps and self-intersections in non-uniform catmull rom curves.\r\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n\t *\r\n\t * curve.type accepts centripetal(default), chordal and catmullrom\r\n\t * curve.tension is used for catmullrom which defaults to 0.5\r\n\t */\r\n\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t\t/*\r\n\t\t * Compute coefficients for a cubic polynomial\r\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t\t * such that\r\n\t\t *   p(0) = x0, p(1) = x1\r\n\t\t *  and\r\n\t\t *   p'(0) = t0, p'(1) = t1.\r\n\t\t */\r\n\t\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\t\tc0 = x0;\r\n\t\t\tc1 = t0;\r\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\t\tt1 *= dt1;\r\n\t\t\t\tt2 *= dt1;\r\n\r\n\t\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tcalc: function ( t ) {\r\n\r\n\t\t\t\tvar t2 = t * t;\r\n\t\t\t\tvar t3 = t2 * t;\r\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar tmp = new Vector3();\r\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\r\n\r\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points || [];\r\n\t\tthis.closed = closed || false;\r\n\t\tthis.curveType = curveType || 'centripetal';\r\n\t\tthis.tension = tension || 0.5;\r\n\r\n\t}\r\n\r\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\r\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\r\n\r\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar l = points.length;\r\n\r\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tp1 = points[ intPoint % l ];\r\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\r\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\r\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Bezier Curves formulas obtained from\r\n\t * http://en.wikipedia.org/wiki/Bézier_curve\r\n\t */\r\n\r\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction QuadraticBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP1( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP2( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\r\n\r\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\r\n\t\t\tQuadraticBezierP2( t, p2 );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction CubicBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP1( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP2( t, p ) {\r\n\r\n\t\treturn 3 * ( 1 - t ) * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP3( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\r\n\t\t\tCubicBezierP3( t, p3 );\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\t\tthis.v3 = v3 || new Vector2();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\r\n\r\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\r\n\r\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\t\tthis.v3 = v3 || new Vector3();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\r\n\r\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\r\n\r\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\r\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve';\r\n\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tLineCurve.prototype = Object.create( Curve.prototype );\r\n\tLineCurve.prototype.constructor = LineCurve;\r\n\r\n\tLineCurve.prototype.isLineCurve = true;\r\n\r\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\r\n\r\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\t\treturn tangent.normalize();\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve3( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve3';\r\n\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tLineCurve3.prototype = Object.create( Curve.prototype );\r\n\tLineCurve3.prototype.constructor = LineCurve3;\r\n\r\n\tLineCurve3.prototype.isLineCurve3 = true;\r\n\r\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\r\n\r\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\r\n\r\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\r\n\r\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\r\n\r\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\r\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'SplineCurve';\r\n\r\n\t\tthis.points = points || [];\r\n\r\n\t}\r\n\r\n\tSplineCurve.prototype = Object.create( Curve.prototype );\r\n\tSplineCurve.prototype.constructor = SplineCurve;\r\n\r\n\tSplineCurve.prototype.isSplineCurve = true;\r\n\r\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar p = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar p1 = points[ intPoint ];\r\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tpoint.set(\r\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Curves = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tArcCurve: ArcCurve,\r\n\t\tCatmullRomCurve3: CatmullRomCurve3,\r\n\t\tCubicBezierCurve: CubicBezierCurve,\r\n\t\tCubicBezierCurve3: CubicBezierCurve3,\r\n\t\tEllipseCurve: EllipseCurve,\r\n\t\tLineCurve: LineCurve,\r\n\t\tLineCurve3: LineCurve3,\r\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\r\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\r\n\t\tSplineCurve: SplineCurve\r\n\t});\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tCurved Path - a curve path is simply a array of connected\r\n\t *  curves, but retains the api of a curve\r\n\t **************************************************************/\r\n\r\n\tfunction CurvePath() {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CurvePath';\r\n\r\n\t\tthis.curves = [];\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\r\n\t}\r\n\r\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\r\n\r\n\t\tconstructor: CurvePath,\r\n\r\n\t\tadd: function ( curve ) {\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t},\r\n\r\n\t\tclosePath: function () {\r\n\r\n\t\t\t// Add a line curve if start and end of lines are not connected\r\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// To get accurate point with reference to\r\n\t\t// entire path distance at time t,\r\n\t\t// following has to be done:\r\n\r\n\t\t// 1. Length of each sub path have to be known\r\n\t\t// 2. Locate and identify type of curve\r\n\t\t// 3. Get t for the curve\r\n\t\t// 4. Return curve.getPointAt(t')\r\n\r\n\t\tgetPoint: function ( t ) {\r\n\r\n\t\t\tvar d = t * this.getLength();\r\n\t\t\tvar curveLengths = this.getCurveLengths();\r\n\t\t\tvar i = 0;\r\n\r\n\t\t\t// To think about boundaries points.\r\n\r\n\t\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\t\tvar segmentLength = curve.getLength();\r\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n\r\n\t\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t\t},\r\n\r\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t\t// getPoint() depends on getLength\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lens = this.getCurveLengths();\r\n\t\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// cacheLengths must be recalculated.\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.cacheLengths = null;\r\n\t\t\tthis.getCurveLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Compute lengths and cache them\r\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\t\tgetCurveLengths: function () {\r\n\r\n\t\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\t\treturn this.cacheLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Get length of sub-curve\r\n\t\t\t// Push sums into cached array\r\n\r\n\t\t\tvar lengths = [], sums = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\t\tlengths.push( sums );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheLengths = lengths;\r\n\r\n\t\t\treturn lengths;\r\n\r\n\t\t},\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tdivisions = divisions || 12;\r\n\r\n\t\t\tvar points = [], last;\r\n\r\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\r\n\r\n\t\t\t\tvar curve = curves[ i ];\r\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\r\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\r\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\r\n\t\t\t\t\t\t\t: divisions;\r\n\r\n\t\t\t\tvar pts = curve.getPoints( resolution );\r\n\r\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\t\tvar point = pts[ j ];\r\n\r\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\r\n\r\n\t\t\t\t\tpoints.push( point );\r\n\t\t\t\t\tlast = point;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = source.curves[ i ];\r\n\r\n\t\t\t\tthis.curves.push( curve.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoClose = source.autoClose;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.autoClose = this.autoClose;\r\n\t\t\tdata.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\t\t\t\tdata.curves.push( curve.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.autoClose = json.autoClose;\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = json.curves[ i ];\r\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Creates free form 2d path using series of points, lines or curves.\r\n\t **/\r\n\r\n\tfunction Path( points ) {\r\n\r\n\t\tCurvePath.call( this );\r\n\r\n\t\tthis.type = 'Path';\r\n\r\n\t\tthis.currentPoint = new Vector2();\r\n\r\n\t\tif ( points ) {\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\r\n\r\n\t\tconstructor: Path,\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tvar curve = new QuadraticBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tvar curve = new CubicBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\t\tvar curve = new SplineCurve( npts );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurvePath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Defines a 2d shape plane using paths.\r\n\t **/\r\n\r\n\t// STEP 1 Create a path.\r\n\t// STEP 2 Turn path into shape.\r\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n\t// STEP 3a - Extract points from each shape, turn to vertices\r\n\t// STEP 3b - Triangulate each shape, add faces.\r\n\r\n\tfunction Shape( points ) {\r\n\r\n\t\tPath.call( this, points );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.type = 'Shape';\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t}\r\n\r\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\r\n\r\n\t\tconstructor: Shape,\r\n\r\n\t\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\t\tvar holesPts = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn holesPts;\r\n\r\n\t\t},\r\n\r\n\t\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\t\textractPoints: function ( divisions ) {\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tPath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = source.holes[ i ];\r\n\r\n\t\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Path.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = this.holes[ i ];\r\n\t\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tPath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.uuid = json.uuid;\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = json.holes[ i ];\r\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Light( color, intensity ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Light';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\t\tthis.receiveShadow = undefined;\r\n\r\n\t}\r\n\r\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Light,\r\n\r\n\t\tisLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.color.copy( source.color );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.color = this.color.getHex();\r\n\t\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\r\n\r\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\r\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\r\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\r\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\r\n\r\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLight.call( this, skyColor, intensity );\r\n\r\n\t\tthis.type = 'HemisphereLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.groundColor = new Color( groundColor );\r\n\r\n\t}\r\n\r\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLight,\r\n\r\n\t\tisHemisphereLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LightShadow( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.bias = 0;\r\n\t\tthis.radius = 1;\r\n\r\n\t\tthis.mapSize = new Vector2( 512, 512 );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.mapPass = null;\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t\tthis._frustum = new Frustum();\r\n\t\tthis._frameExtents = new Vector2( 1, 1 );\r\n\r\n\t\tthis._viewportCount = 1;\r\n\r\n\t\tthis._viewports = [\r\n\r\n\t\t\tnew Vector4( 0, 0, 1, 1 )\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( LightShadow.prototype, {\r\n\r\n\t\t_projScreenMatrix: new Matrix4(),\r\n\r\n\t\t_lightPositionWorld: new Vector3(),\r\n\r\n\t\t_lookTarget: new Vector3(),\r\n\r\n\t\tgetViewportCount: function () {\r\n\r\n\t\t\treturn this._viewportCount;\r\n\r\n\t\t},\r\n\r\n\t\tgetFrustum: function () {\r\n\r\n\t\t\treturn this._frustum;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tvar shadowCamera = this.camera,\r\n\t\t\t\tshadowMatrix = this.matrix,\r\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\r\n\t\t\t\tlookTarget = this._lookTarget,\r\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\r\n\r\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\r\n\r\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\tshadowCamera.lookAt( lookTarget );\r\n\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\r\n\r\n\t\t\tshadowMatrix.set(\r\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t);\r\n\r\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t},\r\n\r\n\t\tgetViewport: function ( viewportIndex ) {\r\n\r\n\t\t\treturn this._viewports[ viewportIndex ];\r\n\r\n\t\t},\r\n\r\n\t\tgetFrameExtents: function () {\r\n\r\n\t\t\treturn this._frameExtents;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.camera = source.camera.clone();\r\n\r\n\t\t\tthis.bias = source.bias;\r\n\t\t\tthis.radius = source.radius;\r\n\r\n\t\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\r\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\r\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\r\n\r\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\r\n\t\t\tdelete object.camera.matrix;\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction SpotLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: SpotLightShadow,\r\n\r\n\t\tisSpotLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tvar camera = this.camera;\r\n\r\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\r\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\r\n\t\t\tvar far = light.distance || camera.far;\r\n\r\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\t\tcamera.fov = fov;\r\n\t\t\t\tcamera.aspect = aspect;\r\n\t\t\t\tcamera.far = far;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'SpotLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / Math.PI;\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new SpotLightShadow();\r\n\r\n\t}\r\n\r\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: SpotLight,\r\n\r\n\t\tisSpotLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.angle = source.angle;\r\n\t\t\tthis.penumbra = source.penumbra;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction PointLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n\t\tthis._frameExtents = new Vector2( 4, 2 );\r\n\r\n\t\tthis._viewportCount = 6;\r\n\r\n\t\tthis._viewports = [\r\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t// following orientation:\r\n\t\t\t//\r\n\t\t\t//  xzXZ\r\n\t\t\t//   y Y\r\n\t\t\t//\r\n\t\t\t// X - Positive x direction\r\n\t\t\t// x - Negative x direction\r\n\t\t\t// Y - Positive y direction\r\n\t\t\t// y - Negative y direction\r\n\t\t\t// Z - Positive z direction\r\n\t\t\t// z - Negative z direction\r\n\r\n\t\t\t// positive X\r\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\r\n\t\t\t// negative X\r\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\r\n\t\t\t// positive Z\r\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\r\n\t\t\t// negative Z\r\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\r\n\t\t\t// positive Y\r\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\r\n\t\t\t// negative Y\r\n\t\t\tnew Vector4( 1, 0, 1, 1 )\r\n\t\t];\r\n\r\n\t\tthis._cubeDirections = [\r\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\r\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\r\n\t\tthis._cubeUps = [\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: PointLightShadow,\r\n\r\n\t\tisPointLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light, viewportIndex ) {\r\n\r\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\r\n\r\n\t\t\tvar camera = this.camera,\r\n\t\t\t\tshadowMatrix = this.matrix,\r\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\r\n\t\t\t\tlookTarget = this._lookTarget,\r\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\r\n\r\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tcamera.position.copy( lightPositionWorld );\r\n\r\n\t\t\tlookTarget.copy( camera.position );\r\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\r\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\r\n\t\t\tcamera.lookAt( lookTarget );\r\n\t\t\tcamera.updateMatrixWorld();\r\n\r\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\r\n\r\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction PointLight( color, intensity, distance, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'PointLight';\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new PointLightShadow();\r\n\r\n\t}\r\n\r\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: PointLight,\r\n\r\n\t\tisPointLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author arose / http://github.com/arose\r\n\t */\r\n\r\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\r\n\t\tthis.right = ( right !== undefined ) ? right : 1;\r\n\t\tthis.top = ( top !== undefined ) ? top : 1;\r\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: OrthographicCamera,\r\n\r\n\t\tisOrthographicCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.left = source.left;\r\n\t\t\tthis.right = source.right;\r\n\t\t\tthis.top = source.top;\r\n\t\t\tthis.bottom = source.bottom;\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\r\n\t\t\tthis.zoom = source.zoom;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\t\tvar left = cx - dx;\r\n\t\t\tvar right = cx + dx;\r\n\t\t\tvar top = cy + dy;\r\n\t\t\tvar bottom = cy - dy;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\r\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\r\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\r\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\r\n\r\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\r\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\r\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\r\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\t\t\tdata.object.left = this.left;\r\n\t\t\tdata.object.right = this.right;\r\n\t\t\tdata.object.top = this.top;\r\n\t\t\tdata.object.bottom = this.bottom;\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\r\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectionalLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLightShadow,\r\n\r\n\t\tisDirectionalLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DirectionalLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'DirectionalLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.shadow = new DirectionalLightShadow();\r\n\r\n\t}\r\n\r\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLight,\r\n\r\n\t\tisDirectionalLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AmbientLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'AmbientLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t}\r\n\r\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: AmbientLight,\r\n\r\n\t\tisAmbientLight: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\tfunction RectAreaLight( color, intensity, width, height ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'RectAreaLight';\r\n\r\n\t\tthis.width = ( width !== undefined ) ? width : 10;\r\n\t\tthis.height = ( height !== undefined ) ? height : 10;\r\n\r\n\t}\r\n\r\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: RectAreaLight,\r\n\r\n\t\tisRectAreaLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.width = this.width;\r\n\t\t\tdata.object.height = this.height;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction MaterialLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t\tthis.textures = {};\r\n\r\n\t}\r\n\r\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: MaterialLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar textures = this.textures;\r\n\r\n\t\t\tfunction getTexture( name ) {\r\n\r\n\t\t\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn textures[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar material = new Materials[ json.type ]();\r\n\r\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\r\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\r\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\r\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\r\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\r\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\r\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\r\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\r\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\r\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\r\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\r\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\r\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\r\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\r\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\r\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\r\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\r\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\r\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\r\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\r\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\r\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\r\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\r\n\r\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\r\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\r\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\r\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\r\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\r\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\r\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\r\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\r\n\r\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\r\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\r\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\r\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\r\n\r\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\r\n\r\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\r\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\r\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\r\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\r\n\r\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\r\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\r\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\r\n\r\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\r\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\r\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\r\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\r\n\r\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\r\n\r\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\r\n\r\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\r\n\r\n\t\t\t// Shader Material\r\n\r\n\t\t\tif ( json.uniforms !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in json.uniforms ) {\r\n\r\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\r\n\r\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\r\n\r\n\t\t\t\t\tswitch ( uniform.type ) {\r\n\r\n\t\t\t\t\t\tcase 't':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v2':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'm3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\r\n\r\n\t\t\t\t\t\tcase 'm4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\r\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\r\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\r\n\r\n\t\t\tif ( json.extensions !== undefined ) {\r\n\r\n\t\t\t\tfor ( var key in json.extensions ) {\r\n\r\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Deprecated\r\n\r\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\r\n\r\n\t\t\t// for PointsMaterial\r\n\r\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\r\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\r\n\r\n\t\t\t// maps\r\n\r\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\r\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\r\n\r\n\t\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\r\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\r\n\r\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\r\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\r\n\t\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\r\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\r\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\r\n\r\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\r\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\r\n\r\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\r\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\r\n\r\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\r\n\r\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\r\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\r\n\r\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\r\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\r\n\r\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\r\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\r\n\r\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\r\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\r\n\r\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\r\n\r\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\r\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t},\r\n\r\n\t\tsetTextures: function ( value ) {\r\n\r\n\t\t\tthis.textures = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Don McCurdy / https://www.donmccurdy.com\r\n\t */\r\n\r\n\tvar LoaderUtils = {\r\n\r\n\t\tdecodeText: function ( array ) {\r\n\r\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\r\n\r\n\t\t\t\treturn new TextDecoder().decode( array );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n\t\t\tvar s = '';\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// Implicitly assumes little-endian.\r\n\t\t\t\ts += String.fromCharCode( array[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\t// merges multi-byte utf-8 characters.\r\n\r\n\t\t\t\treturn decodeURIComponent( escape( s ) );\r\n\r\n\t\t\t} catch ( e ) { // see #16358\r\n\r\n\t\t\t\treturn s;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tvar index = url.lastIndexOf( '/' );\r\n\r\n\t\t\tif ( index === - 1 ) { return './'; }\r\n\r\n\t\t\treturn url.substr( 0, index + 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferGeometry() {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.maxInstancedCount = undefined;\r\n\r\n\t}\r\n\r\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferGeometry,\r\n\r\n\t\tisInstancedBufferGeometry: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\r\n\r\n\t\t\tdata.isInstancedBufferGeometry = true;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\r\n\r\n\t\tif ( typeof ( normalized ) === 'number' ) {\r\n\r\n\t\t\tmeshPerAttribute = normalized;\r\n\r\n\t\t\tnormalized = false;\r\n\r\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\r\n\r\n\t\t}\r\n\r\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferAttribute,\r\n\r\n\t\tisInstancedBufferAttribute: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ()\t{\r\n\r\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\t\tdata.isInstancedBufferAttribute = true;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferGeometryLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometryLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\r\n\r\n\t\t\tvar index = json.data.index;\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = json.data.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\r\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\r\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\r\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = json.data.morphAttributes;\r\n\r\n\t\t\tif ( morphAttributes ) {\r\n\r\n\t\t\t\tfor ( var key in morphAttributes ) {\r\n\r\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\r\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\r\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\r\n\t\t\t\t\t\tarray.push( bufferAttribute );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\r\n\r\n\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\tgeometry.morphTargetsRelative = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\t\tvar center = new Vector3();\r\n\r\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.name ) { geometry.name = json.name; }\r\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TYPED_ARRAYS = {\r\n\t\tInt8Array: Int8Array,\r\n\t\tUint8Array: Uint8Array,\r\n\t\t// Workaround for IE11 pre KB2929437. See #11440\r\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\r\n\t\tInt16Array: Int16Array,\r\n\t\tUint16Array: Uint16Array,\r\n\t\tInt32Array: Int32Array,\r\n\t\tUint32Array: Uint32Array,\r\n\t\tFloat32Array: Float32Array,\r\n\t\tFloat64Array: Float64Array\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ObjectLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ObjectLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\t\t\tthis.resourcePath = this.resourcePath || path;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json = null;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\r\n\r\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.parse( json, onLoad );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json, onLoad ) {\r\n\r\n\t\t\tvar shapes = this.parseShape( json.shapes );\r\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\r\n\r\n\t\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tvar textures = this.parseTextures( json.textures, images );\r\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\t\tif ( json.animations ) {\r\n\r\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t},\r\n\r\n\t\tparseShape: function ( json ) {\r\n\r\n\t\t\tvar shapes = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\r\n\r\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t},\r\n\r\n\t\tparseGeometries: function ( json, shapes ) {\r\n\r\n\t\t\tvar geometries = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar geometry;\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ConeGeometry':\r\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TubeGeometry':\r\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\r\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.closed\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'LatheGeometry':\r\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\r\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.vertices,\r\n\t\t\t\t\t\t\t\tdata.indices,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.details\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ShapeGeometry':\r\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.curveSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\r\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\r\n\r\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.options\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BufferGeometry':\r\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\r\n\r\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\r\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\r\n\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\r\n\r\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometries;\r\n\r\n\t\t},\r\n\r\n\t\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\t\tvar cache = {}; // MultiMaterial\r\n\t\t\tvar materials = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar loader = new MaterialLoader();\r\n\t\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\r\n\r\n\t\t\t\t\t\t// Deprecated\r\n\r\n\t\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materials;\r\n\r\n\t\t},\r\n\r\n\t\tparseAnimations: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( data );\r\n\r\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t},\r\n\r\n\t\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\t\tvar scope = this;\r\n\t\t\tvar images = {};\r\n\r\n\t\t\tfunction loadImage( url ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, undefined, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\t\tvar manager = new LoadingManager( onLoad );\r\n\r\n\t\t\t\tvar loader = new ImageLoader( manager );\r\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar image = json[ i ];\r\n\t\t\t\t\tvar url = image.url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\t\t\t// load array of images e.g CubeTexture\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\r\n\r\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\r\n\r\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// load single image\r\n\r\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn images;\r\n\r\n\t\t},\r\n\r\n\t\tparseTextures: function ( json, images ) {\r\n\r\n\t\t\tfunction parseConstant( value, type ) {\r\n\r\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\t\treturn type[ value ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar texture;\r\n\r\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\r\n\r\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\r\n\r\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\r\n\r\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\r\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\r\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\r\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\r\n\r\n\t\t\t\t\tif ( data.wrap !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\r\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\r\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\r\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\r\n\r\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\r\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\r\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\r\n\r\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\r\n\r\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\r\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\r\n\r\n\t\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures;\r\n\r\n\t\t},\r\n\r\n\t\tparseObject: function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) { return undefined; }\r\n\r\n\t\t\t\tif ( Array.isArray( name ) ) {\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar uuid = name[ i ];\r\n\r\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new Scene();\r\n\r\n\t\t\t\t\tif ( data.background !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\r\n\r\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.fog !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\r\n\r\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\r\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\r\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\r\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\r\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\r\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RectAreaLight':\r\n\r\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SkinnedMesh':\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'InstancedMesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\t\t\t\t\tvar count = data.count;\r\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\r\n\r\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\r\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineLoop':\r\n\r\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineSegments':\r\n\r\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\r\n\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tobject.matrix.fromArray( data.matrix );\r\n\r\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\r\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\r\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\r\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\r\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\r\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\r\n\r\n\t\t\tif ( data.shadow ) {\r\n\r\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\r\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\r\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\r\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\r\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\r\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\r\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\r\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\r\n\r\n\t\t\tif ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tvar children = data.children;\r\n\r\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TEXTURE_MAPPING = {\r\n\t\tUVMapping: UVMapping,\r\n\t\tCubeReflectionMapping: CubeReflectionMapping,\r\n\t\tCubeRefractionMapping: CubeRefractionMapping,\r\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\r\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\r\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\r\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\r\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\r\n\t};\r\n\r\n\tvar TEXTURE_WRAPPING = {\r\n\t\tRepeatWrapping: RepeatWrapping,\r\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\r\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\r\n\t};\r\n\r\n\tvar TEXTURE_FILTER = {\r\n\t\tNearestFilter: NearestFilter,\r\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\r\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\r\n\t\tLinearFilter: LinearFilter,\r\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\r\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\r\n\t};\r\n\r\n\t/**\r\n\t * @author thespite / http://clicktorelease.com/\r\n\t */\r\n\r\n\r\n\tfunction ImageBitmapLoader( manager ) {\r\n\r\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof fetch === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t\tthis.options = undefined;\r\n\r\n\t}\r\n\r\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ImageBitmapLoader,\r\n\r\n\t\tsetOptions: function setOptions( options ) {\r\n\r\n\t\t\tthis.options = options;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) { url = ''; }\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfetch( url ).then( function ( res ) {\r\n\r\n\t\t\t\treturn res.blob();\r\n\r\n\t\t\t} ).then( function ( blob ) {\r\n\r\n\t\t\t\tif ( scope.options === undefined ) {\r\n\r\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\r\n\t\t\t\t\treturn createImageBitmap( blob );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} ).then( function ( imageBitmap ) {\r\n\r\n\t\t\t\tCache.add( url, imageBitmap );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} ).catch( function ( e ) {\r\n\r\n\t\t\t\tif ( onError ) { onError( e ); }\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\r\n\t **/\r\n\r\n\tfunction ShapePath() {\r\n\r\n\t\tthis.type = 'ShapePath';\r\n\r\n\t\tthis.color = new Color();\r\n\r\n\t\tthis.subPaths = [];\r\n\t\tthis.currentPath = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( ShapePath.prototype, {\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath = new Path();\r\n\t\t\tthis.subPaths.push( this.currentPath );\r\n\t\t\tthis.currentPath.moveTo( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath.lineTo( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts ) {\r\n\r\n\t\t\tthis.currentPath.splineThru( pts );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoShapes: function ( isCCW, noHoles ) {\r\n\r\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\t\tvar shapes = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\t\tvar tmpShape = new Shape();\r\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\t\tvar inside = false;\r\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\r\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t// not parallel\r\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\r\n\r\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\r\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\r\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\r\n\t\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tinside;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\r\n\r\n\t\t\tvar subPaths = this.subPaths;\r\n\t\t\tif ( subPaths.length === 0 ) { return []; }\r\n\r\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\r\n\r\n\r\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\t\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\t\ttmpShape = new Shape();\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\t\tvar betterShapeHoles = [];\r\n\t\t\tvar newShapes = [];\r\n\t\t\tvar newShapeHoles = [];\r\n\t\t\tvar mainIdx = 0;\r\n\t\t\tvar tmpPoints;\r\n\r\n\t\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\t\tif ( solid ) {\r\n\r\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\r\n\r\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\r\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\r\n\r\n\r\n\t\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\t\tvar ambiguous = false;\r\n\t\t\t\tvar toChange = [];\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\r\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tmpHoles;\r\n\r\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction Font( data ) {\r\n\r\n\t\tthis.type = 'Font';\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\tObject.assign( Font.prototype, {\r\n\r\n\t\tisFont: true,\r\n\r\n\t\tgenerateShapes: function ( text, size ) {\r\n\r\n\t\t\tif ( size === undefined ) { size = 100; }\r\n\r\n\t\t\tvar shapes = [];\r\n\t\t\tvar paths = createPaths( text, size, this.data );\r\n\r\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction createPaths( text, size, data ) {\r\n\r\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\r\n\t\tvar scale = size / data.resolution;\r\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\r\n\r\n\t\tvar paths = [];\r\n\r\n\t\tvar offsetX = 0, offsetY = 0;\r\n\r\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\tvar char = chars[ i ];\r\n\r\n\t\t\tif ( char === '\\n' ) {\r\n\r\n\t\t\t\toffsetX = 0;\r\n\t\t\t\toffsetY -= line_height;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\r\n\t\t\t\toffsetX += ret.offsetX;\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\r\n\t}\r\n\r\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\r\n\r\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\r\n\r\n\t\tif ( ! glyph ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar path = new ShapePath();\r\n\r\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { offsetX: glyph.ha * scale, path: path };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction FontLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: FontLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar font = scope.parse( json );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\treturn new Font( json );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _context;\r\n\r\n\tvar AudioContext = {\r\n\r\n\t\tgetContext: function () {\r\n\r\n\t\t\tif ( _context === undefined ) {\r\n\r\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn _context;\r\n\r\n\t\t},\r\n\r\n\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t_context = value;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction AudioLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: AudioLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\r\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\r\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\r\n\r\n\t\t\t\tvar context = AudioContext.getContext();\r\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\r\n\r\n\t\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Primary reference:\r\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\t *\r\n\t * Secondary reference:\r\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\r\n\t */\r\n\r\n\t// 3-band SH defined by 9 coefficients\r\n\r\n\tfunction SphericalHarmonics3() {\r\n\r\n\t\tthis.coefficients = [];\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients.push( new Vector3() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( SphericalHarmonics3.prototype, {\r\n\r\n\t\tisSphericalHarmonics3: true,\r\n\r\n\t\tset: function ( coefficients ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tzero: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// get the radiance in the direction of the normal\r\n\t\t// target is a Vector3\r\n\t\tgetAt: function ( normal, target ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\tvar coeff = this.coefficients;\r\n\r\n\t\t\t// band 0\r\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\r\n\r\n\t\t\t// band 1\r\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\r\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\r\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\r\n\r\n\t\t\t// band 2\r\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\r\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\r\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\r\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\r\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\r\n\t\t// target is a Vector3\r\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\t\tgetIrradianceAt: function ( normal, target ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\tvar coeff = this.coefficients;\r\n\r\n\t\t\t// band 0\r\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\r\n\r\n\t\t\t// band 1\r\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\r\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\r\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\r\n\r\n\t\t\t// band 2\r\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\r\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\r\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\r\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\r\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( sh ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\tscale: function ( s ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( sh, alpha ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sh ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sh ) {\r\n\r\n\t\t\treturn this.set( sh.coefficients );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar coefficients = this.coefficients;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar coefficients = this.coefficients;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( SphericalHarmonics3, {\r\n\r\n\t\t// evaluate the basis functions\r\n\t\t// shBasis is an Array[ 9 ]\r\n\t\tgetBasisAt: function ( normal, shBasis ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\t// band 0\r\n\t\t\tshBasis[ 0 ] = 0.282095;\r\n\r\n\t\t\t// band 1\r\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\r\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\r\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\r\n\r\n\t\t\t// band 2\r\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\r\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\r\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\r\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\r\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * A LightProbe is a source of indirect-diffuse light\r\n\t */\r\n\r\n\tfunction LightProbe( sh, intensity ) {\r\n\r\n\t\tLight.call( this, undefined, intensity );\r\n\r\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\r\n\r\n\t}\r\n\r\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: LightProbe,\r\n\r\n\t\tisLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.sh.copy( source.sh );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLightProbe.call( this, undefined, intensity );\r\n\r\n\t\tvar color1 = new Color().set( skyColor );\r\n\t\tvar color2 = new Color().set( groundColor );\r\n\r\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\r\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\r\n\r\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\r\n\t\tvar c0 = Math.sqrt( Math.PI );\r\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\r\n\r\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\r\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\r\n\r\n\t}\r\n\r\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLightProbe,\r\n\r\n\t\tisHemisphereLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) { // modifying colors not currently supported\r\n\r\n\t\t\tLightProbe.prototype.copy.call( this, source );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction AmbientLightProbe( color, intensity ) {\r\n\r\n\t\tLightProbe.call( this, undefined, intensity );\r\n\r\n\t\tvar color1 = new Color().set( color );\r\n\r\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\r\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\r\n\r\n\t}\r\n\r\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\r\n\r\n\t\tconstructor: AmbientLightProbe,\r\n\r\n\t\tisAmbientLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) { // modifying color not currently supported\r\n\r\n\t\t\tLightProbe.prototype.copy.call( this, source );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _eyeRight = new Matrix4();\r\n\tvar _eyeLeft = new Matrix4();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction StereoCamera() {\r\n\r\n\t\tthis.type = 'StereoCamera';\r\n\r\n\t\tthis.aspect = 1;\r\n\r\n\t\tthis.eyeSep = 0.064;\r\n\r\n\t\tthis.cameraL = new PerspectiveCamera();\r\n\t\tthis.cameraL.layers.enable( 1 );\r\n\t\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\t\tthis.cameraR = new PerspectiveCamera();\r\n\t\tthis.cameraR.layers.enable( 2 );\r\n\t\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n\t\tthis._cache = {\r\n\t\t\tfocus: null,\r\n\t\t\tfov: null,\r\n\t\t\taspect: null,\r\n\t\t\tnear: null,\r\n\t\t\tfar: null,\r\n\t\t\tzoom: null,\r\n\t\t\teyeSep: null\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( StereoCamera.prototype, {\r\n\r\n\t\tupdate: function ( camera ) {\r\n\r\n\t\t\tvar cache = this._cache;\r\n\r\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\r\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\r\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\r\n\r\n\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\tcache.focus = camera.focus;\r\n\t\t\t\tcache.fov = camera.fov;\r\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\r\n\t\t\t\tcache.near = camera.near;\r\n\t\t\t\tcache.far = camera.far;\r\n\t\t\t\tcache.zoom = camera.zoom;\r\n\t\t\t\tcache.eyeSep = this.eyeSep;\r\n\r\n\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\r\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\r\n\t\t\t\tvar ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\r\n\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\r\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\r\n\r\n\t\t\t\t// for left eye\r\n\r\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t// for right eye\r\n\r\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\r\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Clock( autoStart ) {\r\n\r\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\r\n\t\tthis.running = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( Clock.prototype, {\r\n\r\n\t\tstart: function () {\r\n\r\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\r\n\r\n\t\t\tthis.oldTime = this.startTime;\r\n\t\t\tthis.elapsedTime = 0;\r\n\t\t\tthis.running = true;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis.getElapsedTime();\r\n\t\t\tthis.running = false;\r\n\t\t\tthis.autoStart = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetElapsedTime: function () {\r\n\r\n\t\t\tthis.getDelta();\r\n\t\t\treturn this.elapsedTime;\r\n\r\n\t\t},\r\n\r\n\t\tgetDelta: function () {\r\n\r\n\t\t\tvar diff = 0;\r\n\r\n\t\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\t\tthis.start();\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.running ) {\r\n\r\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\r\n\r\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn diff;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _position$2 = new Vector3();\r\n\tvar _quaternion$3 = new Quaternion();\r\n\tvar _scale$1 = new Vector3();\r\n\tvar _orientation = new Vector3();\r\n\r\n\tfunction AudioListener() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'AudioListener';\r\n\r\n\t\tthis.context = AudioContext.getContext();\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\r\n\t\tthis.filter = null;\r\n\r\n\t\tthis.timeDelta = 0;\r\n\r\n\t\t// private\r\n\r\n\t\tthis._clock = new Clock();\r\n\r\n\t}\r\n\r\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: AudioListener,\r\n\r\n\t\tgetInput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tremoveFilter: function ( ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\t\tthis.filter = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.filter;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( value ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filter = value;\r\n\t\t\tthis.gain.connect( this.filter );\r\n\t\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMasterVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetMasterVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\r\n\t\t\tthis.timeDelta = this._clock.getDelta();\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\r\n\r\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\r\n\r\n\t\t\tif ( listener.positionX ) {\r\n\r\n\t\t\t\t// code path for Chrome (see #14393)\r\n\r\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\r\n\r\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\r\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\r\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\r\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\r\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\r\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\r\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\r\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\r\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\r\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction Audio( listener ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Audio';\r\n\r\n\t\tthis.listener = listener;\r\n\t\tthis.context = listener.context;\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( listener.getInput() );\r\n\r\n\t\tthis.autoplay = false;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.detune = 0;\r\n\t\tthis.loop = false;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopEnd = 0;\r\n\t\tthis.offset = 0;\r\n\t\tthis.duration = undefined;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.hasPlaybackControl = true;\r\n\t\tthis.sourceType = 'empty';\r\n\r\n\t\tthis._startedAt = 0;\r\n\t\tthis._pausedAt = 0;\r\n\r\n\t\tthis.filters = [];\r\n\r\n\t}\r\n\r\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Audio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tsetNodeSource: function ( audioNode ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'audioNode';\r\n\t\t\tthis.source = audioNode;\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaElementSource: function ( mediaElement ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaNode';\r\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaStreamSource: function ( mediaStream ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaStreamNode';\r\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetBuffer: function ( audioBuffer ) {\r\n\r\n\t\t\tthis.buffer = audioBuffer;\r\n\t\t\tthis.sourceType = 'buffer';\r\n\r\n\t\t\tif ( this.autoplay ) { this.play(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tplay: function ( delay ) {\r\n\r\n\t\t\tif ( delay === undefined ) { delay = 0; }\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._startedAt = this.context.currentTime + delay;\r\n\r\n\t\t\tvar source = this.context.createBufferSource();\r\n\t\t\tsource.buffer = this.buffer;\r\n\t\t\tsource.loop = this.loop;\r\n\t\t\tsource.loopStart = this.loopStart;\r\n\t\t\tsource.loopEnd = this.loopEnd;\r\n\t\t\tsource.onended = this.onEnded.bind( this );\r\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\r\n\r\n\t\t\tthis.isPlaying = true;\r\n\r\n\t\t\tthis.source = source;\r\n\r\n\t\t\tthis.setDetune( this.detune );\r\n\t\t\tthis.setPlaybackRate( this.playbackRate );\r\n\r\n\t\t\treturn this.connect();\r\n\r\n\t\t},\r\n\r\n\t\tpause: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\r\n\r\n\t\t\t\tthis.source.stop();\r\n\t\t\t\tthis.source.onended = null;\r\n\r\n\t\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pausedAt = 0;\r\n\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.source.onended = null;\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdisconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilters: function () {\r\n\r\n\t\t\treturn this.filters;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilters: function ( value ) {\r\n\r\n\t\t\tif ( ! value ) { value = []; }\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.disconnect();\r\n\t\t\t\tthis.filters = value;\r\n\t\t\t\tthis.connect();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.filters = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDetune: function ( value ) {\r\n\r\n\t\t\tthis.detune = value;\r\n\r\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDetune: function () {\r\n\r\n\t\t\treturn this.detune;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( filter ) {\r\n\r\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t\t},\r\n\r\n\t\tsetPlaybackRate: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.playbackRate = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetPlaybackRate: function () {\r\n\r\n\t\t\treturn this.playbackRate;\r\n\r\n\t\t},\r\n\r\n\t\tonEnded: function () {\r\n\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetLoop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.loop;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.loop = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.loop = this.loop;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoopStart: function ( value ) {\r\n\r\n\t\t\tthis.loopStart = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoopEnd: function ( value ) {\r\n\r\n\t\t\tthis.loopEnd = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _position$3 = new Vector3();\r\n\tvar _quaternion$4 = new Quaternion();\r\n\tvar _scale$2 = new Vector3();\r\n\tvar _orientation$1 = new Vector3();\r\n\r\n\tfunction PositionalAudio( listener ) {\r\n\r\n\t\tAudio.call( this, listener );\r\n\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.panningModel = 'HRTF';\r\n\t\tthis.panner.connect( this.gain );\r\n\r\n\t}\r\n\r\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\r\n\r\n\t\tconstructor: PositionalAudio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.panner;\r\n\r\n\t\t},\r\n\r\n\t\tgetRefDistance: function () {\r\n\r\n\t\t\treturn this.panner.refDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetRefDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.refDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetRolloffFactor: function () {\r\n\r\n\t\t\treturn this.panner.rolloffFactor;\r\n\r\n\t\t},\r\n\r\n\t\tsetRolloffFactor: function ( value ) {\r\n\r\n\t\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDistanceModel: function () {\r\n\r\n\t\t\treturn this.panner.distanceModel;\r\n\r\n\t\t},\r\n\r\n\t\tsetDistanceModel: function ( value ) {\r\n\r\n\t\t\tthis.panner.distanceModel = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxDistance: function () {\r\n\r\n\t\t\treturn this.panner.maxDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetMaxDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.maxDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\r\n\r\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\r\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\r\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\r\n\r\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\r\n\r\n\t\t\tvar panner = this.panner;\r\n\r\n\t\t\tif ( panner.positionX ) {\r\n\r\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\r\n\r\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\r\n\r\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\r\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\r\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\r\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\r\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\r\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\r\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AudioAnalyser( audio, fftSize ) {\r\n\r\n\t\tthis.analyser = audio.context.createAnalyser();\r\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\t\taudio.getOutput().connect( this.analyser );\r\n\r\n\t}\r\n\r\n\tObject.assign( AudioAnalyser.prototype, {\r\n\r\n\t\tgetFrequencyData: function () {\r\n\r\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\t\treturn this.data;\r\n\r\n\t\t},\r\n\r\n\t\tgetAverageFrequency: function () {\r\n\r\n\t\t\tvar value = 0, data = this.getFrequencyData();\r\n\r\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tvalue += data[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value / data.length;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Buffered scene graph property that allows weighted accumulation.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\r\n\r\n\t\tthis.binding = binding;\r\n\t\tthis.valueSize = valueSize;\r\n\r\n\t\tvar bufferType = Float64Array,\r\n\t\t\tmixFunction;\r\n\r\n\t\tswitch ( typeName ) {\r\n\r\n\t\t\tcase 'quaternion':\r\n\t\t\t\tmixFunction = this._slerp;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'bool':\r\n\t\t\t\tbufferType = Array;\r\n\t\t\t\tmixFunction = this._select;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t\t}\r\n\r\n\t\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t\t//\r\n\t\t// interpolators can use .buffer as their .result\r\n\t\t// the data then goes to 'incoming'\r\n\t\t//\r\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t\t// the cumulative result and are compared to detect\r\n\t\t// changes\r\n\t\t//\r\n\t\t// 'orig' stores the original state of the property\r\n\r\n\t\tthis._mixBufferRegion = mixFunction;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tthis.useCount = 0;\r\n\t\tthis.referenceCount = 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyMixer.prototype, {\r\n\r\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\t\taccumulate: function ( accuIndex, weight ) {\r\n\r\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentWeight = weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\t\tcurrentWeight += weight;\r\n\t\t\t\tvar mix = weight / currentWeight;\r\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\t\tapply: function ( accuIndex ) {\r\n\r\n\t\t\tvar stride = this.valueSize,\r\n\t\t\t\tbuffer = this.buffer,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\t\tbinding = this.binding;\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remember the state of the bound property and copy it to both accus\r\n\t\tsaveOriginalState: function () {\r\n\r\n\t\t\tvar binding = this.binding;\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\t\trestoreOriginalState: function () {\r\n\r\n\t\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// mix functions\r\n\r\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t\t},\r\n\r\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tvar s = 1 - t;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A reference to a real property in the scene graph.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\t// Characters [].:/ are reserved for track binding syntax.\r\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\r\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\r\n\r\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\r\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\r\n\t// instead, we exclude reserved characters and match everything else.\r\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\r\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\r\n\r\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\r\n\t// be matched to parse the rest of the track name.\r\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\r\n\r\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\r\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\r\n\r\n\t// Object on target node, and accessor. May not contain reserved\r\n\t// characters. Accessor may contain any character except closing bracket.\r\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\r\n\r\n\t// Property and accessor. May not contain reserved characters. Accessor may\r\n\t// contain any non-bracket characters.\r\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\r\n\r\n\tvar _trackRe = new RegExp( ''\r\n\t\t+ '^'\r\n\t\t+ _directoryRe\r\n\t\t+ _nodeRe\r\n\t\t+ _objectRe\r\n\t\t+ _propertyRe\r\n\t\t+ '$'\r\n\t);\r\n\r\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\r\n\r\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\r\n\r\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis._targetGroup = targetGroup;\r\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n\t}\r\n\r\n\tObject.assign( Composite.prototype, {\r\n\r\n\t\tgetValue: function ( array, offset ) {\r\n\r\n\t\t\tthis.bind(); // bind all binding\r\n\r\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t\t// and only call .getValue on the first\r\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function ( array, offset ) {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].bind();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\r\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\r\n\r\n\t\tthis.path = path;\r\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\t\tthis.rootNode = rootNode;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyBinding, {\r\n\r\n\t\tComposite: Composite,\r\n\r\n\t\tcreate: function ( root, path, parsedPath ) {\r\n\r\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\r\n\r\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Replaces spaces with underscores and removes unsupported characters from\r\n\t\t * node names, to ensure compatibility with parseTrackName().\r\n\t\t *\r\n\t\t * @param {string} name Node name to be sanitized.\r\n\t\t * @return {string}\r\n\t\t */\r\n\t\tsanitizeNodeName: function ( name ) {\r\n\r\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\r\n\r\n\t\t},\r\n\r\n\t\tparseTrackName: function ( trackName ) {\r\n\r\n\t\t\tvar matches = _trackRe.exec( trackName );\r\n\r\n\t\t\tif ( ! matches ) {\r\n\r\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar results = {\r\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\r\n\t\t\t\tnodeName: matches[ 2 ],\r\n\t\t\t\tobjectName: matches[ 3 ],\r\n\t\t\t\tobjectIndex: matches[ 4 ],\r\n\t\t\t\tpropertyName: matches[ 5 ], // required\r\n\t\t\t\tpropertyIndex: matches[ 6 ]\r\n\t\t\t};\r\n\r\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\r\n\r\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\r\n\r\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\r\n\r\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\r\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\r\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\r\n\t\t\t\t// include '.' characters).\r\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\r\n\r\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\r\n\t\t\t\t\tresults.objectName = objectName;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\r\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn results;\r\n\r\n\t\t},\r\n\r\n\t\tfindNode: function ( root, nodeName ) {\r\n\r\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\t\t\treturn root;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into skeleton bones.\r\n\t\t\tif ( root.skeleton ) {\r\n\r\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\r\n\r\n\t\t\t\tif ( bone !== undefined ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into node subtree.\r\n\t\t\tif ( root.children ) {\r\n\r\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar childNode = children[ i ];\r\n\r\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\t\t\tif ( result ) { return result; }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\t\t\tif ( subTreeNode ) {\r\n\r\n\t\t\t\t\treturn subTreeNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t\t// these are used to \"bind\" a nonexistent property\r\n\t\t_getValue_unavailable: function () {},\r\n\t\t_setValue_unavailable: function () {},\r\n\r\n\t\tBindingType: {\r\n\t\t\tDirect: 0,\r\n\t\t\tEntireArray: 1,\r\n\t\t\tArrayElement: 2,\r\n\t\t\tHasFromToArray: 3\r\n\t\t},\r\n\r\n\t\tVersioning: {\r\n\t\t\tNone: 0,\r\n\t\t\tNeedsUpdate: 1,\r\n\t\t\tMatrixWorldNeedsUpdate: 2\r\n\t\t},\r\n\r\n\t\tGetterByBindingType: [\r\n\r\n\t\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t],\r\n\r\n\t\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t\t[\r\n\t\t\t\t// Direct\r\n\r\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// EntireArray\r\n\r\n\t\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// ArrayElement\r\n\r\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// HasToFromArray\r\n\r\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t]\r\n\r\n\t\t],\r\n\r\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t\t// prototype version of these methods with one that represents\r\n\t\t\t// the bound state. When the property is not found, the methods\r\n\t\t\t// become no-ops.\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t\t},\r\n\r\n\t\t// create getter / setter pair for a property in the scene graph\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar targetObject = this.node,\r\n\t\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\t\tthis.node = targetObject;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set fail state so we can just 'return' on error\r\n\t\t\tthis.getValue = this._getValue_unavailable;\r\n\t\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n\t\t\t// ensure there is a value node\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectName ) {\r\n\r\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// resolve property\r\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\t\tif ( nodeProperty === undefined ) {\r\n\r\n\t\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\r\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine versioning scheme\r\n\t\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\r\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine how the property gets bound\r\n\t\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\t\tif ( propertyIndex !== undefined ) {\r\n\r\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\r\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\r\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\r\n\r\n\t\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select getter / setter\r\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tthis.node = null;\r\n\r\n\t\t\t// back to the prototype version of getValue / setValue\r\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\t\tthis.getValue = this._getValue_unbound;\r\n\t\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( PropertyBinding.prototype, {\r\n\r\n\t\t// initial state of these methods that calls 'bind'\r\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\r\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A group of objects that receives a shared animation state.\r\n\t *\r\n\t * Usage:\r\n\t *\r\n\t *  - Add objects you would otherwise pass as 'root' to the\r\n\t *    constructor or the .clipAction method of AnimationMixer.\r\n\t *\r\n\t *  - Instead pass this object as 'root'.\r\n\t *\r\n\t *  - You can also add and remove objects later when the mixer\r\n\t *    is running.\r\n\t *\r\n\t * Note:\r\n\t *\r\n\t *    Objects of this class appear as one object to the mixer,\r\n\t *    so cache control of the individual objects must be done\r\n\t *    on the group.\r\n\t *\r\n\t * Limitation:\r\n\t *\r\n\t *  - The animated properties must be compatible among the\r\n\t *    all objects in the group.\r\n\t *\r\n\t *  - A single property can either be controlled through a\r\n\t *    target group or directly, but not both.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationObjectGroup() {\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// cached objects followed by the active ones\r\n\t\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\t\tthis.nCachedObjects_ = 0; // threshold\r\n\t\t// note: read by PropertyBinding.Composite\r\n\r\n\t\tvar indices = {};\r\n\t\tthis._indicesByUUID = indices; // for bookkeeping\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tthis._paths = []; // inside: string\r\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\r\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\r\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tobjects: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._objects.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tget bindingsPerObject() {\r\n\r\n\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationObjectGroup.prototype, {\r\n\r\n\t\tisAnimationObjectGroup: true,\r\n\r\n\t\tadd: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tpaths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length,\r\n\t\t\t\tknownObject = undefined;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\t\tindex = nObjects ++;\r\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\tknownObject = objects[ index ];\r\n\r\n\t\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\r\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\r\n\r\n\t\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// remove & forget\r\n\t\tuncache: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} // cached or active\r\n\r\n\t\t\t\t} // if object is known\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\t\tsubscribe_: function ( path, parsedPath ) {\r\n\r\n\t\t\t// returns an array of bindings for the given path that is changed\r\n\t\t\t// according to the contained objects in the group\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ],\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tobjects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\t\tindex = bindings.length;\r\n\r\n\t\t\tindicesByPath[ path ] = index;\r\n\r\n\t\t\tpaths.push( path );\r\n\t\t\tparsedPaths.push( parsedPath );\r\n\t\t\tbindings.push( bindingsForPath );\r\n\r\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = objects[ i ];\r\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bindingsForPath;\r\n\r\n\t\t},\r\n\r\n\t\tunsubscribe_: function ( path ) {\r\n\r\n\t\t\t// tells the group to forget about a property path and no longer\r\n\t\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar paths = this._paths,\r\n\t\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\t\tbindings = this._bindings,\r\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\t\tbindings.pop();\r\n\r\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\t\tparsedPaths.pop();\r\n\r\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\t\tpaths.pop();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\r\n\t * objects.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t *\r\n\t */\r\n\r\n\tfunction AnimationAction( mixer, clip, localRoot ) {\r\n\r\n\t\tthis._mixer = mixer;\r\n\t\tthis._clip = clip;\r\n\t\tthis._localRoot = localRoot || null;\r\n\r\n\t\tvar tracks = clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tinterpolants = new Array( nTracks );\r\n\r\n\t\tvar interpolantSettings = {\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\t\tinterpolants[ i ] = interpolant;\r\n\t\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t\t}\r\n\r\n\t\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\t\tthis._interpolants = interpolants; // bound by the mixer\r\n\r\n\t\t// inside: PropertyMixer (managed by the mixer)\r\n\t\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\t\tthis._cacheIndex = null; // for the memory manager\r\n\t\tthis._byClipCacheIndex = null; // for the memory manager\r\n\r\n\t\tthis._timeScaleInterpolant = null;\r\n\t\tthis._weightInterpolant = null;\r\n\r\n\t\tthis.loop = LoopRepeat;\r\n\t\tthis._loopCount = - 1;\r\n\r\n\t\t// global mixer time when the action is to be started\r\n\t\t// it's set back to 'null' upon start of the action\r\n\t\tthis._startTime = null;\r\n\r\n\t\t// scaled local time of the action\r\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1;\r\n\t\tthis._effectiveTimeScale = 1;\r\n\r\n\t\tthis.weight = 1;\r\n\t\tthis._effectiveWeight = 1;\r\n\r\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\r\n\r\n\t\tthis.paused = false; // true -> zero effective time scale\r\n\t\tthis.enabled = true; // false -> zero effective weight\r\n\r\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\r\n\r\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\r\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationAction.prototype, {\r\n\r\n\t\t// State & Scheduling\r\n\r\n\t\tplay: function () {\r\n\r\n\t\t\tthis._mixer._activateAction( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\t\treturn this.reset();\r\n\r\n\t\t},\r\n\r\n\t\treset: function () {\r\n\r\n\t\t\tthis.paused = false;\r\n\t\t\tthis.enabled = true;\r\n\r\n\t\t\tthis.time = 0; // restart clip\r\n\t\t\tthis._loopCount = - 1;// forget previous loops\r\n\t\t\tthis._startTime = null;// forget scheduling\r\n\r\n\t\t\treturn this.stopFading().stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tisRunning: function () {\r\n\r\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\t// return true when play has been called\r\n\t\tisScheduled: function () {\r\n\r\n\t\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\tstartAt: function ( time ) {\r\n\r\n\t\t\tthis._startTime = time;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( mode, repetitions ) {\r\n\r\n\t\t\tthis.loop = mode;\r\n\t\t\tthis.repetitions = repetitions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Weight\r\n\r\n\t\t// set the weight stopping any scheduled fading\r\n\t\t// although .enabled = false yields an effective weight of zero, this\r\n\t\t// method does *not* change .enabled, because it would be confusing\r\n\t\tsetEffectiveWeight: function ( weight ) {\r\n\r\n\t\t\tthis.weight = weight;\r\n\r\n\t\t\t// note: same logic as when updated at runtime\r\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\t\treturn this.stopFading();\r\n\r\n\t\t},\r\n\r\n\t\t// return the weight considering fading and .enabled\r\n\t\tgetEffectiveWeight: function () {\r\n\r\n\t\t\treturn this._effectiveWeight;\r\n\r\n\t\t},\r\n\r\n\t\tfadeIn: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tfadeOut: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\r\n\r\n\t\t\tfadeOutAction.fadeOut( duration );\r\n\t\t\tthis.fadeIn( duration );\r\n\r\n\t\t\tif ( warp ) {\r\n\r\n\t\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\r\n\r\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t\t},\r\n\r\n\t\tstopFading: function () {\r\n\r\n\t\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._weightInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Time Scale Control\r\n\r\n\t\t// set the time scale stopping any scheduled warping\r\n\t\t// although .paused = true yields an effective time scale of zero, this\r\n\t\t// method does *not* change .paused, because it would be confusing\r\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\r\n\r\n\t\t\tthis.timeScale = timeScale;\r\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\t// return the time scale considering warping and .paused\r\n\t\tgetEffectiveTimeScale: function () {\r\n\r\n\t\t\treturn this._effectiveTimeScale;\r\n\r\n\t\t},\r\n\r\n\t\tsetDuration: function ( duration ) {\r\n\r\n\t\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tsyncWith: function ( action ) {\r\n\r\n\t\t\tthis.time = action.time;\r\n\t\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\thalt: function ( duration ) {\r\n\r\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t\t},\r\n\r\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstopWarping: function () {\r\n\r\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Object Accessors\r\n\r\n\t\tgetMixer: function () {\r\n\r\n\t\t\treturn this._mixer;\r\n\r\n\t\t},\r\n\r\n\t\tgetClip: function () {\r\n\r\n\t\t\treturn this._clip;\r\n\r\n\t\t},\r\n\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t\t},\r\n\r\n\t\t// Interna\r\n\r\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\r\n\r\n\t\t\t// called by the mixer\r\n\r\n\t\t\tif ( ! this.enabled ) {\r\n\r\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\r\n\r\n\t\t\t\tthis._updateWeight( time );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar startTime = this._startTime;\r\n\r\n\t\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t\t// check for scheduled start of action\r\n\r\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// start\r\n\r\n\t\t\t\tthis._startTime = null; // unschedule\r\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply time scale and advance time\r\n\r\n\t\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t\t// note: _updateTime may disable the action resulting in\r\n\t\t\t// an effective weight of 0\r\n\r\n\t\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\t\tif ( weight > 0 ) {\r\n\r\n\t\t\t\tvar interpolants = this._interpolants;\r\n\t\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_updateWeight: function ( time ) {\r\n\r\n\t\t\tvar weight = 0;\r\n\r\n\t\t\tif ( this.enabled ) {\r\n\r\n\t\t\t\tweight = this.weight;\r\n\t\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveWeight = weight;\r\n\t\t\treturn weight;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTimeScale: function ( time ) {\r\n\r\n\t\t\tvar timeScale = 0;\r\n\r\n\t\t\tif ( ! this.paused ) {\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveTimeScale = timeScale;\r\n\t\t\treturn timeScale;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTime: function ( deltaTime ) {\r\n\r\n\t\t\tvar time = this.time + deltaTime;\r\n\t\t\tvar duration = this._clip.duration;\r\n\t\t\tvar loop = this.loop;\r\n\t\t\tvar loopCount = this._loopCount;\r\n\r\n\t\t\tvar pingPong = ( loop === LoopPingPong );\r\n\r\n\t\t\tif ( deltaTime === 0 ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\r\n\r\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( loop === LoopOnce ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tthis._loopCount = 0;\r\n\t\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thandle_stop: {\r\n\r\n\t\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tbreak handle_stop;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\r\n\t\t\t\t\telse { this.enabled = false; }\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( time >= duration || time < 0 ) {\r\n\r\n\t\t\t\t\t// wrap around\r\n\r\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\t\tif ( pending <= 0 ) {\r\n\r\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\r\n\t\t\t\t\t\telse { this.enabled = false; }\r\n\r\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\t\tif ( pending === 1 ) {\r\n\r\n\t\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\r\n\t\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\t\treturn duration - time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn time;\r\n\r\n\t\t},\r\n\r\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\r\n\r\n\t\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\t\tif ( pingPong ) {\r\n\r\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\r\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\tvalues[ 0 ] = weightNow;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\t\t\tvalues[ 1 ] = weightThen;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Player for AnimationClips.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationMixer( root ) {\r\n\r\n\t\tthis._root = root;\r\n\t\tthis._initMemoryManager();\r\n\t\tthis._accuIndex = 0;\r\n\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1.0;\r\n\r\n\t}\r\n\r\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: AnimationMixer,\r\n\r\n\t\t_bindAction: function ( action, prototypeAction ) {\r\n\r\n\t\t\tvar root = action._localRoot || this._root,\r\n\t\t\t\ttracks = action._clip.tracks,\r\n\t\t\t\tnTracks = tracks.length,\r\n\t\t\t\tbindings = action._propertyBindings,\r\n\t\t\t\tinterpolants = action._interpolants,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\t\tbindingsByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\t\tvar track = tracks[ i ],\r\n\t\t\t\t\ttrackName = track.name,\r\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\t\tbinding = new PropertyMixer(\r\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_activateAction: function ( action ) {\r\n\r\n\t\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// increment reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._lendAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_deactivateAction: function ( action ) {\r\n\r\n\t\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// decrement reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Memory manager\r\n\r\n\t\t_initMemoryManager: function () {\r\n\r\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\t\tthis._nActiveActions = 0;\r\n\r\n\t\t\tthis._actionsByClip = {};\r\n\t\t\t// inside:\r\n\t\t\t// {\r\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\r\n\t\t\t// \tactionByRoot: AnimationAction - lookup\r\n\t\t\t// }\r\n\r\n\r\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\t\tthis._controlInterpolants = []; // same game as above\r\n\t\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tthis.stats = {\r\n\r\n\t\t\t\tactions: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._actions.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveActions;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tbindings: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveBindings;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcontrolInterpolants: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for AnimationAction objects\r\n\r\n\t\t_isActiveAction: function ( action ) {\r\n\r\n\t\t\tvar index = action._cacheIndex;\r\n\t\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t\t},\r\n\r\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\t\tactionsForClip = {\r\n\r\n\t\t\t\t\tknownActions: [ action ],\r\n\t\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\t\tknownActions.push( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taction._cacheIndex = actions.length;\r\n\t\t\tactions.push( action );\r\n\r\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveAction: function ( action ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\tactions.pop();\r\n\r\n\t\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\t\tvar clipUuid = action._clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\t\tlastKnownAction =\r\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\t\tknownActionsForClip.pop();\r\n\r\n\t\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\r\n\r\n\t\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBindingsForAction: function ( action ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendAction: function ( action ) {\r\n\r\n\t\t\t// [ active actions |  inactive actions  ]\r\n\t\t\t// [  active actions >| inactive actions ]\r\n\t\t\t//                 s        a\r\n\t\t\t//                  <-swap->\r\n\t\t\t//                 a        s\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = lastActiveIndex;\r\n\t\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackAction: function ( action ) {\r\n\r\n\t\t\t// [  active actions  | inactive actions ]\r\n\t\t\t// [ active actions |< inactive actions  ]\r\n\t\t\t//        a        s\r\n\t\t\t//         <-swap->\r\n\t\t\t//        s        a\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for PropertyMixer objects\r\n\r\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\t\tbindingByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\t\tbinding._cacheIndex = bindings.length;\r\n\t\t\tbindings.push( binding );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tpropBinding = binding.binding,\r\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\t\ttrackName = propBinding.path,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\r\n\r\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t\t_lendControlInterpolant: function () {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\t\tinterpolant = new LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn interpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\r\n\r\n\t\t// return an action for a clip optionally using a custom root target\r\n\t\t// object (this method allocates a lot of dynamic memory in case a\r\n\t\t// previously unknown clip/root combination is specified)\r\n\t\tclipAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\r\n\t\t\t\tprototypeAction = null;\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\tvar existingAction =\r\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\t\treturn existingAction;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t\t// the bindings again but can just copy\r\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t\t// also, take the clip from the prototype action\r\n\t\t\t\tif ( clipObject === null )\r\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// clip must be known when specified via string\r\n\t\t\tif ( clipObject === null ) { return null; }\r\n\r\n\t\t\t// allocate all resources required to run it\r\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\r\n\r\n\t\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t\t// and make the action known to the memory manager\r\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\t\treturn newAction;\r\n\r\n\t\t},\r\n\r\n\t\t// get an existing action\r\n\t\texistingAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// deactivates all previously scheduled actions\r\n\t\tstopAllAction: function () {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tthis._nActiveActions = 0;\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tactions[ i ].reset();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// advance the time and update apply the animation\r\n\t\tupdate: function ( deltaTime ) {\r\n\r\n\t\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\t\ttime = this.time += deltaTime,\r\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t\t// run active actions\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Allows you to seek to a specific time in an animation.\r\n\t\tsetTime: function ( timeInSeconds ) {\r\n\r\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\r\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\r\n\r\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\r\n\r\n\t\t},\r\n\r\n\t\t// return this mixer's root target object\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._root;\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular clip\r\n\t\tuncacheClip: function ( clip ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tclipUuid = clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t\t// just throw away\r\n\r\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\t\tactions.pop();\r\n\r\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular root target object\r\n\t\tuncacheRoot: function ( root ) {\r\n\r\n\t\t\tvar rootUuid = root.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\t\tfor ( var clipUuid in actionsByClip ) {\r\n\r\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remove a targeted clip from the cache\r\n\t\tuncacheAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\t\tif ( action !== null ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Uniform( value ) {\r\n\r\n\t\tif ( typeof value === 'string' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\r\n\t\t\tvalue = arguments[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tUniform.prototype.clone = function () {\r\n\r\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\r\n\r\n\t\tInterleavedBuffer.call( this, array, stride );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\r\n\r\n\t\tconstructor: InstancedInterleavedBuffer,\r\n\r\n\t\tisInstancedInterleavedBuffer: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author bhouston / http://clara.io/\r\n\t * @author stephomi / http://stephaneginier.com/\r\n\t */\r\n\r\n\tfunction Raycaster( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\t\tthis.camera = null;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Raycaster.prototype, {\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\t\t\t\tthis.camera = camera;\r\n\r\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\t\t\tthis.camera = camera;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n\t *\r\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\r\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\r\n\t */\r\n\r\n\tfunction Spherical( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Spherical.prototype, {\r\n\r\n\t\tset: function ( radius, phi, theta ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.phi = phi;\r\n\t\t\tthis.theta = theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.phi = other.phi;\r\n\t\t\tthis.theta = other.theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// restrict phi to be betwee EPS and PI-EPS\r\n\t\tmakeSafe: function () {\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\t\tthis.theta = 0;\r\n\t\t\t\tthis.phi = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n\t *\r\n\t */\r\n\r\n\tfunction Cylindrical( radius, theta, y ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Cylindrical.prototype, {\r\n\r\n\t\tset: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.theta = theta;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.theta = other.theta;\r\n\t\t\tthis.y = other.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\r\n\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _vector$6 = new Vector2();\r\n\r\n\tfunction Box2( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 4 splitting planes to rule out intersections\r\n\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t},\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _startP = new Vector3();\r\n\tvar _startEnd = new Vector3();\r\n\r\n\tfunction Line3( start, end ) {\r\n\r\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\r\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Line3.prototype, {\r\n\r\n\t\tset: function ( start, end ) {\r\n\r\n\t\t\tthis.start.copy( start );\r\n\t\t\tthis.end.copy( end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( line ) {\r\n\r\n\t\t\tthis.start.copy( line.start );\r\n\t\t\tthis.end.copy( line.end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tdelta: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSq: function () {\r\n\r\n\t\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tdistance: function () {\r\n\r\n\t\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\r\n\r\n\t\t\t_startP.subVectors( point, this.start );\r\n\t\t\t_startEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\r\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\r\n\r\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.start.applyMatrix4( matrix );\r\n\t\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( line ) {\r\n\r\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction ImmediateRenderObject( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.material = material;\r\n\t\tthis.render = function ( /* renderCallback */ ) {};\r\n\r\n\t}\r\n\r\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\r\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\r\n\r\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$5 = new Vector3();\r\n\tvar _v2$3 = new Vector3();\r\n\tvar _normalMatrix$1 = new Matrix3();\r\n\tvar _keys = [ 'a', 'b', 'c' ];\r\n\r\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.attributes.normal.count;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.setAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\r\n\r\n\tVertexNormalsHelper.prototype.update = function () {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ _keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\t_v1$5.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\t_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\t_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _vector$7 = new Vector3();\r\n\r\n\tfunction SpotLightHelper( light, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = [\r\n\t\t\t0, 0, 0, \t0, 0, 1,\r\n\t\t\t0, 0, 0, \t1, 0, 1,\r\n\t\t\t0, 0, 0,\t- 1, 0, 1,\r\n\t\t\t0, 0, 0, \t0, 1, 1,\r\n\t\t\t0, 0, 0, \t0, - 1, 1\r\n\t\t];\r\n\r\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\r\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\t\tpositions.push(\r\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.cone = new LineSegments( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\r\n\r\n\tSpotLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\r\n\t};\r\n\r\n\tSpotLightHelper.prototype.update = function () {\r\n\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\t_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( _vector$7 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.cone.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.cone.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Sean Griffin / http://twitter.com/sgrif\r\n\t * @author Michael Guerrero / http://realitymeltdown.com\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author ikerr / http://verold.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _vector$8 = new Vector3();\r\n\tvar _boneMatrix = new Matrix4();\r\n\tvar _matrixWorldInv = new Matrix4();\r\n\r\n\tfunction getBoneList( object ) {\r\n\r\n\t\tvar boneList = [];\r\n\r\n\t\tif ( object && object.isBone ) {\r\n\r\n\t\t\tboneList.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn boneList;\r\n\r\n\t}\r\n\r\n\tfunction SkeletonHelper( object ) {\r\n\r\n\t\tvar bones = getBoneList( object );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar color1 = new Color( 0, 0, 1 );\r\n\t\tvar color2 = new Color( 0, 1, 0 );\r\n\r\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\r\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.root = object;\r\n\t\tthis.bones = bones;\r\n\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t}\r\n\r\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\r\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\r\n\r\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar bones = this.bones;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\r\n\r\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );\r\n\r\n\t\t\t\tj += 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction PointLightHelper( light, sphereSize, color ) {\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\r\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\r\n\t\t/*\r\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\r\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\t\tvar d = light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\r\n\t\tthis.add( this.lightDistance );\r\n\t\t*/\r\n\r\n\t}\r\n\r\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\r\n\tPointLightHelper.prototype.constructor = PointLightHelper;\r\n\r\n\tPointLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tPointLightHelper.prototype.update = function () {\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tvar d = this.light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t *  This helper must be added as a child of the light\r\n\t */\r\n\r\n\tfunction RectAreaLightHelper( light, color ) {\r\n\r\n\t\tthis.type = 'RectAreaLightHelper';\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.color = color; // optional hardwired color for the helper\r\n\r\n\t\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tRectAreaLightHelper.prototype = Object.create( Line.prototype );\r\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\r\n\r\n\tRectAreaLightHelper.prototype.update = function () {\r\n\r\n\t\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\t\t\tthis.children[ 0 ].material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\t\t// prevent hue shift\r\n\t\t\tvar c = this.material.color;\r\n\t\t\tvar max = Math.max( c.r, c.g, c.b );\r\n\t\t\tif ( max > 1 ) { c.multiplyScalar( 1 / max ); }\r\n\r\n\t\t\tthis.children[ 0 ].material.color.copy( this.material.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tRectAreaLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _vector$9 = new Vector3();\r\n\tvar _color1 = new Color();\r\n\tvar _color2 = new Color();\r\n\r\n\tfunction HemisphereLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new OctahedronBufferGeometry( size );\r\n\t\tgeometry.rotateY( Math.PI * 0.5 );\r\n\r\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\r\n\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\t\tvar colors = new Float32Array( position.count * 3 );\r\n\r\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\r\n\r\n\t\tthis.add( new Mesh( geometry, this.material ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\r\n\r\n\tHemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\tHemisphereLightHelper.prototype.update = function () {\r\n\r\n\t\tvar mesh = this.children[ 0 ];\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\r\n\r\n\t\t\t_color1.copy( this.light.color );\r\n\t\t\t_color2.copy( this.light.groundColor );\r\n\r\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\r\n\r\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolors.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction LightProbeHelper( lightProbe, size ) {\r\n\r\n\t\tthis.lightProbe = lightProbe;\r\n\r\n\t\tthis.size = size;\r\n\r\n\t\tvar defines = {};\r\n\t\tdefines[ 'GAMMA_OUTPUT' ] = \"\";\r\n\r\n\t\t// material\r\n\t\tvar material = new ShaderMaterial( {\r\n\r\n\t\t\tdefines: defines,\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tsh: { value: this.lightProbe.sh.coefficients }, // by reference\r\n\r\n\t\t\t\tintensity: { value: this.lightProbe.intensity }\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t'varying vec3 vNormal;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\r\n\r\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t\t\t'}' ].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t'#define RECIPROCAL_PI 0.318309886',\r\n\r\n\t\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\r\n\r\n\t\t\t\t'\t// matrix is assumed to be orthogonal',\r\n\r\n\t\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'vec3 linearToOutput( in vec3 a ) {',\r\n\r\n\t\t\t\t'\t#ifdef GAMMA_OUTPUT',\r\n\r\n\t\t\t\t'\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\treturn a;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\r\n\t\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\r\n\r\n\t\t\t\t'\t// normal is assumed to have unit length',\r\n\r\n\t\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\r\n\r\n\t\t\t\t'\t// band 0',\r\n\t\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\r\n\r\n\t\t\t\t'\t// band 1',\r\n\t\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\r\n\t\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\r\n\r\n\t\t\t\t'\t// band 2',\r\n\t\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\r\n\t\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\r\n\t\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\r\n\r\n\t\t\t\t'\treturn result;',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\r\n\r\n\t\t\t\t'uniform float intensity; // light probe intensity',\r\n\r\n\t\t\t\t'varying vec3 vNormal;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tvec3 normal = normalize( vNormal );',\r\n\r\n\t\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\r\n\r\n\t\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\r\n\r\n\t\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\r\n\r\n\t\t\t\t'\toutgoingLight = linearToOutput( outgoingLight );',\r\n\r\n\t\t\t\t'\tgl_FragColor = vec4( outgoingLight, 1.0 );',\r\n\r\n\t\t\t\t'}'\r\n\r\n\t\t\t].join( '\\n' )\r\n\r\n\t\t} );\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( 1, 32, 16 );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.onBeforeRender();\r\n\r\n\t}\r\n\r\n\tLightProbeHelper.prototype = Object.create( Mesh.prototype );\r\n\tLightProbeHelper.prototype.constructor = LightProbeHelper;\r\n\r\n\tLightProbeHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tLightProbeHelper.prototype.onBeforeRender = function () {\r\n\r\n\t\tthis.position.copy( this.lightProbe.position );\r\n\r\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\r\n\r\n\t\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction GridHelper( size, divisions, color1, color2 ) {\r\n\r\n\t\tsize = size || 10;\r\n\t\tdivisions = divisions || 10;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar center = divisions / 2;\r\n\t\tvar step = size / divisions;\r\n\t\tvar halfSize = size / 2;\r\n\r\n\t\tvar vertices = [], colors = [];\r\n\r\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\r\n\r\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\r\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\r\n\r\n\t\t\tvar color = i === center ? color1 : color2;\r\n\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\r\n\r\n\t\tconstructor: GridHelper,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLineSegments.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.geometry.copy( source.geometry );\r\n\t\t\tthis.material.copy( source.material );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author Hectate / http://www.github.com/Hectate\r\n\t */\r\n\r\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\r\n\r\n\t\tradius = radius || 10;\r\n\t\tradials = radials || 16;\r\n\t\tcircles = circles || 8;\r\n\t\tdivisions = divisions || 64;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar x, z;\r\n\t\tvar v, i, j, r, color;\r\n\r\n\t\t// create the radials\r\n\r\n\t\tfor ( i = 0; i <= radials; i ++ ) {\r\n\r\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\r\n\r\n\t\t\tx = Math.sin( v ) * radius;\r\n\t\t\tz = Math.cos( v ) * radius;\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tvertices.push( x, 0, z );\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t}\r\n\r\n\t\t// create the circles\r\n\r\n\t\tfor ( i = 0; i <= circles; i ++ ) {\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tr = radius - ( radius / circles * i );\r\n\r\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\r\n\r\n\t\t\t\t// first vertex\r\n\r\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t\t// second vertex\r\n\r\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\r\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\r\n\r\n\t/**\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {\r\n\r\n\t\tthis.audio = audio;\r\n\t\tthis.range = range || 1;\r\n\t\tthis.divisionsInnerAngle = divisionsInnerAngle || 16;\r\n\t\tthis.divisionsOuterAngle = divisionsOuterAngle || 2;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\r\n\t\tvar positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\r\n\t\tvar materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\r\n\r\n\t\tLine.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tPositionalAudioHelper.prototype = Object.create( Line.prototype );\r\n\tPositionalAudioHelper.prototype.constructor = PositionalAudioHelper;\r\n\r\n\tPositionalAudioHelper.prototype.update = function () {\r\n\r\n\t\tvar audio = this.audio;\r\n\t\tvar range = this.range;\r\n\t\tvar divisionsInnerAngle = this.divisionsInnerAngle;\r\n\t\tvar divisionsOuterAngle = this.divisionsOuterAngle;\r\n\r\n\t\tvar coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );\r\n\t\tvar coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );\r\n\r\n\t\tvar halfConeInnerAngle = coneInnerAngle / 2;\r\n\t\tvar halfConeOuterAngle = coneOuterAngle / 2;\r\n\r\n\t\tvar start = 0;\r\n\t\tvar count = 0;\r\n\t\tvar i, stride;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar positionAttribute = geometry.attributes.position;\r\n\r\n\t\tgeometry.clearGroups();\r\n\r\n\t\t//\r\n\r\n\t\tfunction generateSegment( from, to, divisions, materialIndex ) {\r\n\r\n\t\t\tvar step = ( to - from ) / divisions;\r\n\r\n\t\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\r\n\t\t\tcount ++;\r\n\r\n\t\t\tfor ( i = from; i < to; i += step ) {\r\n\r\n\t\t\t\tstride = start + count;\r\n\r\n\t\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\r\n\t\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\r\n\t\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\r\n\r\n\t\t\t\tcount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.addGroup( start, count, materialIndex );\r\n\r\n\t\t\tstart += count;\r\n\t\t\tcount = 0;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\r\n\t\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\r\n\t\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\r\n\r\n\t\t//\r\n\r\n\t\tpositionAttribute.needsUpdate = true;\r\n\r\n\t\tif ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }\r\n\r\n\t};\r\n\r\n\tPositionalAudioHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material[ 0 ].dispose();\r\n\t\tthis.material[ 1 ].dispose();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$6 = new Vector3();\r\n\tvar _v2$4 = new Vector3();\r\n\tvar _normalMatrix$2 = new Matrix3();\r\n\r\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.setAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\r\n\r\n\tFaceNormalsHelper.prototype.update = function () {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t_v1$6.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );\r\n\r\n\t\t\tposition.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$7 = new Vector3();\r\n\tvar _v2$5 = new Vector3();\r\n\tvar _v3$1 = new Vector3();\r\n\r\n\tfunction DirectionalLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tif ( size === undefined ) { size = 1; }\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\r\n\t\t\t- size, size, 0,\r\n\t\t\tsize, size, 0,\r\n\t\t\tsize, - size, 0,\r\n\t\t\t- size, - size, 0,\r\n\t\t\t- size, size, 0\r\n\t\t], 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.lightPlane = new Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\r\n\t\tgeometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\t\tthis.targetLine = new Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\r\n\r\n\tDirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\r\n\t};\r\n\r\n\tDirectionalLightHelper.prototype.update = function () {\r\n\r\n\t\t_v1$7.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t_v3$1.subVectors( _v2$5, _v1$7 );\r\n\r\n\t\tthis.lightPlane.lookAt( _v2$5 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.lightPlane.material.color.set( this.color );\r\n\t\t\tthis.targetLine.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\r\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\tthis.targetLine.lookAt( _v2$5 );\r\n\t\tthis.targetLine.scale.z = _v3$1.length();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t *\t- shows frustum, line of sight and up of the camera\r\n\t *\t- suitable for fast updates\r\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\r\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n\t */\r\n\r\n\tvar _vector$a = new Vector3();\r\n\tvar _camera = new Camera();\r\n\r\n\tfunction CameraHelper( camera ) {\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar pointMap = {};\r\n\r\n\t\t// colors\r\n\r\n\t\tvar colorFrustum = new Color( 0xffaa00 );\r\n\t\tvar colorCone = new Color( 0xff0000 );\r\n\t\tvar colorUp = new Color( 0x00aaff );\r\n\t\tvar colorTarget = new Color( 0xffffff );\r\n\t\tvar colorCross = new Color( 0x333333 );\r\n\r\n\t\t// near\r\n\r\n\t\taddLine( 'n1', 'n2', colorFrustum );\r\n\t\taddLine( 'n2', 'n4', colorFrustum );\r\n\t\taddLine( 'n4', 'n3', colorFrustum );\r\n\t\taddLine( 'n3', 'n1', colorFrustum );\r\n\r\n\t\t// far\r\n\r\n\t\taddLine( 'f1', 'f2', colorFrustum );\r\n\t\taddLine( 'f2', 'f4', colorFrustum );\r\n\t\taddLine( 'f4', 'f3', colorFrustum );\r\n\t\taddLine( 'f3', 'f1', colorFrustum );\r\n\r\n\t\t// sides\r\n\r\n\t\taddLine( 'n1', 'f1', colorFrustum );\r\n\t\taddLine( 'n2', 'f2', colorFrustum );\r\n\t\taddLine( 'n3', 'f3', colorFrustum );\r\n\t\taddLine( 'n4', 'f4', colorFrustum );\r\n\r\n\t\t// cone\r\n\r\n\t\taddLine( 'p', 'n1', colorCone );\r\n\t\taddLine( 'p', 'n2', colorCone );\r\n\t\taddLine( 'p', 'n3', colorCone );\r\n\t\taddLine( 'p', 'n4', colorCone );\r\n\r\n\t\t// up\r\n\r\n\t\taddLine( 'u1', 'u2', colorUp );\r\n\t\taddLine( 'u2', 'u3', colorUp );\r\n\t\taddLine( 'u3', 'u1', colorUp );\r\n\r\n\t\t// target\r\n\r\n\t\taddLine( 'c', 't', colorTarget );\r\n\t\taddLine( 'p', 'c', colorCross );\r\n\r\n\t\t// cross\r\n\r\n\t\taddLine( 'cn1', 'cn2', colorCross );\r\n\t\taddLine( 'cn3', 'cn4', colorCross );\r\n\r\n\t\taddLine( 'cf1', 'cf2', colorCross );\r\n\t\taddLine( 'cf3', 'cf4', colorCross );\r\n\r\n\t\tfunction addLine( a, b, color ) {\r\n\r\n\t\t\taddPoint( a, color );\r\n\t\t\taddPoint( b, color );\r\n\r\n\t\t}\r\n\r\n\t\tfunction addPoint( id, color ) {\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.camera = camera;\r\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\r\n\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.pointMap = pointMap;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\r\n\tCameraHelper.prototype.constructor = CameraHelper;\r\n\r\n\tCameraHelper.prototype.update = function () {\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar pointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix inverse\r\n\t\t// world matrix must be identity\r\n\r\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\r\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\r\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\r\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\r\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\r\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\r\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\r\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\r\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\r\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\r\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\r\n\r\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\r\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\r\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\r\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t};\r\n\r\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\r\n\r\n\t\t_vector$a.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tposition.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _box$3 = new Box3();\r\n\r\n\tfunction BoxHelper( object, color ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tif ( color === undefined ) { color = 0xffff00; }\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\r\n\tBoxHelper.prototype.constructor = BoxHelper;\r\n\r\n\tBoxHelper.prototype.update = function ( object ) {\r\n\r\n\t\tif ( object !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.object !== undefined ) {\r\n\r\n\t\t\t_box$3.setFromObject( this.object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _box$3.isEmpty() ) { return; }\r\n\r\n\t\tvar min = _box$3.min;\r\n\t\tvar max = _box$3.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\r\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\r\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\r\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.setFromObject = function ( object ) {\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.update();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.copy = function ( source ) {\r\n\r\n\t\tLineSegments.prototype.copy.call( this, source );\r\n\r\n\t\tthis.object = source.object;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.clone = function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3Helper( box, color ) {\r\n\r\n\t\tthis.type = 'Box3Helper';\r\n\r\n\t\tthis.box = box;\r\n\r\n\t\tcolor = color || 0xffff00;\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\r\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\r\n\tBox3Helper.prototype.constructor = Box3Helper;\r\n\r\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar box = this.box;\r\n\r\n\t\tif ( box.isEmpty() ) { return; }\r\n\r\n\t\tbox.getCenter( this.position );\r\n\r\n\t\tbox.getSize( this.scale );\r\n\r\n\t\tthis.scale.multiplyScalar( 0.5 );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction PlaneHelper( plane, size, hex ) {\r\n\r\n\t\tthis.type = 'PlaneHelper';\r\n\r\n\t\tthis.plane = plane;\r\n\r\n\t\tthis.size = ( size === undefined ) ? 1 : size;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\r\n\r\n\t}\r\n\r\n\tPlaneHelper.prototype = Object.create( Line.prototype );\r\n\tPlaneHelper.prototype.constructor = PlaneHelper;\r\n\r\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar scale = - this.plane.constant;\r\n\r\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\r\n\r\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\r\n\r\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\r\n\r\n\t\tthis.lookAt( this.plane.normal );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author zz85 / http://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t *\r\n\t * Creates an arrow for visualizing directions\r\n\t *\r\n\t * Parameters:\r\n\t *  dir - Vector3\r\n\t *  origin - Vector3\r\n\t *  length - Number\r\n\t *  color - color in hex value\r\n\t *  headLength - Number\r\n\t *  headWidth - Number\r\n\t */\r\n\r\n\tvar _axis = new Vector3();\r\n\tvar _lineGeometry, _coneGeometry;\r\n\r\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\r\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\r\n\t\tif ( length === undefined ) { length = 1; }\r\n\t\tif ( color === undefined ) { color = 0xffff00; }\r\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\r\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\r\n\r\n\t\tif ( _lineGeometry === undefined ) {\r\n\r\n\t\t\t_lineGeometry = new BufferGeometry();\r\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\r\n\tArrowHelper.prototype.constructor = ArrowHelper;\r\n\r\n\tArrowHelper.prototype.setDirection = function ( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tvar radians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\r\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\r\n\r\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\r\n\t\tthis.line.updateMatrix();\r\n\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\t\tthis.line.material.color.set( color );\r\n\t\tthis.cone.material.color.set( color );\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.copy = function ( source ) {\r\n\r\n\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\tthis.line.copy( source.line );\r\n\t\tthis.cone.copy( source.cone );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.clone = function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author sroucheray / http://sroucheray.org/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AxesHelper( size ) {\r\n\r\n\t\tsize = size || 1;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t0, 0, 0,\tsize, 0, 0,\r\n\t\t\t0, 0, 0,\t0, size, 0,\r\n\t\t\t0, 0, 0,\t0, 0, size\r\n\t\t];\r\n\r\n\t\tvar colors = [\r\n\t\t\t1, 0, 0,\t1, 0.6, 0,\r\n\t\t\t0, 1, 0,\t0.6, 1, 0,\r\n\t\t\t0, 0, 1,\t0, 0.6, 1\r\n\t\t];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\r\n\tAxesHelper.prototype.constructor = AxesHelper;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\r\n\r\n\t}\r\n\r\n\tvar LineStrip = 0;\r\n\r\n\tvar LinePieces = 1;\r\n\r\n\tfunction MeshFaceMaterial( materials ) {\r\n\r\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction MultiMaterial( materials ) {\r\n\r\n\t\tif ( materials === undefined ) { materials = []; }\r\n\r\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\r\n\t\tmaterials.isMultiMaterial = true;\r\n\t\tmaterials.materials = materials;\r\n\t\tmaterials.clone = function () {\r\n\r\n\t\t\treturn materials.slice();\r\n\r\n\t\t};\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction PointCloud( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction Particle( material ) {\r\n\r\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\r\n\t\treturn new Sprite( material );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystem( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction PointCloudMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleBasicMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystemMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction Vertex( x, y, z ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new Vector3( x, y, z );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction DynamicBufferAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n\t}\r\n\r\n\tfunction Int8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\r\n\t\treturn new Int8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\r\n\t\treturn new Uint8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\r\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\r\n\t\treturn new Int16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\r\n\t\treturn new Uint16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\r\n\t\treturn new Int32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\r\n\t\treturn new Uint32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\r\n\t\treturn new Float32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float64Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\r\n\t\treturn new Float64BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tCurve.create = function ( construct, getPoint ) {\r\n\r\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\r\n\r\n\t\tconstruct.prototype = Object.create( Curve.prototype );\r\n\t\tconstruct.prototype.constructor = construct;\r\n\t\tconstruct.prototype.getPoint = getPoint;\r\n\r\n\t\treturn construct;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.assign( CurvePath.prototype, {\r\n\r\n\t\tcreatePointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from path points (for Line or Points objects)\r\n\r\n\t\t\tvar pts = this.getPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from equidistant sampling along the path\r\n\r\n\t\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateGeometry: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\tvar geometry = new Geometry();\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Path.prototype, {\r\n\r\n\t\tfromPoints: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\r\n\t\t\treturn this.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction ClosedSplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\t\tthis.closed = true;\r\n\r\n\t}\r\n\r\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction SplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction Spline( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\tObject.assign( Spline.prototype, {\r\n\r\n\t\tinitFromArray: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction AxisHelper( size ) {\r\n\r\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\r\n\t\treturn new AxesHelper( size );\r\n\r\n\t}\r\n\r\n\tfunction BoundingBoxHelper( object, color ) {\r\n\r\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\r\n\t\treturn new BoxHelper( object, color );\r\n\r\n\t}\r\n\r\n\tfunction EdgesHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\r\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype.setColors = function () {\r\n\r\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\r\n\r\n\t};\r\n\r\n\tSkeletonHelper.prototype.update = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\r\n\r\n\t};\r\n\r\n\tfunction WireframeHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\r\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\r\n\t\t\treturn LoaderUtils.extractUrlBase( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tLoader.Handlers = {\r\n\r\n\t\tadd: function ( /* regex, loader */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( /* file */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction XHRLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\r\n\t\treturn new FileLoader( manager );\r\n\r\n\t}\r\n\r\n\tfunction BinaryTextureLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\r\n\t\treturn new DataTextureLoader( manager );\r\n\r\n\t}\r\n\r\n\tObject.assign( ObjectLoader.prototype, {\r\n\r\n\t\tsetTexturePath: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\r\n\t\t\treturn this.setResourcePath( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tLine3.prototype.center = function ( optionalTarget ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\r\n\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t};\r\n\r\n\tObject.assign( _Math, {\r\n\r\n\t\trandom16: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\r\n\t\t\treturn Math.random();\r\n\r\n\t\t},\r\n\r\n\t\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\r\n\t\t\treturn _Math.floorPowerOfTwo( value );\r\n\r\n\t\t},\r\n\r\n\t\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\r\n\t\t\treturn _Math.ceilPowerOfTwo( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix3( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\textractPosition: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\treturn this.copyPosition( m );\r\n\r\n\t\t},\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tgetPosition: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\r\n\r\n\t\t},\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\r\n\t\t},\r\n\t\tmultiplyToArray: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateAxis: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\t\tv.transformDirection( this );\r\n\r\n\t\t},\r\n\t\tcrossVector: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\ttranslate: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateX: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateY: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateZ: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateByAxis: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\r\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tPlane.prototype.isIntersectionLine = function ( line ) {\r\n\r\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\treturn this.intersectsLine( line );\r\n\r\n\t};\r\n\r\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t};\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\t\treturn this.intersectsPlane( plane );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tarea: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\r\n\t\t\treturn this.getArea();\r\n\r\n\t\t},\r\n\t\tbarycoordFromPoint: function ( point, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn this.getBarycoord( point, target );\r\n\r\n\t\t},\r\n\t\tmidpoint: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\r\n\t\t\treturn this.getMidpoint( target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn this.getNormal( target );\r\n\r\n\t\t},\r\n\t\tplane: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\r\n\t\t\treturn this.getPlane( target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn Triangle.getNormal( a, b, c, target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Shape.prototype, {\r\n\r\n\t\textractAllPoints: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\r\n\t\t\treturn this.extractPoints( divisions );\r\n\r\n\t\t},\r\n\t\textrude: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\r\n\t\t\treturn new ExtrudeGeometry( this, options );\r\n\r\n\t\t},\r\n\t\tmakeGeometry: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\r\n\t\t\treturn new ShapeGeometry( this, options );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tsetEulerFromRotationMatrix: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\r\n\t\t},\r\n\t\tsetEulerFromQuaternion: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\r\n\t\t},\r\n\t\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\t\treturn this.setFromMatrixPosition( m );\r\n\r\n\t\t},\r\n\t\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\t\treturn this.setFromMatrixScale( m );\r\n\r\n\t\t},\r\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\r\n\r\n\t\t},\r\n\t\tapplyProjection: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\r\n\t\t\treturn this.applyMatrix4( m );\r\n\r\n\t\t},\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Geometry.prototype, {\r\n\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Object3D.prototype, {\r\n\r\n\t\tgetChildByName: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\treturn this.getObjectByName( name );\r\n\r\n\t\t},\r\n\t\trenderDepth: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\r\n\t\t},\r\n\t\ttranslate: function ( distance, axis ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\treturn this.translateOnAxis( axis, distance );\r\n\r\n\t\t},\r\n\t\tgetWorldRotation: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Object3D.prototype, {\r\n\r\n\t\teulerOrder: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\treturn this.rotation.order;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\tthis.rotation.order = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuseQuaternion: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( LOD.prototype, {\r\n\r\n\t\tobjects: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\treturn this.levels;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t},\r\n\t\tset: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tSkinnedMesh.prototype.initBones = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\r\n\r\n\t};\r\n\r\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\treturn this.arcLengthDivisions;\r\n\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\tthis.arcLengthDivisions = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\r\n\r\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\r\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\r\n\r\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\r\n\t\tthis.setFocalLength( focalLength );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Light.prototype, {\r\n\t\tonlyShadow: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFov: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\t\tthis.shadow.camera.fov = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraLeft: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\t\tthis.shadow.camera.left = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraRight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\t\tthis.shadow.camera.right = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraTop: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\t\tthis.shadow.camera.top = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraBottom: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\t\tthis.shadow.camera.bottom = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraNear: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\t\tthis.shadow.camera.near = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFar: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\t\tthis.shadow.camera.far = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraVisible: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowBias: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\t\tthis.shadow.bias = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowDarkness: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapWidth: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\t\tthis.shadow.mapSize.width = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapHeight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\t\tthis.shadow.mapSize.height = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( BufferAttribute.prototype, {\r\n\r\n\t\tlength: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\r\n\t\t\t\treturn this.array.length;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tdynamic: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\r\n\t\t\t\treturn this.usage === DynamicDrawUsage;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\r\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\r\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\t\tcopyIndicesArray: function ( /* indices */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetArray: function ( /* array */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( BufferGeometry.prototype, {\r\n\r\n\t\taddIndex: function ( index ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\tthis.setIndex( index );\r\n\r\n\t\t},\r\n\t\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\r\n\r\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( name === 'index' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.setAttribute( name, attribute );\r\n\r\n\t\t},\r\n\t\taddDrawCall: function ( start, count, indexOffset ) {\r\n\r\n\t\t\tif ( indexOffset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\r\n\t\t\t}\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\tthis.addGroup( start, count );\r\n\r\n\t\t},\r\n\t\tclearDrawCalls: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\tthis.clearGroups();\r\n\r\n\t\t},\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeOffsets: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\r\n\t\t},\r\n\t\tremoveAttribute: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\r\n\r\n\t\t\treturn this.deleteAttribute( name );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.defineProperties( BufferGeometry.prototype, {\r\n\r\n\t\tdrawcalls: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffsets: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( InterleavedBuffer.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\r\n\t\t\t\treturn this.usage === DynamicDrawUsage;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\r\n\t\t\t\tthis.setUsage( value );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\r\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\t\tsetArray: function ( /* array */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\r\n\r\n\t\tgetArrays: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShapeList: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShape: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Uniform.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tonUpdate: {\r\n\t\t\tvalue: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Material.prototype, {\r\n\r\n\t\twrapAround: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toverdraw: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\twrapRGB: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\r\n\t\t\t\treturn new Color();\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshading: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\tthis.flatShading = ( value === FlatShading );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstencilMask: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\r\n\t\t\t\treturn this.stencilFuncMask;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\r\n\t\t\t\tthis.stencilFuncMask = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\r\n\r\n\t\tmetal: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( ShaderMaterial.prototype, {\r\n\r\n\t\tderivatives: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\treturn this.extensions.derivatives;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\tthis.extensions.derivatives = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( WebGLRenderer.prototype, {\r\n\r\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\t\tthis.clear( color, depth, stencil );\r\n\r\n\t\t},\r\n\t\tanimate: function ( callback ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\r\n\t\t\tthis.setAnimationLoop( callback );\r\n\r\n\t\t},\r\n\t\tgetCurrentRenderTarget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\r\n\t\t\treturn this.getRenderTarget();\r\n\r\n\t\t},\r\n\t\tgetMaxAnisotropy: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\r\n\t\t\treturn this.capabilities.getMaxAnisotropy();\r\n\r\n\t\t},\r\n\t\tgetPrecision: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\r\n\t\t\treturn this.capabilities.precision;\r\n\r\n\t\t},\r\n\t\tresetGLState: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\r\n\t\t\treturn this.state.reset();\r\n\r\n\t\t},\r\n\t\tsupportsFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\r\n\t\t},\r\n\t\tsupportsHalfFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t},\r\n\t\tsupportsStandardDerivatives: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTextureS3TC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTexturePVRTC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t},\r\n\t\tsupportsBlendMinMax: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t},\r\n\t\tsupportsVertexTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\r\n\t\t\treturn this.capabilities.vertexTextures;\r\n\r\n\t\t},\r\n\t\tsupportsInstancedArrays: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t},\r\n\t\tenableScissorTest: function ( boolean ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\t\tthis.setScissorTest( boolean );\r\n\r\n\t\t},\r\n\t\tinitMaterial: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPrePlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPostPlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\tupdateShadowMap: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetFaceCulling: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\r\n\r\n\t\t},\r\n\t\tallocTextureUnit: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTexture: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTexture2D: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTextureCube: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetActiveMipMapLevel: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\r\n\t\t\treturn this.getActiveMipmapLevel();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLRenderer.prototype, {\r\n\r\n\t\tshadowMapEnabled: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.enabled;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\tthis.shadowMap.enabled = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapType: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\tthis.shadowMap.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapCullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tcontext: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\r\n\t\t\t\treturn this.getContext();\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLShadowMap.prototype, {\r\n\r\n\t\tcullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* cullFace */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderReverseSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderSingleSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTargetCube.prototype, {\r\n\r\n\t\tactiveCubeFace: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tactiveMipMapLevel: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\r\n\r\n\t\twrapS: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\treturn this.texture.wrapS;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\tthis.texture.wrapS = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapT: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\treturn this.texture.wrapT;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\tthis.texture.wrapT = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tmagFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\treturn this.texture.magFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\tthis.texture.magFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tminFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\treturn this.texture.minFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\tthis.texture.minFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tanisotropy: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\treturn this.texture.anisotropy;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\tthis.texture.anisotropy = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffset: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\treturn this.texture.offset;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\tthis.texture.offset = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trepeat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\treturn this.texture.repeat;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\tthis.texture.repeat = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tformat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\treturn this.texture.format;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\tthis.texture.format = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\ttype: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\treturn this.texture.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\tthis.texture.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tgenerateMipmaps: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\treturn this.texture.generateMipmaps;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\tthis.texture.generateMipmaps = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebVRManager.prototype, {\r\n\r\n\t\tstanding: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuserHeight: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Audio.prototype, {\r\n\r\n\t\tload: {\r\n\t\t\tvalue: function ( file ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\r\n\t\t\t\tvar scope = this;\r\n\t\t\t\tvar audioLoader = new AudioLoader();\r\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\r\n\r\n\t\t\t\t\tscope.setBuffer( buffer );\r\n\r\n\t\t\t\t} );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tstartTime: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tAudioAnalyser.prototype.getData = function () {\r\n\r\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\r\n\t\treturn this.getFrequencyData();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\r\n\t\treturn this.update( renderer, scene );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar GeometryUtils = {\r\n\r\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\t\t\tvar matrix;\r\n\r\n\t\t\tif ( geometry2.isMesh ) {\r\n\r\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\t\tmatrix = geometry2.matrix;\r\n\t\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function ( geometry ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\t\treturn geometry.center();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tImageUtils.crossOrigin = undefined;\r\n\r\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) { texture.mapping = mapping; }\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) { texture.mapping = mapping; }\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTexture = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTextureCube = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction CanvasRenderer() {\r\n\r\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction JSONLoader() {\r\n\r\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar SceneUtils = {\r\n\r\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tdetach: function ( /* child, parent, scene */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( /* child, scene, parent */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction LensFlare() {\r\n\r\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\r\n\r\n\t}\r\n\r\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t/* eslint-disable no-undef */\r\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\r\n\t\t\trevision: REVISION,\r\n\t\t} } ) );\r\n\t\t/* eslint-enable no-undef */\r\n\r\n\t}\r\n\r\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\r\n\texports.AddEquation = AddEquation;\r\n\texports.AddOperation = AddOperation;\r\n\texports.AdditiveBlending = AdditiveBlending;\r\n\texports.AlphaFormat = AlphaFormat;\r\n\texports.AlwaysDepth = AlwaysDepth;\r\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\r\n\texports.AmbientLight = AmbientLight;\r\n\texports.AmbientLightProbe = AmbientLightProbe;\r\n\texports.AnimationClip = AnimationClip;\r\n\texports.AnimationLoader = AnimationLoader;\r\n\texports.AnimationMixer = AnimationMixer;\r\n\texports.AnimationObjectGroup = AnimationObjectGroup;\r\n\texports.AnimationUtils = AnimationUtils;\r\n\texports.ArcCurve = ArcCurve;\r\n\texports.ArrayCamera = ArrayCamera;\r\n\texports.ArrowHelper = ArrowHelper;\r\n\texports.Audio = Audio;\r\n\texports.AudioAnalyser = AudioAnalyser;\r\n\texports.AudioContext = AudioContext;\r\n\texports.AudioListener = AudioListener;\r\n\texports.AudioLoader = AudioLoader;\r\n\texports.AxesHelper = AxesHelper;\r\n\texports.AxisHelper = AxisHelper;\r\n\texports.BackSide = BackSide;\r\n\texports.BasicDepthPacking = BasicDepthPacking;\r\n\texports.BasicShadowMap = BasicShadowMap;\r\n\texports.BinaryTextureLoader = BinaryTextureLoader;\r\n\texports.Bone = Bone;\r\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\r\n\texports.BoundingBoxHelper = BoundingBoxHelper;\r\n\texports.Box2 = Box2;\r\n\texports.Box3 = Box3;\r\n\texports.Box3Helper = Box3Helper;\r\n\texports.BoxBufferGeometry = BoxBufferGeometry;\r\n\texports.BoxGeometry = BoxGeometry;\r\n\texports.BoxHelper = BoxHelper;\r\n\texports.BufferAttribute = BufferAttribute;\r\n\texports.BufferGeometry = BufferGeometry;\r\n\texports.BufferGeometryLoader = BufferGeometryLoader;\r\n\texports.ByteType = ByteType;\r\n\texports.Cache = Cache;\r\n\texports.Camera = Camera;\r\n\texports.CameraHelper = CameraHelper;\r\n\texports.CanvasRenderer = CanvasRenderer;\r\n\texports.CanvasTexture = CanvasTexture;\r\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\r\n\texports.CineonToneMapping = CineonToneMapping;\r\n\texports.CircleBufferGeometry = CircleBufferGeometry;\r\n\texports.CircleGeometry = CircleGeometry;\r\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\r\n\texports.Clock = Clock;\r\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\r\n\texports.Color = Color;\r\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\r\n\texports.CompressedTexture = CompressedTexture;\r\n\texports.CompressedTextureLoader = CompressedTextureLoader;\r\n\texports.ConeBufferGeometry = ConeBufferGeometry;\r\n\texports.ConeGeometry = ConeGeometry;\r\n\texports.CubeCamera = CubeCamera;\r\n\texports.CubeGeometry = BoxGeometry;\r\n\texports.CubeReflectionMapping = CubeReflectionMapping;\r\n\texports.CubeRefractionMapping = CubeRefractionMapping;\r\n\texports.CubeTexture = CubeTexture;\r\n\texports.CubeTextureLoader = CubeTextureLoader;\r\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\r\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\r\n\texports.CubicBezierCurve = CubicBezierCurve;\r\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\r\n\texports.CubicInterpolant = CubicInterpolant;\r\n\texports.CullFaceBack = CullFaceBack;\r\n\texports.CullFaceFront = CullFaceFront;\r\n\texports.CullFaceFrontBack = CullFaceFrontBack;\r\n\texports.CullFaceNone = CullFaceNone;\r\n\texports.Curve = Curve;\r\n\texports.CurvePath = CurvePath;\r\n\texports.CustomBlending = CustomBlending;\r\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\r\n\texports.CylinderGeometry = CylinderGeometry;\r\n\texports.Cylindrical = Cylindrical;\r\n\texports.DataTexture = DataTexture;\r\n\texports.DataTexture2DArray = DataTexture2DArray;\r\n\texports.DataTexture3D = DataTexture3D;\r\n\texports.DataTextureLoader = DataTextureLoader;\r\n\texports.DecrementStencilOp = DecrementStencilOp;\r\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\r\n\texports.DefaultLoadingManager = DefaultLoadingManager;\r\n\texports.DepthFormat = DepthFormat;\r\n\texports.DepthStencilFormat = DepthStencilFormat;\r\n\texports.DepthTexture = DepthTexture;\r\n\texports.DirectionalLight = DirectionalLight;\r\n\texports.DirectionalLightHelper = DirectionalLightHelper;\r\n\texports.DirectionalLightShadow = DirectionalLightShadow;\r\n\texports.DiscreteInterpolant = DiscreteInterpolant;\r\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\r\n\texports.DodecahedronGeometry = DodecahedronGeometry;\r\n\texports.DoubleSide = DoubleSide;\r\n\texports.DstAlphaFactor = DstAlphaFactor;\r\n\texports.DstColorFactor = DstColorFactor;\r\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\r\n\texports.DynamicCopyUsage = DynamicCopyUsage;\r\n\texports.DynamicDrawUsage = DynamicDrawUsage;\r\n\texports.DynamicReadUsage = DynamicReadUsage;\r\n\texports.EdgesGeometry = EdgesGeometry;\r\n\texports.EdgesHelper = EdgesHelper;\r\n\texports.EllipseCurve = EllipseCurve;\r\n\texports.EqualDepth = EqualDepth;\r\n\texports.EqualStencilFunc = EqualStencilFunc;\r\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\r\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\r\n\texports.Euler = Euler;\r\n\texports.EventDispatcher = EventDispatcher;\r\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\r\n\texports.ExtrudeGeometry = ExtrudeGeometry;\r\n\texports.Face3 = Face3;\r\n\texports.Face4 = Face4;\r\n\texports.FaceColors = FaceColors;\r\n\texports.FaceNormalsHelper = FaceNormalsHelper;\r\n\texports.FileLoader = FileLoader;\r\n\texports.FlatShading = FlatShading;\r\n\texports.Float32Attribute = Float32Attribute;\r\n\texports.Float32BufferAttribute = Float32BufferAttribute;\r\n\texports.Float64Attribute = Float64Attribute;\r\n\texports.Float64BufferAttribute = Float64BufferAttribute;\r\n\texports.FloatType = FloatType;\r\n\texports.Fog = Fog;\r\n\texports.FogExp2 = FogExp2;\r\n\texports.Font = Font;\r\n\texports.FontLoader = FontLoader;\r\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\r\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\r\n\texports.FrontSide = FrontSide;\r\n\texports.Frustum = Frustum;\r\n\texports.GammaEncoding = GammaEncoding;\r\n\texports.Geometry = Geometry;\r\n\texports.GeometryUtils = GeometryUtils;\r\n\texports.GreaterDepth = GreaterDepth;\r\n\texports.GreaterEqualDepth = GreaterEqualDepth;\r\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\r\n\texports.GreaterStencilFunc = GreaterStencilFunc;\r\n\texports.GridHelper = GridHelper;\r\n\texports.Group = Group;\r\n\texports.HalfFloatType = HalfFloatType;\r\n\texports.HemisphereLight = HemisphereLight;\r\n\texports.HemisphereLightHelper = HemisphereLightHelper;\r\n\texports.HemisphereLightProbe = HemisphereLightProbe;\r\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\r\n\texports.IcosahedronGeometry = IcosahedronGeometry;\r\n\texports.ImageBitmapLoader = ImageBitmapLoader;\r\n\texports.ImageLoader = ImageLoader;\r\n\texports.ImageUtils = ImageUtils;\r\n\texports.ImmediateRenderObject = ImmediateRenderObject;\r\n\texports.IncrementStencilOp = IncrementStencilOp;\r\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\r\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\r\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\r\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\r\n\texports.InstancedMesh = InstancedMesh;\r\n\texports.Int16Attribute = Int16Attribute;\r\n\texports.Int16BufferAttribute = Int16BufferAttribute;\r\n\texports.Int32Attribute = Int32Attribute;\r\n\texports.Int32BufferAttribute = Int32BufferAttribute;\r\n\texports.Int8Attribute = Int8Attribute;\r\n\texports.Int8BufferAttribute = Int8BufferAttribute;\r\n\texports.IntType = IntType;\r\n\texports.InterleavedBuffer = InterleavedBuffer;\r\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\r\n\texports.Interpolant = Interpolant;\r\n\texports.InterpolateDiscrete = InterpolateDiscrete;\r\n\texports.InterpolateLinear = InterpolateLinear;\r\n\texports.InterpolateSmooth = InterpolateSmooth;\r\n\texports.InvertStencilOp = InvertStencilOp;\r\n\texports.JSONLoader = JSONLoader;\r\n\texports.KeepStencilOp = KeepStencilOp;\r\n\texports.KeyframeTrack = KeyframeTrack;\r\n\texports.LOD = LOD;\r\n\texports.LatheBufferGeometry = LatheBufferGeometry;\r\n\texports.LatheGeometry = LatheGeometry;\r\n\texports.Layers = Layers;\r\n\texports.LensFlare = LensFlare;\r\n\texports.LessDepth = LessDepth;\r\n\texports.LessEqualDepth = LessEqualDepth;\r\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\r\n\texports.LessStencilFunc = LessStencilFunc;\r\n\texports.Light = Light;\r\n\texports.LightProbe = LightProbe;\r\n\texports.LightProbeHelper = LightProbeHelper;\r\n\texports.LightShadow = LightShadow;\r\n\texports.Line = Line;\r\n\texports.Line3 = Line3;\r\n\texports.LineBasicMaterial = LineBasicMaterial;\r\n\texports.LineCurve = LineCurve;\r\n\texports.LineCurve3 = LineCurve3;\r\n\texports.LineDashedMaterial = LineDashedMaterial;\r\n\texports.LineLoop = LineLoop;\r\n\texports.LinePieces = LinePieces;\r\n\texports.LineSegments = LineSegments;\r\n\texports.LineStrip = LineStrip;\r\n\texports.LinearEncoding = LinearEncoding;\r\n\texports.LinearFilter = LinearFilter;\r\n\texports.LinearInterpolant = LinearInterpolant;\r\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\r\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\r\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\r\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\r\n\texports.LinearToneMapping = LinearToneMapping;\r\n\texports.Loader = Loader;\r\n\texports.LoaderUtils = LoaderUtils;\r\n\texports.LoadingManager = LoadingManager;\r\n\texports.LogLuvEncoding = LogLuvEncoding;\r\n\texports.LoopOnce = LoopOnce;\r\n\texports.LoopPingPong = LoopPingPong;\r\n\texports.LoopRepeat = LoopRepeat;\r\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\r\n\texports.LuminanceFormat = LuminanceFormat;\r\n\texports.MOUSE = MOUSE;\r\n\texports.Material = Material;\r\n\texports.MaterialLoader = MaterialLoader;\r\n\texports.Math = _Math;\r\n\texports.Matrix3 = Matrix3;\r\n\texports.Matrix4 = Matrix4;\r\n\texports.MaxEquation = MaxEquation;\r\n\texports.Mesh = Mesh;\r\n\texports.MeshBasicMaterial = MeshBasicMaterial;\r\n\texports.MeshDepthMaterial = MeshDepthMaterial;\r\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\r\n\texports.MeshFaceMaterial = MeshFaceMaterial;\r\n\texports.MeshLambertMaterial = MeshLambertMaterial;\r\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\r\n\texports.MeshNormalMaterial = MeshNormalMaterial;\r\n\texports.MeshPhongMaterial = MeshPhongMaterial;\r\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\r\n\texports.MeshStandardMaterial = MeshStandardMaterial;\r\n\texports.MeshToonMaterial = MeshToonMaterial;\r\n\texports.MinEquation = MinEquation;\r\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\r\n\texports.MixOperation = MixOperation;\r\n\texports.MultiMaterial = MultiMaterial;\r\n\texports.MultiplyBlending = MultiplyBlending;\r\n\texports.MultiplyOperation = MultiplyOperation;\r\n\texports.NearestFilter = NearestFilter;\r\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\r\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\r\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\r\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\r\n\texports.NeverDepth = NeverDepth;\r\n\texports.NeverStencilFunc = NeverStencilFunc;\r\n\texports.NoBlending = NoBlending;\r\n\texports.NoColors = NoColors;\r\n\texports.NoToneMapping = NoToneMapping;\r\n\texports.NormalBlending = NormalBlending;\r\n\texports.NotEqualDepth = NotEqualDepth;\r\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\r\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\r\n\texports.Object3D = Object3D;\r\n\texports.ObjectLoader = ObjectLoader;\r\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\r\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\r\n\texports.OctahedronGeometry = OctahedronGeometry;\r\n\texports.OneFactor = OneFactor;\r\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\r\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\r\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\r\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\r\n\texports.OrthographicCamera = OrthographicCamera;\r\n\texports.PCFShadowMap = PCFShadowMap;\r\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\r\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\r\n\texports.ParametricGeometry = ParametricGeometry;\r\n\texports.Particle = Particle;\r\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\r\n\texports.ParticleSystem = ParticleSystem;\r\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\r\n\texports.Path = Path;\r\n\texports.PerspectiveCamera = PerspectiveCamera;\r\n\texports.Plane = Plane;\r\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\r\n\texports.PlaneGeometry = PlaneGeometry;\r\n\texports.PlaneHelper = PlaneHelper;\r\n\texports.PointCloud = PointCloud;\r\n\texports.PointCloudMaterial = PointCloudMaterial;\r\n\texports.PointLight = PointLight;\r\n\texports.PointLightHelper = PointLightHelper;\r\n\texports.Points = Points;\r\n\texports.PointsMaterial = PointsMaterial;\r\n\texports.PolarGridHelper = PolarGridHelper;\r\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\r\n\texports.PolyhedronGeometry = PolyhedronGeometry;\r\n\texports.PositionalAudio = PositionalAudio;\r\n\texports.PositionalAudioHelper = PositionalAudioHelper;\r\n\texports.PropertyBinding = PropertyBinding;\r\n\texports.PropertyMixer = PropertyMixer;\r\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\r\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\r\n\texports.Quaternion = Quaternion;\r\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\r\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\r\n\texports.REVISION = REVISION;\r\n\texports.RGBADepthPacking = RGBADepthPacking;\r\n\texports.RGBAFormat = RGBAFormat;\r\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\r\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\r\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\r\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\r\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\r\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\r\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\r\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\r\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\r\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\r\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\r\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\r\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\r\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\r\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\r\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\r\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\r\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\r\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\r\n\texports.RGBDEncoding = RGBDEncoding;\r\n\texports.RGBEEncoding = RGBEEncoding;\r\n\texports.RGBEFormat = RGBEFormat;\r\n\texports.RGBFormat = RGBFormat;\r\n\texports.RGBM16Encoding = RGBM16Encoding;\r\n\texports.RGBM7Encoding = RGBM7Encoding;\r\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\r\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\r\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\r\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\r\n\texports.RawShaderMaterial = RawShaderMaterial;\r\n\texports.Ray = Ray;\r\n\texports.Raycaster = Raycaster;\r\n\texports.RectAreaLight = RectAreaLight;\r\n\texports.RectAreaLightHelper = RectAreaLightHelper;\r\n\texports.RedFormat = RedFormat;\r\n\texports.ReinhardToneMapping = ReinhardToneMapping;\r\n\texports.RepeatWrapping = RepeatWrapping;\r\n\texports.ReplaceStencilOp = ReplaceStencilOp;\r\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\r\n\texports.RingBufferGeometry = RingBufferGeometry;\r\n\texports.RingGeometry = RingGeometry;\r\n\texports.Scene = Scene;\r\n\texports.SceneUtils = SceneUtils;\r\n\texports.ShaderChunk = ShaderChunk;\r\n\texports.ShaderLib = ShaderLib;\r\n\texports.ShaderMaterial = ShaderMaterial;\r\n\texports.ShadowMaterial = ShadowMaterial;\r\n\texports.Shape = Shape;\r\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\r\n\texports.ShapeGeometry = ShapeGeometry;\r\n\texports.ShapePath = ShapePath;\r\n\texports.ShapeUtils = ShapeUtils;\r\n\texports.ShortType = ShortType;\r\n\texports.Skeleton = Skeleton;\r\n\texports.SkeletonHelper = SkeletonHelper;\r\n\texports.SkinnedMesh = SkinnedMesh;\r\n\texports.SmoothShading = SmoothShading;\r\n\texports.Sphere = Sphere;\r\n\texports.SphereBufferGeometry = SphereBufferGeometry;\r\n\texports.SphereGeometry = SphereGeometry;\r\n\texports.Spherical = Spherical;\r\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\r\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\r\n\texports.Spline = Spline;\r\n\texports.SplineCurve = SplineCurve;\r\n\texports.SplineCurve3 = SplineCurve3;\r\n\texports.SpotLight = SpotLight;\r\n\texports.SpotLightHelper = SpotLightHelper;\r\n\texports.SpotLightShadow = SpotLightShadow;\r\n\texports.Sprite = Sprite;\r\n\texports.SpriteMaterial = SpriteMaterial;\r\n\texports.SrcAlphaFactor = SrcAlphaFactor;\r\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\r\n\texports.SrcColorFactor = SrcColorFactor;\r\n\texports.StaticCopyUsage = StaticCopyUsage;\r\n\texports.StaticDrawUsage = StaticDrawUsage;\r\n\texports.StaticReadUsage = StaticReadUsage;\r\n\texports.StereoCamera = StereoCamera;\r\n\texports.StreamCopyUsage = StreamCopyUsage;\r\n\texports.StreamDrawUsage = StreamDrawUsage;\r\n\texports.StreamReadUsage = StreamReadUsage;\r\n\texports.StringKeyframeTrack = StringKeyframeTrack;\r\n\texports.SubtractEquation = SubtractEquation;\r\n\texports.SubtractiveBlending = SubtractiveBlending;\r\n\texports.TOUCH = TOUCH;\r\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\r\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\r\n\texports.TetrahedronGeometry = TetrahedronGeometry;\r\n\texports.TextBufferGeometry = TextBufferGeometry;\r\n\texports.TextGeometry = TextGeometry;\r\n\texports.Texture = Texture;\r\n\texports.TextureLoader = TextureLoader;\r\n\texports.TorusBufferGeometry = TorusBufferGeometry;\r\n\texports.TorusGeometry = TorusGeometry;\r\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\r\n\texports.TorusKnotGeometry = TorusKnotGeometry;\r\n\texports.Triangle = Triangle;\r\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\r\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\r\n\texports.TrianglesDrawMode = TrianglesDrawMode;\r\n\texports.TubeBufferGeometry = TubeBufferGeometry;\r\n\texports.TubeGeometry = TubeGeometry;\r\n\texports.UVMapping = UVMapping;\r\n\texports.Uint16Attribute = Uint16Attribute;\r\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\r\n\texports.Uint32Attribute = Uint32Attribute;\r\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\r\n\texports.Uint8Attribute = Uint8Attribute;\r\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\r\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\r\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\r\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\r\n\texports.Uniform = Uniform;\r\n\texports.UniformsLib = UniformsLib;\r\n\texports.UniformsUtils = UniformsUtils;\r\n\texports.UnsignedByteType = UnsignedByteType;\r\n\texports.UnsignedInt248Type = UnsignedInt248Type;\r\n\texports.UnsignedIntType = UnsignedIntType;\r\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\r\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\r\n\texports.UnsignedShort565Type = UnsignedShort565Type;\r\n\texports.UnsignedShortType = UnsignedShortType;\r\n\texports.VSMShadowMap = VSMShadowMap;\r\n\texports.Vector2 = Vector2;\r\n\texports.Vector3 = Vector3;\r\n\texports.Vector4 = Vector4;\r\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\r\n\texports.Vertex = Vertex;\r\n\texports.VertexColors = VertexColors;\r\n\texports.VertexNormalsHelper = VertexNormalsHelper;\r\n\texports.VideoTexture = VideoTexture;\r\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\r\n\texports.WebGLRenderTarget = WebGLRenderTarget;\r\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\r\n\texports.WebGLRenderer = WebGLRenderer;\r\n\texports.WebGLUtils = WebGLUtils;\r\n\texports.WireframeGeometry = WireframeGeometry;\r\n\texports.WireframeHelper = WireframeHelper;\r\n\texports.WrapAroundEnding = WrapAroundEnding;\r\n\texports.XHRLoader = XHRLoader;\r\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\r\n\texports.ZeroFactor = ZeroFactor;\r\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\r\n\texports.ZeroStencilOp = ZeroStencilOp;\r\n\texports.sRGBEncoding = sRGBEncoding;\r\n\r\n    return exports;\r\n});\r\n\ndefine('skylark-threejs/main',[\r\n\t\"skylark-langx/skylark\",\r\n    \"./three\"\r\n], function(skylark,threejs) {\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\ndefine('skylark-threejs-ex/shaders/CopyShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Full-screen textured quad shader\n\t */\n\n\tTHREE.CopyShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"opacity\": { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.CopyShader;\n});\n\ndefine('skylark-threejs-ex/shaders/BokehShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Depth-of-field shader with bokeh\n\t * ported from GLSL shader by Martins Upitis\n\t * http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html\n\t */\n\n\tTHREE.BokehShader = {\n\n\t\tdefines: {\n\t\t\t\"DEPTH_PACKING\": 1,\n\t\t\t\"PERSPECTIVE_CAMERA\": 1,\n\t\t},\n\n\t\tuniforms: {\n\n\t\t\t\"tColor\": { value: null },\n\t\t\t\"tDepth\": { value: null },\n\t\t\t\"focus\": { value: 1.0 },\n\t\t\t\"aspect\": { value: 1.0 },\n\t\t\t\"aperture\": { value: 0.025 },\n\t\t\t\"maxblur\": { value: 1.0 },\n\t\t\t\"nearClip\": { value: 1.0 },\n\t\t\t\"farClip\": { value: 1000.0 },\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t\"#include <common>\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform sampler2D tColor;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"uniform float maxblur;\", // max blur amount\n\t\t\t\"uniform float aperture;\", // aperture - bigger values for shallower depth of field\n\n\t\t\t\"uniform float nearClip;\",\n\t\t\t\"uniform float farClip;\",\n\n\t\t\t\"uniform float focus;\",\n\t\t\t\"uniform float aspect;\",\n\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if DEPTH_PACKING == 1\",\n\t\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float getViewZ( const in float depth ) {\",\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\t\t\t\"\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 aspectcorrect = vec2( 1.0, aspect );\",\n\n\t\t\t\"\tfloat viewZ = getViewZ( getDepth( vUv ) );\",\n\n\t\t\t\"\tfloat factor = ( focus + viewZ );\", // viewZ is <= 0, so this is a difference equation\n\n\t\t\t\"\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\",\n\n\t\t\t\"\tvec2 dofblur9 = dofblur * 0.9;\",\n\t\t\t\"\tvec2 dofblur7 = dofblur * 0.7;\",\n\t\t\t\"\tvec2 dofblur4 = dofblur * 0.4;\",\n\n\t\t\t\"\tvec4 col = vec4( 0.0 );\",\n\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\",\n\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n\t\t\t\"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\",\n\n\t\t\t\"\tgl_FragColor = col / 41.0;\",\n\t\t\t\"\tgl_FragColor.a = 1.0;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.BokehShader;\n});\n\ndefine('skylark-threejs-ex/shaders/SAOShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * TODO\n\t */\n\n\tTHREE.SAOShader = {\n\t\tdefines: {\n\t\t\t\"NUM_SAMPLES\": 7,\n\t\t\t\"NUM_RINGS\": 4,\n\t\t\t\"NORMAL_TEXTURE\": 0,\n\t\t\t\"DIFFUSE_TEXTURE\": 0,\n\t\t\t\"DEPTH_PACKING\": 1,\n\t\t\t\"PERSPECTIVE_CAMERA\": 1\n\t\t},\n\t\tuniforms: {\n\n\t\t\t\"tDepth\": { value: null },\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"tNormal\": { value: null },\n\t\t\t\"size\": { value: new THREE.Vector2( 512, 512 ) },\n\n\t\t\t\"cameraNear\": { value: 1 },\n\t\t\t\"cameraFar\": { value: 100 },\n\t\t\t\"cameraProjectionMatrix\": { value: new THREE.Matrix4() },\n\t\t\t\"cameraInverseProjectionMatrix\": { value: new THREE.Matrix4() },\n\n\t\t\t\"scale\": { value: 1.0 },\n\t\t\t\"intensity\": { value: 0.1 },\n\t\t\t\"bias\": { value: 0.5 },\n\n\t\t\t\"minResolution\": { value: 0.0 },\n\t\t\t\"kernelRadius\": { value: 100.0 },\n\t\t\t\"randomSeed\": { value: 0.0 }\n\t\t},\n\t\tvertexShader: [\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\t\tfragmentShader: [\n\t\t\t\"#include <common>\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"#if DIFFUSE_TEXTURE == 1\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"#endif\",\n\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"#if NORMAL_TEXTURE == 1\",\n\t\t\t\"uniform sampler2D tNormal;\",\n\t\t\t\"#endif\",\n\n\t\t\t\"uniform float cameraNear;\",\n\t\t\t\"uniform float cameraFar;\",\n\t\t\t\"uniform mat4 cameraProjectionMatrix;\",\n\t\t\t\"uniform mat4 cameraInverseProjectionMatrix;\",\n\n\t\t\t\"uniform float scale;\",\n\t\t\t\"uniform float intensity;\",\n\t\t\t\"uniform float bias;\",\n\t\t\t\"uniform float kernelRadius;\",\n\t\t\t\"uniform float minResolution;\",\n\t\t\t\"uniform vec2 size;\",\n\t\t\t\"uniform float randomSeed;\",\n\n\t\t\t\"// RGBA depth\",\n\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"vec4 getDefaultColor( const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if DIFFUSE_TEXTURE == 1\",\n\t\t\t\"\treturn texture2D( tDiffuse, vUv );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn vec4( 1.0 );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if DEPTH_PACKING == 1\",\n\t\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float getViewZ( const in float depth ) {\",\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\t\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\n\t\t\t\"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\n\t\t\t\"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\n\t\t\t\"\tclipPosition *= clipW; // unprojection.\",\n\n\t\t\t\"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\n\t\t\t\"}\",\n\n\t\t\t\"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if NORMAL_TEXTURE == 1\",\n\t\t\t\"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float scaleDividedByCameraFar;\",\n\t\t\t\"float minResolutionMultipliedByCameraFar;\",\n\n\t\t\t\"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\",\n\t\t\t\"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\",\n\t\t\t\"\tfloat viewDistance = length( viewDelta );\",\n\t\t\t\"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\",\n\n\t\t\t\"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\",\n\t\t\t\"}\",\n\n\t\t\t\"// moving costly divides into consts\",\n\t\t\t\"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\",\n\t\t\t\"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\",\n\n\t\t\t\"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\",\n\t\t\t\"\t// precompute some variables require in getOcclusion.\",\n\t\t\t\"\tscaleDividedByCameraFar = scale / cameraFar;\",\n\t\t\t\"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\",\n\t\t\t\"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\",\n\n\t\t\t\"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\",\n\t\t\t\"\tfloat angle = rand( vUv + randomSeed ) * PI2;\",\n\t\t\t\"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\",\n\t\t\t\"\tvec2 radiusStep = radius;\",\n\n\t\t\t\"\tfloat occlusionSum = 0.0;\",\n\t\t\t\"\tfloat weightSum = 0.0;\",\n\n\t\t\t\"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\",\n\t\t\t\"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\",\n\t\t\t\"\t\tradius += radiusStep;\",\n\t\t\t\"\t\tangle += ANGLE_STEP;\",\n\n\t\t\t\"\t\tfloat sampleDepth = getDepth( sampleUv );\",\n\t\t\t\"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\t\"\t\t\tcontinue;\",\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\",\n\t\t\t\"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\",\n\t\t\t\"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\",\n\t\t\t\"\t\tweightSum += 1.0;\",\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif( weightSum == 0.0 ) discard;\",\n\n\t\t\t\"\treturn occlusionSum * ( intensity / weightSum );\",\n\t\t\t\"}\",\n\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tfloat centerDepth = getDepth( vUv );\",\n\t\t\t\"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\t\"\t\tdiscard;\",\n\t\t\t\"\t}\",\n\n\t\t\t\"\tfloat centerViewZ = getViewZ( centerDepth );\",\n\t\t\t\"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\",\n\n\t\t\t\"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\",\n\n\t\t\t\"\tgl_FragColor = getDefaultColor( vUv );\",\n\t\t\t\"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" )\n\t};\n\t\n\treturn THREE.SAOShader;\n});\n\ndefine('skylark-threejs-ex/shaders/DepthLimitedBlurShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * TODO\n\t */\n\n\tTHREE.DepthLimitedBlurShader = {\n\t\tdefines: {\n\t\t\t\"KERNEL_RADIUS\": 4,\n\t\t\t\"DEPTH_PACKING\": 1,\n\t\t\t\"PERSPECTIVE_CAMERA\": 1\n\t\t},\n\t\tuniforms: {\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"size\": { value: new THREE.Vector2( 512, 512 ) },\n\t\t\t\"sampleUvOffsets\": { value: [ new THREE.Vector2( 0, 0 ) ] },\n\t\t\t\"sampleWeights\": { value: [ 1.0 ] },\n\t\t\t\"tDepth\": { value: null },\n\t\t\t\"cameraNear\": { value: 10 },\n\t\t\t\"cameraFar\": { value: 1000 },\n\t\t\t\"depthCutoff\": { value: 10 },\n\t\t},\n\t\tvertexShader: [\n\t\t\t\"#include <common>\",\n\n\t\t\t\"uniform vec2 size;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"varying vec2 vInvSize;\",\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tvInvSize = 1.0 / size;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\t\tfragmentShader: [\n\t\t\t\"#include <common>\",\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"uniform float cameraNear;\",\n\t\t\t\"uniform float cameraFar;\",\n\t\t\t\"uniform float depthCutoff;\",\n\n\t\t\t\"uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];\",\n\t\t\t\"uniform float sampleWeights[ KERNEL_RADIUS + 1 ];\",\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"varying vec2 vInvSize;\",\n\n\t\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if DEPTH_PACKING == 1\",\n\t\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float getViewZ( const in float depth ) {\",\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\t\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tfloat depth = getDepth( vUv );\",\n\t\t\t\"\tif( depth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\t\"\t\tdiscard;\",\n\t\t\t\"\t}\",\n\n\t\t\t\"\tfloat centerViewZ = -getViewZ( depth );\",\n\t\t\t\"\tbool rBreak = false, lBreak = false;\",\n\n\t\t\t\"\tfloat weightSum = sampleWeights[0];\",\n\t\t\t\"\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;\",\n\n\t\t\t\"\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\",\n\n\t\t\t\"\t\tfloat sampleWeight = sampleWeights[i];\",\n\t\t\t\"\t\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;\",\n\n\t\t\t\"\t\tvec2 sampleUv = vUv + sampleUvOffset;\",\n\t\t\t\"\t\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );\",\n\n\t\t\t\"\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;\",\n\n\t\t\t\"\t\tif( ! rBreak ) {\",\n\t\t\t\"\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\",\n\t\t\t\"\t\t\tweightSum += sampleWeight;\",\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t\tsampleUv = vUv - sampleUvOffset;\",\n\t\t\t\"\t\tviewZ = -getViewZ( getDepth( sampleUv ) );\",\n\n\t\t\t\"\t\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;\",\n\n\t\t\t\"\t\tif( ! lBreak ) {\",\n\t\t\t\"\t\t\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;\",\n\t\t\t\"\t\t\tweightSum += sampleWeight;\",\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor = diffuseSum / weightSum;\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" )\n\t};\n\n\tTHREE.BlurShaderUtils = {\n\n\t\tcreateSampleWeights: function ( kernelRadius, stdDev ) {\n\n\t\t\tvar gaussian = function ( x, stdDev ) {\n\n\t\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * ( stdDev * stdDev ) ) ) / ( Math.sqrt( 2.0 * Math.PI ) * stdDev );\n\n\t\t\t};\n\n\t\t\tvar weights = [];\n\n\t\t\tfor ( var i = 0; i <= kernelRadius; i ++ ) {\n\n\t\t\t\tweights.push( gaussian( i, stdDev ) );\n\n\t\t\t}\n\n\t\t\treturn weights;\n\n\t\t},\n\n\t\tcreateSampleOffsets: function ( kernelRadius, uvIncrement ) {\n\n\t\t\tvar offsets = [];\n\n\t\t\tfor ( var i = 0; i <= kernelRadius; i ++ ) {\n\n\t\t\t\toffsets.push( uvIncrement.clone().multiplyScalar( i ) );\n\n\t\t\t}\n\n\t\t\treturn offsets;\n\n\t\t},\n\n\t\tconfigure: function ( material, kernelRadius, stdDev, uvIncrement ) {\n\n\t\t\tmaterial.defines[ \"KERNEL_RADIUS\" ] = kernelRadius;\n\t\t\tmaterial.uniforms[ \"sampleUvOffsets\" ].value = THREE.BlurShaderUtils.createSampleOffsets( kernelRadius, uvIncrement );\n\t\t\tmaterial.uniforms[ \"sampleWeights\" ].value = THREE.BlurShaderUtils.createSampleWeights( kernelRadius, stdDev );\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.DepthLimitedBlurShader;\n});\n\ndefine('skylark-threejs-ex/shaders/UnpackDepthRGBAShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Unpack RGBA depth shader\n\t * - show RGBA encoded depth as monochrome color\n\t */\n\n\tTHREE.UnpackDepthRGBAShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"opacity\": { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );\",\n\t\t\t\"\tgl_FragColor = vec4( vec3( depth ), opacity );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.UnpackDepthRGBAShader;\n});\n\ndefine('skylark-threejs-ex/shaders/ConvolutionShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Convolution shader\n\t * ported from o3d sample to WebGL / GLSL\n\t * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n\t */\n\n\tTHREE.ConvolutionShader = {\n\n\t\tdefines: {\n\n\t\t\t\"KERNEL_SIZE_FLOAT\": \"25.0\",\n\t\t\t\"KERNEL_SIZE_INT\": \"25\"\n\n\t\t},\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"uImageIncrement\": { value: new THREE.Vector2( 0.001953125, 0.0 ) },\n\t\t\t\"cKernel\": { value: [] }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform vec2 uImageIncrement;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float cKernel[ KERNEL_SIZE_INT ];\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec2 uImageIncrement;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 imageCoord = vUv;\",\n\t\t\t\"\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\",\n\n\t\t\t\"\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\",\n\n\t\t\t\"\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\",\n\t\t\t\"\t\timageCoord += uImageIncrement;\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\n\t\t].join( \"\\n\" ),\n\n\t\tbuildKernel: function ( sigma ) {\n\n\t\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\t\tfunction gauss( x, sigma ) {\n\n\t\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n\t\t\t}\n\n\t\t\tvar i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\t\t\thalfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\t\tvalues = new Array( kernelSize );\n\t\t\tsum = 0.0;\n\t\t\tfor ( i = 0; i < kernelSize; ++ i ) {\n\n\t\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\t\tsum += values[ i ];\n\n\t\t\t}\n\n\t\t\t// normalize the kernel\n\n\t\t\tfor ( i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\t\treturn values;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.ConvolutionShader;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityHighPassShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author bhouston / http://clara.io/\n\t *\n\t * Luminosity\n\t * http://en.wikipedia.org/wiki/Luminosity\n\t */\n\n\tTHREE.LuminosityHighPassShader = {\n\n\t\tshaderID: \"luminosityHighPass\",\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\t\"defaultColor\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec3 defaultColor;\",\n\t\t\t\"uniform float defaultOpacity;\",\n\t\t\t\"uniform float luminosityThreshold;\",\n\t\t\t\"uniform float smoothWidth;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\"\tfloat v = dot( texel.xyz, luma );\",\n\n\t\t\t\"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\t\"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\t\"\tgl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.LuminosityHighPassShader;\n});\n\ndefine('skylark-threejs-ex/shaders/FXAAShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author davidedc / http://www.sketchpatch.net/\n\t *\n\t * NVIDIA FXAA by Timothy Lottes\n\t * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n\t * - WebGL port by @supereggbert\n\t * http://www.glge.org/demos/fxaa/\n\t */\n\n\tTHREE.FXAAShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"resolution\": { value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t\"precision highp float;\",\n\t\t\t\"\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"\",\n\t\t\t\"uniform vec2 resolution;\",\n\t\t\t\"\",\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"\",\n\t\t\t\"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\",\n\t\t\t\"\",\n\t\t\t\"//----------------------------------------------------------------------------------\",\n\t\t\t\"// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\",\n\t\t\t\"// SDK Version: v3.00\",\n\t\t\t\"// Email:       gameworks@nvidia.com\",\n\t\t\t\"// Site:        http://developer.nvidia.com/\",\n\t\t\t\"//\",\n\t\t\t\"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\",\n\t\t\t\"//\",\n\t\t\t\"// Redistribution and use in source and binary forms, with or without\",\n\t\t\t\"// modification, are permitted provided that the following conditions\",\n\t\t\t\"// are met:\",\n\t\t\t\"//  * Redistributions of source code must retain the above copyright\",\n\t\t\t\"//    notice, this list of conditions and the following disclaimer.\",\n\t\t\t\"//  * Redistributions in binary form must reproduce the above copyright\",\n\t\t\t\"//    notice, this list of conditions and the following disclaimer in the\",\n\t\t\t\"//    documentation and/or other materials provided with the distribution.\",\n\t\t\t\"//  * Neither the name of NVIDIA CORPORATION nor the names of its\",\n\t\t\t\"//    contributors may be used to endorse or promote products derived\",\n\t\t\t\"//    from this software without specific prior written permission.\",\n\t\t\t\"//\",\n\t\t\t\"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\n\t\t\t\"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\",\n\t\t\t\"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\",\n\t\t\t\"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\",\n\t\t\t\"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\",\n\t\t\t\"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\",\n\t\t\t\"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\",\n\t\t\t\"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\",\n\t\t\t\"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\",\n\t\t\t\"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\",\n\t\t\t\"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\",\n\t\t\t\"//\",\n\t\t\t\"//----------------------------------------------------------------------------------\",\n\t\t\t\"\",\n\t\t\t\"#define FXAA_PC 1\",\n\t\t\t\"#define FXAA_GLSL_100 1\",\n\t\t\t\"#define FXAA_QUALITY_PRESET 12\",\n\t\t\t\"\",\n\t\t\t\"#define FXAA_GREEN_AS_LUMA 1\",\n\t\t\t\"\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_PC_CONSOLE\",\n\t\t\t\"    //\",\n\t\t\t\"    // The console algorithm for PC is included\",\n\t\t\t\"    // for developers targeting really low spec machines.\",\n\t\t\t\"    // Likely better to just run FXAA_PC, and use a really low preset.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_PC_CONSOLE 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_GLSL_120\",\n\t\t\t\"    #define FXAA_GLSL_120 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_GLSL_130\",\n\t\t\t\"    #define FXAA_GLSL_130 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_HLSL_3\",\n\t\t\t\"    #define FXAA_HLSL_3 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_HLSL_4\",\n\t\t\t\"    #define FXAA_HLSL_4 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_HLSL_5\",\n\t\t\t\"    #define FXAA_HLSL_5 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*==========================================================================*/\",\n\t\t\t\"#ifndef FXAA_GREEN_AS_LUMA\",\n\t\t\t\"    //\",\n\t\t\t\"    // For those using non-linear color,\",\n\t\t\t\"    // and either not able to get luma in alpha, or not wanting to,\",\n\t\t\t\"    // this enables FXAA to run using green as a proxy for luma.\",\n\t\t\t\"    // So with this enabled, no need to pack luma in alpha.\",\n\t\t\t\"    //\",\n\t\t\t\"    // This will turn off AA on anything which lacks some amount of green.\",\n\t\t\t\"    // Pure red and blue or combination of only R and B, will get no AA.\",\n\t\t\t\"    //\",\n\t\t\t\"    // Might want to lower the settings for both,\",\n\t\t\t\"    //    fxaaConsoleEdgeThresholdMin\",\n\t\t\t\"    //    fxaaQualityEdgeThresholdMin\",\n\t\t\t\"    // In order to insure AA does not get turned off on colors\",\n\t\t\t\"    // which contain a minor amount of green.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = On.\",\n\t\t\t\"    // 0 = Off.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_GREEN_AS_LUMA 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_EARLY_EXIT\",\n\t\t\t\"    //\",\n\t\t\t\"    // Controls algorithm's early exit path.\",\n\t\t\t\"    // On PS3 turning this ON adds 2 cycles to the shader.\",\n\t\t\t\"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\",\n\t\t\t\"    // Turning this off on console will result in a more blurry image.\",\n\t\t\t\"    // So this defaults to on.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = On.\",\n\t\t\t\"    // 0 = Off.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_EARLY_EXIT 1\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_DISCARD\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only valid for PC OpenGL currently.\",\n\t\t\t\"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = Use discard on pixels which don't need AA.\",\n\t\t\t\"    //     For APIs which enable concurrent TEX+ROP from same surface.\",\n\t\t\t\"    // 0 = Return unchanged color on pixels which don't need AA.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_DISCARD 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_FAST_PIXEL_OFFSET\",\n\t\t\t\"    //\",\n\t\t\t\"    // Used for GLSL 120 only.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = GL API supports fast pixel offsets\",\n\t\t\t\"    // 0 = do not use fast pixel offsets\",\n\t\t\t\"    //\",\n\t\t\t\"    #ifdef GL_EXT_gpu_shader4\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_NV_gpu_shader5\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_ARB_gpu_shader5\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifndef FXAA_FAST_PIXEL_OFFSET\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 0\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_GATHER4_ALPHA\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = API supports gather4 on alpha channel.\",\n\t\t\t\"    // 0 = API does not support gather4 on alpha channel.\",\n\t\t\t\"    //\",\n\t\t\t\"    #if (FXAA_HLSL_5 == 1)\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_ARB_gpu_shader5\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_NV_gpu_shader5\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifndef FXAA_GATHER4_ALPHA\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 0\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                        FXAA QUALITY - TUNING KNOBS\",\n\t\t\t\"------------------------------------------------------------------------------\",\n\t\t\t\"NOTE the other tuning knobs are now in the shader function inputs!\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#ifndef FXAA_QUALITY_PRESET\",\n\t\t\t\"    //\",\n\t\t\t\"    // Choose the quality preset.\",\n\t\t\t\"    // This needs to be compiled into the shader as it effects code.\",\n\t\t\t\"    // Best option to include multiple presets is to\",\n\t\t\t\"    // in each shader define the preset, then include this file.\",\n\t\t\t\"    //\",\n\t\t\t\"    // OPTIONS\",\n\t\t\t\"    // -----------------------------------------------------------------------\",\n\t\t\t\"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\",\n\t\t\t\"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\",\n\t\t\t\"    // 39       - no dither, very expensive\",\n\t\t\t\"    //\",\n\t\t\t\"    // NOTES\",\n\t\t\t\"    // -----------------------------------------------------------------------\",\n\t\t\t\"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\",\n\t\t\t\"    // 13 = about same speed as FXAA 3.9 and better than 12\",\n\t\t\t\"    // 23 = closest to FXAA 3.9 visually and performance wise\",\n\t\t\t\"    //  _ = the lowest digit is directly related to performance\",\n\t\t\t\"    // _  = the highest digit is directly related to style\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_QUALITY_PRESET 12\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"\",\n\t\t\t\"                           FXAA QUALITY - PRESETS\",\n\t\t\t\"\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                     FXAA QUALITY - MEDIUM DITHER PRESETS\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 10)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 3\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P1 3.0\",\n\t\t\t\"    #define FXAA_QUALITY_P2 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 11)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 4\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 3.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 12)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 5\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 13)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 6\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 14)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 7\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 15)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 8\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                     FXAA QUALITY - LOW DITHER PRESETS\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 20)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 3\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P1 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P2 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 21)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 4\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 22)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 5\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 23)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 6\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 24)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 7\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 3.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 25)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 8\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 26)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 9\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 27)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 10\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 28)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 11\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P10 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 29)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 12\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P10 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P11 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                     FXAA QUALITY - EXTREME QUALITY\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 39)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 12\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P2 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P10 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P11 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"\",\n\t\t\t\"                                API PORTING\",\n\t\t\t\"\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\",\n\t\t\t\"    #define FxaaBool bool\",\n\t\t\t\"    #define FxaaDiscard discard\",\n\t\t\t\"    #define FxaaFloat float\",\n\t\t\t\"    #define FxaaFloat2 vec2\",\n\t\t\t\"    #define FxaaFloat3 vec3\",\n\t\t\t\"    #define FxaaFloat4 vec4\",\n\t\t\t\"    #define FxaaHalf float\",\n\t\t\t\"    #define FxaaHalf2 vec2\",\n\t\t\t\"    #define FxaaHalf3 vec3\",\n\t\t\t\"    #define FxaaHalf4 vec4\",\n\t\t\t\"    #define FxaaInt2 ivec2\",\n\t\t\t\"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\",\n\t\t\t\"    #define FxaaTex sampler2D\",\n\t\t\t\"#else\",\n\t\t\t\"    #define FxaaBool bool\",\n\t\t\t\"    #define FxaaDiscard clip(-1)\",\n\t\t\t\"    #define FxaaFloat float\",\n\t\t\t\"    #define FxaaFloat2 float2\",\n\t\t\t\"    #define FxaaFloat3 float3\",\n\t\t\t\"    #define FxaaFloat4 float4\",\n\t\t\t\"    #define FxaaHalf half\",\n\t\t\t\"    #define FxaaHalf2 half2\",\n\t\t\t\"    #define FxaaHalf3 half3\",\n\t\t\t\"    #define FxaaHalf4 half4\",\n\t\t\t\"    #define FxaaSat(x) saturate(x)\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_GLSL_100 == 1)\",\n\t\t\t\"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\",\n\t\t\t\"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_GLSL_120 == 1)\",\n\t\t\t\"    // Requires,\",\n\t\t\t\"    //  #version 120\",\n\t\t\t\"    // And at least,\",\n\t\t\t\"    //  #extension GL_EXT_gpu_shader4 : enable\",\n\t\t\t\"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\",\n\t\t\t\"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\",\n\t\t\t\"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\",\n\t\t\t\"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\",\n\t\t\t\"    #else\",\n\t\t\t\"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\n\t\t\t\"        // use #extension GL_ARB_gpu_shader5 : enable\",\n\t\t\t\"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n\t\t\t\"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n\t\t\t\"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n\t\t\t\"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_GLSL_130 == 1)\",\n\t\t\t\"    // Requires \\\"#version 130\\\" or better\",\n\t\t\t\"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\n\t\t\t\"        // use #extension GL_ARB_gpu_shader5 : enable\",\n\t\t\t\"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n\t\t\t\"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n\t\t\t\"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n\t\t\t\"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_HLSL_3 == 1)\",\n\t\t\t\"    #define FxaaInt2 float2\",\n\t\t\t\"    #define FxaaTex sampler2D\",\n\t\t\t\"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_HLSL_4 == 1)\",\n\t\t\t\"    #define FxaaInt2 int2\",\n\t\t\t\"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n\t\t\t\"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_HLSL_5 == 1)\",\n\t\t\t\"    #define FxaaInt2 int2\",\n\t\t\t\"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n\t\t\t\"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n\t\t\t\"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\",\n\t\t\t\"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\",\n\t\t\t\"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\",\n\t\t\t\"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\",\n\t\t\t\"#else\",\n\t\t\t\"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"\",\n\t\t\t\"                             FXAA3 QUALITY - PC\",\n\t\t\t\"\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_PC == 1)\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"FxaaFloat4 FxaaPixelShader(\",\n\t\t\t\"    //\",\n\t\t\t\"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n\t\t\t\"    // {xy} = center of pixel\",\n\t\t\t\"    FxaaFloat2 pos,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Used only for FXAA Console, and not used on the 360 version.\",\n\t\t\t\"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n\t\t\t\"    // {xy_} = upper left of pixel\",\n\t\t\t\"    // {_zw} = lower right of pixel\",\n\t\t\t\"    FxaaFloat4 fxaaConsolePosPos,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Input color texture.\",\n\t\t\t\"    // {rgb_} = color in linear or perceptual color space\",\n\t\t\t\"    // if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"    //     {__a} = luma in perceptual color space (not linear)\",\n\t\t\t\"    FxaaTex tex,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on the optimized 360 version of FXAA Console.\",\n\t\t\t\"    // For everything but 360, just use the same input here as for \\\"tex\\\".\",\n\t\t\t\"    // For 360, same texture, just alias with a 2nd sampler.\",\n\t\t\t\"    // This sampler needs to have an exponent bias of -1.\",\n\t\t\t\"    FxaaTex fxaaConsole360TexExpBiasNegOne,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on the optimized 360 version of FXAA Console.\",\n\t\t\t\"    // For everything but 360, just use the same input here as for \\\"tex\\\".\",\n\t\t\t\"    // For 360, same texture, just alias with a 3nd sampler.\",\n\t\t\t\"    // This sampler needs to have an exponent bias of -2.\",\n\t\t\t\"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // {x_} = 1.0/screenWidthInPixels\",\n\t\t\t\"    // {_y} = 1.0/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat2 fxaaQualityRcpFrame,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // This effects sub-pixel AA quality and inversely sharpness.\",\n\t\t\t\"    //   Where N ranges between,\",\n\t\t\t\"    //     N = 0.50 (default)\",\n\t\t\t\"    //     N = 0.33 (sharper)\",\n\t\t\t\"    // {x__} = -N/screenWidthInPixels\",\n\t\t\t\"    // {_y_} = -N/screenHeightInPixels\",\n\t\t\t\"    // {_z_} =  N/screenWidthInPixels\",\n\t\t\t\"    // {__w} =  N/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // Not used on 360, but used on PS3 and PC.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // {x__} = -2.0/screenWidthInPixels\",\n\t\t\t\"    // {_y_} = -2.0/screenHeightInPixels\",\n\t\t\t\"    // {_z_} =  2.0/screenWidthInPixels\",\n\t\t\t\"    // {__w} =  2.0/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // {x__} =  8.0/screenWidthInPixels\",\n\t\t\t\"    // {_y_} =  8.0/screenHeightInPixels\",\n\t\t\t\"    // {_z_} = -4.0/screenWidthInPixels\",\n\t\t\t\"    // {__w} = -4.0/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This used to be the FXAA_QUALITY_SUBPIX define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // Choose the amount of sub-pixel aliasing removal.\",\n\t\t\t\"    // This can effect sharpness.\",\n\t\t\t\"    //   1.00 - upper limit (softer)\",\n\t\t\t\"    //   0.75 - default amount of filtering\",\n\t\t\t\"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\",\n\t\t\t\"    //   0.25 - almost off\",\n\t\t\t\"    //   0.00 - completely off\",\n\t\t\t\"    FxaaFloat fxaaQualitySubpix,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // The minimum amount of local contrast required to apply algorithm.\",\n\t\t\t\"    //   0.333 - too little (faster)\",\n\t\t\t\"    //   0.250 - low quality\",\n\t\t\t\"    //   0.166 - default\",\n\t\t\t\"    //   0.125 - high quality\",\n\t\t\t\"    //   0.063 - overkill (slower)\",\n\t\t\t\"    FxaaFloat fxaaQualityEdgeThreshold,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // Trims the algorithm from processing darks.\",\n\t\t\t\"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\",\n\t\t\t\"    //   0.0625 - high quality (faster)\",\n\t\t\t\"    //   0.0312 - visible limit (slower)\",\n\t\t\t\"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n\t\t\t\"    //   Likely want to set this to zero.\",\n\t\t\t\"    //   As colors that are mostly not-green\",\n\t\t\t\"    //   will appear very dark in the green channel!\",\n\t\t\t\"    //   Tune by looking at mostly non-green content,\",\n\t\t\t\"    //   then start at zero and increase until aliasing is a problem.\",\n\t\t\t\"    FxaaFloat fxaaQualityEdgeThresholdMin,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // This does not effect PS3, as this needs to be compiled in.\",\n\t\t\t\"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\",\n\t\t\t\"    //   Due to the PS3 being ALU bound,\",\n\t\t\t\"    //   there are only three safe values here: 2 and 4 and 8.\",\n\t\t\t\"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n\t\t\t\"    // For all other platforms can be a non-power of two.\",\n\t\t\t\"    //   8.0 is sharper (default!!!)\",\n\t\t\t\"    //   4.0 is softer\",\n\t\t\t\"    //   2.0 is really soft (good only for vector graphics inputs)\",\n\t\t\t\"    FxaaFloat fxaaConsoleEdgeSharpness,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // This does not effect PS3, as this needs to be compiled in.\",\n\t\t\t\"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\",\n\t\t\t\"    //   Due to the PS3 being ALU bound,\",\n\t\t\t\"    //   there are only two safe values here: 1/4 and 1/8.\",\n\t\t\t\"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n\t\t\t\"    // The console setting has a different mapping than the quality setting.\",\n\t\t\t\"    // Other platforms can use other values.\",\n\t\t\t\"    //   0.125 leaves less aliasing, but is softer (default!!!)\",\n\t\t\t\"    //   0.25 leaves more aliasing, and is sharper\",\n\t\t\t\"    FxaaFloat fxaaConsoleEdgeThreshold,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // Trims the algorithm from processing darks.\",\n\t\t\t\"    // The console setting has a different mapping than the quality setting.\",\n\t\t\t\"    // This only applies when FXAA_EARLY_EXIT is 1.\",\n\t\t\t\"    // This does not apply to PS3,\",\n\t\t\t\"    // PS3 was simplified to avoid more shader instructions.\",\n\t\t\t\"    //   0.06 - faster but more aliasing in darks\",\n\t\t\t\"    //   0.05 - default\",\n\t\t\t\"    //   0.04 - slower and less aliasing in darks\",\n\t\t\t\"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n\t\t\t\"    //   Likely want to set this to zero.\",\n\t\t\t\"    //   As colors that are mostly not-green\",\n\t\t\t\"    //   will appear very dark in the green channel!\",\n\t\t\t\"    //   Tune by looking at mostly non-green content,\",\n\t\t\t\"    //   then start at zero and increase until aliasing is a problem.\",\n\t\t\t\"    FxaaFloat fxaaConsoleEdgeThresholdMin,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Extra constants for 360 FXAA Console only.\",\n\t\t\t\"    // Use zeros or anything else for other platforms.\",\n\t\t\t\"    // These must be in physical constant registers and NOT immediates.\",\n\t\t\t\"    // Immediates will result in compiler un-optimizing.\",\n\t\t\t\"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\",\n\t\t\t\"    FxaaFloat4 fxaaConsole360ConstDir\",\n\t\t\t\") {\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat2 posM;\",\n\t\t\t\"    posM.x = pos.x;\",\n\t\t\t\"    posM.y = pos.y;\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\n\t\t\t\"        #if (FXAA_DISCARD == 0)\",\n\t\t\t\"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n\t\t\t\"            #if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"                #define lumaM rgbyM.w\",\n\t\t\t\"            #else\",\n\t\t\t\"                #define lumaM rgbyM.y\",\n\t\t\t\"            #endif\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\",\n\t\t\t\"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\",\n\t\t\t\"        #else\",\n\t\t\t\"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\",\n\t\t\t\"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #if (FXAA_DISCARD == 1)\",\n\t\t\t\"            #define lumaM luma4A.w\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #define lumaE luma4A.z\",\n\t\t\t\"        #define lumaS luma4A.x\",\n\t\t\t\"        #define lumaSE luma4A.y\",\n\t\t\t\"        #define lumaNW luma4B.w\",\n\t\t\t\"        #define lumaN luma4B.z\",\n\t\t\t\"        #define lumaW luma4B.x\",\n\t\t\t\"    #else\",\n\t\t\t\"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n\t\t\t\"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"            #define lumaM rgbyM.w\",\n\t\t\t\"        #else\",\n\t\t\t\"            #define lumaM rgbyM.y\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #if (FXAA_GLSL_100 == 1)\",\n\t\t\t\"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #else\",\n\t\t\t\"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #endif\",\n\t\t\t\"    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat maxSM = max(lumaS, lumaM);\",\n\t\t\t\"    FxaaFloat minSM = min(lumaS, lumaM);\",\n\t\t\t\"    FxaaFloat maxESM = max(lumaE, maxSM);\",\n\t\t\t\"    FxaaFloat minESM = min(lumaE, minSM);\",\n\t\t\t\"    FxaaFloat maxWN = max(lumaN, lumaW);\",\n\t\t\t\"    FxaaFloat minWN = min(lumaN, lumaW);\",\n\t\t\t\"    FxaaFloat rangeMax = max(maxWN, maxESM);\",\n\t\t\t\"    FxaaFloat rangeMin = min(minWN, minESM);\",\n\t\t\t\"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\",\n\t\t\t\"    FxaaFloat range = rangeMax - rangeMin;\",\n\t\t\t\"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\",\n\t\t\t\"    FxaaBool earlyExit = range < rangeMaxClamped;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(earlyExit)\",\n\t\t\t\"        #if (FXAA_DISCARD == 1)\",\n\t\t\t\"            FxaaDiscard;\",\n\t\t\t\"        #else\",\n\t\t\t\"            return rgbyM;\",\n\t\t\t\"        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 0)\",\n\t\t\t\"        #if (FXAA_GLSL_100 == 1)\",\n\t\t\t\"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #else\",\n\t\t\t\"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #endif\",\n\t\t\t\"    #else\",\n\t\t\t\"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat lumaNS = lumaN + lumaS;\",\n\t\t\t\"    FxaaFloat lumaWE = lumaW + lumaE;\",\n\t\t\t\"    FxaaFloat subpixRcpRange = 1.0/range;\",\n\t\t\t\"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\",\n\t\t\t\"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\",\n\t\t\t\"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat lumaNESE = lumaNE + lumaSE;\",\n\t\t\t\"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\",\n\t\t\t\"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\",\n\t\t\t\"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\",\n\t\t\t\"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\",\n\t\t\t\"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\",\n\t\t\t\"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\",\n\t\t\t\"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\",\n\t\t\t\"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\",\n\t\t\t\"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\",\n\t\t\t\"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\",\n\t\t\t\"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\",\n\t\t\t\"    FxaaBool horzSpan = edgeHorz >= edgeVert;\",\n\t\t\t\"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(!horzSpan) lumaN = lumaW;\",\n\t\t\t\"    if(!horzSpan) lumaS = lumaE;\",\n\t\t\t\"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\",\n\t\t\t\"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat gradientN = lumaN - lumaM;\",\n\t\t\t\"    FxaaFloat gradientS = lumaS - lumaM;\",\n\t\t\t\"    FxaaFloat lumaNN = lumaN + lumaM;\",\n\t\t\t\"    FxaaFloat lumaSS = lumaS + lumaM;\",\n\t\t\t\"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\",\n\t\t\t\"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\",\n\t\t\t\"    if(pairN) lengthSign = -lengthSign;\",\n\t\t\t\"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat2 posB;\",\n\t\t\t\"    posB.x = posM.x;\",\n\t\t\t\"    posB.y = posM.y;\",\n\t\t\t\"    FxaaFloat2 offNP;\",\n\t\t\t\"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\",\n\t\t\t\"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\",\n\t\t\t\"    if(!horzSpan) posB.x += lengthSign * 0.5;\",\n\t\t\t\"    if( horzSpan) posB.y += lengthSign * 0.5;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat2 posN;\",\n\t\t\t\"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\",\n\t\t\t\"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\",\n\t\t\t\"    FxaaFloat2 posP;\",\n\t\t\t\"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\",\n\t\t\t\"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\",\n\t\t\t\"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\",\n\t\t\t\"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\",\n\t\t\t\"    FxaaFloat subpixE = subpixC * subpixC;\",\n\t\t\t\"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(!pairN) lumaNN = lumaSS;\",\n\t\t\t\"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\",\n\t\t\t\"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\",\n\t\t\t\"    FxaaFloat subpixF = subpixD * subpixE;\",\n\t\t\t\"    FxaaBool lumaMLTZero = lumaMM < 0.0;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    lumaEndN -= lumaNN * 0.5;\",\n\t\t\t\"    lumaEndP -= lumaNN * 0.5;\",\n\t\t\t\"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\",\n\t\t\t\"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\",\n\t\t\t\"    FxaaBool doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\",\n\t\t\t\"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(doneNP) {\",\n\t\t\t\"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\",\n\t\t\t\"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\",\n\t\t\t\"        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\",\n\t\t\t\"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        #if (FXAA_QUALITY_PS > 3)\",\n\t\t\t\"        if(doneNP) {\",\n\t\t\t\"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"            doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"            doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\",\n\t\t\t\"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\",\n\t\t\t\"            doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\",\n\t\t\t\"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            #if (FXAA_QUALITY_PS > 4)\",\n\t\t\t\"            if(doneNP) {\",\n\t\t\t\"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\",\n\t\t\t\"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\",\n\t\t\t\"                doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\",\n\t\t\t\"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                #if (FXAA_QUALITY_PS > 5)\",\n\t\t\t\"                if(doneNP) {\",\n\t\t\t\"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\",\n\t\t\t\"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\",\n\t\t\t\"                    doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\",\n\t\t\t\"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    #if (FXAA_QUALITY_PS > 6)\",\n\t\t\t\"                    if(doneNP) {\",\n\t\t\t\"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\",\n\t\t\t\"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\",\n\t\t\t\"                        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\",\n\t\t\t\"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                        #if (FXAA_QUALITY_PS > 7)\",\n\t\t\t\"                        if(doneNP) {\",\n\t\t\t\"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                            doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                            doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\",\n\t\t\t\"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\",\n\t\t\t\"                            doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\",\n\t\t\t\"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    #if (FXAA_QUALITY_PS > 8)\",\n\t\t\t\"    if(doneNP) {\",\n\t\t\t\"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\",\n\t\t\t\"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\",\n\t\t\t\"        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\",\n\t\t\t\"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        #if (FXAA_QUALITY_PS > 9)\",\n\t\t\t\"        if(doneNP) {\",\n\t\t\t\"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"            doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"            doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\",\n\t\t\t\"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\",\n\t\t\t\"            doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\",\n\t\t\t\"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            #if (FXAA_QUALITY_PS > 10)\",\n\t\t\t\"            if(doneNP) {\",\n\t\t\t\"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\",\n\t\t\t\"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\",\n\t\t\t\"                doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\",\n\t\t\t\"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                #if (FXAA_QUALITY_PS > 11)\",\n\t\t\t\"                if(doneNP) {\",\n\t\t\t\"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\",\n\t\t\t\"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\",\n\t\t\t\"                    doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\",\n\t\t\t\"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    #if (FXAA_QUALITY_PS > 12)\",\n\t\t\t\"                    if(doneNP) {\",\n\t\t\t\"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\",\n\t\t\t\"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\",\n\t\t\t\"                        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\",\n\t\t\t\"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    }\",\n\t\t\t\"                    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                }\",\n\t\t\t\"                #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            }\",\n\t\t\t\"            #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        }\",\n\t\t\t\"        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    }\",\n\t\t\t\"    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                        }\",\n\t\t\t\"                        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    }\",\n\t\t\t\"                    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                }\",\n\t\t\t\"                #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            }\",\n\t\t\t\"            #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        }\",\n\t\t\t\"        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    }\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat dstN = posM.x - posN.x;\",\n\t\t\t\"    FxaaFloat dstP = posP.x - posM.x;\",\n\t\t\t\"    if(!horzSpan) dstN = posM.y - posN.y;\",\n\t\t\t\"    if(!horzSpan) dstP = posP.y - posM.y;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\",\n\t\t\t\"    FxaaFloat spanLength = (dstP + dstN);\",\n\t\t\t\"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\",\n\t\t\t\"    FxaaFloat spanLengthRcp = 1.0/spanLength;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaBool directionN = dstN < dstP;\",\n\t\t\t\"    FxaaFloat dst = min(dstN, dstP);\",\n\t\t\t\"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\",\n\t\t\t\"    FxaaFloat subpixG = subpixF * subpixF;\",\n\t\t\t\"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\",\n\t\t\t\"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\",\n\t\t\t\"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\",\n\t\t\t\"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\",\n\t\t\t\"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\",\n\t\t\t\"    #if (FXAA_DISCARD == 1)\",\n\t\t\t\"        return FxaaTexTop(tex, posM);\",\n\t\t\t\"    #else\",\n\t\t\t\"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\",\n\t\t\t\"    #endif\",\n\t\t\t\"}\",\n\t\t\t\"/*==========================================================================*/\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"void main() {\",\n\t\t\t\"  gl_FragColor = FxaaPixelShader(\",\n\t\t\t\"    vUv,\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    tDiffuse,\",\n\t\t\t\"    tDiffuse,\",\n\t\t\t\"    tDiffuse,\",\n\t\t\t\"    resolution,\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    0.75,\",\n\t\t\t\"    0.166,\",\n\t\t\t\"    0.0833,\",\n\t\t\t\"    0.0,\",\n\t\t\t\"    0.0,\",\n\t\t\t\"    0.0,\",\n\t\t\t\"    vec4(0.0)\",\n\t\t\t\"  );\",\n\t\t\t\"\",\n\t\t\t\"  // TODO avoid querying texture twice for same texel\",\n\t\t\t\"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.FXAAShader;\n});\n\ndefine('skylark-threejs-ex/shaders/SSAOShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * References:\n\t * http://john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html\n\t * https://learnopengl.com/Advanced-Lighting/SSAO\n\t * https://github.com/McNopper/OpenGL/blob/master/Example28/shader/ssao.frag.glsl\n\t */\n\n\tTHREE.SSAOShader = {\n\n\t\tdefines: {\n\t\t\t\"PERSPECTIVE_CAMERA\": 1,\n\t\t\t\"KERNEL_SIZE\": 32\n\t\t},\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"tNormal\": { value: null },\n\t\t\t\"tDepth\": { value: null },\n\t\t\t\"tNoise\": { value: null },\n\t\t\t\"kernel\": { value: null },\n\t\t\t\"cameraNear\": { value: null },\n\t\t\t\"cameraFar\": { value: null },\n\t\t\t\"resolution\": { value: new THREE.Vector2() },\n\t\t\t\"cameraProjectionMatrix\": { value: new THREE.Matrix4() },\n\t\t\t\"cameraInverseProjectionMatrix\": { value: new THREE.Matrix4() },\n\t\t\t\"kernelRadius\": { value: 8 },\n\t\t\t\"minDistance\": { value: 0.005 },\n\t\t\t\"maxDistance\": { value: 0.05 },\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tNormal;\",\n\t\t\t\"uniform sampler2D tDepth;\",\n\t\t\t\"uniform sampler2D tNoise;\",\n\n\t\t\t\"uniform vec3 kernel[ KERNEL_SIZE ];\",\n\n\t\t\t\"uniform vec2 resolution;\",\n\n\t\t\t\"uniform float cameraNear;\",\n\t\t\t\"uniform float cameraFar;\",\n\t\t\t\"uniform mat4 cameraProjectionMatrix;\",\n\t\t\t\"uniform mat4 cameraInverseProjectionMatrix;\",\n\n\t\t\t\"uniform float kernelRadius;\",\n\t\t\t\"uniform float minDistance;\", // avoid artifacts caused by neighbour fragments with minimal depth difference\n\t\t\t\"uniform float maxDistance;\", // avoid the influence of fragments which are too far away\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\n\t\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"float getLinearDepth( const in vec2 screenPosition ) {\",\n\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\n\t\t\t\"\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\",\n\t\t\t\"\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\",\n\t\t\t\"\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\treturn texture2D( depthSampler, coord ).x;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"}\",\n\n\t\t\t\"float getViewZ( const in float depth ) {\",\n\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\n\t\t\t\"\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"}\",\n\n\t\t\t\"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\n\n\t\t\t\"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\n\n\t\t\t\"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\n\n\t\t\t\"\tclipPosition *= clipW; // unprojection.\",\n\n\t\t\t\"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"vec3 getViewNormal( const in vec2 screenPosition ) {\",\n\n\t\t\t\"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tfloat depth = getDepth( vUv );\",\n\t\t\t\"\tfloat viewZ = getViewZ( depth );\",\n\n\t\t\t\"\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );\",\n\t\t\t\"\tvec3 viewNormal = getViewNormal( vUv );\",\n\n\t\t\t\" vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );\",\n\t\t\t\"\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;\",\n\n\t\t\t// compute matrix used to reorient a kernel vector\n\n\t\t\t\"\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );\",\n\t\t\t\"\tvec3 bitangent = cross( viewNormal, tangent );\",\n\t\t\t\"\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );\",\n\n\t\t\t\" float occlusion = 0.0;\",\n\n\t\t\t\" for ( int i = 0; i < KERNEL_SIZE; i ++ ) {\",\n\n\t\t\t\"\t\tvec3 sampleVector = kernelMatrix * kernel[ i ];\", // reorient sample vector in view space\n\t\t\t\"\t\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );\", // calculate sample point\n\n\t\t\t\"\t\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );\", // project point and calculate NDC\n\t\t\t\"\t\tsamplePointNDC /= samplePointNDC.w;\",\n\n\t\t\t\"\t\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;\", // compute uv coordinates\n\n\t\t\t\"\t\tfloat realDepth = getLinearDepth( samplePointUv );\", // get linear depth from depth texture\n\t\t\t\"\t\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );\", // compute linear depth of the sample view Z value\n\t\t\t\"\t\tfloat delta = sampleDepth - realDepth;\",\n\n\t\t\t\"\t\tif ( delta > minDistance && delta < maxDistance ) {\", // if fragment is before sample point, increase occlusion\n\n\t\t\t\"\t\t\tocclusion += 1.0;\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n\tTHREE.SSAODepthShader = {\n\n\t\tdefines: {\n\t\t\t\"PERSPECTIVE_CAMERA\": 1\n\t\t},\n\n\t\tuniforms: {\n\n\t\t\t\"tDepth\": { value: null },\n\t\t\t\"cameraNear\": { value: null },\n\t\t\t\"cameraFar\": { value: null },\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"uniform float cameraNear;\",\n\t\t\t\"uniform float cameraFar;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"float getLinearDepth( const in vec2 screenPosition ) {\",\n\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\n\t\t\t\"\t\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;\",\n\t\t\t\"\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\",\n\t\t\t\"\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\treturn texture2D( depthSampler, coord ).x;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tfloat depth = getLinearDepth( vUv );\",\n\t\t\t\"\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n\tTHREE.SSAOBlurShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"resolution\": { value: new THREE.Vector2() }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"uniform vec2 resolution;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 texelSize = ( 1.0 / resolution );\",\n\t\t\t\"\tfloat result = 0.0;\",\n\n\t\t\t\"\tfor ( int i = - 2; i <= 2; i ++ ) {\",\n\n\t\t\t\"\t\tfor ( int j = - 2; j <= 2; j ++ ) {\",\n\n\t\t\t\"\t\t\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;\",\n\t\t\t\"\t\t\tresult += texture2D( tDiffuse, vUv + offset ).r;\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.SSAOShader;\n});\n\ndefine('skylark-threejs-ex/shaders/FilmShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Film grain & scanlines shader\n\t *\n\t * - ported from HLSL to WebGL / GLSL\n\t * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n\t *\n\t * Screen Space Static Postprocessor\n\t *\n\t * Produces an analogue noise overlay similar to a film grain / TV static\n\t *\n\t * Original implementation and noise algorithm\n\t * Pat 'Hawthorne' Shearon\n\t *\n\t * Optimized scanlines + noise version with intensity scaling\n\t * Georg 'Leviathan' Steinrohder\n\t *\n\t * This version is provided under a Creative Commons Attribution 3.0 License\n\t * http://creativecommons.org/licenses/by/3.0/\n\t */\n\n\tTHREE.FilmShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"time\": { value: 0.0 },\n\t\t\t\"nIntensity\": { value: 0.5 },\n\t\t\t\"sIntensity\": { value: 0.05 },\n\t\t\t\"sCount\": { value: 4096 },\n\t\t\t\"grayscale\": { value: 1 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#include <common>\",\n\n\t\t\t// control parameter\n\t\t\t\"uniform float time;\",\n\n\t\t\t\"uniform bool grayscale;\",\n\n\t\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\t\t\"uniform float nIntensity;\",\n\n\t\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\t\t\"uniform float sIntensity;\",\n\n\t\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\t\t\"uniform float sCount;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t// sample the source\n\t\t\t\"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n\n\t\t\t// make some noise\n\t\t\t\"\tfloat dx = rand( vUv + time );\",\n\n\t\t\t// add noise\n\t\t\t\"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n\n\t\t\t// get us a sine and cosine\n\t\t\t\"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n\n\t\t\t// add scanlines\n\t\t\t\"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n\n\t\t\t// interpolate between source and result by intensity\n\t\t\t\"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n\n\t\t\t// convert to grayscale if desired\n\t\t\t\"\tif( grayscale ) {\",\n\n\t\t\t\"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.FilmShader;\n});\n\ndefine('skylark-threejs-ex/shaders/DotScreenShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Dot screen shader\n\t * based on glfx.js sepia shader\n\t * https://github.com/evanw/glfx.js\n\t */\n\n\tTHREE.DotScreenShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"tSize\": { value: new THREE.Vector2( 256, 256 ) },\n\t\t\t\"center\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\"angle\": { value: 1.57 },\n\t\t\t\"scale\": { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec2 center;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\"uniform float scale;\",\n\t\t\t\"uniform vec2 tSize;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"float pattern() {\",\n\n\t\t\t\"\tfloat s = sin( angle ), c = cos( angle );\",\n\n\t\t\t\"\tvec2 tex = vUv * tSize - center;\",\n\t\t\t\"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n\n\t\t\t\"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.DotScreenShader;\n});\n\ndefine('skylark-threejs-ex/shaders/LuminosityShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Luminosity\n\t * http://en.wikipedia.org/wiki/Luminosity\n\t */\n\n\tTHREE.LuminosityShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#include <common>\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tfloat l = linearToRelativeLuminance( texel.rgb );\",\n\n\t\t\t\"\tgl_FragColor = vec4( l, l, l, texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.LuminosityShader;\n});\ndefine('skylark-threejs-ex/shaders/SobelOperatorShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\n\t *\n\t * As mentioned in the video the Sobel operator expects a grayscale image as input.\n\t *\n\t */\n\n\tTHREE.SobelOperatorShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"resolution\": { value: new THREE.Vector2() }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec2 resolution;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\n\n\t\t\t// kernel definition (in glsl matrices are filled in column-major order)\n\n\t\t\t\"\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\", // x direction kernel\n\t\t\t\"\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\", // y direction kernel\n\n\t\t\t// fetch the 3x3 neighbourhood of a fragment\n\n\t\t\t// first column\n\n\t\t\t\"\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\",\n\t\t\t\"\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\",\n\t\t\t\"\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\n\n\t\t\t// second column\n\n\t\t\t\"\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\",\n\t\t\t\"\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\",\n\t\t\t\"\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\n\n\t\t\t// third column\n\n\t\t\t\"\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\",\n\t\t\t\"\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\",\n\t\t\t\"\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\n\n\t\t\t// gradient value in x direction\n\n\t\t\t\"\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \",\n\t\t\t\"\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \",\n\t\t\t\"\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\n\n\t\t\t// gradient value in y direction\n\n\t\t\t\"\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \",\n\t\t\t\"\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \",\n\t\t\t\"\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\n\n\t\t\t// magnitute of the total gradient\n\n\t\t\t\"\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( G ), 1 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.SobelOperatorShader;\n});\n\ndefine('skylark-threejs-ex/shaders/ColorifyShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Colorify shader\n\t */\n\n\tTHREE.ColorifyShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"color\": { value: new THREE.Color( 0xffffff ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 color;\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\t\t\t\"\tfloat v = dot( texel.xyz, luma );\",\n\n\t\t\t\"\tgl_FragColor = vec4( v * color, texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.ColorifyShader;\n});\n\ndefine('skylark-threejs-ex/shaders/ToneMapShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author miibond\n\t *\n\t * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n\t */\n\n\tTHREE.ToneMapShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"averageLuminance\": { value: 1.0 },\n\t\t\t\"luminanceMap\": { value: null },\n\t\t\t\"maxLuminance\": { value: 16.0 },\n\t\t\t\"minLuminance\": { value: 0.01 },\n\t\t\t\"middleGrey\": { value: 0.6 }\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#include <common>\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform float middleGrey;\",\n\t\t\t\"uniform float minLuminance;\",\n\t\t\t\"uniform float maxLuminance;\",\n\t\t\t\"#ifdef ADAPTED_LUMINANCE\",\n\t\t\t\"\tuniform sampler2D luminanceMap;\",\n\t\t\t\"#else\",\n\t\t\t\"\tuniform float averageLuminance;\",\n\t\t\t\"#endif\",\n\n\t\t\t\"vec3 ToneMap( vec3 vColor ) {\",\n\t\t\t\"\t#ifdef ADAPTED_LUMINANCE\",\n\t\t\t// Get the calculated average luminance\n\t\t\t\"\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\n\t\t\t\"\t#else\",\n\t\t\t\"\t\tfloat fLumAvg = averageLuminance;\",\n\t\t\t\"\t#endif\",\n\n\t\t\t// Calculate the luminance of the current pixel\n\t\t\t\"\tfloat fLumPixel = linearToRelativeLuminance( vColor );\",\n\n\t\t\t// Apply the modified operator (Eq. 4)\n\t\t\t\"\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\",\n\n\t\t\t\"\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\n\t\t\t\"\treturn fLumCompressed * vColor;\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.ToneMapShader;\n});\n\ndefine('skylark-threejs-ex/shaders/TechnicolorShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author flimshaw / http://charliehoey.com\n\t *\n\t * Technicolor Shader\n\t * Simulates the look of the two-strip technicolor process popular in early 20th century films.\n\t * More historical info here: http://www.widescreenmuseum.com/oldcolor/technicolor1.htm\n\t * Demo here: http://charliehoey.com/technicolor_shader/shader_test.html\n\t */\n\n\tTHREE.TechnicolorShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\n\t\t\t\"\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\",\n\n\t\t\t\"\tgl_FragColor = newTex;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.TechnicolorShader;\n});\n\ndefine('skylark-threejs-ex/shaders/HueSaturationShader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author tapio / http://tapio.github.com/\n\t *\n\t * Hue and saturation adjustment\n\t * https://github.com/evanw/glfx.js\n\t * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n\t * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n\t */\n\n\tTHREE.HueSaturationShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"hue\": { value: 0 },\n\t\t\t\"saturation\": { value: 0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float hue;\",\n\t\t\t\"uniform float saturation;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n\n\t\t\t// hue\n\t\t\t\"\tfloat angle = hue * 3.14159265;\",\n\t\t\t\"\tfloat s = sin(angle), c = cos(angle);\",\n\t\t\t\"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\n\t\t\t\"\tfloat len = length(gl_FragColor.rgb);\",\n\t\t\t\"\tgl_FragColor.rgb = vec3(\",\n\t\t\t\"\t\tdot(gl_FragColor.rgb, weights.xyz),\",\n\t\t\t\"\t\tdot(gl_FragColor.rgb, weights.zxy),\",\n\t\t\t\"\t\tdot(gl_FragColor.rgb, weights.yzx)\",\n\t\t\t\"\t);\",\n\n\t\t\t// saturation\n\t\t\t\"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\n\t\t\t\"\tif (saturation > 0.0) {\",\n\t\t\t\"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\n\t\t\t\"\t} else {\",\n\t\t\t\"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\n\t\t\t\"\t}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.HueSaturationShader;\n});\n\ndefine('skylark-threejs-ex/postprocessing/Pass',[\r\n\t\"skylark-threejs\"\r\n],function(THREE){\r\n\tTHREE.Pass = function () {\r\n\r\n\t\t// if set to true, the pass is processed by the composer\r\n\t\tthis.enabled = true;\r\n\r\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\r\n\t\tthis.needsSwap = true;\r\n\r\n\t\t// if set to true, the pass clears its buffer before rendering\r\n\t\tthis.clear = false;\r\n\r\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\r\n\t\tthis.renderToScreen = false;\r\n\r\n\t};\r\n\r\n\tObject.assign( THREE.Pass.prototype, {\r\n\r\n\t\tsetSize: function ( /* width, height */ ) {},\r\n\r\n\t\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t// Helper for passes that need to fill the viewport with a single quad.\r\n\tTHREE.Pass.FullScreenQuad = ( function () {\r\n\r\n\t\tvar camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\t\tvar geometry = new THREE.PlaneBufferGeometry( 2, 2 );\r\n\r\n\t\tvar FullScreenQuad = function ( material ) {\r\n\r\n\t\t\tthis._mesh = new THREE.Mesh( geometry, material );\r\n\r\n\t\t};\r\n\r\n\t\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._mesh.material;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._mesh.material = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tObject.assign( FullScreenQuad.prototype, {\r\n\r\n\t\t\tdispose: function () {\r\n\r\n\t\t\t\tthis._mesh.geometry.dispose();\r\n\r\n\t\t\t},\r\n\r\n\t\t\trender: function ( renderer ) {\r\n\r\n\t\t\t\trenderer.render( this._mesh, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn FullScreenQuad;\r\n\r\n\t} )();\r\n\r\n\treturn THREE.Pass;\r\n});\ndefine('skylark-threejs-ex/postprocessing/ShaderPass',[\n\t\"skylark-threejs\",\n\t\"./Pass\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.ShaderPass = function ( shader, textureID ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\t\tif ( shader instanceof THREE.ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n\t};\n\n\tTHREE.ShaderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.ShaderPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.ShaderPass;\n});\n\ndefine('skylark-threejs-ex/postprocessing/MaskPass',[\n\t\"skylark-threejs\",\n\t\"./Pass\"\n],function(THREE,Pass){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.MaskPass = function ( scene, camera ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t};\n\n\tTHREE.MaskPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.MaskPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tvar context = renderer.getContext();\n\t\t\tvar state = renderer.state;\n\n\t\t\t// don't update color or depth\n\n\t\t\tstate.buffers.color.setMask( false );\n\t\t\tstate.buffers.depth.setMask( false );\n\n\t\t\t// lock buffers\n\n\t\t\tstate.buffers.color.setLocked( true );\n\t\t\tstate.buffers.depth.setLocked( true );\n\n\t\t\t// set up stencil\n\n\t\t\tvar writeValue, clearValue;\n\n\t\t\tif ( this.inverse ) {\n\n\t\t\t\twriteValue = 0;\n\t\t\t\tclearValue = 1;\n\n\t\t\t} else {\n\n\t\t\t\twriteValue = 1;\n\t\t\t\tclearValue = 0;\n\n\t\t\t}\n\n\t\t\tstate.buffers.stencil.setTest( true );\n\t\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\t\tstate.buffers.stencil.setClear( clearValue );\n\t\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t\t// draw into the stencil buffer\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\t\tstate.buffers.color.setLocked( false );\n\t\t\tstate.buffers.depth.setLocked( false );\n\n\t\t\t// only render where stencil is set to 1\n\n\t\t\tstate.buffers.stencil.setLocked( false );\n\t\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t}\n\n\t} );\n\n\n\tTHREE.ClearMaskPass = function () {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.needsSwap = false;\n\n\t};\n\n\tTHREE.ClearMaskPass.prototype = Object.create( THREE.Pass.prototype );\n\n\tObject.assign( THREE.ClearMaskPass.prototype, {\n\n\t\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.MaskPass;\n});\n\ndefine('skylark-threejs-ex/postprocessing/EffectComposer',[\n\t\"skylark-threejs\",\n\t\"../shaders/CopyShader\",\n\t\"./ShaderPass\",\n\t\"./MaskPass\"\n],function(THREE){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.EffectComposer = function ( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar parameters = {\n\t\t\t\tminFilter: THREE.LinearFilter,\n\t\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\t\tformat: THREE.RGBAFormat,\n\t\t\t\tstencilBuffer: false\n\t\t\t};\n\n\t\t\tvar size = renderer.getSize( new THREE.Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new THREE.WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( THREE.CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on THREE.CopyShader' );\n\n\t\t}\n\n\t\tif ( THREE.ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on THREE.ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\n\n\t\tthis.clock = new THREE.Clock();\n\n\t};\n\n\tObject.assign( THREE.EffectComposer.prototype, {\n\n\t\tswapBuffers: function () {\n\n\t\t\tvar tmp = this.readBuffer;\n\t\t\tthis.readBuffer = this.writeBuffer;\n\t\t\tthis.writeBuffer = tmp;\n\n\t\t},\n\n\t\taddPass: function ( pass ) {\n\n\t\t\tthis.passes.push( pass );\n\t\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t},\n\n\t\tinsertPass: function ( pass, index ) {\n\n\t\t\tthis.passes.splice( index, 0, pass );\n\n\t\t},\n\n\t\tisLastEnabledPass: function ( passIndex ) {\n\n\t\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\trender: function ( deltaTime ) {\n\n\t\t\t// deltaTime value is in seconds\n\n\t\t\tif ( deltaTime === undefined ) {\n\n\t\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\t\tvar maskActive = false;\n\n\t\t\tvar pass, i, il = this.passes.length;\n\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tpass = this.passes[ i ];\n\n\t\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.swapBuffers();\n\n\t\t\t\t}\n\n\t\t\t\tif ( THREE.MaskPass !== undefined ) {\n\n\t\t\t\t\tif ( pass instanceof THREE.MaskPass ) {\n\n\t\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\n\n\t\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t\t},\n\n\t\treset: function ( renderTarget ) {\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\tvar size = this.renderer.getSize( new THREE.Vector2() );\n\t\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\t\tthis._width = size.width;\n\t\t\t\tthis._height = size.height;\n\n\t\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t\t}\n\n\t\t\tthis.renderTarget1.dispose();\n\t\t\tthis.renderTarget2.dispose();\n\t\t\tthis.renderTarget1 = renderTarget;\n\t\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis._width = width;\n\t\t\tthis._height = height;\n\n\t\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\t\tthis._pixelRatio = pixelRatio;\n\n\t\t\tthis.setSize( this._width, this._height );\n\n\t\t}\n\n\t} );\n\n\n\t\n\treturn THREE.EffectComposer;\n});\n\ndefine('skylark-threejs-ex/postprocessing/RenderPass',[\n\t\"skylark-threejs\",\n\t\"./Pass\"\n],function(THREE,Pass){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\n\t};\n\n\tTHREE.RenderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.RenderPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t\t}\n\n\t\t\tif ( this.clearColor ) {\n\n\t\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t\t}\n\n\t\t\tif ( this.clearDepth ) {\n\n\t\t\t\trenderer.clearDepth();\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\tif ( this.clearColor ) {\n\n\t\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t\t}\n\n\t\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t\t}\n\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.RenderPass;\n});\n\ndefine('skylark-threejs-ex/curves/NURBSUtils',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author renej\n\t * NURBS utils\n\t *\n\t * See NURBSCurve and NURBSSurface.\n\t *\n\t **/\n\n\n\t/**************************************************************\n\t *\tNURBS Utils\n\t **************************************************************/\n\n\tTHREE.NURBSUtils = {\n\n\t\t/*\n\t\tFinds knot vector span.\n\n\t\tp : degree\n\t\tu : parametric value\n\t\tU : knot vector\n\n\t\treturns the span\n\t\t*/\n\t\tfindSpan: function ( p, u, U ) {\n\n\t\t\tvar n = U.length - p - 1;\n\n\t\t\tif ( u >= U[ n ] ) {\n\n\t\t\t\treturn n - 1;\n\n\t\t\t}\n\n\t\t\tif ( u <= U[ p ] ) {\n\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\tvar low = p;\n\t\t\tvar high = n;\n\t\t\tvar mid = Math.floor( ( low + high ) / 2 );\n\n\t\t\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\t\t\tif ( u < U[ mid ] ) {\n\n\t\t\t\t\thigh = mid;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlow = mid;\n\n\t\t\t\t}\n\n\t\t\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t\t\t}\n\n\t\t\treturn mid;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\t\tspan : span in which u lies\n\t\tu    : parametric point\n\t\tp    : degree\n\t\tU    : knot vector\n\n\t\treturns array[p+1] with basis functions values.\n\t\t*/\n\t\tcalcBasisFunctions: function ( span, u, p, U ) {\n\n\t\t\tvar N = [];\n\t\t\tvar left = [];\n\t\t\tvar right = [];\n\t\t\tN[ 0 ] = 1.0;\n\n\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\t\tvar saved = 0.0;\n\n\t\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\t\tvar temp = N[ r ] / ( rv + lv );\n\t\t\t\t\tN[ r ] = saved + rv * temp;\n\t\t\t\t\tsaved = lv * temp;\n\n\t\t\t\t }\n\n\t\t\t\t N[ j ] = saved;\n\n\t\t\t }\n\n\t\t\t return N;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\t\tp : degree of B-Spline\n\t\tU : knot vector\n\t\tP : control points (x, y, z, w)\n\t\tu : parametric point\n\n\t\treturns point for given u\n\t\t*/\n\t\tcalcBSplinePoint: function ( p, U, P, u ) {\n\n\t\t\tvar span = this.findSpan( p, u, U );\n\t\t\tvar N = this.calcBasisFunctions( span, u, p, U );\n\t\t\tvar C = new THREE.Vector4( 0, 0, 0, 0 );\n\n\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\tvar point = P[ span - p + j ];\n\t\t\t\tvar Nj = N[ j ];\n\t\t\t\tvar wNj = point.w * Nj;\n\t\t\t\tC.x += point.x * wNj;\n\t\t\t\tC.y += point.y * wNj;\n\t\t\t\tC.z += point.z * wNj;\n\t\t\t\tC.w += point.w * Nj;\n\n\t\t\t}\n\n\t\t\treturn C;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\t\tspan : span in which u lies\n\t\tu    : parametric point\n\t\tp    : degree\n\t\tn    : number of derivatives to calculate\n\t\tU    : knot vector\n\n\t\treturns array[n+1][p+1] with basis functions derivatives\n\t\t*/\n\t\tcalcBasisFunctionDerivatives: function ( span, u, p, n, U ) {\n\n\t\t\tvar zeroArr = [];\n\t\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\t\tzeroArr[ i ] = 0.0;\n\n\t\t\tvar ders = [];\n\t\t\tfor ( var i = 0; i <= n; ++ i )\n\t\t\t\tders[ i ] = zeroArr.slice( 0 );\n\n\t\t\tvar ndu = [];\n\t\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\t\t\tndu[ 0 ][ 0 ] = 1.0;\n\n\t\t\tvar left = zeroArr.slice( 0 );\n\t\t\tvar right = zeroArr.slice( 0 );\n\n\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\t\tvar saved = 0.0;\n\n\t\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\t\t\tvar temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\t\t\tsaved = lv * temp;\n\n\t\t\t\t}\n\n\t\t\t\tndu[ j ][ j ] = saved;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t\t\t}\n\n\t\t\tfor ( var r = 0; r <= p; ++ r ) {\n\n\t\t\t\tvar s1 = 0;\n\t\t\t\tvar s2 = 1;\n\n\t\t\t\tvar a = [];\n\t\t\t\tfor ( var i = 0; i <= p; ++ i ) {\n\n\t\t\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t\t\t}\n\t\t\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\t\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\t\t\tvar d = 0.0;\n\t\t\t\t\tvar rk = r - k;\n\t\t\t\t\tvar pk = p - k;\n\n\t\t\t\t\tif ( r >= k ) {\n\n\t\t\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\t\t\tvar j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\t\t\tfor ( var j = j1; j <= j2; ++ j ) {\n\n\t\t\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( r <= pk ) {\n\n\t\t\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tders[ k ][ r ] = d;\n\n\t\t\t\t\tvar j = s1;\n\t\t\t\t\ts1 = s2;\n\t\t\t\t\ts2 = j;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar r = p;\n\n\t\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\t\tders[ k ][ j ] *= r;\n\n\t\t\t\t}\n\t\t\t\tr *= p - k;\n\n\t\t\t}\n\n\t\t\treturn ders;\n\n\t\t},\n\n\n\t\t/*\n\t\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\t\tp  : degree\n\t\t\tU  : knot vector\n\t\t\tP  : control points\n\t\t\tu  : Parametric points\n\t\t\tnd : number of derivatives\n\n\t\t\treturns array[d+1] with derivatives\n\t\t\t*/\n\t\tcalcBSplineDerivatives: function ( p, U, P, u, nd ) {\n\n\t\t\tvar du = nd < p ? nd : p;\n\t\t\tvar CK = [];\n\t\t\tvar span = this.findSpan( p, u, U );\n\t\t\tvar nders = this.calcBasisFunctionDerivatives( span, u, p, du, U );\n\t\t\tvar Pw = [];\n\n\t\t\tfor ( var i = 0; i < P.length; ++ i ) {\n\n\t\t\t\tvar point = P[ i ].clone();\n\t\t\t\tvar w = point.w;\n\n\t\t\t\tpoint.x *= w;\n\t\t\t\tpoint.y *= w;\n\t\t\t\tpoint.z *= w;\n\n\t\t\t\tPw[ i ] = point;\n\n\t\t\t}\n\t\t\tfor ( var k = 0; k <= du; ++ k ) {\n\n\t\t\t\tvar point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tCK[ k ] = point;\n\n\t\t\t}\n\n\t\t\tfor ( var k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\t\t\tCK[ k ] = new THREE.Vector4( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn CK;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate \"K over I\"\n\n\t\treturns k!/(i!(k-i)!)\n\t\t*/\n\t\tcalcKoverI: function ( k, i ) {\n\n\t\t\tvar nom = 1;\n\n\t\t\tfor ( var j = 2; j <= k; ++ j ) {\n\n\t\t\t\tnom *= j;\n\n\t\t\t}\n\n\t\t\tvar denom = 1;\n\n\t\t\tfor ( var j = 2; j <= i; ++ j ) {\n\n\t\t\t\tdenom *= j;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 2; j <= k - i; ++ j ) {\n\n\t\t\t\tdenom *= j;\n\n\t\t\t}\n\n\t\t\treturn nom / denom;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\t\tPders : result of function calcBSplineDerivatives\n\n\t\treturns array with derivatives for rational curve.\n\t\t*/\n\t\tcalcRationalCurveDerivatives: function ( Pders ) {\n\n\t\t\tvar nd = Pders.length;\n\t\t\tvar Aders = [];\n\t\t\tvar wders = [];\n\n\t\t\tfor ( var i = 0; i < nd; ++ i ) {\n\n\t\t\t\tvar point = Pders[ i ];\n\t\t\t\tAders[ i ] = new THREE.Vector3( point.x, point.y, point.z );\n\t\t\t\twders[ i ] = point.w;\n\n\t\t\t}\n\n\t\t\tvar CK = [];\n\n\t\t\tfor ( var k = 0; k < nd; ++ k ) {\n\n\t\t\t\tvar v = Aders[ k ].clone();\n\n\t\t\t\tfor ( var i = 1; i <= k; ++ i ) {\n\n\t\t\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( this.calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn CK;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points in homogeneous space\n\t\tu  : parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array with derivatives.\n\t\t*/\n\t\tcalcNURBSDerivatives: function ( p, U, P, u, nd ) {\n\n\t\t\tvar Pders = this.calcBSplineDerivatives( p, U, P, u, nd );\n\t\t\treturn this.calcRationalCurveDerivatives( Pders );\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\t\tp1, p2 : degrees of B-Spline surface\n\t\tU1, U2 : knot vectors\n\t\tP      : control points (x, y, z, w)\n\t\tu, v   : parametric values\n\n\t\treturns point for given (u, v)\n\t\t*/\n\t\tcalcSurfacePoint: function ( p, q, U, V, P, u, v, target ) {\n\n\t\t\tvar uspan = this.findSpan( p, u, U );\n\t\t\tvar vspan = this.findSpan( q, v, V );\n\t\t\tvar Nu = this.calcBasisFunctions( uspan, u, p, U );\n\t\t\tvar Nv = this.calcBasisFunctions( vspan, v, q, V );\n\t\t\tvar temp = [];\n\n\t\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\t\ttemp[ l ] = new THREE.Vector4( 0, 0, 0, 0 );\n\t\t\t\tfor ( var k = 0; k <= p; ++ k ) {\n\n\t\t\t\t\tvar point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\t\t\tvar w = point.w;\n\t\t\t\t\tpoint.x *= w;\n\t\t\t\t\tpoint.y *= w;\n\t\t\t\t\tpoint.z *= w;\n\t\t\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar Sw = new THREE.Vector4( 0, 0, 0, 0 );\n\t\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t\t\t}\n\n\t\t\tSw.divideScalar( Sw.w );\n\t\t\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n\t\t}\n\n\t};\n\treturn THREE.NURBSUtils;\n});\n\ndefine('skylark-threejs-ex/curves/NURBSCurve',[\n\t\"skylark-threejs\",\n\t\"./NURBSUtils\"\n],function(THREE){\n\t/**\n\t * @author renej\n\t * NURBS curve object\n\t *\n\t * Derives from Curve, overriding getPoint and getTangent.\n\t *\n\t * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n\t *\n\t **/\n\n\n\t/**************************************************************\n\t *\tNURBS curve\n\t **************************************************************/\n\n\tTHREE.NURBSCurve = function ( degree, knots /* array of reals */, controlPoints /* array of Vector(2|3|4) */, startKnot /* index in knots */, endKnot /* index in knots */ ) {\n\n\t\tTHREE.Curve.call( this );\n\n\t\tthis.degree = degree;\n\t\tthis.knots = knots;\n\t\tthis.controlPoints = [];\n\t\t// Used by periodic NURBS to remove hidden spans\n\t\tthis.startKnot = startKnot || 0;\n\t\tthis.endKnot = endKnot || ( this.knots.length - 1 );\n\t\tfor ( var i = 0; i < controlPoints.length; ++ i ) {\n\n\t\t\t// ensure Vector4 for control points\n\t\t\tvar point = controlPoints[ i ];\n\t\t\tthis.controlPoints[ i ] = new THREE.Vector4( point.x, point.y, point.z, point.w );\n\n\t\t}\n\n\t};\n\n\n\tTHREE.NURBSCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.NURBSCurve.prototype.constructor = THREE.NURBSCurve;\n\n\n\tTHREE.NURBSCurve.prototype.getPoint = function ( t ) {\n\n\t\tvar u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u\n\n\t\t// following results in (wx, wy, wz, w) homogeneous point\n\t\tvar hpoint = THREE.NURBSUtils.calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );\n\n\t\tif ( hpoint.w != 1.0 ) {\n\n\t\t\t// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n\t\t\thpoint.divideScalar( hpoint.w );\n\n\t\t}\n\n\t\treturn new THREE.Vector3( hpoint.x, hpoint.y, hpoint.z );\n\n\t};\n\n\n\tTHREE.NURBSCurve.prototype.getTangent = function ( t ) {\n\n\t\tvar u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );\n\t\tvar ders = THREE.NURBSUtils.calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );\n\t\tvar tangent = ders[ 1 ].clone();\n\t\ttangent.normalize();\n\n\t\treturn tangent;\n\n\t};\n\treturn THREE.NURBSCurve;\n});\n\ndefine('skylark-threejs-ex/curves/NURBSSurface',[\n\t\"skylark-threejs\",\n\t\"./NURBSUtils\"\n],function(THREE){\n\t/**\n\t * @author renej\n\t * NURBS surface object\n\t *\n\t * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n\t *\n\t **/\n\n\n\t/**************************************************************\n\t *\tNURBS surface\n\t **************************************************************/\n\n\tTHREE.NURBSSurface = function ( degree1, degree2, knots1, knots2 /* arrays of reals */, controlPoints /* array^2 of Vector(2|3|4) */ ) {\n\n\t\tthis.degree1 = degree1;\n\t\tthis.degree2 = degree2;\n\t\tthis.knots1 = knots1;\n\t\tthis.knots2 = knots2;\n\t\tthis.controlPoints = [];\n\n\t\tvar len1 = knots1.length - degree1 - 1;\n\t\tvar len2 = knots2.length - degree2 - 1;\n\n\t\t// ensure Vector4 for control points\n\t\tfor ( var i = 0; i < len1; ++ i ) {\n\n\t\t\tthis.controlPoints[ i ] = [];\n\t\t\tfor ( var j = 0; j < len2; ++ j ) {\n\n\t\t\t\tvar point = controlPoints[ i ][ j ];\n\t\t\t\tthis.controlPoints[ i ][ j ] = new THREE.Vector4( point.x, point.y, point.z, point.w );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\n\tTHREE.NURBSSurface.prototype = {\n\n\t\tconstructor: THREE.NURBSSurface,\n\n\t\tgetPoint: function ( t1, t2, target ) {\n\n\t\t\tvar u = this.knots1[ 0 ] + t1 * ( this.knots1[ this.knots1.length - 1 ] - this.knots1[ 0 ] ); // linear mapping t1->u\n\t\t\tvar v = this.knots2[ 0 ] + t2 * ( this.knots2[ this.knots2.length - 1 ] - this.knots2[ 0 ] ); // linear mapping t2->u\n\n\t\t\tTHREE.NURBSUtils.calcSurfacePoint( this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target );\n\n\t\t}\n\t};\n\treturn THREE.NURBSSurface;\n});\n\ndefine('skylark-threejs-ex/objects/Lensflare',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.Lensflare = function () {\n\n\t\tTHREE.Mesh.call( this, THREE.Lensflare.Geometry, new THREE.MeshBasicMaterial( { opacity: 0, transparent: true } ) );\n\n\t\tthis.type = 'Lensflare';\n\t\tthis.frustumCulled = false;\n\t\tthis.renderOrder = Infinity;\n\n\t\t//\n\n\t\tvar positionScreen = new THREE.Vector3();\n\t\tvar positionView = new THREE.Vector3();\n\n\t\t// textures\n\n\t\tvar tempMap = new THREE.DataTexture( new Uint8Array( 16 * 16 * 3 ), 16, 16, THREE.RGBFormat );\n\t\ttempMap.minFilter = THREE.NearestFilter;\n\t\ttempMap.magFilter = THREE.NearestFilter;\n\t\ttempMap.wrapS = THREE.ClampToEdgeWrapping;\n\t\ttempMap.wrapT = THREE.ClampToEdgeWrapping;\n\n\t\tvar occlusionMap = new THREE.DataTexture( new Uint8Array( 16 * 16 * 3 ), 16, 16, THREE.RGBFormat );\n\t\tocclusionMap.minFilter = THREE.NearestFilter;\n\t\tocclusionMap.magFilter = THREE.NearestFilter;\n\t\tocclusionMap.wrapS = THREE.ClampToEdgeWrapping;\n\t\tocclusionMap.wrapT = THREE.ClampToEdgeWrapping;\n\n\t\t// material\n\n\t\tvar geometry = THREE.Lensflare.Geometry;\n\n\t\tvar material1a = new THREE.RawShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\t'scale': { value: null },\n\t\t\t\t'screenPosition': { value: null }\n\t\t\t},\n\t\t\tvertexShader: [\n\n\t\t\t\t'precision highp float;',\n\n\t\t\t\t'uniform vec3 screenPosition;',\n\t\t\t\t'uniform vec2 scale;',\n\n\t\t\t\t'attribute vec3 position;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\t\t\tfragmentShader: [\n\n\t\t\t\t'precision highp float;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\t\t\tdepthTest: true,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\tvar material1b = new THREE.RawShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\t'map': { value: tempMap },\n\t\t\t\t'scale': { value: null },\n\t\t\t\t'screenPosition': { value: null }\n\t\t\t},\n\t\t\tvertexShader: [\n\n\t\t\t\t'precision highp float;',\n\n\t\t\t\t'uniform vec3 screenPosition;',\n\t\t\t\t'uniform vec2 scale;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUV = uv;',\n\n\t\t\t\t'\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\t\t\tfragmentShader: [\n\n\t\t\t\t'precision highp float;',\n\n\t\t\t\t'uniform sampler2D map;',\n\n\t\t\t\t'varying vec2 vUV;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tgl_FragColor = texture2D( map, vUV );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\t// the following object is used for occlusionMap generation\n\n\t\tvar mesh1 = new THREE.Mesh( geometry, material1a );\n\n\t\t//\n\n\t\tvar elements = [];\n\n\t\tvar shader = THREE.LensflareElement.Shader;\n\n\t\tvar material2 = new THREE.RawShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\t'map': { value: null },\n\t\t\t\t'occlusionMap': { value: occlusionMap },\n\t\t\t\t'color': { value: new THREE.Color( 0xffffff ) },\n\t\t\t\t'scale': { value: new THREE.Vector2() },\n\t\t\t\t'screenPosition': { value: new THREE.Vector3() }\n\t\t\t},\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\ttransparent: true,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\tvar mesh2 = new THREE.Mesh( geometry, material2 );\n\n\t\tthis.addElement = function ( element ) {\n\n\t\t\telements.push( element );\n\n\t\t};\n\n\t\t//\n\n\t\tvar scale = new THREE.Vector2();\n\t\tvar screenPositionPixels = new THREE.Vector2();\n\t\tvar validArea = new THREE.Box2();\n\t\tvar viewport = new THREE.Vector4();\n\n\t\tthis.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\trenderer.getCurrentViewport( viewport );\n\n\t\t\tvar invAspect = viewport.w / viewport.z;\n\t\t\tvar halfViewportWidth = viewport.z / 2.0;\n\t\t\tvar halfViewportHeight = viewport.w / 2.0;\n\n\t\t\tvar size = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\t// calculate position in screen space\n\n\t\t\tpositionView.setFromMatrixPosition( this.matrixWorld );\n\t\t\tpositionView.applyMatrix4( camera.matrixWorldInverse );\n\n\t\t\tif ( positionView.z > 0 ) return; // lensflare is behind the camera\n\n\t\t\tpositionScreen.copy( positionView ).applyMatrix4( camera.projectionMatrix );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( positionScreen.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( positionScreen.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, tempMap );\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tvar uniforms = material1a.uniforms;\n\t\t\t\tuniforms[ \"scale\" ].value = scale;\n\t\t\t\tuniforms[ \"screenPosition\" ].value = positionScreen;\n\n\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1a, mesh1, null );\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, occlusionMap );\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tvar uniforms = material1b.uniforms;\n\t\t\t\tuniforms[ \"scale\" ].value = scale;\n\t\t\t\tuniforms[ \"screenPosition\" ].value = positionScreen;\n\n\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1b, mesh1, null );\n\n\t\t\t\t// render elements\n\n\t\t\t\tvar vecX = - positionScreen.x * 2;\n\t\t\t\tvar vecY = - positionScreen.y * 2;\n\n\t\t\t\tfor ( var i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar element = elements[ i ];\n\n\t\t\t\t\tvar uniforms = material2.uniforms;\n\n\t\t\t\t\tuniforms[ \"color\" ].value.copy( element.color );\n\t\t\t\t\tuniforms[ \"map\" ].value = element.texture;\n\t\t\t\t\tuniforms[ \"screenPosition\" ].value.x = positionScreen.x + vecX * element.distance;\n\t\t\t\t\tuniforms[ \"screenPosition\" ].value.y = positionScreen.y + vecY * element.distance;\n\n\t\t\t\t\tvar size = element.size / viewport.w;\n\t\t\t\t\tvar invAspect = viewport.w / viewport.z;\n\n\t\t\t\t\tuniforms[ \"scale\" ].value.set( size * invAspect, size );\n\n\t\t\t\t\tmaterial2.uniformsNeedUpdate = true;\n\n\t\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material2, mesh2, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tmaterial1a.dispose();\n\t\t\tmaterial1b.dispose();\n\t\t\tmaterial2.dispose();\n\n\t\t\ttempMap.dispose();\n\t\t\tocclusionMap.dispose();\n\n\t\t\tfor ( var i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\telements[ i ].texture.dispose();\n\n\t\t\t}\n\n\t\t};\n\n\t};\n\n\tTHREE.Lensflare.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.Lensflare.prototype.constructor = THREE.Lensflare;\n\tTHREE.Lensflare.prototype.isLensflare = true;\n\n\t//\n\n\tTHREE.LensflareElement = function ( texture, size, distance, color ) {\n\n\t\tthis.texture = texture;\n\t\tthis.size = size || 1;\n\t\tthis.distance = distance || 0;\n\t\tthis.color = color || new THREE.Color( 0xffffff );\n\n\t};\n\n\tTHREE.LensflareElement.Shader = {\n\n\t\tuniforms: {\n\n\t\t\t'map': { value: null },\n\t\t\t'occlusionMap': { value: null },\n\t\t\t'color': { value: null },\n\t\t\t'scale': { value: null },\n\t\t\t'screenPosition': { value: null }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform vec3 screenPosition;',\n\t\t\t'uniform vec2 scale;',\n\n\t\t\t'uniform sampler2D occlusionMap;',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float vVisibility;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUV = uv;',\n\n\t\t\t'\tvec2 pos = position.xy;',\n\n\t\t\t'\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\n\t\t\t'\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\n\n\t\t\t'\tvVisibility =        visibility.r / 9.0;',\n\t\t\t'\tvVisibility *= 1.0 - visibility.g / 9.0;',\n\t\t\t'\tvVisibility *=       visibility.b / 9.0;',\n\n\t\t\t'\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\n\t\t\t'precision highp float;',\n\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform vec3 color;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float vVisibility;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec4 texture = texture2D( map, vUV );',\n\t\t\t'\ttexture.a *= vVisibility;',\n\t\t\t'\tgl_FragColor = texture;',\n\t\t\t'\tgl_FragColor.rgb *= color;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' )\n\n\t};\n\n\tTHREE.Lensflare.Geometry = ( function () {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar float32Array = new Float32Array( [\n\t\t\t- 1, - 1, 0, 0, 0,\n\t\t\t1, - 1, 0, 1, 0,\n\t\t\t1, 1, 0, 1, 1,\n\t\t\t- 1, 1, 0, 0, 1\n\t\t] );\n\n\t\tvar interleavedBuffer = new THREE.InterleavedBuffer( float32Array, 5 );\n\n\t\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\tgeometry.setAttribute( 'position', new THREE.InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\tgeometry.setAttribute( 'uv', new THREE.InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\treturn geometry;\n\n\t} )();\n\t\n\treturn THREE.Lensflare;\n});\n\ndefine('skylark-threejs-ex/objects/Reflector',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Slayvin / http://slayvin.net\n\t */\n\n\tTHREE.Reflector = function ( geometry, options ) {\n\n\t\tTHREE.Mesh.call( this, geometry );\n\n\t\tthis.type = 'Reflector';\n\n\t\tvar scope = this;\n\n\t\toptions = options || {};\n\n\t\tvar color = ( options.color !== undefined ) ? new THREE.Color( options.color ) : new THREE.Color( 0x7F7F7F );\n\t\tvar textureWidth = options.textureWidth || 512;\n\t\tvar textureHeight = options.textureHeight || 512;\n\t\tvar clipBias = options.clipBias || 0;\n\t\tvar shader = options.shader || THREE.Reflector.ReflectorShader;\n\t\tvar recursion = options.recursion !== undefined ? options.recursion : 0;\n\t\tvar encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n\n\t\t//\n\n\t\tvar reflectorPlane = new THREE.Plane();\n\t\tvar normal = new THREE.Vector3();\n\t\tvar reflectorWorldPosition = new THREE.Vector3();\n\t\tvar cameraWorldPosition = new THREE.Vector3();\n\t\tvar rotationMatrix = new THREE.Matrix4();\n\t\tvar lookAtPosition = new THREE.Vector3( 0, 0, - 1 );\n\t\tvar clipPlane = new THREE.Vector4();\n\n\t\tvar view = new THREE.Vector3();\n\t\tvar target = new THREE.Vector3();\n\t\tvar q = new THREE.Vector4();\n\n\t\tvar textureMatrix = new THREE.Matrix4();\n\t\tvar virtualCamera = new THREE.PerspectiveCamera();\n\n\t\tvar parameters = {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBFormat,\n\t\t\tstencilBuffer: false,\n\t\t\tencoding: encoding\n\t\t};\n\n\t\tvar renderTarget = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\t\tif ( ! THREE.MathUtils.isPowerOfTwo( textureWidth ) || ! THREE.MathUtils.isPowerOfTwo( textureHeight ) ) {\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t}\n\n\t\tvar material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tvertexShader: shader.vertexShader\n\t\t} );\n\n\t\tmaterial.uniforms[ \"tDiffuse\" ].value = renderTarget.texture;\n\t\tmaterial.uniforms[ \"color\" ].value = color;\n\t\tmaterial.uniforms[ \"textureMatrix\" ].value = textureMatrix;\n\n\t\tthis.material = material;\n\n\t\tthis.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\tif ( 'recursion' in camera.userData ) {\n\n\t\t\t\tif ( camera.userData.recursion === recursion ) return;\n\n\t\t\t\tcamera.userData.recursion ++;\n\n\t\t\t}\n\n\t\t\treflectorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\t\tnormal.set( 0, 0, 1 );\n\t\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\t\tview.subVectors( reflectorWorldPosition, cameraWorldPosition );\n\n\t\t\t// Avoid rendering when reflector is facing away\n\n\t\t\tif ( view.dot( normal ) > 0 ) return;\n\n\t\t\tview.reflect( normal ).negate();\n\t\t\tview.add( reflectorWorldPosition );\n\n\t\t\trotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\t\tlookAtPosition.set( 0, 0, - 1 );\n\t\t\tlookAtPosition.applyMatrix4( rotationMatrix );\n\t\t\tlookAtPosition.add( cameraWorldPosition );\n\n\t\t\ttarget.subVectors( reflectorWorldPosition, lookAtPosition );\n\t\t\ttarget.reflect( normal ).negate();\n\t\t\ttarget.add( reflectorWorldPosition );\n\n\t\t\tvirtualCamera.position.copy( view );\n\t\t\tvirtualCamera.up.set( 0, 1, 0 );\n\t\t\tvirtualCamera.up.applyMatrix4( rotationMatrix );\n\t\t\tvirtualCamera.up.reflect( normal );\n\t\t\tvirtualCamera.lookAt( target );\n\n\t\t\tvirtualCamera.far = camera.far; // Used in WebGLBackground\n\n\t\t\tvirtualCamera.updateMatrixWorld();\n\t\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\tvirtualCamera.userData.recursion = 0;\n\n\t\t\t// Update the texture matrix\n\t\t\ttextureMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\t\t\ttextureMatrix.multiply( virtualCamera.projectionMatrix );\n\t\t\ttextureMatrix.multiply( virtualCamera.matrixWorldInverse );\n\t\t\ttextureMatrix.multiply( scope.matrixWorld );\n\n\t\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\t\treflectorPlane.setFromNormalAndCoplanarPoint( normal, reflectorWorldPosition );\n\t\t\treflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\n\n\t\t\tclipPlane.set( reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant );\n\n\t\t\tvar projectionMatrix = virtualCamera.projectionMatrix;\n\n\t\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t\tq.z = - 1.0;\n\t\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t\t// Calculate the scaled plane vector\n\t\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\n\n\t\t\t// Replacing the third row of the projection matrix\n\t\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\n\t\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\t\t// Render\n\n\t\t\tscope.visible = false;\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\t\trenderer.xr.enabled = false; // Avoid camera modification and recursion\n\t\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\t\t\tif ( renderer.autoClear === false ) renderer.clear();\n\t\t\trenderer.render( scene, virtualCamera );\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t// Restore viewport\n\n\t\t\tvar viewport = camera.viewport;\n\n\t\t\tif ( viewport !== undefined ) {\n\n\t\t\t\trenderer.state.viewport( viewport );\n\n\t\t\t}\n\n\t\t\tscope.visible = true;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn renderTarget;\n\n\t\t};\n\n\t};\n\n\tTHREE.Reflector.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.Reflector.prototype.constructor = THREE.Reflector;\n\n\tTHREE.Reflector.ReflectorShader = {\n\n\t\tuniforms: {\n\n\t\t\t'color': {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t'tDiffuse': {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t'textureMatrix': {\n\t\t\t\tvalue: null\n\t\t\t}\n\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'uniform mat4 textureMatrix;',\n\t\t\t'varying vec4 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUv = textureMatrix * vec4( position, 1.0 );',\n\n\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t'}'\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D tDiffuse;',\n\t\t\t'varying vec4 vUv;',\n\n\t\t\t'float blendOverlay( float base, float blend ) {',\n\n\t\t\t'\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n\n\t\t\t'}',\n\n\t\t\t'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n\n\t\t\t'\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n\n\t\t\t'}',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec4 base = texture2DProj( tDiffuse, vUv );',\n\t\t\t'\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n\n\t\t\t'}'\n\t\t].join( '\\n' )\n\t};\n\t\n\treturn THREE.Reflector;\n});\n\ndefine('skylark-threejs-ex/objects/Refractor',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\tTHREE.Refractor = function ( geometry, options ) {\n\n\t\tTHREE.Mesh.call( this, geometry );\n\n\t\tthis.type = 'Refractor';\n\n\t\tvar scope = this;\n\n\t\toptions = options || {};\n\n\t\tvar color = ( options.color !== undefined ) ? new THREE.Color( options.color ) : new THREE.Color( 0x7F7F7F );\n\t\tvar textureWidth = options.textureWidth || 512;\n\t\tvar textureHeight = options.textureHeight || 512;\n\t\tvar clipBias = options.clipBias || 0;\n\t\tvar shader = options.shader || THREE.Refractor.RefractorShader;\n\t\tvar encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n\n\t\t//\n\n\t\tvar virtualCamera = new THREE.PerspectiveCamera();\n\t\tvirtualCamera.matrixAutoUpdate = false;\n\t\tvirtualCamera.userData.refractor = true;\n\n\t\t//\n\n\t\tvar refractorPlane = new THREE.Plane();\n\t\tvar textureMatrix = new THREE.Matrix4();\n\n\t\t// render target\n\n\t\tvar parameters = {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBFormat,\n\t\t\tstencilBuffer: false,\n\t\t\tencoding: encoding\n\t\t};\n\n\t\tvar renderTarget = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\t\tif ( ! THREE.MathUtils.isPowerOfTwo( textureWidth ) || ! THREE.MathUtils.isPowerOfTwo( textureHeight ) ) {\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t}\n\n\t\t// material\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: true // ensures, refractors are drawn from farthest to closest\n\t\t} );\n\n\t\tthis.material.uniforms[ \"color\" ].value = color;\n\t\tthis.material.uniforms[ \"tDiffuse\" ].value = renderTarget.texture;\n\t\tthis.material.uniforms[ \"textureMatrix\" ].value = textureMatrix;\n\n\t\t// functions\n\n\t\tvar visible = ( function () {\n\n\t\t\tvar refractorWorldPosition = new THREE.Vector3();\n\t\t\tvar cameraWorldPosition = new THREE.Vector3();\n\t\t\tvar rotationMatrix = new THREE.Matrix4();\n\n\t\t\tvar view = new THREE.Vector3();\n\t\t\tvar normal = new THREE.Vector3();\n\n\t\t\treturn function visible( camera ) {\n\n\t\t\t\trefractorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\t\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\t\tview.subVectors( refractorWorldPosition, cameraWorldPosition );\n\n\t\t\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\t\t\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\t\t\treturn view.dot( normal ) < 0;\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar updateRefractorPlane = ( function () {\n\n\t\t\tvar normal = new THREE.Vector3();\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar scale = new THREE.Vector3();\n\n\t\t\treturn function updateRefractorPlane() {\n\n\t\t\t\tscope.matrixWorld.decompose( position, quaternion, scale );\n\t\t\t\tnormal.set( 0, 0, 1 ).applyQuaternion( quaternion ).normalize();\n\n\t\t\t\t// flip the normal because we want to cull everything above the plane\n\n\t\t\t\tnormal.negate();\n\n\t\t\t\trefractorPlane.setFromNormalAndCoplanarPoint( normal, position );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar updateVirtualCamera = ( function () {\n\n\t\t\tvar clipPlane = new THREE.Plane();\n\t\t\tvar clipVector = new THREE.Vector4();\n\t\t\tvar q = new THREE.Vector4();\n\n\t\t\treturn function updateVirtualCamera( camera ) {\n\n\t\t\t\tvirtualCamera.matrixWorld.copy( camera.matrixWorld );\n\t\t\t\tvirtualCamera.matrixWorldInverse.getInverse( virtualCamera.matrixWorld );\n\t\t\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\n\t\t\t\tvirtualCamera.far = camera.far; // used in WebGLBackground\n\n\t\t\t\t// The following code creates an oblique view frustum for clipping.\n\t\t\t\t// see: Lengyel, Eric. “Oblique View Frustum Depth Projection and Clipping”.\n\t\t\t\t// Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp. 5–16\n\n\t\t\t\tclipPlane.copy( refractorPlane );\n\t\t\t\tclipPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\n\n\t\t\t\tclipVector.set( clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant );\n\n\t\t\t\t// calculate the clip-space corner point opposite the clipping plane and\n\t\t\t\t// transform it into camera space by multiplying it by the inverse of the projection matrix\n\n\t\t\t\tvar projectionMatrix = virtualCamera.projectionMatrix;\n\n\t\t\t\tq.x = ( Math.sign( clipVector.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t\t\tq.y = ( Math.sign( clipVector.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t\t\tq.z = - 1.0;\n\t\t\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t\t\t// calculate the scaled plane vector\n\n\t\t\t\tclipVector.multiplyScalar( 2.0 / clipVector.dot( q ) );\n\n\t\t\t\t// replacing the third row of the projection matrix\n\n\t\t\t\tprojectionMatrix.elements[ 2 ] = clipVector.x;\n\t\t\t\tprojectionMatrix.elements[ 6 ] = clipVector.y;\n\t\t\t\tprojectionMatrix.elements[ 10 ] = clipVector.z + 1.0 - clipBias;\n\t\t\t\tprojectionMatrix.elements[ 14 ] = clipVector.w;\n\n\t\t\t};\n\n\t\t} )();\n\n\t\t// This will update the texture matrix that is used for projective texture mapping in the shader.\n\t\t// see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\n\n\t\tfunction updateTextureMatrix( camera ) {\n\n\t\t\t// this matrix does range mapping to [ 0, 1 ]\n\n\t\t\ttextureMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\t// we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\n\t\t\t// (matrix above) with the projection and view matrix of the virtual camera\n\t\t\t// and the model matrix of the refractor\n\n\t\t\ttextureMatrix.multiply( camera.projectionMatrix );\n\t\t\ttextureMatrix.multiply( camera.matrixWorldInverse );\n\t\t\ttextureMatrix.multiply( scope.matrixWorld );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction render( renderer, scene, camera ) {\n\n\t\t\tscope.visible = false;\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\t\trenderer.xr.enabled = false; // avoid camera modification\n\t\t\trenderer.shadowMap.autoUpdate = false; // avoid re-computing shadows\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\t\t\tif ( renderer.autoClear === false ) renderer.clear();\n\t\t\trenderer.render( scene, virtualCamera );\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t// restore viewport\n\n\t\t\tvar viewport = camera.viewport;\n\n\t\t\tif ( viewport !== undefined ) {\n\n\t\t\t\trenderer.state.viewport( viewport );\n\n\t\t\t}\n\n\t\t\tscope.visible = true;\n\n\t\t}\n\n\t\t//\n\n\t\tthis.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t// ensure refractors are rendered only once per frame\n\n\t\t\tif ( camera.userData.refractor === true ) return;\n\n\t\t\t// avoid rendering when the refractor is viewed from behind\n\n\t\t\tif ( ! visible( camera ) === true ) return;\n\n\t\t\t// update\n\n\t\t\tupdateRefractorPlane();\n\n\t\t\tupdateTextureMatrix( camera );\n\n\t\t\tupdateVirtualCamera( camera );\n\n\t\t\trender( renderer, scene, camera );\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn renderTarget;\n\n\t\t};\n\n\t};\n\n\tTHREE.Refractor.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.Refractor.prototype.constructor = THREE.Refractor;\n\n\tTHREE.Refractor.RefractorShader = {\n\n\t\tuniforms: {\n\n\t\t\t'color': {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t'tDiffuse': {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t'textureMatrix': {\n\t\t\t\tvalue: null\n\t\t\t}\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t'uniform mat4 textureMatrix;',\n\n\t\t\t'varying vec4 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUv = textureMatrix * vec4( position, 1.0 );',\n\n\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ),\n\n\t\tfragmentShader: [\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D tDiffuse;',\n\n\t\t\t'varying vec4 vUv;',\n\n\t\t\t'float blendOverlay( float base, float blend ) {',\n\n\t\t\t'\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n\n\t\t\t'}',\n\n\t\t\t'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n\n\t\t\t'\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n\n\t\t\t'}',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec4 base = texture2DProj( tDiffuse, vUv );',\n\n\t\t\t'\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' )\n\t};\n\t\n\treturn THREE.Refractor;\n});\n\ndefine('skylark-threejs-ex/loaders/TTFLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author gero3 / https://github.com/gero3\n\t * @author tentone / https://github.com/tentone\n\t * @author troy351 / https://github.com/troy351\n\t *\n\t * Requires opentype.js to be included in the project.\n\t * Loads TTF files and converts them into typeface JSON that can be used directly\n\t * to create THREE.Font objects.\n\t */\n\n\tTHREE.TTFLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.reversed = false;\n\n\t};\n\n\n\tTHREE.TTFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.TTFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( arraybuffer ) {\n\n\t\t\tfunction convert( font, reversed ) {\n\n\t\t\t\tvar round = Math.round;\n\n\t\t\t\tvar glyphs = {};\n\t\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\t\tvar token = {\n\t\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\t\to: ''\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tglyphs: glyphs,\n\t\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\t\tboundingBox: {\n\t\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t\t},\n\t\t\t\t\tresolution: 1000,\n\t\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction reverseCommands( commands ) {\n\n\t\t\t\tvar paths = [];\n\t\t\t\tvar path;\n\n\t\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\t\tpath = [ c ];\n\t\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\t\tpath.push( c );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tvar reversed = [];\n\n\t\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\t\tvar result = {\n\t\t\t\t\t\ttype: 'm',\n\t\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t\t};\n\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\t\treversed.push( result );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn reversed;\n\n\t\t\t}\n\n\t\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.TTFLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/3MFLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author technohippy / https://github.com/technohippy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n\t *\n\t * The following features from the core specification are supported:\n\t *\n\t * - 3D Models\n\t * - Object Resources (Meshes and Components)\n\t * - Material Resources (Base Materials)\n\t *\n\t * 3MF Materials and Properties Extension are only partially supported.\n\t *\n\t * - Texture 2D\n\t * - Texture 2D Groups\n\t * - Color Groups (Vertex Colors)\n\t * - Metallic Display Properties (PBR)\n\t */\n\n\tTHREE.ThreeMFLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.availableExtensions = [];\n\n\t};\n\n\tTHREE.ThreeMFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.ThreeMFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager );\n\n\t\t\tfunction loadDocument( data ) {\n\n\t\t\t\tvar zip = null;\n\t\t\t\tvar file = null;\n\n\t\t\t\tvar relsName;\n\t\t\t\tvar modelRelsName;\n\t\t\t\tvar modelPartNames = [];\n\t\t\t\tvar printTicketPartNames = [];\n\t\t\t\tvar texturesPartNames = [];\n\t\t\t\tvar otherPartNames = [];\n\n\t\t\t\tvar rels;\n\t\t\t\tvar modelRels;\n\t\t\t\tvar modelParts = {};\n\t\t\t\tvar printTicketParts = {};\n\t\t\t\tvar texturesParts = {};\n\t\t\t\tvar otherParts = {};\n\n\t\t\t\ttry {\n\n\t\t\t\t\tzip = new JSZip( data ); // eslint-disable-line no-undef\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: jszip missing and file is compressed.' );\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( file in zip.files ) {\n\n\t\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\n\n\t\t\t\t\t\trelsName = file;\n\n\t\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\n\n\t\t\t\t\t\tmodelRelsName = file;\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/.*\\.model$/ ) ) {\n\n\t\t\t\t\t\tmodelPartNames.push( file );\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/Metadata\\/.*\\.xml$/ ) ) {\n\n\t\t\t\t\t\tprintTicketPartNames.push( file );\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\n\n\t\t\t\t\t\ttexturesPartNames.push( file );\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/Other\\/.*/ ) ) {\n\n\t\t\t\t\t\totherPartNames.push( file );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar relsView = new Uint8Array( zip.file( relsName ).asArrayBuffer() );\n\t\t\t\tvar relsFileText = THREE.LoaderUtils.decodeText( relsView );\n\t\t\t\trels = parseRelsXml( relsFileText );\n\n\t\t\t\t//\n\n\t\t\t\tif ( modelRelsName ) {\n\n\t\t\t\t\tvar relsView = new Uint8Array( zip.file( modelRelsName ).asArrayBuffer() );\n\t\t\t\t\tvar relsFileText = THREE.LoaderUtils.decodeText( relsView );\n\t\t\t\t\tmodelRels = parseRelsXml( relsFileText );\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tfor ( var i = 0; i < modelPartNames.length; i ++ ) {\n\n\t\t\t\t\tvar modelPart = modelPartNames[ i ];\n\t\t\t\t\tvar view = new Uint8Array( zip.file( modelPart ).asArrayBuffer() );\n\n\t\t\t\t\tvar fileText = THREE.LoaderUtils.decodeText( view );\n\t\t\t\t\tvar xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar modelNode = xmlData.querySelector( 'model' );\n\t\t\t\t\tvar extensions = {};\n\n\t\t\t\t\tfor ( var i = 0; i < modelNode.attributes.length; i ++ ) {\n\n\t\t\t\t\t\tvar attr = modelNode.attributes[ i ];\n\t\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\n\n\t\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar modelData = parseModelNode( modelNode );\n\t\t\t\t\tmodelData[ 'xml' ] = modelNode;\n\n\t\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\n\n\t\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodelParts[ modelPart ] = modelData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tfor ( var i = 0; i < texturesPartNames.length; i ++ ) {\n\n\t\t\t\t\tvar texturesPartName = texturesPartNames[ i ];\n\t\t\t\t\ttexturesParts[ texturesPartName ] = zip.file( texturesPartName ).asArrayBuffer();\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\trels: rels,\n\t\t\t\t\tmodelRels: modelRels,\n\t\t\t\t\tmodel: modelParts,\n\t\t\t\t\tprintTicket: printTicketParts,\n\t\t\t\t\ttexture: texturesParts,\n\t\t\t\t\tother: otherParts\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction parseRelsXml( relsFileText ) {\n\n\t\t\t\tvar relationships = [];\n\n\t\t\t\tvar relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\n\n\t\t\t\tvar relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\n\n\t\t\t\tfor ( var i = 0; i < relsNodes.length; i ++ ) {\n\n\t\t\t\t\tvar relsNode = relsNodes[ i ];\n\n\t\t\t\t\tvar relationship = {\n\t\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\n\t\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\n\t\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\n\t\t\t\t\t};\n\n\t\t\t\t\trelationships.push( relationship );\n\n\t\t\t\t}\n\n\t\t\t\treturn relationships;\n\n\t\t\t}\n\n\t\t\tfunction parseMetadataNodes( metadataNodes ) {\n\n\t\t\t\tvar metadataData = {};\n\n\t\t\t\tfor ( var i = 0; i < metadataNodes.length; i ++ ) {\n\n\t\t\t\t\tvar metadataNode = metadataNodes[ i ];\n\t\t\t\t\tvar name = metadataNode.getAttribute( 'name' );\n\t\t\t\t\tvar validNames = [\n\t\t\t\t\t\t'Title',\n\t\t\t\t\t\t'Designer',\n\t\t\t\t\t\t'Description',\n\t\t\t\t\t\t'Copyright',\n\t\t\t\t\t\t'LicenseTerms',\n\t\t\t\t\t\t'Rating',\n\t\t\t\t\t\t'CreationDate',\n\t\t\t\t\t\t'ModificationDate'\n\t\t\t\t\t];\n\n\t\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\n\n\t\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn metadataData;\n\n\t\t\t}\n\n\t\t\tfunction parseBasematerialsNode( basematerialsNode ) {\n\n\t\t\t\tvar basematerialsData = {\n\t\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\n\t\t\t\t\tbasematerials: []\n\t\t\t\t};\n\n\t\t\t\tvar basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\n\n\t\t\t\tfor ( var i = 0; i < basematerialNodes.length; i ++ ) {\n\n\t\t\t\t\tvar basematerialNode = basematerialNodes[ i ];\n\t\t\t\t\tvar basematerialData = parseBasematerialNode( basematerialNode );\n\t\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\t\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\n\n\t\t\t\t}\n\n\t\t\t\treturn basematerialsData;\n\n\t\t\t}\n\n\t\t\tfunction parseTexture2DNode( texture2DNode ) {\n\n\t\t\t\tvar texture2dData = {\n\t\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\n\t\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\n\t\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\n\t\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\n\t\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\n\t\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\n\t\t\t\t};\n\n\t\t\t\treturn texture2dData;\n\n\t\t\t}\n\n\t\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\n\n\t\t\t\tvar texture2DGroupData = {\n\t\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\n\t\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\n\t\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t\t};\n\n\t\t\t\tvar tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\n\n\t\t\t\tvar uvs = [];\n\n\t\t\t\tfor ( var i = 0; i < tex2coordNodes.length; i ++ ) {\n\n\t\t\t\t\tvar tex2coordNode = tex2coordNodes[ i ];\n\t\t\t\t\tvar u = tex2coordNode.getAttribute( 'u' );\n\t\t\t\t\tvar v = tex2coordNode.getAttribute( 'v' );\n\n\t\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\n\n\t\t\t\t}\n\n\t\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\n\n\t\t\t\treturn texture2DGroupData;\n\n\t\t\t}\n\n\t\t\tfunction parseColorGroupNode( colorGroupNode ) {\n\n\t\t\t\tvar colorGroupData = {\n\t\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\n\t\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t\t};\n\n\t\t\t\tvar colorNodes = colorGroupNode.querySelectorAll( 'color' );\n\n\t\t\t\tvar colors = [];\n\t\t\t\tvar colorObject = new THREE.Color();\n\n\t\t\t\tfor ( var i = 0; i < colorNodes.length; i ++ ) {\n\n\t\t\t\t\tvar colorNode = colorNodes[ i ];\n\t\t\t\t\tvar color = colorNode.getAttribute( 'color' );\n\n\t\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ) );\n\t\t\t\t\tcolorObject.convertSRGBToLinear(); // color is in sRGB\n\n\t\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\n\n\t\t\t\t}\n\n\t\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\n\n\t\t\t\treturn colorGroupData;\n\n\t\t\t}\n\n\t\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\n\n\t\t\t\tvar metallicDisplaypropertiesData = {\n\t\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\n\t\t\t\t};\n\n\t\t\t\tvar metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\n\n\t\t\t\tvar metallicData = [];\n\n\t\t\t\tfor ( var i = 0; i < metallicNodes.length; i ++ ) {\n\n\t\t\t\t\tvar metallicNode = metallicNodes[ i ];\n\n\t\t\t\t\tmetallicData.push( {\n\t\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\n\t\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\n\t\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tmetallicDisplaypropertiesData.data = metallicData;\n\n\t\t\t\treturn metallicDisplaypropertiesData;\n\n\t\t\t}\n\n\t\t\tfunction parseBasematerialNode( basematerialNode ) {\n\n\t\t\t\tvar basematerialData = {};\n\n\t\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\n\t\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\n\t\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\n\n\t\t\t\treturn basematerialData;\n\n\t\t\t}\n\n\t\t\tfunction parseMeshNode( meshNode ) {\n\n\t\t\t\tvar meshData = {};\n\n\t\t\t\tvar vertices = [];\n\t\t\t\tvar vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\n\n\t\t\t\tfor ( var i = 0; i < vertexNodes.length; i ++ ) {\n\n\t\t\t\t\tvar vertexNode = vertexNodes[ i ];\n\t\t\t\t\tvar x = vertexNode.getAttribute( 'x' );\n\t\t\t\t\tvar y = vertexNode.getAttribute( 'y' );\n\t\t\t\t\tvar z = vertexNode.getAttribute( 'z' );\n\n\t\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\n\n\t\t\t\t}\n\n\t\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\n\n\t\t\t\tvar triangleProperties = [];\n\t\t\t\tvar triangles = [];\n\t\t\t\tvar triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\n\n\t\t\t\tfor ( var i = 0; i < triangleNodes.length; i ++ ) {\n\n\t\t\t\t\tvar triangleNode = triangleNodes[ i ];\n\t\t\t\t\tvar v1 = triangleNode.getAttribute( 'v1' );\n\t\t\t\t\tvar v2 = triangleNode.getAttribute( 'v2' );\n\t\t\t\t\tvar v3 = triangleNode.getAttribute( 'v3' );\n\t\t\t\t\tvar p1 = triangleNode.getAttribute( 'p1' );\n\t\t\t\t\tvar p2 = triangleNode.getAttribute( 'p2' );\n\t\t\t\t\tvar p3 = triangleNode.getAttribute( 'p3' );\n\t\t\t\t\tvar pid = triangleNode.getAttribute( 'pid' );\n\n\t\t\t\t\tvar triangleProperty = {};\n\n\t\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\n\t\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\n\t\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\n\n\t\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\n\n\t\t\t\t\t// optional\n\n\t\t\t\t\tif ( p1 ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( p2 ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( p3 ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pid ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\n\n\t\t\t\t\t\ttriangleProperties.push( triangleProperty );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\n\t\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\n\n\t\t\t\treturn meshData;\n\n\t\t\t}\n\n\t\t\tfunction parseComponentsNode( componentsNode ) {\n\n\t\t\t\tvar components = [];\n\n\t\t\t\tvar componentNodes = componentsNode.querySelectorAll( 'component' );\n\n\t\t\t\tfor ( var i = 0; i < componentNodes.length; i ++ ) {\n\n\t\t\t\t\tvar componentNode = componentNodes[ i ];\n\t\t\t\t\tvar componentData = parseComponentNode( componentNode );\n\t\t\t\t\tcomponents.push( componentData );\n\n\t\t\t\t}\n\n\t\t\t\treturn components;\n\n\t\t\t}\n\n\t\t\tfunction parseComponentNode( componentNode ) {\n\n\t\t\t\tvar componentData = {};\n\n\t\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\n\n\t\t\t\tvar transform = componentNode.getAttribute( 'transform' );\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t}\n\n\t\t\t\treturn componentData;\n\n\t\t\t}\n\n\t\t\tfunction parseTransform( transform ) {\n\n\t\t\t\tvar t = [];\n\t\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\n\n\t\t\t\t\tt.push( parseFloat( s ) );\n\n\t\t\t\t} );\n\n\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\tmatrix.set(\n\t\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\n\t\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\n\t\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\n\t\t\t\t\t 0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\treturn matrix;\n\n\t\t\t}\n\n\t\t\tfunction parseObjectNode( objectNode ) {\n\n\t\t\t\tvar objectData = {\n\t\t\t\t\ttype: objectNode.getAttribute( 'type' )\n\t\t\t\t};\n\n\t\t\t\tvar id = objectNode.getAttribute( 'id' );\n\n\t\t\t\tif ( id ) {\n\n\t\t\t\t\tobjectData[ 'id' ] = id;\n\n\t\t\t\t}\n\n\t\t\t\tvar pid = objectNode.getAttribute( 'pid' );\n\n\t\t\t\tif ( pid ) {\n\n\t\t\t\t\tobjectData[ 'pid' ] = pid;\n\n\t\t\t\t}\n\n\t\t\t\tvar pindex = objectNode.getAttribute( 'pindex' );\n\n\t\t\t\tif ( pindex ) {\n\n\t\t\t\t\tobjectData[ 'pindex' ] = pindex;\n\n\t\t\t\t}\n\n\t\t\t\tvar thumbnail = objectNode.getAttribute( 'thumbnail' );\n\n\t\t\t\tif ( thumbnail ) {\n\n\t\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\n\n\t\t\t\t}\n\n\t\t\t\tvar partnumber = objectNode.getAttribute( 'partnumber' );\n\n\t\t\t\tif ( partnumber ) {\n\n\t\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\n\n\t\t\t\t}\n\n\t\t\t\tvar name = objectNode.getAttribute( 'name' );\n\n\t\t\t\tif ( name ) {\n\n\t\t\t\t\tobjectData[ 'name' ] = name;\n\n\t\t\t\t}\n\n\t\t\t\tvar meshNode = objectNode.querySelector( 'mesh' );\n\n\t\t\t\tif ( meshNode ) {\n\n\t\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\n\n\t\t\t\t}\n\n\t\t\t\tvar componentsNode = objectNode.querySelector( 'components' );\n\n\t\t\t\tif ( componentsNode ) {\n\n\t\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\n\n\t\t\t\t}\n\n\t\t\t\treturn objectData;\n\n\t\t\t}\n\n\t\t\tfunction parseResourcesNode( resourcesNode ) {\n\n\t\t\t\tvar resourcesData = {};\n\n\t\t\t\tresourcesData[ 'basematerials' ] = {};\n\t\t\t\tvar basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\n\n\t\t\t\tfor ( var i = 0; i < basematerialsNodes.length; i ++ ) {\n\n\t\t\t\t\tvar basematerialsNode = basematerialsNodes[ i ];\n\t\t\t\t\tvar basematerialsData = parseBasematerialsNode( basematerialsNode );\n\t\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'texture2d' ] = {};\n\t\t\t\tvar textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\n\n\t\t\t\tfor ( var i = 0; i < textures2DNodes.length; i ++ ) {\n\n\t\t\t\t\tvar textures2DNode = textures2DNodes[ i ];\n\t\t\t\t\tvar texture2DData = parseTexture2DNode( textures2DNode );\n\t\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'colorgroup' ] = {};\n\t\t\t\tvar colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\n\n\t\t\t\tfor ( var i = 0; i < colorGroupNodes.length; i ++ ) {\n\n\t\t\t\t\tvar colorGroupNode = colorGroupNodes[ i ];\n\t\t\t\t\tvar colorGroupData = parseColorGroupNode( colorGroupNode );\n\t\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\n\t\t\t\tvar pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\n\n\t\t\t\tfor ( var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\n\n\t\t\t\t\tvar pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\n\t\t\t\t\tvar pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\n\t\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'texture2dgroup' ] = {};\n\t\t\t\tvar textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\n\n\t\t\t\tfor ( var i = 0; i < textures2DGroupNodes.length; i ++ ) {\n\n\t\t\t\t\tvar textures2DGroupNode = textures2DGroupNodes[ i ];\n\t\t\t\t\tvar textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\n\t\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'object' ] = {};\n\t\t\t\tvar objectNodes = resourcesNode.querySelectorAll( 'object' );\n\n\t\t\t\tfor ( var i = 0; i < objectNodes.length; i ++ ) {\n\n\t\t\t\t\tvar objectNode = objectNodes[ i ];\n\t\t\t\t\tvar objectData = parseObjectNode( objectNode );\n\t\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\n\n\t\t\t\t}\n\n\t\t\t\treturn resourcesData;\n\n\t\t\t}\n\n\t\t\tfunction parseBuildNode( buildNode ) {\n\n\t\t\t\tvar buildData = [];\n\t\t\t\tvar itemNodes = buildNode.querySelectorAll( 'item' );\n\n\t\t\t\tfor ( var i = 0; i < itemNodes.length; i ++ ) {\n\n\t\t\t\t\tvar itemNode = itemNodes[ i ];\n\t\t\t\t\tvar buildItem = {\n\t\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\n\t\t\t\t\t};\n\t\t\t\t\tvar transform = itemNode.getAttribute( 'transform' );\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbuildData.push( buildItem );\n\n\t\t\t\t}\n\n\t\t\t\treturn buildData;\n\n\t\t\t}\n\n\t\t\tfunction parseModelNode( modelNode ) {\n\n\t\t\t\tvar modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\n\t\t\t\tvar metadataNodes = modelNode.querySelectorAll( 'metadata' );\n\n\t\t\t\tif ( metadataNodes ) {\n\n\t\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\n\n\t\t\t\t}\n\n\t\t\t\tvar resourcesNode = modelNode.querySelector( 'resources' );\n\n\t\t\t\tif ( resourcesNode ) {\n\n\t\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\n\n\t\t\t\t}\n\n\t\t\t\tvar buildNode = modelNode.querySelector( 'build' );\n\n\t\t\t\tif ( buildNode ) {\n\n\t\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\n\n\t\t\t\t}\n\n\t\t\t\treturn modelData;\n\n\t\t\t}\n\n\t\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\n\n\t\t\t\tvar texid = texture2dgroup.texid;\n\t\t\t\tvar texture2ds = modelData.resources.texture2d;\n\t\t\t\tvar texture2d = texture2ds[ texid ];\n\n\t\t\t\tif ( texture2d ) {\n\n\t\t\t\t\tvar data = textureData[ texture2d.path ];\n\t\t\t\t\tvar type = texture2d.contenttype;\n\n\t\t\t\t\tvar blob = new Blob( [ data ], { type: type } );\n\t\t\t\t\tvar sourceURI = URL.createObjectURL( blob );\n\n\t\t\t\t\tvar texture = textureLoader.load( sourceURI, function () {\n\n\t\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\ttexture.encoding = THREE.sRGBEncoding;\n\n\t\t\t\t\t// texture parameters\n\n\t\t\t\t\tswitch ( texture2d.tilestyleu ) {\n\n\t\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\t\ttexture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\t\ttexture.wrapS = THREE.MirroredRepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\t\ttexture.wrapS = THREE.ClampToEdgeWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttexture.wrapS = THREE.RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( texture2d.tilestylev ) {\n\n\t\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\t\ttexture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\t\ttexture.wrapT = THREE.MirroredRepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\t\ttexture.wrapT = THREE.ClampToEdgeWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttexture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( texture2d.filter ) {\n\n\t\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearMipmapLinearFilter;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'linear':\n\t\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'nearest':\n\t\t\t\t\t\t\ttexture.magFilter = THREE.NearestFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearMipmapLinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, modelData, meshData, textureData, objectData ) {\n\n\t\t\t\tvar objectPindex = objectData.pindex;\n\n\t\t\t\tvar materialMap = {};\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\t\t\t\t\tvar pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\n\n\t\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\n\n\t\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar keys = Object.keys( materialMap );\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar materialIndex = keys[ i ];\n\t\t\t\t\tvar trianglePropertiesProps = materialMap[ materialIndex ];\n\t\t\t\t\tvar basematerialData = basematerials.basematerials[ materialIndex ];\n\t\t\t\t\tvar material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\t\tvar positionData = [];\n\n\t\t\t\t\tvar vertices = meshData.vertices;\n\n\t\t\t\t\tfor ( var j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar triangleProperty = trianglePropertiesProps[ j ];\n\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positionData, 3 ) );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\t\t\t\t\tmeshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\treturn meshes;\n\n\t\t\t}\n\n\t\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData ) {\n\n\t\t\t\t// geometry\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar positionData = [];\n\t\t\t\tvar uvData = [];\n\n\t\t\t\tvar vertices = meshData.vertices;\n\t\t\t\tvar uvs = texture2dgroup.uvs;\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\n\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\n\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positionData, 3 ) );\n\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uvData, 2 ) );\n\n\t\t\t\t// material\n\n\t\t\t\tvar texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial( { map: texture, flatShading: true } );\n\n\t\t\t\t// mesh\n\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\treturn mesh;\n\n\t\t\t}\n\n\t\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, modelData, meshData ) {\n\n\t\t\t\t// geometry\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar positionData = [];\n\t\t\t\tvar colorData = [];\n\n\t\t\t\tvar vertices = meshData.vertices;\n\t\t\t\tvar colors = colorgroup.colors;\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\n\t\t\t\t\tvar v1 = triangleProperty.v1;\n\t\t\t\t\tvar v2 = triangleProperty.v2;\n\t\t\t\t\tvar v3 = triangleProperty.v3;\n\n\t\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar p1 = triangleProperty.p1;\n\t\t\t\t\tvar p2 = triangleProperty.p2;\n\t\t\t\t\tvar p3 = triangleProperty.p3;\n\n\t\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\n\t\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\n\t\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\n\n\t\t\t\t\tcolorData.push( colors[ ( ( p2 || p1 ) * 3 ) + 0 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p2 || p1 ) * 3 ) + 1 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p2 || p1 ) * 3 ) + 2 ] );\n\n\t\t\t\t\tcolorData.push( colors[ ( ( p3 || p1 ) * 3 ) + 0 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p3 || p1 ) * 3 ) + 1 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p3 || p1 ) * 3 ) + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positionData, 3 ) );\n\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colorData, 3 ) );\n\n\t\t\t\t// material\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial( { vertexColors: true, flatShading: true } );\n\n\t\t\t\t// mesh\n\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\treturn mesh;\n\n\t\t\t}\n\n\t\t\tfunction buildDefaultMesh( meshData ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( meshData[ 'triangles' ], 1 ) );\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( meshData[ 'vertices' ], 3 ) );\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial( { color: 0xaaaaff, flatShading: true } );\n\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\treturn mesh;\n\n\t\t\t}\n\n\t\t\tfunction buildMeshes( resourceMap, modelData, meshData, textureData, objectData ) {\n\n\t\t\t\tvar keys = Object.keys( resourceMap );\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar resourceId = keys[ i ];\n\t\t\t\t\tvar triangleProperties = resourceMap[ resourceId ];\n\t\t\t\t\tvar resourceType = getResourceType( resourceId, modelData );\n\n\t\t\t\t\tswitch ( resourceType ) {\n\n\t\t\t\t\t\tcase 'material':\n\t\t\t\t\t\t\tvar basematerials = modelData.resources.basematerials[ resourceId ];\n\t\t\t\t\t\t\tvar newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, modelData, meshData, textureData, objectData );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = newMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\t\tvar texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\n\t\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tvar colorgroup = modelData.resources.colorgroup[ resourceId ];\n\t\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, modelData, meshData ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'default':\n\t\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn meshes;\n\n\t\t\t}\n\n\t\t\tfunction getResourceType( pid, modelData ) {\n\n\t\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\n\n\t\t\t\t\treturn 'texture';\n\n\t\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\n\n\t\t\t\t\treturn 'material';\n\n\t\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\n\n\t\t\t\t\treturn 'vertexColors';\n\n\t\t\t\t} else if ( pid === 'default' ) {\n\n\t\t\t\t\treturn 'default';\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction analyzeObject( modelData, meshData, objectData ) {\n\n\t\t\t\tvar resourceMap = {};\n\n\t\t\t\tvar triangleProperties = meshData[ 'triangleProperties' ];\n\n\t\t\t\tvar objectPid = objectData.pid;\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\t\t\t\t\tvar pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\n\n\t\t\t\t\tif ( pid === undefined ) pid = 'default';\n\n\t\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\n\n\t\t\t\t\tresourceMap[ pid ].push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t\treturn resourceMap;\n\n\t\t\t}\n\n\t\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tvar resourceMap = analyzeObject( modelData, meshData, objectData );\n\t\t\t\tvar meshes = buildMeshes( resourceMap, modelData, meshData, textureData, objectData );\n\n\t\t\t\tfor ( var i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t}\n\n\t\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\n\n\t\t\t\tif ( ! extensions ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar availableExtensions = [];\n\t\t\t\tvar keys = Object.keys( extensions );\n\n\t\t\t\tfor ( var i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\t\tvar ns = keys[ i ];\n\n\t\t\t\t\tfor ( var j = 0; j < scope.availableExtensions.length; j ++ ) {\n\n\t\t\t\t\t\tvar extension = scope.availableExtensions[ j ];\n\n\t\t\t\t\t\tif ( extension.ns === ns ) {\n\n\t\t\t\t\t\t\tavailableExtensions.push( extension );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < availableExtensions.length; i ++ ) {\n\n\t\t\t\t\tvar extension = availableExtensions[ i ];\n\t\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\n\n\t\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\n\n\t\t\t\treturn data.build;\n\n\t\t\t}\n\n\t\t\tfunction buildBasematerial( materialData, objects, modelData ) {\n\n\t\t\t\tvar material;\n\n\t\t\t\tvar displaypropertiesid = materialData.displaypropertiesid;\n\t\t\t\tvar pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n\t\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\n\n\t\t\t\t\t// metallic display property, use StandardMaterial\n\n\t\t\t\t\tvar pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\n\t\t\t\t\tvar metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\n\n\t\t\t\t\tmaterial = new THREE.MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// otherwise use PhongMaterial\n\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { flatShading: true } );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.name = materialData.name;\n\n\t\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n\t\t\t\tvar displaycolor = materialData.displaycolor;\n\n\t\t\t\tvar color = displaycolor.substring( 0, 7 );\n\t\t\t\tmaterial.color.setStyle( color );\n\t\t\t\tmaterial.color.convertSRGBToLinear(); // displaycolor is in sRGB\n\n\t\t\t\t// process alpha if set\n\n\t\t\t\tif ( displaycolor.length === 9 ) {\n\n\t\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\n\n\t\t\t\tvar composite = new THREE.Group();\n\n\t\t\t\tfor ( var j = 0; j < compositeData.length; j ++ ) {\n\n\t\t\t\t\tvar component = compositeData[ j ];\n\t\t\t\t\tvar build = objects[ component.objectId ];\n\n\t\t\t\t\tif ( build === undefined ) {\n\n\t\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\n\t\t\t\t\t\tbuild = objects[ component.objectId ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar object3D = build.clone();\n\n\t\t\t\t\t// apply component transfrom\n\n\t\t\t\t\tvar transform = component.transform;\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcomposite.add( object3D );\n\n\t\t\t\t}\n\n\t\t\t\treturn composite;\n\n\t\t\t}\n\n\t\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\n\n\t\t\t\tvar objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\n\n\t\t\t\tif ( objectData[ 'mesh' ] ) {\n\n\t\t\t\t\tvar meshData = objectData[ 'mesh' ];\n\n\t\t\t\t\tvar extensions = modelData[ 'extensions' ];\n\t\t\t\t\tvar modelXml = modelData[ 'xml' ];\n\n\t\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\n\n\t\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar compositeData = objectData[ 'components' ];\n\n\t\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction buildObjects( data3mf ) {\n\n\t\t\t\tvar modelsData = data3mf.model;\n\t\t\t\tvar modelRels = data3mf.modelRels;\n\t\t\t\tvar objects = {};\n\t\t\t\tvar modelsKeys = Object.keys( modelsData );\n\t\t\t\tvar textureData = {};\n\n\t\t\t\t// evaluate model relationships to textures\n\n\t\t\t\tif ( modelRels ) {\n\n\t\t\t\t\tfor ( var i = 0, l = modelRels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar modelRel = modelRels[ i ];\n\t\t\t\t\t\tvar textureKey = modelRel.target.substring( 1 );\n\n\t\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\n\n\t\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// start build\n\n\t\t\t\tfor ( var i = 0; i < modelsKeys.length; i ++ ) {\n\n\t\t\t\t\tvar modelsKey = modelsKeys[ i ];\n\t\t\t\t\tvar modelData = modelsData[ modelsKey ];\n\n\t\t\t\t\tvar objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\n\n\t\t\t\t\tfor ( var j = 0; j < objectIds.length; j ++ ) {\n\n\t\t\t\t\t\tvar objectId = objectIds[ j ];\n\n\t\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn objects;\n\n\t\t\t}\n\n\t\t\tfunction build( objects, data3mf ) {\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tvar relationship = data3mf[ 'rels' ][ 0 ];\n\t\t\t\tvar buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\n\n\t\t\t\tfor ( var i = 0; i < buildData.length; i ++ ) {\n\n\t\t\t\t\tvar buildItem = buildData[ i ];\n\t\t\t\t\tvar object3D = objects[ buildItem[ 'objectId' ] ];\n\n\t\t\t\t\t// apply transform\n\n\t\t\t\t\tvar transform = buildItem[ 'transform' ];\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup.add( object3D );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t}\n\n\t\t\tvar data3mf = loadDocument( data );\n\t\t\tvar objects = buildObjects( data3mf );\n\n\t\t\treturn build( objects, data3mf );\n\n\t\t},\n\n\t\taddExtension: function ( extension ) {\n\n\t\t\tthis.availableExtensions.push( extension );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.ThreeMFLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/AMFLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author tamarintech / https://tamarintech.com\n\t *\n\t * Description: Early release of an AMF Loader following the pattern of the\n\t * example loaders in the three.js project.\n\t *\n\t * More information about the AMF format: http://amf.wikispaces.com\n\t *\n\t * Usage:\n\t *\tvar loader = new AMFLoader();\n\t *\tloader.load('/path/to/project.amf', function(objecttree) {\n\t *\t\tscene.add(objecttree);\n\t *\t});\n\t *\n\t * Materials now supported, material colors supported\n\t * Zip support, requires jszip\n\t * No constellation support (yet)!\n\t *\n\t */\n\n\tTHREE.AMFLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.AMFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.AMFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tfunction loadDocument( data ) {\n\n\t\t\t\tvar view = new DataView( data );\n\t\t\t\tvar magic = String.fromCharCode( view.getUint8( 0 ), view.getUint8( 1 ) );\n\n\t\t\t\tif ( magic === 'PK' ) {\n\n\t\t\t\t\tvar zip = null;\n\t\t\t\t\tvar file = null;\n\n\t\t\t\t\tconsole.log( 'THREE.AMFLoader: Loading Zip' );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tzip = new JSZip( data ); // eslint-disable-line no-undef\n\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\t\tconsole.log( 'THREE.AMFLoader: jszip missing and file is compressed.' );\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( file in zip.files ) {\n\n\t\t\t\t\t\tif ( file.toLowerCase().substr( - 4 ) === '.amf' ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log( 'THREE.AMFLoader: Trying to load file asset: ' + file );\n\t\t\t\t\tview = new DataView( zip.file( file ).asArrayBuffer() );\n\n\t\t\t\t}\n\n\t\t\t\tvar fileText = THREE.LoaderUtils.decodeText( view );\n\t\t\t\tvar xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'amf' ) {\n\n\t\t\t\t\tconsole.log( 'THREE.AMFLoader: Error loading AMF - no AMF document found.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\treturn xmlData;\n\n\t\t\t}\n\n\t\t\tfunction loadDocumentScale( node ) {\n\n\t\t\t\tvar scale = 1.0;\n\t\t\t\tvar unit = 'millimeter';\n\n\t\t\t\tif ( node.documentElement.attributes.unit !== undefined ) {\n\n\t\t\t\t\tunit = node.documentElement.attributes.unit.value.toLowerCase();\n\n\t\t\t\t}\n\n\t\t\t\tvar scaleUnits = {\n\t\t\t\t\tmillimeter: 1.0,\n\t\t\t\t\tinch: 25.4,\n\t\t\t\t\tfeet: 304.8,\n\t\t\t\t\tmeter: 1000.0,\n\t\t\t\t\tmicron: 0.001\n\t\t\t\t};\n\n\t\t\t\tif ( scaleUnits[ unit ] !== undefined ) {\n\n\t\t\t\t\tscale = scaleUnits[ unit ];\n\n\t\t\t\t}\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Unit scale: ' + scale );\n\t\t\t\treturn scale;\n\n\t\t\t}\n\n\t\t\tfunction loadMaterials( node ) {\n\n\t\t\t\tvar matName = 'AMF Material';\n\t\t\t\tvar matId = node.attributes.id.textContent;\n\t\t\t\tvar color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\t\tvar loadedMaterial = null;\n\n\t\t\t\tfor ( var i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar matChildEl = node.childNodes[ i ];\n\n\t\t\t\t\tif ( matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( matChildEl.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tmatName = matChildEl.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( matChildEl.nodeName === 'color' ) {\n\n\t\t\t\t\t\tcolor = loadColor( matChildEl );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tloadedMaterial = new THREE.MeshPhongMaterial( {\n\t\t\t\t\tflatShading: true,\n\t\t\t\t\tcolor: new THREE.Color( color.r, color.g, color.b ),\n\t\t\t\t\tname: matName\n\t\t\t\t} );\n\n\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\tloadedMaterial.transparent = true;\n\t\t\t\t\tloadedMaterial.opacity = color.a;\n\n\t\t\t\t}\n\n\t\t\t\treturn { id: matId, material: loadedMaterial };\n\n\t\t\t}\n\n\t\t\tfunction loadColor( node ) {\n\n\t\t\t\tvar color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\t\tfor ( var i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar matColor = node.childNodes[ i ];\n\n\t\t\t\t\tif ( matColor.nodeName === 'r' ) {\n\n\t\t\t\t\t\tcolor.r = matColor.textContent;\n\n\t\t\t\t\t} else if ( matColor.nodeName === 'g' ) {\n\n\t\t\t\t\t\tcolor.g = matColor.textContent;\n\n\t\t\t\t\t} else if ( matColor.nodeName === 'b' ) {\n\n\t\t\t\t\t\tcolor.b = matColor.textContent;\n\n\t\t\t\t\t} else if ( matColor.nodeName === 'a' ) {\n\n\t\t\t\t\t\tcolor.a = matColor.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn color;\n\n\t\t\t}\n\n\t\t\tfunction loadMeshVolume( node ) {\n\n\t\t\t\tvar volume = { name: '', triangles: [], materialid: null };\n\n\t\t\t\tvar currVolumeNode = node.firstElementChild;\n\n\t\t\t\tif ( node.attributes.materialid !== undefined ) {\n\n\t\t\t\t\tvolume.materialId = node.attributes.materialid.nodeValue;\n\n\t\t\t\t}\n\n\t\t\t\twhile ( currVolumeNode ) {\n\n\t\t\t\t\tif ( currVolumeNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\t\tif ( currVolumeNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\t\tif ( currVolumeNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\t\tvolume.name = currVolumeNode.textContent;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( currVolumeNode.nodeName === 'triangle' ) {\n\n\t\t\t\t\t\tvar v1 = currVolumeNode.getElementsByTagName( 'v1' )[ 0 ].textContent;\n\t\t\t\t\t\tvar v2 = currVolumeNode.getElementsByTagName( 'v2' )[ 0 ].textContent;\n\t\t\t\t\t\tvar v3 = currVolumeNode.getElementsByTagName( 'v3' )[ 0 ].textContent;\n\n\t\t\t\t\t\tvolume.triangles.push( v1, v2, v3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrVolumeNode = currVolumeNode.nextElementSibling;\n\n\t\t\t\t}\n\n\t\t\t\treturn volume;\n\n\t\t\t}\n\n\t\t\tfunction loadMeshVertices( node ) {\n\n\t\t\t\tvar vertArray = [];\n\t\t\t\tvar normalArray = [];\n\t\t\t\tvar currVerticesNode = node.firstElementChild;\n\n\t\t\t\twhile ( currVerticesNode ) {\n\n\t\t\t\t\tif ( currVerticesNode.nodeName === 'vertex' ) {\n\n\t\t\t\t\t\tvar vNode = currVerticesNode.firstElementChild;\n\n\t\t\t\t\t\twhile ( vNode ) {\n\n\t\t\t\t\t\t\tif ( vNode.nodeName === 'coordinates' ) {\n\n\t\t\t\t\t\t\t\tvar x = vNode.getElementsByTagName( 'x' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar y = vNode.getElementsByTagName( 'y' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar z = vNode.getElementsByTagName( 'z' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\t\tvertArray.push( x, y, z );\n\n\t\t\t\t\t\t\t} else if ( vNode.nodeName === 'normal' ) {\n\n\t\t\t\t\t\t\t\tvar nx = vNode.getElementsByTagName( 'nx' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar ny = vNode.getElementsByTagName( 'ny' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar nz = vNode.getElementsByTagName( 'nz' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\t\tnormalArray.push( nx, ny, nz );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvNode = vNode.nextElementSibling;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tcurrVerticesNode = currVerticesNode.nextElementSibling;\n\n\t\t\t\t}\n\n\t\t\t\treturn { 'vertices': vertArray, 'normals': normalArray };\n\n\t\t\t}\n\n\t\t\tfunction loadObject( node ) {\n\n\t\t\t\tvar objId = node.attributes.id.textContent;\n\t\t\t\tvar loadedObject = { name: 'amfobject', meshes: [] };\n\t\t\t\tvar currColor = null;\n\t\t\t\tvar currObjNode = node.firstElementChild;\n\n\t\t\t\twhile ( currObjNode ) {\n\n\t\t\t\t\tif ( currObjNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\t\tif ( currObjNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\t\tif ( currObjNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\t\tloadedObject.name = currObjNode.textContent;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( currObjNode.nodeName === 'color' ) {\n\n\t\t\t\t\t\tcurrColor = loadColor( currObjNode );\n\n\t\t\t\t\t} else if ( currObjNode.nodeName === 'mesh' ) {\n\n\t\t\t\t\t\tvar currMeshNode = currObjNode.firstElementChild;\n\t\t\t\t\t\tvar mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n\n\t\t\t\t\t\twhile ( currMeshNode ) {\n\n\t\t\t\t\t\t\tif ( currMeshNode.nodeName === 'vertices' ) {\n\n\t\t\t\t\t\t\t\tvar loadedVertices = loadMeshVertices( currMeshNode );\n\n\t\t\t\t\t\t\t\tmesh.normals = mesh.normals.concat( loadedVertices.normals );\n\t\t\t\t\t\t\t\tmesh.vertices = mesh.vertices.concat( loadedVertices.vertices );\n\n\t\t\t\t\t\t\t} else if ( currMeshNode.nodeName === 'volume' ) {\n\n\t\t\t\t\t\t\t\tmesh.volumes.push( loadMeshVolume( currMeshNode ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrMeshNode = currMeshNode.nextElementSibling;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadedObject.meshes.push( mesh );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrObjNode = currObjNode.nextElementSibling;\n\n\t\t\t\t}\n\n\t\t\t\treturn { 'id': objId, 'obj': loadedObject };\n\n\t\t\t}\n\n\t\t\tvar xmlData = loadDocument( data );\n\t\t\tvar amfName = '';\n\t\t\tvar amfAuthor = '';\n\t\t\tvar amfScale = loadDocumentScale( xmlData );\n\t\t\tvar amfMaterials = {};\n\t\t\tvar amfObjects = {};\n\t\t\tvar childNodes = xmlData.documentElement.childNodes;\n\n\t\t\tvar i, j;\n\n\t\t\tfor ( i = 0; i < childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = childNodes[ i ];\n\n\t\t\t\tif ( child.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( child.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( child.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tamfName = child.textContent;\n\n\t\t\t\t\t\t} else if ( child.attributes.type.value === 'author' ) {\n\n\t\t\t\t\t\t\tamfAuthor = child.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( child.nodeName === 'material' ) {\n\n\t\t\t\t\tvar loadedMaterial = loadMaterials( child );\n\n\t\t\t\t\tamfMaterials[ loadedMaterial.id ] = loadedMaterial.material;\n\n\t\t\t\t} else if ( child.nodeName === 'object' ) {\n\n\t\t\t\t\tvar loadedObject = loadObject( child );\n\n\t\t\t\t\tamfObjects[ loadedObject.id ] = loadedObject.obj;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar sceneObject = new THREE.Group();\n\t\t\tvar defaultMaterial = new THREE.MeshPhongMaterial( { color: 0xaaaaff, flatShading: true } );\n\n\t\t\tsceneObject.name = amfName;\n\t\t\tsceneObject.userData.author = amfAuthor;\n\t\t\tsceneObject.userData.loader = 'AMF';\n\n\t\t\tfor ( var id in amfObjects ) {\n\n\t\t\t\tvar part = amfObjects[ id ];\n\t\t\t\tvar meshes = part.meshes;\n\t\t\t\tvar newObject = new THREE.Group();\n\t\t\t\tnewObject.name = part.name || '';\n\n\t\t\t\tfor ( i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\t\tvar objDefaultMaterial = defaultMaterial;\n\t\t\t\t\tvar mesh = meshes[ i ];\n\t\t\t\t\tvar vertices = new THREE.Float32BufferAttribute( mesh.vertices, 3 );\n\t\t\t\t\tvar normals = null;\n\n\t\t\t\t\tif ( mesh.normals.length ) {\n\n\t\t\t\t\t\tnormals = new THREE.Float32BufferAttribute( mesh.normals, 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( mesh.color ) {\n\n\t\t\t\t\t\tvar color = mesh.color;\n\n\t\t\t\t\t\tobjDefaultMaterial = defaultMaterial.clone();\n\t\t\t\t\t\tobjDefaultMaterial.color = new THREE.Color( color.r, color.g, color.b );\n\n\t\t\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\t\t\tobjDefaultMaterial.transparent = true;\n\t\t\t\t\t\t\tobjDefaultMaterial.opacity = color.a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar volumes = mesh.volumes;\n\n\t\t\t\t\tfor ( j = 0; j < volumes.length; j ++ ) {\n\n\t\t\t\t\t\tvar volume = volumes[ j ];\n\t\t\t\t\t\tvar newGeometry = new THREE.BufferGeometry();\n\t\t\t\t\t\tvar material = objDefaultMaterial;\n\n\t\t\t\t\t\tnewGeometry.setIndex( volume.triangles );\n\t\t\t\t\t\tnewGeometry.setAttribute( 'position', vertices.clone() );\n\n\t\t\t\t\t\tif ( normals ) {\n\n\t\t\t\t\t\t\tnewGeometry.setAttribute( 'normal', normals.clone() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( amfMaterials[ volume.materialId ] !== undefined ) {\n\n\t\t\t\t\t\t\tmaterial = amfMaterials[ volume.materialId ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewGeometry.scale( amfScale, amfScale, amfScale );\n\t\t\t\t\t\tnewObject.add( new THREE.Mesh( newGeometry, material.clone() ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tsceneObject.add( newObject );\n\n\t\t\t}\n\n\t\t\treturn sceneObject;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.AMFLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/AssimpLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Virtulous / https://virtulo.us/\n\t */\n\n\tTHREE.AssimpLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.AssimpLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.AssimpLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( scope.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( buffer, path ) {\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager );\n\t\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar Virtulous = {};\n\n\t\t\tVirtulous.KeyFrame = function ( time, matrix ) {\n\n\t\t\t\tthis.time = time;\n\t\t\t\tthis.matrix = matrix.clone();\n\t\t\t\tthis.position = new THREE.Vector3();\n\t\t\t\tthis.quaternion = new THREE.Quaternion();\n\t\t\t\tthis.scale = new THREE.Vector3( 1, 1, 1 );\n\t\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\t\t\tthis.clone = function () {\n\n\t\t\t\t\tvar n = new Virtulous.KeyFrame( this.time, this.matrix );\n\t\t\t\t\treturn n;\n\n\t\t\t\t};\n\t\t\t\tthis.lerp = function ( nextKey, time ) {\n\n\t\t\t\t\ttime -= this.time;\n\t\t\t\t\tvar dist = ( nextKey.time - this.time );\n\t\t\t\t\tvar l = time / dist;\n\t\t\t\t\tvar l2 = 1 - l;\n\t\t\t\t\tvar keypos = this.position;\n\t\t\t\t\tvar keyrot = this.quaternion;\n\t\t\t\t\t//      var keyscl =  key.parentspaceScl || key.scl;\n\t\t\t\t\tvar key2pos = nextKey.position;\n\t\t\t\t\tvar key2rot = nextKey.quaternion;\n\t\t\t\t\t//  var key2scl =  key2.parentspaceScl || key2.scl;\n\t\t\t\t\tVirtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n\t\t\t\t\tVirtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n\t\t\t\t\tVirtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n\t\t\t\t\t//     tempAniScale.x = keyscl[0] * l2 + key2scl[0] * l;\n\t\t\t\t\t//     tempAniScale.y = keyscl[1] * l2 + key2scl[1] * l;\n\t\t\t\t\t//     tempAniScale.z = keyscl[2] * l2 + key2scl[2] * l;\n\t\t\t\t\tVirtulous.KeyFrame.tempAniQuat.set( keyrot.x, keyrot.y, keyrot.z, keyrot.w );\n\t\t\t\t\tVirtulous.KeyFrame.tempAniQuat.slerp( key2rot, l );\n\t\t\t\t\treturn Virtulous.KeyFrame.tempAniMatrix.compose( Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale );\n\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tVirtulous.KeyFrame.tempAniPos = new THREE.Vector3();\n\t\t\tVirtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();\n\t\t\tVirtulous.KeyFrame.tempAniScale = new THREE.Vector3( 1, 1, 1 );\n\t\t\tVirtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();\n\t\t\tVirtulous.KeyFrameTrack = function () {\n\n\t\t\t\tthis.keys = [];\n\t\t\t\tthis.target = null;\n\t\t\t\tthis.time = 0;\n\t\t\t\tthis.length = 0;\n\t\t\t\tthis._accelTable = {};\n\t\t\t\tthis.fps = 20;\n\t\t\t\tthis.addKey = function ( key ) {\n\n\t\t\t\t\tthis.keys.push( key );\n\n\t\t\t\t};\n\t\t\t\tthis.init = function () {\n\n\t\t\t\t\tthis.sortKeys();\n\n\t\t\t\t\tif ( this.keys.length > 0 )\n\t\t\t\t\t\tthis.length = this.keys[ this.keys.length - 1 ].time;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.length = 0;\n\n\t\t\t\t\tif ( ! this.fps ) return;\n\n\t\t\t\t\tfor ( var j = 0; j < this.length * this.fps; j ++ ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( this.keys[ i ].time == j ) {\n\n\t\t\t\t\t\t\t\tthis._accelTable[ j ] = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t} else if ( this.keys[ i ].time < j / this.fps && this.keys[ i + 1 ] && this.keys[ i + 1 ].time >= j / this.fps ) {\n\n\t\t\t\t\t\t\t\tthis._accelTable[ j ] = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.parseFromThree = function ( data ) {\n\n\t\t\t\t\tvar fps = data.fps;\n\t\t\t\t\tthis.target = data.node;\n\t\t\t\t\tvar track = data.hierarchy[ 0 ].keys;\n\t\t\t\t\tfor ( var i = 0; i < track.length; i ++ ) {\n\n\t\t\t\t\t\tthis.addKey( new Virtulous.KeyFrame( i / fps || track[ i ].time, track[ i ].targets[ 0 ].data ) );\n\n\t\t\t\t\t}\n\t\t\t\t\tthis.init();\n\n\t\t\t\t};\n\n\t\t\t\tthis.parseFromCollada = function ( data ) {\n\n\t\t\t\t\tvar track = data.keys;\n\t\t\t\t\tvar fps = this.fps;\n\n\t\t\t\t\tfor ( var i = 0; i < track.length; i ++ ) {\n\n\t\t\t\t\t\tthis.addKey( new Virtulous.KeyFrame( i / fps || track[ i ].time, track[ i ].matrix ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.init();\n\n\t\t\t\t};\n\n\t\t\t\tthis.sortKeys = function () {\n\n\t\t\t\t\tthis.keys.sort( this.keySortFunc );\n\n\t\t\t\t};\n\n\t\t\t\tthis.keySortFunc = function ( a, b ) {\n\n\t\t\t\t\treturn a.time - b.time;\n\n\t\t\t\t};\n\n\t\t\t\tthis.clone = function () {\n\n\t\t\t\t\tvar t = new Virtulous.KeyFrameTrack();\n\t\t\t\t\tt.target = this.target;\n\t\t\t\t\tt.time = this.time;\n\t\t\t\t\tt.length = this.length;\n\n\t\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\n\n\t\t\t\t\t\tt.addKey( this.keys[ i ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt.init();\n\t\t\t\t\treturn t;\n\n\t\t\t\t};\n\n\t\t\t\tthis.reTarget = function ( root, compareitor ) {\n\n\t\t\t\t\tif ( ! compareitor ) compareitor = Virtulous.TrackTargetNodeNameCompare;\n\t\t\t\t\tthis.target = compareitor( root, this.target );\n\n\t\t\t\t};\n\n\t\t\t\tthis.keySearchAccel = function ( time ) {\n\n\t\t\t\t\ttime *= this.fps;\n\t\t\t\t\ttime = Math.floor( time );\n\t\t\t\t\treturn this._accelTable[ time ] || 0;\n\n\t\t\t\t};\n\n\t\t\t\tthis.setTime = function ( time ) {\n\n\t\t\t\t\ttime = Math.abs( time );\n\t\t\t\t\tif ( this.length )\n\t\t\t\t\t\ttime = time % this.length + .05;\n\t\t\t\t\tvar key0 = null;\n\t\t\t\t\tvar key1 = null;\n\n\t\t\t\t\tfor ( var i = this.keySearchAccel( time ); i < this.keys.length; i ++ ) {\n\n\t\t\t\t\t\tif ( this.keys[ i ].time == time ) {\n\n\t\t\t\t\t\t\tkey0 = this.keys[ i ];\n\t\t\t\t\t\t\tkey1 = this.keys[ i ];\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( this.keys[ i ].time < time && this.keys[ i + 1 ] && this.keys[ i + 1 ].time > time ) {\n\n\t\t\t\t\t\t\tkey0 = this.keys[ i ];\n\t\t\t\t\t\t\tkey1 = this.keys[ i + 1 ];\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( this.keys[ i ].time < time && i == this.keys.length - 1 ) {\n\n\t\t\t\t\t\t\tkey0 = this.keys[ i ];\n\t\t\t\t\t\t\tkey1 = this.keys[ 0 ].clone();\n\t\t\t\t\t\t\tkey1.time += this.length + .05;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( key0 && key1 && key0 !== key1 ) {\n\n\t\t\t\t\t\tthis.target.matrixAutoUpdate = false;\n\t\t\t\t\t\tthis.target.matrix.copy( key0.lerp( key1, time ) );\n\t\t\t\t\t\tthis.target.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( key0 && key1 && key0 == key1 ) {\n\n\t\t\t\t\t\tthis.target.matrixAutoUpdate = false;\n\t\t\t\t\t\tthis.target.matrix.copy( key0.matrix );\n\t\t\t\t\t\tthis.target.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tVirtulous.TrackTargetNodeNameCompare = function ( root, target ) {\n\n\t\t\t\tfunction find( node, name ) {\n\n\t\t\t\t\tif ( node.name == name )\n\t\t\t\t\t\treturn node;\n\n\t\t\t\t\tfor ( var i = 0; i < node.children.length; i ++ ) {\n\n\t\t\t\t\t\tvar r = find( node.children[ i ], name );\n\t\t\t\t\t\tif ( r ) return r;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\treturn find( root, target.name );\n\n\t\t\t};\n\n\t\t\tVirtulous.Animation = function () {\n\n\t\t\t\tthis.tracks = [];\n\t\t\t\tthis.length = 0;\n\n\t\t\t\tthis.addTrack = function ( track ) {\n\n\t\t\t\t\tthis.tracks.push( track );\n\t\t\t\t\tthis.length = Math.max( track.length, this.length );\n\n\t\t\t\t};\n\n\t\t\t\tthis.setTime = function ( time ) {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ )\n\t\t\t\t\t\tthis.tracks[ i ].setTime( time );\n\n\t\t\t\t};\n\n\t\t\t\tthis.clone = function ( target, compareitor ) {\n\n\t\t\t\t\tif ( ! compareitor ) compareitor = Virtulous.TrackTargetNodeNameCompare;\n\t\t\t\t\tvar n = new Virtulous.Animation();\n\t\t\t\t\tn.target = target;\n\t\t\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\t\t\tvar track = this.tracks[ i ].clone();\n\t\t\t\t\t\ttrack.reTarget( target, compareitor );\n\t\t\t\t\t\tn.addTrack( track );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn n;\n\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tvar ASSBIN_CHUNK_AICAMERA = 0x1234;\n\t\t\tvar ASSBIN_CHUNK_AILIGHT = 0x1235;\n\t\t\tvar ASSBIN_CHUNK_AITEXTURE = 0x1236;\n\t\t\tvar ASSBIN_CHUNK_AIMESH = 0x1237;\n\t\t\tvar ASSBIN_CHUNK_AINODEANIM = 0x1238;\n\t\t\tvar ASSBIN_CHUNK_AISCENE = 0x1239;\n\t\t\tvar ASSBIN_CHUNK_AIBONE = 0x123a;\n\t\t\tvar ASSBIN_CHUNK_AIANIMATION = 0x123b;\n\t\t\tvar ASSBIN_CHUNK_AINODE = 0x123c;\n\t\t\tvar ASSBIN_CHUNK_AIMATERIAL = 0x123d;\n\t\t\tvar ASSBIN_CHUNK_AIMATERIALPROPERTY = 0x123e;\n\t\t\tvar ASSBIN_MESH_HAS_POSITIONS = 0x1;\n\t\t\tvar ASSBIN_MESH_HAS_NORMALS = 0x2;\n\t\t\tvar ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 0x4;\n\t\t\tvar ASSBIN_MESH_HAS_TEXCOORD_BASE = 0x100;\n\t\t\tvar ASSBIN_MESH_HAS_COLOR_BASE = 0x10000;\n\t\t\tvar AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n\t\t\tvar AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n\t\t\t//var aiLightSource_UNDEFINED = 0x0;\n\t\t\t//! A directional light source has a well-defined direction\n\t\t\t//! but is infinitely far away. That's quite a good\n\t\t\t//! approximation for sun light.\n\t\t\tvar aiLightSource_DIRECTIONAL = 0x1;\n\t\t\t//! A point light source has a well-defined position\n\t\t\t//! in space but no direction - it emits light in all\n\t\t\t//! directions. A normal bulb is a point light.\n\t\t\t//var aiLightSource_POINT = 0x2;\n\t\t\t//! A spot light source emits light in a specific\n\t\t\t//! angle. It has a position and a direction it is pointing to.\n\t\t\t//! A good example for a spot light is a light spot in\n\t\t\t//! sport arenas.\n\t\t\tvar aiLightSource_SPOT = 0x3;\n\t\t\t//! The generic light level of the world, including the bounces\n\t\t\t//! of all other lightsources.\n\t\t\t//! Typically, there's at most one ambient light in a scene.\n\t\t\t//! This light type doesn't have a valid position, direction, or\n\t\t\t//! other properties, just a color.\n\t\t\t//var aiLightSource_AMBIENT = 0x4;\n\t\t\t/** Flat shading. Shading is done on per-face base,\n\t\t\t *  diffuse only. Also known as 'faceted shading'.\n\t\t\t */\n\t\t\t//var aiShadingMode_Flat = 0x1;\n\t\t\t/** Simple Gouraud shading.\n\t\t\t */\n\t\t\t//var aiShadingMode_Gouraud = 0x2;\n\t\t\t/** Phong-Shading -\n\t\t\t */\n\t\t\t//var aiShadingMode_Phong = 0x3;\n\t\t\t/** Phong-Blinn-Shading\n\t\t\t */\n\t\t\t//var aiShadingMode_Blinn = 0x4;\n\t\t\t/** Toon-Shading per pixel\n\t\t\t *\n\t\t\t *  Also known as 'comic' shader.\n\t\t\t */\n\t\t\t//var aiShadingMode_Toon = 0x5;\n\t\t\t/** OrenNayar-Shading per pixel\n\t\t\t *\n\t\t\t *  Extension to standard Lambertian shading, taking the\n\t\t\t *  roughness of the material into account\n\t\t\t */\n\t\t\t//var aiShadingMode_OrenNayar = 0x6;\n\t\t\t/** Minnaert-Shading per pixel\n\t\t\t *\n\t\t\t *  Extension to standard Lambertian shading, taking the\n\t\t\t *  \"darkness\" of the material into account\n\t\t\t */\n\t\t\t//var aiShadingMode_Minnaert = 0x7;\n\t\t\t/** CookTorrance-Shading per pixel\n\t\t\t *\n\t\t\t *  Special shader for metallic surfaces.\n\t\t\t */\n\t\t\t//var aiShadingMode_CookTorrance = 0x8;\n\t\t\t/** No shading at all. Constant light influence of 1.0.\n\t\t\t */\n\t\t\t//var aiShadingMode_NoShading = 0x9;\n\t\t\t/** Fresnel shading\n\t\t\t */\n\t\t\t//var aiShadingMode_Fresnel = 0xa;\n\t\t\t//var aiTextureType_NONE = 0x0;\n\t\t\t/** The texture is combined with the result of the diffuse\n\t\t\t *  lighting equation.\n\t\t\t */\n\t\t\tvar aiTextureType_DIFFUSE = 0x1;\n\t\t\t/** The texture is combined with the result of the specular\n\t\t\t *  lighting equation.\n\t\t\t */\n\t\t\t//var aiTextureType_SPECULAR = 0x2;\n\t\t\t/** The texture is combined with the result of the ambient\n\t\t\t *  lighting equation.\n\t\t\t */\n\t\t\t//var aiTextureType_AMBIENT = 0x3;\n\t\t\t/** The texture is added to the result of the lighting\n\t\t\t *  calculation. It isn't influenced by incoming light.\n\t\t\t */\n\t\t\t//var aiTextureType_EMISSIVE = 0x4;\n\t\t\t/** The texture is a height map.\n\t\t\t *\n\t\t\t *  By convention, higher gray-scale values stand for\n\t\t\t *  higher elevations from the base height.\n\t\t\t */\n\t\t\t//var aiTextureType_HEIGHT = 0x5;\n\t\t\t/** The texture is a (tangent space) normal-map.\n\t\t\t *\n\t\t\t *  Again, there are several conventions for tangent-space\n\t\t\t *  normal maps. Assimp does (intentionally) not\n\t\t\t *  distinguish here.\n\t\t\t */\n\t\t\tvar aiTextureType_NORMALS = 0x6;\n\t\t\t/** The texture defines the glossiness of the material.\n\t\t\t *\n\t\t\t *  The glossiness is in fact the exponent of the specular\n\t\t\t *  (phong) lighting equation. Usually there is a conversion\n\t\t\t *  function defined to map the linear color values in the\n\t\t\t *  texture to a suitable exponent. Have fun.\n\t\t\t */\n\t\t\t//var aiTextureType_SHININESS = 0x7;\n\t\t\t/** The texture defines per-pixel opacity.\n\t\t\t *\n\t\t\t *  Usually 'white' means opaque and 'black' means\n\t\t\t *  'transparency'. Or quite the opposite. Have fun.\n\t\t\t */\n\t\t\tvar aiTextureType_OPACITY = 0x8;\n\t\t\t/** Displacement texture\n\t\t\t *\n\t\t\t *  The exact purpose and format is application-dependent.\n\t\t\t *  Higher color values stand for higher vertex displacements.\n\t\t\t */\n\t\t\t//var aiTextureType_DISPLACEMENT = 0x9;\n\t\t\t/** Lightmap texture (aka Ambient Occlusion)\n\t\t\t *\n\t\t\t *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are\n\t\t\t *  covered by this material property. The texture contains a\n\t\t\t *  scaling value for the final color value of a pixel. Its\n\t\t\t *  intensity is not affected by incoming light.\n\t\t\t */\n\t\t\tvar aiTextureType_LIGHTMAP = 0xA;\n\t\t\t/** Reflection texture\n\t\t\t *\n\t\t\t * Contains the color of a perfect mirror reflection.\n\t\t\t * Rarely used, almost never for real-time applications.\n\t\t\t */\n\t\t\t//var aiTextureType_REFLECTION = 0xB;\n\t\t\t/** Unknown texture\n\t\t\t *\n\t\t\t *  A texture reference that does not match any of the definitions\n\t\t\t *  above is considered to be 'unknown'. It is still imported,\n\t\t\t *  but is excluded from any further postprocessing.\n\t\t\t */\n\t\t\t//var aiTextureType_UNKNOWN = 0xC;\n\t\t\tvar BONESPERVERT = 4;\n\n\t\t\tfunction ASSBIN_MESH_HAS_TEXCOORD( n ) {\n\n\t\t\t\treturn ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n\n\t\t\t}\n\n\t\t\tfunction ASSBIN_MESH_HAS_COLOR( n ) {\n\n\t\t\t\treturn ASSBIN_MESH_HAS_COLOR_BASE << n;\n\n\t\t\t}\n\n\t\t\tfunction markBones( scene ) {\n\n\t\t\t\tfor ( var i in scene.mMeshes ) {\n\n\t\t\t\t\tvar mesh = scene.mMeshes[ i ];\n\t\t\t\t\tfor ( var k in mesh.mBones ) {\n\n\t\t\t\t\t\tvar boneNode = scene.findNode( mesh.mBones[ k ].mName );\n\t\t\t\t\t\tif ( boneNode )\n\t\t\t\t\t\t\tboneNode.isBone = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tfunction cloneTreeToBones( root, scene ) {\n\n\t\t\t\tvar rootBone = new THREE.Bone();\n\t\t\t\trootBone.matrix.copy( root.matrix );\n\t\t\t\trootBone.matrixWorld.copy( root.matrixWorld );\n\t\t\t\trootBone.position.copy( root.position );\n\t\t\t\trootBone.quaternion.copy( root.quaternion );\n\t\t\t\trootBone.scale.copy( root.scale );\n\t\t\t\tscene.nodeCount ++;\n\t\t\t\trootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\n\n\t\t\t\tif ( ! scene.nodeToBoneMap[ root.name ] )\n\t\t\t\t\tscene.nodeToBoneMap[ root.name ] = [];\n\t\t\t\tscene.nodeToBoneMap[ root.name ].push( rootBone );\n\t\t\t\tfor ( var i in root.children ) {\n\n\t\t\t\t\tvar child = cloneTreeToBones( root.children[ i ], scene );\n\t\t\t\t\trootBone.add( child );\n\n\t\t\t\t}\n\n\t\t\t\treturn rootBone;\n\n\t\t\t}\n\n\t\t\tfunction sortWeights( indexes, weights ) {\n\n\t\t\t\tvar pairs = [];\n\n\t\t\t\tfor ( var i = 0; i < indexes.length; i ++ ) {\n\n\t\t\t\t\tpairs.push( {\n\t\t\t\t\t\ti: indexes[ i ],\n\t\t\t\t\t\tw: weights[ i ]\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tpairs.sort( function ( a, b ) {\n\n\t\t\t\t\treturn b.w - a.w;\n\n\t\t\t\t } );\n\n\t\t\t\twhile ( pairs.length < 4 ) {\n\n\t\t\t\t\tpairs.push( {\n\t\t\t\t\t\ti: 0,\n\t\t\t\t\t\tw: 0\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pairs.length > 4 )\n\t\t\t\t\tpairs.length = 4;\n\t\t\t\tvar sum = 0;\n\n\t\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tsum += pairs[ i ].w * pairs[ i ].w;\n\n\t\t\t\t}\n\n\t\t\t\tsum = Math.sqrt( sum );\n\n\t\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tpairs[ i ].w = pairs[ i ].w / sum;\n\t\t\t\t\tindexes[ i ] = pairs[ i ].i;\n\t\t\t\t\tweights[ i ] = pairs[ i ].w;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction findMatchingBone( root, name ) {\n\n\t\t\t\tif ( root.name.indexOf( \"bone_\" + name ) == 0 )\n\t\t\t\t\treturn root;\n\n\t\t\t\tfor ( var i in root.children ) {\n\n\t\t\t\t\tvar ret = findMatchingBone( root.children[ i ], name );\n\n\t\t\t\t\tif ( ret )\n\t\t\t\t\t\treturn ret;\n\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tfunction aiMesh() {\n\n\t\t\t\tthis.mPrimitiveTypes = 0;\n\t\t\t\tthis.mNumVertices = 0;\n\t\t\t\tthis.mNumFaces = 0;\n\t\t\t\tthis.mNumBones = 0;\n\t\t\t\tthis.mMaterialIndex = 0;\n\t\t\t\tthis.mVertices = [];\n\t\t\t\tthis.mNormals = [];\n\t\t\t\tthis.mTangents = [];\n\t\t\t\tthis.mBitangents = [];\n\t\t\t\tthis.mColors = [\n\t\t\t\t\t[]\n\t\t\t\t];\n\t\t\t\tthis.mTextureCoords = [\n\t\t\t\t\t[]\n\t\t\t\t];\n\t\t\t\tthis.mFaces = [];\n\t\t\t\tthis.mBones = [];\n\t\t\t\tthis.hookupSkeletons = function ( scene ) {\n\n\t\t\t\t\tif ( this.mBones.length == 0 ) return;\n\n\t\t\t\t\tvar allBones = [];\n\t\t\t\t\tvar offsetMatrix = [];\n\t\t\t\t\tvar skeletonRoot = scene.findNode( this.mBones[ 0 ].mName );\n\n\t\t\t\t\twhile ( skeletonRoot.mParent && skeletonRoot.mParent.isBone ) {\n\n\t\t\t\t\t\tskeletonRoot = skeletonRoot.mParent;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar threeSkeletonRoot = skeletonRoot.toTHREE( scene );\n\t\t\t\t\tvar threeSkeletonRootBone = cloneTreeToBones( threeSkeletonRoot, scene );\n\t\t\t\t\tthis.threeNode.add( threeSkeletonRootBone );\n\n\t\t\t\t\tfor ( var i = 0; i < this.mBones.length; i ++ ) {\n\n\t\t\t\t\t\tvar bone = findMatchingBone( threeSkeletonRootBone, this.mBones[ i ].mName );\n\n\t\t\t\t\t\tif ( bone ) {\n\n\t\t\t\t\t\t\tvar tbone = bone;\n\t\t\t\t\t\t\tallBones.push( tbone );\n\t\t\t\t\t\t\t//tbone.matrixAutoUpdate = false;\n\t\t\t\t\t\t\toffsetMatrix.push( this.mBones[ i ].mOffsetMatrix.toTHREE() );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar skeletonRoot = scene.findNode( this.mBones[ i ].mName );\n\t\t\t\t\t\t\tif ( ! skeletonRoot ) return;\n\t\t\t\t\t\t\tvar threeSkeletonRoot = skeletonRoot.toTHREE( scene );\n\t\t\t\t\t\t\tvar threeSkeletonRootBone = cloneTreeToBones( threeSkeletonRoot, scene );\n\t\t\t\t\t\t\tthis.threeNode.add( threeSkeletonRootBone );\n\t\t\t\t\t\t\tvar bone = findMatchingBone( threeSkeletonRootBone, this.mBones[ i ].mName );\n\t\t\t\t\t\t\tvar tbone = bone;\n\t\t\t\t\t\t\tallBones.push( tbone );\n\t\t\t\t\t\t\t//tbone.matrixAutoUpdate = false;\n\t\t\t\t\t\t\toffsetMatrix.push( this.mBones[ i ].mOffsetMatrix.toTHREE() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tvar skeleton = new THREE.Skeleton( allBones, offsetMatrix );\n\n\t\t\t\t\tthis.threeNode.bind( skeleton, new THREE.Matrix4() );\n\t\t\t\t\tthis.threeNode.material.skinning = true;\n\n\t\t\t\t};\n\n\t\t\t\tthis.toTHREE = function ( scene ) {\n\n\t\t\t\t\tif ( this.threeNode ) return this.threeNode;\n\t\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\t\tvar mat;\n\t\t\t\t\tif ( scene.mMaterials[ this.mMaterialIndex ] )\n\t\t\t\t\t\tmat = scene.mMaterials[ this.mMaterialIndex ].toTHREE( scene );\n\t\t\t\t\telse\n\t\t\t\t\t\tmat = new THREE.MeshLambertMaterial();\n\t\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( new Uint32Array( this.mIndexArray ), 1 ) );\n\t\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( this.mVertexBuffer, 3 ) );\n\t\t\t\t\tif ( this.mNormalBuffer && this.mNormalBuffer.length > 0 )\n\t\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.BufferAttribute( this.mNormalBuffer, 3 ) );\n\t\t\t\t\tif ( this.mColorBuffer && this.mColorBuffer.length > 0 )\n\t\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.BufferAttribute( this.mColorBuffer, 4 ) );\n\t\t\t\t\tif ( this.mTexCoordsBuffers[ 0 ] && this.mTexCoordsBuffers[ 0 ].length > 0 )\n\t\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( this.mTexCoordsBuffers[ 0 ] ), 2 ) );\n\t\t\t\t\tif ( this.mTexCoordsBuffers[ 1 ] && this.mTexCoordsBuffers[ 1 ].length > 0 )\n\t\t\t\t\t\tgeometry.setAttribute( 'uv1', new THREE.BufferAttribute( new Float32Array( this.mTexCoordsBuffers[ 1 ] ), 2 ) );\n\t\t\t\t\tif ( this.mTangentBuffer && this.mTangentBuffer.length > 0 )\n\t\t\t\t\t\tgeometry.setAttribute( 'tangents', new THREE.BufferAttribute( this.mTangentBuffer, 3 ) );\n\t\t\t\t\tif ( this.mBitangentBuffer && this.mBitangentBuffer.length > 0 )\n\t\t\t\t\t\tgeometry.setAttribute( 'bitangents', new THREE.BufferAttribute( this.mBitangentBuffer, 3 ) );\n\t\t\t\t\tif ( this.mBones.length > 0 ) {\n\n\t\t\t\t\t\tvar weights = [];\n\t\t\t\t\t\tvar bones = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.mBones.length; i ++ ) {\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < this.mBones[ i ].mWeights.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar weight = this.mBones[ i ].mWeights[ j ];\n\t\t\t\t\t\t\t\tif ( weight ) {\n\n\t\t\t\t\t\t\t\t\tif ( ! weights[ weight.mVertexId ] ) weights[ weight.mVertexId ] = [];\n\t\t\t\t\t\t\t\t\tif ( ! bones[ weight.mVertexId ] ) bones[ weight.mVertexId ] = [];\n\t\t\t\t\t\t\t\t\tweights[ weight.mVertexId ].push( weight.mWeight );\n\t\t\t\t\t\t\t\t\tbones[ weight.mVertexId ].push( parseInt( i ) );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i in bones ) {\n\n\t\t\t\t\t\t\tsortWeights( bones[ i ], weights[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _weights = [];\n\t\t\t\t\t\tvar _bones = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tif ( weights[ i ] && bones[ i ] ) {\n\n\t\t\t\t\t\t\t\t\t_weights.push( weights[ i ][ j ] );\n\t\t\t\t\t\t\t\t\t_bones.push( bones[ i ][ j ] );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t_weights.push( 0 );\n\t\t\t\t\t\t\t\t\t_bones.push( 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.setAttribute( 'skinWeight', new THREE.BufferAttribute( new Float32Array( _weights ), BONESPERVERT ) );\n\t\t\t\t\t\tgeometry.setAttribute( 'skinIndex', new THREE.BufferAttribute( new Float32Array( _bones ), BONESPERVERT ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tif ( this.mBones.length == 0 )\n\t\t\t\t\t\tmesh = new THREE.Mesh( geometry, mat );\n\n\t\t\t\t\tif ( this.mBones.length > 0 ) {\n\n\t\t\t\t\t\tmesh = new THREE.SkinnedMesh( geometry, mat );\n\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.threeNode = mesh;\n\t\t\t\t\t//mesh.matrixAutoUpdate = false;\n\t\t\t\t\treturn mesh;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiFace() {\n\n\t\t\t\tthis.mNumIndices = 0;\n\t\t\t\tthis.mIndices = [];\n\n\t\t\t}\n\n\t\t\tfunction aiVector3D() {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t\tthis.toTHREE = function () {\n\n\t\t\t\t\treturn new THREE.Vector3( this.x, this.y, this.z );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiColor3D() {\n\n\t\t\t\tthis.r = 0;\n\t\t\t\tthis.g = 0;\n\t\t\t\tthis.b = 0;\n\t\t\t\tthis.a = 0;\n\t\t\t\tthis.toTHREE = function () {\n\n\t\t\t\t\treturn new THREE.Color( this.r, this.g, this.b );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiQuaternion() {\n\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t\tthis.w = 0;\n\t\t\t\tthis.toTHREE = function () {\n\n\t\t\t\t\treturn new THREE.Quaternion( this.x, this.y, this.z, this.w );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiVertexWeight() {\n\n\t\t\t\tthis.mVertexId = 0;\n\t\t\t\tthis.mWeight = 0;\n\n\t\t\t}\n\n\t\t\tfunction aiString() {\n\n\t\t\t\tthis.data = [];\n\t\t\t\tthis.toString = function () {\n\n\t\t\t\t\tvar str = '';\n\t\t\t\t\tthis.data.forEach( function ( i ) {\n\n\t\t\t\t\t\tstr += ( String.fromCharCode( i ) );\n\n\t\t\t\t\t} );\n\t\t\t\t\treturn str.replace( /[^\\x20-\\x7E]+/g, '' );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiVectorKey() {\n\n\t\t\t\tthis.mTime = 0;\n\t\t\t\tthis.mValue = null;\n\n\t\t\t}\n\n\t\t\tfunction aiQuatKey() {\n\n\t\t\t\tthis.mTime = 0;\n\t\t\t\tthis.mValue = null;\n\n\t\t\t}\n\n\t\t\tfunction aiNode() {\n\n\t\t\t\tthis.mName = '';\n\t\t\t\tthis.mTransformation = [];\n\t\t\t\tthis.mNumChildren = 0;\n\t\t\t\tthis.mNumMeshes = 0;\n\t\t\t\tthis.mMeshes = [];\n\t\t\t\tthis.mChildren = [];\n\t\t\t\tthis.toTHREE = function ( scene ) {\n\n\t\t\t\t\tif ( this.threeNode ) return this.threeNode;\n\t\t\t\t\tvar o = new THREE.Object3D();\n\t\t\t\t\to.name = this.mName;\n\t\t\t\t\to.matrix = this.mTransformation.toTHREE();\n\n\t\t\t\t\tfor ( var i = 0; i < this.mChildren.length; i ++ ) {\n\n\t\t\t\t\t\to.add( this.mChildren[ i ].toTHREE( scene ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.mMeshes.length; i ++ ) {\n\n\t\t\t\t\t\to.add( scene.mMeshes[ this.mMeshes[ i ] ].toTHREE( scene ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.threeNode = o;\n\t\t\t\t\t//o.matrixAutoUpdate = false;\n\t\t\t\t\to.matrix.decompose( o.position, o.quaternion, o.scale );\n\t\t\t\t\treturn o;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiBone() {\n\n\t\t\t\tthis.mName = '';\n\t\t\t\tthis.mNumWeights = 0;\n\t\t\t\tthis.mOffsetMatrix = 0;\n\n\t\t\t}\n\n\t\t\tfunction aiMaterialProperty() {\n\n\t\t\t\tthis.mKey = \"\";\n\t\t\t\tthis.mSemantic = 0;\n\t\t\t\tthis.mIndex = 0;\n\t\t\t\tthis.mData = [];\n\t\t\t\tthis.mDataLength = 0;\n\t\t\t\tthis.mType = 0;\n\t\t\t\tthis.dataAsColor = function () {\n\n\t\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\n\t\t\t\t\tvar reader = new DataView( array );\n\t\t\t\t\tvar r = reader.getFloat32( 0, true );\n\t\t\t\t\tvar g = reader.getFloat32( 4, true );\n\t\t\t\t\tvar b = reader.getFloat32( 8, true );\n\t\t\t\t\t//var a = reader.getFloat32(12, true);\n\t\t\t\t\treturn new THREE.Color( r, g, b );\n\n\t\t\t\t};\n\n\t\t\t\tthis.dataAsFloat = function () {\n\n\t\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\n\t\t\t\t\tvar reader = new DataView( array );\n\t\t\t\t\tvar r = reader.getFloat32( 0, true );\n\t\t\t\t\treturn r;\n\n\t\t\t\t};\n\n\t\t\t\tthis.dataAsBool = function () {\n\n\t\t\t\t\tvar array = ( new Uint8Array( this.mData ) ).buffer;\n\t\t\t\t\tvar reader = new DataView( array );\n\t\t\t\t\tvar r = reader.getFloat32( 0, true );\n\t\t\t\t\treturn !! r;\n\n\t\t\t\t};\n\n\t\t\t\tthis.dataAsString = function () {\n\n\t\t\t\t\tvar s = new aiString();\n\t\t\t\t\ts.data = this.mData;\n\t\t\t\t\treturn s.toString();\n\n\t\t\t\t};\n\n\t\t\t\tthis.dataAsMap = function () {\n\n\t\t\t\t\tvar s = new aiString();\n\t\t\t\t\ts.data = this.mData;\n\t\t\t\t\tvar path = s.toString();\n\t\t\t\t\tpath = path.replace( /\\\\/g, '/' );\n\n\t\t\t\t\tif ( path.indexOf( '/' ) != - 1 ) {\n\n\t\t\t\t\t\tpath = path.substr( path.lastIndexOf( '/' ) + 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn textureLoader.load( path );\n\n\t\t\t\t};\n\n\t\t\t}\n\t\t\tvar namePropMapping = {\n\n\t\t\t\t\"?mat.name\": \"name\",\n\t\t\t\t\"$mat.shadingm\": \"shading\",\n\t\t\t\t\"$mat.twosided\": \"twoSided\",\n\t\t\t\t\"$mat.wireframe\": \"wireframe\",\n\t\t\t\t\"$clr.ambient\": \"ambient\",\n\t\t\t\t\"$clr.diffuse\": \"color\",\n\t\t\t\t\"$clr.specular\": \"specular\",\n\t\t\t\t\"$clr.emissive\": \"emissive\",\n\t\t\t\t\"$clr.transparent\": \"transparent\",\n\t\t\t\t\"$clr.reflective\": \"reflect\",\n\t\t\t\t\"$mat.shininess\": \"shininess\",\n\t\t\t\t\"$mat.reflectivity\": \"reflectivity\",\n\t\t\t\t\"$mat.refracti\": \"refraction\",\n\t\t\t\t\"$tex.file\": \"map\"\n\n\t\t\t};\n\n\t\t\tvar nameTypeMapping = {\n\n\t\t\t\t\"?mat.name\": \"string\",\n\t\t\t\t\"$mat.shadingm\": \"bool\",\n\t\t\t\t\"$mat.twosided\": \"bool\",\n\t\t\t\t\"$mat.wireframe\": \"bool\",\n\t\t\t\t\"$clr.ambient\": \"color\",\n\t\t\t\t\"$clr.diffuse\": \"color\",\n\t\t\t\t\"$clr.specular\": \"color\",\n\t\t\t\t\"$clr.emissive\": \"color\",\n\t\t\t\t\"$clr.transparent\": \"color\",\n\t\t\t\t\"$clr.reflective\": \"color\",\n\t\t\t\t\"$mat.shininess\": \"float\",\n\t\t\t\t\"$mat.reflectivity\": \"float\",\n\t\t\t\t\"$mat.refracti\": \"float\",\n\t\t\t\t\"$tex.file\": \"map\"\n\n\t\t\t};\n\n\t\t\tfunction aiMaterial() {\n\n\t\t\t\tthis.mNumAllocated = 0;\n\t\t\t\tthis.mNumProperties = 0;\n\t\t\t\tthis.mProperties = [];\n\t\t\t\tthis.toTHREE = function () {\n\n\t\t\t\t\tvar mat = new THREE.MeshPhongMaterial();\n\n\t\t\t\t\tfor ( var i = 0; i < this.mProperties.length; i ++ ) {\n\n\t\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'float' )\n\t\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsFloat();\n\t\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'color' )\n\t\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsColor();\n\t\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'bool' )\n\t\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsBool();\n\t\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'string' )\n\t\t\t\t\t\t\tmat[ namePropMapping[ this.mProperties[ i ].mKey ] ] = this.mProperties[ i ].dataAsString();\n\t\t\t\t\t\tif ( nameTypeMapping[ this.mProperties[ i ].mKey ] == 'map' ) {\n\n\t\t\t\t\t\t\tvar prop = this.mProperties[ i ];\n\t\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_DIFFUSE )\n\t\t\t\t\t\t\t\tmat.map = this.mProperties[ i ].dataAsMap();\n\t\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_NORMALS )\n\t\t\t\t\t\t\t\tmat.normalMap = this.mProperties[ i ].dataAsMap();\n\t\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_LIGHTMAP )\n\t\t\t\t\t\t\t\tmat.lightMap = this.mProperties[ i ].dataAsMap();\n\t\t\t\t\t\t\tif ( prop.mSemantic == aiTextureType_OPACITY )\n\t\t\t\t\t\t\t\tmat.alphaMap = this.mProperties[ i ].dataAsMap();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmat.ambient.r = .53;\n\t\t\t\t\tmat.ambient.g = .53;\n\t\t\t\t\tmat.ambient.b = .53;\n\t\t\t\t\tmat.color.r = 1;\n\t\t\t\t\tmat.color.g = 1;\n\t\t\t\t\tmat.color.b = 1;\n\t\t\t\t\treturn mat;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tfunction veclerp( v1, v2, l ) {\n\n\t\t\t\tvar v = new THREE.Vector3();\n\t\t\t\tvar lm1 = 1 - l;\n\t\t\t\tv.x = v1.x * l + v2.x * lm1;\n\t\t\t\tv.y = v1.y * l + v2.y * lm1;\n\t\t\t\tv.z = v1.z * l + v2.z * lm1;\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t\tfunction quatlerp( q1, q2, l ) {\n\n\t\t\t\treturn q1.clone().slerp( q2, 1 - l );\n\n\t\t\t}\n\n\t\t\tfunction sampleTrack( keys, time, lne, lerp ) {\n\n\t\t\t\tif ( keys.length == 1 ) return keys[ 0 ].mValue.toTHREE();\n\n\t\t\t\tvar dist = Infinity;\n\t\t\t\tvar key = null;\n\t\t\t\tvar nextKey = null;\n\n\t\t\t\tfor ( var i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\t\tvar timeDist = Math.abs( keys[ i ].mTime - time );\n\n\t\t\t\t\tif ( timeDist < dist && keys[ i ].mTime <= time ) {\n\n\t\t\t\t\t\tdist = timeDist;\n\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\tnextKey = keys[ i + 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! key ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t} else if ( nextKey ) {\n\n\t\t\t\t\tvar dT = nextKey.mTime - key.mTime;\n\t\t\t\t\tvar T = key.mTime - time;\n\t\t\t\t\tvar l = T / dT;\n\n\t\t\t\t\treturn lerp( key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnextKey = keys[ 0 ].clone();\n\t\t\t\t\tnextKey.mTime += lne;\n\n\t\t\t\t\tvar dT = nextKey.mTime - key.mTime;\n\t\t\t\t\tvar T = key.mTime - time;\n\t\t\t\t\tvar l = T / dT;\n\n\t\t\t\t\treturn lerp( key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction aiNodeAnim() {\n\n\t\t\t\tthis.mNodeName = \"\";\n\t\t\t\tthis.mNumPositionKeys = 0;\n\t\t\t\tthis.mNumRotationKeys = 0;\n\t\t\t\tthis.mNumScalingKeys = 0;\n\t\t\t\tthis.mPositionKeys = [];\n\t\t\t\tthis.mRotationKeys = [];\n\t\t\t\tthis.mScalingKeys = [];\n\t\t\t\tthis.mPreState = \"\";\n\t\t\t\tthis.mPostState = \"\";\n\t\t\t\tthis.init = function ( tps ) {\n\n\t\t\t\t\tif ( ! tps ) tps = 1;\n\n\t\t\t\t\tfunction t( t ) {\n\n\t\t\t\t\t\tt.mTime /= tps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.mPositionKeys.forEach( t );\n\t\t\t\t\tthis.mRotationKeys.forEach( t );\n\t\t\t\t\tthis.mScalingKeys.forEach( t );\n\n\t\t\t\t};\n\n\t\t\t\tthis.sortKeys = function () {\n\n\t\t\t\t\tfunction comp( a, b ) {\n\n\t\t\t\t\t\treturn a.mTime - b.mTime;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.mPositionKeys.sort( comp );\n\t\t\t\t\tthis.mRotationKeys.sort( comp );\n\t\t\t\t\tthis.mScalingKeys.sort( comp );\n\n\t\t\t\t};\n\n\t\t\t\tthis.getLength = function () {\n\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\tMath.max.apply( null, this.mPositionKeys.map( function ( a ) {\n\n\t\t\t\t\t\t\treturn a.mTime;\n\n\t\t\t\t\t\t} ) ),\n\t\t\t\t\t\tMath.max.apply( null, this.mRotationKeys.map( function ( a ) {\n\n\t\t\t\t\t\t\treturn a.mTime;\n\n\t\t\t\t\t\t} ) ),\n\t\t\t\t\t\tMath.max.apply( null, this.mScalingKeys.map( function ( a ) {\n\n\t\t\t\t\t\t\treturn a.mTime;\n\n\t\t\t\t\t } ) )\n\t\t\t\t\t);\n\n\t\t\t\t};\n\n\t\t\t\tthis.toTHREE = function ( o ) {\n\n\t\t\t\t\tthis.sortKeys();\n\t\t\t\t\tvar length = this.getLength();\n\t\t\t\t\tvar track = new Virtulous.KeyFrameTrack();\n\n\t\t\t\t\tfor ( var i = 0; i < length; i += .05 ) {\n\n\t\t\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\t\t\tvar time = i;\n\t\t\t\t\t\tvar pos = sampleTrack( this.mPositionKeys, time, length, veclerp );\n\t\t\t\t\t\tvar scale = sampleTrack( this.mScalingKeys, time, length, veclerp );\n\t\t\t\t\t\tvar rotation = sampleTrack( this.mRotationKeys, time, length, quatlerp );\n\t\t\t\t\t\tmatrix.compose( pos, rotation, scale );\n\n\t\t\t\t\t\tvar key = new Virtulous.KeyFrame( time, matrix );\n\t\t\t\t\t\ttrack.addKey( key );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttrack.target = o.findNode( this.mNodeName ).toTHREE();\n\n\t\t\t\t\tvar tracks = [ track ];\n\n\t\t\t\t\tif ( o.nodeToBoneMap[ this.mNodeName ] ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < o.nodeToBoneMap[ this.mNodeName ].length; i ++ ) {\n\n\t\t\t\t\t\t\tvar t2 = track.clone();\n\t\t\t\t\t\t\tt2.target = o.nodeToBoneMap[ this.mNodeName ][ i ];\n\t\t\t\t\t\t\ttracks.push( t2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tracks;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiAnimation() {\n\n\t\t\t\tthis.mName = \"\";\n\t\t\t\tthis.mDuration = 0;\n\t\t\t\tthis.mTicksPerSecond = 0;\n\t\t\t\tthis.mNumChannels = 0;\n\t\t\t\tthis.mChannels = [];\n\t\t\t\tthis.toTHREE = function ( root ) {\n\n\t\t\t\t\tvar animationHandle = new Virtulous.Animation();\n\n\t\t\t\t\tfor ( var i in this.mChannels ) {\n\n\t\t\t\t\t\tthis.mChannels[ i ].init( this.mTicksPerSecond );\n\n\t\t\t\t\t\tvar tracks = this.mChannels[ i ].toTHREE( root );\n\n\t\t\t\t\t\tfor ( var j in tracks ) {\n\n\t\t\t\t\t\t\ttracks[ j ].init();\n\t\t\t\t\t\t\tanimationHandle.addTrack( tracks[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationHandle.length = Math.max.apply( null, animationHandle.tracks.map( function ( e ) {\n\n\t\t\t\t\t\treturn e.length;\n\n\t\t\t\t\t} ) );\n\t\t\t\t\treturn animationHandle;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiTexture() {\n\n\t\t\t\tthis.mWidth = 0;\n\t\t\t\tthis.mHeight = 0;\n\t\t\t\tthis.texAchFormatHint = [];\n\t\t\t\tthis.pcData = [];\n\n\t\t\t}\n\n\t\t\tfunction aiLight() {\n\n\t\t\t\tthis.mName = '';\n\t\t\t\tthis.mType = 0;\n\t\t\t\tthis.mAttenuationConstant = 0;\n\t\t\t\tthis.mAttenuationLinear = 0;\n\t\t\t\tthis.mAttenuationQuadratic = 0;\n\t\t\t\tthis.mAngleInnerCone = 0;\n\t\t\t\tthis.mAngleOuterCone = 0;\n\t\t\t\tthis.mColorDiffuse = null;\n\t\t\t\tthis.mColorSpecular = null;\n\t\t\t\tthis.mColorAmbient = null;\n\n\t\t\t}\n\n\t\t\tfunction aiCamera() {\n\n\t\t\t\tthis.mName = '';\n\t\t\t\tthis.mPosition = null;\n\t\t\t\tthis.mLookAt = null;\n\t\t\t\tthis.mUp = null;\n\t\t\t\tthis.mHorizontalFOV = 0;\n\t\t\t\tthis.mClipPlaneNear = 0;\n\t\t\t\tthis.mClipPlaneFar = 0;\n\t\t\t\tthis.mAspect = 0;\n\n\t\t\t}\n\n\t\t\tfunction aiScene() {\n\n\t\t\t\tthis.versionMajor = 0;\n\t\t\t\tthis.versionMinor = 0;\n\t\t\t\tthis.versionRevision = 0;\n\t\t\t\tthis.compileFlags = 0;\n\t\t\t\tthis.mFlags = 0;\n\t\t\t\tthis.mNumMeshes = 0;\n\t\t\t\tthis.mNumMaterials = 0;\n\t\t\t\tthis.mNumAnimations = 0;\n\t\t\t\tthis.mNumTextures = 0;\n\t\t\t\tthis.mNumLights = 0;\n\t\t\t\tthis.mNumCameras = 0;\n\t\t\t\tthis.mRootNode = null;\n\t\t\t\tthis.mMeshes = [];\n\t\t\t\tthis.mMaterials = [];\n\t\t\t\tthis.mAnimations = [];\n\t\t\t\tthis.mLights = [];\n\t\t\t\tthis.mCameras = [];\n\t\t\t\tthis.nodeToBoneMap = {};\n\t\t\t\tthis.findNode = function ( name, root ) {\n\n\t\t\t\t\tif ( ! root ) {\n\n\t\t\t\t\t\troot = this.mRootNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( root.mName == name ) {\n\n\t\t\t\t\t\treturn root;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < root.mChildren.length; i ++ ) {\n\n\t\t\t\t\t\tvar ret = this.findNode( name, root.mChildren[ i ] );\n\t\t\t\t\t\tif ( ret ) return ret;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tthis.toTHREE = function () {\n\n\t\t\t\t\tthis.nodeCount = 0;\n\n\t\t\t\t\tmarkBones( this );\n\n\t\t\t\t\tvar o = this.mRootNode.toTHREE( this );\n\n\t\t\t\t\tfor ( var i in this.mMeshes )\n\t\t\t\t\t\tthis.mMeshes[ i ].hookupSkeletons( this );\n\n\t\t\t\t\tif ( this.mAnimations.length > 0 ) {\n\n\t\t\t\t\t\tvar a = this.mAnimations[ 0 ].toTHREE( this );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { object: o, animation: a };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction aiMatrix4() {\n\n\t\t\t\tthis.elements = [\n\t\t\t\t\t[],\n\t\t\t\t\t[],\n\t\t\t\t\t[],\n\t\t\t\t\t[]\n\t\t\t\t];\n\t\t\t\tthis.toTHREE = function () {\n\n\t\t\t\t\tvar m = new THREE.Matrix4();\n\n\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\tfor ( var i2 = 0; i2 < 4; ++ i2 ) {\n\n\t\t\t\t\t\t\tm.elements[ i * 4 + i2 ] = this.elements[ i2 ][ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn m;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar littleEndian = true;\n\n\t\t\tfunction readFloat( dataview ) {\n\n\t\t\t\tvar val = dataview.getFloat32( dataview.readOffset, littleEndian );\n\t\t\t\tdataview.readOffset += 4;\n\t\t\t\treturn val;\n\n\t\t\t}\n\n\t\t\tfunction Read_double( dataview ) {\n\n\t\t\t\tvar val = dataview.getFloat64( dataview.readOffset, littleEndian );\n\t\t\t\tdataview.readOffset += 8;\n\t\t\t\treturn val;\n\n\t\t\t}\n\n\t\t\tfunction Read_uint8_t( dataview ) {\n\n\t\t\t\tvar val = dataview.getUint8( dataview.readOffset );\n\t\t\t\tdataview.readOffset += 1;\n\t\t\t\treturn val;\n\n\t\t\t}\n\n\t\t\tfunction Read_uint16_t( dataview ) {\n\n\t\t\t\tvar val = dataview.getUint16( dataview.readOffset, littleEndian );\n\t\t\t\tdataview.readOffset += 2;\n\t\t\t\treturn val;\n\n\t\t\t}\n\n\t\t\tfunction Read_unsigned_int( dataview ) {\n\n\t\t\t\tvar val = dataview.getUint32( dataview.readOffset, littleEndian );\n\t\t\t\tdataview.readOffset += 4;\n\t\t\t\treturn val;\n\n\t\t\t}\n\n\t\t\tfunction Read_uint32_t( dataview ) {\n\n\t\t\t\tvar val = dataview.getUint32( dataview.readOffset, littleEndian );\n\t\t\t\tdataview.readOffset += 4;\n\t\t\t\treturn val;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiVector3D( stream ) {\n\n\t\t\t\tvar v = new aiVector3D();\n\t\t\t\tv.x = readFloat( stream );\n\t\t\t\tv.y = readFloat( stream );\n\t\t\t\tv.z = readFloat( stream );\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiColor3D( stream ) {\n\n\t\t\t\tvar c = new aiColor3D();\n\t\t\t\tc.r = readFloat( stream );\n\t\t\t\tc.g = readFloat( stream );\n\t\t\t\tc.b = readFloat( stream );\n\t\t\t\treturn c;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiQuaternion( stream ) {\n\n\t\t\t\tvar v = new aiQuaternion();\n\t\t\t\tv.w = readFloat( stream );\n\t\t\t\tv.x = readFloat( stream );\n\t\t\t\tv.y = readFloat( stream );\n\t\t\t\tv.z = readFloat( stream );\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiString( stream ) {\n\n\t\t\t\tvar s = new aiString();\n\t\t\t\tvar stringlengthbytes = Read_unsigned_int( stream );\n\t\t\t\tstream.ReadBytes( s.data, 1, stringlengthbytes );\n\t\t\t\treturn s.toString();\n\n\t\t\t}\n\n\t\t\tfunction Read_aiVertexWeight( stream ) {\n\n\t\t\t\tvar w = new aiVertexWeight();\n\t\t\t\tw.mVertexId = Read_unsigned_int( stream );\n\t\t\t\tw.mWeight = readFloat( stream );\n\t\t\t\treturn w;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiMatrix4x4( stream ) {\n\n\t\t\t\tvar m = new aiMatrix4();\n\n\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfor ( var i2 = 0; i2 < 4; ++ i2 ) {\n\n\t\t\t\t\t\tm.elements[ i ][ i2 ] = readFloat( stream );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn m;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiVectorKey( stream ) {\n\n\t\t\t\tvar v = new aiVectorKey();\n\t\t\t\tv.mTime = Read_double( stream );\n\t\t\t\tv.mValue = Read_aiVector3D( stream );\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t\tfunction Read_aiQuatKey( stream ) {\n\n\t\t\t\tvar v = new aiQuatKey();\n\t\t\t\tv.mTime = Read_double( stream );\n\t\t\t\tv.mValue = Read_aiQuaternion( stream );\n\t\t\t\treturn v;\n\n\t\t\t}\n\n\t\t\tfunction ReadArray_aiVertexWeight( stream, data, size ) {\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiVertexWeight( stream );\n\n\t\t\t}\n\n\t\t\tfunction ReadArray_aiVectorKey( stream, data, size ) {\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiVectorKey( stream );\n\n\t\t\t}\n\n\t\t\tfunction ReadArray_aiQuatKey( stream, data, size ) {\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) data[ i ] = Read_aiQuatKey( stream );\n\n\t\t\t}\n\n\t\t\tfunction ReadBounds( stream, T /*p*/, n ) {\n\n\t\t\t\t// not sure what to do here, the data isn't really useful.\n\t\t\t\treturn stream.Seek( sizeof( T ) * n, aiOrigin_CUR );\n\n\t\t\t}\n\n\t\t\tfunction ai_assert( bool ) {\n\n\t\t\t\tif ( ! bool )\n\t\t\t\t\tthrow ( \"asset failed\" );\n\n\t\t\t}\n\n\t\t\tfunction ReadBinaryNode( stream, parent, depth ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AINODE );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tvar node = new aiNode();\n\t\t\t\tnode.mParent = parent;\n\t\t\t\tnode.mDepth = depth;\n\t\t\t\tnode.mName = Read_aiString( stream );\n\t\t\t\tnode.mTransformation = Read_aiMatrix4x4( stream );\n\t\t\t\tnode.mNumChildren = Read_unsigned_int( stream );\n\t\t\t\tnode.mNumMeshes = Read_unsigned_int( stream );\n\n\t\t\t\tif ( node.mNumMeshes ) {\n\n\t\t\t\t\tnode.mMeshes = [];\n\n\t\t\t\t\tfor ( var i = 0; i < node.mNumMeshes; ++ i ) {\n\n\t\t\t\t\t\tnode.mMeshes[ i ] = Read_unsigned_int( stream );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( node.mNumChildren ) {\n\n\t\t\t\t\tnode.mChildren = [];\n\n\t\t\t\t\tfor ( var i = 0; i < node.mNumChildren; ++ i ) {\n\n\t\t\t\t\t\tvar node2 = ReadBinaryNode( stream, node, depth ++ );\n\t\t\t\t\t\tnode.mChildren[ i ] = node2;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn node;\n\n\t\t\t}\n\n\t\t\t// -----------------------------------------------------------------------------------\n\n\t\t\tfunction ReadBinaryBone( stream, b ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIBONE );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tb.mName = Read_aiString( stream );\n\t\t\t\tb.mNumWeights = Read_unsigned_int( stream );\n\t\t\t\tb.mOffsetMatrix = Read_aiMatrix4x4( stream );\n\t\t\t\t// for the moment we write dumb min/max values for the bones, too.\n\t\t\t\t// maybe I'll add a better, hash-like solution later\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tReadBounds( stream, b.mWeights, b.mNumWeights );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\tb.mWeights = [];\n\t\t\t\t\tReadArray_aiVertexWeight( stream, b.mWeights, b.mNumWeights );\n\n\t\t\t\t}\n\n\t\t\t\treturn b;\n\n\t\t\t}\n\n\t\t\tfunction ReadBinaryMesh( stream, mesh ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMESH );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tmesh.mPrimitiveTypes = Read_unsigned_int( stream );\n\t\t\t\tmesh.mNumVertices = Read_unsigned_int( stream );\n\t\t\t\tmesh.mNumFaces = Read_unsigned_int( stream );\n\t\t\t\tmesh.mNumBones = Read_unsigned_int( stream );\n\t\t\t\tmesh.mMaterialIndex = Read_unsigned_int( stream );\n\t\t\t\tmesh.mNumUVComponents = [];\n\t\t\t\t// first of all, write bits for all existent vertex components\n\t\t\t\tvar c = Read_unsigned_int( stream );\n\n\t\t\t\tif ( c & ASSBIN_MESH_HAS_POSITIONS ) {\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, mesh.mVertices, mesh.mNumVertices );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t\tmesh.mVertices = [];\n\t\t\t\t\t\tmesh.mVertexBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( c & ASSBIN_MESH_HAS_NORMALS ) {\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, mesh.mNormals, mesh.mNumVertices );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t\tmesh.mNormals = [];\n\t\t\t\t\t\tmesh.mNormalBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS ) {\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, mesh.mTangents, mesh.mNumVertices );\n\t\t\t\t\t\tReadBounds( stream, mesh.mBitangents, mesh.mNumVertices );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t\tmesh.mTangents = [];\n\t\t\t\t\t\tmesh.mTangentBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\t\t\t\t\t\tmesh.mBitangents = [];\n\t\t\t\t\t\tmesh.mBitangentBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4 );\n\t\t\t\t\t\tstream.Seek( mesh.mNumVertices * 3 * 4, aiOrigin_CUR );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++ n ) {\n\n\t\t\t\t\tif ( ! ( c & ASSBIN_MESH_HAS_COLOR( n ) ) ) break;\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, mesh.mColors[ n ], mesh.mNumVertices );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t\tmesh.mColors[ n ] = [];\n\t\t\t\t\t\tmesh.mColorBuffer = stream.subArray32( stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4 );\n\t\t\t\t\t\tstream.Seek( mesh.mNumVertices * 4 * 4, aiOrigin_CUR );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.mTexCoordsBuffers = [];\n\n\t\t\t\tfor ( var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++ n ) {\n\n\t\t\t\t\tif ( ! ( c & ASSBIN_MESH_HAS_TEXCOORD( n ) ) ) break;\n\n\t\t\t\t\t// write number of UV components\n\t\t\t\t\tmesh.mNumUVComponents[ n ] = Read_unsigned_int( stream );\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, mesh.mTextureCoords[ n ], mesh.mNumVertices );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t\tmesh.mTextureCoords[ n ] = [];\n\t\t\t\t\t\t//note that assbin always writes 3d texcoords\n\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ] = [];\n\n\t\t\t\t\t\tfor ( var uv = 0; uv < mesh.mNumVertices; uv ++ ) {\n\n\t\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ].push( readFloat( stream ) );\n\t\t\t\t\t\t\tmesh.mTexCoordsBuffers[ n ].push( readFloat( stream ) );\n\t\t\t\t\t\t\treadFloat( stream );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// write faces. There are no floating-point calculations involved\n\t\t\t\t// in these, so we can write a simple hash over the face data\n\t\t\t\t// to the dump file. We generate a single 32 Bit hash for 512 faces\n\t\t\t\t// using Assimp's standard hashing function.\n\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\tRead_unsigned_int( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t// if there are less than 2^16 vertices, we can simply use 16 bit integers ...\n\t\t\t\t\tmesh.mFaces = [];\n\t\t\t\t\tmesh.mIndexArray = [];\n\n\t\t\t\t\tfor ( var i = 0; i < mesh.mNumFaces; ++ i ) {\n\n\t\t\t\t\t\tvar f = mesh.mFaces[ i ] = new aiFace();\n\t\t\t\t\t\t// BOOST_STATIC_ASSERT(AI_MAX_FACE_INDICES <= 0xffff);\n\t\t\t\t\t\tf.mNumIndices = Read_uint16_t( stream );\n\t\t\t\t\t\tf.mIndices = [];\n\n\t\t\t\t\t\tfor ( var a = 0; a < f.mNumIndices; ++ a ) {\n\n\t\t\t\t\t\t\tif ( mesh.mNumVertices < ( 1 << 16 ) ) {\n\n\t\t\t\t\t\t\t\tf.mIndices[ a ] = Read_uint16_t( stream );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tf.mIndices[ a ] = Read_unsigned_int( stream );\n\n\t\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( f.mNumIndices === 3 ) {\n\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 1 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\n\n\t\t\t\t\t\t} else if ( f.mNumIndices === 4 ) {\n\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 1 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 2 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 3 ] );\n\t\t\t\t\t\t\tmesh.mIndexArray.push( f.mIndices[ 0 ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthrow ( new Error( \"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\" ) );\n\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// write bones\n\t\t\t\tif ( mesh.mNumBones ) {\n\n\t\t\t\t\tmesh.mBones = [];\n\n\t\t\t\t\tfor ( var a = 0; a < mesh.mNumBones; ++ a ) {\n\n\t\t\t\t\t\tmesh.mBones[ a ] = new aiBone();\n\t\t\t\t\t\tReadBinaryBone( stream, mesh.mBones[ a ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction ReadBinaryMaterialProperty( stream, prop ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tprop.mKey = Read_aiString( stream );\n\t\t\t\tprop.mSemantic = Read_unsigned_int( stream );\n\t\t\t\tprop.mIndex = Read_unsigned_int( stream );\n\t\t\t\tprop.mDataLength = Read_unsigned_int( stream );\n\t\t\t\tprop.mType = Read_unsigned_int( stream );\n\t\t\t\tprop.mData = [];\n\t\t\t\tstream.ReadBytes( prop.mData, 1, prop.mDataLength );\n\n\t\t\t}\n\n\t\t\t// -----------------------------------------------------------------------------------\n\n\t\t\tfunction ReadBinaryMaterial( stream, mat ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIMATERIAL );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tmat.mNumAllocated = mat.mNumProperties = Read_unsigned_int( stream );\n\n\t\t\t\tif ( mat.mNumProperties ) {\n\n\t\t\t\t\tif ( mat.mProperties ) {\n\n\t\t\t\t\t\tdelete mat.mProperties;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmat.mProperties = [];\n\n\t\t\t\t\tfor ( var i = 0; i < mat.mNumProperties; ++ i ) {\n\n\t\t\t\t\t\tmat.mProperties[ i ] = new aiMaterialProperty();\n\t\t\t\t\t\tReadBinaryMaterialProperty( stream, mat.mProperties[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// -----------------------------------------------------------------------------------\n\t\t\tfunction ReadBinaryNodeAnim( stream, nd ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AINODEANIM );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tnd.mNodeName = Read_aiString( stream );\n\t\t\t\tnd.mNumPositionKeys = Read_unsigned_int( stream );\n\t\t\t\tnd.mNumRotationKeys = Read_unsigned_int( stream );\n\t\t\t\tnd.mNumScalingKeys = Read_unsigned_int( stream );\n\t\t\t\tnd.mPreState = Read_unsigned_int( stream );\n\t\t\t\tnd.mPostState = Read_unsigned_int( stream );\n\n\t\t\t\tif ( nd.mNumPositionKeys ) {\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, nd.mPositionKeys, nd.mNumPositionKeys );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// else write as usual\n\n\t\t\t\t\t\tnd.mPositionKeys = [];\n\t\t\t\t\t\tReadArray_aiVectorKey( stream, nd.mPositionKeys, nd.mNumPositionKeys );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( nd.mNumRotationKeys ) {\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, nd.mRotationKeys, nd.mNumRotationKeys );\n\n\t\t\t\t\t} else {\n\n\t\t\t \t\t\t// else write as usual\n\n\t\t\t\t\t\tnd.mRotationKeys = [];\n\t\t\t\t\t\tReadArray_aiQuatKey( stream, nd.mRotationKeys, nd.mNumRotationKeys );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( nd.mNumScalingKeys ) {\n\n\t\t\t\t\tif ( shortened ) {\n\n\t\t\t\t\t\tReadBounds( stream, nd.mScalingKeys, nd.mNumScalingKeys );\n\n\t\t\t\t\t} else {\n\n\t\t \t\t\t\t// else write as usual\n\n\t\t\t\t\t\tnd.mScalingKeys = [];\n\t\t\t\t\t\tReadArray_aiVectorKey( stream, nd.mScalingKeys, nd.mNumScalingKeys );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// -----------------------------------------------------------------------------------\n\t\t\tfunction ReadBinaryAnim( stream, anim ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AIANIMATION );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tanim.mName = Read_aiString( stream );\n\t\t\t\tanim.mDuration = Read_double( stream );\n\t\t\t\tanim.mTicksPerSecond = Read_double( stream );\n\t\t\t\tanim.mNumChannels = Read_unsigned_int( stream );\n\n\t\t\t\tif ( anim.mNumChannels ) {\n\n\t\t\t\t\tanim.mChannels = [];\n\n\t\t\t\t\tfor ( var a = 0; a < anim.mNumChannels; ++ a ) {\n\n\t\t\t\t\t\tanim.mChannels[ a ] = new aiNodeAnim();\n\t\t\t\t\t\tReadBinaryNodeAnim( stream, anim.mChannels[ a ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction ReadBinaryTexture( stream, tex ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AITEXTURE );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\ttex.mWidth = Read_unsigned_int( stream );\n\t\t\t\ttex.mHeight = Read_unsigned_int( stream );\n\t\t\t\tstream.ReadBytes( tex.achFormatHint, 1, 4 );\n\n\t\t\t\tif ( ! shortened ) {\n\n\t\t\t\t\tif ( ! tex.mHeight ) {\n\n\t\t\t\t\t\ttex.pcData = [];\n\t\t\t\t\t\tstream.ReadBytes( tex.pcData, 1, tex.mWidth );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttex.pcData = [];\n\t\t\t\t\t\tstream.ReadBytes( tex.pcData, 1, tex.mWidth * tex.mHeight * 4 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// -----------------------------------------------------------------------------------\n\t\t\tfunction ReadBinaryLight( stream, l ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AILIGHT );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tl.mName = Read_aiString( stream );\n\t\t\t\tl.mType = Read_unsigned_int( stream );\n\n\t\t\t\tif ( l.mType != aiLightSource_DIRECTIONAL ) {\n\n\t\t\t\t\tl.mAttenuationConstant = readFloat( stream );\n\t\t\t\t\tl.mAttenuationLinear = readFloat( stream );\n\t\t\t\t\tl.mAttenuationQuadratic = readFloat( stream );\n\n\t\t\t\t}\n\n\t\t\t\tl.mColorDiffuse = Read_aiColor3D( stream );\n\t\t\t\tl.mColorSpecular = Read_aiColor3D( stream );\n\t\t\t\tl.mColorAmbient = Read_aiColor3D( stream );\n\n\t\t\t\tif ( l.mType == aiLightSource_SPOT ) {\n\n\t\t\t\t\tl.mAngleInnerCone = readFloat( stream );\n\t\t\t\t\tl.mAngleOuterCone = readFloat( stream );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// -----------------------------------------------------------------------------------\n\t\t\tfunction ReadBinaryCamera( stream, cam ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AICAMERA );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tcam.mName = Read_aiString( stream );\n\t\t\t\tcam.mPosition = Read_aiVector3D( stream );\n\t\t\t\tcam.mLookAt = Read_aiVector3D( stream );\n\t\t\t\tcam.mUp = Read_aiVector3D( stream );\n\t\t\t\tcam.mHorizontalFOV = readFloat( stream );\n\t\t\t\tcam.mClipPlaneNear = readFloat( stream );\n\t\t\t\tcam.mClipPlaneFar = readFloat( stream );\n\t\t\t\tcam.mAspect = readFloat( stream );\n\n\t\t\t}\n\n\t\t\tfunction ReadBinaryScene( stream, scene ) {\n\n\t\t\t\tvar chunkID = Read_uint32_t( stream );\n\t\t\t\tai_assert( chunkID == ASSBIN_CHUNK_AISCENE );\n\t\t\t\t/*uint32_t size =*/\n\t\t\t\tRead_uint32_t( stream );\n\t\t\t\tscene.mFlags = Read_unsigned_int( stream );\n\t\t\t\tscene.mNumMeshes = Read_unsigned_int( stream );\n\t\t\t\tscene.mNumMaterials = Read_unsigned_int( stream );\n\t\t\t\tscene.mNumAnimations = Read_unsigned_int( stream );\n\t\t\t\tscene.mNumTextures = Read_unsigned_int( stream );\n\t\t\t\tscene.mNumLights = Read_unsigned_int( stream );\n\t\t\t\tscene.mNumCameras = Read_unsigned_int( stream );\n\t\t\t\t// Read node graph\n\t\t\t\tscene.mRootNode = new aiNode();\n\t\t\t\tscene.mRootNode = ReadBinaryNode( stream, null, 0 );\n\t\t\t\t// Read all meshes\n\t\t\t\tif ( scene.mNumMeshes ) {\n\n\t\t\t\t\tscene.mMeshes = [];\n\n\t\t\t\t\tfor ( var i = 0; i < scene.mNumMeshes; ++ i ) {\n\n\t\t\t\t\t\tscene.mMeshes[ i ] = new aiMesh();\n\t\t\t\t\t\tReadBinaryMesh( stream, scene.mMeshes[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// Read materials\n\t\t\t\tif ( scene.mNumMaterials ) {\n\n\t\t\t\t\tscene.mMaterials = [];\n\n\t\t\t\t\tfor ( var i = 0; i < scene.mNumMaterials; ++ i ) {\n\n\t\t\t\t\t\tscene.mMaterials[ i ] = new aiMaterial();\n\t\t\t\t\t\tReadBinaryMaterial( stream, scene.mMaterials[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// Read all animations\n\t\t\t\tif ( scene.mNumAnimations ) {\n\n\t\t\t\t\tscene.mAnimations = [];\n\n\t\t\t\t\tfor ( var i = 0; i < scene.mNumAnimations; ++ i ) {\n\n\t\t\t\t\t\tscene.mAnimations[ i ] = new aiAnimation();\n\t\t\t\t\t\tReadBinaryAnim( stream, scene.mAnimations[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// Read all textures\n\t\t\t\tif ( scene.mNumTextures ) {\n\n\t\t\t\t\tscene.mTextures = [];\n\n\t\t\t\t\tfor ( var i = 0; i < scene.mNumTextures; ++ i ) {\n\n\t\t\t\t\t\tscene.mTextures[ i ] = new aiTexture();\n\t\t\t\t\t\tReadBinaryTexture( stream, scene.mTextures[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// Read lights\n\t\t\t\tif ( scene.mNumLights ) {\n\n\t\t\t\t\tscene.mLights = [];\n\n\t\t\t\t\tfor ( var i = 0; i < scene.mNumLights; ++ i ) {\n\n\t\t\t\t\t\tscene.mLights[ i ] = new aiLight();\n\t\t\t\t\t\tReadBinaryLight( stream, scene.mLights[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// Read cameras\n\t\t\t\tif ( scene.mNumCameras ) {\n\n\t\t\t\t\tscene.mCameras = [];\n\n\t\t\t\t\tfor ( var i = 0; i < scene.mNumCameras; ++ i ) {\n\n\t\t\t\t\t\tscene.mCameras[ i ] = new aiCamera();\n\t\t\t\t\t\tReadBinaryCamera( stream, scene.mCameras[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tvar aiOrigin_CUR = 0;\n\t\t\tvar aiOrigin_BEG = 1;\n\n\t\t\tfunction extendStream( stream ) {\n\n\t\t\t\tstream.readOffset = 0;\n\t\t\t\tstream.Seek = function ( off, ori ) {\n\n\t\t\t\t\tif ( ori == aiOrigin_CUR ) {\n\n\t\t\t\t\t\tstream.readOffset += off;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ori == aiOrigin_BEG ) {\n\n\t\t\t\t\t\tstream.readOffset = off;\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tstream.ReadBytes = function ( buff, size, n ) {\n\n\t\t\t\t\tvar bytes = size * n;\n\t\t\t\t\tfor ( var i = 0; i < bytes; i ++ )\n\t\t\t\t\t\tbuff[ i ] = Read_uint8_t( this );\n\n\t\t\t\t};\n\n\t\t\t\tstream.subArray32 = function ( start, end ) {\n\n\t\t\t\t\tvar buff = this.buffer;\n\t\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\t\treturn new Float32Array( newbuff );\n\n\t\t\t\t};\n\n\t\t\t\tstream.subArrayUint16 = function ( start, end ) {\n\n\t\t\t\t\tvar buff = this.buffer;\n\t\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\t\treturn new Uint16Array( newbuff );\n\n\t\t\t\t};\n\n\t\t\t\tstream.subArrayUint8 = function ( start, end ) {\n\n\t\t\t\t\tvar buff = this.buffer;\n\t\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\t\treturn new Uint8Array( newbuff );\n\n\t\t\t\t};\n\n\t\t\t\tstream.subArrayUint32 = function ( start, end ) {\n\n\t\t\t\t\tvar buff = this.buffer;\n\t\t\t\t\tvar newbuff = buff.slice( start, end );\n\t\t\t\t\treturn new Uint32Array( newbuff );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar shortened, compressed;\n\n\t\t\tfunction InternReadFile( pFiledata ) {\n\n\t\t\t\tvar pScene = new aiScene();\n\t\t\t\tvar stream = new DataView( pFiledata );\n\t\t\t\textendStream( stream );\n\t\t\t\tstream.Seek( 44, aiOrigin_CUR ); // signature\n\t\t\t\t/*unsigned int versionMajor =*/\n\t\t\t\tpScene.versionMajor = Read_unsigned_int( stream );\n\t\t\t\t/*unsigned int versionMinor =*/\n\t\t\t\tpScene.versionMinor = Read_unsigned_int( stream );\n\t\t\t\t/*unsigned int versionRevision =*/\n\t\t\t\tpScene.versionRevision = Read_unsigned_int( stream );\n\t\t\t\t/*unsigned int compileFlags =*/\n\t\t\t\tpScene.compileFlags = Read_unsigned_int( stream );\n\t\t\t\tshortened = Read_uint16_t( stream ) > 0;\n\t\t\t\tcompressed = Read_uint16_t( stream ) > 0;\n\t\t\t\tif ( shortened )\n\t\t\t\t\tthrow \"Shortened binaries are not supported!\";\n\t\t\t\tstream.Seek( 256, aiOrigin_CUR ); // original filename\n\t\t\t\tstream.Seek( 128, aiOrigin_CUR ); // options\n\t\t\t\tstream.Seek( 64, aiOrigin_CUR ); // padding\n\t\t\t\tif ( compressed ) {\n\n\t\t\t\t\tvar uncompressedSize = Read_uint32_t( stream );\n\t\t\t\t\tvar compressedSize = stream.FileSize() - stream.Tell();\n\t\t\t\t\tvar compressedData = [];\n\t\t\t\t\tstream.Read( compressedData, 1, compressedSize );\n\t\t\t\t\tvar uncompressedData = [];\n\t\t\t\t\tuncompress( uncompressedData, uncompressedSize, compressedData, compressedSize );\n\t\t\t\t\tvar buff = new ArrayBuffer( uncompressedData );\n\t\t\t\t\tReadBinaryScene( buff, pScene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tReadBinaryScene( stream, pScene );\n\n\t\t\t\t}\n\n\t\t\t\treturn pScene.toTHREE();\n\n\t\t\t}\n\n\t\t\treturn InternReadFile( buffer );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.AssimpLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/TGALoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Daosheng Mu / https://github.com/DaoshengMu/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author takahirox / https://github.com/takahirox/\n\t */\n\n\tTHREE.TGALoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.TGALoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.TGALoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new THREE.Texture();\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttexture.image = scope.parse( buffer );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tparse: function ( buffer ) {\n\n\t\t\t// reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n\n\t\t\tfunction tgaCheckHeader( header ) {\n\n\t\t\t\tswitch ( header.image_type ) {\n\n\t\t\t\t\t// check indexed type\n\n\t\t\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\t\t\tif ( header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1 ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for indexed type.' );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// check colormap type\n\n\t\t\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\t\t\tif ( header.colormap_type ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for colormap type.' );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// What the need of a file without data ?\n\n\t\t\t\t\tcase TGA_TYPE_NO_DATA:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t\t\t\t\t// Invalid type ?\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type \"%s\".', header.image_type );\n\n\t\t\t\t}\n\n\t\t\t\t// check image width and height\n\n\t\t\t\tif ( header.width <= 0 || header.height <= 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid image size.' );\n\n\t\t\t\t}\n\n\t\t\t\t// check image pixel size\n\n\t\t\t\tif ( header.pixel_size !== 8 && header.pixel_size !== 16 &&\n\t\t\t\t\theader.pixel_size !== 24 && header.pixel_size !== 32 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// parse tga image buffer\n\n\t\t\tfunction tgaParse( use_rle, use_pal, header, offset, data ) {\n\n\t\t\t\tvar pixel_data,\n\t\t\t\t\tpixel_size,\n\t\t\t\t\tpixel_total,\n\t\t\t\t\tpalettes;\n\n\t\t\t\tpixel_size = header.pixel_size >> 3;\n\t\t\t\tpixel_total = header.width * header.height * pixel_size;\n\n\t\t\t\t // read palettes\n\n\t\t\t\t if ( use_pal ) {\n\n\t\t\t\t\t palettes = data.subarray( offset, offset += header.colormap_length * ( header.colormap_size >> 3 ) );\n\n\t\t\t\t }\n\n\t\t\t\t // read RLE\n\n\t\t\t\t if ( use_rle ) {\n\n\t\t\t\t\t pixel_data = new Uint8Array( pixel_total );\n\n\t\t\t\t\tvar c, count, i;\n\t\t\t\t\tvar shift = 0;\n\t\t\t\t\tvar pixels = new Uint8Array( pixel_size );\n\n\t\t\t\t\twhile ( shift < pixel_total ) {\n\n\t\t\t\t\t\tc = data[ offset ++ ];\n\t\t\t\t\t\tcount = ( c & 0x7f ) + 1;\n\n\t\t\t\t\t\t// RLE pixels\n\n\t\t\t\t\t\tif ( c & 0x80 ) {\n\n\t\t\t\t\t\t\t// bind pixel tmp array\n\n\t\t\t\t\t\t\tfor ( i = 0; i < pixel_size; ++ i ) {\n\n\t\t\t\t\t\t\t\tpixels[ i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// copy pixel array\n\n\t\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\t\tpixel_data.set( pixels, shift + i * pixel_size );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tshift += pixel_size * count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// raw pixels\n\n\t\t\t\t\t\t\tcount *= pixel_size;\n\t\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\t\tpixel_data[ shift + i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tshift += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t } else {\n\n\t\t\t\t\t// raw pixels\n\n\t\t\t\t\tpixel_data = data.subarray(\n\t\t\t\t\t\t offset, offset += ( use_pal ? header.width * header.height : pixel_total )\n\t\t\t\t\t);\n\n\t\t\t\t }\n\n\t\t\t\t return {\n\t\t\t\t\tpixel_data: pixel_data,\n\t\t\t\t\tpalettes: palettes\n\t\t\t\t };\n\n\t\t\t}\n\n\t\t\tfunction tgaGetImageData8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes ) {\n\n\t\t\t\tvar colormap = palettes;\n\t\t\t\tvar color, i = 0, x, y;\n\t\t\t\tvar width = header.width;\n\n\t\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = colormap[ ( color * 3 ) + 0 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = colormap[ ( color * 3 ) + 1 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = colormap[ ( color * 3 ) + 2 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn imageData;\n\n\t\t\t}\n\n\t\t\tfunction tgaGetImageData16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\t\tvar color, i = 0, x, y;\n\t\t\t\tvar width = header.width;\n\n\t\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\t\tcolor = image[ i + 0 ] + ( image[ i + 1 ] << 8 ); // Inversed ?\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = ( color & 0x7C00 ) >> 7;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = ( color & 0x03E0 ) >> 2;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = ( color & 0x001F ) >> 3;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = ( color & 0x8000 ) ? 0 : 255;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn imageData;\n\n\t\t\t}\n\n\t\t\tfunction tgaGetImageData24bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\t\tvar i = 0, x, y;\n\t\t\t\tvar width = header.width;\n\n\t\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 3 ) {\n\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn imageData;\n\n\t\t\t}\n\n\t\t\tfunction tgaGetImageData32bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\t\tvar i = 0, x, y;\n\t\t\t\tvar width = header.width;\n\n\t\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 4 ) {\n\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 3 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn imageData;\n\n\t\t\t}\n\n\t\t\tfunction tgaGetImageDataGrey8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\t\tvar color, i = 0, x, y;\n\t\t\t\tvar width = header.width;\n\n\t\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = color;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = color;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = color;\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn imageData;\n\n\t\t\t}\n\n\t\t\tfunction tgaGetImageDataGrey16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\t\tvar i = 0, x, y;\n\t\t\t\tvar width = header.width;\n\n\t\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 0 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 0 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn imageData;\n\n\t\t\t}\n\n\t\t\tfunction getTgaRGBA( data, width, height, image, palette ) {\n\n\t\t\t\tvar x_start,\n\t\t\t\t\ty_start,\n\t\t\t\t\tx_step,\n\t\t\t\t\ty_step,\n\t\t\t\t\tx_end,\n\t\t\t\t\ty_end;\n\n\t\t\t\tswitch ( ( header.flags & TGA_ORIGIN_MASK ) >> TGA_ORIGIN_SHIFT ) {\n\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase TGA_ORIGIN_UL:\n\t\t\t\t\t\tx_start = 0;\n\t\t\t\t\t\tx_step = 1;\n\t\t\t\t\t\tx_end = width;\n\t\t\t\t\t\ty_start = 0;\n\t\t\t\t\t\ty_step = 1;\n\t\t\t\t\t\ty_end = height;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TGA_ORIGIN_BL:\n\t\t\t\t\t\tx_start = 0;\n\t\t\t\t\t\tx_step = 1;\n\t\t\t\t\t\tx_end = width;\n\t\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\t\ty_step = - 1;\n\t\t\t\t\t\ty_end = - 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TGA_ORIGIN_UR:\n\t\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\t\tx_step = - 1;\n\t\t\t\t\t\tx_end = - 1;\n\t\t\t\t\t\ty_start = 0;\n\t\t\t\t\t\ty_step = 1;\n\t\t\t\t\t\ty_end = height;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TGA_ORIGIN_BR:\n\t\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\t\tx_step = - 1;\n\t\t\t\t\t\tx_end = - 1;\n\t\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\t\ty_step = - 1;\n\t\t\t\t\t\ty_end = - 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( use_grey ) {\n\n\t\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\ttgaGetImageDataGrey8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 16:\n\t\t\t\t\t\t\ttgaGetImageDataGrey16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\ttgaGetImageData8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 16:\n\t\t\t\t\t\t\ttgaGetImageData16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 24:\n\t\t\t\t\t\t\ttgaGetImageData24bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 32:\n\t\t\t\t\t\t\ttgaGetImageData32bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Load image data according to specific method\n\t\t\t\t// var func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n\t\t\t\t// func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\t// TGA constants\n\n\t\t\tvar TGA_TYPE_NO_DATA = 0,\n\t\t\t\tTGA_TYPE_INDEXED = 1,\n\t\t\t\tTGA_TYPE_RGB = 2,\n\t\t\t\tTGA_TYPE_GREY = 3,\n\t\t\t\tTGA_TYPE_RLE_INDEXED = 9,\n\t\t\t\tTGA_TYPE_RLE_RGB = 10,\n\t\t\t\tTGA_TYPE_RLE_GREY = 11,\n\n\t\t\t\tTGA_ORIGIN_MASK = 0x30,\n\t\t\t\tTGA_ORIGIN_SHIFT = 0x04,\n\t\t\t\tTGA_ORIGIN_BL = 0x00,\n\t\t\t\tTGA_ORIGIN_BR = 0x01,\n\t\t\t\tTGA_ORIGIN_UL = 0x02,\n\t\t\t\tTGA_ORIGIN_UR = 0x03;\n\n\t\t\tif ( buffer.length < 19 ) console.error( 'THREE.TGALoader: Not enough data to contain header.' );\n\n\t\t\tvar content = new Uint8Array( buffer ),\n\t\t\t\toffset = 0,\n\t\t\t\theader = {\n\t\t\t\t\tid_length: content[ offset ++ ],\n\t\t\t\t\tcolormap_type: content[ offset ++ ],\n\t\t\t\t\timage_type: content[ offset ++ ],\n\t\t\t\t\tcolormap_index: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\tcolormap_length: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\tcolormap_size: content[ offset ++ ],\n\t\t\t\t\torigin: [\n\t\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8\n\t\t\t\t\t],\n\t\t\t\t\twidth: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\theight: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\tpixel_size: content[ offset ++ ],\n\t\t\t\t\tflags: content[ offset ++ ]\n\t\t\t\t};\n\n\t\t\t// check tga if it is valid format\n\n\t\t\ttgaCheckHeader( header );\n\n\t\t\tif ( header.id_length + offset > buffer.length ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t\t}\n\n\t\t\t// skip the needn't data\n\n\t\t\toffset += header.id_length;\n\n\t\t\t// get targa information about RLE compression and palette\n\n\t\t\tvar use_rle = false,\n\t\t\t\tuse_pal = false,\n\t\t\t\tuse_grey = false;\n\n\t\t\tswitch ( header.image_type ) {\n\n\t\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\t\tuse_rle = true;\n\t\t\t\t\tuse_pal = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\t\tuse_pal = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\t\tuse_rle = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\t\tuse_rle = true;\n\t\t\t\t\tuse_grey = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\t\tuse_grey = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar useOffscreen = typeof OffscreenCanvas !== 'undefined';\n\n\t\t\tvar canvas = useOffscreen ? new OffscreenCanvas( header.width, header.height ) : document.createElement( 'canvas' );\n\t\t\tcanvas.width = header.width;\n\t\t\tcanvas.height = header.height;\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tvar imageData = context.createImageData( header.width, header.height );\n\n\t\t\tvar result = tgaParse( use_rle, use_pal, header, offset, content );\n\t\t\tvar rgbaData = getTgaRGBA( imageData.data, header.width, header.height, result.pixel_data, result.palettes );\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn useOffscreen ? canvas.transferToImageBitmap() : canvas;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.TGALoader;\n});\n\ndefine('skylark-threejs-ex/loaders/ColladaLoader',[\n\t\"skylark-threejs\",\n\t\"./TGALoader\"\n],function(THREE,TGALoader){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.ColladaLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.ColladaLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.ColladaLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( scope.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\toptions: {\n\n\t\t\tset convertUpAxis( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparse: function ( text, path ) {\n\n\t\t\tfunction getElementsByTagName( xml, name ) {\n\n\t\t\t\t// Non recursive xml.getElementsByTagName() ...\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar childNodes = xml.childNodes;\n\n\t\t\t\tfor ( var i = 0, l = childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeName === name ) {\n\n\t\t\t\t\t\tarray.push( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tfunction parseStrings( text ) {\n\n\t\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\t\tvar array = new Array( parts.length );\n\n\t\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = parts[ i ];\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tfunction parseFloats( text ) {\n\n\t\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\t\tvar array = new Array( parts.length );\n\n\t\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = parseFloat( parts[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tfunction parseInts( text ) {\n\n\t\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\t\tvar array = new Array( parts.length );\n\n\t\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = parseInt( parts[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tfunction parseId( text ) {\n\n\t\t\t\treturn text.substring( 1 );\n\n\t\t\t}\n\n\t\t\tfunction generateId() {\n\n\t\t\t\treturn 'three_default_' + ( count ++ );\n\n\t\t\t}\n\n\t\t\tfunction isEmpty( object ) {\n\n\t\t\t\treturn Object.keys( object ).length === 0;\n\n\t\t\t}\n\n\t\t\t// asset\n\n\t\t\tfunction parseAsset( xml ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tunit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),\n\t\t\t\t\tupAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction parseAssetUnit( xml ) {\n\n\t\t\t\tif ( ( xml !== undefined ) && ( xml.hasAttribute( 'meter' ) === true ) ) {\n\n\t\t\t\t\treturn parseFloat( xml.getAttribute( 'meter' ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn 1; // default 1 meter\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAssetUpAxis( xml ) {\n\n\t\t\t\treturn xml !== undefined ? xml.textContent : 'Y_UP';\n\n\t\t\t}\n\n\t\t\t// library\n\n\t\t\tfunction parseLibrary( xml, libraryName, nodeName, parser ) {\n\n\t\t\t\tvar library = getElementsByTagName( xml, libraryName )[ 0 ];\n\n\t\t\t\tif ( library !== undefined ) {\n\n\t\t\t\t\tvar elements = getElementsByTagName( library, nodeName );\n\n\t\t\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\t\tparser( elements[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction buildLibrary( data, builder ) {\n\n\t\t\t\tfor ( var name in data ) {\n\n\t\t\t\t\tvar object = data[ name ];\n\t\t\t\t\tobject.build = builder( data[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// get\n\n\t\t\tfunction getBuild( data, builder ) {\n\n\t\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\t\tdata.build = builder( data );\n\n\t\t\t\treturn data.build;\n\n\t\t\t}\n\n\t\t\t// animation\n\n\t\t\tfunction parseAnimation( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tsources: {},\n\t\t\t\t\tsamplers: {},\n\t\t\t\t\tchannels: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tvar id;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'source':\n\t\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'sampler':\n\t\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\t\tdata.samplers[ id ] = parseAnimationSampler( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'channel':\n\t\t\t\t\t\t\tid = child.getAttribute( 'target' );\n\t\t\t\t\t\t\tdata.channels[ id ] = parseAnimationChannel( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.animations[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseAnimationSampler( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tinputs: {},\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'input':\n\t\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseAnimationChannel( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tvar target = xml.getAttribute( 'target' );\n\n\t\t\t\t// parsing SID Addressing Syntax\n\n\t\t\t\tvar parts = target.split( '/' );\n\n\t\t\t\tvar id = parts.shift();\n\t\t\t\tvar sid = parts.shift();\n\n\t\t\t\t// check selection syntax\n\n\t\t\t\tvar arraySyntax = ( sid.indexOf( '(' ) !== - 1 );\n\t\t\t\tvar memberSyntax = ( sid.indexOf( '.' ) !== - 1 );\n\n\t\t\t\tif ( memberSyntax ) {\n\n\t\t\t\t\t//  member selection access\n\n\t\t\t\t\tparts = sid.split( '.' );\n\t\t\t\t\tsid = parts.shift();\n\t\t\t\t\tdata.member = parts.shift();\n\n\t\t\t\t} else if ( arraySyntax ) {\n\n\t\t\t\t\t// array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n\t\t\t\t\tvar indices = sid.split( '(' );\n\t\t\t\t\tsid = indices.shift();\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\t\t\tindices[ i ] = parseInt( indices[ i ].replace( /\\)/, '' ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.indices = indices;\n\n\t\t\t\t}\n\n\t\t\t\tdata.id = id;\n\t\t\t\tdata.sid = sid;\n\n\t\t\t\tdata.arraySyntax = arraySyntax;\n\t\t\t\tdata.memberSyntax = memberSyntax;\n\n\t\t\t\tdata.sampler = parseId( xml.getAttribute( 'source' ) );\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildAnimation( data ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tvar channels = data.channels;\n\t\t\t\tvar samplers = data.samplers;\n\t\t\t\tvar sources = data.sources;\n\n\t\t\t\tfor ( var target in channels ) {\n\n\t\t\t\t\tif ( channels.hasOwnProperty( target ) ) {\n\n\t\t\t\t\t\tvar channel = channels[ target ];\n\t\t\t\t\t\tvar sampler = samplers[ channel.sampler ];\n\n\t\t\t\t\t\tvar inputId = sampler.inputs.INPUT;\n\t\t\t\t\t\tvar outputId = sampler.inputs.OUTPUT;\n\n\t\t\t\t\t\tvar inputSource = sources[ inputId ];\n\t\t\t\t\t\tvar outputSource = sources[ outputId ];\n\n\t\t\t\t\t\tvar animation = buildAnimationChannel( channel, inputSource, outputSource );\n\n\t\t\t\t\t\tcreateKeyframeTracks( animation, tracks );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn tracks;\n\n\t\t\t}\n\n\t\t\tfunction getAnimation( id ) {\n\n\t\t\t\treturn getBuild( library.animations[ id ], buildAnimation );\n\n\t\t\t}\n\n\t\t\tfunction buildAnimationChannel( channel, inputSource, outputSource ) {\n\n\t\t\t\tvar node = library.nodes[ channel.id ];\n\t\t\t\tvar object3D = getNode( node.id );\n\n\t\t\t\tvar transform = node.transforms[ channel.sid ];\n\t\t\t\tvar defaultMatrix = node.matrix.clone().transpose();\n\n\t\t\t\tvar time, stride;\n\t\t\t\tvar i, il, j, jl;\n\n\t\t\t\tvar data = {};\n\n\t\t\t\t// the collada spec allows the animation of data in various ways.\n\t\t\t\t// depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n\t\t\t\tswitch ( transform ) {\n\n\t\t\t\t\tcase 'matrix':\n\n\t\t\t\t\t\tfor ( i = 0, il = inputSource.array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\ttime = inputSource.array[ i ];\n\t\t\t\t\t\t\tstride = i * outputSource.stride;\n\n\t\t\t\t\t\t\tif ( data[ time ] === undefined ) data[ time ] = {};\n\n\t\t\t\t\t\t\tif ( channel.arraySyntax === true ) {\n\n\t\t\t\t\t\t\t\tvar value = outputSource.array[ stride ];\n\t\t\t\t\t\t\t\tvar index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];\n\n\t\t\t\t\t\t\t\tdata[ time ][ index ] = value;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfor ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tdata[ time ][ j ] = outputSource.array[ stride + j ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar keyframes = prepareAnimationData( data, defaultMatrix );\n\n\t\t\t\tvar animation = {\n\t\t\t\t\tname: object3D.uuid,\n\t\t\t\t\tkeyframes: keyframes\n\t\t\t\t};\n\n\t\t\t\treturn animation;\n\n\t\t\t}\n\n\t\t\tfunction prepareAnimationData( data, defaultMatrix ) {\n\n\t\t\t\tvar keyframes = [];\n\n\t\t\t\t// transfer data into a sortable array\n\n\t\t\t\tfor ( var time in data ) {\n\n\t\t\t\t\tkeyframes.push( { time: parseFloat( time ), value: data[ time ] } );\n\n\t\t\t\t}\n\n\t\t\t\t// ensure keyframes are sorted by time\n\n\t\t\t\tkeyframes.sort( ascending );\n\n\t\t\t\t// now we clean up all animation data, so we can use them for keyframe tracks\n\n\t\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\t\ttransformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn keyframes;\n\n\t\t\t\t// array sort function\n\n\t\t\t\tfunction ascending( a, b ) {\n\n\t\t\t\t\treturn a.time - b.time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar scale = new THREE.Vector3();\n\t\t\tvar quaternion = new THREE.Quaternion();\n\n\t\t\tfunction createKeyframeTracks( animation, tracks ) {\n\n\t\t\t\tvar keyframes = animation.keyframes;\n\t\t\t\tvar name = animation.name;\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar positionData = [];\n\t\t\t\tvar quaternionData = [];\n\t\t\t\tvar scaleData = [];\n\n\t\t\t\tfor ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\t\tvar time = keyframe.time;\n\t\t\t\t\tvar value = keyframe.value;\n\n\t\t\t\t\tmatrix.fromArray( value ).transpose();\n\t\t\t\t\tmatrix.decompose( position, quaternion, scale );\n\n\t\t\t\t\ttimes.push( time );\n\t\t\t\t\tpositionData.push( position.x, position.y, position.z );\n\t\t\t\t\tquaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );\n\t\t\t\t\tscaleData.push( scale.x, scale.y, scale.z );\n\n\t\t\t\t}\n\n\t\t\t\tif ( positionData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.position', times, positionData ) );\n\t\t\t\tif ( quaternionData.length > 0 ) tracks.push( new THREE.QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );\n\t\t\t\tif ( scaleData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.scale', times, scaleData ) );\n\n\t\t\t\treturn tracks;\n\n\t\t\t}\n\n\t\t\tfunction transformAnimationData( keyframes, property, defaultValue ) {\n\n\t\t\t\tvar keyframe;\n\n\t\t\t\tvar empty = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\t// check, if values of a property are missing in our keyframes\n\n\t\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\t\tif ( keyframe.value[ property ] === undefined ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = null; // mark as missing\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tempty = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( empty === true ) {\n\n\t\t\t\t\t// no values at all, so we set a default value\n\n\t\t\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\t\t\tkeyframe.value[ property ] = defaultValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// filling gaps\n\n\t\t\t\t\tcreateMissingKeyframes( keyframes, property );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction createMissingKeyframes( keyframes, property ) {\n\n\t\t\t\tvar prev, next;\n\n\t\t\t\tfor ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\t\tif ( keyframe.value[ property ] === null ) {\n\n\t\t\t\t\t\tprev = getPrev( keyframes, i, property );\n\t\t\t\t\t\tnext = getNext( keyframes, i, property );\n\n\t\t\t\t\t\tif ( prev === null ) {\n\n\t\t\t\t\t\t\tkeyframe.value[ property ] = next.value[ property ];\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( next === null ) {\n\n\t\t\t\t\t\t\tkeyframe.value[ property ] = prev.value[ property ];\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinterpolate( keyframe, prev, next, property );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction getPrev( keyframes, i, property ) {\n\n\t\t\t\twhile ( i >= 0 ) {\n\n\t\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\t\ti --;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tfunction getNext( keyframes, i, property ) {\n\n\t\t\t\twhile ( i < keyframes.length ) {\n\n\t\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\t\ti ++;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tfunction interpolate( key, prev, next, property ) {\n\n\t\t\t\tif ( ( next.time - prev.time ) === 0 ) {\n\n\t\t\t\t\tkey.value[ property ] = prev.value[ property ];\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tkey.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];\n\n\t\t\t}\n\n\t\t\t// animation clips\n\n\t\t\tfunction parseAnimationClip( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'id' ) || 'default',\n\t\t\t\t\tstart: parseFloat( xml.getAttribute( 'start' ) || 0 ),\n\t\t\t\t\tend: parseFloat( xml.getAttribute( 'end' ) || 0 ),\n\t\t\t\t\tanimations: []\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'instance_animation':\n\t\t\t\t\t\t\tdata.animations.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.clips[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction buildAnimationClip( data ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tvar name = data.name;\n\t\t\t\tvar duration = ( data.end - data.start ) || - 1;\n\t\t\t\tvar animations = data.animations;\n\n\t\t\t\tfor ( var i = 0, il = animations.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar animationTracks = getAnimation( animations[ i ] );\n\n\t\t\t\t\tfor ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\ttracks.push( animationTracks[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new THREE.AnimationClip( name, duration, tracks );\n\n\t\t\t}\n\n\t\t\tfunction getAnimationClip( id ) {\n\n\t\t\t\treturn getBuild( library.clips[ id ], buildAnimationClip );\n\n\t\t\t}\n\n\t\t\t// controller\n\n\t\t\tfunction parseController( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'skin':\n\t\t\t\t\t\t\t// there is exactly one skin per controller\n\t\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\t\tdata.skin = parseSkin( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'morph':\n\t\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.controllers[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tsources: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'bind_shape_matrix':\n\t\t\t\t\t\t\tdata.bindShapeMatrix = parseFloats( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'source':\n\t\t\t\t\t\t\tvar id = child.getAttribute( 'id' );\n\t\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'joints':\n\t\t\t\t\t\t\tdata.joints = parseJoints( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'vertex_weights':\n\t\t\t\t\t\t\tdata.vertexWeights = parseVertexWeights( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseJoints( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tinputs: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'input':\n\t\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseVertexWeights( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tinputs: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'input':\n\t\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\t\tvar offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\t\tdata.inputs[ semantic ] = { id: id, offset: offset };\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\t\tdata.vcount = parseInts( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tdata.v = parseInts( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildController( data ) {\n\n\t\t\t\tvar build = {\n\t\t\t\t\tid: data.id\n\t\t\t\t};\n\n\t\t\t\tvar geometry = library.geometries[ build.id ];\n\n\t\t\t\tif ( data.skin !== undefined ) {\n\n\t\t\t\t\tbuild.skin = buildSkin( data.skin );\n\n\t\t\t\t\t// we enhance the 'sources' property of the corresponding geometry with our skin data\n\n\t\t\t\t\tgeometry.sources.skinIndices = build.skin.indices;\n\t\t\t\t\tgeometry.sources.skinWeights = build.skin.weights;\n\n\t\t\t\t}\n\n\t\t\t\treturn build;\n\n\t\t\t}\n\n\t\t\tfunction buildSkin( data ) {\n\n\t\t\t\tvar BONE_LIMIT = 4;\n\n\t\t\t\tvar build = {\n\t\t\t\t\tjoints: [], // this must be an array to preserve the joint order\n\t\t\t\t\tindices: {\n\t\t\t\t\t\tarray: [],\n\t\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t\t},\n\t\t\t\t\tweights: {\n\t\t\t\t\t\tarray: [],\n\t\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar sources = data.sources;\n\t\t\t\tvar vertexWeights = data.vertexWeights;\n\n\t\t\t\tvar vcount = vertexWeights.vcount;\n\t\t\t\tvar v = vertexWeights.v;\n\t\t\t\tvar jointOffset = vertexWeights.inputs.JOINT.offset;\n\t\t\t\tvar weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n\t\t\t\tvar jointSource = data.sources[ data.joints.inputs.JOINT ];\n\t\t\t\tvar inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];\n\n\t\t\t\tvar weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;\n\t\t\t\tvar stride = 0;\n\n\t\t\t\tvar i, j, l;\n\n\t\t\t\t// procces skin data for each vertex\n\n\t\t\t\tfor ( i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex\n\t\t\t\t\tvar vertexSkinData = [];\n\n\t\t\t\t\tfor ( j = 0; j < jointCount; j ++ ) {\n\n\t\t\t\t\t\tvar skinIndex = v[ stride + jointOffset ];\n\t\t\t\t\t\tvar weightId = v[ stride + weightOffset ];\n\t\t\t\t\t\tvar skinWeight = weights[ weightId ];\n\n\t\t\t\t\t\tvertexSkinData.push( { index: skinIndex, weight: skinWeight } );\n\n\t\t\t\t\t\tstride += 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// we sort the joints in descending order based on the weights.\n\t\t\t\t\t// this ensures, we only procced the most important joints of the vertex\n\n\t\t\t\t\tvertexSkinData.sort( descending );\n\n\t\t\t\t\t// now we provide for each vertex a set of four index and weight values.\n\t\t\t\t\t// the order of the skin data matches the order of vertices\n\n\t\t\t\t\tfor ( j = 0; j < BONE_LIMIT; j ++ ) {\n\n\t\t\t\t\t\tvar d = vertexSkinData[ j ];\n\n\t\t\t\t\t\tif ( d !== undefined ) {\n\n\t\t\t\t\t\t\tbuild.indices.array.push( d.index );\n\t\t\t\t\t\t\tbuild.weights.array.push( d.weight );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbuild.indices.array.push( 0 );\n\t\t\t\t\t\t\tbuild.weights.array.push( 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// setup bind matrix\n\n\t\t\t\tif ( data.bindShapeMatrix ) {\n\n\t\t\t\t\tbuild.bindMatrix = new THREE.Matrix4().fromArray( data.bindShapeMatrix ).transpose();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuild.bindMatrix = new THREE.Matrix4().identity();\n\n\t\t\t\t}\n\n\t\t\t\t// process bones and inverse bind matrix data\n\n\t\t\t\tfor ( i = 0, l = jointSource.array.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar name = jointSource.array[ i ];\n\t\t\t\t\tvar boneInverse = new THREE.Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();\n\n\t\t\t\t\tbuild.joints.push( { name: name, boneInverse: boneInverse } );\n\n\t\t\t\t}\n\n\t\t\t\treturn build;\n\n\t\t\t\t// array sort function\n\n\t\t\t\tfunction descending( a, b ) {\n\n\t\t\t\t\treturn b.weight - a.weight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction getController( id ) {\n\n\t\t\t\treturn getBuild( library.controllers[ id ], buildController );\n\n\t\t\t}\n\n\t\t\t// image\n\n\t\t\tfunction parseImage( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tinit_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent\n\t\t\t\t};\n\n\t\t\t\tlibrary.images[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction buildImage( data ) {\n\n\t\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\t\treturn data.init_from;\n\n\t\t\t}\n\n\t\t\tfunction getImage( id ) {\n\n\t\t\t\tvar data = library.images[ id ];\n\n\t\t\t\tif ( data !== undefined ) {\n\n\t\t\t\t\treturn getBuild( data, buildImage );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find image with ID:', id );\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// effect\n\n\t\t\tfunction parseEffect( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'profile_COMMON':\n\t\t\t\t\t\t\tdata.profile = parseEffectProfileCOMMON( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.effects[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectProfileCOMMON( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tsurfaces: {},\n\t\t\t\t\tsamplers: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'newparam':\n\t\t\t\t\t\t\tparseEffectNewparam( child, data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\t\tdata.technique = parseEffectTechnique( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\t\tdata.extra = parseEffectExtra( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectNewparam( xml, data ) {\n\n\t\t\t\tvar sid = xml.getAttribute( 'sid' );\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'surface':\n\t\t\t\t\t\t\tdata.surfaces[ sid ] = parseEffectSurface( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'sampler2D':\n\t\t\t\t\t\t\tdata.samplers[ sid ] = parseEffectSampler( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseEffectSurface( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'init_from':\n\t\t\t\t\t\t\tdata.init_from = child.textContent;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectSampler( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'source':\n\t\t\t\t\t\t\tdata.source = child.textContent;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectTechnique( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'constant':\n\t\t\t\t\t\tcase 'lambert':\n\t\t\t\t\t\tcase 'blinn':\n\t\t\t\t\t\tcase 'phong':\n\t\t\t\t\t\t\tdata.type = child.nodeName;\n\t\t\t\t\t\t\tdata.parameters = parseEffectParameters( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectParameters( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'emission':\n\t\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\tcase 'specular':\n\t\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\tcase 'ambient':\n\t\t\t\t\t\tcase 'shininess':\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = parseEffectParameter( child );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = {\n\t\t\t\t\t\t\t\topaque: child.getAttribute( 'opaque' ),\n\t\t\t\t\t\t\t\tdata: parseEffectParameter( child )\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectParameter( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'color':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = parseFloats( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectParameterTexture( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\ttechnique: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\t\tparseEffectParameterTextureExtra( child, data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectParameterTextureExtra( xml, data ) {\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\t\tparseEffectParameterTextureExtraTechnique( child, data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseEffectParameterTextureExtraTechnique( xml, data ) {\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'repeatU':\n\t\t\t\t\t\tcase 'repeatV':\n\t\t\t\t\t\tcase 'offsetU':\n\t\t\t\t\t\tcase 'offsetV':\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'wrapU':\n\t\t\t\t\t\tcase 'wrapV':\n\n\t\t\t\t\t\t\t// some files have values for wrapU/wrapV which become NaN via parseInt\n\n\t\t\t\t\t\t\tif ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n\t\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 1;\n\n\t\t\t\t\t\t\t} else if ( child.textContent.toUpperCase() === 'FALSE' ) {\n\n\t\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 0;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseInt( child.textContent );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseEffectExtra( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\t\tdata.technique = parseEffectExtraTechnique( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseEffectExtraTechnique( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'double_sided':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = parseInt( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildEffect( data ) {\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction getEffect( id ) {\n\n\t\t\t\treturn getBuild( library.effects[ id ], buildEffect );\n\n\t\t\t}\n\n\t\t\t// material\n\n\t\t\tfunction parseMaterial( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'instance_effect':\n\t\t\t\t\t\t\tdata.url = parseId( child.getAttribute( 'url' ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.materials[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction getTextureLoader( image ) {\n\n\t\t\t\tvar loader;\n\n\t\t\t\tvar extension = image.slice( ( image.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ); // http://www.jstips.co/en/javascript/get-file-extension/\n\t\t\t\textension = extension.toLowerCase();\n\n\t\t\t\tswitch ( extension ) {\n\n\t\t\t\t\tcase 'tga':\n\t\t\t\t\t\tloader = tgaLoader;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tloader = textureLoader;\n\n\t\t\t\t}\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t\tfunction buildMaterial( data ) {\n\n\t\t\t\tvar effect = getEffect( data.url );\n\t\t\t\tvar technique = effect.profile.technique;\n\t\t\t\tvar extra = effect.profile.extra;\n\n\t\t\t\tvar material;\n\n\t\t\t\tswitch ( technique.type ) {\n\n\t\t\t\t\tcase 'phong':\n\t\t\t\t\tcase 'blinn':\n\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'lambert':\n\t\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial = new THREE.MeshBasicMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.name = data.name || '';\n\n\t\t\t\tfunction getTexture( textureObject ) {\n\n\t\t\t\t\tvar sampler = effect.profile.samplers[ textureObject.id ];\n\t\t\t\t\tvar image = null;\n\n\t\t\t\t\t// get image\n\n\t\t\t\t\tif ( sampler !== undefined ) {\n\n\t\t\t\t\t\tvar surface = effect.profile.surfaces[ sampler.source ];\n\t\t\t\t\t\timage = getImage( surface.init_from );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );\n\t\t\t\t\t\timage = getImage( textureObject.id );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create texture if image is avaiable\n\n\t\t\t\t\tif ( image !== null ) {\n\n\t\t\t\t\t\tvar loader = getTextureLoader( image );\n\n\t\t\t\t\t\tif ( loader !== undefined ) {\n\n\t\t\t\t\t\t\tvar texture = loader.load( image );\n\n\t\t\t\t\t\t\tvar extra = textureObject.extra;\n\n\t\t\t\t\t\t\tif ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {\n\n\t\t\t\t\t\t\t\tvar technique = extra.technique;\n\n\t\t\t\t\t\t\t\ttexture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\t\t\t\t\t\ttexture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\t\t\t\t\t\ttexture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );\n\t\t\t\t\t\t\t\ttexture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\ttexture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\t\t\ttexture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Loader for texture %s not found.', image );\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id );\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar parameters = technique.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tvar parameter = parameters[ key ];\n\n\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\t\tif ( parameter.color ) material.color.fromArray( parameter.color );\n\t\t\t\t\t\t\tif ( parameter.texture ) material.map = getTexture( parameter.texture );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specular':\n\t\t\t\t\t\t\tif ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );\n\t\t\t\t\t\t\tif ( parameter.texture ) material.specularMap = getTexture( parameter.texture );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\t\tif ( parameter.texture ) material.normalMap = getTexture( parameter.texture );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'ambient':\n\t\t\t\t\t\t\tif ( parameter.texture ) material.lightMap = getTexture( parameter.texture );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shininess':\n\t\t\t\t\t\t\tif ( parameter.float && material.shininess ) material.shininess = parameter.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'emission':\n\t\t\t\t\t\t\tif ( parameter.color && material.emissive ) material.emissive.fromArray( parameter.color );\n\t\t\t\t\t\t\tif ( parameter.texture ) material.emissiveMap = getTexture( parameter.texture );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar transparent = parameters[ 'transparent' ];\n\t\t\t\tvar transparency = parameters[ 'transparency' ];\n\n\t\t\t\t// <transparency> does not exist but <transparent>\n\n\t\t\t\tif ( transparency === undefined && transparent ) {\n\n\t\t\t\t\ttransparency = {\n\t\t\t\t\t\tfloat: 1\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\t// <transparent> does not exist but <transparency>\n\n\t\t\t\tif ( transparent === undefined && transparency ) {\n\n\t\t\t\t\ttransparent = {\n\t\t\t\t\t\topaque: 'A_ONE',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tcolor: [ 1, 1, 1, 1 ]\n\t\t\t\t\t\t} };\n\n\t\t\t\t}\n\n\t\t\t\tif ( transparent && transparency ) {\n\n\t\t\t\t\t// handle case if a texture exists but no color\n\n\t\t\t\t\tif ( transparent.data.texture ) {\n\n\t\t\t\t\t\t// we do not set an alpha map (see #13792)\n\n\t\t\t\t\t\tmaterial.transparent = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar color = transparent.data.color;\n\n\t\t\t\t\t\tswitch ( transparent.opaque ) {\n\n\t\t\t\t\t\t\tcase 'A_ONE':\n\t\t\t\t\t\t\t\tmaterial.opacity = color[ 3 ] * transparency.float;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'RGB_ZERO':\n\t\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 0 ] * transparency.float );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'A_ZERO':\n\t\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 3 ] * transparency.float );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'RGB_ONE':\n\t\t\t\t\t\t\t\tmaterial.opacity = color[ 0 ] * transparency.float;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material.opacity < 1 ) material.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {\n\n\t\t\t\t\tmaterial.side = THREE.DoubleSide;\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( id ) {\n\n\t\t\t\treturn getBuild( library.materials[ id ], buildMaterial );\n\n\t\t\t}\n\n\t\t\t// camera\n\n\t\t\tfunction parseCamera( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'optics':\n\t\t\t\t\t\t\tdata.optics = parseCameraOptics( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.cameras[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseCameraOptics( xml ) {\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\t\treturn parseCameraTechnique( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {};\n\n\t\t\t}\n\n\t\t\tfunction parseCameraTechnique( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'perspective':\n\t\t\t\t\t\tcase 'orthographic':\n\n\t\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\t\tdata.parameters = parseCameraParameters( child );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseCameraParameters( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'xfov':\n\t\t\t\t\t\tcase 'yfov':\n\t\t\t\t\t\tcase 'xmag':\n\t\t\t\t\t\tcase 'ymag':\n\t\t\t\t\t\tcase 'znear':\n\t\t\t\t\t\tcase 'zfar':\n\t\t\t\t\t\tcase 'aspect_ratio':\n\t\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildCamera( data ) {\n\n\t\t\t\tvar camera;\n\n\t\t\t\tswitch ( data.optics.technique ) {\n\n\t\t\t\t\tcase 'perspective':\n\t\t\t\t\t\tcamera = new THREE.PerspectiveCamera(\n\t\t\t\t\t\t\tdata.optics.parameters.yfov,\n\t\t\t\t\t\t\tdata.optics.parameters.aspect_ratio,\n\t\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'orthographic':\n\t\t\t\t\t\tvar ymag = data.optics.parameters.ymag;\n\t\t\t\t\t\tvar xmag = data.optics.parameters.xmag;\n\t\t\t\t\t\tvar aspectRatio = data.optics.parameters.aspect_ratio;\n\n\t\t\t\t\t\txmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;\n\t\t\t\t\t\tymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;\n\n\t\t\t\t\t\txmag *= 0.5;\n\t\t\t\t\t\tymag *= 0.5;\n\n\t\t\t\t\t\tcamera = new THREE.OrthographicCamera(\n\t\t\t\t\t\t\t- xmag, xmag, ymag, - ymag, // left, right, top, bottom\n\t\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcamera = new THREE.PerspectiveCamera();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tcamera.name = data.name || '';\n\n\t\t\t\treturn camera;\n\n\t\t\t}\n\n\t\t\tfunction getCamera( id ) {\n\n\t\t\t\tvar data = library.cameras[ id ];\n\n\t\t\t\tif ( data !== undefined ) {\n\n\t\t\t\t\treturn getBuild( data, buildCamera );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find camera with ID:', id );\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// light\n\n\t\t\tfunction parseLight( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\t\tdata = parseLightTechnique( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.lights[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseLightTechnique( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'directional':\n\t\t\t\t\t\tcase 'point':\n\t\t\t\t\t\tcase 'spot':\n\t\t\t\t\t\tcase 'ambient':\n\n\t\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\t\tdata.parameters = parseLightParameters( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseLightParameters( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'color':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tdata.color = new THREE.Color().fromArray( array );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'falloff_angle':\n\t\t\t\t\t\t\tdata.falloffAngle = parseFloat( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'quadratic_attenuation':\n\t\t\t\t\t\t\tvar f = parseFloat( child.textContent );\n\t\t\t\t\t\t\tdata.distance = f ? Math.sqrt( 1 / f ) : 0;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildLight( data ) {\n\n\t\t\t\tvar light;\n\n\t\t\t\tswitch ( data.technique ) {\n\n\t\t\t\t\tcase 'directional':\n\t\t\t\t\t\tlight = new THREE.DirectionalLight();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'point':\n\t\t\t\t\t\tlight = new THREE.PointLight();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'spot':\n\t\t\t\t\t\tlight = new THREE.SpotLight();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\t\tlight = new THREE.AmbientLight();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.parameters.color ) light.color.copy( data.parameters.color );\n\t\t\t\tif ( data.parameters.distance ) light.distance = data.parameters.distance;\n\n\t\t\t\treturn light;\n\n\t\t\t}\n\n\t\t\tfunction getLight( id ) {\n\n\t\t\t\tvar data = library.lights[ id ];\n\n\t\t\t\tif ( data !== undefined ) {\n\n\t\t\t\t\treturn getBuild( data, buildLight );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find light with ID:', id );\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// geometry\n\n\t\t\tfunction parseGeometry( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\t\tsources: {},\n\t\t\t\t\tvertices: {},\n\t\t\t\t\tprimitives: []\n\t\t\t\t};\n\n\t\t\t\tvar mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];\n\n\t\t\t\t// the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\t\t\t\tif ( mesh === undefined ) return;\n\n\t\t\t\tfor ( var i = 0; i < mesh.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = mesh.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tvar id = child.getAttribute( 'id' );\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'source':\n\t\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'vertices':\n\t\t\t\t\t\t\t// data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n\t\t\t\t\t\t\tdata.vertices = parseGeometryVertices( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'polygons':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'lines':\n\t\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tcase 'polylist':\n\t\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\t\tdata.primitives.push( parseGeometryPrimitive( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.geometries[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseSource( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: 3\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'float_array':\n\t\t\t\t\t\t\tdata.array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Name_array':\n\t\t\t\t\t\t\tdata.array = parseStrings( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\t\tvar accessor = getElementsByTagName( child, 'accessor' )[ 0 ];\n\n\t\t\t\t\t\t\tif ( accessor !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.stride = parseInt( accessor.getAttribute( 'stride' ) );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseGeometryVertices( xml ) {\n\n\t\t\t\tvar data = {};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tdata[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseGeometryPrimitive( xml ) {\n\n\t\t\t\tvar primitive = {\n\t\t\t\t\ttype: xml.nodeName,\n\t\t\t\t\tmaterial: xml.getAttribute( 'material' ),\n\t\t\t\t\tcount: parseInt( xml.getAttribute( 'count' ) ),\n\t\t\t\t\tinputs: {},\n\t\t\t\t\tstride: 0,\n\t\t\t\t\thasUV: false\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'input':\n\t\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\t\tvar offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\t\tvar set = parseInt( child.getAttribute( 'set' ) );\n\t\t\t\t\t\t\tvar inputname = ( set > 0 ? semantic + set : semantic );\n\t\t\t\t\t\t\tprimitive.inputs[ inputname ] = { id: id, offset: offset };\n\t\t\t\t\t\t\tprimitive.stride = Math.max( primitive.stride, offset + 1 );\n\t\t\t\t\t\t\tif ( semantic === 'TEXCOORD' ) primitive.hasUV = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\t\tprimitive.vcount = parseInts( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'p':\n\t\t\t\t\t\t\tprimitive.p = parseInts( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn primitive;\n\n\t\t\t}\n\n\t\t\tfunction groupPrimitives( primitives ) {\n\n\t\t\t\tvar build = {};\n\n\t\t\t\tfor ( var i = 0; i < primitives.length; i ++ ) {\n\n\t\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t\tif ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];\n\n\t\t\t\t\tbuild[ primitive.type ].push( primitive );\n\n\t\t\t\t}\n\n\t\t\t\treturn build;\n\n\t\t\t}\n\n\t\t\tfunction checkUVCoordinates( primitives ) {\n\n\t\t\t\tvar count = 0;\n\n\t\t\t\tfor ( var i = 0, l = primitives.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t\tif ( primitive.hasUV === true ) {\n\n\t\t\t\t\t\tcount ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( count > 0 && count < primitives.length ) {\n\n\t\t\t\t\tprimitives.uvsNeedsFix = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction buildGeometry( data ) {\n\n\t\t\t\tvar build = {};\n\n\t\t\t\tvar sources = data.sources;\n\t\t\t\tvar vertices = data.vertices;\n\t\t\t\tvar primitives = data.primitives;\n\n\t\t\t\tif ( primitives.length === 0 ) return {};\n\n\t\t\t\t// our goal is to create one buffer geometry for a single type of primitives\n\t\t\t\t// first, we group all primitives by their type\n\n\t\t\t\tvar groupedPrimitives = groupPrimitives( primitives );\n\n\t\t\t\tfor ( var type in groupedPrimitives ) {\n\n\t\t\t\t\tvar primitiveType = groupedPrimitives[ type ];\n\n\t\t\t\t\t// second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n\t\t\t\t\tcheckUVCoordinates( primitiveType );\n\n\t\t\t\t\t// third, create a buffer geometry for each type of primitives\n\n\t\t\t\t\tbuild[ type ] = buildGeometryType( primitiveType, sources, vertices );\n\n\t\t\t\t}\n\n\t\t\t\treturn build;\n\n\t\t\t}\n\n\t\t\tfunction buildGeometryType( primitives, sources, vertices ) {\n\n\t\t\t\tvar build = {};\n\n\t\t\t\tvar position = { array: [], stride: 0 };\n\t\t\t\tvar normal = { array: [], stride: 0 };\n\t\t\t\tvar uv = { array: [], stride: 0 };\n\t\t\t\tvar uv2 = { array: [], stride: 0 };\n\t\t\t\tvar color = { array: [], stride: 0 };\n\n\t\t\t\tvar skinIndex = { array: [], stride: 4 };\n\t\t\t\tvar skinWeight = { array: [], stride: 4 };\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar materialKeys = [];\n\n\t\t\t\tvar start = 0;\n\n\t\t\t\tfor ( var p = 0; p < primitives.length; p ++ ) {\n\n\t\t\t\t\tvar primitive = primitives[ p ];\n\t\t\t\t\tvar inputs = primitive.inputs;\n\n\t\t\t\t\t// groups\n\n\t\t\t\t\tvar count = 0;\n\n\t\t\t\t\tswitch ( primitive.type ) {\n\n\t\t\t\t\t\tcase 'lines':\n\t\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\t\tcount = primitive.count * 2;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\t\tcount = primitive.count * 3;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'polylist':\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < primitive.count; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar vc = primitive.vcount[ g ];\n\n\t\t\t\t\t\t\t\tswitch ( vc ) {\n\n\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\tcount += 3; // single triangle\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t\tcount += 6; // quad, subdivided into two triangles\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tcount += ( vc - 2 ) * 3; // polylist with more than four vertices\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknow primitive type:', primitive.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addGroup( start, count, p );\n\t\t\t\t\tstart += count;\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tif ( primitive.material ) {\n\n\t\t\t\t\t\tmaterialKeys.push( primitive.material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// geometry data\n\n\t\t\t\t\tfor ( var name in inputs ) {\n\n\t\t\t\t\t\tvar input = inputs[ name ];\n\n\t\t\t\t\t\tswitch ( name )\t{\n\n\t\t\t\t\t\t\tcase 'VERTEX':\n\t\t\t\t\t\t\t\tfor ( var key in vertices ) {\n\n\t\t\t\t\t\t\t\t\tvar id = vertices[ key ];\n\n\t\t\t\t\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'POSITION':\n\t\t\t\t\t\t\t\t\t\t\tvar prevLength = position.array.length;\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, position.array );\n\t\t\t\t\t\t\t\t\t\t\tposition.stride = sources[ id ].stride;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( sources.skinWeights && sources.skinIndices ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );\n\t\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// see #3803\n\n\t\t\t\t\t\t\t\t\t\t\tif ( primitive.hasUV === false && primitives.uvsNeedsFix === true ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tvar count = ( position.array.length - prevLength ) / position.stride;\n\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t// fill missing uv coordinates\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tuv.array.push( 0, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, normal.array );\n\t\t\t\t\t\t\t\t\t\t\tnormal.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, color.array );\n\t\t\t\t\t\t\t\t\t\t\tcolor.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv.array );\n\t\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv2.array );\n\t\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );\n\t\t\t\t\t\t\t\tnormal.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, color.array );\n\t\t\t\t\t\t\t\tcolor.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );\n\t\t\t\t\t\t\t\tuv.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv2.array );\n\t\t\t\t\t\t\t\tuv2.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// build geometry\n\n\t\t\t\tif ( position.array.length > 0 ) geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( position.array, position.stride ) );\n\t\t\t\tif ( normal.array.length > 0 ) geometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normal.array, normal.stride ) );\n\t\t\t\tif ( color.array.length > 0 ) geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( color.array, color.stride ) );\n\t\t\t\tif ( uv.array.length > 0 ) geometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uv.array, uv.stride ) );\n\t\t\t\tif ( uv2.array.length > 0 ) geometry.setAttribute( 'uv2', new THREE.Float32BufferAttribute( uv2.array, uv2.stride ) );\n\n\t\t\t\tif ( skinIndex.array.length > 0 ) geometry.setAttribute( 'skinIndex', new THREE.Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );\n\t\t\t\tif ( skinWeight.array.length > 0 ) geometry.setAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );\n\n\t\t\t\tbuild.data = geometry;\n\t\t\t\tbuild.type = primitives[ 0 ].type;\n\t\t\t\tbuild.materialKeys = materialKeys;\n\n\t\t\t\treturn build;\n\n\t\t\t}\n\n\t\t\tfunction buildGeometryData( primitive, source, offset, array ) {\n\n\t\t\t\tvar indices = primitive.p;\n\t\t\t\tvar stride = primitive.stride;\n\t\t\t\tvar vcount = primitive.vcount;\n\n\t\t\t\tfunction pushVector( i ) {\n\n\t\t\t\t\tvar index = indices[ i + offset ] * sourceStride;\n\t\t\t\t\tvar length = index + sourceStride;\n\n\t\t\t\t\tfor ( ; index < length; index ++ ) {\n\n\t\t\t\t\t\tarray.push( sourceArray[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar sourceArray = source.array;\n\t\t\t\tvar sourceStride = source.stride;\n\n\t\t\t\tif ( primitive.vcount !== undefined ) {\n\n\t\t\t\t\tvar index = 0;\n\n\t\t\t\t\tfor ( var i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar count = vcount[ i ];\n\n\t\t\t\t\t\tif ( count === 4 ) {\n\n\t\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\t\tvar b = index + stride * 1;\n\t\t\t\t\t\t\tvar c = index + stride * 2;\n\t\t\t\t\t\t\tvar d = index + stride * 3;\n\n\t\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( d );\n\t\t\t\t\t\t\tpushVector( b ); pushVector( c ); pushVector( d );\n\n\t\t\t\t\t\t} else if ( count === 3 ) {\n\n\t\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\t\tvar b = index + stride * 1;\n\t\t\t\t\t\t\tvar c = index + stride * 2;\n\n\t\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t\t} else if ( count > 4 ) {\n\n\t\t\t\t\t\t\tfor ( var k = 1, kl = ( count - 2 ); k <= kl; k ++ ) {\n\n\t\t\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\t\t\tvar b = index + stride * k;\n\t\t\t\t\t\t\t\tvar c = index + stride * ( k + 1 );\n\n\t\t\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex += stride * count;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += stride ) {\n\n\t\t\t\t\t\tpushVector( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction getGeometry( id ) {\n\n\t\t\t\treturn getBuild( library.geometries[ id ], buildGeometry );\n\n\t\t\t}\n\n\t\t\t// kinematics\n\n\t\t\tfunction parseKinematicsModel( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\t\tjoints: {},\n\t\t\t\t\tlinks: []\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\t\tparseKinematicsTechniqueCommon( child, data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction buildKinematicsModel( data ) {\n\n\t\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction getKinematicsModel( id ) {\n\n\t\t\t\treturn getBuild( library.kinematicsModels[ id ], buildKinematicsModel );\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsTechniqueCommon( xml, data ) {\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'joint':\n\t\t\t\t\t\t\tdata.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'link':\n\t\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsJoint( xml ) {\n\n\t\t\t\tvar data;\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\t\tdata = parseKinematicsJointParameter( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsJointParameter( xml, data ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\t\taxis: new THREE.Vector3(),\n\t\t\t\t\tlimits: {\n\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\tmax: 0\n\t\t\t\t\t},\n\t\t\t\t\ttype: xml.nodeName,\n\t\t\t\t\tstatic: false,\n\t\t\t\t\tzeroPosition: 0,\n\t\t\t\t\tmiddlePosition: 0\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tdata.axis.fromArray( array );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'limits':\n\t\t\t\t\t\t\tvar max = child.getElementsByTagName( 'max' )[ 0 ];\n\t\t\t\t\t\t\tvar min = child.getElementsByTagName( 'min' )[ 0 ];\n\n\t\t\t\t\t\t\tdata.limits.max = parseFloat( max.textContent );\n\t\t\t\t\t\t\tdata.limits.min = parseFloat( min.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// if min is equal to or greater than max, consider the joint static\n\n\t\t\t\tif ( data.limits.min >= data.limits.max ) {\n\n\t\t\t\t\tdata.static = true;\n\n\t\t\t\t}\n\n\t\t\t\t// calculate middle position\n\n\t\t\t\tdata.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsLink( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\t\tattachments: [],\n\t\t\t\t\ttransforms: []\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'attachment_full':\n\t\t\t\t\t\t\tdata.attachments.push( parseKinematicsAttachment( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsAttachment( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tjoint: xml.getAttribute( 'joint' ).split( '/' ).pop(),\n\t\t\t\t\ttransforms: [],\n\t\t\t\t\tlinks: []\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'link':\n\t\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsTransform( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\ttype: xml.nodeName\n\t\t\t\t};\n\n\t\t\t\tvar array = parseFloats( xml.textContent );\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tdata.obj = new THREE.Matrix4();\n\t\t\t\t\t\tdata.obj.fromArray( array ).transpose();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tdata.obj = new THREE.Vector3();\n\t\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.obj = new THREE.Vector3();\n\t\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\t\tdata.angle = THREE.MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\t// physics\n\n\t\t\tfunction parsePhysicsModel( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\t\trigidBodies: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'rigid_body':\n\t\t\t\t\t\t\tdata.rigidBodies[ child.getAttribute( 'name' ) ] = {};\n\t\t\t\t\t\t\tparsePhysicsRigidBody( child, data.rigidBodies[ child.getAttribute( 'name' ) ] );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.physicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parsePhysicsRigidBody( xml, data ) {\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\t\tparsePhysicsTechniqueCommon( child, data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parsePhysicsTechniqueCommon( xml, data ) {\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'inertia':\n\t\t\t\t\t\t\tdata.inertia = parseFloats( child.textContent );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'mass':\n\t\t\t\t\t\t\tdata.mass = parseFloats( child.textContent )[ 0 ];\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// scene\n\n\t\t\tfunction parseKinematicsScene( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tbindJointAxis: []\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'bind_joint_axis':\n\t\t\t\t\t\t\tdata.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction parseKinematicsBindJointAxis( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\ttarget: xml.getAttribute( 'target' ).split( '/' ).pop()\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\t\tvar param = child.getElementsByTagName( 'param' )[ 0 ];\n\t\t\t\t\t\t\tdata.axis = param.textContent;\n\t\t\t\t\t\t\tvar tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];\n\t\t\t\t\t\t\tdata.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildKinematicsScene( data ) {\n\n\t\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction getKinematicsScene( id ) {\n\n\t\t\t\treturn getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );\n\n\t\t\t}\n\n\t\t\tfunction setupKinematics() {\n\n\t\t\t\tvar kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];\n\t\t\t\tvar kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];\n\t\t\t\tvar visualSceneId = Object.keys( library.visualScenes )[ 0 ];\n\n\t\t\t\tif ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;\n\n\t\t\t\tvar kinematicsModel = getKinematicsModel( kinematicsModelId );\n\t\t\t\tvar kinematicsScene = getKinematicsScene( kinematicsSceneId );\n\t\t\t\tvar visualScene = getVisualScene( visualSceneId );\n\n\t\t\t\tvar bindJointAxis = kinematicsScene.bindJointAxis;\n\t\t\t\tvar jointMap = {};\n\n\t\t\t\tfor ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar axis = bindJointAxis[ i ];\n\n\t\t\t\t\t// the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n\t\t\t\t\tvar targetElement = collada.querySelector( '[sid=\"' + axis.target + '\"]' );\n\n\t\t\t\t\tif ( targetElement ) {\n\n\t\t\t\t\t\t// get the parent of the transfrom element\n\n\t\t\t\t\t\tvar parentVisualElement = targetElement.parentElement;\n\n\t\t\t\t\t\t// connect the joint of the kinematics model with the element in the visual scene\n\n\t\t\t\t\t\tconnect( axis.jointIndex, parentVisualElement );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfunction connect( jointIndex, visualElement ) {\n\n\t\t\t\t\tvar visualElementName = visualElement.getAttribute( 'name' );\n\t\t\t\t\tvar joint = kinematicsModel.joints[ jointIndex ];\n\n\t\t\t\t\tvisualScene.traverse( function ( object ) {\n\n\t\t\t\t\t\tif ( object.name === visualElementName ) {\n\n\t\t\t\t\t\t\tjointMap[ jointIndex ] = {\n\t\t\t\t\t\t\t\tobject: object,\n\t\t\t\t\t\t\t\ttransforms: buildTransformList( visualElement ),\n\t\t\t\t\t\t\t\tjoint: joint,\n\t\t\t\t\t\t\t\tposition: joint.zeroPosition\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tvar m0 = new THREE.Matrix4();\n\n\t\t\t\tkinematics = {\n\n\t\t\t\t\tjoints: kinematicsModel && kinematicsModel.joints,\n\n\t\t\t\t\tgetJointValue: function ( jointIndex ) {\n\n\t\t\t\t\t\tvar jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\t\treturn jointData.position;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t},\n\n\t\t\t\t\tsetJointValue: function ( jointIndex, value ) {\n\n\t\t\t\t\t\tvar jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\t\tvar joint = jointData.joint;\n\n\t\t\t\t\t\t\tif ( value > joint.limits.max || value < joint.limits.min ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );\n\n\t\t\t\t\t\t\t} else if ( joint.static ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar object = jointData.object;\n\t\t\t\t\t\t\t\tvar axis = joint.axis;\n\t\t\t\t\t\t\t\tvar transforms = jointData.transforms;\n\n\t\t\t\t\t\t\t\tmatrix.identity();\n\n\t\t\t\t\t\t\t\t// each update, we have to apply all transforms in the correct order\n\n\t\t\t\t\t\t\t\tfor ( var i = 0; i < transforms.length; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar transform = transforms[ i ];\n\n\t\t\t\t\t\t\t\t\t// if there is a connection of the transform node with a joint, apply the joint value\n\n\t\t\t\t\t\t\t\t\tif ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tswitch ( joint.type ) {\n\n\t\t\t\t\t\t\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( axis, THREE.MathUtils.degToRad( value ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tswitch ( transform.type ) {\n\n\t\t\t\t\t\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix.scale( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tobject.matrix.copy( matrix );\n\t\t\t\t\t\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t\t\t\t\tjointMap[ jointIndex ].position = value;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction buildTransformList( node ) {\n\n\t\t\t\tvar transforms = [];\n\n\t\t\t\tvar xml = collada.querySelector( '[id=\"' + node.id + '\"]' );\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tvar matrix = new THREE.Matrix4().fromArray( array ).transpose();\n\t\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\t\tobj: matrix\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tvar vector = new THREE.Vector3().fromArray( array );\n\t\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\t\tobj: vector\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tvar vector = new THREE.Vector3().fromArray( array );\n\t\t\t\t\t\t\tvar angle = THREE.MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\t\tobj: vector,\n\t\t\t\t\t\t\t\tangle: angle\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn transforms;\n\n\t\t\t}\n\n\t\t\t// nodes\n\n\t\t\tfunction prepareNodes( xml ) {\n\n\t\t\t\tvar elements = xml.getElementsByTagName( 'node' );\n\n\t\t\t\t// ensure all node elements have id attributes\n\n\t\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\tvar element = elements[ i ];\n\n\t\t\t\t\tif ( element.hasAttribute( 'id' ) === false ) {\n\n\t\t\t\t\t\telement.setAttribute( 'id', generateId() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\tfunction parseNode( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\t\ttype: xml.getAttribute( 'type' ),\n\t\t\t\t\tid: xml.getAttribute( 'id' ),\n\t\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\t\tmatrix: new THREE.Matrix4(),\n\t\t\t\t\tnodes: [],\n\t\t\t\t\tinstanceCameras: [],\n\t\t\t\t\tinstanceControllers: [],\n\t\t\t\t\tinstanceLights: [],\n\t\t\t\t\tinstanceGeometries: [],\n\t\t\t\t\tinstanceNodes: [],\n\t\t\t\t\ttransforms: {}\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'node':\n\t\t\t\t\t\t\tdata.nodes.push( child.getAttribute( 'id' ) );\n\t\t\t\t\t\t\tparseNode( child );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'instance_camera':\n\t\t\t\t\t\t\tdata.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'instance_controller':\n\t\t\t\t\t\t\tdata.instanceControllers.push( parseNodeInstance( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'instance_light':\n\t\t\t\t\t\t\tdata.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'instance_geometry':\n\t\t\t\t\t\t\tdata.instanceGeometries.push( parseNodeInstance( child ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'instance_node':\n\t\t\t\t\t\t\tdata.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tdata.matrix.multiply( matrix.fromArray( array ).transpose() );\n\t\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tvector.fromArray( array );\n\t\t\t\t\t\t\tdata.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );\n\t\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tvar angle = THREE.MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\t\tdata.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );\n\t\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\t\tdata.matrix.scale( vector.fromArray( array ) );\n\t\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasNode( data.id ) ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlibrary.nodes[ data.id ] = data;\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction parseNodeInstance( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tid: parseId( xml.getAttribute( 'url' ) ),\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\tskeletons: []\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\t\tcase 'bind_material':\n\t\t\t\t\t\t\tvar instances = child.getElementsByTagName( 'instance_material' );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < instances.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar instance = instances[ j ];\n\t\t\t\t\t\t\t\tvar symbol = instance.getAttribute( 'symbol' );\n\t\t\t\t\t\t\t\tvar target = instance.getAttribute( 'target' );\n\n\t\t\t\t\t\t\t\tdata.materials[ symbol ] = parseId( target );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'skeleton':\n\t\t\t\t\t\t\tdata.skeletons.push( parseId( child.textContent ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tfunction buildSkeleton( skeletons, joints ) {\n\n\t\t\t\tvar boneData = [];\n\t\t\t\tvar sortedBoneData = [];\n\n\t\t\t\tvar i, j, data;\n\n\t\t\t\t// a skeleton can have multiple root bones. collada expresses this\n\t\t\t\t// situtation with multiple \"skeleton\" tags per controller instance\n\n\t\t\t\tfor ( i = 0; i < skeletons.length; i ++ ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ i ];\n\n\t\t\t\t\tvar root;\n\n\t\t\t\t\tif ( hasNode( skeleton ) ) {\n\n\t\t\t\t\t\troot = getNode( skeleton );\n\t\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t\t} else if ( hasVisualScene( skeleton ) ) {\n\n\t\t\t\t\t\t// handle case where the skeleton refers to the visual scene (#13335)\n\n\t\t\t\t\t\tvar visualScene = library.visualScenes[ skeleton ];\n\t\t\t\t\t\tvar children = visualScene.children;\n\n\t\t\t\t\t\tfor ( var j = 0; j < children.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar child = children[ j ];\n\n\t\t\t\t\t\t\tif ( child.type === 'JOINT' ) {\n\n\t\t\t\t\t\t\t\tvar root = getNode( child.id );\n\t\t\t\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// sort bone data (the order is defined in the corresponding controller)\n\n\t\t\t\tfor ( i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < boneData.length; j ++ ) {\n\n\t\t\t\t\t\tdata = boneData[ j ];\n\n\t\t\t\t\t\tif ( data.bone.name === joints[ i ].name ) {\n\n\t\t\t\t\t\t\tsortedBoneData[ i ] = data;\n\t\t\t\t\t\t\tdata.processed = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add unprocessed bone data at the end of the list\n\n\t\t\t\tfor ( i = 0; i < boneData.length; i ++ ) {\n\n\t\t\t\t\tdata = boneData[ i ];\n\n\t\t\t\t\tif ( data.processed === false ) {\n\n\t\t\t\t\t\tsortedBoneData.push( data );\n\t\t\t\t\t\tdata.processed = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// setup arrays for skeleton creation\n\n\t\t\t\tvar bones = [];\n\t\t\t\tvar boneInverses = [];\n\n\t\t\t\tfor ( i = 0; i < sortedBoneData.length; i ++ ) {\n\n\t\t\t\t\tdata = sortedBoneData[ i ];\n\n\t\t\t\t\tbones.push( data.bone );\n\t\t\t\t\tboneInverses.push( data.boneInverse );\n\n\t\t\t\t}\n\n\t\t\t\treturn new THREE.Skeleton( bones, boneInverses );\n\n\t\t\t}\n\n\t\t\tfunction buildBoneHierarchy( root, joints, boneData ) {\n\n\t\t\t\t// setup bone data from visual scene\n\n\t\t\t\troot.traverse( function ( object ) {\n\n\t\t\t\t\tif ( object.isBone === true ) {\n\n\t\t\t\t\t\tvar boneInverse;\n\n\t\t\t\t\t\t// retrieve the boneInverse from the controller data\n\n\t\t\t\t\t\tfor ( var i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\t\t\t\tvar joint = joints[ i ];\n\n\t\t\t\t\t\t\tif ( joint.name === object.name ) {\n\n\t\t\t\t\t\t\t\tboneInverse = joint.boneInverse;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( boneInverse === undefined ) {\n\n\t\t\t\t\t\t\t// Unfortunately, there can be joints in the visual scene that are not part of the\n\t\t\t\t\t\t\t// corresponding controller. In this case, we have to create a dummy boneInverse matrix\n\t\t\t\t\t\t\t// for the respective bone. This bone won't affect any vertices, because there are no skin indices\n\t\t\t\t\t\t\t// and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n\t\t\t\t\t\t\t// ensure a correct animation of the model.\n\n\t\t\t\t\t\t\tboneInverse = new THREE.Matrix4();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tboneData.push( { bone: object, boneInverse: boneInverse, processed: false } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfunction buildNode( data ) {\n\n\t\t\t\tvar objects = [];\n\n\t\t\t\tvar matrix = data.matrix;\n\t\t\t\tvar nodes = data.nodes;\n\t\t\t\tvar type = data.type;\n\t\t\t\tvar instanceCameras = data.instanceCameras;\n\t\t\t\tvar instanceControllers = data.instanceControllers;\n\t\t\t\tvar instanceLights = data.instanceLights;\n\t\t\t\tvar instanceGeometries = data.instanceGeometries;\n\t\t\t\tvar instanceNodes = data.instanceNodes;\n\n\t\t\t\t// nodes\n\n\t\t\t\tfor ( var i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tobjects.push( getNode( nodes[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\t// instance cameras\n\n\t\t\t\tfor ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar instanceCamera = getCamera( instanceCameras[ i ] );\n\n\t\t\t\t\tif ( instanceCamera !== null ) {\n\n\t\t\t\t\t\tobjects.push( instanceCamera.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// instance controllers\n\n\t\t\t\tfor ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar instance = instanceControllers[ i ];\n\t\t\t\t\tvar controller = getController( instance.id );\n\t\t\t\t\tvar geometries = getGeometry( controller.id );\n\t\t\t\t\tvar newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\t\tvar skeletons = instance.skeletons;\n\t\t\t\t\tvar joints = controller.skin.joints;\n\n\t\t\t\t\tvar skeleton = buildSkeleton( skeletons, joints );\n\n\t\t\t\t\tfor ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar object = newObjects[ j ];\n\n\t\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t\tobject.bind( skeleton, controller.skin.bindMatrix );\n\t\t\t\t\t\t\tobject.normalizeSkinWeights();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// instance lights\n\n\t\t\t\tfor ( var i = 0, l = instanceLights.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar instanceLight = getLight( instanceLights[ i ] );\n\n\t\t\t\t\tif ( instanceLight !== null ) {\n\n\t\t\t\t\t\tobjects.push( instanceLight.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// instance geometries\n\n\t\t\t\tfor ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar instance = instanceGeometries[ i ];\n\n\t\t\t\t\t// a single geometry instance in collada can lead to multiple object3Ds.\n\t\t\t\t\t// this is the case when primitives are combined like triangles and lines\n\n\t\t\t\t\tvar geometries = getGeometry( instance.id );\n\t\t\t\t\tvar newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\t\tfor ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tobjects.push( newObjects[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// instance nodes\n\n\t\t\t\tfor ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {\n\n\t\t\t\t\tobjects.push( getNode( instanceNodes[ i ] ).clone() );\n\n\t\t\t\t}\n\n\t\t\t\tvar object;\n\n\t\t\t\tif ( nodes.length === 0 && objects.length === 1 ) {\n\n\t\t\t\t\tobject = objects[ 0 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject = ( type === 'JOINT' ) ? new THREE.Bone() : new THREE.Group();\n\n\t\t\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t\t\tobject.add( objects[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.name === '' ) {\n\n\t\t\t\t\tobject.name = ( type === 'JOINT' ) ? data.sid : data.name;\n\n\t\t\t\t}\n\n\t\t\t\tobject.matrix.copy( matrix );\n\t\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t\tvar fallbackMaterial = new THREE.MeshBasicMaterial( { color: 0xff00ff } );\n\n\t\t\tfunction resolveMaterialBinding( keys, instanceMaterials ) {\n\n\t\t\t\tvar materials = [];\n\n\t\t\t\tfor ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar id = instanceMaterials[ keys[ i ] ];\n\n\t\t\t\t\tif ( id === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[ i ] );\n\t\t\t\t\t\tmaterials.push( fallbackMaterial );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials.push( getMaterial( id ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn materials;\n\n\t\t\t}\n\n\t\t\tfunction buildObjects( geometries, instanceMaterials ) {\n\n\t\t\t\tvar objects = [];\n\n\t\t\t\tfor ( var type in geometries ) {\n\n\t\t\t\t\tvar geometry = geometries[ type ];\n\n\t\t\t\t\tvar materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );\n\n\t\t\t\t\t// handle case if no materials are defined\n\n\t\t\t\t\tif ( materials.length === 0 ) {\n\n\t\t\t\t\t\tif ( type === 'lines' || type === 'linestrips' ) {\n\n\t\t\t\t\t\t\tmaterials.push( new THREE.LineBasicMaterial() );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterials.push( new THREE.MeshPhongMaterial() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// regard skinning\n\n\t\t\t\t\tvar skinning = ( geometry.data.attributes.skinIndex !== undefined );\n\n\t\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tmaterials[ i ].skinning = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// choose between a single or multi materials (material array)\n\n\t\t\t\t\tvar material = ( materials.length === 1 ) ? materials[ 0 ] : materials;\n\n\t\t\t\t\t// now create a specific 3D object\n\n\t\t\t\t\tvar object;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'lines':\n\t\t\t\t\t\t\tobject = new THREE.LineSegments( geometry.data, material );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\t\tobject = new THREE.Line( geometry.data, material );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tcase 'polylist':\n\t\t\t\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry.data, material );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry.data, material );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t}\n\n\t\t\t\treturn objects;\n\n\t\t\t}\n\n\t\t\tfunction hasNode( id ) {\n\n\t\t\t\treturn library.nodes[ id ] !== undefined;\n\n\t\t\t}\n\n\t\t\tfunction getNode( id ) {\n\n\t\t\t\treturn getBuild( library.nodes[ id ], buildNode );\n\n\t\t\t}\n\n\t\t\t// visual scenes\n\n\t\t\tfunction parseVisualScene( xml ) {\n\n\t\t\t\tvar data = {\n\t\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\t\tchildren: []\n\t\t\t\t};\n\n\t\t\t\tprepareNodes( xml );\n\n\t\t\t\tvar elements = getElementsByTagName( xml, 'node' );\n\n\t\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\tdata.children.push( parseNode( elements[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tlibrary.visualScenes[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t\t}\n\n\t\t\tfunction buildVisualScene( data ) {\n\n\t\t\t\tvar group = new THREE.Group();\n\t\t\t\tgroup.name = data.name;\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar child = children[ i ];\n\n\t\t\t\t\tgroup.add( getNode( child.id ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t}\n\n\t\t\tfunction hasVisualScene( id ) {\n\n\t\t\t\treturn library.visualScenes[ id ] !== undefined;\n\n\t\t\t}\n\n\t\t\tfunction getVisualScene( id ) {\n\n\t\t\t\treturn getBuild( library.visualScenes[ id ], buildVisualScene );\n\n\t\t\t}\n\n\t\t\t// scenes\n\n\t\t\tfunction parseScene( xml ) {\n\n\t\t\t\tvar instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];\n\t\t\t\treturn getVisualScene( parseId( instance.getAttribute( 'url' ) ) );\n\n\t\t\t}\n\n\t\t\tfunction setupAnimations() {\n\n\t\t\t\tvar clips = library.clips;\n\n\t\t\t\tif ( isEmpty( clips ) === true ) {\n\n\t\t\t\t\tif ( isEmpty( library.animations ) === false ) {\n\n\t\t\t\t\t\t// if there are animations but no clips, we create a default clip for playback\n\n\t\t\t\t\t\tvar tracks = [];\n\n\t\t\t\t\t\tfor ( var id in library.animations ) {\n\n\t\t\t\t\t\t\tvar animationTracks = getAnimation( id );\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = animationTracks.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\ttracks.push( animationTracks[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tanimations.push( new THREE.AnimationClip( 'default', - 1, tracks ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var id in clips ) {\n\n\t\t\t\t\t\tanimations.push( getAnimationClip( id ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// convert the parser error element into text with each child elements text\n\t\t\t// separated by new lines.\n\n\t\t\tfunction parserErrorToText( parserError ) {\n\n\t\t\t\tvar result = '';\n\t\t\t\tvar stack = [ parserError ];\n\n\t\t\t\twhile ( stack.length ) {\n\n\t\t\t\t\tvar node = stack.shift();\n\n\t\t\t\t\tif ( node.nodeType === Node.TEXT_NODE ) {\n\n\t\t\t\t\t\tresult += node.textContent;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult += '\\n';\n\t\t\t\t\t\tstack.push.apply( stack, node.childNodes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn result.trim();\n\n\t\t\t}\n\n\t\t\tif ( text.length === 0 ) {\n\n\t\t\t\treturn { scene: new THREE.Scene() };\n\n\t\t\t}\n\n\t\t\tvar xml = new DOMParser().parseFromString( text, 'application/xml' );\n\n\t\t\tvar collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];\n\n\t\t\tvar parserError = xml.getElementsByTagName( 'parsererror' )[ 0 ];\n\t\t\tif ( parserError !== undefined ) {\n\n\t\t\t\t// Chrome will return parser error with a div in it\n\n\t\t\t\tvar errorElement = getElementsByTagName( parserError, 'div' )[ 0 ];\n\t\t\t\tvar errorText;\n\n\t\t\t\tif ( errorElement ) {\n\n\t\t\t\t\terrorText = errorElement.textContent;\n\n\t\t\t\t} else {\n\n\t\t\t\t\terrorText = parserErrorToText( parserError );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.error( 'THREE.ColladaLoader: Failed to parse collada file.\\n', errorText );\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// metadata\n\n\t\t\tvar version = collada.getAttribute( 'version' );\n\t\t\tconsole.log( 'THREE.ColladaLoader: File version', version );\n\n\t\t\tvar asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager );\n\t\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar tgaLoader;\n\n\t\t\tif ( THREE.TGALoader ) {\n\n\t\t\t\ttgaLoader = new THREE.TGALoader( this.manager );\n\t\t\t\ttgaLoader.setPath( this.resourcePath || path );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar animations = [];\n\t\t\tvar kinematics = {};\n\t\t\tvar count = 0;\n\n\t\t\t//\n\n\t\t\tvar library = {\n\t\t\t\tanimations: {},\n\t\t\t\tclips: {},\n\t\t\t\tcontrollers: {},\n\t\t\t\timages: {},\n\t\t\t\teffects: {},\n\t\t\t\tmaterials: {},\n\t\t\t\tcameras: {},\n\t\t\t\tlights: {},\n\t\t\t\tgeometries: {},\n\t\t\t\tnodes: {},\n\t\t\t\tvisualScenes: {},\n\t\t\t\tkinematicsModels: {},\n\t\t\t\tphysicsModels: {},\n\t\t\t\tkinematicsScenes: {}\n\t\t\t};\n\n\t\t\tparseLibrary( collada, 'library_animations', 'animation', parseAnimation );\n\t\t\tparseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );\n\t\t\tparseLibrary( collada, 'library_controllers', 'controller', parseController );\n\t\t\tparseLibrary( collada, 'library_images', 'image', parseImage );\n\t\t\tparseLibrary( collada, 'library_effects', 'effect', parseEffect );\n\t\t\tparseLibrary( collada, 'library_materials', 'material', parseMaterial );\n\t\t\tparseLibrary( collada, 'library_cameras', 'camera', parseCamera );\n\t\t\tparseLibrary( collada, 'library_lights', 'light', parseLight );\n\t\t\tparseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );\n\t\t\tparseLibrary( collada, 'library_nodes', 'node', parseNode );\n\t\t\tparseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );\n\t\t\tparseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );\n\t\t\tparseLibrary( collada, 'library_physics_models', 'physics_model', parsePhysicsModel );\n\t\t\tparseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );\n\n\t\t\tbuildLibrary( library.animations, buildAnimation );\n\t\t\tbuildLibrary( library.clips, buildAnimationClip );\n\t\t\tbuildLibrary( library.controllers, buildController );\n\t\t\tbuildLibrary( library.images, buildImage );\n\t\t\tbuildLibrary( library.effects, buildEffect );\n\t\t\tbuildLibrary( library.materials, buildMaterial );\n\t\t\tbuildLibrary( library.cameras, buildCamera );\n\t\t\tbuildLibrary( library.lights, buildLight );\n\t\t\tbuildLibrary( library.geometries, buildGeometry );\n\t\t\tbuildLibrary( library.visualScenes, buildVisualScene );\n\n\t\t\tsetupAnimations();\n\t\t\tsetupKinematics();\n\n\t\t\tvar scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );\n\n\t\t\tif ( asset.upAxis === 'Z_UP' ) {\n\n\t\t\t\tscene.quaternion.setFromEuler( new THREE.Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\t\t}\n\n\t\t\tscene.scale.multiplyScalar( asset.unit );\n\n\t\t\treturn {\n\t\t\t\tanimations: animations,\n\t\t\t\tkinematics: kinematics,\n\t\t\t\tlibrary: library,\n\t\t\t\tscene: scene\n\t\t\t};\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.ColladaLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/DRACOLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tTHREE.DRACOLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t};\n\n\tTHREE.DRACOLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.DRACOLoader,\n\n\t\tsetDecoderPath: function ( path ) {\n\n\t\t\tthis.decoderPath = path;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDecoderConfig: function ( config ) {\n\n\t\t\tthis.decoderConfig = config;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\t\tthis.workerLimit = workerLimit;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/** @deprecated */\n\t\tsetVerbosity: function () {\n\n\t\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t\t},\n\n\t\t/** @deprecated */\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t\t},\n\n\t\t/** @deprecated */\n\t\tsetSkipDequantization: function () {\n\n\t\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t\tvar taskConfig = {\n\t\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\t\tuseUniqueIDs: false\n\t\t\t\t};\n\n\t\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t\t.then( onLoad )\n\t\t\t\t\t.catch( onError );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\t\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t\t},\n\n\t\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t\t// references (rather than names) to typed array constructors. These must be\n\t\t\t// serialized before sending them to the worker.\n\t\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( THREE.DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\t\tvar cachedTask = THREE.DRACOLoader.taskCache.get( buffer );\n\n\t\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\t\treturn cachedTask.promise;\n\n\t\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\t\tthrow new Error(\n\n\t\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar worker;\n\t\t\tvar taskID = this.workerNextTaskID ++;\n\t\t\tvar taskCost = buffer.byteLength;\n\n\t\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t\t// when the task completes.\n\t\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t\t.then( ( _worker ) => {\n\n\t\t\t\t\tworker = _worker;\n\n\t\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t\t// this.debug();\n\n\t\t\t\t\t} );\n\n\t\t\t\t} )\n\t\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t\t// Remove task from the task list.\n\t\t\tgeometryPending\n\t\t\t\t.finally( () => {\n\n\t\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t\t// this.debug();\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t// Cache the task result.\n\t\t\tTHREE.DRACOLoader.taskCache.set( buffer, {\n\n\t\t\t\tkey: taskKey,\n\t\t\t\tpromise: geometryPending\n\n\t\t\t} );\n\n\t\t\treturn geometryPending;\n\n\t\t},\n\n\t\t_createGeometry: function ( geometryData ) {\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\tif ( geometryData.index ) {\n\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\t\tvar name = attribute.name;\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tgeometry.setAttribute( name, new THREE.BufferAttribute( array, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t},\n\n\t\t_loadLibrary: function ( url, responseType ) {\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.decoderPath );\n\t\t\tloader.setResponseType( responseType );\n\n\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tpreload: function () {\n\n\t\t\tthis._initDecoder();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_initDecoder: function () {\n\n\t\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\t\tvar librariesPending = [];\n\n\t\t\tif ( useJS ) {\n\n\t\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t\t} else {\n\n\t\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t\t}\n\n\t\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t\t.then( ( libraries ) => {\n\n\t\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar fn = THREE.DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'',\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t\t} );\n\n\t\t\treturn this.decoderPending;\n\n\t\t},\n\n\t\t_getWorker: function ( taskID, taskCost ) {\n\n\t\t\treturn this._initDecoder().then( () => {\n\n\t\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\t\tworker._callbacks = {};\n\t\t\t\t\tworker._taskCosts = {};\n\t\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\t\tworker._taskLoad += taskCost;\n\t\t\t\treturn worker;\n\n\t\t\t} );\n\n\t\t},\n\n\t\t_releaseTask: function ( worker, taskID ) {\n\n\t\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\t\tdelete worker._callbacks[ taskID ];\n\t\t\tdelete worker._taskCosts[ taskID ];\n\n\t\t},\n\n\t\tdebug: function () {\n\n\t\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t\t}\n\n\t\t\tthis.workerPool.length = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/* WEB WORKER */\n\n\tTHREE.DRACOLoader.DRACOWorker = function () {\n\n\t\tvar decoderConfig;\n\t\tvar decoderPending;\n\n\t\tonmessage = function ( e ) {\n\n\t\t\tvar message = e.data;\n\n\t\t\tswitch ( message.type ) {\n\n\t\t\t\tcase 'init':\n\t\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'decode':\n\t\t\t\t\tvar buffer = message.buffer;\n\t\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t\t} finally {\n\n\t\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\t\tvar dracoGeometry;\n\t\t\tvar decodingStatus;\n\n\t\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t\t}\n\n\t\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t\t}\n\n\t\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t\t// Gather all vertex attributes.\n\t\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\t\tvar attribute;\n\t\t\t\tvar attributeID;\n\n\t\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t\t}\n\n\t\t\t// Add index.\n\t\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t\t// Generate mesh faces.\n\t\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\t\tvar numIndices = numFaces * 3;\n\t\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\t\tdraco.destroy( indexArray );\n\n\t\t\t}\n\n\t\t\tdraco.destroy( dracoGeometry );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\t\tvar numComponents = attribute.num_components();\n\t\t\tvar numPoints = dracoGeometry.num_points();\n\t\t\tvar numValues = numPoints * numComponents;\n\t\t\tvar dracoArray;\n\n\t\t\tvar array;\n\n\t\t\tswitch ( attributeType ) {\n\n\t\t\t\tcase Float32Array:\n\t\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int8Array:\n\t\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int16Array:\n\t\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int32Array:\n\t\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint8Array:\n\t\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint16Array:\n\t\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint32Array:\n\t\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t\t}\n\n\t\t\tdraco.destroy( dracoArray );\n\n\t\t\treturn {\n\t\t\t\tname: attributeName,\n\t\t\t\tarray: array,\n\t\t\t\titemSize: numComponents\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\tTHREE.DRACOLoader.taskCache = new WeakMap();\n\n\t/** Deprecated static methods */\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.setDecoderPath = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n\t};\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.setDecoderConfig = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n\t};\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.releaseDecoderModule = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n\t};\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.getDecoderModule = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n\t};\n\t\n\treturn THREE.DRACOLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/FBXLoader',[\n\t\"skylark-threejs\",\n\t\"../curves/NURBSCurve\"\n],function(THREE,NURBSCurve,Zlib){\n\t/**\n\t * @author Kyle-Larson https://github.com/Kyle-Larson\n\t * @author Takahiro https://github.com/takahirox\n\t * @author Lewy Blue https://github.com/looeee\n\t *\n\t * Loader loads FBX file and generates Group representing FBX scene.\n\t * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n\t * Versions lower than this may load but will probably have errors\n\t *\n\t * Needs Support:\n\t *  Morph normals / blend shape normals\n\t *\n\t * FBX format references:\n\t * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n\t * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n\t *\n\t * \tBinary format specification:\n\t *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n\t */\n\n\n\tTHREE.FBXLoader = ( function () {\n\n\t\tvar fbxTree;\n\t\tvar connections;\n\t\tvar sceneGraph;\n\n\t\tfunction FBXLoader( manager ) {\n\n\t\t\tTHREE.Loader.call( this, manager );\n\n\t\t}\n\n\t\tFBXLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\t\tconstructor: FBXLoader,\n\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tvar path = ( self.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : self.path;\n\n\t\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\t\tloader.setPath( self.path );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tonLoad( self.parse( buffer, path ) );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\t\tself.manager.itemError( url );\n\n\t\t\t\t\t\t}, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t},\n\n\t\t\tparse: function ( FBXBuffer, path ) {\n\n\t\t\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t\t\t}\n\n\t\t\t\t// console.log( fbxTree );\n\n\t\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\t\tfunction FBXTreeParser( textureLoader, manager ) {\n\n\t\t\tthis.textureLoader = textureLoader;\n\t\t\tthis.manager = manager;\n\n\t\t}\n\n\t\tFBXTreeParser.prototype = {\n\n\t\t\tconstructor: FBXTreeParser,\n\n\t\t\tparse: function () {\n\n\t\t\t\tconnections = this.parseConnections();\n\n\t\t\t\tvar images = this.parseImages();\n\t\t\t\tvar textures = this.parseTextures( images );\n\t\t\t\tvar materials = this.parseMaterials( textures );\n\t\t\t\tvar deformers = this.parseDeformers();\n\t\t\t\tvar geometryMap = new GeometryParser().parse( deformers );\n\n\t\t\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\t\t\treturn sceneGraph;\n\n\t\t\t},\n\n\t\t\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t\t\t// and details the connection type\n\t\t\tparseConnections: function () {\n\n\t\t\t\tvar connectionMap = new Map();\n\n\t\t\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\t\t\tvar rawConnections = fbxTree.Connections.connections;\n\n\t\t\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\t\t\tvar fromID = rawConnection[ 0 ];\n\t\t\t\t\t\tvar toID = rawConnection[ 1 ];\n\t\t\t\t\t\tvar relationship = rawConnection[ 2 ];\n\n\t\t\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn connectionMap;\n\n\t\t\t},\n\n\t\t\t// Parse FBXTree.Objects.Video for embedded image data\n\t\t\t// These images are connected to textures in FBXTree.Objects.Textures\n\t\t\t// via FBXTree.Connections.\n\t\t\tparseImages: function () {\n\n\t\t\t\tvar images = {};\n\t\t\t\tvar blobs = {};\n\n\t\t\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar videoNodes = fbxTree.Objects.Video;\n\n\t\t\t\t\tfor ( var nodeID in videoNodes ) {\n\n\t\t\t\t\t\tvar videoNode = videoNodes[ nodeID ];\n\n\t\t\t\t\t\tvar id = parseInt( nodeID );\n\n\t\t\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\t\t\tvar arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\t\t\tvar base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\t\t\tvar image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var id in images ) {\n\n\t\t\t\t\tvar filename = images[ id ];\n\n\t\t\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t\t\t}\n\n\t\t\t\treturn images;\n\n\t\t\t},\n\n\t\t\t// Parse embedded image data in FBXTree.Video.Content\n\t\t\tparseImage: function ( videoNode ) {\n\n\t\t\t\tvar content = videoNode.Content;\n\t\t\t\tvar fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\t\t\tvar extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\t\t\tvar type;\n\n\t\t\t\tswitch ( extension ) {\n\n\t\t\t\t\tcase 'bmp':\n\n\t\t\t\t\t\ttype = 'image/bmp';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\n\t\t\t\t\t\ttype = 'image/jpeg';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'png':\n\n\t\t\t\t\t\ttype = 'image/png';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tif':\n\n\t\t\t\t\t\ttype = 'image/tiff';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tga':\n\n\t\t\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype = 'image/tga';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t\t\t} else { // Binary Format\n\n\t\t\t\t\tvar array = new Uint8Array( content );\n\t\t\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// Parse nodes in FBXTree.Objects.Texture\n\t\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t\t\t// to images in FBXTree.Objects.Video\n\t\t\tparseTextures: function ( images ) {\n\n\t\t\t\tvar textureMap = new Map();\n\n\t\t\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar textureNodes = fbxTree.Objects.Texture;\n\t\t\t\t\tfor ( var nodeID in textureNodes ) {\n\n\t\t\t\t\t\tvar texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn textureMap;\n\n\t\t\t},\n\n\t\t\t// Parse individual node in FBXTree.Objects.Texture\n\t\t\tparseTexture: function ( textureNode, images ) {\n\n\t\t\t\tvar texture = this.loadTexture( textureNode, images );\n\n\t\t\t\ttexture.ID = textureNode.id;\n\n\t\t\t\ttexture.name = textureNode.attrName;\n\n\t\t\t\tvar wrapModeU = textureNode.WrapModeU;\n\t\t\t\tvar wrapModeV = textureNode.WrapModeV;\n\n\t\t\t\tvar valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\t\t\tvar valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t\t\t// 0: repeat(default), 1: clamp\n\n\t\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\t\t\tvar values = textureNode.Scaling.value;\n\n\t\t\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\treturn texture;\n\n\t\t\t},\n\n\t\t\t// load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\t\t\tloadTexture: function ( textureNode, images ) {\n\n\t\t\t\tvar fileName;\n\n\t\t\t\tvar currentPath = this.textureLoader.path;\n\n\t\t\t\tvar children = connections.get( textureNode.id ).children;\n\n\t\t\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar texture;\n\n\t\t\t\tvar extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\t\t\tif ( extension === 'tga' ) {\n\n\t\t\t\t\tvar loader = this.manager.getHandler( '.tga' );\n\n\t\t\t\t\tif ( loader === null ) {\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( extension === 'psd' ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t\t\t}\n\n\t\t\t\tthis.textureLoader.setPath( currentPath );\n\n\t\t\t\treturn texture;\n\n\t\t\t},\n\n\t\t\t// Parse nodes in FBXTree.Objects.Material\n\t\t\tparseMaterials: function ( textureMap ) {\n\n\t\t\t\tvar materialMap = new Map();\n\n\t\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn materialMap;\n\n\t\t\t},\n\n\t\t\t// Parse single node in FBXTree.Objects.Material\n\t\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t\t\t// FBX format currently only supports Lambert and Phong shading models\n\t\t\tparseMaterial: function ( materialNode, textureMap ) {\n\n\t\t\t\tvar ID = materialNode.id;\n\t\t\t\tvar name = materialNode.attrName;\n\t\t\t\tvar type = materialNode.ShadingModel;\n\n\t\t\t\t// Case where FBX wraps shading model in property object.\n\t\t\t\tif ( typeof type === 'object' ) {\n\n\t\t\t\t\ttype = type.value;\n\n\t\t\t\t}\n\n\t\t\t\t// Ignore unused materials which don't have any connections.\n\t\t\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\t\t\tvar parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\t\t\tvar material;\n\n\t\t\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\t\t\tcase 'phong':\n\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'lambert':\n\t\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.setValues( parameters );\n\t\t\t\tmaterial.name = name;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t\t// Parse FBX material and return parameters suitable for a three.js material\n\t\t\t// Also parse the texture map and return any textures associated with the material\n\t\t\tparseParameters: function ( materialNode, textureMap, ID ) {\n\n\t\t\t\tvar parameters = {};\n\n\t\t\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t\t\t}\n\t\t\t\tif ( materialNode.Diffuse ) {\n\n\t\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.Diffuse.value );\n\n\t\t\t\t} else if ( materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color' ) {\n\n\t\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Emissive ) {\n\n\t\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.Emissive.value );\n\n\t\t\t\t} else if ( materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color' ) {\n\n\t\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Opacity ) {\n\n\t\t\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\t\t\tparameters.transparent = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Shininess ) {\n\n\t\t\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Specular ) {\n\n\t\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.Specular.value );\n\n\t\t\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t\t\t}\n\n\t\t\t\tvar self = this;\n\t\t\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\t\t\tvar type = child.relationship;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'Bump':\n\t\t\t\t\t\t\tparameters.bumpMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\t\t\tparameters.aoMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DiffuseColor':\n\t\t\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\t\t\tparameters.map = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.map.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\t\t\tparameters.displacementMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\t\t\tparameters.emissiveMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.emissiveMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'NormalMap':\n\t\t\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\t\t\tparameters.normalMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\t\t\tparameters.envMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\t\t\t\tparameters.envMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\t\t\tparameters.specularMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.specularMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TransparentColor':\n\t\t\t\t\t\t\tparameters.alphaMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'AmbientColor':\n\t\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn parameters;\n\n\t\t\t},\n\n\t\t\t// get a texture from the textureMap for use by a material.\n\t\t\tgetTexture: function ( textureMap, id ) {\n\n\t\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\t\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t\t\t}\n\n\t\t\t\treturn textureMap.get( id );\n\n\t\t\t},\n\n\t\t\t// Parse nodes in FBXTree.Objects.Deformer\n\t\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t\t\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\t\t\tparseDeformers: function () {\n\n\t\t\t\tvar skeletons = {};\n\t\t\t\tvar morphTargets = {};\n\n\t\t\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\t\t\tfor ( var nodeID in DeformerNodes ) {\n\n\t\t\t\t\t\tvar deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\t\t\tvar skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\t\t\tvar morphTarget = {\n\t\t\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\n\t\t\t\t\tskeletons: skeletons,\n\t\t\t\t\tmorphTargets: morphTargets,\n\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse single nodes in FBXTree.Objects.Deformer\n\t\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t\t\t// Each skin node represents a skeleton and each cluster node represents a bone\n\t\t\tparseSkeleton: function ( relationships, deformerNodes ) {\n\n\t\t\t\tvar rawBones = [];\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tvar boneNode = deformerNodes[ child.ID ];\n\n\t\t\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\t\t\tvar rawBone = {\n\n\t\t\t\t\t\tID: child.ID,\n\t\t\t\t\t\tindices: [],\n\t\t\t\t\t\tweights: [],\n\t\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t\t\t// transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\trawBones.push( rawBone );\n\n\t\t\t\t} );\n\n\t\t\t\treturn {\n\n\t\t\t\t\trawBones: rawBones,\n\t\t\t\t\tbones: []\n\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\t\t\tparseMorphTargets: function ( relationships, deformerNodes ) {\n\n\t\t\t\tvar rawMorphTargets = [];\n\n\t\t\t\tfor ( var i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = relationships.children[ i ];\n\n\t\t\t\t\tvar morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\t\t\tvar rawMorphTarget = {\n\n\t\t\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\t\t\tid: morphTargetNode.id,\n\t\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t\t\t}\n\n\t\t\t\treturn rawMorphTargets;\n\n\t\t\t},\n\n\t\t\t// create the main THREE.Group() to be returned by the loader\n\t\t\tparseScene: function ( deformers, geometryMap, materialMap ) {\n\n\t\t\t\tsceneGraph = new THREE.Group();\n\n\t\t\t\tvar modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\t\tvar self = this;\n\t\t\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\t\t\tvar modelNode = modelNodes[ model.ID ];\n\t\t\t\t\tself.setLookAtProperties( model, modelNode );\n\n\t\t\t\t\tvar parentConnections = connections.get( model.ID ).parents;\n\n\t\t\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\t\t\tvar parent = modelMap.get( connection.ID );\n\t\t\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( model.parent === null ) {\n\n\t\t\t\t\t\tsceneGraph.add( model );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} );\n\n\t\t\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\t\t\tthis.createAmbientLight();\n\n\t\t\t\tthis.setupMorphMaterials();\n\n\t\t\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\t\t\tif ( node.parent ) node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n\n\t\t\t\t\t\tvar transform = generateTransform( node.userData.transformData );\n\n\t\t\t\t\t\tnode.applyMatrix4( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tvar animations = new AnimationParser().parse();\n\n\t\t\t\t// if all the models where already combined in a single group, just return that\n\t\t\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tsceneGraph.animations = animations;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.Model\n\t\t\tparseModels: function ( skeletons, geometryMap, materialMap ) {\n\n\t\t\t\tvar modelMap = new Map();\n\t\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\t\tfor ( var nodeID in modelNodes ) {\n\n\t\t\t\t\tvar id = parseInt( nodeID );\n\t\t\t\t\tvar node = modelNodes[ nodeID ];\n\t\t\t\t\tvar relationships = connections.get( id );\n\n\t\t\t\t\tvar model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\t\t\tmodel = new THREE.Bone();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'Null':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tmodel = new THREE.Group();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodel.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\n\t\t\t\t\t\tmodel.ID = id;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getTransformData( model, node );\n\t\t\t\t\tmodelMap.set( id, model );\n\n\t\t\t\t}\n\n\t\t\t\treturn modelMap;\n\n\t\t\t},\n\n\t\t\tbuildSkeleton: function ( relationships, skeletons, id, name ) {\n\n\t\t\t\tvar bone = null;\n\n\t\t\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\t\t\tvar subBone = bone;\n\t\t\t\t\t\t\t\tbone = new THREE.Bone();\n\n\t\t\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\t\t\tbone.name = name ? THREE.PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn bone;\n\n\t\t\t},\n\n\t\t\t// create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\t\t\tcreateCamera: function ( relationships ) {\n\n\t\t\t\tvar model;\n\t\t\t\tvar cameraAttribute;\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\t\tcameraAttribute = attr;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar type = 0;\n\t\t\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\t\t\ttype = 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar nearClippingPlane = 1;\n\t\t\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar farClippingPlane = 1000;\n\t\t\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tvar width = window.innerWidth;\n\t\t\t\t\tvar height = window.innerHeight;\n\n\t\t\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar aspect = width / height;\n\n\t\t\t\t\tvar fov = 45;\n\t\t\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 0: // Perspective\n\t\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\t\t\tmodel = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\t\t\tmodel = new THREE.Object3D();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\n\t\t\t},\n\n\t\t\t// Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\t\t\tcreateLight: function ( relationships ) {\n\n\t\t\t\tvar model;\n\t\t\t\tvar lightAttribute;\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\t\tlightAttribute = attr;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( lightAttribute === undefined ) {\n\n\t\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar type;\n\n\t\t\t\t\t// LightType can be undefined for Point lights\n\t\t\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\t\t\ttype = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar color = 0xffffff;\n\n\t\t\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\t\t\tcolor = new THREE.Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t\t\t// light disabled\n\t\t\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\t\t\tintensity = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar distance = 0;\n\t\t\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\t\t\tdistance = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\t\t\tvar decay = 1;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 0: // Point\n\t\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity, distance, decay );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: // Directional\n\t\t\t\t\t\t\tmodel = new THREE.DirectionalLight( color, intensity );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2: // Spot\n\t\t\t\t\t\t\tvar angle = Math.PI / 3;\n\n\t\t\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\t\t\tangle = THREE.MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar penumbra = 0;\n\t\t\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\t\t\tpenumbra = THREE.MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );\n\t\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\t\t\tmodel.castShadow = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\n\t\t\t},\n\n\t\t\tcreateMesh: function ( relationships, geometryMap, materialMap ) {\n\n\t\t\t\tvar model;\n\t\t\t\tvar geometry = null;\n\t\t\t\tvar material = null;\n\t\t\t\tvar materials = [];\n\n\t\t\t\t// get geometry and materials(s) from connections\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( materials.length > 1 ) {\n\n\t\t\t\t\tmaterial = materials;\n\n\t\t\t\t} else if ( materials.length > 0 ) {\n\n\t\t\t\t\tmaterial = materials[ 0 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\t\t\tmaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tmodel = new THREE.SkinnedMesh( geometry, material );\n\t\t\t\t\tmodel.normalizeSkinWeights();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmodel = new THREE.Mesh( geometry, material );\n\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\n\t\t\t},\n\n\t\t\tcreateCurve: function ( relationships, geometryMap ) {\n\n\t\t\t\tvar geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\t\t\treturn geo;\n\n\t\t\t\t}, null );\n\n\t\t\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\t\t\tvar material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\t\t\treturn new THREE.Line( geometry, material );\n\n\t\t\t},\n\n\t\t\t// parse the model node for transform data\n\t\t\tgetTransformData: function ( model, modelNode ) {\n\n\t\t\t\tvar transformData = {};\n\n\t\t\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\t\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\t\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\t\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\t\t\tmodel.userData.transformData = transformData;\n\n\t\t\t},\n\n\t\t\tsetLookAtProperties: function ( model, modelNode ) {\n\n\t\t\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\t\t\tvar children = connections.get( model.ID ).children;\n\n\t\t\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\t\t\tvar lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\t\t\tvar pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\t\t\tmodel.lookAt( new THREE.Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tbindSkeleton: function ( skeletons, geometryMap, modelMap ) {\n\n\t\t\t\tvar bindMatrices = this.parsePoseNodes();\n\n\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\tvar parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\t\t\tvar geoID = parent.ID;\n\t\t\t\t\t\t\tvar geoRelationships = connections.get( geoID );\n\n\t\t\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\t\t\tvar model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\t\t\tmodel.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparsePoseNodes: function () {\n\n\t\t\t\tvar bindMatrices = {};\n\n\t\t\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\t\t\tfor ( var nodeID in BindPoseNode ) {\n\n\t\t\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {\n\n\t\t\t\t\t\t\tvar poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn bindMatrices;\n\n\t\t\t},\n\n\t\t\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\t\t\tcreateAmbientLight: function () {\n\n\t\t\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\t\tvar ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\t\tvar r = ambientColor[ 0 ];\n\t\t\t\t\tvar g = ambientColor[ 1 ];\n\t\t\t\t\tvar b = ambientColor[ 2 ];\n\n\t\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\t\tvar color = new THREE.Color( r, g, b );\n\t\t\t\t\t\tsceneGraph.add( new THREE.AmbientLight( color, 1 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetupMorphMaterials: function () {\n\n\t\t\t\tvar self = this;\n\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\tif ( child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length ) {\n\n\t\t\t\t\t\t\tif ( Array.isArray( child.material ) ) {\n\n\t\t\t\t\t\t\t\tchild.material.forEach( function ( material, i ) {\n\n\t\t\t\t\t\t\t\t\tself.setupMorphMaterial( child, material, i );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tself.setupMorphMaterial( child, child.material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t},\n\n\t\t\tsetupMorphMaterial: function ( child, material, index ) {\n\n\t\t\t\tvar uuid = child.uuid;\n\t\t\t\tvar matUuid = material.uuid;\n\n\t\t\t\t// if a geometry has morph targets, it cannot share the material with other geometries\n\t\t\t\tvar sharedMat = false;\n\n\t\t\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\t\t\tif ( node.isMesh ) {\n\n\t\t\t\t\t\tif ( Array.isArray( node.material ) ) {\n\n\t\t\t\t\t\t\tnode.material.forEach( function ( mat ) {\n\n\t\t\t\t\t\t\t\tif ( mat.uuid === matUuid && node.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else if ( node.material.uuid === matUuid && node.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( sharedMat === true ) {\n\n\t\t\t\t\tvar clonedMat = material.clone();\n\t\t\t\t\tclonedMat.morphTargets = true;\n\n\t\t\t\t\tif ( index === undefined ) child.material = clonedMat;\n\t\t\t\t\telse child.material[ index ] = clonedMat;\n\n\t\t\t\t} else material.morphTargets = true;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// parse Geometry data from FBXTree and return map of BufferGeometries\n\t\tfunction GeometryParser() {}\n\n\t\tGeometryParser.prototype = {\n\n\t\t\tconstructor: GeometryParser,\n\n\t\t\t// Parse nodes in FBXTree.Objects.Geometry\n\t\t\tparse: function ( deformers ) {\n\n\t\t\t\tvar geometryMap = new Map();\n\n\t\t\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\t\t\tfor ( var nodeID in geoNodes ) {\n\n\t\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\t\t\tvar geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn geometryMap;\n\n\t\t\t},\n\n\t\t\t// Parse single node in FBXTree.Objects.Geometry\n\t\t\tparseGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\t\tswitch ( geoNode.attrType ) {\n\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\n\t\t\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\t\t\tparseMeshGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\t\tvar skeletons = deformers.skeletons;\n\t\t\t\tvar morphTargets = [];\n\n\t\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t\t} );\n\n\t\t\t\t// don't create geometry if it is not associated with any models\n\t\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\t\treturn skeleton;\n\n\t\t\t\t}, null );\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t// Assume one model and get the preRotation from that\n\t\t\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\t\tvar transformData = {};\n\n\t\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\t\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t\t\t},\n\n\t\t\t// Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\t\t\tgenGeometry: function ( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\t\t\tvar geo = new THREE.BufferGeometry();\n\t\t\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\t\t\tvar geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\t\t\tvar buffers = this.genBuffers( geoInfo );\n\n\t\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\t\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\t\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\t\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\t\t\tgeo.setAttribute( 'color', new THREE.Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tgeo.setAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\t\t\tgeo.setAttribute( 'skinWeight', new THREE.Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t\t\t// used later to bind the skeleton to the model\n\t\t\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );\n\n\t\t\t\t\tvar normalAttribute = new THREE.Float32BufferAttribute( buffers.normal, 3 );\n\t\t\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\t\t\tvar name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t\t\t// the first uv buffer is just called 'uv'\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tname = 'uv';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.setAttribute( name, new THREE.Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\t\t\tvar prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\t\t\tvar startIndex = 0;\n\n\t\t\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\t\t\tvar lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\t\t\tvar lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t\t\t// using one of them\n\t\t\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\t\t\treturn geo;\n\n\t\t\t},\n\n\t\t\tparseGeoNode: function ( geoNode, skeleton ) {\n\n\t\t\t\tvar geoInfo = {};\n\n\t\t\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\t\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\t\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\t\t\tgeoInfo.uv = [];\n\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\t\t\t\t\t\ti ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeoInfo.weightTable = {};\n\n\t\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\t\t\tid: i,\n\t\t\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn geoInfo;\n\n\t\t\t},\n\n\t\t\tgenBuffers: function ( geoInfo ) {\n\n\t\t\t\tvar buffers = {\n\t\t\t\t\tvertex: [],\n\t\t\t\t\tnormal: [],\n\t\t\t\t\tcolors: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\tmaterialIndex: [],\n\t\t\t\t\tvertexWeights: [],\n\t\t\t\t\tweightsIndices: [],\n\t\t\t\t};\n\n\t\t\t\tvar polygonIndex = 0;\n\t\t\t\tvar faceLength = 0;\n\t\t\t\tvar displayedWeightsWarning = false;\n\n\t\t\t\t// these will hold data for a single face\n\t\t\t\tvar facePositionIndexes = [];\n\t\t\t\tvar faceNormals = [];\n\t\t\t\tvar faceColors = [];\n\t\t\t\tvar faceUVs = [];\n\t\t\t\tvar faceWeights = [];\n\t\t\t\tvar faceWeightIndices = [];\n\n\t\t\t\tvar self = this;\n\t\t\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\t\t\tvar endOfFace = false;\n\n\t\t\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t\t\t// A cube with quad faces looks like this:\n\t\t\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t\t\t//  }\n\t\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\t\t\tendOfFace = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar weightIndices = [];\n\t\t\t\t\tvar weights = [];\n\n\t\t\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t\t\t} );\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\t\t\tvar Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\t\t\tvar currentWeight = weight;\n\t\t\t\t\t\t\t\tvar currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\t\t\tvar tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\t\t\tweights = Weight;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\t\tvar materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceLength ++;\n\n\t\t\t\t\tif ( endOfFace ) {\n\n\t\t\t\t\t\tself.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\t\t\tpolygonIndex ++;\n\t\t\t\t\t\tfaceLength = 0;\n\n\t\t\t\t\t\t// reset arrays for the next face\n\t\t\t\t\t\tfacePositionIndexes = [];\n\t\t\t\t\t\tfaceNormals = [];\n\t\t\t\t\t\tfaceColors = [];\n\t\t\t\t\t\tfaceUVs = [];\n\t\t\t\t\t\tfaceWeights = [];\n\t\t\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn buffers;\n\n\t\t\t},\n\n\t\t\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\t\t\tgenFace: function ( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\t\t\tfor ( var i = 2; i < faceLength; i ++ ) {\n\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddMorphTargets: function ( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\t\t\tif ( morphTargets.length === 0 ) return;\n\n\t\t\t\tparentGeo.morphTargetsRelative = true;\n\n\t\t\t\tparentGeo.morphAttributes.position = [];\n\t\t\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\t\t\tvar self = this;\n\t\t\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\t\t\tvar morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\t\t\tself.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t},\n\n\t\t\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t\t\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\t\t\tgenMorphGeometry: function ( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\t\t\tvar vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\t\t\tvar morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\t\t\tvar indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\t\t\tvar length = parentGeo.attributes.position.count * 3;\n\t\t\t\tvar morphPositions = new Float32Array( length );\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\t\tvar morphIndex = indices[ i ] * 3;\n\n\t\t\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: add morph normal support\n\t\t\t\tvar morphGeoInfo = {\n\t\t\t\t\tvertexIndices: vertexIndices,\n\t\t\t\t\tvertexPositions: morphPositions,\n\n\t\t\t\t};\n\n\t\t\t\tvar morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\t\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\t\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\t\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t\t\t},\n\n\t\t\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\t\t\tparseNormals: function ( NormalNode ) {\n\n\t\t\t\tvar mappingType = NormalNode.MappingInformationType;\n\t\t\t\tvar referenceType = NormalNode.ReferenceInformationType;\n\t\t\t\tvar buffer = NormalNode.Normals.a;\n\t\t\t\tvar indexBuffer = [];\n\t\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 3,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tindices: indexBuffer,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\t\t\tparseUVs: function ( UVNode ) {\n\n\t\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\t\tvar buffer = UVNode.UV.a;\n\t\t\t\tvar indexBuffer = [];\n\t\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 2,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tindices: indexBuffer,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\t\t\tparseVertexColors: function ( ColorNode ) {\n\n\t\t\t\tvar mappingType = ColorNode.MappingInformationType;\n\t\t\t\tvar referenceType = ColorNode.ReferenceInformationType;\n\t\t\t\tvar buffer = ColorNode.Colors.a;\n\t\t\t\tvar indexBuffer = [];\n\t\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 4,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tindices: indexBuffer,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\t\t\tparseMaterialIndices: function ( MaterialNode ) {\n\n\t\t\t\tvar mappingType = MaterialNode.MappingInformationType;\n\t\t\t\tvar referenceType = MaterialNode.ReferenceInformationType;\n\n\t\t\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdataSize: 1,\n\t\t\t\t\t\tbuffer: [ 0 ],\n\t\t\t\t\t\tindices: [ 0 ],\n\t\t\t\t\t\tmappingType: 'AllSame',\n\t\t\t\t\t\treferenceType: referenceType\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tvar materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t\t\t// for conforming with the other functions we've written for other data.\n\t\t\t\tvar materialIndices = [];\n\n\t\t\t\tfor ( var i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\t\t\tmaterialIndices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 1,\n\t\t\t\t\tbuffer: materialIndexBuffer,\n\t\t\t\t\tindices: materialIndices,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\t\t\tparseNurbsGeometry: function ( geoNode ) {\n\n\t\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t\t}\n\n\t\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t\t}\n\n\t\t\t\tvar degree = order - 1;\n\n\t\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\t\tvar controlPoints = [];\n\t\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar startKnot, endKnot;\n\n\t\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\t\tstartKnot = degree;\n\t\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t\t} );\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\t\treturn geometry;\n\n\t\t\t},\n\n\t\t};\n\n\t\t// parse animation data from FBXTree\n\t\tfunction AnimationParser() {}\n\n\t\tAnimationParser.prototype = {\n\n\t\t\tconstructor: AnimationParser,\n\n\t\t\t// take raw animation clips and turn them into three.js animation clips\n\t\t\tparse: function () {\n\n\t\t\t\tvar animationClips = [];\n\n\t\t\t\tvar rawClips = this.parseClips();\n\n\t\t\t\tif ( rawClips !== undefined ) {\n\n\t\t\t\t\tfor ( var key in rawClips ) {\n\n\t\t\t\t\t\tvar rawClip = rawClips[ key ];\n\n\t\t\t\t\t\tvar clip = this.addClip( rawClip );\n\n\t\t\t\t\t\tanimationClips.push( clip );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn animationClips;\n\n\t\t\t},\n\n\t\t\tparseClips: function () {\n\n\t\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t\t\t// if this is undefined we can safely assume there are no animations\n\t\t\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\t\t\tvar curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\t\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\t\t\tvar layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\t\t\tvar rawClips = this.parseAnimStacks( layersMap );\n\n\t\t\t\treturn rawClips;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t\t\t// and is referenced by an AnimationLayer\n\t\t\tparseAnimationCurveNodes: function () {\n\n\t\t\t\tvar rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\t\t\tvar curveNodesMap = new Map();\n\n\t\t\t\tfor ( var nodeID in rawCurveNodes ) {\n\n\t\t\t\t\tvar rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\t\t\tvar curveNode = {\n\n\t\t\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\t\t\tcurves: {},\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn curveNodesMap;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t\t\t// axis ( e.g. times and values of x rotation)\n\t\t\tparseAnimationCurves: function ( curveNodesMap ) {\n\n\t\t\t\tvar rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t\t\t// clearly, this should be optimised to\n\t\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\t\t\tfor ( var nodeID in rawCurves ) {\n\n\t\t\t\t\tvar animationCurve = {\n\n\t\t\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t\t\t};\n\n\t\t\t\t\tvar relationships = connections.get( animationCurve.id );\n\n\t\t\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\t\t\tvar animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\t\t\tvar animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\t\t\tparseAnimationLayers: function ( curveNodesMap ) {\n\n\t\t\t\tvar rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\t\t\tvar layersMap = new Map();\n\n\t\t\t\tfor ( var nodeID in rawLayers ) {\n\n\t\t\t\t\tvar layerCurveNodes = [];\n\n\t\t\t\t\tvar connection = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\t\t\tvar children = connection.children;\n\n\t\t\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\t\t\tvar curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tvar modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tvar deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\tvar morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\t\t\tvar geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\t\t\tvar modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn layersMap;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\t\t\tparseAnimStacks: function ( layersMap ) {\n\n\t\t\t\tvar rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t\t\t// connect the stacks (clips) up to the layers\n\t\t\t\tvar rawClips = {};\n\n\t\t\t\tfor ( var nodeID in rawStacks ) {\n\n\t\t\t\t\tvar children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\t\t\tlayer: layer,\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\treturn rawClips;\n\n\t\t\t},\n\n\t\t\taddClip: function ( rawClip ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tvar self = this;\n\t\t\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\t\t\ttracks = tracks.concat( self.generateTracks( rawTracks ) );\n\n\t\t\t\t} );\n\n\t\t\t\treturn new THREE.AnimationClip( rawClip.name, - 1, tracks );\n\n\t\t\t},\n\n\t\t\tgenerateTracks: function ( rawTracks ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tvar initialPosition = new THREE.Vector3();\n\t\t\t\tvar initialRotation = new THREE.Quaternion();\n\t\t\t\tvar initialScale = new THREE.Vector3();\n\n\t\t\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\t\t\tinitialPosition = initialPosition.toArray();\n\t\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\n\t\t\t\tinitialScale = initialScale.toArray();\n\n\t\t\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\t\t\tvar positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\t\t\tvar rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\t\t\tvar scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\t\t\tvar morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t\t\t}\n\n\t\t\t\treturn tracks;\n\n\t\t\t},\n\n\t\t\tgenerateVectorTrack: function ( modelName, curves, initialValue, type ) {\n\n\t\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\t\treturn new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t\t\t},\n\n\t\t\tgenerateRotationTrack: function ( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\n\n\t\t\t\tif ( curves.x !== undefined ) {\n\n\t\t\t\t\tthis.interpolateRotations( curves.x );\n\t\t\t\t\tcurves.x.values = curves.x.values.map( THREE.MathUtils.degToRad );\n\n\t\t\t\t}\n\t\t\t\tif ( curves.y !== undefined ) {\n\n\t\t\t\t\tthis.interpolateRotations( curves.y );\n\t\t\t\t\tcurves.y.values = curves.y.values.map( THREE.MathUtils.degToRad );\n\n\t\t\t\t}\n\t\t\t\tif ( curves.z !== undefined ) {\n\n\t\t\t\t\tthis.interpolateRotations( curves.z );\n\t\t\t\t\tcurves.z.values = curves.z.values.map( THREE.MathUtils.degToRad );\n\n\t\t\t\t}\n\n\t\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\t\tif ( preRotation !== undefined ) {\n\n\t\t\t\t\tpreRotation = preRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\t\t\tpreRotation = new THREE.Euler().fromArray( preRotation );\n\t\t\t\t\tpreRotation = new THREE.Quaternion().setFromEuler( preRotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( postRotation !== undefined ) {\n\n\t\t\t\t\tpostRotation = postRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\t\t\tpostRotation = new THREE.Euler().fromArray( postRotation );\n\t\t\t\t\tpostRotation = new THREE.Quaternion().setFromEuler( postRotation ).inverse();\n\n\t\t\t\t}\n\n\t\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\t\tvar euler = new THREE.Euler();\n\n\t\t\t\tvar quaternionValues = [];\n\n\t\t\t\tfor ( var i = 0; i < values.length; i += 3 ) {\n\n\t\t\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\n\t\t\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t\t\t}\n\n\t\t\t\treturn new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t\t\t},\n\n\t\t\tgenerateMorphTrack: function ( rawTracks ) {\n\n\t\t\t\tvar curves = rawTracks.DeformPercent.curves.morph;\n\t\t\t\tvar values = curves.values.map( function ( val ) {\n\n\t\t\t\t\treturn val / 100;\n\n\t\t\t\t} );\n\n\t\t\t\tvar morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\t\t\treturn new THREE.NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t\t\t},\n\n\t\t\t// For all animated objects, times are defined separately for each axis\n\t\t\t// Here we'll combine the times into one sorted array without duplicates\n\t\t\tgetTimesForAllAxes: function ( curves ) {\n\n\t\t\t\tvar times = [];\n\n\t\t\t\t// first join together the times for each axis, if defined\n\t\t\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\t\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\t\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t\t\t// then sort them and remove duplicates\n\t\t\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a - b;\n\n\t\t\t\t} ).filter( function ( elem, index, array ) {\n\n\t\t\t\t\treturn array.indexOf( elem ) == index;\n\n\t\t\t\t} );\n\n\t\t\t\treturn times;\n\n\t\t\t},\n\n\t\t\tgetKeyframeTrackValues: function ( times, curves, initialValue ) {\n\n\t\t\t\tvar prevValue = initialValue;\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tvar xIndex = - 1;\n\t\t\t\tvar yIndex = - 1;\n\t\t\t\tvar zIndex = - 1;\n\n\t\t\t\ttimes.forEach( function ( time ) {\n\n\t\t\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t\t\t// if there is an x value defined for this frame, use that\n\t\t\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\t\t\tvar xValue = curves.x.values[ xIndex ];\n\t\t\t\t\t\tvalues.push( xValue );\n\t\t\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\t\t\tvar yValue = curves.y.values[ yIndex ];\n\t\t\t\t\t\tvalues.push( yValue );\n\t\t\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\t\t\tvar zValue = curves.z.values[ zIndex ];\n\t\t\t\t\t\tvalues.push( zValue );\n\t\t\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn values;\n\n\t\t\t},\n\n\t\t\t// Rotations are defined as Euler angles which can have values  of any size\n\t\t\t// These will be converted to quaternions which don't support values greater than\n\t\t\t// PI, so we'll interpolate large rotations\n\t\t\tinterpolateRotations: function ( curve ) {\n\n\t\t\t\tfor ( var i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\t\t\tvar initialValue = curve.values[ i - 1 ];\n\t\t\t\t\tvar valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\t\t\tvar absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\t\t\tvar numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\t\t\tvar step = valuesSpan / numSubIntervals;\n\t\t\t\t\t\tvar nextValue = initialValue + step;\n\n\t\t\t\t\t\tvar initialTime = curve.times[ i - 1 ];\n\t\t\t\t\t\tvar timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\t\t\tvar interval = timeSpan / numSubIntervals;\n\t\t\t\t\t\tvar nextTime = initialTime + interval;\n\n\t\t\t\t\t\tvar interpolatedTimes = [];\n\t\t\t\t\t\tvar interpolatedValues = [];\n\n\t\t\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\t\t\tnextValue += step;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t};\n\n\t\t// parse an FBX file in ASCII format\n\t\tfunction TextParser() {}\n\n\t\tTextParser.prototype = {\n\n\t\t\tconstructor: TextParser,\n\n\t\t\tgetPrevNode: function () {\n\n\t\t\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t\t\t},\n\n\t\t\tgetCurrentNode: function () {\n\n\t\t\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t\t\t},\n\n\t\t\tgetCurrentProp: function () {\n\n\t\t\t\treturn this.currentProp;\n\n\t\t\t},\n\n\t\t\tpushStack: function ( node ) {\n\n\t\t\t\tthis.nodeStack.push( node );\n\t\t\t\tthis.currentIndent += 1;\n\n\t\t\t},\n\n\t\t\tpopStack: function () {\n\n\t\t\t\tthis.nodeStack.pop();\n\t\t\t\tthis.currentIndent -= 1;\n\n\t\t\t},\n\n\t\t\tsetCurrentProp: function ( val, name ) {\n\n\t\t\t\tthis.currentProp = val;\n\t\t\t\tthis.currentPropName = name;\n\n\t\t\t},\n\n\t\t\tparse: function ( text ) {\n\n\t\t\t\tthis.currentIndent = 0;\n\n\t\t\t\tthis.allNodes = new FBXTree();\n\t\t\t\tthis.nodeStack = [];\n\t\t\t\tthis.currentProp = [];\n\t\t\t\tthis.currentPropName = '';\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tvar split = text.split( /[\\r\\n]+/ );\n\n\t\t\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\t\t\tvar matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\t\t\tvar matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\t\t\tvar matchBeginning = line.match( '^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\t\t\tvar matchProperty = line.match( '^\\\\t{' + ( self.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\t\t\tvar matchEnd = line.match( '^\\\\t{' + ( self.currentIndent - 1 ) + '}}' );\n\n\t\t\t\t\tif ( matchBeginning ) {\n\n\t\t\t\t\t\tself.parseNodeBegin( line, matchBeginning );\n\n\t\t\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\t\t\tself.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\t\t\tself.popStack();\n\n\t\t\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\t\t\tself.parseNodePropertyContinued( line );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn this.allNodes;\n\n\t\t\t},\n\n\t\t\tparseNodeBegin: function ( line, property ) {\n\n\t\t\t\tvar nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t\tvar nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t\t} );\n\n\t\t\t\tvar node = { name: nodeName };\n\t\t\t\tvar attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t\t// a top node\n\t\t\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t\t\t} else { // a subnode\n\n\t\t\t\t\t// if the subnode already exists, append it\n\t\t\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\t\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\t\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\t\t\tthis.pushStack( node );\n\n\t\t\t},\n\n\t\t\tparseNodeAttr: function ( attrs ) {\n\n\t\t\t\tvar id = attrs[ 0 ];\n\n\t\t\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar name = '', type = '';\n\n\t\t\t\tif ( attrs.length > 1 ) {\n\n\t\t\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\t\t\ttype = attrs[ 2 ];\n\n\t\t\t\t}\n\n\t\t\t\treturn { id: id, name: name, type: type };\n\n\t\t\t},\n\n\t\t\tparseNodeProperty: function ( line, property, contentLine ) {\n\n\t\t\t\tvar propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\t\t\tvar propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t\t\t//\tContent: ,\n\t\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\t\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t\t\t}\n\n\t\t\t\tvar currentNode = this.getCurrentNode();\n\t\t\t\tvar parentName = currentNode.name;\n\n\t\t\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// Connections\n\t\t\t\tif ( propName === 'C' ) {\n\n\t\t\t\t\tvar connProps = propValue.split( ',' ).slice( 1 );\n\t\t\t\t\tvar from = parseInt( connProps[ 0 ] );\n\t\t\t\t\tvar to = parseInt( connProps[ 1 ] );\n\n\t\t\t\t\tvar rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tpropName = 'connections';\n\t\t\t\t\tpropValue = [ from, to ];\n\t\t\t\t\tappend( propValue, rest );\n\n\t\t\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Node\n\t\t\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t\t\t// connections\n\t\t\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\t\t\telse currentNode.a = propValue;\n\n\t\t\t\t}\n\n\t\t\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\t\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseNodePropertyContinued: function ( line ) {\n\n\t\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t\tcurrentNode.a += line;\n\n\t\t\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t\t\t// so convert the string to an array\n\t\t\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// parse \"Property70\"\n\t\t\tparseNodeSpecialProperty: function ( line, propName, propValue ) {\n\n\t\t\t\t// split this\n\t\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t\t\t// into array like below\n\t\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\t\t\tvar props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t\t\t} );\n\n\t\t\t\tvar innerPropName = props[ 0 ];\n\t\t\t\tvar innerPropType1 = props[ 1 ];\n\t\t\t\tvar innerPropType2 = props[ 2 ];\n\t\t\t\tvar innerPropFlag = props[ 3 ];\n\t\t\t\tvar innerPropValue = props[ 4 ];\n\n\t\t\t\t// cast values where needed, otherwise leave as strings\n\t\t\t\tswitch ( innerPropType1 ) {\n\n\t\t\t\t\tcase 'int':\n\t\t\t\t\tcase 'enum':\n\t\t\t\t\tcase 'bool':\n\t\t\t\t\tcase 'ULongLong':\n\t\t\t\t\tcase 'double':\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\tcase 'FieldOfView':\n\t\t\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Color':\n\t\t\t\t\tcase 'ColorRGB':\n\t\t\t\t\tcase 'Vector3D':\n\t\t\t\t\tcase 'Lcl_Translation':\n\t\t\t\t\tcase 'Lcl_Rotation':\n\t\t\t\t\tcase 'Lcl_Scaling':\n\t\t\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// CAUTION: these props must append to parent's parent\n\t\t\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t};\n\n\t\t\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t\t\t},\n\n\t\t};\n\n\t\t// Parse an FBX file in Binary format\n\t\tfunction BinaryParser() {}\n\n\t\tBinaryParser.prototype = {\n\n\t\t\tconstructor: BinaryParser,\n\n\t\t\tparse: function ( buffer ) {\n\n\t\t\t\tvar reader = new BinaryReader( buffer );\n\t\t\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\t\t\tvar version = reader.getUint32();\n\n\t\t\t\tconsole.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n\t\t\t\tvar allNodes = new FBXTree();\n\n\t\t\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\t\t\tvar node = this.parseNode( reader, version );\n\t\t\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t\t\t}\n\n\t\t\t\treturn allNodes;\n\n\t\t\t},\n\n\t\t\t// Check if reader has reached the end of content.\n\t\t\tendOfContent: function ( reader ) {\n\n\t\t\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t\t\t// - 16bytes: magic\n\t\t\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t\t\t// - 4bytes: magic\n\t\t\t\t// - 4bytes: version\n\t\t\t\t// - 120bytes: zero\n\t\t\t\t// - 16bytes: magic\n\t\t\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// recursively parse nodes until the end of the file is reached\n\t\t\tparseNode: function ( reader, version ) {\n\n\t\t\t\tvar node = {};\n\n\t\t\t\t// The first three data sizes depends on version.\n\t\t\t\tvar endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\t\t\tvar numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t\t// note: do not remove this even if you get a linter warning as it moves the buffer forward\n\t\t\t\tvar propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t\tvar nameLen = reader.getUint8();\n\t\t\t\tvar name = reader.getString( nameLen );\n\n\t\t\t\t// Regards this node as NULL-record if endOffset is zero\n\t\t\t\tif ( endOffset === 0 ) return null;\n\n\t\t\t\tvar propertyList = [];\n\n\t\t\t\tfor ( var i = 0; i < numProperties; i ++ ) {\n\n\t\t\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\t\t\tvar id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\t\t\tvar attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\t\t\tvar attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t\t\t// check if this node represents just a single property\n\t\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\t\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\t\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\t\t\tvar subNode = this.parseNode( reader, version );\n\n\t\t\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t\t\t}\n\n\t\t\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\t\t\tif ( typeof id === 'number' ) node.id = id;\n\t\t\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\t\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\t\t\tif ( name !== '' ) node.name = name;\n\n\t\t\t\treturn node;\n\n\t\t\t},\n\n\t\t\tparseSubNode: function ( name, node, subNode ) {\n\n\t\t\t\t// special case: child node is single property\n\t\t\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\t\t\tvar value = subNode.propertyList[ 0 ];\n\n\t\t\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\t\tsubNode.a = value;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\t\t\tnode.connections = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.connections.push( array );\n\n\t\t\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\t\t\tvar keys = Object.keys( subNode );\n\n\t\t\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\t\t\tvar innerPropName = subNode.propertyList[ 0 ];\n\t\t\t\t\tvar innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\t\t\tvar innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\t\t\tvar innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\t\t\tvar innerPropValue;\n\n\t\t\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\t\t\tinnerPropValue = [\n\t\t\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t\t\t];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// this will be copied to parent, see above\n\t\t\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t\t};\n\n\t\t\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseProperty: function ( reader ) {\n\n\t\t\t\tvar type = reader.getString( 1 );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'C':\n\t\t\t\t\t\treturn reader.getBoolean();\n\n\t\t\t\t\tcase 'D':\n\t\t\t\t\t\treturn reader.getFloat64();\n\n\t\t\t\t\tcase 'F':\n\t\t\t\t\t\treturn reader.getFloat32();\n\n\t\t\t\t\tcase 'I':\n\t\t\t\t\t\treturn reader.getInt32();\n\n\t\t\t\t\tcase 'L':\n\t\t\t\t\t\treturn reader.getInt64();\n\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\t\t\tcase 'S':\n\t\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\t\treturn reader.getString( length );\n\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\treturn reader.getInt16();\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\tcase 'd':\n\t\t\t\t\tcase 'f':\n\t\t\t\t\tcase 'i':\n\t\t\t\t\tcase 'l':\n\n\t\t\t\t\t\tvar arrayLength = reader.getUint32();\n\t\t\t\t\t\tvar encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\t\t\tvar compressedLength = reader.getUint32();\n\n\t\t\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\t\t\tvar reader2 = new BinaryReader( inflate.decompress().buffer );\n\n\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction BinaryReader( buffer, littleEndian ) {\n\n\t\t\tthis.dv = new DataView( buffer );\n\t\t\tthis.offset = 0;\n\t\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t\t}\n\n\t\tBinaryReader.prototype = {\n\n\t\t\tconstructor: BinaryReader,\n\n\t\t\tgetOffset: function () {\n\n\t\t\t\treturn this.offset;\n\n\t\t\t},\n\n\t\t\tsize: function () {\n\n\t\t\t\treturn this.dv.buffer.byteLength;\n\n\t\t\t},\n\n\t\t\tskip: function ( length ) {\n\n\t\t\t\tthis.offset += length;\n\n\t\t\t},\n\n\t\t\t// seems like true/false representation depends on exporter.\n\t\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t\t\t// then sees LSB.\n\t\t\tgetBoolean: function () {\n\n\t\t\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t\t\t},\n\n\t\t\tgetBooleanArray: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getBoolean() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetUint8: function () {\n\n\t\t\t\tvar value = this.dv.getUint8( this.offset );\n\t\t\t\tthis.offset += 1;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetInt16: function () {\n\n\t\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 2;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetInt32: function () {\n\n\t\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 4;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetInt32Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getInt32() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetUint32: function () {\n\n\t\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 4;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t\t\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t\t\t// There's a possibility that this method returns wrong value if the value\n\t\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t\t\t// TODO: safely handle 64-bit integer\n\t\t\tgetInt64: function () {\n\n\t\t\t\tvar low, high;\n\n\t\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\t\tlow = this.getUint32();\n\t\t\t\t\thigh = this.getUint32();\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = this.getUint32();\n\t\t\t\t\tlow = this.getUint32();\n\n\t\t\t\t}\n\n\t\t\t\t// calculate negative value\n\t\t\t\tif ( high & 0x80000000 ) {\n\n\t\t\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t\t\t}\n\n\t\t\t\treturn high * 0x100000000 + low;\n\n\t\t\t},\n\n\t\t\tgetInt64Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getInt64() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\t// Note: see getInt64() comment\n\t\t\tgetUint64: function () {\n\n\t\t\t\tvar low, high;\n\n\t\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\t\tlow = this.getUint32();\n\t\t\t\t\thigh = this.getUint32();\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = this.getUint32();\n\t\t\t\t\tlow = this.getUint32();\n\n\t\t\t\t}\n\n\t\t\t\treturn high * 0x100000000 + low;\n\n\t\t\t},\n\n\t\t\tgetFloat32: function () {\n\n\t\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 4;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetFloat32Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getFloat32() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetFloat64: function () {\n\n\t\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 8;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetFloat64Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getFloat64() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetArrayBuffer: function ( size ) {\n\n\t\t\t\tvar value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\t\t\tthis.offset += size;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetString: function ( size ) {\n\n\t\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta[ i ] = this.getUint8();\n\n\t\t\t\t}\n\n\t\t\t\tvar nullByte = a.indexOf( 0 );\n\t\t\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n\t\t// and BinaryParser( FBX Binary format)\n\t\tfunction FBXTree() {}\n\n\t\tFBXTree.prototype = {\n\n\t\t\tconstructor: FBXTree,\n\n\t\t\tadd: function ( key, val ) {\n\n\t\t\t\tthis[ key ] = val;\n\n\t\t\t},\n\n\t\t};\n\n\t\t// ************** UTILITY FUNCTIONS **************\n\n\t\tfunction isFbxFormatBinary( buffer ) {\n\n\t\t\tvar CORRECT = 'Kaydara FBX Binary  \\0';\n\n\t\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n\t\t}\n\n\t\tfunction isFbxFormatASCII( text ) {\n\n\t\t\tvar CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\t\t\tvar cursor = 0;\n\n\t\t\tfunction read( offset ) {\n\n\t\t\t\tvar result = text[ offset - 1 ];\n\t\t\t\ttext = text.slice( cursor + offset );\n\t\t\t\tcursor ++;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < CORRECT.length; ++ i ) {\n\n\t\t\t\tvar num = read( 1 );\n\t\t\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction getFbxVersion( text ) {\n\n\t\t\tvar versionRegExp = /FBXVersion: (\\d+)/;\n\t\t\tvar match = text.match( versionRegExp );\n\t\t\tif ( match ) {\n\n\t\t\t\tvar version = parseInt( match[ 1 ] );\n\t\t\t\treturn version;\n\n\t\t\t}\n\t\t\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n\t\t}\n\n\t\t// Converts FBX ticks into real time seconds.\n\t\tfunction convertFBXTimeToSeconds( time ) {\n\n\t\t\treturn time / 46186158000;\n\n\t\t}\n\n\t\tvar dataArray = [];\n\n\t\t// extracts the data from the correct position in the FBX array based on indexing type\n\t\tfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\t\t\tvar index;\n\n\t\t\tswitch ( infoObject.mappingType ) {\n\n\t\t\t\tcase 'ByPolygonVertex' :\n\t\t\t\t\tindex = polygonVertexIndex;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ByPolygon' :\n\t\t\t\t\tindex = polygonIndex;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ByVertice' :\n\t\t\t\t\tindex = vertexIndex;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'AllSame' :\n\t\t\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault :\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t\t\t}\n\n\t\t\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\t\t\tvar from = index * infoObject.dataSize;\n\t\t\tvar to = from + infoObject.dataSize;\n\n\t\t\treturn slice( dataArray, infoObject.buffer, from, to );\n\n\t\t}\n\n\t\tvar tempEuler = new THREE.Euler();\n\t\tvar tempVec = new THREE.Vector3();\n\n\t\t// generate transformation from FBX transform data\n\t\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n\t\t// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\t\tfunction generateTransform( transformData ) {\n\n\t\t\tvar lTranslationM = new THREE.Matrix4();\n\t\t\tvar lPreRotationM = new THREE.Matrix4();\n\t\t\tvar lRotationM = new THREE.Matrix4();\n\t\t\tvar lPostRotationM = new THREE.Matrix4();\n\n\t\t\tvar lScalingM = new THREE.Matrix4();\n\t\t\tvar lScalingPivotM = new THREE.Matrix4();\n\t\t\tvar lScalingOffsetM = new THREE.Matrix4();\n\t\t\tvar lRotationOffsetM = new THREE.Matrix4();\n\t\t\tvar lRotationPivotM = new THREE.Matrix4();\n\n\t\t\tvar lParentGX = new THREE.Matrix4();\n\t\t\tvar lGlobalT = new THREE.Matrix4();\n\n\t\t\tvar inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\t\t\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\t\t\tif ( transformData.preRotation ) {\n\n\t\t\t\tvar array = transformData.preRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\tarray.push( transformData.eulerOrder );\n\t\t\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\t}\n\n\t\t\tif ( transformData.rotation ) {\n\n\t\t\t\tvar array = transformData.rotation.map( THREE.MathUtils.degToRad );\n\t\t\t\tarray.push( transformData.eulerOrder );\n\t\t\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\t}\n\n\t\t\tif ( transformData.postRotation ) {\n\n\t\t\t\tvar array = transformData.postRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\tarray.push( transformData.eulerOrder );\n\t\t\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\t}\n\n\t\t\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t\t\t// Pivots and offsets\n\t\t\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\t\t\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\t\t\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\t\t\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t\t\t// parent transform\n\t\t\tif ( transformData.parentMatrixWorld ) lParentGX = transformData.parentMatrixWorld;\n\n\t\t\t// Global Rotation\n\t\t\tvar lLRM = lPreRotationM.multiply( lRotationM ).multiply( lPostRotationM );\n\t\t\tvar lParentGRM = new THREE.Matrix4();\n\t\t\tlParentGX.extractRotation( lParentGRM );\n\n\t\t\t// Global Shear*Scaling\n\t\t\tvar lParentTM = new THREE.Matrix4();\n\t\t\tvar lLSM;\n\t\t\tvar lParentGSM;\n\t\t\tvar lParentGRSM;\n\n\t\t\tlParentTM.copyPosition( lParentGX );\n\t\t\tlParentGRSM = lParentTM.getInverse( lParentTM ).multiply( lParentGX );\n\t\t\tlParentGSM = lParentGRM.getInverse( lParentGRM ).multiply( lParentGRSM );\n\t\t\tlLSM = lScalingM;\n\n\t\t\tvar lGlobalRS;\n\t\t\tif ( inheritType === 0 ) {\n\n\t\t\t\tlGlobalRS = lParentGRM.multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t\t\t} else if ( inheritType === 1 ) {\n\n\t\t\t\tlGlobalRS = lParentGRM.multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t\t\t} else {\n\n\t\t\t\tvar lParentLSM = new THREE.Matrix4().copy( lScalingM );\n\n\t\t\t\tvar lParentGSM_noLocal = lParentGSM.multiply( lParentLSM.getInverse( lParentLSM ) );\n\n\t\t\t\tlGlobalRS = lParentGRM.multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t\t\t}\n\n\t\t\t// Calculate the local transform matrix\n\t\t\tvar lTransform = lTranslationM.multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM.getInverse( lRotationPivotM ) ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM.getInverse( lScalingPivotM ) );\n\n\t\t\tvar lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition( lTransform );\n\n\t\t\tvar lGlobalTranslation = lParentGX.multiply( lLocalTWithAllPivotAndOffsetInfo );\n\t\t\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\t\t\tlTransform = lGlobalT.multiply( lGlobalRS );\n\n\t\t\treturn lTransform;\n\n\t\t}\n\n\t\t// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n\t\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\t\tfunction getEulerOrder( order ) {\n\n\t\t\torder = order || 0;\n\n\t\t\tvar enums = [\n\t\t\t\t'ZYX', // -> XYZ extrinsic\n\t\t\t\t'YZX', // -> XZY extrinsic\n\t\t\t\t'XZY', // -> YZX extrinsic\n\t\t\t\t'ZXY', // -> YXZ extrinsic\n\t\t\t\t'YXZ', // -> ZXY extrinsic\n\t\t\t\t'XYZ', // -> ZYX extrinsic\n\t\t\t\t//'SphericXYZ', // not possible to support\n\t\t\t];\n\n\t\t\tif ( order === 6 ) {\n\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\t\t\treturn enums[ 0 ];\n\n\t\t\t}\n\n\t\t\treturn enums[ order ];\n\n\t\t}\n\n\t\t// Parses comma separated list of numbers and returns them an array.\n\t\t// Used internally by the TextParser\n\t\tfunction parseNumberArray( value ) {\n\n\t\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\t\treturn parseFloat( val );\n\n\t\t\t} );\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction convertArrayBufferToString( buffer, from, to ) {\n\n\t\t\tif ( from === undefined ) from = 0;\n\t\t\tif ( to === undefined ) to = buffer.byteLength;\n\n\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n\t\t}\n\n\t\tfunction append( a, b ) {\n\n\t\t\tfor ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\t\t\ta[ j ] = b[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction slice( a, b, from, to ) {\n\n\t\t\tfor ( var i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\t\t\ta[ j ] = b[ i ];\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t}\n\n\t\t// inject array a2 into array a1 at index\n\t\tfunction inject( a1, index, a2 ) {\n\n\t\t\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n\t\t}\n\n\t\treturn FBXLoader;\n\n\t} )();\n\t\n\treturn THREE.FBXLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/GCodeLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * THREE.GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n\t *\n\t * Gcode files are composed by commands used by machines to create objects.\n\t *\n\t * @class THREE.GCodeLoader\n\t * @param {Manager} manager Loading manager.\n\t * @author tentone\n\t * @author joewalnes\n\t */\n\n\tTHREE.GCodeLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.splitLayer = false;\n\n\t};\n\n\tTHREE.GCodeLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.GCodeLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar self = this;\n\n\t\t\tvar loader = new THREE.FileLoader( self.manager );\n\t\t\tloader.setPath( self.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( self.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tvar state = { x: 0, y: 0, z: 0, e: 0, f: 0, extruding: false, relative: false };\n\t\t\tvar layers = [];\n\n\t\t\tvar currentLayer = undefined;\n\n\t\t\tvar pathMaterial = new THREE.LineBasicMaterial( { color: 0xFF0000 } );\n\t\t\tpathMaterial.name = 'path';\n\n\t\t\tvar extrudingMaterial = new THREE.LineBasicMaterial( { color: 0x00FF00 } );\n\t\t\textrudingMaterial.name = 'extruded';\n\n\t\t\tfunction newLayer( line ) {\n\n\t\t\t\tcurrentLayer = { vertex: [], pathVertex: [], z: line.z };\n\t\t\t\tlayers.push( currentLayer );\n\n\t\t\t}\n\n\t\t\t//Create lie segment between p1 and p2\n\t\t\tfunction addSegment( p1, p2 ) {\n\n\t\t\t\tif ( currentLayer === undefined ) {\n\n\t\t\t\t\tnewLayer( p1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( line.extruding ) {\n\n\t\t\t\t\tcurrentLayer.vertex.push( p1.x, p1.y, p1.z );\n\t\t\t\t\tcurrentLayer.vertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentLayer.pathVertex.push( p1.x, p1.y, p1.z );\n\t\t\t\t\tcurrentLayer.pathVertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction delta( v1, v2 ) {\n\n\t\t\t\treturn state.relative ? v2 : v2 - v1;\n\n\t\t\t}\n\n\t\t\tfunction absolute( v1, v2 ) {\n\n\t\t\t\treturn state.relative ? v1 + v2 : v2;\n\n\t\t\t}\n\n\t\t\tvar lines = data.replace( /;.+/g, '' ).split( '\\n' );\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar tokens = lines[ i ].split( ' ' );\n\t\t\t\tvar cmd = tokens[ 0 ].toUpperCase();\n\n\t\t\t\t//Argumments\n\t\t\t\tvar args = {};\n\t\t\t\ttokens.splice( 1 ).forEach( function ( token ) {\n\n\t\t\t\t\tif ( token[ 0 ] !== undefined ) {\n\n\t\t\t\t\t\tvar key = token[ 0 ].toLowerCase();\n\t\t\t\t\t\tvar value = parseFloat( token.substring( 1 ) );\n\t\t\t\t\t\targs[ key ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t//Process commands\n\t\t\t\t//G0/G1 – Linear Movement\n\t\t\t\tif ( cmd === 'G0' || cmd === 'G1' ) {\n\n\t\t\t\t\tvar line = {\n\t\t\t\t\t\tx: args.x !== undefined ? absolute( state.x, args.x ) : state.x,\n\t\t\t\t\t\ty: args.y !== undefined ? absolute( state.y, args.y ) : state.y,\n\t\t\t\t\t\tz: args.z !== undefined ? absolute( state.z, args.z ) : state.z,\n\t\t\t\t\t\te: args.e !== undefined ? absolute( state.e, args.e ) : state.e,\n\t\t\t\t\t\tf: args.f !== undefined ? absolute( state.f, args.f ) : state.f,\n\t\t\t\t\t};\n\n\t\t\t\t\t//Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\t\t\t\t\tif ( delta( state.e, line.e ) > 0 ) {\n\n\t\t\t\t\t\tline.extruding = delta( state.e, line.e ) > 0;\n\n\t\t\t\t\t\tif ( currentLayer == undefined || line.z != currentLayer.z ) {\n\n\t\t\t\t\t\t\tnewLayer( line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\taddSegment( state, line );\n\t\t\t\t\tstate = line;\n\n\t\t\t\t} else if ( cmd === 'G2' || cmd === 'G3' ) {\n\n\t\t\t\t\t//G2/G3 - Arc Movement ( G2 clock wise and G3 counter clock wise )\n\t\t\t\t\t//console.warn( 'THREE.GCodeLoader: Arc command not supported' );\n\n\t\t\t\t} else if ( cmd === 'G90' ) {\n\n\t\t\t\t\t//G90: Set to Absolute Positioning\n\t\t\t\t\tstate.relative = false;\n\n\t\t\t\t} else if ( cmd === 'G91' ) {\n\n\t\t\t\t\t//G91: Set to state.relative Positioning\n\t\t\t\t\tstate.relative = true;\n\n\t\t\t\t} else if ( cmd === 'G92' ) {\n\n\t\t\t\t\t//G92: Set Position\n\t\t\t\t\tvar line = state;\n\t\t\t\t\tline.x = args.x !== undefined ? args.x : line.x;\n\t\t\t\t\tline.y = args.y !== undefined ? args.y : line.y;\n\t\t\t\t\tline.z = args.z !== undefined ? args.z : line.z;\n\t\t\t\t\tline.e = args.e !== undefined ? args.e : line.e;\n\t\t\t\t\tstate = line;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.warn( 'THREE.GCodeLoader: Command not supported:' + cmd );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addObject( vertex, extruding ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertex, 3 ) );\n\n\t\t\t\tvar segments = new THREE.LineSegments( geometry, extruding ? extrudingMaterial : pathMaterial );\n\t\t\t\tsegments.name = 'layer' + i;\n\t\t\t\tobject.add( segments );\n\n\t\t\t}\n\n\t\t\tvar object = new THREE.Group();\n\t\t\tobject.name = 'gcode';\n\n\t\t\tif ( this.splitLayer ) {\n\n\t\t\t\tfor ( var i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\t\tvar layer = layers[ i ];\n\t\t\t\t\taddObject( layer.vertex, true );\n\t\t\t\t\taddObject( layer.pathVertex, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertex = [], pathVertex = [];\n\n\t\t\t\tfor ( var i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\t\tvar layer = layers[ i ];\n\n\t\t\t\t\tvertex = vertex.concat( layer.vertex );\n\t\t\t\t\tpathVertex = pathVertex.concat( layer.pathVertex );\n\n\t\t\t\t}\n\n\t\t\t\taddObject( vertex, true );\n\t\t\t\taddObject( pathVertex, false );\n\n\t\t\t}\n\n\t\t\tobject.quaternion.setFromEuler( new THREE.Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.GCodeLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/GLTFLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Rich Tibbett / https://github.com/richtr\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Tony Parisi / http://www.tonyparisi.com/\n\t * @author Takahiro / https://github.com/takahirox\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tTHREE.GLTFLoader = ( function () {\n\n\t\tfunction GLTFLoader( manager ) {\n\n\t\t\tTHREE.Loader.call( this, manager );\n\n\t\t\tthis.dracoLoader = null;\n\t\t\tthis.ddsLoader = null;\n\n\t\t}\n\n\t\tGLTFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\t\tconstructor: GLTFLoader,\n\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tvar resourcePath;\n\n\t\t\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\t\t\tresourcePath = this.resourcePath;\n\n\t\t\t\t} else if ( this.path !== '' ) {\n\n\t\t\t\t\tresourcePath = this.path;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresourcePath = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\t\t}\n\n\t\t\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tvar _onError = function ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t};\n\n\t\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\t\tif ( scope.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t\t}\n\n\t\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t\t}, _onError );\n\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t_onError( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, _onError );\n\n\t\t\t},\n\n\t\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\t\tthis.dracoLoader = dracoLoader;\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\tsetDDSLoader: function ( ddsLoader ) {\n\n\t\t\t\tthis.ddsLoader = ddsLoader;\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\tparse: function ( data, path, onLoad, onError ) {\n\n\t\t\t\tvar content;\n\t\t\t\tvar extensions = {};\n\n\t\t\t\tif ( typeof data === 'string' ) {\n\n\t\t\t\t\tcontent = data;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcontent = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar json = JSON.parse( content );\n\n\t\t\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.extensionsUsed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\t\t\tvar extensionName = json.extensionsUsed[ i ];\n\t\t\t\t\t\tvar extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFLightsExtension( json );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_CLEARCOAT:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsClearcoatExtension();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.MSFT_TEXTURE_DDS:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 ) {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\t\tpath: path || this.resourcePath || '',\n\t\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\t\tmanager: this.manager\n\n\t\t\t\t} );\n\n\t\t\t\tparser.parse( onLoad, onError );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t/* GLTFREGISTRY */\n\n\t\tfunction GLTFRegistry() {\n\n\t\t\tvar objects = {};\n\n\t\t\treturn\t{\n\n\t\t\t\tget: function ( key ) {\n\n\t\t\t\t\treturn objects[ key ];\n\n\t\t\t\t},\n\n\t\t\t\tadd: function ( key, object ) {\n\n\t\t\t\t\tobjects[ key ] = object;\n\n\t\t\t\t},\n\n\t\t\t\tremove: function ( key ) {\n\n\t\t\t\t\tdelete objects[ key ];\n\n\t\t\t\t},\n\n\t\t\t\tremoveAll: function () {\n\n\t\t\t\t\tobjects = {};\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t/*********************************/\n\t\t/********** EXTENSIONS ***********/\n\t\t/*********************************/\n\n\t\tvar EXTENSIONS = {\n\t\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\t\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\t\t\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\t\t\tKHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n\t\t\tKHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n\t\t\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\t\t\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\t\t\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\t\t\tMSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n\t\t};\n\n\t\t/**\n\t\t * DDS Texture Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n\t\t *\n\t\t */\n\t\tfunction GLTFTextureDDSExtension( ddsLoader ) {\n\n\t\t\tif ( ! ddsLoader ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader' );\n\n\t\t\t}\n\n\t\t\tthis.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n\t\t\tthis.ddsLoader = ddsLoader;\n\n\t\t}\n\n\t\t/**\n\t\t * Punctual Lights Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\t\t */\n\t\tfunction GLTFLightsExtension( json ) {\n\n\t\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};\n\t\t\tthis.lightDefs = extension.lights || [];\n\n\t\t}\n\n\t\tGLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {\n\n\t\t\tvar lightDef = this.lightDefs[ lightIndex ];\n\t\t\tvar lightNode;\n\n\t\t\tvar color = new THREE.Color( 0xffffff );\n\t\t\tif ( lightDef.color !== undefined ) color.fromArray( lightDef.color );\n\n\t\t\tvar range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\t\tswitch ( lightDef.type ) {\n\n\t\t\t\tcase 'directional':\n\t\t\t\t\tlightNode = new THREE.DirectionalLight( color );\n\t\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'point':\n\t\t\t\t\tlightNode = new THREE.PointLight( color );\n\t\t\t\t\tlightNode.distance = range;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'spot':\n\t\t\t\t\tlightNode = new THREE.SpotLight( color );\n\t\t\t\t\tlightNode.distance = range;\n\t\t\t\t\t// Handle spotlight properties.\n\t\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".' );\n\n\t\t\t}\n\n\t\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\t\tlightNode.decay = 2;\n\n\t\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\t\tlightNode.name = lightDef.name || ( 'light_' + lightIndex );\n\n\t\t\treturn Promise.resolve( lightNode );\n\n\t\t};\n\n\t\t/**\n\t\t * Unlit Materials Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\t\t */\n\t\tfunction GLTFMaterialsUnlitExtension() {\n\n\t\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t\t}\n\n\t\tGLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n\n\t\t\treturn THREE.MeshBasicMaterial;\n\n\t\t};\n\n\t\tGLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\t\tvar pending = [];\n\n\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\t\tif ( metallicRoughness ) {\n\n\t\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t};\n\n\t\t/**\n\t\t * Clearcoat Materials Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat\n\t\t */\n\t\tfunction GLTFMaterialsClearcoatExtension() {\n\n\t\t\tthis.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n\n\t\t}\n\n\t\tGLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {\n\n\t\t\treturn THREE.MeshPhysicalMaterial;\n\n\t\t};\n\n\t\tGLTFMaterialsClearcoatExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\t\tvar pending = [];\n\n\t\t\tvar extension = materialDef.extensions[ this.name ];\n\n\t\t\tif ( extension.clearcoatFactor !== undefined ) {\n\n\t\t\t\tmaterialParams.clearcoat = extension.clearcoatFactor;\n\n\t\t\t}\n\n\t\t\tif ( extension.clearcoatTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );\n\n\t\t\t}\n\n\t\t\tif ( extension.clearcoatRoughnessFactor !== undefined ) {\n\n\t\t\t\tmaterialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n\n\t\t\t}\n\n\t\t\tif ( extension.clearcoatRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t\tif ( extension.clearcoatNormalTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );\n\n\t\t\t\tif ( extension.clearcoatNormalTexture.scale !== undefined ) {\n\n\t\t\t\t\tvar scale = extension.clearcoatNormalTexture.scale;\n\n\t\t\t\t\tmaterialParams.clearcoatNormalScale = new THREE.Vector2( scale, scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t};\n\n\t\t/* BINARY EXTENSION */\n\t\tvar BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n\t\tvar BINARY_EXTENSION_HEADER_LENGTH = 12;\n\t\tvar BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\n\t\tfunction GLTFBinaryExtension( data ) {\n\n\t\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\t\tthis.content = null;\n\t\t\tthis.body = null;\n\n\t\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\t\tthis.header = {\n\t\t\t\tmagic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\t\tlength: headerView.getUint32( 8, true )\n\t\t\t};\n\n\t\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t\t}\n\n\t\t\tvar chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\t\tvar chunkIndex = 0;\n\n\t\t\twhile ( chunkIndex < chunkView.byteLength ) {\n\n\t\t\t\tvar chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\t\tchunkIndex += 4;\n\n\t\t\t\tvar chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\t\tchunkIndex += 4;\n\n\t\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\t\tthis.content = THREE.LoaderUtils.decodeText( contentArray );\n\n\t\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\t\tvar byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t\t}\n\n\t\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\t\tchunkIndex += chunkLength;\n\n\t\t\t}\n\n\t\t\tif ( this.content === null ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * DRACO Mesh Compression Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n\t\t */\n\t\tfunction GLTFDracoMeshCompressionExtension( json, dracoLoader ) {\n\n\t\t\tif ( ! dracoLoader ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t\t}\n\n\t\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\t\tthis.json = json;\n\t\t\tthis.dracoLoader = dracoLoader;\n\t\t\tthis.dracoLoader.preload();\n\n\t\t}\n\n\t\tGLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar dracoLoader = this.dracoLoader;\n\t\t\tvar bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\t\tvar gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\t\tvar threeAttributeMap = {};\n\t\t\tvar attributeNormalizedMap = {};\n\t\t\tvar attributeTypeMap = {};\n\n\t\t\tfor ( var attributeName in gltfAttributeMap ) {\n\n\t\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t\t}\n\n\t\t\tfor ( attributeName in primitive.attributes ) {\n\n\t\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\t\tvar accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\t\tvar componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType;\n\t\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\t\tvar normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t\t}, threeAttributeMap, attributeTypeMap );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Texture Transform Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n\t\t */\n\t\tfunction GLTFTextureTransformExtension() {\n\n\t\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t\t}\n\n\t\tGLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {\n\n\t\t\ttexture = texture.clone();\n\n\t\t\tif ( transform.offset !== undefined ) {\n\n\t\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t\t}\n\n\t\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\t\ttexture.rotation = transform.rotation;\n\n\t\t\t}\n\n\t\t\tif ( transform.scale !== undefined ) {\n\n\t\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t\t}\n\n\t\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.' );\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\treturn texture;\n\n\t\t};\n\n\t\t/**\n\t\t * Specular-Glossiness Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n\t\t */\n\n\t\t/**\n\t\t * A sub class of THREE.StandardMaterial with some of the functionality\n\t\t * changed via the `onBeforeCompile` callback\n\t\t * @pailhead\n\t\t */\n\n\t\tfunction GLTFMeshStandardSGMaterial( params ) {\n\n\t\t\tTHREE.MeshStandardMaterial.call( this );\n\n\t\t\tthis.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t//various chunks that need replacing\n\t\t\tvar specularMapParsFragmentChunk = [\n\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t'\tuniform sampler2D specularMap;',\n\t\t\t\t'#endif'\n\t\t\t].join( '\\n' );\n\n\t\t\tvar glossinessMapParsFragmentChunk = [\n\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t'\tuniform sampler2D glossinessMap;',\n\t\t\t\t'#endif'\n\t\t\t].join( '\\n' );\n\n\t\t\tvar specularMapFragmentChunk = [\n\t\t\t\t'vec3 specularFactor = specular;',\n\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n\t\t\t\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\n\t\t\t\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t'\tspecularFactor *= texelSpecular.rgb;',\n\t\t\t\t'#endif'\n\t\t\t].join( '\\n' );\n\n\t\t\tvar glossinessMapFragmentChunk = [\n\t\t\t\t'float glossinessFactor = glossiness;',\n\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n\t\t\t\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t'\tglossinessFactor *= texelGlossiness.a;',\n\t\t\t\t'#endif'\n\t\t\t].join( '\\n' );\n\n\t\t\tvar lightPhysicalFragmentChunk = [\n\t\t\t\t'PhysicalMaterial material;',\n\t\t\t\t'material.diffuseColor = diffuseColor.rgb;',\n\t\t\t\t'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n\t\t\t\t'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n\t\t\t\t'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',\n\t\t\t\t'material.specularRoughness += geometryRoughness;',\n\t\t\t\t'material.specularRoughness = min( material.specularRoughness, 1.0 );',\n\t\t\t\t'material.specularColor = specularFactor.rgb;',\n\t\t\t].join( '\\n' );\n\n\t\t\tvar uniforms = {\n\t\t\t\tspecular: { value: new THREE.Color().setHex( 0xffffff ) },\n\t\t\t\tglossiness: { value: 1 },\n\t\t\t\tspecularMap: { value: null },\n\t\t\t\tglossinessMap: { value: null }\n\t\t\t};\n\n\t\t\tthis._extraUniforms = uniforms;\n\n\t\t\t// please see #14031 or #13198 for an alternate approach\n\t\t\tthis.onBeforeCompile = function ( shader ) {\n\n\t\t\t\tfor ( var uniformName in uniforms ) {\n\n\t\t\t\t\tshader.uniforms[ uniformName ] = uniforms[ uniformName ];\n\n\t\t\t\t}\n\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( 'uniform float roughness;', 'uniform vec3 specular;' );\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( 'uniform float metalness;', 'uniform float glossiness;' );\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk );\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk );\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk );\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk );\n\t\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\n\n\t\t\t};\n\n\t\t\t/*eslint-disable*/\n\t\t\tObject.defineProperties(\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\tspecular: {\n\t\t\t\t\t\tget: function () { return uniforms.specular.value; },\n\t\t\t\t\t\tset: function ( v ) { uniforms.specular.value = v; }\n\t\t\t\t\t},\n\t\t\t\t\tspecularMap: {\n\t\t\t\t\t\tget: function () { return uniforms.specularMap.value; },\n\t\t\t\t\t\tset: function ( v ) { uniforms.specularMap.value = v; }\n\t\t\t\t\t},\n\t\t\t\t\tglossiness: {\n\t\t\t\t\t\tget: function () { return uniforms.glossiness.value; },\n\t\t\t\t\t\tset: function ( v ) { uniforms.glossiness.value = v; }\n\t\t\t\t\t},\n\t\t\t\t\tglossinessMap: {\n\t\t\t\t\t\tget: function () { return uniforms.glossinessMap.value; },\n\t\t\t\t\t\tset: function ( v ) {\n\n\t\t\t\t\t\t\tuniforms.glossinessMap.value = v;\n\t\t\t\t\t\t\t//how about something like this - @pailhead\n\t\t\t\t\t\t\tif ( v ) {\n\n\t\t\t\t\t\t\t\tthis.defines.USE_GLOSSINESSMAP = '';\n\t\t\t\t\t\t\t\t// set USE_ROUGHNESSMAP to enable vUv\n\t\t\t\t\t\t\t\tthis.defines.USE_ROUGHNESSMAP = '';\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tdelete this.defines.USE_ROUGHNESSMAP;\n\t\t\t\t\t\t\t\tdelete this.defines.USE_GLOSSINESSMAP;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/*eslint-enable*/\n\t\t\tdelete this.metalness;\n\t\t\tdelete this.roughness;\n\t\t\tdelete this.metalnessMap;\n\t\t\tdelete this.roughnessMap;\n\n\t\t\tthis.setValues( params );\n\n\t\t}\n\n\t\tGLTFMeshStandardSGMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\n\t\tGLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;\n\n\t\tGLTFMeshStandardSGMaterial.prototype.copy = function ( source ) {\n\n\t\t\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.specular.copy( source.specular );\n\t\t\tthis.glossinessMap = source.glossinessMap;\n\t\t\tthis.glossiness = source.glossiness;\n\t\t\tdelete this.metalness;\n\t\t\tdelete this.roughness;\n\t\t\tdelete this.metalnessMap;\n\t\t\tdelete this.roughnessMap;\n\t\t\treturn this;\n\n\t\t};\n\n\t\tfunction GLTFMaterialsPbrSpecularGlossinessExtension() {\n\n\t\t\treturn {\n\n\t\t\t\tname: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n\t\t\t\tspecularGlossinessParams: [\n\t\t\t\t\t'color',\n\t\t\t\t\t'map',\n\t\t\t\t\t'lightMap',\n\t\t\t\t\t'lightMapIntensity',\n\t\t\t\t\t'aoMap',\n\t\t\t\t\t'aoMapIntensity',\n\t\t\t\t\t'emissive',\n\t\t\t\t\t'emissiveIntensity',\n\t\t\t\t\t'emissiveMap',\n\t\t\t\t\t'bumpMap',\n\t\t\t\t\t'bumpScale',\n\t\t\t\t\t'normalMap',\n\t\t\t\t\t'normalMapType',\n\t\t\t\t\t'displacementMap',\n\t\t\t\t\t'displacementScale',\n\t\t\t\t\t'displacementBias',\n\t\t\t\t\t'specularMap',\n\t\t\t\t\t'specular',\n\t\t\t\t\t'glossinessMap',\n\t\t\t\t\t'glossiness',\n\t\t\t\t\t'alphaMap',\n\t\t\t\t\t'envMap',\n\t\t\t\t\t'envMapIntensity',\n\t\t\t\t\t'refractionRatio',\n\t\t\t\t],\n\n\t\t\t\tgetMaterialType: function () {\n\n\t\t\t\t\treturn GLTFMeshStandardSGMaterial;\n\n\t\t\t\t},\n\n\t\t\t\textendParams: function ( materialParams, materialDef, parser ) {\n\n\t\t\t\t\tvar pbrSpecularGlossiness = materialDef.extensions[ this.name ];\n\n\t\t\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\t\t\tvar pending = [];\n\n\t\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {\n\n\t\t\t\t\t\tvar array = pbrSpecularGlossiness.diffuseFactor;\n\n\t\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {\n\n\t\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterialParams.emissive = new THREE.Color( 0.0, 0.0, 0.0 );\n\t\t\t\t\tmaterialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n\t\t\t\t\tmaterialParams.specular = new THREE.Color( 1.0, 1.0, 1.0 );\n\n\t\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {\n\n\t\t\t\t\t\tmaterialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {\n\n\t\t\t\t\t\tvar specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n\t\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );\n\t\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all( pending );\n\n\t\t\t\t},\n\n\t\t\t\tcreateMaterial: function ( materialParams ) {\n\n\t\t\t\t\tvar material = new GLTFMeshStandardSGMaterial( materialParams );\n\t\t\t\t\tmaterial.fog = true;\n\n\t\t\t\t\tmaterial.color = materialParams.color;\n\n\t\t\t\t\tmaterial.map = materialParams.map === undefined ? null : materialParams.map;\n\n\t\t\t\t\tmaterial.lightMap = null;\n\t\t\t\t\tmaterial.lightMapIntensity = 1.0;\n\n\t\t\t\t\tmaterial.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;\n\t\t\t\t\tmaterial.aoMapIntensity = 1.0;\n\n\t\t\t\t\tmaterial.emissive = materialParams.emissive;\n\t\t\t\t\tmaterial.emissiveIntensity = 1.0;\n\t\t\t\t\tmaterial.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;\n\n\t\t\t\t\tmaterial.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;\n\t\t\t\t\tmaterial.bumpScale = 1;\n\n\t\t\t\t\tmaterial.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;\n\t\t\t\t\tmaterial.normalMapType = THREE.TangentSpaceNormalMap;\n\n\t\t\t\t\tif ( materialParams.normalScale ) material.normalScale = materialParams.normalScale;\n\n\t\t\t\t\tmaterial.displacementMap = null;\n\t\t\t\t\tmaterial.displacementScale = 1;\n\t\t\t\t\tmaterial.displacementBias = 0;\n\n\t\t\t\t\tmaterial.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;\n\t\t\t\t\tmaterial.specular = materialParams.specular;\n\n\t\t\t\t\tmaterial.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;\n\t\t\t\t\tmaterial.glossiness = materialParams.glossiness;\n\n\t\t\t\t\tmaterial.alphaMap = null;\n\n\t\t\t\t\tmaterial.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;\n\t\t\t\t\tmaterial.envMapIntensity = 1.0;\n\n\t\t\t\t\tmaterial.refractionRatio = 0.98;\n\n\t\t\t\t\treturn material;\n\n\t\t\t\t},\n\n\t\t\t};\n\n\t\t}\n\n\t\t/**\n\t\t * Mesh Quantization Extension\n\t\t *\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n\t\t */\n\t\tfunction GLTFMeshQuantizationExtension() {\n\n\t\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t\t}\n\n\t\t/*********************************/\n\t\t/********** INTERPOLATION ********/\n\t\t/*********************************/\n\n\t\t// Spline Interpolation\n\t\t// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\t\tfunction GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\t\tTHREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\t}\n\n\t\tGLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );\n\t\tGLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n\t\tGLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {\n\n\t\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tvalueSize = this.valueSize,\n\t\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\t\tfor ( var i = 0; i !== valueSize; i ++ ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t\tGLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\t\tGLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\t\tGLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer;\n\t\t\tvar values = this.sampleValues;\n\t\t\tvar stride = this.valueSize;\n\n\t\t\tvar stride2 = stride * 2;\n\t\t\tvar stride3 = stride * 3;\n\n\t\t\tvar td = t1 - t0;\n\n\t\t\tvar p = ( t - t0 ) / td;\n\t\t\tvar pp = p * p;\n\t\t\tvar ppp = pp * p;\n\n\t\t\tvar offset1 = i1 * stride3;\n\t\t\tvar offset0 = offset1 - stride3;\n\n\t\t\tvar s2 = - 2 * ppp + 3 * pp;\n\t\t\tvar s3 = ppp - pp;\n\t\t\tvar s0 = 1 - s2;\n\t\t\tvar s1 = s3 - pp + p;\n\n\t\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\t\tfor ( var i = 0; i !== stride; i ++ ) {\n\n\t\t\t\tvar p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\t\tvar m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\t\tvar p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\t\tvar m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t\t/*********************************/\n\t\t/********** INTERNALS ************/\n\t\t/*********************************/\n\n\t\t/* CONSTANTS */\n\n\t\tvar WEBGL_CONSTANTS = {\n\t\t\tFLOAT: 5126,\n\t\t\t//FLOAT_MAT2: 35674,\n\t\t\tFLOAT_MAT3: 35675,\n\t\t\tFLOAT_MAT4: 35676,\n\t\t\tFLOAT_VEC2: 35664,\n\t\t\tFLOAT_VEC3: 35665,\n\t\t\tFLOAT_VEC4: 35666,\n\t\t\tLINEAR: 9729,\n\t\t\tREPEAT: 10497,\n\t\t\tSAMPLER_2D: 35678,\n\t\t\tPOINTS: 0,\n\t\t\tLINES: 1,\n\t\t\tLINE_LOOP: 2,\n\t\t\tLINE_STRIP: 3,\n\t\t\tTRIANGLES: 4,\n\t\t\tTRIANGLE_STRIP: 5,\n\t\t\tTRIANGLE_FAN: 6,\n\t\t\tUNSIGNED_BYTE: 5121,\n\t\t\tUNSIGNED_SHORT: 5123\n\t\t};\n\n\t\tvar WEBGL_COMPONENT_TYPES = {\n\t\t\t5120: Int8Array,\n\t\t\t5121: Uint8Array,\n\t\t\t5122: Int16Array,\n\t\t\t5123: Uint16Array,\n\t\t\t5125: Uint32Array,\n\t\t\t5126: Float32Array\n\t\t};\n\n\t\tvar WEBGL_FILTERS = {\n\t\t\t9728: THREE.NearestFilter,\n\t\t\t9729: THREE.LinearFilter,\n\t\t\t9984: THREE.NearestMipmapNearestFilter,\n\t\t\t9985: THREE.LinearMipmapNearestFilter,\n\t\t\t9986: THREE.NearestMipmapLinearFilter,\n\t\t\t9987: THREE.LinearMipmapLinearFilter\n\t\t};\n\n\t\tvar WEBGL_WRAPPINGS = {\n\t\t\t33071: THREE.ClampToEdgeWrapping,\n\t\t\t33648: THREE.MirroredRepeatWrapping,\n\t\t\t10497: THREE.RepeatWrapping\n\t\t};\n\n\t\tvar WEBGL_TYPE_SIZES = {\n\t\t\t'SCALAR': 1,\n\t\t\t'VEC2': 2,\n\t\t\t'VEC3': 3,\n\t\t\t'VEC4': 4,\n\t\t\t'MAT2': 4,\n\t\t\t'MAT3': 9,\n\t\t\t'MAT4': 16\n\t\t};\n\n\t\tvar ATTRIBUTES = {\n\t\t\tPOSITION: 'position',\n\t\t\tNORMAL: 'normal',\n\t\t\tTANGENT: 'tangent',\n\t\t\tTEXCOORD_0: 'uv',\n\t\t\tTEXCOORD_1: 'uv2',\n\t\t\tCOLOR_0: 'color',\n\t\t\tWEIGHTS_0: 'skinWeight',\n\t\t\tJOINTS_0: 'skinIndex',\n\t\t};\n\n\t\tvar PATH_PROPERTIES = {\n\t\t\tscale: 'scale',\n\t\t\ttranslation: 'position',\n\t\t\trotation: 'quaternion',\n\t\t\tweights: 'morphTargetInfluences'\n\t\t};\n\n\t\tvar INTERPOLATION = {\n\t\t\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\t\t\tLINEAR: THREE.InterpolateLinear,\n\t\t\tSTEP: THREE.InterpolateDiscrete\n\t\t};\n\n\t\tvar ALPHA_MODES = {\n\t\t\tOPAQUE: 'OPAQUE',\n\t\t\tMASK: 'MASK',\n\t\t\tBLEND: 'BLEND'\n\t\t};\n\n\t\tvar MIME_TYPE_FORMATS = {\n\t\t\t'image/png': THREE.RGBAFormat,\n\t\t\t'image/jpeg': THREE.RGBFormat\n\t\t};\n\n\t\t/* UTILITY FUNCTIONS */\n\n\t\tfunction resolveURL( url, path ) {\n\n\t\t\t// Invalid URL\n\t\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t\t// Host Relative URL\n\t\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t\t}\n\n\t\t\t// Absolute URL http://,https://,//\n\t\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t\t// Data URI\n\t\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t\t// Blob URL\n\t\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t\t// Relative URL\n\t\t\treturn path + url;\n\n\t\t}\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t\t */\n\t\tfunction createDefaultMaterial( cache ) {\n\n\t\t\tif ( cache[ 'DefaultMaterial' ] === undefined ) {\n\n\t\t\t\tcache[ 'DefaultMaterial' ] = new THREE.MeshStandardMaterial( {\n\t\t\t\t\tcolor: 0xFFFFFF,\n\t\t\t\t\temissive: 0x000000,\n\t\t\t\t\tmetalness: 1,\n\t\t\t\t\troughness: 1,\n\t\t\t\t\ttransparent: false,\n\t\t\t\t\tdepthTest: true,\n\t\t\t\t\tside: THREE.FrontSide\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn cache[ 'DefaultMaterial' ];\n\n\t\t}\n\n\t\tfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t\t\t// Add unknown glTF extensions to an object's userData.\n\n\t\t\tfor ( var name in objectDef.extensions ) {\n\n\t\t\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n\t\t * @param {GLTF.definition} gltfDef\n\t\t */\n\t\tfunction assignExtrasToUserData( object, gltfDef ) {\n\n\t\t\tif ( gltfDef.extras !== undefined ) {\n\n\t\t\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t\t *\n\t\t * @param {THREE.BufferGeometry} geometry\n\t\t * @param {Array<GLTF.Target>} targets\n\t\t * @param {GLTFParser} parser\n\t\t * @return {Promise<THREE.BufferGeometry>}\n\t\t */\n\t\tfunction addMorphTargets( geometry, targets, parser ) {\n\n\t\t\tvar hasMorphPosition = false;\n\t\t\tvar hasMorphNormal = false;\n\n\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\t\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\n\t\t\t\tif ( hasMorphPosition && hasMorphNormal ) break;\n\n\t\t\t}\n\n\t\t\tif ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );\n\n\t\t\tvar pendingPositionAccessors = [];\n\t\t\tvar pendingNormalAccessors = [];\n\n\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( hasMorphPosition ) {\n\n\t\t\t\t\tvar pendingAccessor = target.POSITION !== undefined\n\t\t\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t\t\t: geometry.attributes.position;\n\n\t\t\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasMorphNormal ) {\n\n\t\t\t\t\tvar pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t\t\t: geometry.attributes.normal;\n\n\t\t\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn Promise.all( [\n\t\t\t\tPromise.all( pendingPositionAccessors ),\n\t\t\t\tPromise.all( pendingNormalAccessors )\n\t\t\t] ).then( function ( accessors ) {\n\n\t\t\t\tvar morphPositions = accessors[ 0 ];\n\t\t\t\tvar morphNormals = accessors[ 1 ];\n\n\t\t\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\t\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t\treturn geometry;\n\n\t\t\t} );\n\n\t\t}\n\n\t\t/**\n\t\t * @param {THREE.Mesh} mesh\n\t\t * @param {GLTF.Mesh} meshDef\n\t\t */\n\t\tfunction updateMorphTargets( mesh, meshDef ) {\n\n\t\t\tmesh.updateMorphTargets();\n\n\t\t\tif ( meshDef.weights !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\t\t\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\t\t\tvar targetNames = meshDef.extras.targetNames;\n\n\t\t\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( var i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createPrimitiveKey( primitiveDef ) {\n\n\t\t\tvar dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\t\t\tvar geometryKey;\n\n\t\t\tif ( dracoExtension ) {\n\n\t\t\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t\t\t} else {\n\n\t\t\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t\t\t}\n\n\t\t\treturn geometryKey;\n\n\t\t}\n\n\t\tfunction createAttributesKey( attributes ) {\n\n\t\t\tvar attributesKey = '';\n\n\t\t\tvar keys = Object.keys( attributes ).sort();\n\n\t\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t\t\t}\n\n\t\t\treturn attributesKey;\n\n\t\t}\n\n\t\t/* GLTF PARSER */\n\n\t\tfunction GLTFParser( json, extensions, options ) {\n\n\t\t\tthis.json = json || {};\n\t\t\tthis.extensions = extensions || {};\n\t\t\tthis.options = options || {};\n\n\t\t\t// loader object cache\n\t\t\tthis.cache = new GLTFRegistry();\n\n\t\t\t// BufferGeometry caching\n\t\t\tthis.primitiveCache = {};\n\n\t\t\tthis.textureLoader = new THREE.TextureLoader( this.options.manager );\n\t\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\n\t\t\tthis.fileLoader = new THREE.FileLoader( this.options.manager );\n\t\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t}\n\n\t\tGLTFParser.prototype.parse = function ( onLoad, onError ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\n\t\t\t// Clear the loader cache\n\t\t\tthis.cache.removeAll();\n\n\t\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\t\tthis.markDefs();\n\n\t\t\tPromise.all( [\n\n\t\t\t\tthis.getDependencies( 'scene' ),\n\t\t\t\tthis.getDependencies( 'animation' ),\n\t\t\t\tthis.getDependencies( 'camera' ),\n\n\t\t\t] ).then( function ( dependencies ) {\n\n\t\t\t\tvar result = {\n\t\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\t\tasset: json.asset,\n\t\t\t\t\tparser: parser,\n\t\t\t\t\tuserData: {}\n\t\t\t\t};\n\n\t\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\t\tonLoad( result );\n\n\t\t\t} ).catch( onError );\n\n\t\t};\n\n\t\t/**\n\t\t * Marks the special nodes/meshes in json for efficient parse.\n\t\t */\n\t\tGLTFParser.prototype.markDefs = function () {\n\n\t\t\tvar nodeDefs = this.json.nodes || [];\n\t\t\tvar skinDefs = this.json.skins || [];\n\t\t\tvar meshDefs = this.json.meshes || [];\n\n\t\t\tvar meshReferences = {};\n\t\t\tvar meshUses = {};\n\n\t\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\t\tfor ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\t\tvar joints = skinDefs[ skinIndex ].joints;\n\n\t\t\t\tfor ( var i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n\t\t\t// avoid having more than one THREE.Mesh with the same name, count\n\t\t\t// references and rename instances below.\n\t\t\t//\n\t\t\t// Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t\t\tfor ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\t\tvar nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\t\tif ( meshReferences[ nodeDef.mesh ] === undefined ) {\n\n\t\t\t\t\t\tmeshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeshReferences[ nodeDef.mesh ] ++;\n\n\t\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.json.meshReferences = meshReferences;\n\t\t\tthis.json.meshUses = meshUses;\n\n\t\t};\n\n\t\t/**\n\t\t * Requests the specified dependency asynchronously, with caching.\n\t\t * @param {string} type\n\t\t * @param {number} index\n\t\t * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n\t\t */\n\t\tGLTFParser.prototype.getDependency = function ( type, index ) {\n\n\t\t\tvar cacheKey = type + ':' + index;\n\t\t\tvar dependency = this.cache.get( cacheKey );\n\n\t\t\tif ( ! dependency ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'scene':\n\t\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'node':\n\t\t\t\t\t\tdependency = this.loadNode( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mesh':\n\t\t\t\t\t\tdependency = this.loadMesh( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'accessor':\n\t\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bufferView':\n\t\t\t\t\t\tdependency = this.loadBufferView( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'material':\n\t\t\t\t\t\tdependency = this.loadMaterial( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tdependency = this.loadTexture( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'skin':\n\t\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'animation':\n\t\t\t\t\t\tdependency = this.loadAnimation( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'camera':\n\t\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'light':\n\t\t\t\t\t\tdependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t\t}\n\n\t\t\treturn dependency;\n\n\t\t};\n\n\t\t/**\n\t\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t\t * @param {string} type\n\t\t * @return {Promise<Array<Object>>}\n\t\t */\n\t\tGLTFParser.prototype.getDependencies = function ( type ) {\n\n\t\t\tvar dependencies = this.cache.get( type );\n\n\t\t\tif ( ! dependencies ) {\n\n\t\t\t\tvar parser = this;\n\t\t\t\tvar defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t\t} ) );\n\n\t\t\t\tthis.cache.add( type, dependencies );\n\n\t\t\t}\n\n\t\t\treturn dependencies;\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t\t * @param {number} bufferIndex\n\t\t * @return {Promise<ArrayBuffer>}\n\t\t */\n\t\tGLTFParser.prototype.loadBuffer = function ( bufferIndex ) {\n\n\t\t\tvar bufferDef = this.json.buffers[ bufferIndex ];\n\t\t\tvar loader = this.fileLoader;\n\n\t\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t\t}\n\n\t\t\t// If present, GLB container is required to be the first buffer.\n\t\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t\t}\n\n\t\t\tvar options = this.options;\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tloader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t\t * @param {number} bufferViewIndex\n\t\t * @return {Promise<ArrayBuffer>}\n\t\t */\n\t\tGLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {\n\n\t\t\tvar bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\t\tvar byteLength = bufferViewDef.byteLength || 0;\n\t\t\t\tvar byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t\t * @param {number} accessorIndex\n\t\t * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n\t\t */\n\t\tGLTFParser.prototype.loadAccessor = function ( accessorIndex ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar json = this.json;\n\n\t\t\tvar accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\t\t// Ignore empty accessors, which may be used to declare runtime\n\t\t\t\t// information about attributes coming from another source (e.g. Draco\n\t\t\t\t// compression extension).\n\t\t\t\treturn Promise.resolve( null );\n\n\t\t\t}\n\n\t\t\tvar pendingBufferViews = [];\n\n\t\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t\t} else {\n\n\t\t\t\tpendingBufferViews.push( null );\n\n\t\t\t}\n\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\t\tvar bufferView = bufferViews[ 0 ];\n\n\t\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\t\tvar itemBytes = elementBytes * itemSize;\n\t\t\t\tvar byteOffset = accessorDef.byteOffset || 0;\n\t\t\t\tvar byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\t\tvar normalized = accessorDef.normalized === true;\n\t\t\t\tvar array, bufferAttribute;\n\n\t\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\t\tvar ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\t\tvar ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\t\tvar ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\t\tib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );\n\n\t\t\t\t}\n\n\t\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\t\tvar itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\t\tvar TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\t\tvar byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\t\tvar byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\t\tvar sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\t\tvar sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\t\tbufferAttribute = new THREE.BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar index = sparseIndices[ i ];\n\n\t\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn bufferAttribute;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t\t * @param {number} textureIndex\n\t\t * @return {Promise<THREE.Texture>}\n\t\t */\n\t\tGLTFParser.prototype.loadTexture = function ( textureIndex ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar json = this.json;\n\t\t\tvar options = this.options;\n\t\t\tvar textureLoader = this.textureLoader;\n\n\t\t\tvar URL = self.URL || self.webkitURL;\n\n\t\t\tvar textureDef = json.textures[ textureIndex ];\n\n\t\t\tvar textureExtensions = textureDef.extensions || {};\n\n\t\t\tvar source;\n\n\t\t\tif ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {\n\n\t\t\t\tsource = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];\n\n\t\t\t} else {\n\n\t\t\t\tsource = json.images[ textureDef.source ];\n\n\t\t\t}\n\n\t\t\tvar sourceURI = source.uri;\n\t\t\tvar isObjectURL = false;\n\n\t\t\tif ( source.bufferView !== undefined ) {\n\n\t\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\t\tsourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\t\tisObjectURL = true;\n\t\t\t\t\tvar blob = new Blob( [ bufferView ], { type: source.mimeType } );\n\t\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\t\treturn sourceURI;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\t\t// Load Texture resource.\n\n\t\t\t\tvar loader = options.manager.getHandler( sourceURI );\n\n\t\t\t\tif ( ! loader ) {\n\n\t\t\t\t\tloader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]\n\t\t\t\t\t\t? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader\n\t\t\t\t\t\t: textureLoader;\n\n\t\t\t\t}\n\n\t\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\t\tloader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );\n\n\t\t\t\t} );\n\n\t\t\t} ).then( function ( texture ) {\n\n\t\t\t\t// Clean up resources and configure Texture.\n\n\t\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.flipY = false;\n\n\t\t\t\tif ( textureDef.name ) texture.name = textureDef.name;\n\n\t\t\t\t// Ignore unknown mime types, like DDS files.\n\t\t\t\tif ( source.mimeType in MIME_TYPE_FORMATS ) {\n\n\t\t\t\t\ttexture.format = MIME_TYPE_FORMATS[ source.mimeType ];\n\n\t\t\t\t}\n\n\t\t\t\tvar samplers = json.samplers || {};\n\t\t\t\tvar sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;\n\t\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipmapLinearFilter;\n\t\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;\n\t\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Asynchronously assigns a texture to the given material parameters.\n\t\t * @param {Object} materialParams\n\t\t * @param {string} mapName\n\t\t * @param {Object} mapDef\n\t\t * @return {Promise}\n\t\t */\n\t\tGLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {\n\n\t\t\tvar parser = this;\n\n\t\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\t\tif ( ! texture.isCompressedTexture ) {\n\n\t\t\t\t\tswitch ( mapName ) {\n\n\t\t\t\t\t\tcase 'aoMap':\n\t\t\t\t\t\tcase 'emissiveMap':\n\t\t\t\t\t\tcase 'metalnessMap':\n\t\t\t\t\t\tcase 'normalMap':\n\t\t\t\t\t\tcase 'roughnessMap':\n\t\t\t\t\t\t\ttexture.format = THREE.RGBFormat;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Materials sample aoMap from UV set 1 and other maps from UV set 0 - this can't be configured\n\t\t\t\t// However, we will copy UV set 0 to UV set 1 on demand for aoMap\n\t\t\t\tif ( mapDef.texCoord !== undefined && mapDef.texCoord != 0 && ! ( mapName === 'aoMap' && mapDef.texCoord == 1 ) ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\t\tvar transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t\t * already has a material (generated from the glTF material options alone)\n\t\t * but reuse of the same glTF material may require multiple threejs materials\n\t\t * to accomodate different primitive types, defines, etc. New materials will\n\t\t * be created if necessary, and reused from a cache.\n\t\t * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n\t\t */\n\t\tGLTFParser.prototype.assignFinalMaterial = function ( mesh ) {\n\n\t\t\tvar geometry = mesh.geometry;\n\t\t\tvar material = mesh.material;\n\n\t\t\tvar useVertexTangents = geometry.attributes.tangent !== undefined;\n\t\t\tvar useVertexColors = geometry.attributes.color !== undefined;\n\t\t\tvar useFlatShading = geometry.attributes.normal === undefined;\n\t\t\tvar useSkinning = mesh.isSkinnedMesh === true;\n\t\t\tvar useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;\n\t\t\tvar useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n\t\t\tif ( mesh.isPoints ) {\n\n\t\t\t\tvar cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\t\tvar pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\t\tpointsMaterial = new THREE.PointsMaterial();\n\t\t\t\t\tTHREE.Material.prototype.copy.call( pointsMaterial, material );\n\t\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial = pointsMaterial;\n\n\t\t\t} else if ( mesh.isLine ) {\n\n\t\t\t\tvar cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\t\tvar lineMaterial = this.cache.get( cacheKey );\n\n\t\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\t\tlineMaterial = new THREE.LineBasicMaterial();\n\t\t\t\t\tTHREE.Material.prototype.copy.call( lineMaterial, material );\n\t\t\t\t\tlineMaterial.color.copy( material.color );\n\n\t\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial = lineMaterial;\n\n\t\t\t}\n\n\t\t\t// Clone the material if it will be modified\n\t\t\tif ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {\n\n\t\t\t\tvar cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';\n\t\t\t\tif ( useSkinning ) cacheKey += 'skinning:';\n\t\t\t\tif ( useVertexTangents ) cacheKey += 'vertex-tangents:';\n\t\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\t\t\t\tif ( useMorphTargets ) cacheKey += 'morph-targets:';\n\t\t\t\tif ( useMorphNormals ) cacheKey += 'morph-normals:';\n\n\t\t\t\tvar cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\t\tcachedMaterial = material.clone();\n\n\t\t\t\t\tif ( useSkinning ) cachedMaterial.skinning = true;\n\t\t\t\t\tif ( useVertexTangents ) cachedMaterial.vertexTangents = true;\n\t\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = true;\n\t\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\t\t\t\t\tif ( useMorphTargets ) cachedMaterial.morphTargets = true;\n\t\t\t\t\tif ( useMorphNormals ) cachedMaterial.morphNormals = true;\n\n\t\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial = cachedMaterial;\n\n\t\t\t}\n\n\t\t\t// workarounds for mesh and geometry\n\n\t\t\tif ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {\n\n\t\t\t\tgeometry.setAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );\n\n\t\t\t}\n\n\t\t\t// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n\t\t\tif ( material.normalScale && ! useVertexTangents ) {\n\n\t\t\t\tmaterial.normalScale.y = - material.normalScale.y;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalScale && ! useVertexTangents ) {\n\n\t\t\t\tmaterial.clearcoatNormalScale.y = - material.clearcoatNormalScale.y;\n\n\t\t\t}\n\n\t\t\tmesh.material = material;\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t\t * @param {number} materialIndex\n\t\t * @return {Promise<THREE.Material>}\n\t\t */\n\t\tGLTFParser.prototype.loadMaterial = function ( materialIndex ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar materialDef = json.materials[ materialIndex ];\n\n\t\t\tvar materialType;\n\t\t\tvar materialParams = {};\n\t\t\tvar materialExtensions = materialDef.extensions || {};\n\n\t\t\tvar pending = [];\n\n\t\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {\n\n\t\t\t\tvar sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\t\tmaterialType = sgExtension.getMaterialType();\n\t\t\t\tpending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t\t} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\t\tvar kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t\t} else {\n\n\t\t\t\t// Specification:\n\t\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\t\tmaterialType = THREE.MeshStandardMaterial;\n\n\t\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t\t}\n\n\t\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\t\tmaterialParams.side = THREE.DoubleSide;\n\n\t\t\t}\n\n\t\t\tvar alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\t\tmaterialParams.transparent = true;\n\n\t\t\t\t// See: https://github.com/mrdoob/three.js/issues/17706\n\t\t\t\tmaterialParams.depthWrite = false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterialParams.transparent = false;\n\n\t\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\t\tmaterialParams.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\t\tmaterialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\t\tmaterialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );\n\n\t\t\t}\n\n\t\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );\n\n\t\t\t}\n\n\t\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_CLEARCOAT ] ) {\n\n\t\t\t\tvar clearcoatExtension = extensions[ EXTENSIONS.KHR_MATERIALS_CLEARCOAT ];\n\t\t\t\tmaterialType = clearcoatExtension.getMaterialType();\n\t\t\t\tpending.push( clearcoatExtension.extendParams( materialParams, { extensions: materialExtensions }, parser ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\tvar material;\n\n\t\t\t\tif ( materialType === GLTFMeshStandardSGMaterial ) {\n\n\t\t\t\t\tmaterial = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial = new materialType( materialParams );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialDef.name ) material.name = materialDef.name;\n\n\t\t\t\t// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n\t\t\t\tif ( material.map ) material.map.encoding = THREE.sRGBEncoding;\n\t\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;\n\n\t\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\t\treturn material;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * @param {THREE.BufferGeometry} geometry\n\t\t * @param {GLTF.Primitive} primitiveDef\n\t\t * @param {GLTFParser} parser\n\t\t */\n\t\tfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\t\t\tvar attributes = primitiveDef.attributes;\n\n\t\t\tvar box = new THREE.Box3();\n\n\t\t\tif ( attributes.POSITION !== undefined ) {\n\n\t\t\t\tvar accessor = parser.json.accessors[ attributes.POSITION ];\n\n\t\t\t\tvar min = accessor.min;\n\t\t\t\tvar max = accessor.max;\n\n\t\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\t\tbox.set(\n\t\t\t\t\t\tnew THREE.Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\t\t\tnew THREE.Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar targets = primitiveDef.targets;\n\n\t\t\tif ( targets !== undefined ) {\n\n\t\t\t\tvar maxDisplacement = new THREE.Vector3();\n\t\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\t\t\tvar accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\t\t\tvar min = accessor.min;\n\t\t\t\t\t\tvar max = accessor.max;\n\n\t\t\t\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\t\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\t\t\t\t\t\t\t// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative\n\t\t\t\t\t\t\t// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets\n\t\t\t\t\t\t\t// are used to implement key-frame animations and as such only two are active at a time - this results in very large\n\t\t\t\t\t\t\t// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.\n\t\t\t\t\t\t\tmaxDisplacement.max( vector );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.\n\t\t\t\tbox.expandByVector( maxDisplacement );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingBox = box;\n\n\t\t\tvar sphere = new THREE.Sphere();\n\n\t\t\tbox.getCenter( sphere.center );\n\t\t\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\t\t\tgeometry.boundingSphere = sphere;\n\n\t\t}\n\n\t\t/**\n\t\t * @param {THREE.BufferGeometry} geometry\n\t\t * @param {GLTF.Primitive} primitiveDef\n\t\t * @param {GLTFParser} parser\n\t\t * @return {Promise<THREE.BufferGeometry>}\n\t\t */\n\t\tfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\t\t\tvar attributes = primitiveDef.attributes;\n\n\t\t\tvar pending = [];\n\n\t\t\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\t\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t\t\t.then( function ( accessor ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfor ( var gltfAttributeName in attributes ) {\n\n\t\t\t\tvar threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\t\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\t\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t\t\t}\n\n\t\t\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\t\t\tvar accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\t\t\tgeometry.setIndex( accessor );\n\n\t\t\t\t} );\n\n\t\t\t\tpending.push( accessor );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( geometry, primitiveDef );\n\n\t\t\tcomputeBounds( geometry, primitiveDef, parser );\n\n\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\treturn primitiveDef.targets !== undefined\n\t\t\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t\t\t: geometry;\n\n\t\t\t} );\n\n\t\t}\n\n\t\t/**\n\t\t * @param {THREE.BufferGeometry} geometry\n\t\t * @param {Number} drawMode\n\t\t * @return {THREE.BufferGeometry}\n\t\t */\n\t\tfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === THREE.TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\n\t\t\treturn newGeometry;\n\n\t\t}\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t\t *\n\t\t * Creates BufferGeometries from primitives.\n\t\t *\n\t\t * @param {Array<GLTF.Primitive>} primitives\n\t\t * @return {Promise<Array<THREE.BufferGeometry>>}\n\t\t */\n\t\tGLTFParser.prototype.loadGeometries = function ( primitives ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar cache = this.primitiveCache;\n\n\t\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar pending = [];\n\n\t\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\t\tvar primitive = primitives[ i ];\n\t\t\t\tvar cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t\t// See if we've already created this geometry\n\t\t\t\tvar cached = cache[ cacheKey ];\n\n\t\t\t\tif ( cached ) {\n\n\t\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\t\tpending.push( cached.promise );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar geometryPromise;\n\n\t\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new THREE.BufferGeometry(), primitive, parser );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cache this geometry\n\t\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t\t * @param {number} meshIndex\n\t\t * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n\t\t */\n\t\tGLTFParser.prototype.loadMesh = function ( meshIndex ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar json = this.json;\n\n\t\t\tvar meshDef = json.meshes[ meshIndex ];\n\t\t\tvar primitives = meshDef.primitives;\n\n\t\t\tvar pending = [];\n\n\t\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\t\tvar material = primitives[ i ].material === undefined\n\t\t\t\t\t? createDefaultMaterial( this.cache )\n\t\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\t\tpending.push( material );\n\n\t\t\t}\n\n\t\t\tpending.push( parser.loadGeometries( primitives ) );\n\n\t\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\t\tvar materials = results.slice( 0, results.length - 1 );\n\t\t\t\tvar geometries = results[ results.length - 1 ];\n\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar geometry = geometries[ i ];\n\t\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t\t// 1. create Mesh\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tvar material = materials[ i ];\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See .markDefs()\n\t\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t\t? new THREE.SkinnedMesh( geometry, material )\n\t\t\t\t\t\t\t: new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t\tif ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {\n\n\t\t\t\t\t\t\t// we normalize floating point skin weight array to fix malformed assets (see #15319)\n\t\t\t\t\t\t\t// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n\t\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, THREE.TriangleStripDrawMode );\n\n\t\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, THREE.TriangleFanDrawMode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineSegments( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\t\tmesh = new THREE.Line( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineLoop( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\t\tmesh = new THREE.Points( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = meshDef.name || ( 'mesh_' + meshIndex );\n\n\t\t\t\t\tif ( geometries.length > 1 ) mesh.name += '_' + i;\n\n\t\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\t\tmeshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tfor ( var i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t\t * @param {number} cameraIndex\n\t\t * @return {Promise<THREE.Camera>}\n\t\t */\n\t\tGLTFParser.prototype.loadCamera = function ( cameraIndex ) {\n\n\t\t\tvar camera;\n\t\t\tvar cameraDef = this.json.cameras[ cameraIndex ];\n\t\t\tvar params = cameraDef[ cameraDef.type ];\n\n\t\t\tif ( ! params ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\t\tcamera = new THREE.PerspectiveCamera( THREE.MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\t\tcamera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );\n\n\t\t\t}\n\n\t\t\tif ( cameraDef.name ) camera.name = cameraDef.name;\n\n\t\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\t\treturn Promise.resolve( camera );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t\t * @param {number} skinIndex\n\t\t * @return {Promise<Object>}\n\t\t */\n\t\tGLTFParser.prototype.loadSkin = function ( skinIndex ) {\n\n\t\t\tvar skinDef = this.json.skins[ skinIndex ];\n\n\t\t\tvar skinEntry = { joints: skinDef.joints };\n\n\t\t\tif ( skinDef.inverseBindMatrices === undefined ) {\n\n\t\t\t\treturn Promise.resolve( skinEntry );\n\n\t\t\t}\n\n\t\t\treturn this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {\n\n\t\t\t\tskinEntry.inverseBindMatrices = accessor;\n\n\t\t\t\treturn skinEntry;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t\t * @param {number} animationIndex\n\t\t * @return {Promise<THREE.AnimationClip>}\n\t\t */\n\t\tGLTFParser.prototype.loadAnimation = function ( animationIndex ) {\n\n\t\t\tvar json = this.json;\n\n\t\t\tvar animationDef = json.animations[ animationIndex ];\n\n\t\t\tvar pendingNodes = [];\n\t\t\tvar pendingInputAccessors = [];\n\t\t\tvar pendingOutputAccessors = [];\n\t\t\tvar pendingSamplers = [];\n\t\t\tvar pendingTargets = [];\n\n\t\t\tfor ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\t\tvar channel = animationDef.channels[ i ];\n\t\t\t\tvar sampler = animationDef.samplers[ channel.sampler ];\n\t\t\t\tvar target = channel.target;\n\t\t\t\tvar name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\t\t\t\tvar input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\t\tvar output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\t\tpendingSamplers.push( sampler );\n\t\t\t\tpendingTargets.push( target );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( [\n\n\t\t\t\tPromise.all( pendingNodes ),\n\t\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\t\tPromise.all( pendingSamplers ),\n\t\t\t\tPromise.all( pendingTargets )\n\n\t\t\t] ).then( function ( dependencies ) {\n\n\t\t\t\tvar nodes = dependencies[ 0 ];\n\t\t\t\tvar inputAccessors = dependencies[ 1 ];\n\t\t\t\tvar outputAccessors = dependencies[ 2 ];\n\t\t\t\tvar samplers = dependencies[ 3 ];\n\t\t\t\tvar targets = dependencies[ 4 ];\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tfor ( var i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar node = nodes[ i ];\n\t\t\t\t\tvar inputAccessor = inputAccessors[ i ];\n\t\t\t\t\tvar outputAccessor = outputAccessors[ i ];\n\t\t\t\t\tvar sampler = samplers[ i ];\n\t\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\t\tnode.updateMatrix();\n\t\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\t\tvar TypedKeyframeTrack;\n\n\t\t\t\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\t\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\t\t\t\tTypedKeyframeTrack = THREE.NumberKeyframeTrack;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\t\t\t\tTypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase PATH_PROPERTIES.position:\n\t\t\t\t\t\tcase PATH_PROPERTIES.scale:\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tTypedKeyframeTrack = THREE.VectorKeyframeTrack;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\n\t\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;\n\n\t\t\t\t\tvar targetNames = [];\n\n\t\t\t\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\t\t\t\t// Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n\t\t\t\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\t\t\t\tif ( object.isMesh === true && object.morphTargetInfluences ) {\n\n\t\t\t\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetNames.push( targetName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar outputArray = outputAccessor.array;\n\n\t\t\t\t\tif ( outputAccessor.normalized ) {\n\n\t\t\t\t\t\tvar scale;\n\n\t\t\t\t\t\tif ( outputArray.constructor === Int8Array ) {\n\n\t\t\t\t\t\t\tscale = 1 / 127;\n\n\t\t\t\t\t\t} else if ( outputArray.constructor === Uint8Array ) {\n\n\t\t\t\t\t\t\tscale = 1 / 255;\n\n\t\t\t\t\t\t} else if ( outputArray.constructor == Int16Array ) {\n\n\t\t\t\t\t\t\tscale = 1 / 32767;\n\n\t\t\t\t\t\t} else if ( outputArray.constructor === Uint16Array ) {\n\n\t\t\t\t\t\t\tscale = 1 / 65535;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar scaled = new Float32Array( outputArray.length );\n\n\t\t\t\t\t\tfor ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutputArray = scaled;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar track = new TypedKeyframeTrack(\n\t\t\t\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\t\tinputAccessor.array,\n\t\t\t\t\t\t\toutputArray,\n\t\t\t\t\t\t\tinterpolation\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Override interpolation with custom factory method.\n\t\t\t\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\t\t\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t\t\t\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t\t\t\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t\t\t\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\t\t\t\t\t\treturn new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\t\t\t\t\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( track );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n\n\t\t\t\treturn new THREE.AnimationClip( name, undefined, tracks );\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t\t * @param {number} nodeIndex\n\t\t * @return {Promise<THREE.Object3D>}\n\t\t */\n\t\tGLTFParser.prototype.loadNode = function ( nodeIndex ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar parser = this;\n\n\t\t\tvar meshReferences = json.meshReferences;\n\t\t\tvar meshUses = json.meshUses;\n\n\t\t\tvar nodeDef = json.nodes[ nodeIndex ];\n\n\t\t\treturn ( function () {\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\t\t\t\tvar node;\n\n\t\t\t\t\t\tif ( meshReferences[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\t\t\t\tvar instanceNum = meshUses[ nodeDef.mesh ] ++;\n\n\t\t\t\t\t\t\tnode = mesh.clone();\n\t\t\t\t\t\t\tnode.name += '_instance_' + instanceNum;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tnode = mesh;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\t\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn node;\n\n\t\t\t\t\t} ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.extensions\n\t\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]\n\t\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t}() ).then( function ( objects ) {\n\n\t\t\t\tvar node;\n\n\t\t\t\t// .isBone isn't in glTF spec. See .markDefs\n\t\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\t\tnode = new THREE.Bone();\n\n\t\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\t\tnode = new THREE.Group();\n\n\t\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode = new THREE.Object3D();\n\n\t\t\t\t}\n\n\t\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.name ) {\n\n\t\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\t\tnode.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );\n\n\t\t\t\t}\n\n\t\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\t\tnode.applyMatrix4( matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn node;\n\n\t\t\t} );\n\n\t\t};\n\n\t\t/**\n\t\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t\t * @param {number} sceneIndex\n\t\t * @return {Promise<THREE.Group>}\n\t\t */\n\t\tGLTFParser.prototype.loadScene = function () {\n\n\t\t\t// scene node hierachy builder\n\n\t\t\tfunction buildNodeHierachy( nodeId, parentObject, json, parser ) {\n\n\t\t\t\tvar nodeDef = json.nodes[ nodeId ];\n\n\t\t\t\treturn parser.getDependency( 'node', nodeId ).then( function ( node ) {\n\n\t\t\t\t\tif ( nodeDef.skin === undefined ) return node;\n\n\t\t\t\t\t// build skeleton here as well\n\n\t\t\t\t\tvar skinEntry;\n\n\t\t\t\t\treturn parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {\n\n\t\t\t\t\t\tskinEntry = skin;\n\n\t\t\t\t\t\tvar pendingJoints = [];\n\n\t\t\t\t\t\tfor ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tpendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.all( pendingJoints );\n\n\t\t\t\t\t} ).then( function ( jointNodes ) {\n\n\t\t\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\t\t\tif ( ! mesh.isMesh ) return;\n\n\t\t\t\t\t\t\tvar bones = [];\n\t\t\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar jointNode = jointNodes[ j ];\n\n\t\t\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\t\t\tvar mat = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\t\tif ( skinEntry.inverseBindMatrices !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tmat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[ j ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\treturn node;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} ).then( function ( node ) {\n\n\t\t\t\t\t// build node hierachy\n\n\t\t\t\t\tparentObject.add( node );\n\n\t\t\t\t\tvar pending = [];\n\n\t\t\t\t\tif ( nodeDef.children ) {\n\n\t\t\t\t\t\tvar children = nodeDef.children;\n\n\t\t\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\t\t\tpending.push( buildNodeHierachy( child, node, json, parser ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all( pending );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn function loadScene( sceneIndex ) {\n\n\t\t\t\tvar json = this.json;\n\t\t\t\tvar extensions = this.extensions;\n\t\t\t\tvar sceneDef = this.json.scenes[ sceneIndex ];\n\t\t\t\tvar parser = this;\n\n\t\t\t\t// Loader returns Group, not Scene.\n\t\t\t\t// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172\n\t\t\t\tvar scene = new THREE.Group();\n\t\t\t\tif ( sceneDef.name ) scene.name = sceneDef.name;\n\n\t\t\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\t\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\t\t\tvar nodeIds = sceneDef.nodes || [];\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tfor ( var i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\t\t\tpending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\t\treturn scene;\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}();\n\n\t\treturn GLTFLoader;\n\n\t} )();\n\t\n\treturn THREE.GLTFLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/MTLLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * Loads a Wavefront .mtl file specifying materials\n\t *\n\t * @author angelxuanchang\n\t */\n\n\tTHREE.MTLLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.MTLLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.MTLLoader,\n\n\t\t/**\n\t\t * Loads and parses a MTL asset from a URL.\n\t\t *\n\t\t * @param {String} url - URL to the MTL file.\n\t\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t\t * @param {Function} [onProgress] - Callback for download progress.\n\t\t * @param {Function} [onError] - Callback for download errors.\n\t\t *\n\t\t * @see setPath setResourcePath\n\t\t *\n\t\t * @note In order for relative texture references to resolve correctly\n\t\t * you must call setResourcePath() explicitly prior to load.\n\t\t */\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterialOptions: function ( value ) {\n\n\t\t\tthis.materialOptions = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Parses a MTL file.\n\t\t *\n\t\t * @param {String} text - Content of MTL file\n\t\t * @return {THREE.MTLLoader.MaterialCreator}\n\t\t *\n\t\t * @see setPath setResourcePath\n\t\t *\n\t\t * @note In order for relative texture references to resolve correctly\n\t\t * you must call setResourcePath() explicitly prior to parse.\n\t\t */\n\t\tparse: function ( text, path ) {\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar info = {};\n\t\t\tvar delimiter_pattern = /\\s+/;\n\t\t\tvar materialsInfo = {};\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t\t// Blank line or comment ignore\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\t\tkey = key.toLowerCase();\n\n\t\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\t\tvalue = value.trim();\n\n\t\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t\t// New material\n\n\t\t\t\t\tinfo = { name: value };\n\t\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\t\tmaterialCreator.setManager( this.manager );\n\t\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\t\treturn materialCreator;\n\n\t\t}\n\n\t} );\n\n\n\t/**\n\t * Create a new THREE.MTLLoader.MaterialCreator\n\t * @param baseUrl - Url relative to which textures are loaded\n\t * @param options - Set of options on how to construct the materials\n\t *                  side: Which side to apply the material\n\t *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n\t *                  wrap: What type of wrapping to apply for textures\n\t *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n\t *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n\t *                                Default: false, assumed to be already normalized\n\t *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n\t *                                  Default: false\n\t * @constructor\n\t */\n\n\tTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\t\tthis.baseUrl = baseUrl || '';\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\t\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n\t};\n\n\tTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\t\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetManager: function ( value ) {\n\n\t\t\tthis.manager = value;\n\n\t\t},\n\n\t\tsetMaterials: function ( materialsInfo ) {\n\n\t\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\t\tthis.materials = {};\n\t\t\tthis.materialsArray = [];\n\t\t\tthis.nameLookup = {};\n\n\t\t},\n\n\t\tconvert: function ( materialsInfo ) {\n\n\t\t\tif ( ! this.options ) return materialsInfo;\n\n\t\t\tvar converted = {};\n\n\t\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\t\tvar covmat = {};\n\n\t\t\t\tconverted[ mn ] = covmat;\n\n\t\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\t\tvar save = true;\n\t\t\t\t\tvar value = mat[ prop ];\n\t\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\t\tcase 'kd':\n\t\t\t\t\t\tcase 'ka':\n\t\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( save ) {\n\n\t\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn converted;\n\n\t\t},\n\n\t\tpreload: function () {\n\n\t\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\t\tthis.create( mn );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetIndex: function ( materialName ) {\n\n\t\t\treturn this.nameLookup[ materialName ];\n\n\t\t},\n\n\t\tgetAsArray: function () {\n\n\t\t\tvar index = 0;\n\n\t\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\treturn this.materialsArray;\n\n\t\t},\n\n\t\tcreate: function ( materialName ) {\n\n\t\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\t\tthis.createMaterial_( materialName );\n\n\t\t\t}\n\n\t\t\treturn this.materials[ materialName ];\n\n\t\t},\n\n\t\tcreateMaterial_: function ( materialName ) {\n\n\t\t\t// Create material\n\n\t\t\tvar scope = this;\n\t\t\tvar mat = this.materialsInfo[ materialName ];\n\t\t\tvar params = {\n\n\t\t\t\tname: materialName,\n\t\t\t\tside: this.side\n\n\t\t\t};\n\n\t\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\t\treturn '';\n\n\t\t\t\t// Absolute URL\n\t\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\t\treturn baseUrl + url;\n\n\t\t\t}\n\n\t\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\t\tmap.wrapS = scope.wrap;\n\t\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\t\tparams[ mapType ] = map;\n\n\t\t\t}\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar n;\n\n\t\t\t\tif ( value === '' ) continue;\n\n\t\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\t\tcase 'kd':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ke':\n\n\t\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\t\tparams.emissive = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t\t// Specular map\n\n\t\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t\t// Emissive map\n\n\t\t\t\t\t\tsetMapForType( \"emissiveMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'norm':\n\n\t\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_bump':\n\t\t\t\t\tcase 'bump':\n\n\t\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t\t// Alpha map\n\n\t\t\t\t\t\tsetMapForType( \"alphaMap\", value );\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ns':\n\n\t\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tr':\n\t\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\t\treturn this.materials[ materialName ];\n\n\t\t},\n\n\t\tgetTextureParams: function ( value, matParams ) {\n\n\t\t\tvar texParams = {\n\n\t\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t\t };\n\n\t\t\tvar items = value.split( /\\s+/ );\n\t\t\tvar pos;\n\n\t\t\tpos = items.indexOf( '-bm' );\n\n\t\t\tif ( pos >= 0 ) {\n\n\t\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\t\titems.splice( pos, 2 );\n\n\t\t\t}\n\n\t\t\tpos = items.indexOf( '-s' );\n\n\t\t\tif ( pos >= 0 ) {\n\n\t\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t\t}\n\n\t\t\tpos = items.indexOf( '-o' );\n\n\t\t\tif ( pos >= 0 ) {\n\n\t\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t\t}\n\n\t\t\ttexParams.url = items.join( ' ' ).trim();\n\t\t\treturn texParams;\n\n\t\t},\n\n\t\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture;\n\t\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\t\t\tvar loader = manager.getHandler( url );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t\t}\n\n\t\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.MTLLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/OBJLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.OBJLoader = ( function () {\n\n\t\t// o object_name | g group_name\n\t\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t\t// mtllib file_reference\n\t\tvar material_library_pattern = /^mtllib /;\n\t\t// usemtl material_name\n\t\tvar material_use_pattern = /^usemtl /;\n\t\t// usemap map_name\n\t\tvar map_use_pattern = /^usemap /;\n\n\t\tfunction ParserState() {\n\n\t\t\tvar state = {\n\t\t\t\tobjects: [],\n\t\t\t\tobject: {},\n\n\t\t\t\tvertices: [],\n\t\t\t\tnormals: [],\n\t\t\t\tcolors: [],\n\t\t\t\tuvs: [],\n\n\t\t\t\tmaterials: {},\n\t\t\t\tmaterialLibraries: [],\n\n\t\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.object = {\n\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\t\tgeometry: {\n\t\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\t\tuvs: []\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmaterials: [],\n\t\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Inherit previous objects material.\n\t\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t\t},\n\n\t\t\t\tfinalize: function () {\n\n\t\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t\t},\n\n\t\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t\t},\n\n\t\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t\t},\n\n\t\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\t\tvar src = this.vertices;\n\t\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\t\tvar src = this.vertices;\n\t\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\t\tvar src = this.vertices;\n\t\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\t\tvar src = this.normals;\n\t\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\t\tvar src = this.colors;\n\t\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\t\tvar src = this.uvs;\n\t\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\t\tvar src = this.uvs;\n\t\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t\t},\n\n\t\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tstate.startObject( '', false );\n\n\t\t\treturn state;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction OBJLoader( manager ) {\n\n\t\t\tTHREE.Loader.call( this, manager );\n\n\t\t\tthis.materials = null;\n\n\t\t}\n\n\t\tOBJLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\t\tconstructor: OBJLoader,\n\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t},\n\n\t\t\tsetMaterials: function ( materials ) {\n\n\t\t\t\tthis.materials = materials;\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\tparse: function ( text ) {\n\n\t\t\t\tvar state = new ParserState();\n\n\t\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t\t}\n\n\t\t\t\tvar lines = text.split( '\\n' );\n\t\t\t\tvar line = '', lineFirstChar = '';\n\t\t\t\tvar lineLength = 0;\n\t\t\t\tvar result = [];\n\n\t\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\t\tline = lines[ i ];\n\n\t\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\t\tlineLength = line.length;\n\n\t\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t// o object_name\n\t\t\t\t\t\t// or\n\t\t\t\t\t\t// g group_name\n\n\t\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t\t// material\n\n\t\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t\t// mtl file\n\n\t\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t\t * or\n\t\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t\t * than 0.\"\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.finalize();\n\n\t\t\t\tvar container = new THREE.Group();\n\t\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\t\tvar geometry = object.geometry;\n\t\t\t\t\tvar materials = object.materials;\n\t\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\t\tvar buffergeometry = new THREE.BufferGeometry();\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create materials\n\n\t\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tvar materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\t\tvar material = state.materials[ materialHash ];\n\n\t\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\t\tvar materialLine = new THREE.LineBasicMaterial();\n\t\t\t\t\t\t\t\tTHREE.Material.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof THREE.PointsMaterial ) ) {\n\n\t\t\t\t\t\t\t\tvar materialPoints = new THREE.PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\t\tTHREE.Material.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\t\tmaterial = new THREE.LineBasicMaterial();\n\n\t\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\t\tmaterial = new THREE.PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create mesh\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmesh = new THREE.Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmesh = new THREE.Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmesh = new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = object.name;\n\n\t\t\t\t\tcontainer.add( mesh );\n\n\t\t\t\t}\n\n\t\t\t\treturn container;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn OBJLoader;\n\n\t} )();\n\t\n\treturn THREE.OBJLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/PCDLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Filipe Caixeta / http://filipecaixeta.com.br\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Description: A THREE loader for PCD ascii and binary files.\n\t */\n\n\tTHREE.PCDLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.littleEndian = true;\n\n\t};\n\n\n\tTHREE.PCDLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.PCDLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( data, url ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow e;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data, url ) {\n\n\t\t\t// from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n\n\t\t\tfunction decompressLZF( inData, outLength ) {\n\n\t\t\t\tvar inLength = inData.length;\n\t\t\t\tvar outData = new Uint8Array( outLength );\n\t\t\t\tvar inPtr = 0;\n\t\t\t\tvar outPtr = 0;\n\t\t\t\tvar ctrl;\n\t\t\t\tvar len;\n\t\t\t\tvar ref;\n\t\t\t\tdo {\n\n\t\t\t\t\tctrl = inData[ inPtr ++ ];\n\t\t\t\t\tif ( ctrl < ( 1 << 5 ) ) {\n\n\t\t\t\t\t\tctrl ++;\n\t\t\t\t\t\tif ( outPtr + ctrl > outLength ) throw new Error( 'Output buffer is not large enough' );\n\t\t\t\t\t\tif ( inPtr + ctrl > inLength ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\toutData[ outPtr ++ ] = inData[ inPtr ++ ];\n\n\t\t\t\t\t\t} while ( -- ctrl );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlen = ctrl >> 5;\n\t\t\t\t\t\tref = outPtr - ( ( ctrl & 0x1f ) << 8 ) - 1;\n\t\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\t\tif ( len === 7 ) {\n\n\t\t\t\t\t\t\tlen += inData[ inPtr ++ ];\n\t\t\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tref -= inData[ inPtr ++ ];\n\t\t\t\t\t\tif ( outPtr + len + 2 > outLength ) throw new Error( 'Output buffer is not large enough' );\n\t\t\t\t\t\tif ( ref < 0 ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\t\tif ( ref >= outPtr ) throw new Error( 'Invalid compressed data' );\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\toutData[ outPtr ++ ] = outData[ ref ++ ];\n\n\t\t\t\t\t\t} while ( -- len + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} while ( inPtr < inLength );\n\n\t\t\t\treturn outData;\n\n\t\t\t}\n\n\t\t\tfunction parseHeader( data ) {\n\n\t\t\t\tvar PCDheader = {};\n\t\t\t\tvar result1 = data.search( /[\\r\\n]DATA\\s(\\S*)\\s/i );\n\t\t\t\tvar result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec( data.substr( result1 - 1 ) );\n\n\t\t\t\tPCDheader.data = result2[ 1 ];\n\t\t\t\tPCDheader.headerLen = result2[ 0 ].length + result1;\n\t\t\t\tPCDheader.str = data.substr( 0, PCDheader.headerLen );\n\n\t\t\t\t// remove comments\n\n\t\t\t\tPCDheader.str = PCDheader.str.replace( /\\#.*/gi, '' );\n\n\t\t\t\t// parse\n\n\t\t\t\tPCDheader.version = /VERSION (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.fields = /FIELDS (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.size = /SIZE (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.type = /TYPE (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.count = /COUNT (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.width = /WIDTH (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.height = /HEIGHT (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.viewpoint = /VIEWPOINT (.*)/i.exec( PCDheader.str );\n\t\t\t\tPCDheader.points = /POINTS (.*)/i.exec( PCDheader.str );\n\n\t\t\t\t// evaluate\n\n\t\t\t\tif ( PCDheader.version !== null )\n\t\t\t\t\tPCDheader.version = parseFloat( PCDheader.version[ 1 ] );\n\n\t\t\t\tif ( PCDheader.fields !== null )\n\t\t\t\t\tPCDheader.fields = PCDheader.fields[ 1 ].split( ' ' );\n\n\t\t\t\tif ( PCDheader.type !== null )\n\t\t\t\t\tPCDheader.type = PCDheader.type[ 1 ].split( ' ' );\n\n\t\t\t\tif ( PCDheader.width !== null )\n\t\t\t\t\tPCDheader.width = parseInt( PCDheader.width[ 1 ] );\n\n\t\t\t\tif ( PCDheader.height !== null )\n\t\t\t\t\tPCDheader.height = parseInt( PCDheader.height[ 1 ] );\n\n\t\t\t\tif ( PCDheader.viewpoint !== null )\n\t\t\t\t\tPCDheader.viewpoint = PCDheader.viewpoint[ 1 ];\n\n\t\t\t\tif ( PCDheader.points !== null )\n\t\t\t\t\tPCDheader.points = parseInt( PCDheader.points[ 1 ], 10 );\n\n\t\t\t\tif ( PCDheader.points === null )\n\t\t\t\t\tPCDheader.points = PCDheader.width * PCDheader.height;\n\n\t\t\t\tif ( PCDheader.size !== null ) {\n\n\t\t\t\t\tPCDheader.size = PCDheader.size[ 1 ].split( ' ' ).map( function ( x ) {\n\n\t\t\t\t\t\treturn parseInt( x, 10 );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tif ( PCDheader.count !== null ) {\n\n\t\t\t\t\tPCDheader.count = PCDheader.count[ 1 ].split( ' ' ).map( function ( x ) {\n\n\t\t\t\t\t\treturn parseInt( x, 10 );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tPCDheader.count = [];\n\n\t\t\t\t\tfor ( var i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tPCDheader.count.push( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tPCDheader.offset = {};\n\n\t\t\t\tvar sizeSum = 0;\n\n\t\t\t\tfor ( var i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( PCDheader.data === 'ascii' ) {\n\n\t\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = i;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = sizeSum;\n\t\t\t\t\t\tsizeSum += PCDheader.size[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// for binary only\n\n\t\t\t\tPCDheader.rowSize = sizeSum;\n\n\t\t\t\treturn PCDheader;\n\n\t\t\t}\n\n\t\t\tvar textData = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t// parse header (always ascii format)\n\n\t\t\tvar PCDheader = parseHeader( textData );\n\n\t\t\t// parse data\n\n\t\t\tvar position = [];\n\t\t\tvar normal = [];\n\t\t\tvar color = [];\n\n\t\t\t// ascii\n\n\t\t\tif ( PCDheader.data === 'ascii' ) {\n\n\t\t\t\tvar offset = PCDheader.offset;\n\t\t\t\tvar pcdData = textData.substr( PCDheader.headerLen );\n\t\t\t\tvar lines = pcdData.split( '\\n' );\n\n\t\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( lines[ i ] === '' ) continue;\n\n\t\t\t\t\tvar line = lines[ i ].split( ' ' );\n\n\t\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\t\tposition.push( parseFloat( line[ offset.x ] ) );\n\t\t\t\t\t\tposition.push( parseFloat( line[ offset.y ] ) );\n\t\t\t\t\t\tposition.push( parseFloat( line[ offset.z ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\t\tvar rgb = parseFloat( line[ offset.rgb ] );\n\t\t\t\t\t\tvar r = ( rgb >> 16 ) & 0x0000ff;\n\t\t\t\t\t\tvar g = ( rgb >> 8 ) & 0x0000ff;\n\t\t\t\t\t\tvar b = ( rgb >> 0 ) & 0x0000ff;\n\t\t\t\t\t\tcolor.push( r / 255, g / 255, b / 255 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_x ] ) );\n\t\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_y ] ) );\n\t\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_z ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// binary-compressed\n\n\t\t\t// normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\n\t\t\t// binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\n\t\t\t// that requires a totally different parsing approach compared to non-compressed data\n\n\t\t\tif ( PCDheader.data === 'binary_compressed' ) {\n\n\t\t\t\tvar sizes = new Uint32Array( data.slice( PCDheader.headerLen, PCDheader.headerLen + 8 ) );\n\t\t\t\tvar compressedSize = sizes[ 0 ];\n\t\t\t\tvar decompressedSize = sizes[ 1 ];\n\t\t\t\tvar decompressed = decompressLZF( new Uint8Array( data, PCDheader.headerLen + 8, compressedSize ), decompressedSize );\n\t\t\t\tvar dataview = new DataView( decompressed.buffer );\n\n\t\t\t\tvar offset = PCDheader.offset;\n\n\t\t\t\tfor ( var i = 0; i < PCDheader.points; i ++ ) {\n\n\t\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.x ) + PCDheader.size[ 0 ] * i, this.littleEndian ) );\n\t\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.y ) + PCDheader.size[ 1 ] * i, this.littleEndian ) );\n\t\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.z ) + PCDheader.size[ 2 ] * i, this.littleEndian ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ 3 ] * i + 0 ) / 255.0 );\n\t\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ 3 ] * i + 1 ) / 255.0 );\n\t\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ 3 ] * i + 2 ) / 255.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_x ) + PCDheader.size[ 4 ] * i, this.littleEndian ) );\n\t\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_y ) + PCDheader.size[ 5 ] * i, this.littleEndian ) );\n\t\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_z ) + PCDheader.size[ 6 ] * i, this.littleEndian ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// binary\n\n\t\t\tif ( PCDheader.data === 'binary' ) {\n\n\t\t\t\tvar dataview = new DataView( data, PCDheader.headerLen );\n\t\t\t\tvar offset = PCDheader.offset;\n\n\t\t\t\tfor ( var i = 0, row = 0; i < PCDheader.points; i ++, row += PCDheader.rowSize ) {\n\n\t\t\t\t\tif ( offset.x !== undefined ) {\n\n\t\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.x, this.littleEndian ) );\n\t\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.y, this.littleEndian ) );\n\t\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.z, this.littleEndian ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset.rgb !== undefined ) {\n\n\t\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 2 ) / 255.0 );\n\t\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 1 ) / 255.0 );\n\t\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 0 ) / 255.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset.normal_x !== undefined ) {\n\n\t\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_x, this.littleEndian ) );\n\t\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_y, this.littleEndian ) );\n\t\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_z, this.littleEndian ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\tif ( position.length > 0 ) geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( position, 3 ) );\n\t\t\tif ( normal.length > 0 ) geometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normal, 3 ) );\n\t\t\tif ( color.length > 0 ) geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( color, 3 ) );\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t// build material\n\n\t\t\tvar material = new THREE.PointsMaterial( { size: 0.005 } );\n\n\t\t\tif ( color.length > 0 ) {\n\n\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.color.setHex( Math.random() * 0xffffff );\n\n\t\t\t}\n\n\t\t\t// build point cloud\n\n\t\t\tvar mesh = new THREE.Points( geometry, material );\n\t\t\tvar name = url.split( '' ).reverse().join( '' );\n\t\t\tname = /([^\\/]*)/.exec( name );\n\t\t\tname = name[ 1 ].split( '' ).reverse().join( '' );\n\t\t\tmesh.name = name;\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.PCDLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/PLYLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Wei Meng / http://about.me/menway\n\t *\n\t * Description: A THREE loader for PLY ASCII files (known as the Polygon\n\t * File Format or the Stanford Triangle Format).\n\t *\n\t * Limitations: ASCII decoding assumes file is UTF-8.\n\t *\n\t * Usage:\n\t *\tvar loader = new THREE.PLYLoader();\n\t *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n\t *\n\t *\t\tscene.add( new THREE.Mesh( geometry ) );\n\t *\n\t *\t} );\n\t *\n\t * If the PLY file uses non standard property names, they can be mapped while\n\t * loading. For example, the following maps the properties\n\t * “diffuse_(red|green|blue)” in the file to standard color names.\n\t *\n\t * loader.setPropertyNameMapping( {\n\t *\tdiffuse_red: 'red',\n\t *\tdiffuse_green: 'green',\n\t *\tdiffuse_blue: 'blue'\n\t * } );\n\t *\n\t */\n\n\n\tTHREE.PLYLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.propertyNameMapping = {};\n\n\t};\n\n\tTHREE.PLYLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.PLYLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPropertyNameMapping: function ( mapping ) {\n\n\t\t\tthis.propertyNameMapping = mapping;\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tfunction parseHeader( data ) {\n\n\t\t\t\tvar patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n\t\t\t\tvar headerText = '';\n\t\t\t\tvar headerLength = 0;\n\t\t\t\tvar result = patternHeader.exec( data );\n\n\t\t\t\tif ( result !== null ) {\n\n\t\t\t\t\theaderText = result[ 1 ];\n\t\t\t\t\theaderLength = result[ 0 ].length;\n\n\t\t\t\t}\n\n\t\t\t\tvar header = {\n\t\t\t\t\tcomments: [],\n\t\t\t\t\telements: [],\n\t\t\t\t\theaderLength: headerLength\n\t\t\t\t};\n\n\t\t\t\tvar lines = headerText.split( '\\n' );\n\t\t\t\tvar currentElement;\n\t\t\t\tvar lineType, lineValues;\n\n\t\t\t\tfunction make_ply_element_property( propertValues, propertyNameMapping ) {\n\n\t\t\t\t\tvar property = { type: propertValues[ 0 ] };\n\n\t\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\t\tproperty.name = propertValues[ 3 ];\n\t\t\t\t\t\tproperty.countType = propertValues[ 1 ];\n\t\t\t\t\t\tproperty.itemType = propertValues[ 2 ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tproperty.name = propertValues[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( property.name in propertyNameMapping ) {\n\n\t\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn property;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\t\tvar line = lines[ i ];\n\t\t\t\t\tline = line.trim();\n\n\t\t\t\t\tif ( line === '' ) continue;\n\n\t\t\t\t\tlineValues = line.split( /\\s+/ );\n\t\t\t\t\tlineType = lineValues.shift();\n\t\t\t\t\tline = lineValues.join( ' ' );\n\n\t\t\t\t\tswitch ( lineType ) {\n\n\t\t\t\t\t\tcase 'format':\n\n\t\t\t\t\t\t\theader.format = lineValues[ 0 ];\n\t\t\t\t\t\t\theader.version = lineValues[ 1 ];\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'comment':\n\n\t\t\t\t\t\t\theader.comments.push( line );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'element':\n\n\t\t\t\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentElement = {};\n\t\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\n\t\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\n\t\t\t\t\t\t\tcurrentElement.properties = [];\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'property':\n\n\t\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t}\n\n\t\t\tfunction parseASCIINumber( n, type ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n\t\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n\t\t\t\t\t\treturn parseInt( n );\n\n\t\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\n\n\t\t\t\t\t\treturn parseFloat( n );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseASCIIElement( properties, line ) {\n\n\t\t\t\tvar values = line.split( /\\s+/ );\n\n\t\t\t\tvar element = {};\n\n\t\t\t\tfor ( var i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\t\tvar list = [];\n\t\t\t\t\t\tvar n = parseASCIINumber( values.shift(), properties[ i ].countType );\n\n\t\t\t\t\t\tfor ( var j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\t\tlist.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t\tfunction parseASCII( data, header ) {\n\n\t\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n\t\t\t\tvar buffer = {\n\t\t\t\t\tindices: [],\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\tfaceVertexUvs: [],\n\t\t\t\t\tcolors: []\n\t\t\t\t};\n\n\t\t\t\tvar result;\n\n\t\t\t\tvar patternBody = /end_header\\s([\\s\\S]*)$/;\n\t\t\t\tvar body = '';\n\t\t\t\tif ( ( result = patternBody.exec( data ) ) !== null ) {\n\n\t\t\t\t\tbody = result[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar lines = body.split( '\\n' );\n\t\t\t\tvar currentElement = 0;\n\t\t\t\tvar currentElementCount = 0;\n\n\t\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\t\tvar line = lines[ i ];\n\t\t\t\t\tline = line.trim();\n\t\t\t\t\tif ( line === '' ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( currentElementCount >= header.elements[ currentElement ].count ) {\n\n\t\t\t\t\t\tcurrentElement ++;\n\t\t\t\t\t\tcurrentElementCount = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar element = parseASCIIElement( header.elements[ currentElement ].properties, line );\n\n\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t\tcurrentElementCount ++;\n\n\t\t\t\t}\n\n\t\t\t\treturn postProcess( buffer );\n\n\t\t\t}\n\n\t\t\tfunction postProcess( buffer ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\t// mandatory buffer data\n\n\t\t\t\tif ( buffer.indices.length > 0 ) {\n\n\t\t\t\t\tgeometry.setIndex( buffer.indices );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( buffer.vertices, 3 ) );\n\n\t\t\t\t// optional buffer data\n\n\t\t\t\tif ( buffer.normals.length > 0 ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( buffer.normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffer.uvs.length > 0 ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( buffer.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffer.colors.length > 0 ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( buffer.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffer.faceVertexUvs.length > 0 ) {\n\n\t\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction handleElement( buffer, elementName, element ) {\n\n\t\t\t\tif ( elementName === 'vertex' ) {\n\n\t\t\t\t\tbuffer.vertices.push( element.x, element.y, element.z );\n\n\t\t\t\t\tif ( 'nx' in element && 'ny' in element && 'nz' in element ) {\n\n\t\t\t\t\t\tbuffer.normals.push( element.nx, element.ny, element.nz );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 's' in element && 't' in element ) {\n\n\t\t\t\t\t\tbuffer.uvs.push( element.s, element.t );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'red' in element && 'green' in element && 'blue' in element ) {\n\n\t\t\t\t\t\tbuffer.colors.push( element.red / 255.0, element.green / 255.0, element.blue / 255.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( elementName === 'face' ) {\n\n\t\t\t\t\tvar vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\t\t\t\t\tvar texcoord = element.texcoord;\n\n\t\t\t\t\tif ( vertex_indices.length === 3 ) {\n\n\t\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\n\n\t\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\n\n\t\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\n\t\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\n\t\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( vertex_indices.length === 4 ) {\n\n\t\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\n\t\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction binaryRead( dataview, at, type, little_endian ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t// corespondences for non-specific length types here match rply:\n\t\t\t\t\tcase 'int8':\t\tcase 'char':\t return [ dataview.getInt8( at ), 1 ];\n\t\t\t\t\tcase 'uint8':\t\tcase 'uchar':\t return [ dataview.getUint8( at ), 1 ];\n\t\t\t\t\tcase 'int16':\t\tcase 'short':\t return [ dataview.getInt16( at, little_endian ), 2 ];\n\t\t\t\t\tcase 'uint16':\tcase 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];\n\t\t\t\t\tcase 'int32':\t\tcase 'int':\t\t return [ dataview.getInt32( at, little_endian ), 4 ];\n\t\t\t\t\tcase 'uint32':\tcase 'uint':\t return [ dataview.getUint32( at, little_endian ), 4 ];\n\t\t\t\t\tcase 'float32': case 'float':\t return [ dataview.getFloat32( at, little_endian ), 4 ];\n\t\t\t\t\tcase 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction binaryReadElement( dataview, at, properties, little_endian ) {\n\n\t\t\t\tvar element = {};\n\t\t\t\tvar result, read = 0;\n\n\t\t\t\tfor ( var i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\t\tvar list = [];\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].countType, little_endian );\n\t\t\t\t\t\tvar n = result[ 0 ];\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t\tfor ( var j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );\n\t\t\t\t\t\t\tlist.push( result[ 0 ] );\n\t\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].type, little_endian );\n\t\t\t\t\t\telement[ properties[ i ].name ] = result[ 0 ];\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn [ element, read ];\n\n\t\t\t}\n\n\t\t\tfunction parseBinary( data, header ) {\n\n\t\t\t\tvar buffer = {\n\t\t\t\t\tindices: [],\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\tfaceVertexUvs: [],\n\t\t\t\t\tcolors: []\n\t\t\t\t};\n\n\t\t\t\tvar little_endian = ( header.format === 'binary_little_endian' );\n\t\t\t\tvar body = new DataView( data, header.headerLength );\n\t\t\t\tvar result, loc = 0;\n\n\t\t\t\tfor ( var currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\n\n\t\t\t\t\tfor ( var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {\n\n\t\t\t\t\t\tresult = binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );\n\t\t\t\t\t\tloc += result[ 1 ];\n\t\t\t\t\t\tvar element = result[ 0 ];\n\n\t\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn postProcess( buffer );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar geometry;\n\t\t\tvar scope = this;\n\n\t\t\tif ( data instanceof ArrayBuffer ) {\n\n\t\t\t\tvar text = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\t\t\t\tvar header = parseHeader( text );\n\n\t\t\t\tgeometry = header.format === 'ascii' ? parseASCII( text, header ) : parseBinary( data, header );\n\n\t\t\t} else {\n\n\t\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.PLYLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/PRWMLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Kevin Chapelier / https://github.com/kchapelier\n\t * See https://github.com/kchapelier/PRWM for more informations about this file format\n\t */\n\n\tTHREE.PRWMLoader = ( function () {\n\n\t\tvar bigEndianPlatform = null;\n\n\t\t/**\n\t\t * Check if the endianness of the platform is big-endian (most significant bit first)\n\t\t * @returns {boolean} True if big-endian, false if little-endian\n\t\t */\n\t\tfunction isBigEndianPlatform() {\n\n\t\t\tif ( bigEndianPlatform === null ) {\n\n\t\t\t\tvar buffer = new ArrayBuffer( 2 ),\n\t\t\t\t\tuint8Array = new Uint8Array( buffer ),\n\t\t\t\t\tuint16Array = new Uint16Array( buffer );\n\n\t\t\t\tuint8Array[ 0 ] = 0xAA; // set first byte\n\t\t\t\tuint8Array[ 1 ] = 0xBB; // set second byte\n\t\t\t\tbigEndianPlatform = ( uint16Array[ 0 ] === 0xAABB );\n\n\t\t\t}\n\n\t\t\treturn bigEndianPlatform;\n\n\t\t}\n\n\t\t// match the values defined in the spec to the TypedArray types\n\t\tvar InvertedEncodingTypes = [\n\t\t\tnull,\n\t\t\tFloat32Array,\n\t\t\tnull,\n\t\t\tInt8Array,\n\t\t\tInt16Array,\n\t\t\tnull,\n\t\t\tInt32Array,\n\t\t\tUint8Array,\n\t\t\tUint16Array,\n\t\t\tnull,\n\t\t\tUint32Array\n\t\t];\n\n\t\t// define the method to use on a DataView, corresponding the TypedArray type\n\t\tvar getMethods = {\n\t\t\tUint16Array: 'getUint16',\n\t\t\tUint32Array: 'getUint32',\n\t\t\tInt16Array: 'getInt16',\n\t\t\tInt32Array: 'getInt32',\n\t\t\tFloat32Array: 'getFloat32',\n\t\t\tFloat64Array: 'getFloat64'\n\t\t};\n\n\n\t\tfunction copyFromBuffer( sourceArrayBuffer, viewType, position, length, fromBigEndian ) {\n\n\t\t\tvar bytesPerElement = viewType.BYTES_PER_ELEMENT,\n\t\t\t\tresult;\n\n\t\t\tif ( fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1 ) {\n\n\t\t\t\tresult = new viewType( sourceArrayBuffer, position, length );\n\n\t\t\t} else {\n\n\t\t\t\tvar readView = new DataView( sourceArrayBuffer, position, length * bytesPerElement ),\n\t\t\t\t\tgetMethod = getMethods[ viewType.name ],\n\t\t\t\t\tlittleEndian = ! fromBigEndian,\n\t\t\t\t\ti = 0;\n\n\t\t\t\tresult = new viewType( length );\n\n\t\t\t\tfor ( ; i < length; i ++ ) {\n\n\t\t\t\t\tresult[ i ] = readView[ getMethod ]( i * bytesPerElement, littleEndian );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\n\t\tfunction decodePrwm( buffer ) {\n\n\t\t\tvar array = new Uint8Array( buffer ),\n\t\t\t\tversion = array[ 0 ],\n\t\t\t\tflags = array[ 1 ],\n\t\t\t\tindexedGeometry = !! ( flags >> 7 & 0x01 ),\n\t\t\t\tindicesType = flags >> 6 & 0x01,\n\t\t\t\tbigEndian = ( flags >> 5 & 0x01 ) === 1,\n\t\t\t\tattributesNumber = flags & 0x1F,\n\t\t\t\tvaluesNumber = 0,\n\t\t\t\tindicesNumber = 0;\n\n\t\t\tif ( bigEndian ) {\n\n\t\t\t\tvaluesNumber = ( array[ 2 ] << 16 ) + ( array[ 3 ] << 8 ) + array[ 4 ];\n\t\t\t\tindicesNumber = ( array[ 5 ] << 16 ) + ( array[ 6 ] << 8 ) + array[ 7 ];\n\n\t\t\t} else {\n\n\t\t\t\tvaluesNumber = array[ 2 ] + ( array[ 3 ] << 8 ) + ( array[ 4 ] << 16 );\n\t\t\t\tindicesNumber = array[ 5 ] + ( array[ 6 ] << 8 ) + ( array[ 7 ] << 16 );\n\n\t\t\t}\n\n\t\t\t/** PRELIMINARY CHECKS **/\n\n\t\t\tif ( version === 0 ) {\n\n\t\t\t\tthrow new Error( 'PRWM decoder: Invalid format version: 0' );\n\n\t\t\t} else if ( version !== 1 ) {\n\n\t\t\t\tthrow new Error( 'PRWM decoder: Unsupported format version: ' + version );\n\n\t\t\t}\n\n\t\t\tif ( ! indexedGeometry ) {\n\n\t\t\t\tif ( indicesType !== 0 ) {\n\n\t\t\t\t\tthrow new Error( 'PRWM decoder: Indices type must be set to 0 for non-indexed geometries' );\n\n\t\t\t\t} else if ( indicesNumber !== 0 ) {\n\n\t\t\t\t\tthrow new Error( 'PRWM decoder: Number of indices must be set to 0 for non-indexed geometries' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/** PARSING **/\n\n\t\t\tvar pos = 8;\n\n\t\t\tvar attributes = {},\n\t\t\t\tattributeName,\n\t\t\t\tchar,\n\t\t\t\tattributeType,\n\t\t\t\tcardinality,\n\t\t\t\tencodingType,\n\t\t\t\tarrayType,\n\t\t\t\tvalues,\n\t\t\t\tindices,\n\t\t\t\ti;\n\n\t\t\tfor ( i = 0; i < attributesNumber; i ++ ) {\n\n\t\t\t\tattributeName = '';\n\n\t\t\t\twhile ( pos < array.length ) {\n\n\t\t\t\t\tchar = array[ pos ];\n\t\t\t\t\tpos ++;\n\n\t\t\t\t\tif ( char === 0 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tattributeName += String.fromCharCode( char );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tflags = array[ pos ];\n\n\t\t\t\tattributeType = flags >> 7 & 0x01;\n\t\t\t\tcardinality = ( flags >> 4 & 0x03 ) + 1;\n\t\t\t\tencodingType = flags & 0x0F;\n\t\t\t\tarrayType = InvertedEncodingTypes[ encodingType ];\n\n\t\t\t\tpos ++;\n\n\t\t\t\t// padding to next multiple of 4\n\t\t\t\tpos = Math.ceil( pos / 4 ) * 4;\n\n\t\t\t\tvalues = copyFromBuffer( buffer, arrayType, pos, cardinality * valuesNumber, bigEndian );\n\n\t\t\t\tpos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n\n\t\t\t\tattributes[ attributeName ] = {\n\t\t\t\t\ttype: attributeType,\n\t\t\t\t\tcardinality: cardinality,\n\t\t\t\t\tvalues: values\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tpos = Math.ceil( pos / 4 ) * 4;\n\n\t\t\tindices = null;\n\n\t\t\tif ( indexedGeometry ) {\n\n\t\t\t\tindices = copyFromBuffer(\n\t\t\t\t\tbuffer,\n\t\t\t\t\tindicesType === 1 ? Uint32Array : Uint16Array,\n\t\t\t\t\tpos,\n\t\t\t\t\tindicesNumber,\n\t\t\t\t\tbigEndian\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tversion: version,\n\t\t\t\tattributes: attributes,\n\t\t\t\tindices: indices\n\t\t\t};\n\n\t\t}\n\n\t\t// Define the public interface\n\n\t\tfunction PRWMLoader( manager ) {\n\n\t\t\tTHREE.Loader.call( this, manager );\n\n\t\t}\n\n\t\tPRWMLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\t\tconstructor: PRWMLoader,\n\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\t\tvar scope = this;\n\n\t\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\t\tloader.setPath( scope.path );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\t\turl = url.replace( /\\*/g, isBigEndianPlatform() ? 'be' : 'le' );\n\n\t\t\t\tloader.load( url, function ( arrayBuffer ) {\n\n\t\t\t\t\tonLoad( scope.parse( arrayBuffer ) );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t},\n\n\t\t\tparse: function ( arrayBuffer ) {\n\n\t\t\t\tvar data = decodePrwm( arrayBuffer ),\n\t\t\t\t\tattributesKey = Object.keys( data.attributes ),\n\t\t\t\t\tbufferGeometry = new THREE.BufferGeometry(),\n\t\t\t\t\tattribute,\n\t\t\t\t\ti;\n\n\t\t\t\tfor ( i = 0; i < attributesKey.length; i ++ ) {\n\n\t\t\t\t\tattribute = data.attributes[ attributesKey[ i ] ];\n\t\t\t\t\tbufferGeometry.setAttribute( attributesKey[ i ], new THREE.BufferAttribute( attribute.values, attribute.cardinality, attribute.normalized ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.indices !== null ) {\n\n\t\t\t\t\tbufferGeometry.setIndex( new THREE.BufferAttribute( data.indices, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn bufferGeometry;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tPRWMLoader.isBigEndianPlatform = function () {\n\n\t\t\treturn isBigEndianPlatform();\n\n\t\t};\n\n\t\treturn PRWMLoader;\n\n\t} )();\n\t\n\treturn THREE.PRWMLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/STLLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author aleeper / http://adamleeper.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author gero3 / https://github.com/gero3\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author neverhood311 / https://github.com/neverhood311\n\t *\n\t * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n\t *\n\t * Supports both binary and ASCII encoded files, with automatic detection of type.\n\t *\n\t * The loader returns a non-indexed buffer geometry.\n\t *\n\t * Limitations:\n\t *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n\t *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n\t *  ASCII decoding assumes file is UTF-8.\n\t *\n\t * Usage:\n\t *  var loader = new THREE.STLLoader();\n\t *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n\t *    scene.add( new THREE.Mesh( geometry ) );\n\t *  });\n\t *\n\t * For binary STLs geometry might contain colors for vertices. To use it:\n\t *  // use the same code to load STL as above\n\t *  if (geometry.hasColors) {\n\t *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\n\t *  } else { .... }\n\t *  var mesh = new THREE.Mesh( geometry, material );\n\t *\n\t * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n\t * Groups can be used to assign a different color by defining an array of materials with the same length of\n\t * geometry.groups and passing it to the Mesh constructor:\n\t *\n\t * var mesh = new THREE.Mesh( geometry, material );\n\t *\n\t * For example:\n\t *\n\t *  var materials = [];\n\t *  var nGeometryGroups = geometry.groups.length;\n\t *\n\t *  var colorMap = ...; // Some logic to index colors.\n\t *\n\t *  for (var i = 0; i < nGeometryGroups; i++) {\n\t *\n\t *\t\tvar material = new THREE.MeshPhongMaterial({\n\t *\t\t\tcolor: colorMap[i],\n\t *\t\t\twireframe: false\n\t *\t\t});\n\t *\n\t *  }\n\t *\n\t *  materials.push(material);\n\t *  var mesh = new THREE.Mesh(geometry, materials);\n\t */\n\n\n\tTHREE.STLLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.STLLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.STLLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( exception );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tfunction isBinary( data ) {\n\n\t\t\t\tvar expect, face_size, n_faces, reader;\n\t\t\t\treader = new DataView( data );\n\t\t\t\tface_size = ( 32 / 8 * 3 ) + ( ( 32 / 8 * 3 ) * 3 ) + ( 16 / 8 );\n\t\t\t\tn_faces = reader.getUint32( 80, true );\n\t\t\t\texpect = 80 + ( 32 / 8 ) + ( n_faces * face_size );\n\n\t\t\t\tif ( expect === reader.byteLength ) {\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\t// An ASCII STL data must begin with 'solid ' as the first six bytes.\n\t\t\t\t// However, ASCII STLs lacking the SPACE after the 'd' are known to be\n\t\t\t\t// plentiful.  So, check the first 5 bytes for 'solid'.\n\n\t\t\t\t// Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n\t\t\t\t// https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n\t\t\t\t// Search for \"solid\" to start anywhere after those prefixes.\n\n\t\t\t\t// US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\t\t\t\tvar solid = [ 115, 111, 108, 105, 100 ];\n\n\t\t\t\tfor ( var off = 0; off < 5; off ++ ) {\n\n\t\t\t\t\t// If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n\t\t\t\t\tif ( matchDataViewAt( solid, reader, off ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\t// Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tfunction matchDataViewAt( query, reader, offset ) {\n\n\t\t\t\t// Check if each byte in query matches the corresponding byte from the current offset\n\n\t\t\t\tfor ( var i = 0, il = query.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( query[ i ] !== reader.getUint8( offset + i, false ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tfunction parseBinary( data ) {\n\n\t\t\t\tvar reader = new DataView( data );\n\t\t\t\tvar faces = reader.getUint32( 80, true );\n\n\t\t\t\tvar r, g, b, hasColors = false, colors;\n\t\t\t\tvar defaultR, defaultG, defaultB, alpha;\n\n\t\t\t\t// process STL header\n\t\t\t\t// check for default color in header (\"COLOR=rgba\" sequence).\n\n\t\t\t\tfor ( var index = 0; index < 80 - 10; index ++ ) {\n\n\t\t\t\t\tif ( ( reader.getUint32( index, false ) == 0x434F4C4F /*COLO*/ ) &&\n\t\t\t\t\t\t( reader.getUint8( index + 4 ) == 0x52 /*'R'*/ ) &&\n\t\t\t\t\t\t( reader.getUint8( index + 5 ) == 0x3D /*'='*/ ) ) {\n\n\t\t\t\t\t\thasColors = true;\n\t\t\t\t\t\tcolors = new Float32Array( faces * 3 * 3 );\n\n\t\t\t\t\t\tdefaultR = reader.getUint8( index + 6 ) / 255;\n\t\t\t\t\t\tdefaultG = reader.getUint8( index + 7 ) / 255;\n\t\t\t\t\t\tdefaultB = reader.getUint8( index + 8 ) / 255;\n\t\t\t\t\t\talpha = reader.getUint8( index + 9 ) / 255;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar dataOffset = 84;\n\t\t\t\tvar faceLength = 12 * 4 + 2;\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar vertices = new Float32Array( faces * 3 * 3 );\n\t\t\t\tvar normals = new Float32Array( faces * 3 * 3 );\n\n\t\t\t\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\t\t\t\tvar start = dataOffset + face * faceLength;\n\t\t\t\t\tvar normalX = reader.getFloat32( start, true );\n\t\t\t\t\tvar normalY = reader.getFloat32( start + 4, true );\n\t\t\t\t\tvar normalZ = reader.getFloat32( start + 8, true );\n\n\t\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\t\tvar packedColor = reader.getUint16( start + 48, true );\n\n\t\t\t\t\t\tif ( ( packedColor & 0x8000 ) === 0 ) {\n\n\t\t\t\t\t\t\t// facet has its own unique color\n\n\t\t\t\t\t\t\tr = ( packedColor & 0x1F ) / 31;\n\t\t\t\t\t\t\tg = ( ( packedColor >> 5 ) & 0x1F ) / 31;\n\t\t\t\t\t\t\tb = ( ( packedColor >> 10 ) & 0x1F ) / 31;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tr = defaultR;\n\t\t\t\t\t\t\tg = defaultG;\n\t\t\t\t\t\t\tb = defaultB;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 1; i <= 3; i ++ ) {\n\n\t\t\t\t\t\tvar vertexstart = start + i * 12;\n\t\t\t\t\t\tvar componentIdx = ( face * 3 * 3 ) + ( ( i - 1 ) * 3 );\n\n\t\t\t\t\t\tvertices[ componentIdx ] = reader.getFloat32( vertexstart, true );\n\t\t\t\t\t\tvertices[ componentIdx + 1 ] = reader.getFloat32( vertexstart + 4, true );\n\t\t\t\t\t\tvertices[ componentIdx + 2 ] = reader.getFloat32( vertexstart + 8, true );\n\n\t\t\t\t\t\tnormals[ componentIdx ] = normalX;\n\t\t\t\t\t\tnormals[ componentIdx + 1 ] = normalY;\n\t\t\t\t\t\tnormals[ componentIdx + 2 ] = normalZ;\n\n\t\t\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\t\t\tcolors[ componentIdx ] = r;\n\t\t\t\t\t\t\tcolors[ componentIdx + 1 ] = g;\n\t\t\t\t\t\t\tcolors[ componentIdx + 2 ] = b;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\t\t\tgeometry.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\n\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\t\t\t\t\tgeometry.hasColors = true;\n\t\t\t\t\tgeometry.alpha = alpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction parseASCII( data ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tvar patternSolid = /solid([\\s\\S]*?)endsolid/g;\n\t\t\t\tvar patternFace = /facet([\\s\\S]*?)endfacet/g;\n\t\t\t\tvar faceCounter = 0;\n\n\t\t\t\tvar patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n\t\t\t\tvar patternVertex = new RegExp( 'vertex' + patternFloat + patternFloat + patternFloat, 'g' );\n\t\t\t\tvar patternNormal = new RegExp( 'normal' + patternFloat + patternFloat + patternFloat, 'g' );\n\n\t\t\t\tvar vertices = [];\n\t\t\t\tvar normals = [];\n\n\t\t\t\tvar normal = new THREE.Vector3();\n\n\t\t\t\tvar result;\n\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar startVertex = 0;\n\t\t\t\tvar endVertex = 0;\n\n\t\t\t\twhile ( ( result = patternSolid.exec( data ) ) !== null ) {\n\n\t\t\t\t\tstartVertex = endVertex;\n\n\t\t\t\t\tvar solid = result[ 0 ];\n\n\t\t\t\t\twhile ( ( result = patternFace.exec( solid ) ) !== null ) {\n\n\t\t\t\t\t\tvar vertexCountPerFace = 0;\n\t\t\t\t\t\tvar normalCountPerFace = 0;\n\n\t\t\t\t\t\tvar text = result[ 0 ];\n\n\t\t\t\t\t\twhile ( ( result = patternNormal.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\t\tnormal.x = parseFloat( result[ 1 ] );\n\t\t\t\t\t\t\tnormal.y = parseFloat( result[ 2 ] );\n\t\t\t\t\t\t\tnormal.z = parseFloat( result[ 3 ] );\n\t\t\t\t\t\t\tnormalCountPerFace ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twhile ( ( result = patternVertex.exec( text ) ) !== null ) {\n\n\t\t\t\t\t\t\tvertices.push( parseFloat( result[ 1 ] ), parseFloat( result[ 2 ] ), parseFloat( result[ 3 ] ) );\n\t\t\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\t\t\t\tvertexCountPerFace ++;\n\t\t\t\t\t\t\tendVertex ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// every face have to own ONE valid normal\n\n\t\t\t\t\t\tif ( normalCountPerFace !== 1 ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// each face have to own THREE valid vertices\n\n\t\t\t\t\t\tif ( vertexCountPerFace !== 3 ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceCounter ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar start = startVertex;\n\t\t\t\t\tvar count = endVertex - startVertex;\n\n\t\t\t\t\tgeometry.addGroup( start, count, groupCount );\n\t\t\t\t\tgroupCount ++;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\t\t\t\tgeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction ensureString( buffer ) {\n\n\t\t\t\tif ( typeof buffer !== 'string' ) {\n\n\t\t\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn buffer;\n\n\t\t\t}\n\n\t\t\tfunction ensureBinary( buffer ) {\n\n\t\t\t\tif ( typeof buffer === 'string' ) {\n\n\t\t\t\t\tvar array_buffer = new Uint8Array( buffer.length );\n\t\t\t\t\tfor ( var i = 0; i < buffer.length; i ++ ) {\n\n\t\t\t\t\t\tarray_buffer[ i ] = buffer.charCodeAt( i ) & 0xff; // implicitly assumes little-endian\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array_buffer.buffer || array_buffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn buffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tvar binData = ensureBinary( data );\n\n\t\t\treturn isBinary( binData ) ? parseBinary( binData ) : parseASCII( ensureString( data ) );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.STLLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/SVGLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author zz85 / http://joshuakoo.com/\n\t * @author yomboprime / https://yombo.org\n\t */\n\n\tTHREE.SVGLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\t// Default dots per inch\n\t\tthis.defaultDPI = 90;\n\n\t\t// Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\t\tthis.defaultUnit = \"px\";\n\n\t};\n\n\tTHREE.SVGLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.SVGLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tfunction parseNode( node, style ) {\n\n\t\t\t\tif ( node.nodeType !== 1 ) return;\n\n\t\t\t\tvar transform = getNodeTransform( node );\n\n\t\t\t\tvar path = null;\n\n\t\t\t\tswitch ( node.nodeName ) {\n\n\t\t\t\t\tcase 'svg':\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'g':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'path':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tif ( node.hasAttribute( 'd' ) ) path = parsePathNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rect':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tpath = parseRectNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polygon':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tpath = parsePolygonNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polyline':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tpath = parsePolylineNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'circle':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tpath = parseCircleNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ellipse':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tpath = parseEllipseNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'line':\n\t\t\t\t\t\tstyle = parseStyle( node, style );\n\t\t\t\t\t\tpath = parseLineNode( node );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( node );\n\n\t\t\t\t}\n\n\t\t\t\tif ( path ) {\n\n\t\t\t\t\tif ( style.fill !== undefined && style.fill !== 'none' ) {\n\n\t\t\t\t\t\tpath.color.setStyle( style.fill );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttransformPath( path, currentTransform );\n\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t\tpath.userData = { node: node, style: style };\n\n\t\t\t\t}\n\n\t\t\t\tvar nodes = node.childNodes;\n\n\t\t\t\tfor ( var i = 0; i < nodes.length; i ++ ) {\n\n\t\t\t\t\tparseNode( nodes[ i ], style );\n\n\t\t\t\t}\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\ttransformStack.pop();\n\n\t\t\t\t\tif ( transformStack.length > 0 ) {\n\n\t\t\t\t\t\tcurrentTransform.copy( transformStack[ transformStack.length - 1 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcurrentTransform.identity();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parsePathNode( node ) {\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\n\t\t\t\tvar point = new THREE.Vector2();\n\t\t\t\tvar control = new THREE.Vector2();\n\n\t\t\t\tvar firstPoint = new THREE.Vector2();\n\t\t\t\tvar isFirstPoint = true;\n\t\t\t\tvar doSetFirstPoint = false;\n\n\t\t\t\tvar d = node.getAttribute( 'd' );\n\n\t\t\t\t// console.log( d );\n\n\t\t\t\tvar commands = d.match( /[a-df-z][^a-df-z]*/ig );\n\n\t\t\t\tfor ( var i = 0, l = commands.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar command = commands[ i ];\n\n\t\t\t\t\tvar type = command.charAt( 0 );\n\t\t\t\t\tvar data = command.substr( 1 ).trim();\n\n\t\t\t\t\tif ( isFirstPoint === true ) {\n\n\t\t\t\t\t\tdoSetFirstPoint = true;\n\t\t\t\t\t\tisFirstPoint = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'M':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\n\t\t\t\t\t\t\t\tif ( j === 0 ) {\n\n\t\t\t\t\t\t\t\t\tpath.moveTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'H':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'L':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'C':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 6 ) {\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 3 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 4 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 5 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\t\tcontrol.y = numbers[ j + 3 ];\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 4 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 5 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'S':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\t\tgetReflection( point.x, control.x ),\n\t\t\t\t\t\t\t\t\tgetReflection( point.y, control.y ),\n\t\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 3 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tcontrol.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 3 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 1 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 2 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 3 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tcontrol.y = numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 2 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 3 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'T':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\t\tvar rx = getReflection( point.x, control.x );\n\t\t\t\t\t\t\t\tvar ry = getReflection( point.y, control.y );\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\t\trx,\n\t\t\t\t\t\t\t\t\try,\n\t\t\t\t\t\t\t\t\tnumbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tnumbers[ j + 1 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = rx;\n\t\t\t\t\t\t\t\tcontrol.y = ry;\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 1 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'A':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 7 ) {\n\n\t\t\t\t\t\t\t\tvar start = point.clone();\n\t\t\t\t\t\t\t\tpoint.x = numbers[ j + 5 ];\n\t\t\t\t\t\t\t\tpoint.y = numbers[ j + 6 ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tparseArcCommand(\n\t\t\t\t\t\t\t\t\tpath, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\n\t\t\t\t\t\t\t\tif ( j === 0 ) {\n\n\t\t\t\t\t\t\t\t\tpath.moveTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'h':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tpath.lineTo( point.x, point.y );\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 6 ) {\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ],\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 4 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 5 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 2 ];\n\t\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 3 ];\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j + 4 ];\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j + 5 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 's':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\t\tpath.bezierCurveTo(\n\t\t\t\t\t\t\t\t\tgetReflection( point.x, control.x ),\n\t\t\t\t\t\t\t\t\tgetReflection( point.y, control.y ),\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j + 2 ];\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j + 3 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 4 ) {\n\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ],\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 2 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 3 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tcontrol.y = point.y + numbers[ j + 1 ];\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j + 2 ];\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j + 3 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 2 ) {\n\n\t\t\t\t\t\t\t\tvar rx = getReflection( point.x, control.x );\n\t\t\t\t\t\t\t\tvar ry = getReflection( point.y, control.y );\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo(\n\t\t\t\t\t\t\t\t\trx,\n\t\t\t\t\t\t\t\t\try,\n\t\t\t\t\t\t\t\t\tpoint.x + numbers[ j + 0 ],\n\t\t\t\t\t\t\t\t\tpoint.y + numbers[ j + 1 ]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontrol.x = rx;\n\t\t\t\t\t\t\t\tcontrol.y = ry;\n\t\t\t\t\t\t\t\tpoint.x = point.x + numbers[ j + 0 ];\n\t\t\t\t\t\t\t\tpoint.y = point.y + numbers[ j + 1 ];\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'a':\n\t\t\t\t\t\t\tvar numbers = parseFloats( data );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = numbers.length; j < jl; j += 7 ) {\n\n\t\t\t\t\t\t\t\tvar start = point.clone();\n\t\t\t\t\t\t\t\tpoint.x += numbers[ j + 5 ];\n\t\t\t\t\t\t\t\tpoint.y += numbers[ j + 6 ];\n\t\t\t\t\t\t\t\tcontrol.x = point.x;\n\t\t\t\t\t\t\t\tcontrol.y = point.y;\n\t\t\t\t\t\t\t\tparseArcCommand(\n\t\t\t\t\t\t\t\t\tpath, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\tcase 'z':\n\t\t\t\t\t\t\tpath.currentPath.autoClose = true;\n\n\t\t\t\t\t\t\tif ( path.currentPath.curves.length > 0 ) {\n\n\t\t\t\t\t\t\t\t// Reset point to beginning of Path\n\t\t\t\t\t\t\t\tpoint.copy( firstPoint );\n\t\t\t\t\t\t\t\tpath.currentPath.currentPoint.copy( point );\n\t\t\t\t\t\t\t\tisFirstPoint = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( command );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\t\t\t\t\tdoSetFirstPoint = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n\t\t\t * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n\t\t\t * From\n\t\t\t * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n\t\t\t * To\n\t\t\t * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n\t\t\t */\n\n\t\t\tfunction parseArcCommand( path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end ) {\n\n\t\t\t\tx_axis_rotation = x_axis_rotation * Math.PI / 180;\n\n\t\t\t\t// Ensure radii are positive\n\t\t\t\trx = Math.abs( rx );\n\t\t\t\try = Math.abs( ry );\n\n\t\t\t\t// Compute (x1′, y1′)\n\t\t\t\tvar dx2 = ( start.x - end.x ) / 2.0;\n\t\t\t\tvar dy2 = ( start.y - end.y ) / 2.0;\n\t\t\t\tvar x1p = Math.cos( x_axis_rotation ) * dx2 + Math.sin( x_axis_rotation ) * dy2;\n\t\t\t\tvar y1p = - Math.sin( x_axis_rotation ) * dx2 + Math.cos( x_axis_rotation ) * dy2;\n\n\t\t\t\t// Compute (cx′, cy′)\n\t\t\t\tvar rxs = rx * rx;\n\t\t\t\tvar rys = ry * ry;\n\t\t\t\tvar x1ps = x1p * x1p;\n\t\t\t\tvar y1ps = y1p * y1p;\n\n\t\t\t\t// Ensure radii are large enough\n\t\t\t\tvar cr = x1ps / rxs + y1ps / rys;\n\n\t\t\t\tif ( cr > 1 ) {\n\n\t\t\t\t\t// scale up rx,ry equally so cr == 1\n\t\t\t\t\tvar s = Math.sqrt( cr );\n\t\t\t\t\trx = s * rx;\n\t\t\t\t\try = s * ry;\n\t\t\t\t\trxs = rx * rx;\n\t\t\t\t\trys = ry * ry;\n\n\t\t\t\t}\n\n\t\t\t\tvar dq = ( rxs * y1ps + rys * x1ps );\n\t\t\t\tvar pq = ( rxs * rys - dq ) / dq;\n\t\t\t\tvar q = Math.sqrt( Math.max( 0, pq ) );\n\t\t\t\tif ( large_arc_flag === sweep_flag ) q = - q;\n\t\t\t\tvar cxp = q * rx * y1p / ry;\n\t\t\t\tvar cyp = - q * ry * x1p / rx;\n\n\t\t\t\t// Step 3: Compute (cx, cy) from (cx′, cy′)\n\t\t\t\tvar cx = Math.cos( x_axis_rotation ) * cxp - Math.sin( x_axis_rotation ) * cyp + ( start.x + end.x ) / 2;\n\t\t\t\tvar cy = Math.sin( x_axis_rotation ) * cxp + Math.cos( x_axis_rotation ) * cyp + ( start.y + end.y ) / 2;\n\n\t\t\t\t// Step 4: Compute θ1 and Δθ\n\t\t\t\tvar theta = svgAngle( 1, 0, ( x1p - cxp ) / rx, ( y1p - cyp ) / ry );\n\t\t\t\tvar delta = svgAngle( ( x1p - cxp ) / rx, ( y1p - cyp ) / ry, ( - x1p - cxp ) / rx, ( - y1p - cyp ) / ry ) % ( Math.PI * 2 );\n\n\t\t\t\tpath.currentPath.absellipse( cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation );\n\n\t\t\t}\n\n\t\t\tfunction svgAngle( ux, uy, vx, vy ) {\n\n\t\t\t\tvar dot = ux * vx + uy * vy;\n\t\t\t\tvar len = Math.sqrt( ux * ux + uy * uy ) * Math.sqrt( vx * vx + vy * vy );\n\t\t\t\tvar ang = Math.acos( Math.max( - 1, Math.min( 1, dot / len ) ) ); // floating point precision, slightly over values appear\n\t\t\t\tif ( ( ux * vy - uy * vx ) < 0 ) ang = - ang;\n\t\t\t\treturn ang;\n\n\t\t\t}\n\n\t\t\t/*\n\t\t\t* According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n\t\t\t* rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n\t\t\t*/\n\t\t\tfunction parseRectNode( node ) {\n\n\t\t\t\tvar x = parseFloatWithUnits( node.getAttribute( 'x' ) || 0 );\n\t\t\t\tvar y = parseFloatWithUnits( node.getAttribute( 'y' ) || 0 );\n\t\t\t\tvar rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || 0 );\n\t\t\t\tvar ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || 0 );\n\t\t\t\tvar w = parseFloatWithUnits( node.getAttribute( 'width' ) );\n\t\t\t\tvar h = parseFloatWithUnits( node.getAttribute( 'height' ) );\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\t\t\t\tpath.moveTo( x + 2 * rx, y );\n\t\t\t\tpath.lineTo( x + w - 2 * rx, y );\n\t\t\t\tif ( rx !== 0 || ry !== 0 ) path.bezierCurveTo( x + w, y, x + w, y, x + w, y + 2 * ry );\n\t\t\t\tpath.lineTo( x + w, y + h - 2 * ry );\n\t\t\t\tif ( rx !== 0 || ry !== 0 ) path.bezierCurveTo( x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h );\n\t\t\t\tpath.lineTo( x + 2 * rx, y + h );\n\n\t\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\t\tpath.bezierCurveTo( x, y + h, x, y + h, x, y + h - 2 * ry );\n\n\t\t\t\t}\n\n\t\t\t\tpath.lineTo( x, y + 2 * ry );\n\n\t\t\t\tif ( rx !== 0 || ry !== 0 ) {\n\n\t\t\t\t\tpath.bezierCurveTo( x, y, x, y, x + 2 * rx, y );\n\n\t\t\t\t}\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\tfunction parsePolygonNode( node ) {\n\n\t\t\t\tfunction iterator( match, a, b ) {\n\n\t\t\t\t\tvar x = parseFloatWithUnits( a );\n\t\t\t\t\tvar y = parseFloatWithUnits( b );\n\n\t\t\t\t\tif ( index === 0 ) {\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\tvar regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\n\t\t\t\tvar index = 0;\n\n\t\t\t\tnode.getAttribute( 'points' ).replace( regex, iterator );\n\n\t\t\t\tpath.currentPath.autoClose = true;\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\tfunction parsePolylineNode( node ) {\n\n\t\t\t\tfunction iterator( match, a, b ) {\n\n\t\t\t\t\tvar x = parseFloatWithUnits( a );\n\t\t\t\t\tvar y = parseFloatWithUnits( b );\n\n\t\t\t\t\tif ( index === 0 ) {\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex ++;\n\n\t\t\t\t}\n\n\t\t\t\tvar regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\n\t\t\t\tvar index = 0;\n\n\t\t\t\tnode.getAttribute( 'points' ).replace( regex, iterator );\n\n\t\t\t\tpath.currentPath.autoClose = false;\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\tfunction parseCircleNode( node ) {\n\n\t\t\t\tvar x = parseFloatWithUnits( node.getAttribute( 'cx' ) );\n\t\t\t\tvar y = parseFloatWithUnits( node.getAttribute( 'cy' ) );\n\t\t\t\tvar r = parseFloatWithUnits( node.getAttribute( 'r' ) );\n\n\t\t\t\tvar subpath = new THREE.Path();\n\t\t\t\tsubpath.absarc( x, y, r, 0, Math.PI * 2 );\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\t\t\t\tpath.subPaths.push( subpath );\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\tfunction parseEllipseNode( node ) {\n\n\t\t\t\tvar x = parseFloatWithUnits( node.getAttribute( 'cx' ) );\n\t\t\t\tvar y = parseFloatWithUnits( node.getAttribute( 'cy' ) );\n\t\t\t\tvar rx = parseFloatWithUnits( node.getAttribute( 'rx' ) );\n\t\t\t\tvar ry = parseFloatWithUnits( node.getAttribute( 'ry' ) );\n\n\t\t\t\tvar subpath = new THREE.Path();\n\t\t\t\tsubpath.absellipse( x, y, rx, ry, 0, Math.PI * 2 );\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\t\t\t\tpath.subPaths.push( subpath );\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\tfunction parseLineNode( node ) {\n\n\t\t\t\tvar x1 = parseFloatWithUnits( node.getAttribute( 'x1' ) );\n\t\t\t\tvar y1 = parseFloatWithUnits( node.getAttribute( 'y1' ) );\n\t\t\t\tvar x2 = parseFloatWithUnits( node.getAttribute( 'x2' ) );\n\t\t\t\tvar y2 = parseFloatWithUnits( node.getAttribute( 'y2' ) );\n\n\t\t\t\tvar path = new THREE.ShapePath();\n\t\t\t\tpath.moveTo( x1, y1 );\n\t\t\t\tpath.lineTo( x2, y2 );\n\t\t\t\tpath.currentPath.autoClose = false;\n\n\t\t\t\treturn path;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction parseStyle( node, style ) {\n\n\t\t\t\tstyle = Object.assign( {}, style ); // clone style\n\n\t\t\t\tfunction addStyle( svgName, jsName, adjustFunction ) {\n\n\t\t\t\t\tif ( adjustFunction === undefined ) adjustFunction = function copy( v ) {\n\n\t\t\t\t\t\treturn v;\n\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( node.hasAttribute( svgName ) ) style[ jsName ] = adjustFunction( node.getAttribute( svgName ) );\n\t\t\t\t\tif ( node.style && node.style[ svgName ] !== '' ) style[ jsName ] = adjustFunction( node.style[ svgName ] );\n\n\t\t\t\t}\n\n\t\t\t\tfunction clamp( v ) {\n\n\t\t\t\t\treturn Math.max( 0, Math.min( 1, parseFloatWithUnits( v ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tfunction positive( v ) {\n\n\t\t\t\t\treturn Math.max( 0, parseFloatWithUnits( v ) );\n\n\t\t\t\t}\n\n\t\t\t\taddStyle( 'fill', 'fill' );\n\t\t\t\taddStyle( 'fill-opacity', 'fillOpacity', clamp );\n\t\t\t\taddStyle( 'stroke', 'stroke' );\n\t\t\t\taddStyle( 'stroke-opacity', 'strokeOpacity', clamp );\n\t\t\t\taddStyle( 'stroke-width', 'strokeWidth', positive );\n\t\t\t\taddStyle( 'stroke-linejoin', 'strokeLineJoin' );\n\t\t\t\taddStyle( 'stroke-linecap', 'strokeLineCap' );\n\t\t\t\taddStyle( 'stroke-miterlimit', 'strokeMiterLimit', positive );\n\n\t\t\t\treturn style;\n\n\t\t\t}\n\n\t\t\t// http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\t\t\tfunction getReflection( a, b ) {\n\n\t\t\t\treturn a - ( b - a );\n\n\t\t\t}\n\n\t\t\tfunction parseFloats( string ) {\n\n\t\t\t\tvar array = string.split( /[\\s,]+|(?=\\s?[+\\-])/ );\n\n\t\t\t\tfor ( var i = 0; i < array.length; i ++ ) {\n\n\t\t\t\t\tvar number = array[ i ];\n\n\t\t\t\t\t// Handle values like 48.6037.7.8\n\t\t\t\t\t// TODO Find a regex for this\n\n\t\t\t\t\tif ( number.indexOf( '.' ) !== number.lastIndexOf( '.' ) ) {\n\n\t\t\t\t\t\tvar split = number.split( '.' );\n\n\t\t\t\t\t\tfor ( var s = 2; s < split.length; s ++ ) {\n\n\t\t\t\t\t\t\tarray.splice( i + s - 1, 0, '0.' + split[ s ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray[ i ] = parseFloatWithUnits( number );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\n\t\t\t}\n\n\t\t\t// Units\n\n\t\t\tvar units = [ 'mm', 'cm', 'in', 'pt', 'pc', 'px' ];\n\n\t\t\t// Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\t\t\tvar unitConversion = {\n\n\t\t\t\t\"mm\": {\n\t\t\t\t\t\"mm\": 1,\n\t\t\t\t\t\"cm\": 0.1,\n\t\t\t\t\t\"in\": 1 / 25.4,\n\t\t\t\t\t\"pt\": 72 / 25.4,\n\t\t\t\t\t\"pc\": 6 / 25.4,\n\t\t\t\t\t\"px\": - 1\n\t\t\t\t},\n\t\t\t\t\"cm\": {\n\t\t\t\t\t\"mm\": 10,\n\t\t\t\t\t\"cm\": 1,\n\t\t\t\t\t\"in\": 1 / 2.54,\n\t\t\t\t\t\"pt\": 72 / 2.54,\n\t\t\t\t\t\"pc\": 6 / 2.54,\n\t\t\t\t\t\"px\": - 1\n\t\t\t\t},\n\t\t\t\t\"in\": {\n\t\t\t\t\t\"mm\": 25.4,\n\t\t\t\t\t\"cm\": 2.54,\n\t\t\t\t\t\"in\": 1,\n\t\t\t\t\t\"pt\": 72,\n\t\t\t\t\t\"pc\": 6,\n\t\t\t\t\t\"px\": - 1\n\t\t\t\t},\n\t\t\t\t\"pt\": {\n\t\t\t\t\t\"mm\": 25.4 / 72,\n\t\t\t\t\t\"cm\": 2.54 / 72,\n\t\t\t\t\t\"in\": 1 / 72,\n\t\t\t\t\t\"pt\": 1,\n\t\t\t\t\t\"pc\": 6 / 72,\n\t\t\t\t\t\"px\": - 1\n\t\t\t\t},\n\t\t\t\t\"pc\": {\n\t\t\t\t\t\"mm\": 25.4 / 6,\n\t\t\t\t\t\"cm\": 2.54 / 6,\n\t\t\t\t\t\"in\": 1 / 6,\n\t\t\t\t\t\"pt\": 72 / 6,\n\t\t\t\t\t\"pc\": 1,\n\t\t\t\t\t\"px\": - 1\n\t\t\t\t},\n\t\t\t\t\"px\": {\n\t\t\t\t\t\"px\": 1\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tfunction parseFloatWithUnits( string ) {\n\n\t\t\t\tvar theUnit = \"px\";\n\n\t\t\t\tif ( typeof string === 'string' || string instanceof String ) {\n\n\t\t\t\t\tfor ( var i = 0, n = units.length; i < n; i ++ ) {\n\n\t\t\t\t\t\tvar u = units[ i ];\n\n\t\t\t\t\t\tif ( string.endsWith( u ) ) {\n\n\t\t\t\t\t\t\ttheUnit = u;\n\t\t\t\t\t\t\tstring = string.substring( 0, string.length - u.length );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar scale = undefined;\n\n\t\t\t\tif ( theUnit === \"px\" && scope.defaultUnit !== \"px\" ) {\n\n\t\t\t\t\t// Conversion scale from  pixels to inches, then to default units\n\n\t\t\t\t\tscale = unitConversion[ \"in\" ][ scope.defaultUnit ] / scope.defaultDPI;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscale = unitConversion[ theUnit ][ scope.defaultUnit ];\n\n\t\t\t\t\tif ( scale < 0 ) {\n\n\t\t\t\t\t\t// Conversion scale to pixels\n\n\t\t\t\t\t\tscale = unitConversion[ theUnit ][ \"in\" ] * scope.defaultDPI;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn scale * parseFloat( string );\n\n\t\t\t}\n\n\t\t\t// Transforms\n\n\t\t\tfunction getNodeTransform( node ) {\n\n\t\t\t\tif ( ! node.hasAttribute( 'transform' ) ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar transform = parseNodeTransform( node );\n\n\t\t\t\tif ( transformStack.length > 0 ) {\n\n\t\t\t\t\ttransform.premultiply( transformStack[ transformStack.length - 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentTransform.copy( transform );\n\t\t\t\ttransformStack.push( transform );\n\n\t\t\t\treturn transform;\n\n\t\t\t}\n\n\t\t\tfunction parseNodeTransform( node ) {\n\n\t\t\t\tvar transform = new THREE.Matrix3();\n\t\t\t\tvar currentTransform = tempTransform0;\n\t\t\t\tvar transformsTexts = node.getAttribute( 'transform' ).split( ')' );\n\n\t\t\t\tfor ( var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex -- ) {\n\n\t\t\t\t\tvar transformText = transformsTexts[ tIndex ].trim();\n\n\t\t\t\t\tif ( transformText === '' ) continue;\n\n\t\t\t\t\tvar openParPos = transformText.indexOf( '(' );\n\t\t\t\t\tvar closeParPos = transformText.length;\n\n\t\t\t\t\tif ( openParPos > 0 && openParPos < closeParPos ) {\n\n\t\t\t\t\t\tvar transformType = transformText.substr( 0, openParPos );\n\n\t\t\t\t\t\tvar array = parseFloats( transformText.substr( openParPos + 1, closeParPos - openParPos - 1 ) );\n\n\t\t\t\t\t\tcurrentTransform.identity();\n\n\t\t\t\t\t\tswitch ( transformType ) {\n\n\t\t\t\t\t\t\tcase \"translate\":\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tvar tx = array[ 0 ];\n\t\t\t\t\t\t\t\t\tvar ty = tx;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t\tty = array[ 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.translate( tx, ty );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"rotate\":\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tvar angle = 0;\n\t\t\t\t\t\t\t\t\tvar cx = 0;\n\t\t\t\t\t\t\t\t\tvar cy = 0;\n\n\t\t\t\t\t\t\t\t\t// Angle\n\t\t\t\t\t\t\t\t\tangle = - array[ 0 ] * Math.PI / 180;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 3 ) {\n\n\t\t\t\t\t\t\t\t\t\t// Center x, y\n\t\t\t\t\t\t\t\t\t\tcx = array[ 1 ];\n\t\t\t\t\t\t\t\t\t\tcy = array[ 2 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Rotate around center (cx, cy)\n\t\t\t\t\t\t\t\t\ttempTransform1.identity().translate( - cx, - cy );\n\t\t\t\t\t\t\t\t\ttempTransform2.identity().rotate( angle );\n\t\t\t\t\t\t\t\t\ttempTransform3.multiplyMatrices( tempTransform2, tempTransform1 );\n\t\t\t\t\t\t\t\t\ttempTransform1.identity().translate( cx, cy );\n\t\t\t\t\t\t\t\t\tcurrentTransform.multiplyMatrices( tempTransform1, tempTransform3 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"scale\":\n\n\t\t\t\t\t\t\t\tif ( array.length >= 1 ) {\n\n\t\t\t\t\t\t\t\t\tvar scaleX = array[ 0 ];\n\t\t\t\t\t\t\t\t\tvar scaleY = scaleX;\n\n\t\t\t\t\t\t\t\t\tif ( array.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t\tscaleY = array[ 1 ];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.scale( scaleX, scaleY );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"skewX\":\n\n\t\t\t\t\t\t\t\tif ( array.length === 1 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\t1, Math.tan( array[ 0 ] * Math.PI / 180 ), 0,\n\t\t\t\t\t\t\t\t\t\t0, 1, 0,\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"skewY\":\n\n\t\t\t\t\t\t\t\tif ( array.length === 1 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\t1, 0, 0,\n\t\t\t\t\t\t\t\t\t\tMath.tan( array[ 0 ] * Math.PI / 180 ), 1, 0,\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"matrix\":\n\n\t\t\t\t\t\t\t\tif ( array.length === 6 ) {\n\n\t\t\t\t\t\t\t\t\tcurrentTransform.set(\n\t\t\t\t\t\t\t\t\t\tarray[ 0 ], array[ 2 ], array[ 4 ],\n\t\t\t\t\t\t\t\t\t\tarray[ 1 ], array[ 3 ], array[ 5 ],\n\t\t\t\t\t\t\t\t\t\t0, 0, 1\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttransform.premultiply( currentTransform );\n\n\t\t\t\t}\n\n\t\t\t\treturn transform;\n\n\t\t\t}\n\n\t\t\tfunction transformPath( path, m ) {\n\n\t\t\t\tfunction transfVec2( v2 ) {\n\n\t\t\t\t\ttempV3.set( v2.x, v2.y, 1 ).applyMatrix3( m );\n\n\t\t\t\t\tv2.set( tempV3.x, tempV3.y );\n\n\t\t\t\t}\n\n\t\t\t\tvar isRotated = isTransformRotated( m );\n\n\t\t\t\tvar subPaths = path.subPaths;\n\n\t\t\t\tfor ( var i = 0, n = subPaths.length; i < n; i ++ ) {\n\n\t\t\t\t\tvar subPath = subPaths[ i ];\n\t\t\t\t\tvar curves = subPath.curves;\n\n\t\t\t\t\tfor ( var j = 0; j < curves.length; j ++ ) {\n\n\t\t\t\t\t\tvar curve = curves[ j ];\n\n\t\t\t\t\t\tif ( curve.isLineCurve ) {\n\n\t\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\t\ttransfVec2( curve.v2 );\n\n\t\t\t\t\t\t} else if ( curve.isCubicBezierCurve ) {\n\n\t\t\t\t\t\t\ttransfVec2( curve.v0 );\n\t\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\t\ttransfVec2( curve.v2 );\n\t\t\t\t\t\t\ttransfVec2( curve.v3 );\n\n\t\t\t\t\t\t} else if ( curve.isQuadraticBezierCurve ) {\n\n\t\t\t\t\t\t\ttransfVec2( curve.v0 );\n\t\t\t\t\t\t\ttransfVec2( curve.v1 );\n\t\t\t\t\t\t\ttransfVec2( curve.v2 );\n\n\t\t\t\t\t\t} else if ( curve.isEllipseCurve ) {\n\n\t\t\t\t\t\t\tif ( isRotated ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( \"SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.\" );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttempV2.set( curve.aX, curve.aY );\n\t\t\t\t\t\t\ttransfVec2( tempV2 );\n\t\t\t\t\t\t\tcurve.aX = tempV2.x;\n\t\t\t\t\t\t\tcurve.aY = tempV2.y;\n\n\t\t\t\t\t\t\tcurve.xRadius *= getTransformScaleX( m );\n\t\t\t\t\t\t\tcurve.yRadius *= getTransformScaleY( m );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction isTransformRotated( m ) {\n\n\t\t\t\treturn m.elements[ 1 ] !== 0 || m.elements[ 3 ] !== 0;\n\n\t\t\t}\n\n\t\t\tfunction getTransformScaleX( m ) {\n\n\t\t\t\tvar te = m.elements;\n\t\t\t\treturn Math.sqrt( te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] );\n\n\t\t\t}\n\n\t\t\tfunction getTransformScaleY( m ) {\n\n\t\t\t\tvar te = m.elements;\n\t\t\t\treturn Math.sqrt( te[ 3 ] * te[ 3 ] + te[ 4 ] * te[ 4 ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar paths = [];\n\n\t\t\tvar transformStack = [];\n\n\t\t\tvar tempTransform0 = new THREE.Matrix3();\n\t\t\tvar tempTransform1 = new THREE.Matrix3();\n\t\t\tvar tempTransform2 = new THREE.Matrix3();\n\t\t\tvar tempTransform3 = new THREE.Matrix3();\n\t\t\tvar tempV2 = new THREE.Vector2();\n\t\t\tvar tempV3 = new THREE.Vector3();\n\n\t\t\tvar currentTransform = new THREE.Matrix3();\n\n\t\t\tvar xml = new DOMParser().parseFromString( text, 'image/svg+xml' ); // application/xml\n\n\t\t\tparseNode( xml.documentElement, {\n\t\t\t\tfill: '#000',\n\t\t\t\tfillOpacity: 1,\n\t\t\t\tstrokeOpacity: 1,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tstrokeLineJoin: 'miter',\n\t\t\t\tstrokeLineCap: 'butt',\n\t\t\t\tstrokeMiterLimit: 4\n\t\t\t} );\n\n\t\t\tvar data = { paths: paths, xml: xml.documentElement };\n\n\t\t\t// console.log( paths );\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tTHREE.SVGLoader.getStrokeStyle = function ( width, color, lineJoin, lineCap, miterLimit ) {\n\n\t\t// Param width: Stroke width\n\t\t// Param color: As returned by THREE.Color.getStyle()\n\t\t// Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n\t\t// Param lineCap: One of \"round\", \"square\" or \"butt\"\n\t\t// Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n\t\t// Returns style object\n\n\t\twidth = width !== undefined ? width : 1;\n\t\tcolor = color !== undefined ? color : '#000';\n\t\tlineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n\t\tlineCap = lineCap !== undefined ? lineCap : 'butt';\n\t\tmiterLimit = miterLimit !== undefined ? miterLimit : 4;\n\n\t\treturn {\n\t\t\tstrokeColor: color,\n\t\t\tstrokeWidth: width,\n\t\t\tstrokeLineJoin: lineJoin,\n\t\t\tstrokeLineCap: lineCap,\n\t\t\tstrokeMiterLimit: miterLimit\n\t\t};\n\n\t};\n\n\tTHREE.SVGLoader.pointsToStroke = function ( points, style, arcDivisions, minDistance ) {\n\n\t\t// Generates a stroke with some witdh around the given path.\n\t\t// The path can be open or closed (last point equals to first point)\n\t\t// Param points: Array of Vector2D (the path). Minimum 2 points.\n\t\t// Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n\t\t// Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n\t\t// Param minDistance: Points closer to this distance will be merged. (Optional)\n\t\t// Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tif ( THREE.SVGLoader.pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs ) === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\t\treturn geometry;\n\n\t};\n\n\tTHREE.SVGLoader.pointsToStrokeWithBuffers = function () {\n\n\t\tvar tempV2_1 = new THREE.Vector2();\n\t\tvar tempV2_2 = new THREE.Vector2();\n\t\tvar tempV2_3 = new THREE.Vector2();\n\t\tvar tempV2_4 = new THREE.Vector2();\n\t\tvar tempV2_5 = new THREE.Vector2();\n\t\tvar tempV2_6 = new THREE.Vector2();\n\t\tvar tempV2_7 = new THREE.Vector2();\n\t\tvar lastPointL = new THREE.Vector2();\n\t\tvar lastPointR = new THREE.Vector2();\n\t\tvar point0L = new THREE.Vector2();\n\t\tvar point0R = new THREE.Vector2();\n\t\tvar currentPointL = new THREE.Vector2();\n\t\tvar currentPointR = new THREE.Vector2();\n\t\tvar nextPointL = new THREE.Vector2();\n\t\tvar nextPointR = new THREE.Vector2();\n\t\tvar innerPoint = new THREE.Vector2();\n\t\tvar outerPoint = new THREE.Vector2();\n\n\t\treturn function ( points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset ) {\n\n\t\t\t// This function can be called to update existing arrays or buffers.\n\t\t\t// Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n\t\t\t// Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n\t\t\t// Returns number of written vertices / normals / uvs pairs\n\t\t\t// if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n\t\t\t// 'normals' and 'uvs' buffers are optional\n\n\t\t\tarcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n\t\t\tminDistance = minDistance !== undefined ? minDistance : 0.001;\n\t\t\tvertexOffset = vertexOffset !== undefined ? vertexOffset : 0;\n\n\t\t\t// First ensure there are no duplicated points\n\t\t\tpoints = removeDuplicatedPoints( points );\n\n\t\t\tvar numPoints = points.length;\n\n\t\t\tif ( numPoints < 2 ) return 0;\n\n\t\t\tvar isClosed = points[ 0 ].equals( points[ numPoints - 1 ] );\n\n\t\t\tvar currentPoint;\n\t\t\tvar previousPoint = points[ 0 ];\n\t\t\tvar nextPoint;\n\n\t\t\tvar strokeWidth2 = style.strokeWidth / 2;\n\n\t\t\tvar deltaU = 1 / ( numPoints - 1 );\n\t\t\tvar u0 = 0;\n\n\t\t\tvar innerSideModified;\n\t\t\tvar joinIsOnLeftSide;\n\t\t\tvar isMiter;\n\t\t\tvar initialJoinIsOnLeftSide = false;\n\n\t\t\tvar numVertices = 0;\n\t\t\tvar currentCoordinate = vertexOffset * 3;\n\t\t\tvar currentCoordinateUV = vertexOffset * 2;\n\n\t\t\t// Get initial left and right stroke points\n\t\t\tgetNormal( points[ 0 ], points[ 1 ], tempV2_1 ).multiplyScalar( strokeWidth2 );\n\t\t\tlastPointL.copy( points[ 0 ] ).sub( tempV2_1 );\n\t\t\tlastPointR.copy( points[ 0 ] ).add( tempV2_1 );\n\t\t\tpoint0L.copy( lastPointL );\n\t\t\tpoint0R.copy( lastPointR );\n\n\t\t\tfor ( var iPoint = 1; iPoint < numPoints; iPoint ++ ) {\n\n\t\t\t\tcurrentPoint = points[ iPoint ];\n\n\t\t\t\t// Get next point\n\t\t\t\tif ( iPoint === numPoints - 1 ) {\n\n\t\t\t\t\tif ( isClosed ) {\n\n\t\t\t\t\t\t// Skip duplicated initial point\n\t\t\t\t\t\tnextPoint = points[ 1 ];\n\n\t\t\t\t\t} else nextPoint = undefined;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnextPoint = points[ iPoint + 1 ];\n\n\t\t\t\t}\n\n\t\t\t\t// Normal of previous segment in tempV2_1\n\t\t\t\tvar normal1 = tempV2_1;\n\t\t\t\tgetNormal( previousPoint, currentPoint, normal1 );\n\n\t\t\t\ttempV2_3.copy( normal1 ).multiplyScalar( strokeWidth2 );\n\t\t\t\tcurrentPointL.copy( currentPoint ).sub( tempV2_3 );\n\t\t\t\tcurrentPointR.copy( currentPoint ).add( tempV2_3 );\n\n\t\t\t\tvar u1 = u0 + deltaU;\n\n\t\t\t\tinnerSideModified = false;\n\n\t\t\t\tif ( nextPoint !== undefined ) {\n\n\t\t\t\t\t// Normal of next segment in tempV2_2\n\t\t\t\t\tgetNormal( currentPoint, nextPoint, tempV2_2 );\n\n\t\t\t\t\ttempV2_3.copy( tempV2_2 ).multiplyScalar( strokeWidth2 );\n\t\t\t\t\tnextPointL.copy( currentPoint ).sub( tempV2_3 );\n\t\t\t\t\tnextPointR.copy( currentPoint ).add( tempV2_3 );\n\n\t\t\t\t\tjoinIsOnLeftSide = true;\n\t\t\t\t\ttempV2_3.subVectors( nextPoint, previousPoint );\n\t\t\t\t\tif ( normal1.dot( tempV2_3 ) < 0 ) {\n\n\t\t\t\t\t\tjoinIsOnLeftSide = false;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( iPoint === 1 ) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n\n\t\t\t\t\ttempV2_3.subVectors( nextPoint, currentPoint );\n\t\t\t\t\ttempV2_3.normalize();\n\t\t\t\t\tvar dot = Math.abs( normal1.dot( tempV2_3 ) );\n\n\t\t\t\t\t// If path is straight, don't create join\n\t\t\t\t\tif ( dot !== 0 ) {\n\n\t\t\t\t\t\t// Compute inner and outer segment intersections\n\t\t\t\t\t\tvar miterSide = strokeWidth2 / dot;\n\t\t\t\t\t\ttempV2_3.multiplyScalar( - miterSide );\n\t\t\t\t\t\ttempV2_4.subVectors( currentPoint, previousPoint );\n\t\t\t\t\t\ttempV2_5.copy( tempV2_4 ).setLength( miterSide ).add( tempV2_3 );\n\t\t\t\t\t\tinnerPoint.copy( tempV2_5 ).negate();\n\t\t\t\t\t\tvar miterLength2 = tempV2_5.length();\n\t\t\t\t\t\tvar segmentLengthPrev = tempV2_4.length();\n\t\t\t\t\t\ttempV2_4.divideScalar( segmentLengthPrev );\n\t\t\t\t\t\ttempV2_6.subVectors( nextPoint, currentPoint );\n\t\t\t\t\t\tvar segmentLengthNext = tempV2_6.length();\n\t\t\t\t\t\ttempV2_6.divideScalar( segmentLengthNext );\n\t\t\t\t\t\t// Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\t\t\t\t\t\tif ( tempV2_4.dot( innerPoint ) < segmentLengthPrev && tempV2_6.dot( innerPoint ) < segmentLengthNext ) {\n\n\t\t\t\t\t\t\tinnerSideModified = true;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\touterPoint.copy( tempV2_5 ).add( currentPoint );\n\t\t\t\t\t\tinnerPoint.add( currentPoint );\n\n\t\t\t\t\t\tisMiter = false;\n\n\t\t\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\tnextPointR.copy( innerPoint );\n\t\t\t\t\t\t\t\tcurrentPointR.copy( innerPoint );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tnextPointL.copy( innerPoint );\n\t\t\t\t\t\t\t\tcurrentPointL.copy( innerPoint );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// The segment triangles are generated here if there was overlapping\n\n\t\t\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch ( style.strokeLineJoin ) {\n\n\t\t\t\t\t\t\tcase 'bevel':\n\n\t\t\t\t\t\t\t\tmakeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'round':\n\n\t\t\t\t\t\t\t\t// Segment triangles\n\n\t\t\t\t\t\t\t\tcreateSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );\n\n\t\t\t\t\t\t\t\t// Join triangles\n\n\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\tmakeCircularSector( currentPoint, currentPointL, nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tmakeCircularSector( currentPoint, nextPointR, currentPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'miter':\n\t\t\t\t\t\t\tcase 'miter-clip':\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tvar miterFraction = ( strokeWidth2 * style.strokeMiterLimit ) / miterLength2;\n\n\t\t\t\t\t\t\t\tif ( miterFraction < 1 ) {\n\n\t\t\t\t\t\t\t\t\t// The join miter length exceeds the miter limit\n\n\t\t\t\t\t\t\t\t\tif ( style.strokeLineJoin !== 'miter-clip' ) {\n\n\t\t\t\t\t\t\t\t\t\tmakeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Segment triangles\n\n\t\t\t\t\t\t\t\t\t\tcreateSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );\n\n\t\t\t\t\t\t\t\t\t\t// Miter-clip join triangles\n\n\t\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempV2_6.subVectors( outerPoint, currentPointL ).multiplyScalar( miterFraction ).add( currentPointL );\n\t\t\t\t\t\t\t\t\t\t\ttempV2_7.subVectors( outerPoint, nextPointL ).multiplyScalar( miterFraction ).add( nextPointL );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\ttempV2_6.subVectors( outerPoint, currentPointR ).multiplyScalar( miterFraction ).add( currentPointR );\n\t\t\t\t\t\t\t\t\t\t\ttempV2_7.subVectors( outerPoint, nextPointR ).multiplyScalar( miterFraction ).add( nextPointR );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_6, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( tempV2_7, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( nextPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Miter join segment triangles\n\n\t\t\t\t\t\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t\t\t\t\t\t// Optimized segment + join triangles\n\n\t\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\t\tnextPointL.copy( outerPoint );\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\tnextPointR.copy( outerPoint );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Add extra miter join triangles\n\n\t\t\t\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 0 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( nextPointL, u1, 0 );\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( outerPoint, u1, 1 );\n\t\t\t\t\t\t\t\t\t\t\taddVertex( nextPointR, u1, 1 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tisMiter = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// The segment triangles are generated here when two consecutive points are collinear\n\n\t\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// The segment triangles are generated here if it is the ending segment\n\n\t\t\t\t\tmakeSegmentTriangles();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isClosed && iPoint === numPoints - 1 ) {\n\n\t\t\t\t\t// Start line endcap\n\t\t\t\t\taddCapGeometry( points[ 0 ], point0L, point0R, joinIsOnLeftSide, true, u0 );\n\n\t\t\t\t}\n\n\t\t\t\t// Increment loop variables\n\n\t\t\t\tu0 = u1;\n\n\t\t\t\tpreviousPoint = currentPoint;\n\n\t\t\t\tlastPointL.copy( nextPointL );\n\t\t\t\tlastPointR.copy( nextPointR );\n\n\t\t\t}\n\n\t\t\tif ( ! isClosed ) {\n\n\t\t\t\t// Ending line endcap\n\t\t\t\taddCapGeometry( currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1 );\n\n\t\t\t} else if ( innerSideModified && vertices ) {\n\n\t\t\t\t// Modify path first segment vertices to adjust to the segments inner and outer intersections\n\n\t\t\t\tvar lastOuter = outerPoint;\n\t\t\t\tvar lastInner = innerPoint;\n\n\t\t\t\tif ( initialJoinIsOnLeftSide !== joinIsOnLeftSide ) {\n\n\t\t\t\t\tlastOuter = innerPoint;\n\t\t\t\t\tlastInner = outerPoint;\n\n\t\t\t\t}\n\n\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\tif ( isMiter || initialJoinIsOnLeftSide ) {\n\n\t\t\t\t\t\tlastInner.toArray( vertices, 0 * 3 );\n\t\t\t\t\t\tlastInner.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\t\tif ( isMiter ) {\n\n\t\t\t\t\t\t\tlastOuter.toArray( vertices, 1 * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isMiter || ! initialJoinIsOnLeftSide ) {\n\n\t\t\t\t\t\tlastInner.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\tlastInner.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\t\tif ( isMiter ) {\n\n\t\t\t\t\t\t\tlastOuter.toArray( vertices, 0 * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn numVertices;\n\n\t\t\t// -- End of algorithm\n\n\t\t\t// -- Functions\n\n\t\t\tfunction getNormal( p1, p2, result ) {\n\n\t\t\t\tresult.subVectors( p2, p1 );\n\t\t\t\treturn result.set( - result.y, result.x ).normalize();\n\n\t\t\t}\n\n\t\t\tfunction addVertex( position, u, v ) {\n\n\t\t\t\tif ( vertices ) {\n\n\t\t\t\t\tvertices[ currentCoordinate ] = position.x;\n\t\t\t\t\tvertices[ currentCoordinate + 1 ] = position.y;\n\t\t\t\t\tvertices[ currentCoordinate + 2 ] = 0;\n\n\t\t\t\t\tif ( normals ) {\n\n\t\t\t\t\t\tnormals[ currentCoordinate ] = 0;\n\t\t\t\t\t\tnormals[ currentCoordinate + 1 ] = 0;\n\t\t\t\t\t\tnormals[ currentCoordinate + 2 ] = 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCoordinate += 3;\n\n\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\tuvs[ currentCoordinateUV ] = u;\n\t\t\t\t\t\tuvs[ currentCoordinateUV + 1 ] = v;\n\n\t\t\t\t\t\tcurrentCoordinateUV += 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnumVertices += 3;\n\n\t\t\t}\n\n\t\t\tfunction makeCircularSector( center, p1, p2, u, v ) {\n\n\t\t\t\t// param p1, p2: Points in the circle arc.\n\t\t\t\t// p1 and p2 are in clockwise direction.\n\n\t\t\t\ttempV2_1.copy( p1 ).sub( center ).normalize();\n\t\t\t\ttempV2_2.copy( p2 ).sub( center ).normalize();\n\n\t\t\t\tvar angle = Math.PI;\n\t\t\t\tvar dot = tempV2_1.dot( tempV2_2 );\n\t\t\t\tif ( Math.abs( dot ) < 1 ) angle = Math.abs( Math.acos( dot ) );\n\n\t\t\t\tangle /= arcDivisions;\n\n\t\t\t\ttempV2_3.copy( p1 );\n\n\t\t\t\tfor ( var i = 0, il = arcDivisions - 1; i < il; i ++ ) {\n\n\t\t\t\t\ttempV2_4.copy( tempV2_3 ).rotateAround( center, angle );\n\n\t\t\t\t\taddVertex( tempV2_3, u, v );\n\t\t\t\t\taddVertex( tempV2_4, u, v );\n\t\t\t\t\taddVertex( center, u, 0.5 );\n\n\t\t\t\t\ttempV2_3.copy( tempV2_4 );\n\n\t\t\t\t}\n\n\t\t\t\taddVertex( tempV2_4, u, v );\n\t\t\t\taddVertex( p2, u, v );\n\t\t\t\taddVertex( center, u, 0.5 );\n\n\t\t\t}\n\n\t\t\tfunction makeSegmentTriangles() {\n\n\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\taddVertex( currentPointL, u1, 1 );\n\t\t\t\taddVertex( currentPointR, u1, 0 );\n\n\t\t\t}\n\n\t\t\tfunction makeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u ) {\n\n\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\t// Optimized segment + bevel triangles\n\n\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t// Path segments triangles\n\n\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t\t// Bevel join triangle\n\n\t\t\t\t\t\taddVertex( currentPointL, u, 0 );\n\t\t\t\t\t\taddVertex( nextPointL, u, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u, 0.5 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Path segments triangles\n\n\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\t\t// Bevel join triangle\n\n\t\t\t\t\t\taddVertex( currentPointR, u, 1 );\n\t\t\t\t\t\taddVertex( nextPointR, u, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u, 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bevel join triangle. The segment triangles are done in the main loop\n\n\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\taddVertex( currentPointL, u, 0 );\n\t\t\t\t\t\taddVertex( nextPointL, u, 0 );\n\t\t\t\t\t\taddVertex( currentPoint, u, 0.5 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddVertex( currentPointR, u, 1 );\n\t\t\t\t\t\taddVertex( nextPointR, u, 0 );\n\t\t\t\t\t\taddVertex( currentPoint, u, 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction createSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified ) {\n\n\t\t\t\tif ( innerSideModified ) {\n\n\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\n\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( currentPointL, u1, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t\taddVertex( currentPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\taddVertex( nextPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 1 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddVertex( lastPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\t\taddVertex( lastPointL, u0, 0 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\taddVertex( currentPointR, u1, 1 );\n\n\t\t\t\t\t\taddVertex( currentPointR, u0, 1 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\n\t\t\t\t\t\taddVertex( currentPoint, u1, 0.5 );\n\t\t\t\t\t\taddVertex( innerPoint, u1, 0 );\n\t\t\t\t\t\taddVertex( nextPointR, u0, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addCapGeometry( center, p1, p2, joinIsOnLeftSide, start, u ) {\n\n\t\t\t\t// param center: End point of the path\n\t\t\t\t// param p1, p2: Left and right cap points\n\n\t\t\t\tswitch ( style.strokeLineCap ) {\n\n\t\t\t\t\tcase 'round':\n\n\t\t\t\t\t\tif ( start ) {\n\n\t\t\t\t\t\t\tmakeCircularSector( center, p2, p1, u, 0.5 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmakeCircularSector( center, p1, p2, u, 0.5 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'square':\n\n\t\t\t\t\t\tif ( start ) {\n\n\t\t\t\t\t\t\ttempV2_1.subVectors( p1, center );\n\t\t\t\t\t\t\ttempV2_2.set( tempV2_1.y, - tempV2_1.x );\n\n\t\t\t\t\t\t\ttempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );\n\t\t\t\t\t\t\ttempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );\n\n\t\t\t\t\t\t\t// Modify already existing vertices\n\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 0 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 3 * 3 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 1 * 3 );\n\t\t\t\t\t\t\t\ttempV2_3.toArray( vertices, 3 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, 0 * 3 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttempV2_1.subVectors( p2, center );\n\t\t\t\t\t\t\ttempV2_2.set( tempV2_1.y, - tempV2_1.x );\n\n\t\t\t\t\t\t\ttempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );\n\t\t\t\t\t\t\ttempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );\n\n\t\t\t\t\t\t\tvar vl = vertices.length;\n\n\t\t\t\t\t\t\t// Modify already existing vertices\n\t\t\t\t\t\t\tif ( joinIsOnLeftSide ) {\n\n\t\t\t\t\t\t\t\ttempV2_3.toArray( vertices, vl - 1 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 2 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 4 * 3 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\ttempV2_3.toArray( vertices, vl - 2 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 1 * 3 );\n\t\t\t\t\t\t\t\ttempV2_4.toArray( vertices, vl - 4 * 3 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'butt':\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t// Nothing to do here\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction removeDuplicatedPoints( points ) {\n\n\t\t\t\t// Creates a new array if necessary with duplicated points removed.\n\t\t\t\t// This does not remove duplicated initial and ending points of a closed path.\n\n\t\t\t\tvar dupPoints = false;\n\t\t\t\tfor ( var i = 1, n = points.length - 1; i < n; i ++ ) {\n\n\t\t\t\t\tif ( points[ i ].distanceTo( points[ i + 1 ] ) < minDistance ) {\n\n\t\t\t\t\t\tdupPoints = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! dupPoints ) return points;\n\n\t\t\t\tvar newPoints = [];\n\t\t\t\tnewPoints.push( points[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, n = points.length - 1; i < n; i ++ ) {\n\n\t\t\t\t\tif ( points[ i ].distanceTo( points[ i + 1 ] ) >= minDistance ) {\n\n\t\t\t\t\t\tnewPoints.push( points[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnewPoints.push( points[ points.length - 1 ] );\n\n\t\t\t\treturn newPoints;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\t\n\treturn THREE.SVGLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/TDSLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * Autodesk 3DS three.js file loader, based on lib3ds.\n\t *\n\t * Loads geometry with uv and materials basic properties with texture support.\n\t *\n\t * @author @tentone\n\t * @author @timknip\n\t * @class TDSLoader\n\t * @constructor\n\t */\n\n\tTHREE.TDSLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.debug = false;\n\n\t\tthis.group = null;\n\t\tthis.position = 0;\n\n\t\tthis.materials = [];\n\t\tthis.meshes = [];\n\n\t};\n\n\tTHREE.TDSLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.TDSLoader,\n\n\t\t/**\n\t\t * Load 3ds file from url.\n\t\t *\n\t\t * @method load\n\t\t * @param {[type]} url URL for the file.\n\t\t * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n\t\t * @param {Function} onProgress onProgress callback.\n\t\t * @param {Function} onError onError callback.\n\t\t */\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( scope.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\tonLoad( scope.parse( data, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\t/**\n\t\t * Parse arraybuffer data and load 3ds file.\n\t\t *\n\t\t * @method parse\n\t\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n\t\t * @param {String} path Path for external resources.\n\t\t * @return {Group} Group loaded from 3ds file.\n\t\t */\n\t\tparse: function ( arraybuffer, path ) {\n\n\t\t\tthis.group = new THREE.Group();\n\t\t\tthis.position = 0;\n\t\t\tthis.materials = [];\n\t\t\tthis.meshes = [];\n\n\t\t\tthis.readFile( arraybuffer, path );\n\n\t\t\tfor ( var i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\t\tthis.group.add( this.meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this.group;\n\n\t\t},\n\n\t\t/**\n\t\t * Decode file content to read 3ds data.\n\t\t *\n\t\t * @method readFile\n\t\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n\t\t * @param {String} path Path for external resources.\n\t\t */\n\t\treadFile: function ( arraybuffer, path ) {\n\n\t\t\tvar data = new DataView( arraybuffer );\n\t\t\tvar chunk = this.readChunk( data );\n\n\t\t\tif ( chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC ) {\n\n\t\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\t\tif ( next === M3D_VERSION ) {\n\n\t\t\t\t\t\tvar version = this.readDWord( data );\n\t\t\t\t\t\tthis.debugMessage( '3DS file version: ' + version );\n\n\t\t\t\t\t} else if ( next === MDATA ) {\n\n\t\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\t\tthis.readMeshData( data, path );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.debugMessage( 'Unknown main chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.debugMessage( 'Parsed ' + this.meshes.length + ' meshes' );\n\n\t\t},\n\n\t\t/**\n\t\t * Read mesh data chunk.\n\t\t *\n\t\t * @method readMeshData\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {String} path Path for external resources.\n\t\t */\n\t\treadMeshData: function ( data, path ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === MESH_VERSION ) {\n\n\t\t\t\t\tvar version = + this.readDWord( data );\n\t\t\t\t\tthis.debugMessage( 'Mesh Version: ' + version );\n\n\t\t\t\t} else if ( next === MASTER_SCALE ) {\n\n\t\t\t\t\tvar scale = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( 'Master scale: ' + scale );\n\t\t\t\t\tthis.group.scale.set( scale, scale, scale );\n\n\t\t\t\t} else if ( next === NAMED_OBJECT ) {\n\n\t\t\t\t\tthis.debugMessage( 'Named Object' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readNamedObject( data );\n\n\t\t\t\t} else if ( next === MAT_ENTRY ) {\n\n\t\t\t\t\tthis.debugMessage( 'Material' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readMaterialEntry( data, path );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( 'Unknown MDATA chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Read named object chunk.\n\t\t *\n\t\t * @method readNamedObject\n\t\t * @param {Dataview} data Dataview in use.\n\t\t */\n\t\treadNamedObject: function ( data ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar name = this.readString( data, 64 );\n\t\t\tchunk.cur = this.position;\n\n\t\t\tvar next = this.nextChunk( data, chunk );\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === N_TRI_OBJECT ) {\n\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tvar mesh = this.readMesh( data );\n\t\t\t\t\tmesh.name = name;\n\t\t\t\t\tthis.meshes.push( mesh );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( 'Unknown named object chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t},\n\n\t\t/**\n\t\t * Read material data chunk and add it to the material list.\n\t\t *\n\t\t * @method readMaterialEntry\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {String} path Path for external resources.\n\t\t */\n\t\treadMaterialEntry: function ( data, path ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\t\t\tvar material = new THREE.MeshPhongMaterial();\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === MAT_NAME ) {\n\n\t\t\t\t\tmaterial.name = this.readString( data, 64 );\n\t\t\t\t\tthis.debugMessage( '   Name: ' + material.name );\n\n\t\t\t\t} else if ( next === MAT_WIRE ) {\n\n\t\t\t\t\tthis.debugMessage( '   Wireframe' );\n\t\t\t\t\tmaterial.wireframe = true;\n\n\t\t\t\t} else if ( next === MAT_WIRE_SIZE ) {\n\n\t\t\t\t\tvar value = this.readByte( data );\n\t\t\t\t\tmaterial.wireframeLinewidth = value;\n\t\t\t\t\tthis.debugMessage( '   Wireframe Thickness: ' + value );\n\n\t\t\t\t} else if ( next === MAT_TWO_SIDE ) {\n\n\t\t\t\t\tmaterial.side = THREE.DoubleSide;\n\t\t\t\t\tthis.debugMessage( '   DoubleSided' );\n\n\t\t\t\t} else if ( next === MAT_ADDITIVE ) {\n\n\t\t\t\t\tthis.debugMessage( '   Additive Blending' );\n\t\t\t\t\tmaterial.blending = THREE.AdditiveBlending;\n\n\t\t\t\t} else if ( next === MAT_DIFFUSE ) {\n\n\t\t\t\t\tthis.debugMessage( '   Diffuse Color' );\n\t\t\t\t\tmaterial.color = this.readColor( data );\n\n\t\t\t\t} else if ( next === MAT_SPECULAR ) {\n\n\t\t\t\t\tthis.debugMessage( '   Specular Color' );\n\t\t\t\t\tmaterial.specular = this.readColor( data );\n\n\t\t\t\t} else if ( next === MAT_AMBIENT ) {\n\n\t\t\t\t\tthis.debugMessage( '   Ambient color' );\n\t\t\t\t\tmaterial.color = this.readColor( data );\n\n\t\t\t\t} else if ( next === MAT_SHININESS ) {\n\n\t\t\t\t\tvar shininess = this.readWord( data );\n\t\t\t\t\tmaterial.shininess = shininess;\n\t\t\t\t\tthis.debugMessage( '   Shininess : ' + shininess );\n\n\t\t\t\t} else if ( next === MAT_TRANSPARENCY ) {\n\n\t\t\t\t\tvar opacity = this.readWord( data );\n\t\t\t\t\tmaterial.opacity = opacity * 0.01;\n\t\t\t\t\tthis.debugMessage( '  Opacity : ' + opacity );\n\t\t\t\t\tmaterial.transparent = opacity < 100 ? true : false;\n\n\t\t\t\t} else if ( next === MAT_TEXMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   ColorMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.map = this.readMap( data, path );\n\n\t\t\t\t} else if ( next === MAT_BUMPMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   BumpMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.bumpMap = this.readMap( data, path );\n\n\t\t\t\t} else if ( next === MAT_OPACMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   OpacityMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.alphaMap = this.readMap( data, path );\n\n\t\t\t\t} else if ( next === MAT_SPECMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   SpecularMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.specularMap = this.readMap( data, path );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '   Unknown material chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t\tthis.materials[ material.name ] = material;\n\n\t\t},\n\n\t\t/**\n\t\t * Read mesh data chunk.\n\t\t *\n\t\t * @method readMesh\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @return {Mesh} The parsed mesh.\n\t\t */\n\t\treadMesh: function ( data ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tvar uvs = [];\n\n\t\t\tvar material = new THREE.MeshPhongMaterial();\n\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\t\t\tmesh.name = 'mesh';\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === POINT_ARRAY ) {\n\n\t\t\t\t\tvar points = this.readWord( data );\n\n\t\t\t\t\tthis.debugMessage( '   Vertex: ' + points );\n\n\t\t\t\t\t//BufferGeometry\n\n\t\t\t\t\tvar vertices = [];\n\n\t\t\t\t\tfor ( var i = 0; i < points; i ++ )\t\t{\n\n\t\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\t\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\t\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\n\t\t\t\t} else if ( next === FACE_ARRAY ) {\n\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readFaceArray( data, mesh );\n\n\t\t\t\t} else if ( next === TEX_VERTS ) {\n\n\t\t\t\t\tvar texels = this.readWord( data );\n\n\t\t\t\t\tthis.debugMessage( '   UV: ' + texels );\n\n\t\t\t\t\t//BufferGeometry\n\n\t\t\t\t\tvar uvs = [];\n\n\t\t\t\t\tfor ( var i = 0; i < texels; i ++ )\t\t{\n\n\t\t\t\t\t\tuvs.push( this.readFloat( data ) );\n\t\t\t\t\t\tuvs.push( this.readFloat( data ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t\t\t} else if ( next === MESH_MATRIX ) {\n\n\t\t\t\t\tthis.debugMessage( '   Tranformation Matrix (TODO)' );\n\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tfor ( var i = 0; i < 12; i ++ ) {\n\n\t\t\t\t\t\tvalues[ i ] = this.readFloat( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar matrix = new THREE.Matrix4();\n\n\t\t\t\t\t//X Line\n\t\t\t\t\tmatrix.elements[ 0 ] = values[ 0 ];\n\t\t\t\t\tmatrix.elements[ 1 ] = values[ 6 ];\n\t\t\t\t\tmatrix.elements[ 2 ] = values[ 3 ];\n\t\t\t\t\tmatrix.elements[ 3 ] = values[ 9 ];\n\n\t\t\t\t\t//Y Line\n\t\t\t\t\tmatrix.elements[ 4 ] = values[ 2 ];\n\t\t\t\t\tmatrix.elements[ 5 ] = values[ 8 ];\n\t\t\t\t\tmatrix.elements[ 6 ] = values[ 5 ];\n\t\t\t\t\tmatrix.elements[ 7 ] = values[ 11 ];\n\n\t\t\t\t\t//Z Line\n\t\t\t\t\tmatrix.elements[ 8 ] = values[ 1 ];\n\t\t\t\t\tmatrix.elements[ 9 ] = values[ 7 ];\n\t\t\t\t\tmatrix.elements[ 10 ] = values[ 4 ];\n\t\t\t\t\tmatrix.elements[ 11 ] = values[ 10 ];\n\n\t\t\t\t\t//W Line\n\t\t\t\t\tmatrix.elements[ 12 ] = 0;\n\t\t\t\t\tmatrix.elements[ 13 ] = 0;\n\t\t\t\t\tmatrix.elements[ 14 ] = 0;\n\t\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\t\tmatrix.transpose();\n\n\t\t\t\t\tvar inverse = new THREE.Matrix4();\n\t\t\t\t\tinverse.getInverse( matrix );\n\t\t\t\t\tgeometry.applyMatrix4( inverse );\n\n\t\t\t\t\tmatrix.decompose( mesh.position, mesh.quaternion, mesh.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '   Unknown mesh chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t\tgeometry.computeVertexNormals();\n\n\t\t\treturn mesh;\n\n\t\t},\n\n\t\t/**\n\t\t * Read face array data chunk.\n\t\t *\n\t\t * @method readFaceArray\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {Mesh} mesh Mesh to be filled with the data read.\n\t\t */\n\t\treadFaceArray: function ( data, mesh ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar faces = this.readWord( data );\n\n\t\t\tthis.debugMessage( '   Faces: ' + faces );\n\n\t\t\tvar index = [];\n\n\t\t\tfor ( var i = 0; i < faces; ++ i ) {\n\n\t\t\t\tindex.push( this.readWord( data ), this.readWord( data ), this.readWord( data ) );\n\n\t\t\t\tthis.readWord( data ); // visibility\n\n\t\t\t}\n\n\t\t\tmesh.geometry.setIndex( index );\n\n\t\t\t//The rest of the FACE_ARRAY chunk is subchunks\n\n\t\t\twhile ( this.position < chunk.end ) {\n\n\t\t\t\tvar chunk = this.readChunk( data );\n\n\t\t\t\tif ( chunk.id === MSH_MAT_GROUP ) {\n\n\t\t\t\t\tthis.debugMessage( '      Material Group' );\n\n\t\t\t\t\tthis.resetPosition( data );\n\n\t\t\t\t\tvar group = this.readMaterialGroup( data );\n\n\t\t\t\t\tvar material = this.materials[ group.name ];\n\n\t\t\t\t\tif ( material !== undefined )\t{\n\n\t\t\t\t\t\tmesh.material = material;\n\n\t\t\t\t\t\tif ( material.name === '' )\t\t{\n\n\t\t\t\t\t\t\tmaterial.name = mesh.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '      Unknown face array chunk: ' + chunk.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.endChunk( chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t},\n\n\t\t/**\n\t\t * Read texture map data chunk.\n\t\t *\n\t\t * @method readMap\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {String} path Path for external resources.\n\t\t * @return {Texture} Texture read from this data chunk.\n\t\t */\n\t\treadMap: function ( data, path ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\t\t\tvar texture = {};\n\n\t\t\tvar loader = new THREE.TextureLoader( this.manager );\n\t\t\tloader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === MAT_MAPNAME ) {\n\n\t\t\t\t\tvar name = this.readString( data, 128 );\n\t\t\t\t\ttexture = loader.load( name );\n\n\t\t\t\t\tthis.debugMessage( '      File: ' + path + name );\n\n\t\t\t\t} else if ( next === MAT_MAP_UOFFSET ) {\n\n\t\t\t\t\ttexture.offset.x = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      OffsetX: ' + texture.offset.x );\n\n\t\t\t\t} else if ( next === MAT_MAP_VOFFSET ) {\n\n\t\t\t\t\ttexture.offset.y = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      OffsetY: ' + texture.offset.y );\n\n\t\t\t\t} else if ( next === MAT_MAP_USCALE ) {\n\n\t\t\t\t\ttexture.repeat.x = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      RepeatX: ' + texture.repeat.x );\n\n\t\t\t\t} else if ( next === MAT_MAP_VSCALE ) {\n\n\t\t\t\t\ttexture.repeat.y = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      RepeatY: ' + texture.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '      Unknown map chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t/**\n\t\t * Read material group data chunk.\n\t\t *\n\t\t * @method readMaterialGroup\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @return {Object} Object with name and index of the object.\n\t\t */\n\t\treadMaterialGroup: function ( data ) {\n\n\t\t\tthis.readChunk( data );\n\t\t\tvar name = this.readString( data, 64 );\n\t\t\tvar numFaces = this.readWord( data );\n\n\t\t\tthis.debugMessage( '         Name: ' + name );\n\t\t\tthis.debugMessage( '         Faces: ' + numFaces );\n\n\t\t\tvar index = [];\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tindex.push( this.readWord( data ) );\n\n\t\t\t}\n\n\t\t\treturn { name: name, index: index };\n\n\t\t},\n\n\t\t/**\n\t\t * Read a color value.\n\t\t *\n\t\t * @method readColor\n\t\t * @param {DataView} data Dataview.\n\t\t * @return {Color} Color value read..\n\t\t */\n\t\treadColor: function ( data ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar color = new THREE.Color();\n\n\t\t\tif ( chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24 ) {\n\n\t\t\t\tvar r = this.readByte( data );\n\t\t\t\tvar g = this.readByte( data );\n\t\t\t\tvar b = this.readByte( data );\n\n\t\t\t\tcolor.setRGB( r / 255, g / 255, b / 255 );\n\n\t\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\n\n\t\t\t}\telse if ( chunk.id === COLOR_F || chunk.id === LIN_COLOR_F ) {\n\n\t\t\t\tvar r = this.readFloat( data );\n\t\t\t\tvar g = this.readFloat( data );\n\t\t\t\tvar b = this.readFloat( data );\n\n\t\t\t\tcolor.setRGB( r, g, b );\n\n\t\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\n\n\t\t\t}\telse {\n\n\t\t\t\tthis.debugMessage( '      Unknown color chunk: ' + chunk.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\t\t\treturn color;\n\n\t\t},\n\n\t\t/**\n\t\t * Read next chunk of data.\n\t\t *\n\t\t * @method readChunk\n\t\t * @param {DataView} data Dataview.\n\t\t * @return {Object} Chunk of data read.\n\t\t */\n\t\treadChunk: function ( data ) {\n\n\t\t\tvar chunk = {};\n\n\t\t\tchunk.cur = this.position;\n\t\t\tchunk.id = this.readWord( data );\n\t\t\tchunk.size = this.readDWord( data );\n\t\t\tchunk.end = chunk.cur + chunk.size;\n\t\t\tchunk.cur += 6;\n\n\t\t\treturn chunk;\n\n\t\t},\n\n\t\t/**\n\t\t * Set position to the end of the current chunk of data.\n\t\t *\n\t\t * @method endChunk\n\t\t * @param {Object} chunk Data chunk.\n\t\t */\n\t\tendChunk: function ( chunk ) {\n\n\t\t\tthis.position = chunk.end;\n\n\t\t},\n\n\t\t/**\n\t\t * Move to the next data chunk.\n\t\t *\n\t\t * @method nextChunk\n\t\t * @param {DataView} data Dataview.\n\t\t * @param {Object} chunk Data chunk.\n\t\t */\n\t\tnextChunk: function ( data, chunk ) {\n\n\t\t\tif ( chunk.cur >= chunk.end ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tthis.position = chunk.cur;\n\n\t\t\ttry {\n\n\t\t\t\tvar next = this.readChunk( data );\n\t\t\t\tchunk.cur += next.size;\n\t\t\t\treturn next.id;\n\n\t\t\t}\tcatch ( e ) {\n\n\t\t\t\tthis.debugMessage( 'Unable to read chunk at ' + this.position );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Reset dataview position.\n\t\t *\n\t\t * @method resetPosition\n\t\t */\n\t\tresetPosition: function () {\n\n\t\t\tthis.position -= 6;\n\n\t\t},\n\n\t\t/**\n\t\t * Read byte value.\n\t\t *\n\t\t * @method readByte\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadByte: function ( data ) {\n\n\t\t\tvar v = data.getUint8( this.position, true );\n\t\t\tthis.position += 1;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 32 bit float value.\n\t\t *\n\t\t * @method readFloat\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadFloat: function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tvar v = data.getFloat32( this.position, true );\n\t\t\t\tthis.position += 4;\n\t\t\t\treturn v;\n\n\t\t\t}\tcatch ( e ) {\n\n\t\t\t\tthis.debugMessage( e + ' ' + this.position + ' ' + data.byteLength );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Read 32 bit signed integer value.\n\t\t *\n\t\t * @method readInt\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadInt: function ( data ) {\n\n\t\t\tvar v = data.getInt32( this.position, true );\n\t\t\tthis.position += 4;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 16 bit signed integer value.\n\t\t *\n\t\t * @method readShort\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadShort: function ( data ) {\n\n\t\t\tvar v = data.getInt16( this.position, true );\n\t\t\tthis.position += 2;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 64 bit unsigned integer value.\n\t\t *\n\t\t * @method readDWord\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadDWord: function ( data ) {\n\n\t\t\tvar v = data.getUint32( this.position, true );\n\t\t\tthis.position += 4;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 32 bit unsigned integer value.\n\t\t *\n\t\t * @method readWord\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadWord: function ( data ) {\n\n\t\t\tvar v = data.getUint16( this.position, true );\n\t\t\tthis.position += 2;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read string value.\n\t\t *\n\t\t * @method readString\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @param {Number} maxLength Max size of the string to be read.\n\t\t * @return {String} Data read from the dataview.\n\t\t */\n\t\treadString: function ( data, maxLength ) {\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0; i < maxLength; i ++ ) {\n\n\t\t\t\tvar c = this.readByte( data );\n\t\t\t\tif ( ! c ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\ts += String.fromCharCode( c );\n\n\t\t\t}\n\n\t\t\treturn s;\n\n\t\t},\n\n\t\t/**\n\t\t * Print debug message to the console.\n\t\t *\n\t\t * Is controlled by a flag to show or hide debug messages.\n\t\t *\n\t\t * @method debugMessage\n\t\t * @param {Object} message Debug message to print to the console.\n\t\t */\n\t\tdebugMessage: function ( message ) {\n\n\t\t\tif ( this.debug ) {\n\n\t\t\t\tconsole.log( message );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// var NULL_CHUNK = 0x0000;\n\tvar M3DMAGIC = 0x4D4D;\n\t// var SMAGIC = 0x2D2D;\n\t// var LMAGIC = 0x2D3D;\n\tvar MLIBMAGIC = 0x3DAA;\n\t// var MATMAGIC = 0x3DFF;\n\tvar CMAGIC = 0xC23D;\n\tvar M3D_VERSION = 0x0002;\n\t// var M3D_KFVERSION = 0x0005;\n\tvar COLOR_F = 0x0010;\n\tvar COLOR_24 = 0x0011;\n\tvar LIN_COLOR_24 = 0x0012;\n\tvar LIN_COLOR_F = 0x0013;\n\t// var INT_PERCENTAGE = 0x0030;\n\t// var FLOAT_PERCENTAGE = 0x0031;\n\tvar MDATA = 0x3D3D;\n\tvar MESH_VERSION = 0x3D3E;\n\tvar MASTER_SCALE = 0x0100;\n\t// var LO_SHADOW_BIAS = 0x1400;\n\t// var HI_SHADOW_BIAS = 0x1410;\n\t// var SHADOW_MAP_SIZE = 0x1420;\n\t// var SHADOW_SAMPLES = 0x1430;\n\t// var SHADOW_RANGE = 0x1440;\n\t// var SHADOW_FILTER = 0x1450;\n\t// var RAY_BIAS = 0x1460;\n\t// var O_CONSTS = 0x1500;\n\t// var AMBIENT_LIGHT = 0x2100;\n\t// var BIT_MAP = 0x1100;\n\t// var SOLID_BGND = 0x1200;\n\t// var V_GRADIENT = 0x1300;\n\t// var USE_BIT_MAP = 0x1101;\n\t// var USE_SOLID_BGND = 0x1201;\n\t// var USE_V_GRADIENT = 0x1301;\n\t// var FOG = 0x2200;\n\t// var FOG_BGND = 0x2210;\n\t// var LAYER_FOG = 0x2302;\n\t// var DISTANCE_CUE = 0x2300;\n\t// var DCUE_BGND = 0x2310;\n\t// var USE_FOG = 0x2201;\n\t// var USE_LAYER_FOG = 0x2303;\n\t// var USE_DISTANCE_CUE = 0x2301;\n\tvar MAT_ENTRY = 0xAFFF;\n\tvar MAT_NAME = 0xA000;\n\tvar MAT_AMBIENT = 0xA010;\n\tvar MAT_DIFFUSE = 0xA020;\n\tvar MAT_SPECULAR = 0xA030;\n\tvar MAT_SHININESS = 0xA040;\n\t// var MAT_SHIN2PCT = 0xA041;\n\tvar MAT_TRANSPARENCY = 0xA050;\n\t// var MAT_XPFALL = 0xA052;\n\t// var MAT_USE_XPFALL = 0xA240;\n\t// var MAT_REFBLUR = 0xA053;\n\t// var MAT_SHADING = 0xA100;\n\t// var MAT_USE_REFBLUR = 0xA250;\n\t// var MAT_SELF_ILLUM = 0xA084;\n\tvar MAT_TWO_SIDE = 0xA081;\n\t// var MAT_DECAL = 0xA082;\n\tvar MAT_ADDITIVE = 0xA083;\n\tvar MAT_WIRE = 0xA085;\n\t// var MAT_FACEMAP = 0xA088;\n\t// var MAT_TRANSFALLOFF_IN = 0xA08A;\n\t// var MAT_PHONGSOFT = 0xA08C;\n\t// var MAT_WIREABS = 0xA08E;\n\tvar MAT_WIRE_SIZE = 0xA087;\n\tvar MAT_TEXMAP = 0xA200;\n\t// var MAT_SXP_TEXT_DATA = 0xA320;\n\t// var MAT_TEXMASK = 0xA33E;\n\t// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n\t// var MAT_TEX2MAP = 0xA33A;\n\t// var MAT_SXP_TEXT2_DATA = 0xA321;\n\t// var MAT_TEX2MASK = 0xA340;\n\t// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\tvar MAT_OPACMAP = 0xA210;\n\t// var MAT_SXP_OPAC_DATA = 0xA322;\n\t// var MAT_OPACMASK = 0xA342;\n\t// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\tvar MAT_BUMPMAP = 0xA230;\n\t// var MAT_SXP_BUMP_DATA = 0xA324;\n\t// var MAT_BUMPMASK = 0xA344;\n\t// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\tvar MAT_SPECMAP = 0xA204;\n\t// var MAT_SXP_SPEC_DATA = 0xA325;\n\t// var MAT_SPECMASK = 0xA348;\n\t// var MAT_SXP_SPECMASK_DATA = 0xA332;\n\t// var MAT_SHINMAP = 0xA33C;\n\t// var MAT_SXP_SHIN_DATA = 0xA326;\n\t// var MAT_SHINMASK = 0xA346;\n\t// var MAT_SXP_SHINMASK_DATA = 0xA334;\n\t// var MAT_SELFIMAP = 0xA33D;\n\t// var MAT_SXP_SELFI_DATA = 0xA328;\n\t// var MAT_SELFIMASK = 0xA34A;\n\t// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n\t// var MAT_REFLMAP = 0xA220;\n\t// var MAT_REFLMASK = 0xA34C;\n\t// var MAT_SXP_REFLMASK_DATA = 0xA338;\n\t// var MAT_ACUBIC = 0xA310;\n\tvar MAT_MAPNAME = 0xA300;\n\t// var MAT_MAP_TILING = 0xA351;\n\t// var MAT_MAP_TEXBLUR = 0xA353;\n\tvar MAT_MAP_USCALE = 0xA354;\n\tvar MAT_MAP_VSCALE = 0xA356;\n\tvar MAT_MAP_UOFFSET = 0xA358;\n\tvar MAT_MAP_VOFFSET = 0xA35A;\n\t// var MAT_MAP_ANG = 0xA35C;\n\t// var MAT_MAP_COL1 = 0xA360;\n\t// var MAT_MAP_COL2 = 0xA362;\n\t// var MAT_MAP_RCOL = 0xA364;\n\t// var MAT_MAP_GCOL = 0xA366;\n\t// var MAT_MAP_BCOL = 0xA368;\n\tvar NAMED_OBJECT = 0x4000;\n\t// var N_DIRECT_LIGHT = 0x4600;\n\t// var DL_OFF = 0x4620;\n\t// var DL_OUTER_RANGE = 0x465A;\n\t// var DL_INNER_RANGE = 0x4659;\n\t// var DL_MULTIPLIER = 0x465B;\n\t// var DL_EXCLUDE = 0x4654;\n\t// var DL_ATTENUATE = 0x4625;\n\t// var DL_SPOTLIGHT = 0x4610;\n\t// var DL_SPOT_ROLL = 0x4656;\n\t// var DL_SHADOWED = 0x4630;\n\t// var DL_LOCAL_SHADOW2 = 0x4641;\n\t// var DL_SEE_CONE = 0x4650;\n\t// var DL_SPOT_RECTANGULAR = 0x4651;\n\t// var DL_SPOT_ASPECT = 0x4657;\n\t// var DL_SPOT_PROJECTOR = 0x4653;\n\t// var DL_SPOT_OVERSHOOT = 0x4652;\n\t// var DL_RAY_BIAS = 0x4658;\n\t// var DL_RAYSHAD = 0x4627;\n\t// var N_CAMERA = 0x4700;\n\t// var CAM_SEE_CONE = 0x4710;\n\t// var CAM_RANGES = 0x4720;\n\t// var OBJ_HIDDEN = 0x4010;\n\t// var OBJ_VIS_LOFTER = 0x4011;\n\t// var OBJ_DOESNT_CAST = 0x4012;\n\t// var OBJ_DONT_RECVSHADOW = 0x4017;\n\t// var OBJ_MATTE = 0x4013;\n\t// var OBJ_FAST = 0x4014;\n\t// var OBJ_PROCEDURAL = 0x4015;\n\t// var OBJ_FROZEN = 0x4016;\n\tvar N_TRI_OBJECT = 0x4100;\n\tvar POINT_ARRAY = 0x4110;\n\t// var POINT_FLAG_ARRAY = 0x4111;\n\tvar FACE_ARRAY = 0x4120;\n\tvar MSH_MAT_GROUP = 0x4130;\n\t// var SMOOTH_GROUP = 0x4150;\n\t// var MSH_BOXMAP = 0x4190;\n\tvar TEX_VERTS = 0x4140;\n\tvar MESH_MATRIX = 0x4160;\n\t// var MESH_COLOR = 0x4165;\n\t// var MESH_TEXTURE_INFO = 0x4170;\n\t// var KFDATA = 0xB000;\n\t// var KFHDR = 0xB00A;\n\t// var KFSEG = 0xB008;\n\t// var KFCURTIME = 0xB009;\n\t// var AMBIENT_NODE_TAG = 0xB001;\n\t// var OBJECT_NODE_TAG = 0xB002;\n\t// var CAMERA_NODE_TAG = 0xB003;\n\t// var TARGET_NODE_TAG = 0xB004;\n\t// var LIGHT_NODE_TAG = 0xB005;\n\t// var L_TARGET_NODE_TAG = 0xB006;\n\t// var SPOTLIGHT_NODE_TAG = 0xB007;\n\t// var NODE_ID = 0xB030;\n\t// var NODE_HDR = 0xB010;\n\t// var PIVOT = 0xB013;\n\t// var INSTANCE_NAME = 0xB011;\n\t// var MORPH_SMOOTH = 0xB015;\n\t// var BOUNDBOX = 0xB014;\n\t// var POS_TRACK_TAG = 0xB020;\n\t// var COL_TRACK_TAG = 0xB025;\n\t// var ROT_TRACK_TAG = 0xB021;\n\t// var SCL_TRACK_TAG = 0xB022;\n\t// var MORPH_TRACK_TAG = 0xB026;\n\t// var FOV_TRACK_TAG = 0xB023;\n\t// var ROLL_TRACK_TAG = 0xB024;\n\t// var HOT_TRACK_TAG = 0xB027;\n\t// var FALL_TRACK_TAG = 0xB028;\n\t// var HIDE_TRACK_TAG = 0xB029;\n\t// var POLY_2D = 0x5000;\n\t// var SHAPE_OK = 0x5010;\n\t// var SHAPE_NOT_OK = 0x5011;\n\t// var SHAPE_HOOK = 0x5020;\n\t// var PATH_3D = 0x6000;\n\t// var PATH_MATRIX = 0x6005;\n\t// var SHAPE_2D = 0x6010;\n\t// var M_SCALE = 0x6020;\n\t// var M_TWIST = 0x6030;\n\t// var M_TEETER = 0x6040;\n\t// var M_FIT = 0x6050;\n\t// var M_BEVEL = 0x6060;\n\t// var XZ_CURVE = 0x6070;\n\t// var YZ_CURVE = 0x6080;\n\t// var INTERPCT = 0x6090;\n\t// var DEFORM_LIMIT = 0x60A0;\n\t// var USE_CONTOUR = 0x6100;\n\t// var USE_TWEEN = 0x6110;\n\t// var USE_SCALE = 0x6120;\n\t// var USE_TWIST = 0x6130;\n\t// var USE_TEETER = 0x6140;\n\t// var USE_FIT = 0x6150;\n\t// var USE_BEVEL = 0x6160;\n\t// var DEFAULT_VIEW = 0x3000;\n\t// var VIEW_TOP = 0x3010;\n\t// var VIEW_BOTTOM = 0x3020;\n\t// var VIEW_LEFT = 0x3030;\n\t// var VIEW_RIGHT = 0x3040;\n\t// var VIEW_FRONT = 0x3050;\n\t// var VIEW_BACK = 0x3060;\n\t// var VIEW_USER = 0x3070;\n\t// var VIEW_CAMERA = 0x3080;\n\t// var VIEW_WINDOW = 0x3090;\n\t// var VIEWPORT_LAYOUT_OLD = 0x7000;\n\t// var VIEWPORT_DATA_OLD = 0x7010;\n\t// var VIEWPORT_LAYOUT = 0x7001;\n\t// var VIEWPORT_DATA = 0x7011;\n\t// var VIEWPORT_DATA_3 = 0x7012;\n\t// var VIEWPORT_SIZE = 0x7020;\n\t// var NETWORK_VIEW = 0x7030;\n\t\n\treturn THREE.TDSLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/VTKLoader',[\n\t\"skylark-threejs\"\n],function(THREE,Zlib){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Alex Pletzer\n\t *\n\t * Updated on 22.03.2017\n\t * VTK header is now parsed and used to extract all the compressed data\n\t * @author Andrii Iudin https://github.com/andreyyudin\n\t * @author Paul Kibet Korir https://github.com/polarise\n\t * @author Sriram Somasundharam https://github.com/raamssundar\n\t */\n\n\tTHREE.VTKLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.VTKLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.VTKLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tfunction parseASCII( data ) {\n\n\t\t\t\t// connectivity of the triangles\n\t\t\t\tvar indices = [];\n\n\t\t\t\t// triangles vertices\n\t\t\t\tvar positions = [];\n\n\t\t\t\t// red, green, blue colors in the range 0 to 1\n\t\t\t\tvar colors = [];\n\n\t\t\t\t// normal vector, one per vertex\n\t\t\t\tvar normals = [];\n\n\t\t\t\tvar result;\n\n\t\t\t\t// pattern for detecting the end of a number sequence\n\t\t\t\tvar patWord = /^[^\\d.\\s-]+/;\n\n\t\t\t\t// pattern for reading vertices, 3 floats or integers\n\t\t\t\tvar pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n\n\t\t\t\t// pattern for connectivity, an integer followed by any number of ints\n\t\t\t\t// the first integer is the number of polygon nodes\n\t\t\t\tvar patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n\n\t\t\t\t// indicates start of vertex data section\n\t\t\t\tvar patPOINTS = /^POINTS /;\n\n\t\t\t\t// indicates start of polygon connectivity section\n\t\t\t\tvar patPOLYGONS = /^POLYGONS /;\n\n\t\t\t\t// indicates start of triangle strips section\n\t\t\t\tvar patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n\n\t\t\t\t// POINT_DATA number_of_values\n\t\t\t\tvar patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n\n\t\t\t\t// CELL_DATA number_of_polys\n\t\t\t\tvar patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n\n\t\t\t\t// Start of color section\n\t\t\t\tvar patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n\n\t\t\t\t// NORMALS Normals float\n\t\t\t\tvar patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n\n\t\t\t\tvar inPointsSection = false;\n\t\t\t\tvar inPolygonsSection = false;\n\t\t\t\tvar inTriangleStripSection = false;\n\t\t\t\tvar inPointDataSection = false;\n\t\t\t\tvar inCellDataSection = false;\n\t\t\t\tvar inColorSection = false;\n\t\t\t\tvar inNormalsSection = false;\n\n\t\t\t\tvar lines = data.split( '\\n' );\n\n\t\t\t\tfor ( var i in lines ) {\n\n\t\t\t\t\tvar line = lines[ i ].trim();\n\n\t\t\t\t\tif ( line.indexOf( 'DATASET' ) === 0 ) {\n\n\t\t\t\t\t\tvar dataset = line.split( ' ' )[ 1 ];\n\n\t\t\t\t\t\tif ( dataset !== 'POLYDATA' ) throw new Error( 'Unsupported DATASET type: ' + dataset );\n\n\t\t\t\t\t} else if ( inPointsSection ) {\n\n\t\t\t\t\t\t// get the vertices\n\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\n\n\t\t\t\t\t\t\tvar x = parseFloat( result[ 1 ] );\n\t\t\t\t\t\t\tvar y = parseFloat( result[ 2 ] );\n\t\t\t\t\t\t\tvar z = parseFloat( result[ 3 ] );\n\t\t\t\t\t\t\tpositions.push( x, y, z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( inPolygonsSection ) {\n\n\t\t\t\t\t\tif ( ( result = patConnectivity.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\t// numVertices i0 i1 i2 ...\n\t\t\t\t\t\t\tvar numVertices = parseInt( result[ 1 ] );\n\t\t\t\t\t\t\tvar inds = result[ 2 ].split( /\\s+/ );\n\n\t\t\t\t\t\t\tif ( numVertices >= 3 ) {\n\n\t\t\t\t\t\t\t\tvar i0 = parseInt( inds[ 0 ] );\n\t\t\t\t\t\t\t\tvar i1, i2;\n\t\t\t\t\t\t\t\tvar k = 1;\n\t\t\t\t\t\t\t\t// split the polygon in numVertices - 2 triangles\n\t\t\t\t\t\t\t\tfor ( var j = 0; j < numVertices - 2; ++ j ) {\n\n\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ k ] );\n\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ k + 1 ] );\n\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\n\t\t\t\t\t\t\t\t\tk ++;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( inTriangleStripSection ) {\n\n\t\t\t\t\t\tif ( ( result = patConnectivity.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\t// numVertices i0 i1 i2 ...\n\t\t\t\t\t\t\tvar numVertices = parseInt( result[ 1 ] );\n\t\t\t\t\t\t\tvar inds = result[ 2 ].split( /\\s+/ );\n\n\t\t\t\t\t\t\tif ( numVertices >= 3 ) {\n\n\t\t\t\t\t\t\t\tvar i0, i1, i2;\n\t\t\t\t\t\t\t\t// split the polygon in numVertices - 2 triangles\n\t\t\t\t\t\t\t\tfor ( var j = 0; j < numVertices - 2; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tif ( j % 2 === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\ti0 = parseInt( inds[ j ] );\n\t\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ j + 2 ] );\n\t\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ j + 1 ] );\n\t\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\ti0 = parseInt( inds[ j ] );\n\t\t\t\t\t\t\t\t\t\ti1 = parseInt( inds[ j + 1 ] );\n\t\t\t\t\t\t\t\t\t\ti2 = parseInt( inds[ j + 2 ] );\n\t\t\t\t\t\t\t\t\t\tindices.push( i0, i1, i2 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( inPointDataSection || inCellDataSection ) {\n\n\t\t\t\t\t\tif ( inColorSection ) {\n\n\t\t\t\t\t\t\t// Get the colors\n\n\t\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\n\n\t\t\t\t\t\t\t\tvar r = parseFloat( result[ 1 ] );\n\t\t\t\t\t\t\t\tvar g = parseFloat( result[ 2 ] );\n\t\t\t\t\t\t\t\tvar b = parseFloat( result[ 3 ] );\n\t\t\t\t\t\t\t\tcolors.push( r, g, b );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( inNormalsSection ) {\n\n\t\t\t\t\t\t\t// Get the normal vectors\n\n\t\t\t\t\t\t\twhile ( ( result = pat3Floats.exec( line ) ) !== null ) {\n\n\t\t\t\t\t\t\t\tif ( patWord.exec( line ) !== null ) break;\n\n\t\t\t\t\t\t\t\tvar nx = parseFloat( result[ 1 ] );\n\t\t\t\t\t\t\t\tvar ny = parseFloat( result[ 2 ] );\n\t\t\t\t\t\t\t\tvar nz = parseFloat( result[ 3 ] );\n\t\t\t\t\t\t\t\tnormals.push( nx, ny, nz );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( patPOLYGONS.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinPolygonsSection = true;\n\t\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t\t} else if ( patPOINTS.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\t\tinPointsSection = true;\n\t\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t\t} else if ( patTRIANGLE_STRIPS.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\t\tinTriangleStripSection = true;\n\n\t\t\t\t\t} else if ( patPOINT_DATA.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinPointDataSection = true;\n\t\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t\t} else if ( patCELL_DATA.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinCellDataSection = true;\n\t\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t\t} else if ( patCOLOR_SCALARS.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinColorSection = true;\n\t\t\t\t\t\tinNormalsSection = false;\n\t\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t\t} else if ( patNORMALS.exec( line ) !== null ) {\n\n\t\t\t\t\t\tinNormalsSection = true;\n\t\t\t\t\t\tinColorSection = false;\n\t\t\t\t\t\tinPointsSection = false;\n\t\t\t\t\t\tinPolygonsSection = false;\n\t\t\t\t\t\tinTriangleStripSection = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\n\t\t\t\tif ( normals.length === positions.length ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors.length !== indices.length ) {\n\n\t\t\t\t\t// stagger\n\n\t\t\t\t\tif ( colors.length === positions.length ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// cell\n\n\t\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\t\tvar numTriangles = geometry.attributes.position.count / 3;\n\n\t\t\t\t\tif ( colors.length === ( numTriangles * 3 ) ) {\n\n\t\t\t\t\t\tvar newColors = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < numTriangles; i ++ ) {\n\n\t\t\t\t\t\t\tvar r = colors[ 3 * i + 0 ];\n\t\t\t\t\t\t\tvar g = colors[ 3 * i + 1 ];\n\t\t\t\t\t\t\tvar b = colors[ 3 * i + 2 ];\n\n\t\t\t\t\t\t\tnewColors.push( r, g, b );\n\t\t\t\t\t\t\tnewColors.push( r, g, b );\n\t\t\t\t\t\t\tnewColors.push( r, g, b );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( newColors, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction parseBinary( data ) {\n\n\t\t\t\tvar count, pointIndex, i, numberOfPoints, s;\n\t\t\t\tvar buffer = new Uint8Array( data );\n\t\t\t\tvar dataView = new DataView( data );\n\n\t\t\t\t// Points and normals, by default, are empty\n\t\t\t\tvar points = [];\n\t\t\t\tvar normals = [];\n\t\t\t\tvar indices = [];\n\n\t\t\t\t// Going to make a big array of strings\n\t\t\t\tvar vtk = [];\n\t\t\t\tvar index = 0;\n\n\t\t\t\tfunction findString( buffer, start ) {\n\n\t\t\t\t\tvar index = start;\n\t\t\t\t\tvar c = buffer[ index ];\n\t\t\t\t\tvar s = [];\n\t\t\t\t\twhile ( c !== 10 ) {\n\n\t\t\t\t\t\ts.push( String.fromCharCode( c ) );\n\t\t\t\t\t\tindex ++;\n\t\t\t\t\t\tc = buffer[ index ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { start: start,\n\t\t\t\t\t\tend: index,\n\t\t\t\t\t\tnext: index + 1,\n\t\t\t\t\t\tparsedString: s.join( '' ) };\n\n\t\t\t\t}\n\n\t\t\t\tvar state, line;\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t// Get a string\n\t\t\t\t\tstate = findString( buffer, index );\n\t\t\t\t\tline = state.parsedString;\n\n\t\t\t\t\tif ( line.indexOf( 'DATASET' ) === 0 ) {\n\n\t\t\t\t\t\tvar dataset = line.split( ' ' )[ 1 ];\n\n\t\t\t\t\t\tif ( dataset !== 'POLYDATA' ) throw new Error( 'Unsupported DATASET type: ' + dataset );\n\n\t\t\t\t\t} else if ( line.indexOf( 'POINTS' ) === 0 ) {\n\n\t\t\t\t\t\tvtk.push( line );\n\t\t\t\t\t\t// Add the points\n\t\t\t\t\t\tnumberOfPoints = parseInt( line.split( ' ' )[ 1 ], 10 );\n\n\t\t\t\t\t\t// Each point is 3 4-byte floats\n\t\t\t\t\t\tcount = numberOfPoints * 4 * 3;\n\n\t\t\t\t\t\tpoints = new Float32Array( numberOfPoints * 3 );\n\n\t\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\t\tfor ( i = 0; i < numberOfPoints; i ++ ) {\n\n\t\t\t\t\t\t\tpoints[ 3 * i ] = dataView.getFloat32( pointIndex, false );\n\t\t\t\t\t\t\tpoints[ 3 * i + 1 ] = dataView.getFloat32( pointIndex + 4, false );\n\t\t\t\t\t\t\tpoints[ 3 * i + 2 ] = dataView.getFloat32( pointIndex + 8, false );\n\t\t\t\t\t\t\tpointIndex = pointIndex + 12;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// increment our next pointer\n\t\t\t\t\t\tstate.next = state.next + count + 1;\n\n\t\t\t\t\t} else if ( line.indexOf( 'TRIANGLE_STRIPS' ) === 0 ) {\n\n\t\t\t\t\t\tvar numberOfStrips = parseInt( line.split( ' ' )[ 1 ], 10 );\n\t\t\t\t\t\tvar size = parseInt( line.split( ' ' )[ 2 ], 10 );\n\t\t\t\t\t\t// 4 byte integers\n\t\t\t\t\t\tcount = size * 4;\n\n\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\n\t\t\t\t\t\tvar indicesIndex = 0;\n\n\t\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\t\tfor ( i = 0; i < numberOfStrips; i ++ ) {\n\n\t\t\t\t\t\t\t// For each strip, read the first value, then record that many more points\n\t\t\t\t\t\t\tvar indexCount = dataView.getInt32( pointIndex, false );\n\t\t\t\t\t\t\tvar strip = [];\n\t\t\t\t\t\t\tpointIndex += 4;\n\t\t\t\t\t\t\tfor ( s = 0; s < indexCount; s ++ ) {\n\n\t\t\t\t\t\t\t\tstrip.push( dataView.getInt32( pointIndex, false ) );\n\t\t\t\t\t\t\t\tpointIndex += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// retrieves the n-2 triangles from the triangle strip\n\t\t\t\t\t\t\tfor ( var j = 0; j < indexCount - 2; j ++ ) {\n\n\t\t\t\t\t\t\t\tif ( j % 2 ) {\n\n\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\n\t\t\t\t\t\t\t\t} else {\n\n\n\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// increment our next pointer\n\t\t\t\t\t\tstate.next = state.next + count + 1;\n\n\t\t\t\t\t} else if ( line.indexOf( 'POLYGONS' ) === 0 ) {\n\n\t\t\t\t\t\tvar numberOfStrips = parseInt( line.split( ' ' )[ 1 ], 10 );\n\t\t\t\t\t\tvar size = parseInt( line.split( ' ' )[ 2 ], 10 );\n\t\t\t\t\t\t// 4 byte integers\n\t\t\t\t\t\tcount = size * 4;\n\n\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\n\t\t\t\t\t\tvar indicesIndex = 0;\n\n\t\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\t\tfor ( i = 0; i < numberOfStrips; i ++ ) {\n\n\t\t\t\t\t\t\t// For each strip, read the first value, then record that many more points\n\t\t\t\t\t\t\tvar indexCount = dataView.getInt32( pointIndex, false );\n\t\t\t\t\t\t\tvar strip = [];\n\t\t\t\t\t\t\tpointIndex += 4;\n\t\t\t\t\t\t\tfor ( s = 0; s < indexCount; s ++ ) {\n\n\t\t\t\t\t\t\t\tstrip.push( dataView.getInt32( pointIndex, false ) );\n\t\t\t\t\t\t\t\tpointIndex += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// divide the polygon in n-2 triangle\n\t\t\t\t\t\t\tfor ( var j = 1; j < indexCount - 1; j ++ ) {\n\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ 0 ];\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// increment our next pointer\n\t\t\t\t\t\tstate.next = state.next + count + 1;\n\n\t\t\t\t\t} else if ( line.indexOf( 'POINT_DATA' ) === 0 ) {\n\n\t\t\t\t\t\tnumberOfPoints = parseInt( line.split( ' ' )[ 1 ], 10 );\n\n\t\t\t\t\t\t// Grab the next line\n\t\t\t\t\t\tstate = findString( buffer, state.next );\n\n\t\t\t\t\t\t// Now grab the binary data\n\t\t\t\t\t\tcount = numberOfPoints * 4 * 3;\n\n\t\t\t\t\t\tnormals = new Float32Array( numberOfPoints * 3 );\n\t\t\t\t\t\tpointIndex = state.next;\n\t\t\t\t\t\tfor ( i = 0; i < numberOfPoints; i ++ ) {\n\n\t\t\t\t\t\t\tnormals[ 3 * i ] = dataView.getFloat32( pointIndex, false );\n\t\t\t\t\t\t\tnormals[ 3 * i + 1 ] = dataView.getFloat32( pointIndex + 4, false );\n\t\t\t\t\t\t\tnormals[ 3 * i + 2 ] = dataView.getFloat32( pointIndex + 8, false );\n\t\t\t\t\t\t\tpointIndex += 12;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Increment past our data\n\t\t\t\t\t\tstate.next = state.next + count;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Increment index\n\t\t\t\t\tindex = state.next;\n\n\t\t\t\t\tif ( index >= buffer.byteLength ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( points, 3 ) );\n\n\t\t\t\tif ( normals.length === points.length ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction Float32Concat( first, second ) {\n\n\t\t\t    var firstLength = first.length, result = new Float32Array( firstLength + second.length );\n\n\t\t\t    result.set( first );\n\t\t\t    result.set( second, firstLength );\n\n\t\t\t    return result;\n\n\t\t\t}\n\n\t\t\tfunction Int32Concat( first, second ) {\n\n\t\t\t    var firstLength = first.length, result = new Int32Array( firstLength + second.length );\n\n\t\t\t    result.set( first );\n\t\t\t    result.set( second, firstLength );\n\n\t\t\t    return result;\n\n\t\t\t}\n\n\t\t\tfunction parseXML( stringFile ) {\n\n\t\t\t\t// Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\n\n\t\t\t\tfunction xmlToJson( xml ) {\n\n\t\t\t\t\t// Create the return object\n\t\t\t\t\tvar obj = {};\n\n\t\t\t\t\tif ( xml.nodeType === 1 ) { // element\n\n\t\t\t\t\t\t// do attributes\n\n\t\t\t\t\t\tif ( xml.attributes ) {\n\n\t\t\t\t\t\t\tif ( xml.attributes.length > 0 ) {\n\n\t\t\t\t\t\t\t\tobj[ 'attributes' ] = {};\n\n\t\t\t\t\t\t\t\tfor ( var j = 0; j < xml.attributes.length; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar attribute = xml.attributes.item( j );\n\t\t\t\t\t\t\t\t\tobj[ 'attributes' ][ attribute.nodeName ] = attribute.nodeValue.trim();\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( xml.nodeType === 3 ) { // text\n\n\t\t\t\t\t\tobj = xml.nodeValue.trim();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// do children\n\t\t\t\t\tif ( xml.hasChildNodes() ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\t\t\t\tvar item = xml.childNodes.item( i );\n\t\t\t\t\t\t\tvar nodeName = item.nodeName;\n\n\t\t\t\t\t\t\tif ( typeof obj[ nodeName ] === 'undefined' ) {\n\n\t\t\t\t\t\t\t\tvar tmp = xmlToJson( item );\n\n\t\t\t\t\t\t\t\tif ( tmp !== '' ) obj[ nodeName ] = tmp;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tif ( typeof obj[ nodeName ].push === 'undefined' ) {\n\n\t\t\t\t\t\t\t\t\tvar old = obj[ nodeName ];\n\t\t\t\t\t\t\t\t\tobj[ nodeName ] = [ old ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar tmp = xmlToJson( item );\n\n\t\t\t\t\t\t\t\tif ( tmp !== '' ) obj[ nodeName ].push( tmp );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn obj;\n\n\t\t\t\t}\n\n\t\t\t\t// Taken from Base64-js\n\t\t\t\tfunction Base64toByteArray( b64 ) {\n\n\t\t\t\t\tvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar lookup = [];\n\t\t\t\t\tvar revLookup = [];\n\t\t\t\t\tvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t\t\t\tvar len = code.length;\n\n\t\t\t\t\tfor ( i = 0; i < len; i ++ ) {\n\n\t\t\t\t\t\tlookup[ i ] = code[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < len; ++ i ) {\n\n\t\t\t\t\t\trevLookup[ code.charCodeAt( i ) ] = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\trevLookup[ '-'.charCodeAt( 0 ) ] = 62;\n\t\t\t\t\trevLookup[ '_'.charCodeAt( 0 ) ] = 63;\n\n\t\t\t\t\tvar j, l, tmp, placeHolders, arr;\n\t\t\t\t\tvar len = b64.length;\n\n\t\t\t\t\tif ( len % 4 > 0 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Invalid string. Length must be a multiple of 4' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tplaceHolders = b64[ len - 2 ] === '=' ? 2 : b64[ len - 1 ] === '=' ? 1 : 0;\n\t\t\t\t\tarr = new Arr( len * 3 / 4 - placeHolders );\n\t\t\t\t\tl = placeHolders > 0 ? len - 4 : len;\n\n\t\t\t\t\tvar L = 0;\n\n\t\t\t\t\tfor ( i = 0, j = 0; i < l; i += 4, j += 3 ) {\n\n\t\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 18 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] << 12 ) | ( revLookup[ b64.charCodeAt( i + 2 ) ] << 6 ) | revLookup[ b64.charCodeAt( i + 3 ) ];\n\t\t\t\t\t\tarr[ L ++ ] = ( tmp & 0xFF0000 ) >> 16;\n\t\t\t\t\t\tarr[ L ++ ] = ( tmp & 0xFF00 ) >> 8;\n\t\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( placeHolders === 2 ) {\n\n\t\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 2 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] >> 4 );\n\t\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\n\n\t\t\t\t\t} else if ( placeHolders === 1 ) {\n\n\t\t\t\t\t\ttmp = ( revLookup[ b64.charCodeAt( i ) ] << 10 ) | ( revLookup[ b64.charCodeAt( i + 1 ) ] << 4 ) | ( revLookup[ b64.charCodeAt( i + 2 ) ] >> 2 );\n\t\t\t\t\t\tarr[ L ++ ] = ( tmp >> 8 ) & 0xFF;\n\t\t\t\t\t\tarr[ L ++ ] = tmp & 0xFF;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn arr;\n\n\t\t\t\t}\n\n\t\t\t\tfunction parseDataArray( ele, compressed ) {\n\n\t\t\t\t\tvar numBytes = 0;\n\n\t\t\t\t\tif ( json.attributes.header_type === 'UInt64' ) {\n\n\t\t\t\t\t\tnumBytes = 8;\n\n\t\t\t\t\t}\telse if ( json.attributes.header_type === 'UInt32' ) {\n\n\t\t\t\t\t\tnumBytes = 4;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// Check the format\n\t\t\t\t\tif ( ele.attributes.format === 'binary' && compressed ) {\n\n\t\t\t\t\t\tvar rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n\n\t\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\n\n\t\t\t\t\t\t\tvar txt = new Float32Array( );\n\n\t\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\t\tvar txt = new Int32Array( );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// VTP data with the header has the following structure:\n\t\t\t\t\t\t// [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\n\t\t\t\t\t\t// [#blocks] = Number of blocks\n\t\t\t\t\t\t// [#u-size] = Block size before compression\n\t\t\t\t\t\t// [#p-size] = Size of last partial block (zero if it not needed)\n\t\t\t\t\t\t// [#c-size-i] = Size in bytes of block i after compression\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\n\t\t\t\t\t\t// computed by summing the compressed block sizes from preceding blocks according to the header.\n\n\t\t\t\t\t\trawData = ele[ '#text' ];\n\n\t\t\t\t\t\tbyteData = Base64toByteArray( rawData );\n\n\t\t\t\t\t\tblocks = byteData[ 0 ];\n\t\t\t\t\t\tfor ( var i = 1; i < numBytes - 1; i ++ ) {\n\n\t\t\t\t\t\t\tblocks = blocks | ( byteData[ i ] << ( i * numBytes ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\theaderSize = ( blocks + 3 ) * numBytes;\n\t\t\t\t\t\tpadding = ( ( headerSize % 3 ) > 0 ) ? 3 - ( headerSize % 3 ) : 0;\n\t\t\t\t\t\theaderSize = headerSize + padding;\n\n\t\t\t\t\t\tdataOffsets = [];\n\t\t\t\t\t\tcurrentOffset = headerSize;\n\t\t\t\t\t\tdataOffsets.push( currentOffset );\n\n\t\t\t\t\t\t// Get the blocks sizes after the compression.\n\t\t\t\t\t\t// There are three blocks before c-size-i, so we skip 3*numBytes\n\t\t\t\t\t\tcSizeStart = 3 * numBytes;\n\n\t\t\t\t\t\tfor ( var i = 0; i < blocks; i ++ ) {\n\n\t\t\t\t\t\t\tvar currentBlockSize = byteData[ i * numBytes + cSizeStart ];\n\n\t\t\t\t\t\t\tfor ( var j = 1; j < numBytes - 1; j ++ ) {\n\n\t\t\t\t\t\t\t\t// Each data point consists of 8 bytes regardless of the header type\n\t\t\t\t\t\t\t\tcurrentBlockSize = currentBlockSize | ( byteData[ i * numBytes + cSizeStart + j ] << ( j * 8 ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentOffset = currentOffset + currentBlockSize;\n\t\t\t\t\t\t\tdataOffsets.push( currentOffset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < dataOffsets.length - 1; i ++ ) {\n\n\t\t\t\t\t\t\tvar inflate = new Zlib.Inflate( byteData.slice( dataOffsets[ i ], dataOffsets[ i + 1 ] ), { resize: true, verify: true } ); // eslint-disable-line no-undef\n\t\t\t\t\t\t\tcontent = inflate.decompress();\n\t\t\t\t\t\t\tcontent = content.buffer;\n\n\t\t\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\n\n\t\t\t\t\t\t\t\tcontent = new Float32Array( content );\n\t\t\t\t\t\t\t\ttxt = Float32Concat( txt, content );\n\n\t\t\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\t\t\tcontent = new Int32Array( content );\n\t\t\t\t\t\t\t\ttxt = Int32Concat( txt, content );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete ele[ '#text' ];\n\n\t\t\t\t\t\tif ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\t\tif ( ele.attributes.format === 'binary' ) {\n\n\t\t\t\t\t\t\t\ttxt = txt.filter( function ( el, idx ) {\n\n\t\t\t\t\t\t\t\t\tif ( idx % 2 !== 1 ) return true;\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ele.attributes.format === 'binary' && ! compressed ) {\n\n\t\t\t\t\t\t\tvar content = Base64toByteArray( ele[ '#text' ] );\n\n\t\t\t\t\t\t\t//  VTP data for the uncompressed case has the following structure:\n\t\t\t\t\t\t\t// [#bytes][DATA]\n\t\t\t\t\t\t\t// where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\n\t\t\t\t\t\t\tcontent = content.slice( numBytes ).buffer;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( ele[ '#text' ] ) {\n\n\t\t\t\t\t\t\t\tvar content = ele[ '#text' ].split( /\\s+/ ).filter( function ( el ) {\n\n\t\t\t\t\t\t\t\t\tif ( el !== '' ) return el;\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar content = new Int32Array( 0 ).buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete ele[ '#text' ];\n\n\t\t\t\t\t\t// Get the content and optimize it\n\t\t\t\t\t\tif ( ele.attributes.type === 'Float32' ) {\n\n\t\t\t\t\t\t\tvar txt = new Float32Array( content );\n\n\t\t\t\t\t\t} else if ( ele.attributes.type === 'Int32' ) {\n\n\t\t\t\t\t\t\tvar txt = new Int32Array( content );\n\n\t\t\t\t\t\t} else if ( ele.attributes.type === 'Int64' ) {\n\n\t\t\t\t\t\t\tvar txt = new Int32Array( content );\n\n\t\t\t\t\t\t\tif ( ele.attributes.format === 'binary' ) {\n\n\t\t\t\t\t\t\t\ttxt = txt.filter( function ( el, idx ) {\n\n\t\t\t\t\t\t\t\t\tif ( idx % 2 !== 1 ) return true;\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // endif ( ele.attributes.format === 'binary' && compressed )\n\n\t\t\t\t\treturn txt;\n\n\t\t\t\t}\n\n\t\t\t\t// Main part\n\t\t\t\t// Get Dom\n\t\t\t\tvar dom = null;\n\n\t\t\t\tif ( window.DOMParser ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tdom = ( new DOMParser() ).parseFromString( stringFile, 'text/xml' );\n\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\tdom = null;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( window.ActiveXObject ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tdom = new ActiveXObject( 'Microsoft.XMLDOM' ); // eslint-disable-line no-undef\n\t\t\t\t\t\tdom.async = false;\n\n\t\t\t\t\t\tif ( ! dom.loadXML( /* xml */ ) ) {\n\n\t\t\t\t\t\t\tthrow new Error( dom.parseError.reason + dom.parseError.srcText );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\tdom = null;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Cannot parse xml string!' );\n\n\t\t\t\t}\n\n\t\t\t\t// Get the doc\n\t\t\t\tvar doc = dom.documentElement;\n\t\t\t\t// Convert to json\n\t\t\t\tvar json = xmlToJson( doc );\n\t\t\t\tvar points = [];\n\t\t\t\tvar normals = [];\n\t\t\t\tvar indices = [];\n\n\t\t\t\tif ( json.PolyData ) {\n\n\t\t\t\t\tvar piece = json.PolyData.Piece;\n\t\t\t\t\tvar compressed = json.attributes.hasOwnProperty( 'compressor' );\n\n\t\t\t\t\t// Can be optimized\n\t\t\t\t\t// Loop through the sections\n\t\t\t\t\tvar sections = [ 'PointData', 'Points', 'Strips', 'Polys' ];// +['CellData', 'Verts', 'Lines'];\n\t\t\t\t\tvar sectionIndex = 0, numberOfSections = sections.length;\n\n\t\t\t\t\twhile ( sectionIndex < numberOfSections ) {\n\n\t\t\t\t\t\tvar section = piece[ sections[ sectionIndex ] ];\n\n\t\t\t\t\t\t// If it has a DataArray in it\n\n\t\t\t\t\t\tif ( section && section.DataArray ) {\n\n\t\t\t\t\t\t\t// Depending on the number of DataArrays\n\n\t\t\t\t\t\t\tif ( Object.prototype.toString.call( section.DataArray ) === '[object Array]' ) {\n\n\t\t\t\t\t\t\t\tvar arr = section.DataArray;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar arr = [ section.DataArray ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar dataArrayIndex = 0, numberOfDataArrays = arr.length;\n\n\t\t\t\t\t\t\twhile ( dataArrayIndex < numberOfDataArrays ) {\n\n\t\t\t\t\t\t\t\t// Parse the DataArray\n\t\t\t\t\t\t\t\tif ( ( '#text' in arr[ dataArrayIndex ] ) && ( arr[ dataArrayIndex ][ '#text' ].length > 0 ) ) {\n\n\t\t\t\t\t\t\t\t\tarr[ dataArrayIndex ].text = parseDataArray( arr[ dataArrayIndex ], compressed );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdataArrayIndex ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tswitch ( sections[ sectionIndex ] ) {\n\n\t\t\t\t\t\t\t\t// if iti is point data\n\t\t\t\t\t\t\t\tcase 'PointData':\n\n\t\t\t\t\t\t\t\t\tvar numberOfPoints = parseInt( piece.attributes.NumberOfPoints );\n\t\t\t\t\t\t\t\t\tvar normalsName = section.attributes.Normals;\n\n\t\t\t\t\t\t\t\t\tif ( numberOfPoints > 0 ) {\n\n\t\t\t\t\t\t\t\t\t\tfor ( var i = 0, len = arr.length; i < len; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( normalsName === arr[ i ].attributes.Name ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tvar components = arr[ i ].attributes.NumberOfComponents;\n\t\t\t\t\t\t\t\t\t\t\t\tnormals = new Float32Array( numberOfPoints * components );\n\t\t\t\t\t\t\t\t\t\t\t\tnormals.set( arr[ i ].text, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t// if it is points\n\t\t\t\t\t\t\t\tcase 'Points':\n\n\t\t\t\t\t\t\t\t\tvar numberOfPoints = parseInt( piece.attributes.NumberOfPoints );\n\n\t\t\t\t\t\t\t\t\tif ( numberOfPoints > 0 ) {\n\n\t\t\t\t\t\t\t\t\t\tvar components = section.DataArray.attributes.NumberOfComponents;\n\t\t\t\t\t\t\t\t\t\tpoints = new Float32Array( numberOfPoints * components );\n\t\t\t\t\t\t\t\t\t\tpoints.set( section.DataArray.text, 0 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t// if it is strips\n\t\t\t\t\t\t\t\tcase 'Strips':\n\n\t\t\t\t\t\t\t\t\tvar numberOfStrips = parseInt( piece.attributes.NumberOfStrips );\n\n\t\t\t\t\t\t\t\t\tif ( numberOfStrips > 0 ) {\n\n\t\t\t\t\t\t\t\t\t\tvar connectivity = new Int32Array( section.DataArray[ 0 ].text.length );\n\t\t\t\t\t\t\t\t\t\tvar offset = new Int32Array( section.DataArray[ 1 ].text.length );\n\t\t\t\t\t\t\t\t\t\tconnectivity.set( section.DataArray[ 0 ].text, 0 );\n\t\t\t\t\t\t\t\t\t\toffset.set( section.DataArray[ 1 ].text, 0 );\n\n\t\t\t\t\t\t\t\t\t\tvar size = numberOfStrips + connectivity.length;\n\t\t\t\t\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfStrips );\n\n\t\t\t\t\t\t\t\t\t\tvar indicesIndex = 0;\n\n\t\t\t\t\t\t\t\t\t\tfor ( var i = 0, len = numberOfStrips; i < len; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar strip = [];\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( var s = 0, len1 = offset[ i ], len0 = 0; s < len1 - len0; s ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tstrip.push( connectivity[ s ] );\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( i > 0 ) len0 = offset[ i - 1 ];\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( var j = 0, len1 = offset[ i ], len0 = 0; j < len1 - len0 - 2; j ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( j % 2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\t\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j ];\n\t\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 1 ];\n\t\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = strip[ j + 2 ];\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( i > 0 ) len0 = offset[ i - 1 ];\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t// if it is polys\n\t\t\t\t\t\t\t\tcase 'Polys':\n\n\t\t\t\t\t\t\t\t\tvar numberOfPolys = parseInt( piece.attributes.NumberOfPolys );\n\n\t\t\t\t\t\t\t\t\tif ( numberOfPolys > 0 ) {\n\n\t\t\t\t\t\t\t\t\t\tvar connectivity = new Int32Array( section.DataArray[ 0 ].text.length );\n\t\t\t\t\t\t\t\t\t\tvar offset = new Int32Array( section.DataArray[ 1 ].text.length );\n\t\t\t\t\t\t\t\t\t\tconnectivity.set( section.DataArray[ 0 ].text, 0 );\n\t\t\t\t\t\t\t\t\t\toffset.set( section.DataArray[ 1 ].text, 0 );\n\n\t\t\t\t\t\t\t\t\t\tvar size = numberOfPolys + connectivity.length;\n\t\t\t\t\t\t\t\t\t\tindices = new Uint32Array( 3 * size - 9 * numberOfPolys );\n\t\t\t\t\t\t\t\t\t\tvar indicesIndex = 0, connectivityIndex = 0;\n\t\t\t\t\t\t\t\t\t\tvar i = 0, len = numberOfPolys, len0 = 0;\n\n\t\t\t\t\t\t\t\t\t\twhile ( i < len ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar poly = [];\n\t\t\t\t\t\t\t\t\t\t\tvar s = 0, len1 = offset[ i ];\n\n\t\t\t\t\t\t\t\t\t\t\twhile ( s < len1 - len0 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tpoly.push( connectivity[ connectivityIndex ++ ] );\n\t\t\t\t\t\t\t\t\t\t\t\ts ++;\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tvar j = 1;\n\n\t\t\t\t\t\t\t\t\t\t\twhile ( j < len1 - len0 - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ 0 ];\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ j ];\n\t\t\t\t\t\t\t\t\t\t\t\tindices[ indicesIndex ++ ] = poly[ j + 1 ];\n\t\t\t\t\t\t\t\t\t\t\t\tj ++;\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\ti ++;\n\t\t\t\t\t\t\t\t\t\t\tlen0 = offset[ i - 1 ];\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsectionIndex ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( points, 3 ) );\n\n\t\t\t\t\tif ( normals.length === points.length ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Unsupported DATASET type' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction getStringFile( data ) {\n\n\t\t\t\tvar stringFile = '';\n\t\t\t\tvar charArray = new Uint8Array( data );\n\t\t\t\tvar i = 0;\n\t\t\t\tvar len = charArray.length;\n\n\t\t\t\twhile ( len -- ) {\n\n\t\t\t\t\tstringFile += String.fromCharCode( charArray[ i ++ ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn stringFile;\n\n\t\t\t}\n\n\t\t\t// get the 5 first lines of the files to check if there is the key word binary\n\t\t\tvar meta = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 250 ) ).split( '\\n' );\n\n\t\t\tif ( meta[ 0 ].indexOf( 'xml' ) !== - 1 ) {\n\n\t\t\t\treturn parseXML( getStringFile( data ) );\n\n\t\t\t} else if ( meta[ 2 ].includes( 'ASCII' ) ) {\n\n\t\t\t\treturn parseASCII( getStringFile( data ) );\n\n\t\t\t} else {\n\n\t\t\t\treturn parseBinary( data );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.VTKLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/XLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author adrs2002 / https://github.com/adrs2002\n\t */\n\n\tTHREE.XLoader = ( function () {\n\n\t\tvar classCallCheck = function ( instance, Constructor ) {\n\n\t\t\tif ( ! ( instance instanceof Constructor ) ) {\n\n\t\t\t\tthrow new TypeError( \"Cannot call a class as a function\" );\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar createClass = function () {\n\n\t\t\tfunction defineProperties( target, props ) {\n\n\t\t\t\tfor ( var i = 0; i < props.length; i ++ ) {\n\n\t\t\t\t\tvar descriptor = props[ i ];\n\t\t\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\t\t\tdescriptor.configurable = true;\n\t\t\t\t\tif ( \"value\" in descriptor ) descriptor.writable = true;\n\t\t\t\t\tObject.defineProperty( target, descriptor.key, descriptor );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn function ( Constructor, protoProps, staticProps ) {\n\n\t\t\t\tif ( protoProps ) defineProperties( Constructor.prototype, protoProps );\n\t\t\t\tif ( staticProps ) defineProperties( Constructor, staticProps );\n\t\t\t\treturn Constructor;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar XboneInf = function XboneInf() {\n\n\t\t\tclassCallCheck( this, XboneInf );\n\n\t\t\tthis.boneName = \"\";\n\t\t\tthis.BoneIndex = 0;\n\t\t\tthis.Indeces = [];\n\t\t\tthis.Weights = [];\n\t\t\tthis.initMatrix = null;\n\t\t\tthis.OffsetMatrix = null;\n\n\t\t};\n\n\t\tvar XAnimationInfo = function XAnimationInfo() {\n\n\t\t\tclassCallCheck( this, XAnimationInfo );\n\n\t\t\tthis.animeName = \"\";\n\t\t\tthis.boneName = \"\";\n\t\t\tthis.targetBone = null;\n\t\t\tthis.keyType = 4;\n\t\t\tthis.frameStartLv = 0;\n\t\t\tthis.keyFrames = [];\n\t\t\tthis.InverseMx = null;\n\n\t\t};\n\n\t\tvar XAnimationObj = function () {\n\n\t\t\tfunction XAnimationObj( _flags ) {\n\n\t\t\t\tclassCallCheck( this, XAnimationObj );\n\n\t\t\t\tthis.fps = 30;\n\t\t\t\tthis.name = 'xanimation';\n\t\t\t\tthis.length = 0;\n\t\t\t\tthis.hierarchy = [];\n\t\t\t\tthis.putFlags = _flags;\n\t\t\t\tif ( this.putFlags.putPos === undefined ) {\n\n\t\t\t\t\tthis.putFlags.putPos = true;\n\n\t\t\t\t}\n\t\t\t\tif ( this.putFlags.putRot === undefined ) {\n\n\t\t\t\t\tthis.putFlags.putRot = true;\n\n\t\t\t\t}\n\t\t\t\tif ( this.putFlags.putScl === undefined ) {\n\n\t\t\t\t\tthis.putFlags.putScl = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcreateClass( XAnimationObj, [ {\n\t\t\t\tkey: \"make\",\n\t\t\t\tvalue: function make( XAnimationInfoArray ) {\n\n\t\t\t\t\tfor ( var i = 0; i < XAnimationInfoArray.length; i ++ ) {\n\n\t\t\t\t\t\tthis.hierarchy.push( this.makeBonekeys( XAnimationInfoArray[ i ] ) );\n\n\t\t\t\t\t}\n\t\t\t\t\tthis.length = this.hierarchy[ 0 ].keys[ this.hierarchy[ 0 ].keys.length - 1 ].time;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: \"clone\",\n\t\t\t\tvalue: function clone() {\n\n\t\t\t\t\treturn Object.assign( {}, this );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: \"makeBonekeys\",\n\t\t\t\tvalue: function makeBonekeys( XAnimationInfo ) {\n\n\t\t\t\t\tvar refObj = {};\n\t\t\t\t\trefObj.name = XAnimationInfo.boneName;\n\t\t\t\t\trefObj.parent = \"\";\n\t\t\t\t\trefObj.keys = this.keyFrameRefactor( XAnimationInfo );\n\t\t\t\t\trefObj.copy = function () {\n\n\t\t\t\t\t\treturn Object.assign( {}, this );\n\n\t\t\t\t\t};\n\t\t\t\t\treturn refObj;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: \"keyFrameRefactor\",\n\t\t\t\tvalue: function keyFrameRefactor( XAnimationInfo ) {\n\n\t\t\t\t\tvar keys = [];\n\t\t\t\t\tfor ( var i = 0; i < XAnimationInfo.keyFrames.length; i ++ ) {\n\n\t\t\t\t\t\tvar keyframe = {};\n\t\t\t\t\t\tkeyframe.time = XAnimationInfo.keyFrames[ i ].time * this.fps;\n\t\t\t\t\t\tif ( XAnimationInfo.keyFrames[ i ].pos && this.putFlags.putPos ) {\n\n\t\t\t\t\t\t\tkeyframe.pos = XAnimationInfo.keyFrames[ i ].pos;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( XAnimationInfo.keyFrames[ i ].rot && this.putFlags.putRot ) {\n\n\t\t\t\t\t\t\tkeyframe.rot = XAnimationInfo.keyFrames[ i ].rot;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( XAnimationInfo.keyFrames[ i ].scl && this.putFlags.putScl ) {\n\n\t\t\t\t\t\t\tkeyframe.scl = XAnimationInfo.keyFrames[ i ].scl;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( XAnimationInfo.keyFrames[ i ].matrix ) {\n\n\t\t\t\t\t\t\tkeyframe.matrix = XAnimationInfo.keyFrames[ i ].matrix;\n\t\t\t\t\t\t\tif ( this.putFlags.putPos ) {\n\n\t\t\t\t\t\t\t\tkeyframe.pos = new THREE.Vector3().setFromMatrixPosition( keyframe.matrix );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( this.putFlags.putRot ) {\n\n\t\t\t\t\t\t\t\tkeyframe.rot = new THREE.Quaternion().setFromRotationMatrix( keyframe.matrix );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( this.putFlags.putScl ) {\n\n\t\t\t\t\t\t\t\tkeyframe.scl = new THREE.Vector3().setFromMatrixScale( keyframe.matrix );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tkeys.push( keyframe );\n\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\n\t\t\t\t}\n\t\t\t} ] );\n\t\t\treturn XAnimationObj;\n\n\t\t}();\n\n\t\tvar XKeyFrameInfo = function XKeyFrameInfo() {\n\n\t\t\tclassCallCheck( this, XKeyFrameInfo );\n\n\t\t\tthis.index = 0;\n\t\t\tthis.Frame = 0;\n\t\t\tthis.time = 0.0;\n\t\t\tthis.matrix = null;\n\n\t\t};\n\n\t\tvar XLoader = function () {\n\n\t\t\tfunction XLoader( manager ) {\n\n\t\t\t\tTHREE.Loader.call( this, manager );\n\n\t\t\t\tclassCallCheck( this, XLoader );\n\n\t\t\t\tthis.debug = false;\n\t\t\t\tthis.texloader = new THREE.TextureLoader( this.manager );\n\t\t\t\tthis.url = \"\";\n\t\t\t\tthis._putMatLength = 0;\n\t\t\t\tthis._nowMat = null;\n\t\t\t\tthis._nowFrameName = \"\";\n\t\t\t\tthis.frameHierarchie = [];\n\t\t\t\tthis.Hierarchies = {};\n\t\t\t\tthis.HieStack = [];\n\t\t\t\tthis._currentObject = {};\n\t\t\t\tthis._currentFrame = {};\n\t\t\t\tthis._data = null;\n\t\t\t\tthis.onLoad = null;\n\t\t\t\tthis.IsUvYReverse = true;\n\t\t\t\tthis.Meshes = [];\n\t\t\t\tthis.animations = [];\n\t\t\t\tthis.animTicksPerSecond = 30;\n\t\t\t\tthis._currentGeo = null;\n\t\t\t\tthis._currentAnime = null;\n\t\t\t\tthis._currentAnimeFrames = null;\n\n\t\t\t}\n\n\t\t\tcreateClass( XLoader, [ {\n\t\t\t\tkey: '_setArgOption',\n\t\t\t\tvalue: function _setArgOption( _arg ) {\n\n\t\t\t\t\tvar _start = arguments.length > 1 && arguments[ 1 ] !== undefined ? arguments[ 1 ] : 0;\n\n\t\t\t\t\tif ( ! _arg ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\t\t\t\t\tfor ( var i = _start; i < _arg.length; i ++ ) {\n\n\t\t\t\t\t\tswitch ( i ) {\n\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tthis.url = _arg[ i ];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tthis.options = _arg[ i ];\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( this.options === undefined ) {\n\n\t\t\t\t\t\tthis.options = {};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'load',\n\t\t\t\tvalue: function load( _arg, onLoad, onProgress, onError ) {\n\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\tthis._setArgOption( _arg );\n\t\t\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\t\t\tloader.setPath( this.path );\n\t\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\t\t\tloader.load( this.url, function ( response ) {\n\n\t\t\t\t\t\t_this.parse( response, onLoad );\n\n\t\t\t\t\t}, onProgress, onError );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readLine',\n\t\t\t\tvalue: function _readLine( line ) {\n\n\t\t\t\t\tvar readed = 0;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tvar find = - 1;\n\t\t\t\t\t\tfind = line.indexOf( '//', readed );\n\t\t\t\t\t\tif ( find === - 1 ) {\n\n\t\t\t\t\t\t\tfind = line.indexOf( '#', readed );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( find > - 1 && find < 2 ) {\n\n\t\t\t\t\t\t\tvar foundNewLine = - 1;\n\t\t\t\t\t\t\tfoundNewLine = line.indexOf( \"\\r\\n\", readed );\n\t\t\t\t\t\t\tif ( foundNewLine > 0 ) {\n\n\t\t\t\t\t\t\t\treaded = foundNewLine + 2;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfoundNewLine = line.indexOf( \"\\r\", readed );\n\t\t\t\t\t\t\t\tif ( foundNewLine > 0 ) {\n\n\t\t\t\t\t\t\t\t\treaded = foundNewLine + 1;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\treaded = line.indexOf( \"\\n\", readed ) + 1;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn line.substr( readed );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readLine',\n\t\t\t\tvalue: function _readLine( line ) {\n\n\t\t\t\t\tvar readed = 0;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tvar find = - 1;\n\t\t\t\t\t\tfind = line.indexOf( '//', readed );\n\t\t\t\t\t\tif ( find === - 1 ) {\n\n\t\t\t\t\t\t\tfind = line.indexOf( '#', readed );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( find > - 1 && find < 2 ) {\n\n\t\t\t\t\t\t\tvar foundNewLine = - 1;\n\t\t\t\t\t\t\tfoundNewLine = line.indexOf( \"\\r\\n\", readed );\n\t\t\t\t\t\t\tif ( foundNewLine > 0 ) {\n\n\t\t\t\t\t\t\t\treaded = foundNewLine + 2;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfoundNewLine = line.indexOf( \"\\r\", readed );\n\t\t\t\t\t\t\t\tif ( foundNewLine > 0 ) {\n\n\t\t\t\t\t\t\t\t\treaded = foundNewLine + 1;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\treaded = line.indexOf( \"\\n\", readed ) + 1;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn line.substr( readed );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_isBinary',\n\t\t\t\tvalue: function _isBinary( binData ) {\n\n\t\t\t\t\tvar reader = new DataView( binData );\n\t\t\t\t\tvar face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n\t\t\t\t\tvar n_faces = reader.getUint32( 80, true );\n\t\t\t\t\tvar expect = 80 + 32 / 8 + n_faces * face_size;\n\t\t\t\t\tif ( expect === reader.byteLength ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar fileLength = reader.byteLength;\n\t\t\t\t\tfor ( var index = 0; index < fileLength; index ++ ) {\n\n\t\t\t\t\t\tif ( reader.getUint8( index, false ) > 127 ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_ensureBinary',\n\t\t\t\tvalue: function _ensureBinary( buf ) {\n\n\t\t\t\t\tif ( typeof buf === \"string\" ) {\n\n\t\t\t\t\t\tvar array_buffer = new Uint8Array( buf.length );\n\t\t\t\t\t\tfor ( var i = 0; i < buf.length; i ++ ) {\n\n\t\t\t\t\t\t\tarray_buffer[ i ] = buf.charCodeAt( i ) & 0xff;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn array_buffer.buffer || array_buffer;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn buf;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_ensureString',\n\t\t\t\tvalue: function _ensureString( buf ) {\n\n\t\t\t\t\tif ( typeof buf !== \"string\" ) {\n\n\t\t\t\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buf ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn buf;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'parse',\n\t\t\t\tvalue: function _parse( data, onLoad ) {\n\n\t\t\t\t\tvar binData = this._ensureBinary( data );\n\t\t\t\t\tthis._data = this._ensureString( data );\n\t\t\t\t\tthis.onLoad = onLoad;\n\t\t\t\t\treturn this._isBinary( binData ) ? this._parseBinary( binData ) : this._parseASCII();\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_parseBinary',\n\t\t\t\tvalue: function _parseBinary( data ) {\n\n\t\t\t\t\treturn this._parseASCII( THREE.LoaderUtils.decodeText( new Uint8Array( data ) ) );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_parseASCII',\n\t\t\t\tvalue: function _parseASCII() {\n\n\t\t\t\t\tvar path;\n\n\t\t\t\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\t\t\t\tpath = this.resourcePath;\n\n\t\t\t\t\t} else if ( this.path !== '' ) {\n\n\t\t\t\t\t\tpath = this.path;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpath = THREE.LoaderUtils.extractUrlBase( this.url );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.texloader.setPath( path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\t\t\tvar endRead = 16;\n\t\t\t\t\tthis.Hierarchies.children = [];\n\t\t\t\t\tthis._hierarchieParse( this.Hierarchies, endRead );\n\t\t\t\t\tthis._changeRoot();\n\t\t\t\t\tthis._currentObject = this.Hierarchies.children.shift();\n\t\t\t\t\tthis._mainloop();\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_hierarchieParse',\n\t\t\t\tvalue: function _hierarchieParse( _parent, _end ) {\n\n\t\t\t\t\tvar endRead = _end;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tvar find1 = this._data.indexOf( '{', endRead ) + 1;\n\t\t\t\t\t\tvar findEnd = this._data.indexOf( '}', endRead );\n\t\t\t\t\t\tvar findNext = this._data.indexOf( '{', find1 ) + 1;\n\t\t\t\t\t\tif ( find1 > 0 && findEnd > find1 ) {\n\n\t\t\t\t\t\t\tvar _currentObject = {};\n\t\t\t\t\t\t\t_currentObject.children = [];\n\t\t\t\t\t\t\tvar nameData = this._readLine( this._data.substr( endRead, find1 - endRead - 1 ) ).trim();\n\t\t\t\t\t\t\tvar word = nameData.split( / /g );\n\t\t\t\t\t\t\tif ( word.length > 0 ) {\n\n\t\t\t\t\t\t\t\t_currentObject.type = word[ 0 ];\n\t\t\t\t\t\t\t\tif ( word.length >= 2 ) {\n\n\t\t\t\t\t\t\t\t\t_currentObject.name = word[ 1 ];\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t_currentObject.name = word[ 0 ] + this.Hierarchies.children.length;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t_currentObject.name = nameData;\n\t\t\t\t\t\t\t\t_currentObject.type = \"\";\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( _currentObject.type === \"Animation\" ) {\n\n\t\t\t\t\t\t\t\t_currentObject.data = this._data.substr( findNext, findEnd - findNext ).trim();\n\t\t\t\t\t\t\t\tvar refs = this._hierarchieParse( _currentObject, findEnd + 1 );\n\t\t\t\t\t\t\t\tendRead = refs.end;\n\t\t\t\t\t\t\t\t_currentObject.children = refs.parent.children;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar DataEnder = this._data.lastIndexOf( ';', findNext > 0 ? Math.min( findNext, findEnd ) : findEnd );\n\t\t\t\t\t\t\t\t_currentObject.data = this._data.substr( find1, DataEnder - find1 ).trim();\n\t\t\t\t\t\t\t\tif ( findNext <= 0 || findEnd < findNext ) {\n\n\t\t\t\t\t\t\t\t\tendRead = findEnd + 1;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tvar nextStart = Math.max( DataEnder + 1, find1 );\n\t\t\t\t\t\t\t\t\tvar _refs = this._hierarchieParse( _currentObject, nextStart );\n\t\t\t\t\t\t\t\t\tendRead = _refs.end;\n\t\t\t\t\t\t\t\t\t_currentObject.children = _refs.parent.children;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_currentObject.parent = _parent;\n\t\t\t\t\t\t\tif ( _currentObject.type != \"template\" ) {\n\n\t\t\t\t\t\t\t\t_parent.children.push( _currentObject );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tendRead = find1 === - 1 ? this._data.length : findEnd + 1;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tparent: _parent,\n\t\t\t\t\t\tend: endRead\n\t\t\t\t\t};\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_mainloop',\n\t\t\t\tvalue: function _mainloop() {\n\n\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\tthis._mainProc();\n\t\t\t\t\tif ( this._currentObject.parent || this._currentObject.children.length > 0 || ! this._currentObject.worked ) {\n\n\t\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\t\t_this2._mainloop();\n\n\t\t\t\t\t\t}, 1 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\t\t_this2.onLoad( {\n\t\t\t\t\t\t\t\tmodels: _this2.Meshes,\n\t\t\t\t\t\t\t\tanimations: _this2.animations\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_mainProc',\n\t\t\t\tvalue: function _mainProc() {\n\n\t\t\t\t\tvar breakFlag = false;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tif ( ! this._currentObject.worked ) {\n\n\t\t\t\t\t\t\tswitch ( this._currentObject.type ) {\n\n\t\t\t\t\t\t\t\tcase \"template\":\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"AnimTicksPerSecond\":\n\t\t\t\t\t\t\t\t\tthis.animTicksPerSecond = parseInt( this._currentObject.data );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"Frame\":\n\t\t\t\t\t\t\t\t\tthis._setFrame();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"FrameTransformMatrix\":\n\t\t\t\t\t\t\t\t\tthis._setFrameTransformMatrix();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"Mesh\":\n\t\t\t\t\t\t\t\t\tthis._changeRoot();\n\t\t\t\t\t\t\t\t\tthis._currentGeo = {};\n\t\t\t\t\t\t\t\t\tthis._currentGeo.name = this._currentObject.name.trim();\n\t\t\t\t\t\t\t\t\tthis._currentGeo.parentName = this._getParentName( this._currentObject ).trim();\n\t\t\t\t\t\t\t\t\tthis._currentGeo.VertexSetedBoneCount = [];\n\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData = {\n\t\t\t\t\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\t\t\t\t\tuvs: [],\n\t\t\t\t\t\t\t\t\t\tskinIndices: [],\n\t\t\t\t\t\t\t\t\t\tskinWeights: [],\n\t\t\t\t\t\t\t\t\t\tindices: [],\n\t\t\t\t\t\t\t\t\t\tmaterialIndices: []\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis._currentGeo.Materials = [];\n\t\t\t\t\t\t\t\t\tthis._currentGeo.normalVectors = [];\n\t\t\t\t\t\t\t\t\tthis._currentGeo.BoneInfs = [];\n\t\t\t\t\t\t\t\t\tthis._currentGeo.baseFrame = this._currentFrame;\n\t\t\t\t\t\t\t\t\tthis._makeBoneFrom_CurrentFrame();\n\t\t\t\t\t\t\t\t\tthis._readVertexDatas();\n\t\t\t\t\t\t\t\t\tbreakFlag = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"MeshNormals\":\n\t\t\t\t\t\t\t\t\tthis._readVertexDatas();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"MeshTextureCoords\":\n\t\t\t\t\t\t\t\t\tthis._setMeshTextureCoords();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"VertexDuplicationIndices\":\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"MeshMaterialList\":\n\t\t\t\t\t\t\t\t\tthis._setMeshMaterialList();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"Material\":\n\t\t\t\t\t\t\t\t\tthis._setMaterial();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"SkinWeights\":\n\t\t\t\t\t\t\t\t\tthis._setSkinWeights();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"AnimationSet\":\n\t\t\t\t\t\t\t\t\tthis._changeRoot();\n\t\t\t\t\t\t\t\t\tthis._currentAnime = {};\n\t\t\t\t\t\t\t\t\tthis._currentAnime.name = this._currentObject.name.trim();\n\t\t\t\t\t\t\t\t\tthis._currentAnime.AnimeFrames = [];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"Animation\":\n\t\t\t\t\t\t\t\t\tif ( this._currentAnimeFrames ) {\n\n\t\t\t\t\t\t\t\t\t\tthis._currentAnime.AnimeFrames.push( this._currentAnimeFrames );\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis._currentAnimeFrames = new XAnimationInfo();\n\t\t\t\t\t\t\t\t\tthis._currentAnimeFrames.boneName = this._currentObject.data.trim();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"AnimationKey\":\n\t\t\t\t\t\t\t\t\tthis._readAnimationKey();\n\t\t\t\t\t\t\t\t\tbreakFlag = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._currentObject.worked = true;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( this._currentObject.children.length > 0 ) {\n\n\t\t\t\t\t\t\tthis._currentObject = this._currentObject.children.shift();\n\t\t\t\t\t\t\tif ( this.debug ) {\n\n\t\t\t\t\t\t\t\tconsole.log( 'processing ' + this._currentObject.name );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( breakFlag ) break;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( this._currentObject.worked ) {\n\n\t\t\t\t\t\t\t\tif ( this._currentObject.parent && ! this._currentObject.parent.parent ) {\n\n\t\t\t\t\t\t\t\t\tthis._changeRoot();\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( this._currentObject.parent ) {\n\n\t\t\t\t\t\t\t\tthis._currentObject = this._currentObject.parent;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tbreakFlag = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( breakFlag ) break;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_changeRoot',\n\t\t\t\tvalue: function _changeRoot() {\n\n\t\t\t\t\tif ( this._currentGeo != null && this._currentGeo.name ) {\n\n\t\t\t\t\t\tthis._makeOutputGeometry();\n\n\t\t\t\t\t}\n\t\t\t\t\tthis._currentGeo = {};\n\t\t\t\t\tif ( this._currentAnime != null && this._currentAnime.name ) {\n\n\t\t\t\t\t\tif ( this._currentAnimeFrames ) {\n\n\t\t\t\t\t\t\tthis._currentAnime.AnimeFrames.push( this._currentAnimeFrames );\n\t\t\t\t\t\t\tthis._currentAnimeFrames = null;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._makeOutputAnimation();\n\n\t\t\t\t\t}\n\t\t\t\t\tthis._currentAnime = {};\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_getParentName',\n\t\t\t\tvalue: function _getParentName( _obj ) {\n\n\t\t\t\t\tif ( _obj.parent ) {\n\n\t\t\t\t\t\tif ( _obj.parent.name ) {\n\n\t\t\t\t\t\t\treturn _obj.parent.name;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\treturn this._getParentName( _obj.parent );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn \"\";\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_setFrame',\n\t\t\t\tvalue: function _setFrame() {\n\n\t\t\t\t\tthis._nowFrameName = this._currentObject.name.trim();\n\t\t\t\t\tthis._currentFrame = {};\n\t\t\t\t\tthis._currentFrame.name = this._nowFrameName;\n\t\t\t\t\tthis._currentFrame.children = [];\n\t\t\t\t\tif ( this._currentObject.parent && this._currentObject.parent.name ) {\n\n\t\t\t\t\t\tthis._currentFrame.parentName = this._currentObject.parent.name;\n\n\t\t\t\t\t}\n\t\t\t\t\tthis.frameHierarchie.push( this._nowFrameName );\n\t\t\t\t\tthis.HieStack[ this._nowFrameName ] = this._currentFrame;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_setFrameTransformMatrix',\n\t\t\t\tvalue: function _setFrameTransformMatrix() {\n\n\t\t\t\t\tthis._currentFrame.FrameTransformMatrix = new THREE.Matrix4();\n\t\t\t\t\tvar data = this._currentObject.data.split( \",\" );\n\t\t\t\t\tthis._ParseMatrixData( this._currentFrame.FrameTransformMatrix, data );\n\t\t\t\t\tthis._makeBoneFrom_CurrentFrame();\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_makeBoneFrom_CurrentFrame',\n\t\t\t\tvalue: function _makeBoneFrom_CurrentFrame() {\n\n\t\t\t\t\tif ( ! this._currentFrame.FrameTransformMatrix ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar b = new THREE.Bone();\n\t\t\t\t\tb.name = this._currentFrame.name;\n\t\t\t\t\tb.applyMatrix4( this._currentFrame.FrameTransformMatrix );\n\t\t\t\t\tb.matrixWorld = b.matrix;\n\t\t\t\t\tb.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n\t\t\t\t\tthis._currentFrame.putBone = b;\n\t\t\t\t\tif ( this._currentFrame.parentName ) {\n\n\t\t\t\t\t\tfor ( var frame in this.HieStack ) {\n\n\t\t\t\t\t\t\tif ( this.HieStack[ frame ].name === this._currentFrame.parentName ) {\n\n\t\t\t\t\t\t\t\tthis.HieStack[ frame ].putBone.add( this._currentFrame.putBone );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readVertexDatas',\n\t\t\t\tvalue: function _readVertexDatas() {\n\n\t\t\t\t\tvar endRead = 0;\n\t\t\t\t\tvar mode = 0;\n\t\t\t\t\tvar mode_local = 0;\n\t\t\t\t\tvar maxLength = 0;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tvar changeMode = false;\n\t\t\t\t\t\tif ( mode_local === 0 ) {\n\n\t\t\t\t\t\t\tvar refO = this._readInt1( endRead );\n\t\t\t\t\t\t\tendRead = refO.endRead;\n\t\t\t\t\t\t\tmode_local = 1;\n\t\t\t\t\t\t\tmaxLength = this._currentObject.data.indexOf( ';;', endRead ) + 1;\n\t\t\t\t\t\t\tif ( maxLength <= 0 ) {\n\n\t\t\t\t\t\t\t\tmaxLength = this._currentObject.data.length;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar find = 0;\n\t\t\t\t\t\t\tswitch ( mode ) {\n\n\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\tfind = this._currentObject.data.indexOf( ',', endRead ) + 1;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tfind = this._currentObject.data.indexOf( ';,', endRead ) + 1;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( find === 0 || find > maxLength ) {\n\n\t\t\t\t\t\t\t\tfind = maxLength;\n\t\t\t\t\t\t\t\tmode_local = 0;\n\t\t\t\t\t\t\t\tchangeMode = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tswitch ( this._currentObject.type ) {\n\n\t\t\t\t\t\t\t\tcase \"Mesh\":\n\t\t\t\t\t\t\t\t\tswitch ( mode ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\t\t\tthis._readVertex1( this._currentObject.data.substr( endRead, find - endRead ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\t\tthis._readFace1( this._currentObject.data.substr( endRead, find - endRead ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"MeshNormals\":\n\t\t\t\t\t\t\t\t\tswitch ( mode ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\t\t\tthis._readNormalVector1( this._currentObject.data.substr( endRead, find - endRead ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\t\t\tif ( changeMode ) {\n\n\t\t\t\t\t\t\t\tmode ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( endRead >= this._currentObject.data.length ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readInt1',\n\t\t\t\tvalue: function _readInt1( start ) {\n\n\t\t\t\t\tvar find = this._currentObject.data.indexOf( ';', start );\n\t\t\t\t\treturn {\n\t\t\t\t\t\trefI: parseInt( this._currentObject.data.substr( start, find - start ) ),\n\t\t\t\t\t\tendRead: find + 1\n\t\t\t\t\t};\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readVertex1',\n\t\t\t\tvalue: function _readVertex1( line ) {\n\n\t\t\t\t\tvar data = this._readLine( line.trim() ).substr( 0, line.length - 2 ).split( \";\" );\n\t\t\t\t\tthis._currentGeo.GeometryData.vertices.push( parseFloat( data[ 0 ] ), parseFloat( data[ 1 ] ), parseFloat( data[ 2 ] ) );\n\t\t\t\t\tthis._currentGeo.GeometryData.skinIndices.push( 0, 0, 0, 0 );\n\t\t\t\t\tthis._currentGeo.GeometryData.skinWeights.push( 1, 0, 0, 0 );\n\t\t\t\t\tthis._currentGeo.VertexSetedBoneCount.push( 0 );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readFace1',\n\t\t\t\tvalue: function _readFace1( line ) {\n\n\t\t\t\t\tvar data = this._readLine( line.trim() ).substr( 2, line.length - 4 ).split( \",\" );\n\t\t\t\t\tthis._currentGeo.GeometryData.indices.push( parseInt( data[ 0 ], 10 ), parseInt( data[ 1 ], 10 ), parseInt( data[ 2 ], 10 ) );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_readNormalVector1',\n\t\t\t\tvalue: function _readNormalVector1( line ) {\n\n\t\t\t\t\tvar data = this._readLine( line.trim() ).substr( 0, line.length - 2 ).split( \";\" );\n\t\t\t\t\tthis._currentGeo.GeometryData.normals.push( parseFloat( data[ 0 ] ), parseFloat( data[ 1 ] ), parseFloat( data[ 2 ] ) );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_buildGeometry',\n\t\t\t\tvalue: function _buildGeometry() {\n\n\t\t\t\t\tvar bufferGeometry = new THREE.BufferGeometry();\n\t\t\t\t\tvar position = [];\n\t\t\t\t\tvar normals = [];\n\t\t\t\t\tvar uvs = [];\n\t\t\t\t\tvar skinIndices = [];\n\t\t\t\t\tvar skinWeights = [];\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar data = this._currentGeo.GeometryData;\n\n\t\t\t\t\tfor ( var i = 0, l = data.indices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar stride2 = data.indices[ i ] * 2;\n\t\t\t\t\t\tvar stride3 = data.indices[ i ] * 3;\n\t\t\t\t\t\tvar stride4 = data.indices[ i ] * 4;\n\n\t\t\t\t\t\tposition.push( data.vertices[ stride3 ], data.vertices[ stride3 + 1 ], data.vertices[ stride3 + 2 ] );\n\t\t\t\t\t\tnormals.push( data.normals[ stride3 ], data.normals[ stride3 + 1 ], data.normals[ stride3 + 2 ] );\n\t\t\t\t\t\tskinIndices.push( data.skinIndices[ stride4 ], data.skinIndices[ stride4 + 1 ], data.skinIndices[ stride4 + 2 ], data.skinIndices[ stride4 + 3 ] );\n\t\t\t\t\t\tskinWeights.push( data.skinWeights[ stride4 ], data.skinWeights[ stride4 + 1 ], data.skinWeights[ stride4 + 2 ], data.skinWeights[ stride4 + 3 ] );\n\t\t\t\t\t\tuvs.push( data.uvs[ stride2 ], data.uvs[ stride2 + 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//\n\n\t\t\t\t\tbufferGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( position, 3 ) );\n\t\t\t\t\tbufferGeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\t\t\t\t\tbufferGeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\t\t\t\t\tbufferGeometry.setAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( skinIndices, 4 ) );\n\t\t\t\t\tbufferGeometry.setAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeights, 4 ) );\n\n\t\t\t\t\tthis._computeGroups( bufferGeometry, data.materialIndices );\n\n\t\t\t\t\treturn bufferGeometry;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_computeGroups',\n\t\t\t\tvalue: function _computeGroups( bufferGeometry, materialIndices ) {\n\n\t\t\t\t\tvar group;\n\t\t\t\t\tvar groups = [];\n\t\t\t\t\tvar materialIndex = undefined;\n\n\t\t\t\t\tfor ( var i = 0; i < materialIndices.length; i ++ ) {\n\n\t\t\t\t\t\tvar currentMaterialIndex = materialIndices[ i ];\n\n\t\t\t\t\t\tif ( currentMaterialIndex !== materialIndex ) {\n\n\t\t\t\t\t\t\tmaterialIndex = currentMaterialIndex;\n\n\t\t\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgroup = {\n\t\t\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbufferGeometry.groups = groups;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_setMeshTextureCoords',\n\t\t\t\tvalue: function _setMeshTextureCoords() {\n\n\t\t\t\t\tvar endRead = 0;\n\t\t\t\t\tvar mode = 0;\n\t\t\t\t\tvar mode_local = 0;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tswitch ( mode ) {\n\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tif ( mode_local === 0 ) {\n\n\t\t\t\t\t\t\t\t\tvar refO = this._readInt1( 0 );\n\t\t\t\t\t\t\t\t\tendRead = refO.endRead;\n\t\t\t\t\t\t\t\t\tmode_local = 1;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tvar find = this._currentObject.data.indexOf( ',', endRead ) + 1;\n\t\t\t\t\t\t\t\t\tif ( find === 0 ) {\n\n\t\t\t\t\t\t\t\t\t\tfind = this._currentObject.data.length;\n\t\t\t\t\t\t\t\t\t\tmode = 2;\n\t\t\t\t\t\t\t\t\t\tmode_local = 0;\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar line = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\t\t\t\t\tvar data = this._readLine( line.trim() ).split( \";\" );\n\t\t\t\t\t\t\t\t\tif ( this.IsUvYReverse ) {\n\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.uvs.push( parseFloat( data[ 0 ] ), 1 - parseFloat( data[ 1 ] ) );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.uvs.push( parseFloat( data[ 0 ] ), parseFloat( data[ 1 ] ) );\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tendRead = find + 1;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( endRead >= this._currentObject.data.length ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_setMeshMaterialList',\n\t\t\t\tvalue: function _setMeshMaterialList() {\n\n\t\t\t\t\tvar endRead = 0;\n\t\t\t\t\tvar mode = 0;\n\t\t\t\t\tvar mode_local = 0;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tif ( mode_local < 2 ) {\n\n\t\t\t\t\t\t\tvar refO = this._readInt1( endRead );\n\t\t\t\t\t\t\tendRead = refO.endRead;\n\t\t\t\t\t\t\tmode_local ++;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar find = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\t\t\tif ( find === - 1 ) {\n\n\t\t\t\t\t\t\t\tfind = this._currentObject.data.length;\n\t\t\t\t\t\t\t\tmode = 3;\n\t\t\t\t\t\t\t\tmode_local = 0;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar line = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\t\t\tvar data = this._readLine( line.trim() ).split( \",\" );\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.materialIndices[ i ] = parseInt( data[ i ] );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tendRead = this._currentObject.data.length;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( endRead >= this._currentObject.data.length || mode >= 3 ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_setMaterial',\n\t\t\t\tvalue: function _setMaterial() {\n\n\t\t\t\t\tvar _nowMat = new THREE.MeshPhongMaterial( {\n\t\t\t\t\t\tcolor: Math.random() * 0xffffff\n\t\t\t\t\t} );\n\t\t\t\t\t_nowMat.side = THREE.FrontSide;\n\t\t\t\t\t_nowMat.name = this._currentObject.name;\n\t\t\t\t\tvar endRead = 0;\n\t\t\t\t\tvar find = this._currentObject.data.indexOf( ';;', endRead );\n\t\t\t\t\tvar line = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tvar data = this._readLine( line.trim() ).split( \";\" );\n\t\t\t\t\t_nowMat.color.r = parseFloat( data[ 0 ] );\n\t\t\t\t\t_nowMat.color.g = parseFloat( data[ 1 ] );\n\t\t\t\t\t_nowMat.color.b = parseFloat( data[ 2 ] );\n\t\t\t\t\tendRead = find + 2;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tline = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\t_nowMat.shininess = parseFloat( this._readLine( line ) );\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';;', endRead );\n\t\t\t\t\tline = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tvar data2 = this._readLine( line.trim() ).split( \";\" );\n\t\t\t\t\t_nowMat.specular.r = parseFloat( data2[ 0 ] );\n\t\t\t\t\t_nowMat.specular.g = parseFloat( data2[ 1 ] );\n\t\t\t\t\t_nowMat.specular.b = parseFloat( data2[ 2 ] );\n\t\t\t\t\tendRead = find + 2;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';;', endRead );\n\t\t\t\t\tif ( find === - 1 ) {\n\n\t\t\t\t\t\tfind = this._currentObject.data.length;\n\n\t\t\t\t\t}\n\t\t\t\t\tline = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tvar data3 = this._readLine( line.trim() ).split( \";\" );\n\t\t\t\t\t_nowMat.emissive.r = parseFloat( data3[ 0 ] );\n\t\t\t\t\t_nowMat.emissive.g = parseFloat( data3[ 1 ] );\n\t\t\t\t\t_nowMat.emissive.b = parseFloat( data3[ 2 ] );\n\t\t\t\t\tvar localObject = null;\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tif ( this._currentObject.children.length > 0 ) {\n\n\t\t\t\t\t\t\tlocalObject = this._currentObject.children.shift();\n\t\t\t\t\t\t\tif ( this.debug ) {\n\n\t\t\t\t\t\t\t\tconsole.log( 'processing ' + localObject.name );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar fileName = localObject.data.substr( 1, localObject.data.length - 2 );\n\t\t\t\t\t\t\tswitch ( localObject.type ) {\n\n\t\t\t\t\t\t\t\tcase \"TextureFilename\":\n\t\t\t\t\t\t\t\t\t_nowMat.map = this.texloader.load( fileName );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"BumpMapFilename\":\n\t\t\t\t\t\t\t\t\t_nowMat.bumpMap = this.texloader.load( fileName );\n\t\t\t\t\t\t\t\t\t_nowMat.bumpScale = 0.05;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"NormalMapFilename\":\n\t\t\t\t\t\t\t\t\t_nowMat.normalMap = this.texloader.load( fileName );\n\t\t\t\t\t\t\t\t\t_nowMat.normalScale = new THREE.Vector2( 2, 2 );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"EmissiveMapFilename\":\n\t\t\t\t\t\t\t\t\t_nowMat.emissiveMap = this.texloader.load( fileName );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase \"LightMapFilename\":\n\t\t\t\t\t\t\t\t\t_nowMat.lightMap = this.texloader.load( fileName );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tthis._currentGeo.Materials.push( _nowMat );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_setSkinWeights',\n\t\t\t\tvalue: function _setSkinWeights() {\n\n\t\t\t\t\tvar boneInf = new XboneInf();\n\t\t\t\t\tvar endRead = 0;\n\t\t\t\t\tvar find = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tvar line = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tboneInf.boneName = line.substr( 1, line.length - 2 );\n\t\t\t\t\tboneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tline = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tvar data = this._readLine( line.trim() ).split( \",\" );\n\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\tboneInf.Indeces.push( parseInt( data[ i ] ) );\n\n\t\t\t\t\t}\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tline = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tvar data2 = this._readLine( line.trim() ).split( \",\" );\n\t\t\t\t\tfor ( var _i = 0; _i < data2.length; _i ++ ) {\n\n\t\t\t\t\t\tboneInf.Weights.push( parseFloat( data2[ _i ] ) );\n\n\t\t\t\t\t}\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tif ( find <= 0 ) {\n\n\t\t\t\t\t\tfind = this._currentObject.data.length;\n\n\t\t\t\t\t}\n\t\t\t\t\tline = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tvar data3 = this._readLine( line.trim() ).split( \",\" );\n\t\t\t\t\tboneInf.OffsetMatrix = new THREE.Matrix4();\n\t\t\t\t\tthis._ParseMatrixData( boneInf.OffsetMatrix, data3 );\n\t\t\t\t\tthis._currentGeo.BoneInfs.push( boneInf );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_makePutBoneList',\n\t\t\t\tvalue: function _makePutBoneList( _RootName, _bones ) {\n\n\t\t\t\t\tvar putting = false;\n\t\t\t\t\tfor ( var frame in this.HieStack ) {\n\n\t\t\t\t\t\tif ( this.HieStack[ frame ].name === _RootName || putting ) {\n\n\t\t\t\t\t\t\tputting = true;\n\t\t\t\t\t\t\tvar b = new THREE.Bone();\n\t\t\t\t\t\t\tb.name = this.HieStack[ frame ].name;\n\t\t\t\t\t\t\tb.applyMatrix4( this.HieStack[ frame ].FrameTransformMatrix );\n\t\t\t\t\t\t\tb.matrixWorld = b.matrix;\n\t\t\t\t\t\t\tb.FrameTransformMatrix = this.HieStack[ frame ].FrameTransformMatrix;\n\t\t\t\t\t\t\tb.pos = new THREE.Vector3().setFromMatrixPosition( b.FrameTransformMatrix ).toArray();\n\t\t\t\t\t\t\tb.rotq = new THREE.Quaternion().setFromRotationMatrix( b.FrameTransformMatrix ).toArray();\n\t\t\t\t\t\t\tb.scl = new THREE.Vector3().setFromMatrixScale( b.FrameTransformMatrix ).toArray();\n\t\t\t\t\t\t\tif ( this.HieStack[ frame ].parentName && this.HieStack[ frame ].parentName.length > 0 ) {\n\n\t\t\t\t\t\t\t\tfor ( var i = 0; i < _bones.length; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tif ( this.HieStack[ frame ].parentName === _bones[ i ].name ) {\n\n\t\t\t\t\t\t\t\t\t\t_bones[ i ].add( b );\n\t\t\t\t\t\t\t\t\t\tb.parent = i;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_bones.push( b );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_makeOutputGeometry',\n\t\t\t\tvalue: function _makeOutputGeometry() {\n\n\t\t\t\t\tvar mesh = null;\n\t\t\t\t\tif ( this._currentGeo.BoneInfs.length > 0 ) {\n\n\t\t\t\t\t\tvar putBones = [];\n\t\t\t\t\t\tthis._makePutBoneList( this._currentGeo.baseFrame.parentName, putBones );\n\t\t\t\t\t\tfor ( var bi = 0; bi < this._currentGeo.BoneInfs.length; bi ++ ) {\n\n\t\t\t\t\t\t\tvar boneIndex = 0;\n\t\t\t\t\t\t\tfor ( var bb = 0; bb < putBones.length; bb ++ ) {\n\n\t\t\t\t\t\t\t\tif ( putBones[ bb ].name === this._currentGeo.BoneInfs[ bi ].boneName ) {\n\n\t\t\t\t\t\t\t\t\tboneIndex = bb;\n\t\t\t\t\t\t\t\t\tputBones[ bb ].OffsetMatrix = new THREE.Matrix4();\n\t\t\t\t\t\t\t\t\tputBones[ bb ].OffsetMatrix.copy( this._currentGeo.BoneInfs[ bi ].OffsetMatrix );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( var vi = 0; vi < this._currentGeo.BoneInfs[ bi ].Indeces.length; vi ++ ) {\n\n\t\t\t\t\t\t\t\tvar nowVertexID = this._currentGeo.BoneInfs[ bi ].Indeces[ vi ];\n\t\t\t\t\t\t\t\tvar nowVal = this._currentGeo.BoneInfs[ bi ].Weights[ vi ];\n\n\t\t\t\t\t\t\t\tvar stride = nowVertexID * 4;\n\n\t\t\t\t\t\t\t\tswitch ( this._currentGeo.VertexSetedBoneCount[ nowVertexID ] ) {\n\n\t\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinIndices[ stride ] = boneIndex;\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinWeights[ stride ] = nowVal;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinIndices[ stride + 1 ] = boneIndex;\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinWeights[ stride + 1 ] = nowVal;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinIndices[ stride + 2 ] = boneIndex;\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinWeights[ stride + 2 ] = nowVal;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinIndices[ stride + 3 ] = boneIndex;\n\t\t\t\t\t\t\t\t\t\tthis._currentGeo.GeometryData.skinWeights[ stride + 3 ] = nowVal;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis._currentGeo.VertexSetedBoneCount[ nowVertexID ] ++;\n\t\t\t\t\t\t\t\tif ( this._currentGeo.VertexSetedBoneCount[ nowVertexID ] > 4 ) {\n\n\t\t\t\t\t\t\t\t\tconsole.log( 'warn! over 4 bone weight! :' + nowVertexID );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( var sk = 0; sk < this._currentGeo.Materials.length; sk ++ ) {\n\n\t\t\t\t\t\t\tthis._currentGeo.Materials[ sk ].skinning = true;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar offsetList = [];\n\t\t\t\t\t\tfor ( var _bi = 0; _bi < putBones.length; _bi ++ ) {\n\n\t\t\t\t\t\t\tif ( putBones[ _bi ].OffsetMatrix ) {\n\n\t\t\t\t\t\t\t\toffsetList.push( putBones[ _bi ].OffsetMatrix );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\toffsetList.push( new THREE.Matrix4() );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar bufferGeometry = this._buildGeometry();\n\t\t\t\t\t\tmesh = new THREE.SkinnedMesh( bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[ 0 ] : this._currentGeo.Materials );\n\n\t\t\t\t\t\tthis._initSkeleton( mesh, putBones, offsetList );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar _bufferGeometry = this._buildGeometry();\n\t\t\t\t\t\tmesh = new THREE.Mesh( _bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[ 0 ] : this._currentGeo.Materials );\n\n\t\t\t\t\t}\n\t\t\t\t\tmesh.name = this._currentGeo.name;\n\t\t\t\t\tvar worldBaseMx = new THREE.Matrix4();\n\t\t\t\t\tvar currentMxFrame = this._currentGeo.baseFrame.putBone;\n\t\t\t\t\tif ( currentMxFrame && currentMxFrame.parent ) {\n\n\t\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\t\tcurrentMxFrame = currentMxFrame.parent;\n\t\t\t\t\t\t\tif ( currentMxFrame ) {\n\n\t\t\t\t\t\t\t\tworldBaseMx.multiply( currentMxFrame.FrameTransformMatrix );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmesh.applyMatrix4( worldBaseMx );\n\n\t\t\t\t\t}\n\t\t\t\t\tthis.Meshes.push( mesh );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_initSkeleton',\n\t\t\t\tvalue: function _initSkeleton( mesh, boneList, boneInverses ) {\n\n\t\t\t\t\tvar bones = [], bone, gbone;\n\t\t\t\t\tvar i, il;\n\n\t\t\t\t\tfor ( i = 0, il = boneList.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tgbone = boneList[ i ];\n\n\t\t\t\t\t\tbone = new THREE.Bone();\n\t\t\t\t\t\tbones.push( bone );\n\n\t\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0, il = boneList.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tgbone = boneList[ i ];\n\n\t\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmesh.add( bones[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.updateMatrixWorld( true );\n\n\t\t\t\t\tvar skeleton = new THREE.Skeleton( bones, boneInverses );\n\t\t\t\t\tmesh.bind( skeleton, mesh.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t}, {\n\t\t\t\tkey: '_readAnimationKey',\n\t\t\t\tvalue: function _readAnimationKey() {\n\n\t\t\t\t\tvar endRead = 0;\n\t\t\t\t\tvar find = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tvar line = this._currentObject.data.substr( endRead, find - endRead );\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tvar nowKeyType = parseInt( this._readLine( line ) );\n\t\t\t\t\tfind = this._currentObject.data.indexOf( ';', endRead );\n\t\t\t\t\tendRead = find + 1;\n\t\t\t\t\tline = this._currentObject.data.substr( endRead );\n\t\t\t\t\tvar data = this._readLine( line.trim() ).split( \";;,\" );\n\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\tvar data2 = data[ i ].split( \";\" );\n\t\t\t\t\t\tvar keyInfo = new XKeyFrameInfo();\n\t\t\t\t\t\tkeyInfo.type = nowKeyType;\n\t\t\t\t\t\tkeyInfo.Frame = parseInt( data2[ 0 ] );\n\t\t\t\t\t\tkeyInfo.index = this._currentAnimeFrames.keyFrames.length;\n\t\t\t\t\t\tkeyInfo.time = keyInfo.Frame;\n\t\t\t\t\t\tif ( nowKeyType != 4 ) {\n\n\t\t\t\t\t\t\tvar frameFound = false;\n\t\t\t\t\t\t\tfor ( var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm ++ ) {\n\n\t\t\t\t\t\t\t\tif ( this._currentAnimeFrames.keyFrames[ mm ].Frame === keyInfo.Frame ) {\n\n\t\t\t\t\t\t\t\t\tkeyInfo = this._currentAnimeFrames.keyFrames[ mm ];\n\t\t\t\t\t\t\t\t\tframeFound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar frameValue = data2[ 2 ].split( \",\" );\n\t\t\t\t\t\t\tswitch ( nowKeyType ) {\n\n\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\tkeyInfo.rot = new THREE.Quaternion( parseFloat( frameValue[ 1 ] ), parseFloat( frameValue[ 2 ] ), parseFloat( frameValue[ 3 ] ), parseFloat( frameValue[ 0 ] ) * - 1 );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\tkeyInfo.scl = new THREE.Vector3( parseFloat( frameValue[ 0 ] ), parseFloat( frameValue[ 1 ] ), parseFloat( frameValue[ 2 ] ) );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tkeyInfo.pos = new THREE.Vector3( parseFloat( frameValue[ 0 ] ), parseFloat( frameValue[ 1 ] ), parseFloat( frameValue[ 2 ] ) );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( ! frameFound ) {\n\n\t\t\t\t\t\t\t\tthis._currentAnimeFrames.keyFrames.push( keyInfo );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tkeyInfo.matrix = new THREE.Matrix4();\n\t\t\t\t\t\t\tthis._ParseMatrixData( keyInfo.matrix, data2[ 2 ].split( \",\" ) );\n\t\t\t\t\t\t\tthis._currentAnimeFrames.keyFrames.push( keyInfo );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_makeOutputAnimation',\n\t\t\t\tvalue: function _makeOutputAnimation() {\n\n\t\t\t\t\tvar animationObj = new XAnimationObj( this.options );\n\t\t\t\t\tanimationObj.fps = this.animTicksPerSecond;\n\t\t\t\t\tanimationObj.name = this._currentAnime.name;\n\t\t\t\t\tanimationObj.make( this._currentAnime.AnimeFrames );\n\t\t\t\t\tthis.animations.push( animationObj );\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: 'assignAnimation',\n\t\t\t\tvalue: function assignAnimation( _model, _animation ) {\n\n\t\t\t\t\tvar model = _model;\n\t\t\t\t\tvar animation = _animation;\n\t\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\t\tmodel = this.Meshes[ 0 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! animation ) {\n\n\t\t\t\t\t\tanimation = this.animations[ 0 ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! model || ! animation ) {\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar put = {};\n\t\t\t\t\tput.fps = animation.fps;\n\t\t\t\t\tput.name = animation.name;\n\t\t\t\t\tput.length = animation.length;\n\t\t\t\t\tput.hierarchy = [];\n\t\t\t\t\tfor ( var b = 0; b < model.skeleton.bones.length; b ++ ) {\n\n\t\t\t\t\t\tvar findAnimation = false;\n\t\t\t\t\t\tfor ( var i = 0; i < animation.hierarchy.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( model.skeleton.bones[ b ].name === animation.hierarchy[ i ].name ) {\n\n\t\t\t\t\t\t\t\tfindAnimation = true;\n\t\t\t\t\t\t\t\tvar c_key = animation.hierarchy[ i ].copy();\n\t\t\t\t\t\t\t\tc_key.parent = - 1;\n\t\t\t\t\t\t\t\tif ( model.skeleton.bones[ b ].parent && model.skeleton.bones[ b ].parent.type === \"Bone\" ) {\n\n\t\t\t\t\t\t\t\t\tfor ( var bb = 0; bb < put.hierarchy.length; bb ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( put.hierarchy[ bb ].name === model.skeleton.bones[ b ].parent.name ) {\n\n\t\t\t\t\t\t\t\t\t\t\tc_key.parent = bb;\n\t\t\t\t\t\t\t\t\t\t\tc_key.parentName = model.skeleton.bones[ b ].parent.name;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tput.hierarchy.push( c_key );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ! findAnimation ) {\n\n\t\t\t\t\t\t\tvar _c_key = animation.hierarchy[ 0 ].copy();\n\t\t\t\t\t\t\t_c_key.name = model.skeleton.bones[ b ].name;\n\t\t\t\t\t\t\t_c_key.parent = - 1;\n\t\t\t\t\t\t\tfor ( var k = 0; k < _c_key.keys.length; k ++ ) {\n\n\t\t\t\t\t\t\t\tif ( _c_key.keys[ k ].pos ) {\n\n\t\t\t\t\t\t\t\t\t_c_key.keys[ k ].pos.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( _c_key.keys[ k ].scl ) {\n\n\t\t\t\t\t\t\t\t\t_c_key.keys[ k ].scl.set( 1, 1, 1 );\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( _c_key.keys[ k ].rot ) {\n\n\t\t\t\t\t\t\t\t\t_c_key.keys[ k ].rot.set( 0, 0, 0, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tput.hierarchy.push( _c_key );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! model.geometry.animations ) {\n\n\t\t\t\t\t\tmodel.geometry.animations = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.geometry.animations.push( THREE.AnimationClip.parseAnimation( put, model.skeleton.bones ) );\n\t\t\t\t\tif ( ! model.animationMixer ) {\n\n\t\t\t\t\t\tmodel.animationMixer = new THREE.AnimationMixer( model );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn put;\n\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tkey: '_ParseMatrixData',\n\t\t\t\tvalue: function _ParseMatrixData( targetMatrix, data ) {\n\n\t\t\t\t\ttargetMatrix.set( parseFloat( data[ 0 ] ), parseFloat( data[ 4 ] ), parseFloat( data[ 8 ] ), parseFloat( data[ 12 ] ), parseFloat( data[ 1 ] ), parseFloat( data[ 5 ] ), parseFloat( data[ 9 ] ), parseFloat( data[ 13 ] ), parseFloat( data[ 2 ] ), parseFloat( data[ 6 ] ), parseFloat( data[ 10 ] ), parseFloat( data[ 14 ] ), parseFloat( data[ 3 ] ), parseFloat( data[ 7 ] ), parseFloat( data[ 11 ] ), parseFloat( data[ 15 ] ) );\n\n\t\t\t\t}\n\t\t\t} ] );\n\t\t\treturn XLoader;\n\n\t\t}();\n\n\t\treturn XLoader;\n\n\t} )();\n\t\n\treturn THREE.XLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/DDSLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.DDSLoader = function ( manager ) {\n\n\t\tTHREE.CompressedTextureLoader.call( this, manager );\n\n\t};\n\n\tTHREE.DDSLoader.prototype = Object.assign( Object.create( THREE.CompressedTextureLoader.prototype ), {\n\n\t\tconstructor: THREE.DDSLoader,\n\n\t\tparse: function ( buffer, loadMipmaps ) {\n\n\t\t\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n\n\t\t\t// Adapted from @toji's DDS utils\n\t\t\t// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n\n\t\t\t// All values and structures referenced from:\n\t\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n\t\t\tvar DDS_MAGIC = 0x20534444;\n\n\t\t\tvar DDSD_CAPS = 0x1,\n\t\t\t\tDDSD_HEIGHT = 0x2,\n\t\t\t\tDDSD_WIDTH = 0x4,\n\t\t\t\tDDSD_PITCH = 0x8,\n\t\t\t\tDDSD_PIXELFORMAT = 0x1000,\n\t\t\t\tDDSD_MIPMAPCOUNT = 0x20000,\n\t\t\t\tDDSD_LINEARSIZE = 0x80000,\n\t\t\t\tDDSD_DEPTH = 0x800000;\n\n\t\t\tvar DDSCAPS_COMPLEX = 0x8,\n\t\t\t\tDDSCAPS_MIPMAP = 0x400000,\n\t\t\t\tDDSCAPS_TEXTURE = 0x1000;\n\n\t\t\tvar DDSCAPS2_CUBEMAP = 0x200,\n\t\t\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n\t\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n\t\t\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n\t\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n\t\t\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n\t\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\n\t\t\t\tDDSCAPS2_VOLUME = 0x200000;\n\n\t\t\tvar DDPF_ALPHAPIXELS = 0x1,\n\t\t\t\tDDPF_ALPHA = 0x2,\n\t\t\t\tDDPF_FOURCC = 0x4,\n\t\t\t\tDDPF_RGB = 0x40,\n\t\t\t\tDDPF_YUV = 0x200,\n\t\t\t\tDDPF_LUMINANCE = 0x20000;\n\n\t\t\tfunction fourCCToInt32( value ) {\n\n\t\t\t\treturn value.charCodeAt( 0 ) +\n\t\t\t\t\t( value.charCodeAt( 1 ) << 8 ) +\n\t\t\t\t\t( value.charCodeAt( 2 ) << 16 ) +\n\t\t\t\t\t( value.charCodeAt( 3 ) << 24 );\n\n\t\t\t}\n\n\t\t\tfunction int32ToFourCC( value ) {\n\n\t\t\t\treturn String.fromCharCode(\n\t\t\t\t\tvalue & 0xff,\n\t\t\t\t\t( value >> 8 ) & 0xff,\n\t\t\t\t\t( value >> 16 ) & 0xff,\n\t\t\t\t\t( value >> 24 ) & 0xff\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tfunction loadARGBMip( buffer, dataOffset, width, height ) {\n\n\t\t\t\tvar dataLength = width * height * 4;\n\t\t\t\tvar srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );\n\t\t\t\tvar byteArray = new Uint8Array( dataLength );\n\t\t\t\tvar dst = 0;\n\t\t\t\tvar src = 0;\n\t\t\t\tfor ( var y = 0; y < height; y ++ ) {\n\n\t\t\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\t\t\tvar b = srcBuffer[ src ]; src ++;\n\t\t\t\t\t\tvar g = srcBuffer[ src ]; src ++;\n\t\t\t\t\t\tvar r = srcBuffer[ src ]; src ++;\n\t\t\t\t\t\tvar a = srcBuffer[ src ]; src ++;\n\t\t\t\t\t\tbyteArray[ dst ] = r; dst ++;\t//r\n\t\t\t\t\t\tbyteArray[ dst ] = g; dst ++;\t//g\n\t\t\t\t\t\tbyteArray[ dst ] = b; dst ++;\t//b\n\t\t\t\t\t\tbyteArray[ dst ] = a; dst ++;\t//a\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn byteArray;\n\n\t\t\t}\n\n\t\t\tvar FOURCC_DXT1 = fourCCToInt32( \"DXT1\" );\n\t\t\tvar FOURCC_DXT3 = fourCCToInt32( \"DXT3\" );\n\t\t\tvar FOURCC_DXT5 = fourCCToInt32( \"DXT5\" );\n\t\t\tvar FOURCC_ETC1 = fourCCToInt32( \"ETC1\" );\n\n\t\t\tvar headerLengthInt = 31; // The header length in 32 bit ints\n\n\t\t\t// Offsets into the header array\n\n\t\t\tvar off_magic = 0;\n\n\t\t\tvar off_size = 1;\n\t\t\tvar off_flags = 2;\n\t\t\tvar off_height = 3;\n\t\t\tvar off_width = 4;\n\n\t\t\tvar off_mipmapCount = 7;\n\n\t\t\tvar off_pfFlags = 20;\n\t\t\tvar off_pfFourCC = 21;\n\t\t\tvar off_RGBBitCount = 22;\n\t\t\tvar off_RBitMask = 23;\n\t\t\tvar off_GBitMask = 24;\n\t\t\tvar off_BBitMask = 25;\n\t\t\tvar off_ABitMask = 26;\n\n\t\t\tvar off_caps = 27;\n\t\t\tvar off_caps2 = 28;\n\t\t\tvar off_caps3 = 29;\n\t\t\tvar off_caps4 = 30;\n\n\t\t\t// Parse header\n\n\t\t\tvar header = new Int32Array( buffer, 0, headerLengthInt );\n\n\t\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\n\n\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Invalid magic number in DDS header.' );\n\t\t\t\treturn dds;\n\n\t\t\t}\n\n\t\t\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\n\n\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.' );\n\t\t\t\treturn dds;\n\n\t\t\t}\n\n\t\t\tvar blockBytes;\n\n\t\t\tvar fourCC = header[ off_pfFourCC ];\n\n\t\t\tvar isRGBAUncompressed = false;\n\n\t\t\tswitch ( fourCC ) {\n\n\t\t\t\tcase FOURCC_DXT1:\n\n\t\t\t\t\tblockBytes = 8;\n\t\t\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FOURCC_DXT3:\n\n\t\t\t\t\tblockBytes = 16;\n\t\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FOURCC_DXT5:\n\n\t\t\t\t\tblockBytes = 16;\n\t\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FOURCC_ETC1:\n\n\t\t\t\t\tblockBytes = 8;\n\t\t\t\t\tdds.format = THREE.RGB_ETC1_Format;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( header[ off_RGBBitCount ] === 32\n\t\t\t\t\t\t&& header[ off_RBitMask ] & 0xff0000\n\t\t\t\t\t\t&& header[ off_GBitMask ] & 0xff00\n\t\t\t\t\t\t&& header[ off_BBitMask ] & 0xff\n\t\t\t\t\t\t&& header[ off_ABitMask ] & 0xff000000 ) {\n\n\t\t\t\t\t\tisRGBAUncompressed = true;\n\t\t\t\t\t\tblockBytes = 64;\n\t\t\t\t\t\tdds.format = THREE.RGBAFormat;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC( fourCC ) );\n\t\t\t\t\t\treturn dds;\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdds.mipmapCount = 1;\n\n\t\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\n\n\t\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\n\n\t\t\t}\n\n\t\t\tvar caps2 = header[ off_caps2 ];\n\t\t\tdds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\t\t\tif ( dds.isCubemap && (\n\t\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) ||\n\t\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) ||\n\t\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) ||\n\t\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) ||\n\t\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) ||\n\t\t\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ )\n\t\t\t) ) {\n\n\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Incomplete cubemap faces' );\n\t\t\t\treturn dds;\n\n\t\t\t}\n\n\t\t\tdds.width = header[ off_width ];\n\t\t\tdds.height = header[ off_height ];\n\n\t\t\tvar dataOffset = header[ off_size ] + 4;\n\n\t\t\t// Extract mipmaps buffers\n\n\t\t\tvar faces = dds.isCubemap ? 6 : 1;\n\n\t\t\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\t\t\tvar width = dds.width;\n\t\t\t\tvar height = dds.height;\n\n\t\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n\t\t\t\t\tif ( isRGBAUncompressed ) {\n\n\t\t\t\t\t\tvar byteArray = loadARGBMip( buffer, dataOffset, width, height );\n\t\t\t\t\t\tvar dataLength = byteArray.length;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\n\t\t\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataLength );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\n\t\t\t\t\tdds.mipmaps.push( mipmap );\n\n\t\t\t\t\tdataOffset += dataLength;\n\n\t\t\t\t\twidth = Math.max( width >> 1, 1 );\n\t\t\t\t\theight = Math.max( height >> 1, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dds;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.DDSLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/PVRLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/*\n\t *\t PVRLoader\n\t *   Author: pierre lepers\n\t *   Date: 17/09/2014 11:09\n\t *\n\t *\t PVR v2 (legacy) parser\n\t *   TODO : Add Support for PVR v3 format\n\t *   TODO : implement loadMipmaps option\n\t */\n\n\tTHREE.PVRLoader = function ( manager ) {\n\n\t\tTHREE.CompressedTextureLoader.call( this, manager );\n\n\t};\n\n\tTHREE.PVRLoader.prototype = Object.assign( Object.create( THREE.CompressedTextureLoader.prototype ), {\n\n\t\tconstructor: THREE.PVRLoader,\n\n\t\tparse: function ( buffer, loadMipmaps ) {\n\n\t\t\tvar headerLengthInt = 13;\n\t\t\tvar header = new Uint32Array( buffer, 0, headerLengthInt );\n\n\t\t\tvar pvrDatas = {\n\t\t\t\tbuffer: buffer,\n\t\t\t\theader: header,\n\t\t\t\tloadMipmaps: loadMipmaps\n\t\t\t};\n\n\t\t\tif ( header[ 0 ] === 0x03525650 ) {\n\n\t\t\t\t// PVR v3\n\n\t\t\t\treturn THREE.PVRLoader._parseV3( pvrDatas );\n\n\t\t\t} else if ( header[ 11 ] === 0x21525650 ) {\n\n\t\t\t\t// PVR v2\n\n\t\t\t\treturn THREE.PVRLoader._parseV2( pvrDatas );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.PVRLoader: Unknown PVR format.' );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tTHREE.PVRLoader._parseV3 = function ( pvrDatas ) {\n\n\t\tvar header = pvrDatas.header;\n\t\tvar bpp, format;\n\n\n\t\tvar metaLen = header[ 12 ],\n\t\t\tpixelFormat = header[ 2 ],\n\t\t\theight = header[ 6 ],\n\t\t\twidth = header[ 7 ],\n\t\t\t// numSurfs = header[ 9 ],\n\t\t\tnumFaces = header[ 10 ],\n\t\t\tnumMipmaps = header[ 11 ];\n\n\t\tswitch ( pixelFormat ) {\n\n\t\t\tcase 0 : // PVRTC 2bpp RGB\n\t\t\t\tbpp = 2;\n\t\t\t\tformat = THREE.RGB_PVRTC_2BPPV1_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase 1 : // PVRTC 2bpp RGBA\n\t\t\t\tbpp = 2;\n\t\t\t\tformat = THREE.RGBA_PVRTC_2BPPV1_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase 2 : // PVRTC 4bpp RGB\n\t\t\t\tbpp = 4;\n\t\t\t\tformat = THREE.RGB_PVRTC_4BPPV1_Format;\n\t\t\t\tbreak;\n\n\t\t\tcase 3 : // PVRTC 4bpp RGBA\n\t\t\t\tbpp = 4;\n\t\t\t\tformat = THREE.RGBA_PVRTC_4BPPV1_Format;\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tconsole.error( 'THREE.PVRLoader: Unsupported PVR format:', pixelFormat );\n\n\t\t}\n\n\t\tpvrDatas.dataPtr = 52 + metaLen;\n\t\tpvrDatas.bpp = bpp;\n\t\tpvrDatas.format = format;\n\t\tpvrDatas.width = width;\n\t\tpvrDatas.height = height;\n\t\tpvrDatas.numSurfaces = numFaces;\n\t\tpvrDatas.numMipmaps = numMipmaps;\n\t\tpvrDatas.isCubemap \t= ( numFaces === 6 );\n\n\t\treturn THREE.PVRLoader._extract( pvrDatas );\n\n\t};\n\n\tTHREE.PVRLoader._parseV2 = function ( pvrDatas ) {\n\n\t\tvar header = pvrDatas.header;\n\n\t\tvar headerLength = header[ 0 ],\n\t\t\theight = header[ 1 ],\n\t\t\twidth = header[ 2 ],\n\t\t\tnumMipmaps = header[ 3 ],\n\t\t\tflags = header[ 4 ],\n\t\t\t// dataLength = header[ 5 ],\n\t\t\t// bpp =  header[ 6 ],\n\t\t\t// bitmaskRed = header[ 7 ],\n\t\t\t// bitmaskGreen = header[ 8 ],\n\t\t\t// bitmaskBlue = header[ 9 ],\n\t\t\tbitmaskAlpha = header[ 10 ],\n\t\t\t// pvrTag = header[ 11 ],\n\t\t\tnumSurfs = header[ 12 ];\n\n\n\t\tvar TYPE_MASK = 0xff;\n\t\tvar PVRTC_2 = 24,\n\t\t\tPVRTC_4 = 25;\n\n\t\tvar formatFlags = flags & TYPE_MASK;\n\n\t\tvar bpp, format;\n\t\tvar _hasAlpha = bitmaskAlpha > 0;\n\n\t\tif ( formatFlags === PVRTC_4 ) {\n\n\t\t\tformat = _hasAlpha ? THREE.RGBA_PVRTC_4BPPV1_Format : THREE.RGB_PVRTC_4BPPV1_Format;\n\t\t\tbpp = 4;\n\n\t\t} else if ( formatFlags === PVRTC_2 ) {\n\n\t\t\tformat = _hasAlpha ? THREE.RGBA_PVRTC_2BPPV1_Format : THREE.RGB_PVRTC_2BPPV1_Format;\n\t\t\tbpp = 2;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.PVRLoader: Unknown PVR format:', formatFlags );\n\n\t\t}\n\n\t\tpvrDatas.dataPtr = headerLength;\n\t\tpvrDatas.bpp = bpp;\n\t\tpvrDatas.format = format;\n\t\tpvrDatas.width = width;\n\t\tpvrDatas.height = height;\n\t\tpvrDatas.numSurfaces = numSurfs;\n\t\tpvrDatas.numMipmaps = numMipmaps + 1;\n\n\t\t// guess cubemap type seems tricky in v2\n\t\t// it juste a pvr containing 6 surface (no explicit cubemap type)\n\t\tpvrDatas.isCubemap \t= ( numSurfs === 6 );\n\n\t\treturn THREE.PVRLoader._extract( pvrDatas );\n\n\t};\n\n\n\tTHREE.PVRLoader._extract = function ( pvrDatas ) {\n\n\t\tvar pvr = {\n\t\t\tmipmaps: [],\n\t\t\twidth: pvrDatas.width,\n\t\t\theight: pvrDatas.height,\n\t\t\tformat: pvrDatas.format,\n\t\t\tmipmapCount: pvrDatas.numMipmaps,\n\t\t\tisCubemap: pvrDatas.isCubemap\n\t\t};\n\n\t\tvar buffer = pvrDatas.buffer;\n\n\t\tvar dataOffset = pvrDatas.dataPtr,\n\t\t\tbpp = pvrDatas.bpp,\n\t\t\tnumSurfs = pvrDatas.numSurfaces,\n\t\t\tdataSize = 0,\n\t\t\tblockSize = 0,\n\t\t\tblockWidth = 0,\n\t\t\tblockHeight = 0,\n\t\t\twidthBlocks = 0,\n\t\t\theightBlocks = 0;\n\n\t\tif ( bpp === 2 ) {\n\n\t\t\tblockWidth = 8;\n\t\t\tblockHeight = 4;\n\n\t\t} else {\n\n\t\t\tblockWidth = 4;\n\t\t\tblockHeight = 4;\n\n\t\t}\n\n\t\tblockSize = ( blockWidth * blockHeight ) * bpp / 8;\n\n\t\tpvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n\n\t\tvar mipLevel = 0;\n\n\t\twhile ( mipLevel < pvrDatas.numMipmaps ) {\n\n\t\t\tvar sWidth = pvrDatas.width >> mipLevel,\n\t\t\t\tsHeight = pvrDatas.height >> mipLevel;\n\n\t\t\twidthBlocks = sWidth / blockWidth;\n\t\t\theightBlocks = sHeight / blockHeight;\n\n\t\t\t// Clamp to minimum number of blocks\n\t\t\tif ( widthBlocks < 2 ) widthBlocks = 2;\n\t\t\tif ( heightBlocks < 2 ) heightBlocks = 2;\n\n\t\t\tdataSize = widthBlocks * heightBlocks * blockSize;\n\n\t\t\tfor ( var surfIndex = 0; surfIndex < numSurfs; surfIndex ++ ) {\n\n\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataSize );\n\n\t\t\t\tvar mipmap = {\n\t\t\t\t\tdata: byteArray,\n\t\t\t\t\twidth: sWidth,\n\t\t\t\t\theight: sHeight\n\t\t\t\t};\n\n\t\t\t\tpvr.mipmaps[ surfIndex * pvrDatas.numMipmaps + mipLevel ] = mipmap;\n\n\t\t\t\tdataOffset += dataSize;\n\n\t\t\t}\n\n\t\t\tmipLevel ++;\n\n\t\t}\n\n\t\treturn pvr;\n\n\t};\n\t\n\treturn THREE.PVRLoader;\n});\n\ndefine('skylark-threejs-ex/loaders/KTXLoader',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author amakaseev / https://github.com/amakaseev\n\t *\n\t * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n\t * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n\t *\n\t * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n\t */\n\n\n\tTHREE.KTXLoader = function ( manager ) {\n\n\t\tTHREE.CompressedTextureLoader.call( this, manager );\n\n\t};\n\n\tTHREE.KTXLoader.prototype = Object.assign( Object.create( THREE.CompressedTextureLoader.prototype ), {\n\n\t\tconstructor: THREE.KTXLoader,\n\n\t\tparse: function ( buffer, loadMipmaps ) {\n\n\t\t\tvar ktx = new KhronosTextureContainer( buffer, 1 );\n\n\t\t\treturn {\n\t\t\t\tmipmaps: ktx.mipmaps( loadMipmaps ),\n\t\t\t\twidth: ktx.pixelWidth,\n\t\t\t\theight: ktx.pixelHeight,\n\t\t\t\tformat: ktx.glInternalFormat,\n\t\t\t\tisCubemap: ktx.numberOfFaces === 6,\n\t\t\t\tmipmapCount: ktx.numberOfMipmapLevels\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\tvar KhronosTextureContainer = ( function () {\n\n\t\t/**\n\t\t * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n\t\t * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n\t\t * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n\t\t * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n\t\t */\n\t\tfunction KhronosTextureContainer( arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */ ) {\n\n\t\t\tthis.arrayBuffer = arrayBuffer;\n\n\t\t\t// Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n\t\t\t// '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t\t\t// 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\t\t\tvar identifier = new Uint8Array( this.arrayBuffer, 0, 12 );\n\t\t\tif ( identifier[ 0 ] !== 0xAB ||\n\t\t\t\tidentifier[ 1 ] !== 0x4B ||\n\t\t\t\tidentifier[ 2 ] !== 0x54 ||\n\t\t\t\tidentifier[ 3 ] !== 0x58 ||\n\t\t\t\tidentifier[ 4 ] !== 0x20 ||\n\t\t\t\tidentifier[ 5 ] !== 0x31 ||\n\t\t\t\tidentifier[ 6 ] !== 0x31 ||\n\t\t\t\tidentifier[ 7 ] !== 0xBB ||\n\t\t\t\tidentifier[ 8 ] !== 0x0D ||\n\t\t\t\tidentifier[ 9 ] !== 0x0A ||\n\t\t\t\tidentifier[ 10 ] !== 0x1A ||\n\t\t\t\tidentifier[ 11 ] !== 0x0A ) {\n\n\t\t\t\tconsole.error( 'texture missing KTX identifier' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// load the reset of the header in native 32 bit uint\n\t\t\tvar dataSize = Uint32Array.BYTES_PER_ELEMENT;\n\t\t\tvar headerDataView = new DataView( this.arrayBuffer, 12, 13 * dataSize );\n\t\t\tvar endianness = headerDataView.getUint32( 0, true );\n\t\t\tvar littleEndian = endianness === 0x04030201;\n\n\t\t\tthis.glType = headerDataView.getUint32( 1 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\t\tthis.glTypeSize = headerDataView.getUint32( 2 * dataSize, littleEndian ); // must be 1 for compressed textures\n\t\t\tthis.glFormat = headerDataView.getUint32( 3 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\t\tthis.glInternalFormat = headerDataView.getUint32( 4 * dataSize, littleEndian ); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\t\t\tthis.glBaseInternalFormat = headerDataView.getUint32( 5 * dataSize, littleEndian ); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\t\t\tthis.pixelWidth = headerDataView.getUint32( 6 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\t\t\tthis.pixelHeight = headerDataView.getUint32( 7 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\t\t\tthis.pixelDepth = headerDataView.getUint32( 8 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\t\t\tthis.numberOfArrayElements = headerDataView.getUint32( 9 * dataSize, littleEndian ); // used for texture arrays\n\t\t\tthis.numberOfFaces = headerDataView.getUint32( 10 * dataSize, littleEndian ); // used for cubemap textures, should either be 1 or 6\n\t\t\tthis.numberOfMipmapLevels = headerDataView.getUint32( 11 * dataSize, littleEndian ); // number of levels; disregard possibility of 0 for compressed textures\n\t\t\tthis.bytesOfKeyValueData = headerDataView.getUint32( 12 * dataSize, littleEndian ); // the amount of space after the header for meta-data\n\n\t\t\t// Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\t\t\tif ( this.glType !== 0 ) {\n\n\t\t\t\tconsole.warn( 'only compressed formats currently supported' );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n\t\t\t\tthis.numberOfMipmapLevels = Math.max( 1, this.numberOfMipmapLevels );\n\n\t\t\t}\n\t\t\tif ( this.pixelHeight === 0 || this.pixelDepth !== 0 ) {\n\n\t\t\t\tconsole.warn( 'only 2D textures currently supported' );\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\tif ( this.numberOfArrayElements !== 0 ) {\n\n\t\t\t\tconsole.warn( 'texture arrays not currently supported' );\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\tif ( this.numberOfFaces !== facesExpected ) {\n\n\t\t\t\tconsole.warn( 'number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces );\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\t// we now have a completely validated file, so could use existence of loadType as success\n\t\t\t// would need to make this more elaborate & adjust checks above to support more than one load type\n\t\t\tthis.loadType = KhronosTextureContainer.COMPRESSED_2D;\n\n\t\t}\n\n\t\t// return mipmaps for THREE.js\n\t\tKhronosTextureContainer.prototype.mipmaps = function ( loadMipmaps ) {\n\n\t\t\tvar mipmaps = [];\n\n\t\t\t// initialize width & height for level 1\n\t\t\tvar dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n\t\t\tvar width = this.pixelWidth;\n\t\t\tvar height = this.pixelHeight;\n\t\t\tvar mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n\t\t\tfor ( var level = 0; level < mipmapCount; level ++ ) {\n\n\t\t\t\tvar imageSize = new Int32Array( this.arrayBuffer, dataOffset, 1 )[ 0 ]; // size per face, since not supporting array cubemaps\n\t\t\t\tdataOffset += 4; // size of the image + 4 for the imageSize field\n\n\t\t\t\tfor ( var face = 0; face < this.numberOfFaces; face ++ ) {\n\n\t\t\t\t\tvar byteArray = new Uint8Array( this.arrayBuffer, dataOffset, imageSize );\n\n\t\t\t\t\tmipmaps.push( { \"data\": byteArray, \"width\": width, \"height\": height } );\n\n\t\t\t\t\tdataOffset += imageSize;\n\t\t\t\t\tdataOffset += 3 - ( ( imageSize + 3 ) % 4 ); // add padding for odd sized image\n\n\t\t\t\t}\n\t\t\t\twidth = Math.max( 1.0, width * 0.5 );\n\t\t\t\theight = Math.max( 1.0, height * 0.5 );\n\n\t\t\t}\n\n\t\t\treturn mipmaps;\n\n\t\t};\n\n\t\tKhronosTextureContainer.HEADER_LEN = 12 + ( 13 * 4 ); // identifier + header elements (not including key value meta-data pairs)\n\t\t// load types\n\t\tKhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\t\tKhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\t\tKhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\t\tKhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n\t\treturn KhronosTextureContainer;\n\n\t}() );\n\n\t\n\treturn THREE.KTXLoader;\n});\n\ndefine('skylark-threejs-ex/modifiers/SimplifyModifier',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n\t *\n\t *\tSimplification Geometry Modifier\n\t *    - based on code and technique\n\t *\t  - by Stan Melax in 1998\n\t *\t  - Progressive Mesh type Polygon Reduction Algorithm\n\t *    - http://www.melax.com/polychop/\n\t */\n\n\tTHREE.SimplifyModifier = function () {};\n\n\t( function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfunction pushIfUnique( array, object ) {\n\n\t\t\tif ( array.indexOf( object ) === - 1 ) array.push( object );\n\n\t\t}\n\n\t\tfunction removeFromArray( array, object ) {\n\n\t\t\tvar k = array.indexOf( object );\n\t\t\tif ( k > - 1 ) array.splice( k, 1 );\n\n\t\t}\n\n\t\tfunction computeEdgeCollapseCost( u, v ) {\n\n\t\t\t// if we collapse edge uv by moving u to v then how\n\t\t\t// much different will the model change, i.e. the \"error\".\n\n\t\t\tvar edgelength = v.position.distanceTo( u.position );\n\t\t\tvar curvature = 0;\n\n\t\t\tvar sideFaces = [];\n\t\t\tvar i, il = u.faces.length, face, sideFace;\n\n\t\t\t// find the \"sides\" triangles that are on the edge uv\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tface = u.faces[ i ];\n\n\t\t\t\tif ( face.hasVertex( v ) ) {\n\n\t\t\t\t\tsideFaces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use the triangle facing most away from the sides\n\t\t\t// to determine our curvature term\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tvar minCurvature = 1;\n\t\t\t\tface = u.faces[ i ];\n\n\t\t\t\tfor ( var j = 0; j < sideFaces.length; j ++ ) {\n\n\t\t\t\t\tsideFace = sideFaces[ j ];\n\t\t\t\t\t// use dot product of face normals.\n\t\t\t\t\tvar dotProd = face.normal.dot( sideFace.normal );\n\t\t\t\t\tminCurvature = Math.min( minCurvature, ( 1.001 - dotProd ) / 2 );\n\n\t\t\t\t}\n\n\t\t\t\tcurvature = Math.max( curvature, minCurvature );\n\n\t\t\t}\n\n\t\t\t// crude approach in attempt to preserve borders\n\t\t\t// though it seems not to be totally correct\n\t\t\tvar borders = 0;\n\t\t\tif ( sideFaces.length < 2 ) {\n\n\t\t\t\t// we add some arbitrary cost for borders,\n\t\t\t\t// borders += 10;\n\t\t\t\tcurvature = 1;\n\n\t\t\t}\n\n\t\t\tvar amt = edgelength * curvature + borders;\n\n\t\t\treturn amt;\n\n\t\t}\n\n\t\tfunction computeEdgeCostAtVertex( v ) {\n\n\t\t\t// compute the edge collapse cost for all edges that start\n\t\t\t// from vertex v.  Since we are only interested in reducing\n\t\t\t// the object by selecting the min cost edge at each step, we\n\t\t\t// only cache the cost of the least cost edge at this vertex\n\t\t\t// (in member variable collapse) as well as the value of the\n\t\t\t// cost (in member variable collapseCost).\n\n\t\t\tif ( v.neighbors.length === 0 ) {\n\n\t\t\t\t// collapse if no neighbors.\n\t\t\t\tv.collapseNeighbor = null;\n\t\t\t\tv.collapseCost = - 0.01;\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tv.collapseCost = 100000;\n\t\t\tv.collapseNeighbor = null;\n\n\t\t\t// search all neighboring edges for \"least cost\" edge\n\t\t\tfor ( var i = 0; i < v.neighbors.length; i ++ ) {\n\n\t\t\t\tvar collapseCost = computeEdgeCollapseCost( v, v.neighbors[ i ] );\n\n\t\t\t\tif ( ! v.collapseNeighbor ) {\n\n\t\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\t\tv.collapseCost = collapseCost;\n\t\t\t\t\tv.minCost = collapseCost;\n\t\t\t\t\tv.totalCost = 0;\n\t\t\t\t\tv.costCount = 0;\n\n\t\t\t\t}\n\n\t\t\t\tv.costCount ++;\n\t\t\t\tv.totalCost += collapseCost;\n\n\t\t\t\tif ( collapseCost < v.minCost ) {\n\n\t\t\t\t\tv.collapseNeighbor = v.neighbors[ i ];\n\t\t\t\t\tv.minCost = collapseCost;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// we average the cost of collapsing at this vertex\n\t\t\tv.collapseCost = v.totalCost / v.costCount;\n\t\t\t// v.collapseCost = v.minCost;\n\n\t\t}\n\n\t\tfunction removeVertex( v, vertices ) {\n\n\t\t\tconsole.assert( v.faces.length === 0 );\n\n\t\t\twhile ( v.neighbors.length ) {\n\n\t\t\t\tvar n = v.neighbors.pop();\n\t\t\t\tremoveFromArray( n.neighbors, v );\n\n\t\t\t}\n\n\t\t\tremoveFromArray( vertices, v );\n\n\t\t}\n\n\t\tfunction removeFace( f, faces ) {\n\n\t\t\tremoveFromArray( faces, f );\n\n\t\t\tif ( f.v1 ) removeFromArray( f.v1.faces, f );\n\t\t\tif ( f.v2 ) removeFromArray( f.v2.faces, f );\n\t\t\tif ( f.v3 ) removeFromArray( f.v3.faces, f );\n\n\t\t\t// TODO optimize this!\n\t\t\tvar vs = [ f.v1, f.v2, f.v3 ];\n\t\t\tvar v1, v2;\n\n\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\tv1 = vs[ i ];\n\t\t\t\tv2 = vs[ ( i + 1 ) % 3 ];\n\n\t\t\t\tif ( ! v1 || ! v2 ) continue;\n\n\t\t\t\tv1.removeIfNonNeighbor( v2 );\n\t\t\t\tv2.removeIfNonNeighbor( v1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction collapse( vertices, faces, u, v ) { // u and v are pointers to vertices of an edge\n\n\t\t\t// Collapse the edge uv by moving vertex u onto v\n\n\t\t\tif ( ! v ) {\n\n\t\t\t\t// u is a vertex all by itself so just delete it..\n\t\t\t\tremoveVertex( u, vertices );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar i;\n\t\t\tvar tmpVertices = [];\n\n\t\t\tfor ( i = 0; i < u.neighbors.length; i ++ ) {\n\n\t\t\t\ttmpVertices.push( u.neighbors[ i ] );\n\n\t\t\t}\n\n\n\t\t\t// delete triangles on edge uv:\n\t\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tif ( u.faces[ i ].hasVertex( v ) ) {\n\n\t\t\t\t\tremoveFace( u.faces[ i ], faces );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update remaining triangles to have v instead of u\n\t\t\tfor ( i = u.faces.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tu.faces[ i ].replaceVertex( u, v );\n\n\t\t\t}\n\n\n\t\t\tremoveVertex( u, vertices );\n\n\t\t\t// recompute the edge collapse costs in neighborhood\n\t\t\tfor ( i = 0; i < tmpVertices.length; i ++ ) {\n\n\t\t\t\tcomputeEdgeCostAtVertex( tmpVertices[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\n\n\t\tfunction minimumCostEdge( vertices ) {\n\n\t\t\t// O(n * n) approach. TODO optimize this\n\n\t\t\tvar least = vertices[ 0 ];\n\n\t\t\tfor ( var i = 0; i < vertices.length; i ++ ) {\n\n\t\t\t\tif ( vertices[ i ].collapseCost < least.collapseCost ) {\n\n\t\t\t\t\tleast = vertices[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn least;\n\n\t\t}\n\n\t\t// we use a triangle class to represent structure of face slightly differently\n\n\t\tfunction Triangle( v1, v2, v3, a, b, c ) {\n\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\n\t\t\tthis.normal = new THREE.Vector3();\n\n\t\t\tthis.computeNormal();\n\n\t\t\tv1.faces.push( this );\n\t\t\tv1.addUniqueNeighbor( v2 );\n\t\t\tv1.addUniqueNeighbor( v3 );\n\n\t\t\tv2.faces.push( this );\n\t\t\tv2.addUniqueNeighbor( v1 );\n\t\t\tv2.addUniqueNeighbor( v3 );\n\n\n\t\t\tv3.faces.push( this );\n\t\t\tv3.addUniqueNeighbor( v1 );\n\t\t\tv3.addUniqueNeighbor( v2 );\n\n\t\t}\n\n\t\tTriangle.prototype.computeNormal = function () {\n\n\t\t\tvar vA = this.v1.position;\n\t\t\tvar vB = this.v2.position;\n\t\t\tvar vC = this.v3.position;\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab ).normalize();\n\n\t\t\tthis.normal.copy( cb );\n\n\t\t};\n\n\t\tTriangle.prototype.hasVertex = function ( v ) {\n\n\t\t\treturn v === this.v1 || v === this.v2 || v === this.v3;\n\n\t\t};\n\n\t\tTriangle.prototype.replaceVertex = function ( oldv, newv ) {\n\n\t\t\tif ( oldv === this.v1 ) this.v1 = newv;\n\t\t\telse if ( oldv === this.v2 ) this.v2 = newv;\n\t\t\telse if ( oldv === this.v3 ) this.v3 = newv;\n\n\t\t\tremoveFromArray( oldv.faces, this );\n\t\t\tnewv.faces.push( this );\n\n\n\t\t\toldv.removeIfNonNeighbor( this.v1 );\n\t\t\tthis.v1.removeIfNonNeighbor( oldv );\n\n\t\t\toldv.removeIfNonNeighbor( this.v2 );\n\t\t\tthis.v2.removeIfNonNeighbor( oldv );\n\n\t\t\toldv.removeIfNonNeighbor( this.v3 );\n\t\t\tthis.v3.removeIfNonNeighbor( oldv );\n\n\t\t\tthis.v1.addUniqueNeighbor( this.v2 );\n\t\t\tthis.v1.addUniqueNeighbor( this.v3 );\n\n\t\t\tthis.v2.addUniqueNeighbor( this.v1 );\n\t\t\tthis.v2.addUniqueNeighbor( this.v3 );\n\n\t\t\tthis.v3.addUniqueNeighbor( this.v1 );\n\t\t\tthis.v3.addUniqueNeighbor( this.v2 );\n\n\t\t\tthis.computeNormal();\n\n\t\t};\n\n\t\tfunction Vertex( v, id ) {\n\n\t\t\tthis.position = v;\n\n\t\t\tthis.id = id; // old index id\n\n\t\t\tthis.faces = []; // faces vertex is connected\n\t\t\tthis.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n\n\t\t\t// these will be computed in computeEdgeCostAtVertex()\n\t\t\tthis.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\t\t\tthis.collapseNeighbor = null; // best candinate for collapsing\n\n\t\t}\n\n\t\tVertex.prototype.addUniqueNeighbor = function ( vertex ) {\n\n\t\t\tpushIfUnique( this.neighbors, vertex );\n\n\t\t};\n\n\t\tVertex.prototype.removeIfNonNeighbor = function ( n ) {\n\n\t\t\tvar neighbors = this.neighbors;\n\t\t\tvar faces = this.faces;\n\n\t\t\tvar offset = neighbors.indexOf( n );\n\t\t\tif ( offset === - 1 ) return;\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tif ( faces[ i ].hasVertex( n ) ) return;\n\n\t\t\t}\n\n\t\t\tneighbors.splice( offset, 1 );\n\n\t\t};\n\n\t\tTHREE.SimplifyModifier.prototype.modify = function ( geometry, count ) {\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tgeometry.mergeVertices();\n\n\t\t\tvar oldVertices = geometry.vertices; // Three Position\n\t\t\tvar oldFaces = geometry.faces; // Three Face\n\n\t\t\t// conversion\n\t\t\tvar vertices = [];\n\t\t\tvar faces = [];\n\n\t\t\tvar i, il;\n\n\t\t\t//\n\t\t\t// put data of original geometry in different data structures\n\t\t\t//\n\n\t\t\t// add vertices\n\n\t\t\tfor ( i = 0, il = oldVertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = new Vertex( oldVertices[ i ], i );\n\t\t\t\tvertices.push( vertex );\n\n\t\t\t}\n\n\t\t\t// add faces\n\n\t\t\tfor ( i = 0, il = oldFaces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = oldFaces[ i ];\n\n\t\t\t\tvar a = face.a;\n\t\t\t\tvar b = face.b;\n\t\t\t\tvar c = face.c;\n\n\t\t\t\tvar triangle = new Triangle( vertices[ a ], vertices[ b ], vertices[ c ], a, b, c );\n\t\t\t\tfaces.push( triangle );\n\n\t\t\t}\n\n\t\t\t// compute all edge collapse costs\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tcomputeEdgeCostAtVertex( vertices[ i ] );\n\n\t\t\t}\n\n\t\t\tvar nextVertex;\n\n\t\t\tvar z = count;\n\n\t\t\twhile ( z -- ) {\n\n\t\t\t\tnextVertex = minimumCostEdge( vertices );\n\n\t\t\t\tif ( ! nextVertex ) {\n\n\t\t\t\t\tconsole.log( 'THREE.SimplifyModifier: No next vertex' );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tcollapse( vertices, faces, nextVertex, nextVertex.collapseNeighbor );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar simplifiedGeometry = new THREE.BufferGeometry();\n\t\t\tvar position = [];\n\t\t\tvar index = [];\n\n\t\t\t//\n\n\t\t\tfor ( i = 0; i < vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = vertices[ i ].position;\n\t\t\t\tposition.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = vertices.indexOf( face.v1 );\n\t\t\t\tvar b = vertices.indexOf( face.v2 );\n\t\t\t\tvar c = vertices.indexOf( face.v3 );\n\n\t\t\t\tindex.push( a, b, c );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tsimplifiedGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( position, 3 ) );\n\t\t\tsimplifiedGeometry.setIndex( index );\n\n\t\t\treturn simplifiedGeometry;\n\n\t\t};\n\n\t} )();\n\t\n\treturn THREE.SimplifyModifier;\n});\n\ndefine('skylark-threejs-ex/modifiers/SubdivisionModifier',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n\t *\t@author centerionware / http://www.centerionware.com\n\t *\n\t *\tSubdivision Geometry Modifier\n\t *\t\tusing Loop Subdivision Scheme\n\t *\n\t *\tReferences:\n\t *\t\thttp://graphics.stanford.edu/~mdfisher/subdivision.html\n\t *\t\thttp://www.holmes3d.net/graphics/subdivision/\n\t *\t\thttp://www.cs.rutgers.edu/~decarlo/readings/subdiv-sg00c.pdf\n\t *\n\t *\tKnown Issues:\n\t *\t\t- currently doesn't handle \"Sharp Edges\"\n\t */\n\n\tTHREE.SubdivisionModifier = function ( subdivisions ) {\n\n\t\tthis.subdivisions = ( subdivisions === undefined ) ? 1 : subdivisions;\n\n\t};\n\n\t// Applies the \"modify\" pattern\n\tTHREE.SubdivisionModifier.prototype.modify = function ( geometry ) {\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry = geometry.clone();\n\n\t\t}\n\n\t\tgeometry.mergeVertices();\n\n\t\tvar repeats = this.subdivisions;\n\n\t\twhile ( repeats -- > 0 ) {\n\n\t\t\tthis.smooth( geometry );\n\n\t\t}\n\n\t\tgeometry.computeFaceNormals();\n\t\tgeometry.computeVertexNormals();\n\n\t\treturn geometry;\n\n\t};\n\n\t( function () {\n\n\t\t// Some constants\n\t\tvar ABC = [ 'a', 'b', 'c' ];\n\n\n\t\tfunction getEdge( a, b, map ) {\n\n\t\t\tvar vertexIndexA = Math.min( a, b );\n\t\t\tvar vertexIndexB = Math.max( a, b );\n\n\t\t\tvar key = vertexIndexA + \"_\" + vertexIndexB;\n\n\t\t\treturn map[ key ];\n\n\t\t}\n\n\n\t\tfunction processEdge( a, b, vertices, map, face, metaVertices ) {\n\n\t\t\tvar vertexIndexA = Math.min( a, b );\n\t\t\tvar vertexIndexB = Math.max( a, b );\n\n\t\t\tvar key = vertexIndexA + \"_\" + vertexIndexB;\n\n\t\t\tvar edge;\n\n\t\t\tif ( key in map ) {\n\n\t\t\t\tedge = map[ key ];\n\n\t\t\t} else {\n\n\t\t\t\tvar vertexA = vertices[ vertexIndexA ];\n\t\t\t\tvar vertexB = vertices[ vertexIndexB ];\n\n\t\t\t\tedge = {\n\n\t\t\t\t\ta: vertexA, // pointer reference\n\t\t\t\t\tb: vertexB,\n\t\t\t\t\tnewEdge: null,\n\t\t\t\t\t// aIndex: a, // numbered reference\n\t\t\t\t\t// bIndex: b,\n\t\t\t\t\tfaces: [] // pointers to face\n\n\t\t\t\t};\n\n\t\t\t\tmap[ key ] = edge;\n\n\t\t\t}\n\n\t\t\tedge.faces.push( face );\n\n\t\t\tmetaVertices[ a ].edges.push( edge );\n\t\t\tmetaVertices[ b ].edges.push( edge );\n\n\n\t\t}\n\n\t\tfunction generateLookups( vertices, faces, metaVertices, edges ) {\n\n\t\t\tvar i, il, face;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tmetaVertices[ i ] = { edges: [] };\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\n\t\t\t\tprocessEdge( face.a, face.b, vertices, edges, face, metaVertices );\n\t\t\t\tprocessEdge( face.b, face.c, vertices, edges, face, metaVertices );\n\t\t\t\tprocessEdge( face.c, face.a, vertices, edges, face, metaVertices );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction newFace( newFaces, a, b, c, materialIndex ) {\n\n\t\t\tnewFaces.push( new THREE.Face3( a, b, c, undefined, undefined, materialIndex ) );\n\n\t\t}\n\n\t\tfunction midpoint( a, b ) {\n\n\t\t\treturn ( Math.abs( b - a ) / 2 ) + Math.min( a, b );\n\n\t\t}\n\n\t\tfunction newUv( newUvs, a, b, c ) {\n\n\t\t\tnewUvs.push( [ a.clone(), b.clone(), c.clone() ] );\n\n\t\t}\n\n\t\t/////////////////////////////\n\n\t\t// Performs one iteration of Subdivision\n\t\tTHREE.SubdivisionModifier.prototype.smooth = function ( geometry ) {\n\n\t\t\tvar tmp = new THREE.Vector3();\n\n\t\t\tvar oldVertices, oldFaces, oldUvs;\n\t\t\tvar newVertices, newFaces, newUVs = [];\n\n\t\t\tvar n, i, il, j, k;\n\t\t\tvar metaVertices, sourceEdges;\n\n\t\t\t// new stuff.\n\t\t\tvar sourceEdges, newEdgeVertices, newSourceVertices;\n\n\t\t\toldVertices = geometry.vertices; // { x, y, z}\n\t\t\toldFaces = geometry.faces; // { a: oldVertex1, b: oldVertex2, c: oldVertex3 }\n\t\t\toldUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasUvs = oldUvs[ 0 ] !== undefined && oldUvs[ 0 ].length > 0;\n\n\t\t\tif ( hasUvs ) {\n\n\t\t\t\tfor ( var j = 0; j < oldUvs.length; j ++ ) {\n\n\t\t\t\t\tnewUVs.push( [] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/******************************************************\n\t\t\t *\n\t\t\t * Step 0: Preprocess Geometry to Generate edges Lookup\n\t\t\t *\n\t\t\t *******************************************************/\n\n\t\t\tmetaVertices = new Array( oldVertices.length );\n\t\t\tsourceEdges = {}; // Edge => { oldVertex1, oldVertex2, faces[]  }\n\n\t\t\tgenerateLookups( oldVertices, oldFaces, metaVertices, sourceEdges );\n\n\n\t\t\t/******************************************************\n\t\t\t *\n\t\t\t *\tStep 1.\n\t\t\t *\tFor each edge, create a new Edge Vertex,\n\t\t\t *\tthen position it.\n\t\t\t *\n\t\t\t *******************************************************/\n\n\t\t\tnewEdgeVertices = [];\n\t\t\tvar other, currentEdge, newEdge, face;\n\t\t\tvar edgeVertexWeight, adjacentVertexWeight, connectedFaces;\n\n\t\t\tfor ( i in sourceEdges ) {\n\n\t\t\t\tcurrentEdge = sourceEdges[ i ];\n\t\t\t\tnewEdge = new THREE.Vector3();\n\n\t\t\t\tedgeVertexWeight = 3 / 8;\n\t\t\t\tadjacentVertexWeight = 1 / 8;\n\n\t\t\t\tconnectedFaces = currentEdge.faces.length;\n\n\t\t\t\t// check how many linked faces. 2 should be correct.\n\t\t\t\tif ( connectedFaces != 2 ) {\n\n\t\t\t\t\t// if length is not 2, handle condition\n\t\t\t\t\tedgeVertexWeight = 0.5;\n\t\t\t\t\tadjacentVertexWeight = 0;\n\n\t\t\t\t\tif ( connectedFaces != 1 ) {\n\n\t\t\t\t\t\t// console.warn( 'Subdivision Modifier: Number of connected faces != 2, is: ', connectedFaces, currentEdge );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnewEdge.addVectors( currentEdge.a, currentEdge.b ).multiplyScalar( edgeVertexWeight );\n\n\t\t\t\ttmp.set( 0, 0, 0 );\n\n\t\t\t\tfor ( j = 0; j < connectedFaces; j ++ ) {\n\n\t\t\t\t\tface = currentEdge.faces[ j ];\n\n\t\t\t\t\tfor ( k = 0; k < 3; k ++ ) {\n\n\t\t\t\t\t\tother = oldVertices[ face[ ABC[ k ] ] ];\n\t\t\t\t\t\tif ( other !== currentEdge.a && other !== currentEdge.b ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttmp.add( other );\n\n\t\t\t\t}\n\n\t\t\t\ttmp.multiplyScalar( adjacentVertexWeight );\n\t\t\t\tnewEdge.add( tmp );\n\n\t\t\t\tcurrentEdge.newEdge = newEdgeVertices.length;\n\t\t\t\tnewEdgeVertices.push( newEdge );\n\n\t\t\t\t// console.log(currentEdge, newEdge);\n\n\t\t\t}\n\n\t\t\t/******************************************************\n\t\t\t *\n\t\t\t *\tStep 2.\n\t\t\t *\tReposition each source vertices.\n\t\t\t *\n\t\t\t *******************************************************/\n\n\t\t\tvar beta, sourceVertexWeight, connectingVertexWeight;\n\t\t\tvar connectingEdge, connectingEdges, oldVertex, newSourceVertex;\n\t\t\tnewSourceVertices = [];\n\n\t\t\tfor ( i = 0, il = oldVertices.length; i < il; i ++ ) {\n\n\t\t\t\toldVertex = oldVertices[ i ];\n\n\t\t\t\t// find all connecting edges (using lookupTable)\n\t\t\t\tconnectingEdges = metaVertices[ i ].edges;\n\t\t\t\tn = connectingEdges.length;\n\n\t\t\t\tif ( n == 3 ) {\n\n\t\t\t\t\tbeta = 3 / 16;\n\n\t\t\t\t} else if ( n > 3 ) {\n\n\t\t\t\t\tbeta = 3 / ( 8 * n ); // Warren's modified formula\n\n\t\t\t\t}\n\n\t\t\t\t// Loop's original beta formula\n\t\t\t\t// beta = 1 / n * ( 5/8 - Math.pow( 3/8 + 1/4 * Math.cos( 2 * Math. PI / n ), 2) );\n\n\t\t\t\tsourceVertexWeight = 1 - n * beta;\n\t\t\t\tconnectingVertexWeight = beta;\n\n\t\t\t\tif ( n <= 2 ) {\n\n\t\t\t\t\t// crease and boundary rules\n\t\t\t\t\t// console.warn('crease and boundary rules');\n\n\t\t\t\t\tif ( n == 2 ) {\n\n\t\t\t\t\t\t// console.warn( '2 connecting edges', connectingEdges );\n\t\t\t\t\t\tsourceVertexWeight = 3 / 4;\n\t\t\t\t\t\tconnectingVertexWeight = 1 / 8;\n\n\t\t\t\t\t\t// sourceVertexWeight = 1;\n\t\t\t\t\t\t// connectingVertexWeight = 0;\n\n\t\t\t\t\t} else if ( n == 1 ) {\n\n\t\t\t\t\t\t// console.warn( 'only 1 connecting edge' );\n\n\t\t\t\t\t} else if ( n == 0 ) {\n\n\t\t\t\t\t\t// console.warn( '0 connecting edges' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnewSourceVertex = oldVertex.clone().multiplyScalar( sourceVertexWeight );\n\n\t\t\t\ttmp.set( 0, 0, 0 );\n\n\t\t\t\tfor ( j = 0; j < n; j ++ ) {\n\n\t\t\t\t\tconnectingEdge = connectingEdges[ j ];\n\t\t\t\t\tother = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;\n\t\t\t\t\ttmp.add( other );\n\n\t\t\t\t}\n\n\t\t\t\ttmp.multiplyScalar( connectingVertexWeight );\n\t\t\t\tnewSourceVertex.add( tmp );\n\n\t\t\t\tnewSourceVertices.push( newSourceVertex );\n\n\t\t\t}\n\n\n\t\t\t/******************************************************\n\t\t\t *\n\t\t\t *\tStep 3.\n\t\t\t *\tGenerate Faces between source vertices\n\t\t\t *\tand edge vertices.\n\t\t\t *\n\t\t\t *******************************************************/\n\n\t\t\tnewVertices = newSourceVertices.concat( newEdgeVertices );\n\t\t\tvar sl = newSourceVertices.length, edge1, edge2, edge3;\n\t\t\tnewFaces = [];\n\n\t\t\tvar uv, x0, x1, x2;\n\t\t\tvar x3 = new THREE.Vector2();\n\t\t\tvar x4 = new THREE.Vector2();\n\t\t\tvar x5 = new THREE.Vector2();\n\n\t\t\tfor ( i = 0, il = oldFaces.length; i < il; i ++ ) {\n\n\t\t\t\tface = oldFaces[ i ];\n\n\t\t\t\t// find the 3 new edges vertex of each old face\n\n\t\t\t\tedge1 = getEdge( face.a, face.b, sourceEdges ).newEdge + sl;\n\t\t\t\tedge2 = getEdge( face.b, face.c, sourceEdges ).newEdge + sl;\n\t\t\t\tedge3 = getEdge( face.c, face.a, sourceEdges ).newEdge + sl;\n\n\t\t\t\t// create 4 faces.\n\n\t\t\t\tnewFace( newFaces, edge1, edge2, edge3, face.materialIndex );\n\t\t\t\tnewFace( newFaces, face.a, edge1, edge3, face.materialIndex );\n\t\t\t\tnewFace( newFaces, face.b, edge2, edge1, face.materialIndex );\n\t\t\t\tnewFace( newFaces, face.c, edge3, edge2, face.materialIndex );\n\n\t\t\t\t// create 4 new uv's\n\n\t\t\t\tif ( hasUvs ) {\n\n\t\t\t\t\tfor ( var j = 0; j < oldUvs.length; j ++ ) {\n\n\t\t\t\t\t\tuv = oldUvs[ j ][ i ];\n\n\t\t\t\t\t\tx0 = uv[ 0 ];\n\t\t\t\t\t\tx1 = uv[ 1 ];\n\t\t\t\t\t\tx2 = uv[ 2 ];\n\n\t\t\t\t\t\tx3.set( midpoint( x0.x, x1.x ), midpoint( x0.y, x1.y ) );\n\t\t\t\t\t\tx4.set( midpoint( x1.x, x2.x ), midpoint( x1.y, x2.y ) );\n\t\t\t\t\t\tx5.set( midpoint( x0.x, x2.x ), midpoint( x0.y, x2.y ) );\n\n\t\t\t\t\t\tnewUv( newUVs[ j ], x3, x4, x5 );\n\t\t\t\t\t\tnewUv( newUVs[ j ], x0, x3, x5 );\n\n\t\t\t\t\t\tnewUv( newUVs[ j ], x1, x4, x3 );\n\t\t\t\t\t\tnewUv( newUVs[ j ], x2, x5, x4 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Overwrite old arrays\n\t\t\tgeometry.vertices = newVertices;\n\t\t\tgeometry.faces = newFaces;\n\t\t\tif ( hasUvs ) geometry.faceVertexUvs = newUVs;\n\n\t\t\t// console.log('done');\n\n\t\t};\n\n\t} )();\n\t\n\treturn THREE.SubdivisionModifier;\n});\n\ndefine('skylark-threejs-ex/exporters/DRACOExporter',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * Export draco compressed files from threejs geometry objects.\n\t *\n\t * Draco files are compressed and usually are smaller than conventional 3D file formats.\n\t *\n\t * The exporter receives a options object containing\n\t *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n\t *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n\t *  - encoderMethod\n\t *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n\t *  - exportUvs\n\t *  - exportNormals\n\t *\n\t * @class DRACOExporter\n\t * @author tentone\n\t */\n\n\t/* global DracoEncoderModule */\n\n\tTHREE.DRACOExporter = function () {};\n\n\tTHREE.DRACOExporter.prototype = {\n\n\t\tconstructor: THREE.DRACOExporter,\n\n\t\tparse: function ( geometry, options ) {\n\n\n\t\t\tif ( DracoEncoderModule === undefined ) {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOExporter: required the draco_decoder to work.' );\n\n\t\t\t}\n\n\t\t\tif ( options === undefined ) {\n\n\t\t\t\toptions = {\n\n\t\t\t\t\tdecodeSpeed: 5,\n\t\t\t\t\tencodeSpeed: 5,\n\t\t\t\t\tencoderMethod: THREE.DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n\t\t\t\t\tquantization: [ 16, 8, 8, 8, 8 ],\n\t\t\t\t\texportUvs: true,\n\t\t\t\t\texportNormals: true,\n\t\t\t\t\texportColor: false,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar dracoEncoder = DracoEncoderModule();\n\t\t\tvar encoder = new dracoEncoder.Encoder();\n\t\t\tvar builder = new dracoEncoder.MeshBuilder();\n\t\t\tvar mesh = new dracoEncoder.Mesh();\n\n\t\t\tif ( geometry.isGeometry === true ) {\n\n\t\t\t\tvar bufferGeometry = new THREE.BufferGeometry();\n\t\t\t\tbufferGeometry.fromGeometry( geometry );\n\t\t\t\tgeometry = bufferGeometry;\n\n\t\t\t}\n\n\t\t\tif ( geometry.isBufferGeometry !== true ) {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or THREE.BufferGeometry instance.' );\n\n\t\t\t}\n\n\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array );\n\n\t\t\tvar faces = geometry.getIndex();\n\n\t\t\tif ( faces !== null ) {\n\n\t\t\t\tbuilder.AddFacesToMesh( mesh, faces.count, faces.array );\n\n\t\t\t} else {\n\n\t\t\t\tvar faces = new ( vertices.count > 65535 ? Uint32Array : Uint16Array )( vertices.count );\n\n\t\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\t\tfaces[ i ] = i;\n\n\t\t\t\t}\n\n\t\t\t\tbuilder.AddFacesToMesh( mesh, vertices.count, faces );\n\n\t\t\t}\n\n\t\t\tif ( options.exportNormals === true ) {\n\n\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( options.exportUvs === true ) {\n\n\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( options.exportColor === true ) {\n\n\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tbuilder.AddFloatAttributeToMesh( mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//Compress using draco encoder\n\n\t\t\tvar encodedData = new dracoEncoder.DracoInt8Array();\n\n\t\t\t//Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n\t\t\tencoder.SetSpeedOptions( options.encodeSpeed || 5, options.decodeSpeed || 5 );\n\n\t\t\t// Sets the desired encoding method for a given geometry.\n\n\t\t\tif ( options.encoderMethod !== undefined ) {\n\n\t\t\t\tencoder.SetEncodingMethod( options.encoderMethod );\n\n\t\t\t}\n\n\t\t\t// Sets the quantization (number of bits used to represent) compression options for a named attribute.\n\t\t\t// The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\t\t\tif ( options.quantization !== undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < 5; i ++ ) {\n\n\t\t\t\t\tif ( options.quantization[ i ] !== undefined ) {\n\n\t\t\t\t\t\tencoder.SetAttributeQuantization( i, options.quantization[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar length = encoder.EncodeMeshToDracoBuffer( mesh, encodedData );\n\t\t\tdracoEncoder.destroy( mesh );\n\n\t\t\tif ( length === 0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOExporter: Draco encoding failed.' );\n\n\t\t\t}\n\n\t\t\t//Copy encoded data to buffer.\n\t\t\tvar outputData = new Int8Array( new ArrayBuffer( length ) );\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\toutputData[ i ] = encodedData.GetValue( i );\n\n\t\t\t}\n\n\t\t\tdracoEncoder.destroy( encodedData );\n\t\t\tdracoEncoder.destroy( encoder );\n\t\t\tdracoEncoder.destroy( builder );\n\n\t\t\treturn outputData;\n\n\t\t}\n\n\t};\n\n\t// Encoder methods\n\n\tTHREE.DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;\n\tTHREE.DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;\n\n\t// Geometry type\n\n\tTHREE.DRACOExporter.POINT_CLOUD = 0;\n\tTHREE.DRACOExporter.TRIANGULAR_MESH = 1;\n\n\t// Attribute type\n\n\tTHREE.DRACOExporter.INVALID = - 1;\n\tTHREE.DRACOExporter.POSITION = 0;\n\tTHREE.DRACOExporter.NORMAL = 1;\n\tTHREE.DRACOExporter.COLOR = 2;\n\tTHREE.DRACOExporter.TEX_COORD = 3;\n\tTHREE.DRACOExporter.GENERIC = 4;\n\t\n\treturn THREE.DRACOExporter;\n});\n\ndefine('skylark-threejs-ex/exporters/OBJExporter',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.OBJExporter = function () {};\n\n\tTHREE.OBJExporter.prototype = {\n\n\t\tconstructor: THREE.OBJExporter,\n\n\t\tparse: function ( object ) {\n\n\t\t\tvar output = '';\n\n\t\t\tvar indexVertex = 0;\n\t\t\tvar indexVertexUvs = 0;\n\t\t\tvar indexNormals = 0;\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvar normal = new THREE.Vector3();\n\t\t\tvar uv = new THREE.Vector2();\n\n\t\t\tvar i, j, k, l, m, face = [];\n\n\t\t\tvar parseMesh = function ( mesh ) {\n\n\t\t\t\tvar nbVertex = 0;\n\t\t\t\tvar nbNormals = 0;\n\t\t\t\tvar nbVertexUvs = 0;\n\n\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\tvar normalMatrixWorld = new THREE.Matrix3();\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tgeometry = new THREE.BufferGeometry().setFromObject( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t// shortcuts\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\t\t// name of the mesh object\n\t\t\t\t\toutput += 'o ' + mesh.name + '\\n';\n\n\t\t\t\t\t// name of the mesh material\n\t\t\t\t\tif ( mesh.material && mesh.material.name ) {\n\n\t\t\t\t\t\toutput += 'usemtl ' + mesh.material.name + '\\n';\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertices\n\n\t\t\t\t\tif ( vertices !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.count; i < l; i ++, nbVertex ++ ) {\n\n\t\t\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\t\t\t// transfrom the vertex to world space\n\t\t\t\t\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\n\t\t\t\t\t\t\t// transform the vertex to export format\n\t\t\t\t\t\t\toutput += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = uvs.count; i < l; i ++, nbVertexUvs ++ ) {\n\n\t\t\t\t\t\t\tuv.x = uvs.getX( i );\n\t\t\t\t\t\t\tuv.y = uvs.getY( i );\n\n\t\t\t\t\t\t\t// transform the uv to export format\n\t\t\t\t\t\t\toutput += 'vt ' + uv.x + ' ' + uv.y + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// normals\n\n\t\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\t\t\t\tfor ( i = 0, l = normals.count; i < l; i ++, nbNormals ++ ) {\n\n\t\t\t\t\t\t\tnormal.x = normals.getX( i );\n\t\t\t\t\t\t\tnormal.y = normals.getY( i );\n\t\t\t\t\t\t\tnormal.z = normals.getZ( i );\n\n\t\t\t\t\t\t\t// transfrom the normal to world space\n\t\t\t\t\t\t\tnormal.applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\t\t// transform the normal to export format\n\t\t\t\t\t\t\toutput += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif ( indices !== null ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = indices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tfor ( m = 0; m < 3; m ++ ) {\n\n\t\t\t\t\t\t\t\tj = indices.getX( i + m ) + 1;\n\n\t\t\t\t\t\t\t\tface[ m ] = ( indexVertex + j ) + ( normals || uvs ? '/' + ( uvs ? ( indexVertexUvs + j ) : '' ) + ( normals ? '/' + ( indexNormals + j ) : '' ) : '' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transform the face to export format\n\t\t\t\t\t\t\toutput += 'f ' + face.join( ' ' ) + \"\\n\";\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tfor ( m = 0; m < 3; m ++ ) {\n\n\t\t\t\t\t\t\t\tj = i + m + 1;\n\n\t\t\t\t\t\t\t\tface[ m ] = ( indexVertex + j ) + ( normals || uvs ? '/' + ( uvs ? ( indexVertexUvs + j ) : '' ) + ( normals ? '/' + ( indexNormals + j ) : '' ) : '' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transform the face to export format\n\t\t\t\t\t\t\toutput += 'f ' + face.join( ' ' ) + \"\\n\";\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry );\n\n\t\t\t\t}\n\n\t\t\t\t// update index\n\t\t\t\tindexVertex += nbVertex;\n\t\t\t\tindexVertexUvs += nbVertexUvs;\n\t\t\t\tindexNormals += nbNormals;\n\n\t\t\t};\n\n\t\t\tvar parseLine = function ( line ) {\n\n\t\t\t\tvar nbVertex = 0;\n\n\t\t\t\tvar geometry = line.geometry;\n\t\t\t\tvar type = line.type;\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tgeometry = new THREE.BufferGeometry().setFromObject( line );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t// shortcuts\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\n\t\t\t\t\t// name of the line object\n\t\t\t\t\toutput += 'o ' + line.name + '\\n';\n\n\t\t\t\t\tif ( vertices !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.count; i < l; i ++, nbVertex ++ ) {\n\n\t\t\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\t\t\t// transfrom the vertex to world space\n\t\t\t\t\t\t\tvertex.applyMatrix4( line.matrixWorld );\n\n\t\t\t\t\t\t\t// transform the vertex to export format\n\t\t\t\t\t\t\toutput += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type === 'Line' ) {\n\n\t\t\t\t\t\toutput += 'l ';\n\n\t\t\t\t\t\tfor ( j = 1, l = vertices.count; j <= l; j ++ ) {\n\n\t\t\t\t\t\t\toutput += ( indexVertex + j ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput += '\\n';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type === 'LineSegments' ) {\n\n\t\t\t\t\t\tfor ( j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1 ) {\n\n\t\t\t\t\t\t\toutput += 'l ' + ( indexVertex + j ) + ' ' + ( indexVertex + k ) + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJExporter.parseLine(): geometry type unsupported', geometry );\n\n\t\t\t\t}\n\n\t\t\t\t// update index\n\t\t\t\tindexVertex += nbVertex;\n\n\t\t\t};\n\n\t\t\tobject.traverse( function ( child ) {\n\n\t\t\t\tif ( child instanceof THREE.Mesh ) {\n\n\t\t\t\t\tparseMesh( child );\n\n\t\t\t\t}\n\n\t\t\t\tif ( child instanceof THREE.Line ) {\n\n\t\t\t\t\tparseLine( child );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn output;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.OBJExporter;\n});\n\ndefine('skylark-threejs-ex/exporters/STLExporter',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author kovacsv / http://kovacsv.hu/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mudcube / http://mudcu.be/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Usage:\n\t *  var exporter = new THREE.STLExporter();\n\t *\n\t *  // second argument is a list of options\n\t *  var data = exporter.parse( mesh, { binary: true } );\n\t *\n\t */\n\n\tTHREE.STLExporter = function () {};\n\n\tTHREE.STLExporter.prototype = {\n\n\t\tconstructor: THREE.STLExporter,\n\n\t\tparse: ( function () {\n\n\t\t\tvar vector = new THREE.Vector3();\n\t\t\tvar normalMatrixWorld = new THREE.Matrix3();\n\n\t\t\treturn function parse( scene, options ) {\n\n\t\t\t\tif ( options === undefined ) options = {};\n\n\t\t\t\tvar binary = options.binary !== undefined ? options.binary : false;\n\n\t\t\t\t//\n\n\t\t\t\tvar objects = [];\n\t\t\t\tvar triangles = 0;\t\n\n\t\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\t\tif ( object.isMesh ) {\n\n\t\t\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry( geometry );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\t\ttriangles += geometry.faces.length;\n\n\t\t\t\t\t\t\tobjects.push( {\n\n\t\t\t\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\t\t\t\tmatrixWorld: object.matrixWorld\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( binary ) {\n\n\t\t\t\t\tvar offset = 80; // skip header\n\t\t\t\t\tvar bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n\t\t\t\t\tvar arrayBuffer = new ArrayBuffer( bufferLength );\n\t\t\t\t\tvar output = new DataView( arrayBuffer );\n\t\t\t\t\toutput.setUint32( offset, triangles, true ); offset += 4;\n\n\t\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar object = objects[ i ];\n\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\t\t\t\t\tvar faces = object.geometry.faces;\n\t\t\t\t\t\tvar matrixWorld = object.matrixWorld;\n\n\t\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( matrixWorld );\n\n\t\t\t\t\t\tfor ( var j = 0, jl = faces.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar face = faces[ j ];\n\n\t\t\t\t\t\t\tvector.copy( face.normal ).applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\t\toutput.setFloat32( offset, vector.x, true ); offset += 4; // normal\n\t\t\t\t\t\t\toutput.setFloat32( offset, vector.y, true ); offset += 4;\n\t\t\t\t\t\t\toutput.setFloat32( offset, vector.z, true ); offset += 4;\n\n\t\t\t\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t\t\t\tfor ( var k = 0; k < 3; k ++ ) {\n\n\t\t\t\t\t\t\t\tvector.copy( vertices[ indices[ k ] ] ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\t\t\toutput.setFloat32( offset, vector.x, true ); offset += 4; // vertices\n\t\t\t\t\t\t\t\toutput.setFloat32( offset, vector.y, true ); offset += 4;\n\t\t\t\t\t\t\t\toutput.setFloat32( offset, vector.z, true ); offset += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutput.setUint16( offset, 0, true ); offset += 2; // attribute byte count\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn output;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar output = '';\n\n\t\t\t\t\toutput += 'solid exported\\n';\n\n\t\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar object = objects[ i ];\n\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\t\t\t\t\tvar faces = object.geometry.faces;\n\t\t\t\t\t\tvar matrixWorld = object.matrixWorld;\n\n\t\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( matrixWorld );\n\n\t\t\t\t\t\tfor ( var j = 0, jl = faces.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar face = faces[ j ];\n\n\t\t\t\t\t\t\tvector.copy( face.normal ).applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\t\toutput += '\\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n\t\t\t\t\t\t\toutput += '\\t\\touter loop\\n';\n\n\t\t\t\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t\t\t\tfor ( var k = 0; k < 3; k ++ ) {\n\n\t\t\t\t\t\t\t\tvector.copy( vertices[ indices[ k ] ] ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\t\t\toutput += '\\t\\t\\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toutput += '\\t\\tendloop\\n';\n\t\t\t\t\t\t\toutput += '\\tendfacet\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutput += 'endsolid exported\\n';\n\n\t\t\t\t\treturn output;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() )\n\n\t};\n\t\n\treturn THREE.STLExporter;\n});\n\ndefine('skylark-threejs-ex/exporters/GLTFExporter',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t * @author Takahiro / https://github.com/takahirox\n\t */\n\n\t//------------------------------------------------------------------------------\n\t// Constants\n\t//------------------------------------------------------------------------------\n\tvar WEBGL_CONSTANTS = {\n\t\tPOINTS: 0x0000,\n\t\tLINES: 0x0001,\n\t\tLINE_LOOP: 0x0002,\n\t\tLINE_STRIP: 0x0003,\n\t\tTRIANGLES: 0x0004,\n\t\tTRIANGLE_STRIP: 0x0005,\n\t\tTRIANGLE_FAN: 0x0006,\n\n\t\tUNSIGNED_BYTE: 0x1401,\n\t\tUNSIGNED_SHORT: 0x1403,\n\t\tFLOAT: 0x1406,\n\t\tUNSIGNED_INT: 0x1405,\n\t\tARRAY_BUFFER: 0x8892,\n\t\tELEMENT_ARRAY_BUFFER: 0x8893,\n\n\t\tNEAREST: 0x2600,\n\t\tLINEAR: 0x2601,\n\t\tNEAREST_MIPMAP_NEAREST: 0x2700,\n\t\tLINEAR_MIPMAP_NEAREST: 0x2701,\n\t\tNEAREST_MIPMAP_LINEAR: 0x2702,\n\t\tLINEAR_MIPMAP_LINEAR: 0x2703,\n\n\t\tCLAMP_TO_EDGE: 33071,\n\t\tMIRRORED_REPEAT: 33648,\n\t\tREPEAT: 10497\n\t};\n\n\tvar THREE_TO_WEBGL = {};\n\n\tTHREE_TO_WEBGL[ THREE.NearestFilter ] = WEBGL_CONSTANTS.NEAREST;\n\tTHREE_TO_WEBGL[ THREE.NearestMipmapNearestFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\n\tTHREE_TO_WEBGL[ THREE.NearestMipmapLinearFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\n\tTHREE_TO_WEBGL[ THREE.LinearFilter ] = WEBGL_CONSTANTS.LINEAR;\n\tTHREE_TO_WEBGL[ THREE.LinearMipmapNearestFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\n\tTHREE_TO_WEBGL[ THREE.LinearMipmapLinearFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n\n\tTHREE_TO_WEBGL[ THREE.ClampToEdgeWrapping ] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\n\tTHREE_TO_WEBGL[ THREE.RepeatWrapping ] = WEBGL_CONSTANTS.REPEAT;\n\tTHREE_TO_WEBGL[ THREE.MirroredRepeatWrapping ] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\tposition: 'translation',\n\t\tquaternion: 'rotation',\n\t\tmorphTargetInfluences: 'weights'\n\t};\n\n\t//------------------------------------------------------------------------------\n\t// GLTF Exporter\n\t//------------------------------------------------------------------------------\n\tTHREE.GLTFExporter = function () {};\n\n\tTHREE.GLTFExporter.prototype = {\n\n\t\tconstructor: THREE.GLTFExporter,\n\n\t\t/**\n\t\t * Parse scenes and generate GLTF output\n\t\t * @param  {THREE.Scene or [THREE.Scenes]} input   THREE.Scene or Array of THREE.Scenes\n\t\t * @param  {Function} onDone  Callback on completed\n\t\t * @param  {Object} options options\n\t\t */\n\t\tparse: function ( input, onDone, options ) {\n\n\t\t\tvar DEFAULT_OPTIONS = {\n\t\t\t\tbinary: false,\n\t\t\t\ttrs: false,\n\t\t\t\tonlyVisible: true,\n\t\t\t\ttruncateDrawRange: true,\n\t\t\t\tembedImages: true,\n\t\t\t\tmaxTextureSize: Infinity,\n\t\t\t\tanimations: [],\n\t\t\t\tforceIndices: false,\n\t\t\t\tforcePowerOfTwoTextures: false,\n\t\t\t\tincludeCustomExtensions: false\n\t\t\t};\n\n\t\t\toptions = Object.assign( {}, DEFAULT_OPTIONS, options );\n\n\t\t\tif ( options.animations.length > 0 ) {\n\n\t\t\t\t// Only TRS properties, and not matrices, may be targeted by animation.\n\t\t\t\toptions.trs = true;\n\n\t\t\t}\n\n\t\t\tvar outputJSON = {\n\n\t\t\t\tasset: {\n\n\t\t\t\t\tversion: \"2.0\",\n\t\t\t\t\tgenerator: \"THREE.GLTFExporter\"\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar byteOffset = 0;\n\t\t\tvar buffers = [];\n\t\t\tvar pending = [];\n\t\t\tvar nodeMap = new Map();\n\t\t\tvar skins = [];\n\t\t\tvar extensionsUsed = {};\n\t\t\tvar cachedData = {\n\n\t\t\t\tmeshes: new Map(),\n\t\t\t\tattributes: new Map(),\n\t\t\t\tattributesNormalized: new Map(),\n\t\t\t\tmaterials: new Map(),\n\t\t\t\ttextures: new Map(),\n\t\t\t\timages: new Map()\n\n\t\t\t};\n\n\t\t\tvar cachedCanvas;\n\n\t\t\tvar uids = new Map();\n\t\t\tvar uid = 0;\n\n\t\t\t/**\n\t\t\t * Assign and return a temporal unique id for an object\n\t\t\t * especially which doesn't have .uuid\n\t\t\t * @param  {Object} object\n\t\t\t * @return {Integer}\n\t\t\t */\n\t\t\tfunction getUID( object ) {\n\n\t\t\t\tif ( ! uids.has( object ) ) uids.set( object, uid ++ );\n\n\t\t\t\treturn uids.get( object );\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Compare two arrays\n\t\t\t * @param  {Array} array1 Array 1 to compare\n\t\t\t * @param  {Array} array2 Array 2 to compare\n\t\t\t * @return {Boolean}        Returns true if both arrays are equal\n\t\t\t */\n\t\t\tfunction equalArray( array1, array2 ) {\n\n\t\t\t\treturn ( array1.length === array2.length ) && array1.every( function ( element, index ) {\n\n\t\t\t\t\treturn element === array2[ index ];\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Converts a string to an ArrayBuffer.\n\t\t\t * @param  {string} text\n\t\t\t * @return {ArrayBuffer}\n\t\t\t */\n\t\t\tfunction stringToArrayBuffer( text ) {\n\n\t\t\t\tif ( window.TextEncoder !== undefined ) {\n\n\t\t\t\t\treturn new TextEncoder().encode( text ).buffer;\n\n\t\t\t\t}\n\n\t\t\t\tvar array = new Uint8Array( new ArrayBuffer( text.length ) );\n\n\t\t\t\tfor ( var i = 0, il = text.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar value = text.charCodeAt( i );\n\n\t\t\t\t\t// Replacing multi-byte character with space(0x20).\n\t\t\t\t\tarray[ i ] = value > 0xFF ? 0x20 : value;\n\n\t\t\t\t}\n\n\t\t\t\treturn array.buffer;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Get the min and max vectors from the given attribute\n\t\t\t * @param  {THREE.BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n\t\t\t * @param  {Integer} start\n\t\t\t * @param  {Integer} count\n\t\t\t * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n\t\t\t */\n\t\t\tfunction getMinMax( attribute, start, count ) {\n\n\t\t\t\tvar output = {\n\n\t\t\t\t\tmin: new Array( attribute.itemSize ).fill( Number.POSITIVE_INFINITY ),\n\t\t\t\t\tmax: new Array( attribute.itemSize ).fill( Number.NEGATIVE_INFINITY )\n\n\t\t\t\t};\n\n\t\t\t\tfor ( var i = start; i < start + count; i ++ ) {\n\n\t\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\t\t\tvar value = attribute.array[ i * attribute.itemSize + a ];\n\t\t\t\t\t\toutput.min[ a ] = Math.min( output.min[ a ], value );\n\t\t\t\t\t\toutput.max[ a ] = Math.max( output.max[ a ], value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Checks if image size is POT.\n\t\t\t *\n\t\t\t * @param {Image} image The image to be checked.\n\t\t\t * @returns {Boolean} Returns true if image size is POT.\n\t\t\t *\n\t\t\t */\n\t\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\t\treturn THREE.MathUtils.isPowerOfTwo( image.width ) && THREE.MathUtils.isPowerOfTwo( image.height );\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Checks if normal attribute values are normalized.\n\t\t\t *\n\t\t\t * @param {THREE.BufferAttribute} normal\n\t\t\t * @returns {Boolean}\n\t\t\t *\n\t\t\t */\n\t\t\tfunction isNormalizedNormalAttribute( normal ) {\n\n\t\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tvar v = new THREE.Vector3();\n\n\t\t\t\tfor ( var i = 0, il = normal.count; i < il; i ++ ) {\n\n\t\t\t\t\t// 0.0005 is from glTF-validator\n\t\t\t\t\tif ( Math.abs( v.fromArray( normal.array, i * 3 ).length() - 1.0 ) > 0.0005 ) return false;\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Creates normalized normal buffer attribute.\n\t\t\t *\n\t\t\t * @param {THREE.BufferAttribute} normal\n\t\t\t * @returns {THREE.BufferAttribute}\n\t\t\t *\n\t\t\t */\n\t\t\tfunction createNormalizedNormalAttribute( normal ) {\n\n\t\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\n\n\t\t\t\t\treturn cachedData.attributesNormalized.get( normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar attribute = normal.clone();\n\n\t\t\t\tvar v = new THREE.Vector3();\n\n\t\t\t\tfor ( var i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tv.fromArray( attribute.array, i * 3 );\n\n\t\t\t\t\tif ( v.x === 0 && v.y === 0 && v.z === 0 ) {\n\n\t\t\t\t\t\t// if values can't be normalized set (1, 0, 0)\n\t\t\t\t\t\tv.setX( 1.0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv.normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tv.toArray( attribute.array, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t\tcachedData.attributesNormalized.set( normal, attribute );\n\n\t\t\t\treturn attribute;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n\t\t\t * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n\t\t\t *\n\t\t\t * @param {Integer} bufferSize The size the original buffer.\n\t\t\t * @returns {Integer} new buffer size with required padding.\n\t\t\t *\n\t\t\t */\n\t\t\tfunction getPaddedBufferSize( bufferSize ) {\n\n\t\t\t\treturn Math.ceil( bufferSize / 4 ) * 4;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Returns a buffer aligned to 4-byte boundary.\n\t\t\t *\n\t\t\t * @param {ArrayBuffer} arrayBuffer Buffer to pad\n\t\t\t * @param {Integer} paddingByte (Optional)\n\t\t\t * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n\t\t\t */\n\t\t\tfunction getPaddedArrayBuffer( arrayBuffer, paddingByte ) {\n\n\t\t\t\tpaddingByte = paddingByte || 0;\n\n\t\t\t\tvar paddedLength = getPaddedBufferSize( arrayBuffer.byteLength );\n\n\t\t\t\tif ( paddedLength !== arrayBuffer.byteLength ) {\n\n\t\t\t\t\tvar array = new Uint8Array( paddedLength );\n\t\t\t\t\tarray.set( new Uint8Array( arrayBuffer ) );\n\n\t\t\t\t\tif ( paddingByte !== 0 ) {\n\n\t\t\t\t\t\tfor ( var i = arrayBuffer.byteLength; i < paddedLength; i ++ ) {\n\n\t\t\t\t\t\t\tarray[ i ] = paddingByte;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array.buffer;\n\n\t\t\t\t}\n\n\t\t\t\treturn arrayBuffer;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Serializes a userData.\n\t\t\t *\n\t\t\t * @param {THREE.Object3D|THREE.Material} object\n\t\t\t * @param {Object} gltfProperty\n\t\t\t */\n\t\t\tfunction serializeUserData( object, gltfProperty ) {\n\n\t\t\t\tif ( Object.keys( object.userData ).length === 0 ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar json = JSON.parse( JSON.stringify( object.userData ) );\n\n\t\t\t\t\tif ( options.includeCustomExtensions && json.gltfExtensions ) {\n\n\t\t\t\t\t\tif ( gltfProperty.extensions === undefined ) {\n\n\t\t\t\t\t\t\tgltfProperty.extensions = {};\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var extensionName in json.gltfExtensions ) {\n\n\t\t\t\t\t\t\tgltfProperty.extensions[ extensionName ] = json.gltfExtensions[ extensionName ];\n\t\t\t\t\t\t\textensionsUsed[ extensionName ] = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete json.gltfExtensions;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Object.keys( json ).length > 0 ) {\n\n\t\t\t\t\t\tgltfProperty.extras = json;\n\n\t\t\t\t\t}\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: userData of \\'' + object.name + '\\' ' +\n\t\t\t\t\t\t'won\\'t be serialized because of JSON.stringify error - ' + error.message );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Applies a texture transform, if present, to the map definition. Requires\n\t\t\t * the KHR_texture_transform extension.\n\t\t\t */\n\t\t\tfunction applyTextureTransform( mapDef, texture ) {\n\n\t\t\t\tvar didTransform = false;\n\t\t\t\tvar transformDef = {};\n\n\t\t\t\tif ( texture.offset.x !== 0 || texture.offset.y !== 0 ) {\n\n\t\t\t\t\ttransformDef.offset = texture.offset.toArray();\n\t\t\t\t\tdidTransform = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.rotation !== 0 ) {\n\n\t\t\t\t\ttransformDef.rotation = texture.rotation;\n\t\t\t\t\tdidTransform = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.repeat.x !== 1 || texture.repeat.y !== 1 ) {\n\n\t\t\t\t\ttransformDef.scale = texture.repeat.toArray();\n\t\t\t\t\tdidTransform = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( didTransform ) {\n\n\t\t\t\t\tmapDef.extensions = mapDef.extensions || {};\n\t\t\t\t\tmapDef.extensions[ 'KHR_texture_transform' ] = transformDef;\n\t\t\t\t\textensionsUsed[ 'KHR_texture_transform' ] = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process a buffer to append to the default one.\n\t\t\t * @param  {ArrayBuffer} buffer\n\t\t\t * @return {Integer}\n\t\t\t */\n\t\t\tfunction processBuffer( buffer ) {\n\n\t\t\t\tif ( ! outputJSON.buffers ) {\n\n\t\t\t\t\toutputJSON.buffers = [ { byteLength: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// All buffers are merged before export.\n\t\t\t\tbuffers.push( buffer );\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process and generate a BufferView\n\t\t\t * @param  {THREE.BufferAttribute} attribute\n\t\t\t * @param  {number} componentType\n\t\t\t * @param  {number} start\n\t\t\t * @param  {number} count\n\t\t\t * @param  {number} target (Optional) Target usage of the BufferView\n\t\t\t * @return {Object}\n\t\t\t */\n\t\t\tfunction processBufferView( attribute, componentType, start, count, target ) {\n\n\t\t\t\tif ( ! outputJSON.bufferViews ) {\n\n\t\t\t\t\toutputJSON.bufferViews = [];\n\n\t\t\t\t}\n\n\t\t\t\t// Create a new dataview and dump the attribute's array into it\n\n\t\t\t\tvar componentSize;\n\n\t\t\t\tif ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\t\tcomponentSize = 1;\n\n\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\t\tcomponentSize = 2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcomponentSize = 4;\n\n\t\t\t\t}\n\n\t\t\t\tvar byteLength = getPaddedBufferSize( count * attribute.itemSize * componentSize );\n\t\t\t\tvar dataView = new DataView( new ArrayBuffer( byteLength ) );\n\t\t\t\tvar offset = 0;\n\n\t\t\t\tfor ( var i = start; i < start + count; i ++ ) {\n\n\t\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\t\t\t// @TODO Fails on InterleavedBufferAttribute, and could probably be\n\t\t\t\t\t\t// optimized for normal BufferAttribute.\n\t\t\t\t\t\tvar value = attribute.array[ i * attribute.itemSize + a ];\n\n\t\t\t\t\t\tif ( componentType === WEBGL_CONSTANTS.FLOAT ) {\n\n\t\t\t\t\t\t\tdataView.setFloat32( offset, value, true );\n\n\t\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_INT ) {\n\n\t\t\t\t\t\t\tdataView.setUint32( offset, value, true );\n\n\t\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\t\t\t\tdataView.setUint16( offset, value, true );\n\n\t\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\t\t\t\tdataView.setUint8( offset, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toffset += componentSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfBufferView = {\n\n\t\t\t\t\tbuffer: processBuffer( dataView.buffer ),\n\t\t\t\t\tbyteOffset: byteOffset,\n\t\t\t\t\tbyteLength: byteLength\n\n\t\t\t\t};\n\n\t\t\t\tif ( target !== undefined ) gltfBufferView.target = target;\n\n\t\t\t\tif ( target === WEBGL_CONSTANTS.ARRAY_BUFFER ) {\n\n\t\t\t\t\t// Only define byteStride for vertex attributes.\n\t\t\t\t\tgltfBufferView.byteStride = attribute.itemSize * componentSize;\n\n\t\t\t\t}\n\n\t\t\t\tbyteOffset += byteLength;\n\n\t\t\t\toutputJSON.bufferViews.push( gltfBufferView );\n\n\t\t\t\t// @TODO Merge bufferViews where possible.\n\t\t\t\tvar output = {\n\n\t\t\t\t\tid: outputJSON.bufferViews.length - 1,\n\t\t\t\t\tbyteLength: 0\n\n\t\t\t\t};\n\n\t\t\t\treturn output;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process and generate a BufferView from an image Blob.\n\t\t\t * @param {Blob} blob\n\t\t\t * @return {Promise<Integer>}\n\t\t\t */\n\t\t\tfunction processBufferViewImage( blob ) {\n\n\t\t\t\tif ( ! outputJSON.bufferViews ) {\n\n\t\t\t\t\toutputJSON.bufferViews = [];\n\n\t\t\t\t}\n\n\t\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t\tvar buffer = getPaddedArrayBuffer( reader.result );\n\n\t\t\t\t\t\tvar bufferView = {\n\t\t\t\t\t\t\tbuffer: processBuffer( buffer ),\n\t\t\t\t\t\t\tbyteOffset: byteOffset,\n\t\t\t\t\t\t\tbyteLength: buffer.byteLength\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t\t\t\t\toutputJSON.bufferViews.push( bufferView );\n\n\t\t\t\t\t\tresolve( outputJSON.bufferViews.length - 1 );\n\n\t\t\t\t\t};\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process attribute to generate an accessor\n\t\t\t * @param  {THREE.BufferAttribute} attribute Attribute to process\n\t\t\t * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n\t\t\t * @param  {Integer} start (Optional)\n\t\t\t * @param  {Integer} count (Optional)\n\t\t\t * @return {Integer}           Index of the processed accessor on the \"accessors\" array\n\t\t\t */\n\t\t\tfunction processAccessor( attribute, geometry, start, count ) {\n\n\t\t\t\tvar types = {\n\n\t\t\t\t\t1: 'SCALAR',\n\t\t\t\t\t2: 'VEC2',\n\t\t\t\t\t3: 'VEC3',\n\t\t\t\t\t4: 'VEC4',\n\t\t\t\t\t16: 'MAT4'\n\n\t\t\t\t};\n\n\t\t\t\tvar componentType;\n\n\t\t\t\t// Detect the component type of the attribute array (float, uint or ushort)\n\t\t\t\tif ( attribute.array.constructor === Float32Array ) {\n\n\t\t\t\t\tcomponentType = WEBGL_CONSTANTS.FLOAT;\n\n\t\t\t\t} else if ( attribute.array.constructor === Uint32Array ) {\n\n\t\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n\n\t\t\t\t} else if ( attribute.array.constructor === Uint16Array ) {\n\n\t\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n\n\t\t\t\t} else if ( attribute.array.constructor === Uint8Array ) {\n\n\t\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Unsupported bufferAttribute component type.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( start === undefined ) start = 0;\n\t\t\t\tif ( count === undefined ) count = attribute.count;\n\n\t\t\t\t// @TODO Indexed buffer geometry with drawRange not supported yet\n\t\t\t\tif ( options.truncateDrawRange && geometry !== undefined && geometry.index === null ) {\n\n\t\t\t\t\tvar end = start + count;\n\t\t\t\t\tvar end2 = geometry.drawRange.count === Infinity\n\t\t\t\t\t\t? attribute.count\n\t\t\t\t\t\t: geometry.drawRange.start + geometry.drawRange.count;\n\n\t\t\t\t\tstart = Math.max( start, geometry.drawRange.start );\n\t\t\t\t\tcount = Math.min( end, end2 ) - start;\n\n\t\t\t\t\tif ( count < 0 ) count = 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Skip creating an accessor if the attribute doesn't have data to export\n\t\t\t\tif ( count === 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar minMax = getMinMax( attribute, start, count );\n\n\t\t\t\tvar bufferViewTarget;\n\n\t\t\t\t// If geometry isn't provided, don't infer the target usage of the bufferView. For\n\t\t\t\t// animation samplers, target must not be set.\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tbufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n\n\t\t\t\t}\n\n\t\t\t\tvar bufferView = processBufferView( attribute, componentType, start, count, bufferViewTarget );\n\n\t\t\t\tvar gltfAccessor = {\n\n\t\t\t\t\tbufferView: bufferView.id,\n\t\t\t\t\tbyteOffset: bufferView.byteOffset,\n\t\t\t\t\tcomponentType: componentType,\n\t\t\t\t\tcount: count,\n\t\t\t\t\tmax: minMax.max,\n\t\t\t\t\tmin: minMax.min,\n\t\t\t\t\ttype: types[ attribute.itemSize ]\n\n\t\t\t\t};\n\n\t\t\t\tif ( ! outputJSON.accessors ) {\n\n\t\t\t\t\toutputJSON.accessors = [];\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.accessors.push( gltfAccessor );\n\n\t\t\t\treturn outputJSON.accessors.length - 1;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process image\n\t\t\t * @param  {Image} image to process\n\t\t\t * @param  {Integer} format of the image (e.g. THREE.RGBFormat, THREE.RGBAFormat etc)\n\t\t\t * @param  {Boolean} flipY before writing out the image\n\t\t\t * @return {Integer}     Index of the processed texture in the \"images\" array\n\t\t\t */\n\t\t\tfunction processImage( image, format, flipY ) {\n\n\t\t\t\tif ( ! cachedData.images.has( image ) ) {\n\n\t\t\t\t\tcachedData.images.set( image, {} );\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedImages = cachedData.images.get( image );\n\t\t\t\tvar mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';\n\t\t\t\tvar key = mimeType + \":flipY/\" + flipY.toString();\n\n\t\t\t\tif ( cachedImages[ key ] !== undefined ) {\n\n\t\t\t\t\treturn cachedImages[ key ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! outputJSON.images ) {\n\n\t\t\t\t\toutputJSON.images = [];\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfImage = { mimeType: mimeType };\n\n\t\t\t\tif ( options.embedImages ) {\n\n\t\t\t\t\tvar canvas = cachedCanvas = cachedCanvas || document.createElement( 'canvas' );\n\n\t\t\t\t\tcanvas.width = Math.min( image.width, options.maxTextureSize );\n\t\t\t\t\tcanvas.height = Math.min( image.height, options.maxTextureSize );\n\n\t\t\t\t\tif ( options.forcePowerOfTwoTextures && ! isPowerOfTwo( canvas ) ) {\n\n\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Resized non-power-of-two image.', image );\n\n\t\t\t\t\t\tcanvas.width = THREE.MathUtils.floorPowerOfTwo( canvas.width );\n\t\t\t\t\t\tcanvas.height = THREE.MathUtils.floorPowerOfTwo( canvas.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar ctx = canvas.getContext( '2d' );\n\n\t\t\t\t\tif ( flipY === true ) {\n\n\t\t\t\t\t\tctx.translate( 0, canvas.height );\n\t\t\t\t\t\tctx.scale( 1, - 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t\t\tpending.push( new Promise( function ( resolve ) {\n\n\t\t\t\t\t\t\tcanvas.toBlob( function ( blob ) {\n\n\t\t\t\t\t\t\t\tprocessBufferViewImage( blob ).then( function ( bufferViewIndex ) {\n\n\t\t\t\t\t\t\t\t\tgltfImage.bufferView = bufferViewIndex;\n\n\t\t\t\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}, mimeType );\n\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgltfImage.uri = canvas.toDataURL( mimeType );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgltfImage.uri = image.src;\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.images.push( gltfImage );\n\n\t\t\t\tvar index = outputJSON.images.length - 1;\n\t\t\t\tcachedImages[ key ] = index;\n\n\t\t\t\treturn index;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process sampler\n\t\t\t * @param  {Texture} map Texture to process\n\t\t\t * @return {Integer}     Index of the processed texture in the \"samplers\" array\n\t\t\t */\n\t\t\tfunction processSampler( map ) {\n\n\t\t\t\tif ( ! outputJSON.samplers ) {\n\n\t\t\t\t\toutputJSON.samplers = [];\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfSampler = {\n\n\t\t\t\t\tmagFilter: THREE_TO_WEBGL[ map.magFilter ],\n\t\t\t\t\tminFilter: THREE_TO_WEBGL[ map.minFilter ],\n\t\t\t\t\twrapS: THREE_TO_WEBGL[ map.wrapS ],\n\t\t\t\t\twrapT: THREE_TO_WEBGL[ map.wrapT ]\n\n\t\t\t\t};\n\n\t\t\t\toutputJSON.samplers.push( gltfSampler );\n\n\t\t\t\treturn outputJSON.samplers.length - 1;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process texture\n\t\t\t * @param  {Texture} map Map to process\n\t\t\t * @return {Integer}     Index of the processed texture in the \"textures\" array\n\t\t\t */\n\t\t\tfunction processTexture( map ) {\n\n\t\t\t\tif ( cachedData.textures.has( map ) ) {\n\n\t\t\t\t\treturn cachedData.textures.get( map );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! outputJSON.textures ) {\n\n\t\t\t\t\toutputJSON.textures = [];\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfTexture = {\n\n\t\t\t\t\tsampler: processSampler( map ),\n\t\t\t\t\tsource: processImage( map.image, map.format, map.flipY )\n\n\t\t\t\t};\n\n\t\t\t\tif ( map.name ) {\n\n\t\t\t\t\tgltfTexture.name = map.name;\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.textures.push( gltfTexture );\n\n\t\t\t\tvar index = outputJSON.textures.length - 1;\n\t\t\t\tcachedData.textures.set( map, index );\n\n\t\t\t\treturn index;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process material\n\t\t\t * @param  {THREE.Material} material Material to process\n\t\t\t * @return {Integer}      Index of the processed material in the \"materials\" array\n\t\t\t */\n\t\t\tfunction processMaterial( material ) {\n\n\t\t\t\tif ( cachedData.materials.has( material ) ) {\n\n\t\t\t\t\treturn cachedData.materials.get( material );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: THREE.ShaderMaterial not supported.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! outputJSON.materials ) {\n\n\t\t\t\t\toutputJSON.materials = [];\n\n\t\t\t\t}\n\n\t\t\t\t// @QUESTION Should we avoid including any attribute that has the default value?\n\t\t\t\tvar gltfMaterial = {\n\n\t\t\t\t\tpbrMetallicRoughness: {}\n\n\t\t\t\t};\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\tgltfMaterial.extensions = { KHR_materials_unlit: {} };\n\n\t\t\t\t\textensionsUsed[ 'KHR_materials_unlit' ] = true;\n\n\t\t\t\t} else if ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\t\tgltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\n\n\t\t\t\t\textensionsUsed[ 'KHR_materials_pbrSpecularGlossiness' ] = true;\n\n\t\t\t\t} else if ( ! material.isMeshStandardMaterial ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.' );\n\n\t\t\t\t}\n\n\t\t\t\t// pbrMetallicRoughness.baseColorFactor\n\t\t\t\tvar color = material.color.toArray().concat( [ material.opacity ] );\n\n\t\t\t\tif ( ! equalArray( color, [ 1, 1, 1, 1 ] ) ) {\n\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n\n\t\t\t\t} else if ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.0;\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n\n\t\t\t\t}\n\n\t\t\t\t// pbrSpecularGlossiness diffuse, specular and glossiness factor\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\t\tif ( gltfMaterial.pbrMetallicRoughness.baseColorFactor ) {\n\n\t\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar specularFactor = [ 1, 1, 1 ];\n\t\t\t\t\tmaterial.specular.toArray( specularFactor, 0 );\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n\n\t\t\t\t}\n\n\t\t\t\t// pbrMetallicRoughness.metallicRoughnessTexture\n\t\t\t\tif ( material.metalnessMap || material.roughnessMap ) {\n\n\t\t\t\t\tif ( material.metalnessMap === material.roughnessMap ) {\n\n\t\t\t\t\t\tvar metalRoughMapDef = { index: processTexture( material.metalnessMap ) };\n\t\t\t\t\t\tapplyTextureTransform( metalRoughMapDef, material.metalnessMap );\n\t\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\tvar baseColorMapDef = { index: processTexture( material.map ) };\n\t\t\t\t\tapplyTextureTransform( baseColorMapDef, material.map );\n\n\t\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n\n\t\t\t\t}\n\n\t\t\t\t// pbrSpecularGlossiness specular map\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial && material.specularMap ) {\n\n\t\t\t\t\tvar specularMapDef = { index: processTexture( material.specularMap ) };\n\t\t\t\t\tapplyTextureTransform( specularMapDef, material.specularMap );\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.emissive ) {\n\n\t\t\t\t\t// emissiveFactor\n\t\t\t\t\tvar emissive = material.emissive.clone().multiplyScalar( material.emissiveIntensity ).toArray();\n\n\t\t\t\t\tif ( ! equalArray( emissive, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\t\t\tgltfMaterial.emissiveFactor = emissive;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// emissiveTexture\n\t\t\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\t\t\tvar emissiveMapDef = { index: processTexture( material.emissiveMap ) };\n\t\t\t\t\t\tapplyTextureTransform( emissiveMapDef, material.emissiveMap );\n\t\t\t\t\t\tgltfMaterial.emissiveTexture = emissiveMapDef;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normalTexture\n\t\t\t\tif ( material.normalMap ) {\n\n\t\t\t\t\tvar normalMapDef = { index: processTexture( material.normalMap ) };\n\n\t\t\t\t\tif ( material.normalScale && material.normalScale.x !== - 1 ) {\n\n\t\t\t\t\t\tif ( material.normalScale.x !== material.normalScale.y ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnormalMapDef.scale = material.normalScale.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tapplyTextureTransform( normalMapDef, material.normalMap );\n\n\t\t\t\t\tgltfMaterial.normalTexture = normalMapDef;\n\n\t\t\t\t}\n\n\t\t\t\t// occlusionTexture\n\t\t\t\tif ( material.aoMap ) {\n\n\t\t\t\t\tvar occlusionMapDef = {\n\t\t\t\t\t\tindex: processTexture( material.aoMap ),\n\t\t\t\t\t\ttexCoord: 1\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( material.aoMapIntensity !== 1.0 ) {\n\n\t\t\t\t\t\tocclusionMapDef.strength = material.aoMapIntensity;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tapplyTextureTransform( occlusionMapDef, material.aoMap );\n\n\t\t\t\t\tgltfMaterial.occlusionTexture = occlusionMapDef;\n\n\t\t\t\t}\n\n\t\t\t\t// alphaMode\n\t\t\t\tif ( material.transparent ) {\n\n\t\t\t\t\tgltfMaterial.alphaMode = 'BLEND';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( material.alphaTest > 0.0 ) {\n\n\t\t\t\t\t\tgltfMaterial.alphaMode = 'MASK';\n\t\t\t\t\t\tgltfMaterial.alphaCutoff = material.alphaTest;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// doubleSided\n\t\t\t\tif ( material.side === THREE.DoubleSide ) {\n\n\t\t\t\t\tgltfMaterial.doubleSided = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.name !== '' ) {\n\n\t\t\t\t\tgltfMaterial.name = material.name;\n\n\t\t\t\t}\n\n\t\t\t\tserializeUserData( material, gltfMaterial );\n\n\t\t\t\toutputJSON.materials.push( gltfMaterial );\n\n\t\t\t\tvar index = outputJSON.materials.length - 1;\n\t\t\t\tcachedData.materials.set( material, index );\n\n\t\t\t\treturn index;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process mesh\n\t\t\t * @param  {THREE.Mesh} mesh Mesh to process\n\t\t\t * @return {Integer}      Index of the processed mesh in the \"meshes\" array\n\t\t\t */\n\t\t\tfunction processMesh( mesh ) {\n\n\t\t\t\tvar meshCacheKeyParts = [ mesh.geometry.uuid ];\n\t\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\t\tfor ( var i = 0, l = mesh.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tmeshCacheKeyParts.push( mesh.material[ i ].uuid\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmeshCacheKeyParts.push( mesh.material.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar meshCacheKey = meshCacheKeyParts.join( ':' );\n\t\t\t\tif ( cachedData.meshes.has( meshCacheKey ) ) {\n\n\t\t\t\t\treturn cachedData.meshes.get( meshCacheKey );\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\tvar mode;\n\n\t\t\t\t// Use the correct mode\n\t\t\t\tif ( mesh.isLineSegments ) {\n\n\t\t\t\t\tmode = WEBGL_CONSTANTS.LINES;\n\n\t\t\t\t} else if ( mesh.isLineLoop ) {\n\n\t\t\t\t\tmode = WEBGL_CONSTANTS.LINE_LOOP;\n\n\t\t\t\t} else if ( mesh.isLine ) {\n\n\t\t\t\t\tmode = WEBGL_CONSTANTS.LINE_STRIP;\n\n\t\t\t\t} else if ( mesh.isPoints ) {\n\n\t\t\t\t\tmode = WEBGL_CONSTANTS.POINTS;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Exporting THREE.Geometry will increase file size. Use THREE.BufferGeometry instead.' );\n\t\t\t\t\tgeometry = new THREE.BufferGeometry().setFromObject( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfMesh = {};\n\n\t\t\t\tvar attributes = {};\n\t\t\t\tvar primitives = [];\n\t\t\t\tvar targets = [];\n\n\t\t\t\t// Conversion between attributes names in threejs and gltf spec\n\t\t\t\tvar nameConversion = {\n\n\t\t\t\t\tuv: 'TEXCOORD_0',\n\t\t\t\t\tuv2: 'TEXCOORD_1',\n\t\t\t\t\tcolor: 'COLOR_0',\n\t\t\t\t\tskinWeight: 'WEIGHTS_0',\n\t\t\t\t\tskinIndex: 'JOINTS_0'\n\n\t\t\t\t};\n\n\t\t\t\tvar originalNormal = geometry.getAttribute( 'normal' );\n\n\t\t\t\tif ( originalNormal !== undefined && ! isNormalizedNormalAttribute( originalNormal ) ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.' );\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', createNormalizedNormalAttribute( originalNormal ) );\n\n\t\t\t\t}\n\n\t\t\t\t// @QUESTION Detect if .vertexColors = true?\n\t\t\t\t// For every attribute create an accessor\n\t\t\t\tvar modifiedAttribute = null;\n\t\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t\t// Ignore morph target attributes, which are exported later.\n\t\t\t\t\tif ( attributeName.substr( 0, 5 ) === 'morph' ) continue;\n\n\t\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\tattributeName = nameConversion[ attributeName ] || attributeName.toUpperCase();\n\n\t\t\t\t\t// Prefix all geometry attributes except the ones specifically\n\t\t\t\t\t// listed in the spec; non-spec attributes are considered custom.\n\t\t\t\t\tvar validVertexAttributes =\n\t\t\t\t\t\t\t/^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n\t\t\t\t\tif ( ! validVertexAttributes.test( attributeName ) ) {\n\n\t\t\t\t\t\tattributeName = '_' + attributeName;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\n\n\t\t\t\t\t\tattributes[ attributeName ] = cachedData.attributes.get( getUID( attribute ) );\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\t\t\t\t\tmodifiedAttribute = null;\n\t\t\t\t\tvar array = attribute.array;\n\t\t\t\t\tif ( attributeName === 'JOINTS_0' &&\n\t\t\t\t\t\t! ( array instanceof Uint16Array ) &&\n\t\t\t\t\t\t! ( array instanceof Uint8Array ) ) {\n\n\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.' );\n\t\t\t\t\t\tmodifiedAttribute = new THREE.BufferAttribute( new Uint16Array( array ), attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar accessor = processAccessor( modifiedAttribute || attribute, geometry );\n\t\t\t\t\tif ( accessor !== null ) {\n\n\t\t\t\t\t\tattributes[ attributeName ] = accessor;\n\t\t\t\t\t\tcachedData.attributes.set( getUID( attribute ), accessor );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( originalNormal !== undefined ) geometry.setAttribute( 'normal', originalNormal );\n\n\t\t\t\t// Skip if no exportable attributes found\n\t\t\t\tif ( Object.keys( attributes ).length === 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Morph targets\n\t\t\t\tif ( mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0 ) {\n\n\t\t\t\t\tvar weights = [];\n\t\t\t\t\tvar targetNames = [];\n\t\t\t\t\tvar reverseDictionary = {};\n\n\t\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) {\n\n\t\t\t\t\t\tfor ( var key in mesh.morphTargetDictionary ) {\n\n\t\t\t\t\t\t\treverseDictionary[ mesh.morphTargetDictionary[ key ] ] = key;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < mesh.morphTargetInfluences.length; ++ i ) {\n\n\t\t\t\t\t\tvar target = {};\n\n\t\t\t\t\t\tvar warned = false;\n\n\t\t\t\t\t\tfor ( var attributeName in geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\t// glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n\t\t\t\t\t\t\t// Three.js doesn't support TANGENT yet.\n\n\t\t\t\t\t\t\tif ( attributeName !== 'position' && attributeName !== 'normal' ) {\n\n\t\t\t\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Only POSITION and NORMAL morph are supported.' );\n\t\t\t\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar attribute = geometry.morphAttributes[ attributeName ][ i ];\n\t\t\t\t\t\t\tvar gltfAttributeName = attributeName.toUpperCase();\n\n\t\t\t\t\t\t\t// Three.js morph attribute has absolute values while the one of glTF has relative values.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// glTF 2.0 Specification:\n\t\t\t\t\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n\t\t\t\t\t\t\tvar baseAttribute = geometry.attributes[ attributeName ];\n\n\t\t\t\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\n\n\t\t\t\t\t\t\t\ttarget[ gltfAttributeName ] = cachedData.attributes.get( getUID( attribute ) );\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Clones attribute not to override\n\t\t\t\t\t\t\tvar relativeAttribute = attribute.clone();\n\n\t\t\t\t\t\t\tif ( ! geometry.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\tfor ( var j = 0, jl = attribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\t\trelativeAttribute.setXYZ(\n\t\t\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\t\t\tattribute.getX( j ) - baseAttribute.getX( j ),\n\t\t\t\t\t\t\t\t\t\tattribute.getY( j ) - baseAttribute.getY( j ),\n\t\t\t\t\t\t\t\t\t\tattribute.getZ( j ) - baseAttribute.getZ( j )\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttarget[ gltfAttributeName ] = processAccessor( relativeAttribute, geometry );\n\t\t\t\t\t\t\tcachedData.attributes.set( getUID( baseAttribute ), target[ gltfAttributeName ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargets.push( target );\n\n\t\t\t\t\t\tweights.push( mesh.morphTargetInfluences[ i ] );\n\t\t\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) targetNames.push( reverseDictionary[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgltfMesh.weights = weights;\n\n\t\t\t\t\tif ( targetNames.length > 0 ) {\n\n\t\t\t\t\t\tgltfMesh.extras = {};\n\t\t\t\t\t\tgltfMesh.extras.targetNames = targetNames;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar forceIndices = options.forceIndices;\n\t\t\t\tvar isMultiMaterial = Array.isArray( mesh.material );\n\n\t\t\t\tif ( isMultiMaterial && geometry.groups.length === 0 ) return null;\n\n\t\t\t\tif ( ! forceIndices && geometry.index === null && isMultiMaterial ) {\n\n\t\t\t\t\t// temporal workaround.\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Creating index for non-indexed multi-material mesh.' );\n\t\t\t\t\tforceIndices = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar didForceIndices = false;\n\n\t\t\t\tif ( geometry.index === null && forceIndices ) {\n\n\t\t\t\t\tvar indices = [];\n\n\t\t\t\t\tfor ( var i = 0, il = geometry.attributes.position.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tindices[ i ] = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\n\t\t\t\t\tdidForceIndices = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar materials = isMultiMaterial ? mesh.material : [ mesh.material ];\n\t\t\t\tvar groups = isMultiMaterial ? geometry.groups : [ { materialIndex: 0, start: undefined, count: undefined } ];\n\n\t\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar primitive = {\n\t\t\t\t\t\tmode: mode,\n\t\t\t\t\t\tattributes: attributes,\n\t\t\t\t\t};\n\n\t\t\t\t\tserializeUserData( geometry, primitive );\n\n\t\t\t\t\tif ( targets.length > 0 ) primitive.targets = targets;\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar cacheKey = getUID( geometry.index );\n\n\t\t\t\t\t\tif ( groups[ i ].start !== undefined || groups[ i ].count !== undefined ) {\n\n\t\t\t\t\t\t\tcacheKey += ':' + groups[ i ].start + ':' + groups[ i ].count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( cachedData.attributes.has( cacheKey ) ) {\n\n\t\t\t\t\t\t\tprimitive.indices = cachedData.attributes.get( cacheKey );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tprimitive.indices = processAccessor( geometry.index, geometry, groups[ i ].start, groups[ i ].count );\n\t\t\t\t\t\t\tcachedData.attributes.set( cacheKey, primitive.indices );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.indices === null ) delete primitive.indices;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar material = processMaterial( materials[ groups[ i ].materialIndex ] );\n\n\t\t\t\t\tif ( material !== null ) {\n\n\t\t\t\t\t\tprimitive.material = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tprimitives.push( primitive );\n\n\t\t\t\t}\n\n\t\t\t\tif ( didForceIndices ) {\n\n\t\t\t\t\tgeometry.setIndex( null );\n\n\t\t\t\t}\n\n\t\t\t\tgltfMesh.primitives = primitives;\n\n\t\t\t\tif ( ! outputJSON.meshes ) {\n\n\t\t\t\t\toutputJSON.meshes = [];\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.meshes.push( gltfMesh );\n\n\t\t\t\tvar index = outputJSON.meshes.length - 1;\n\t\t\t\tcachedData.meshes.set( meshCacheKey, index );\n\n\t\t\t\treturn index;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process camera\n\t\t\t * @param  {THREE.Camera} camera Camera to process\n\t\t\t * @return {Integer}      Index of the processed mesh in the \"camera\" array\n\t\t\t */\n\t\t\tfunction processCamera( camera ) {\n\n\t\t\t\tif ( ! outputJSON.cameras ) {\n\n\t\t\t\t\toutputJSON.cameras = [];\n\n\t\t\t\t}\n\n\t\t\t\tvar isOrtho = camera.isOrthographicCamera;\n\n\t\t\t\tvar gltfCamera = {\n\n\t\t\t\t\ttype: isOrtho ? 'orthographic' : 'perspective'\n\n\t\t\t\t};\n\n\t\t\t\tif ( isOrtho ) {\n\n\t\t\t\t\tgltfCamera.orthographic = {\n\n\t\t\t\t\t\txmag: camera.right * 2,\n\t\t\t\t\t\tymag: camera.top * 2,\n\t\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgltfCamera.perspective = {\n\n\t\t\t\t\t\taspectRatio: camera.aspect,\n\t\t\t\t\t\tyfov: THREE.MathUtils.degToRad( camera.fov ),\n\t\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tif ( camera.name !== '' ) {\n\n\t\t\t\t\tgltfCamera.name = camera.type;\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.cameras.push( gltfCamera );\n\n\t\t\t\treturn outputJSON.cameras.length - 1;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Creates glTF animation entry from AnimationClip object.\n\t\t\t *\n\t\t\t * Status:\n\t\t\t * - Only properties listed in PATH_PROPERTIES may be animated.\n\t\t\t *\n\t\t\t * @param {THREE.AnimationClip} clip\n\t\t\t * @param {THREE.Object3D} root\n\t\t\t * @return {number}\n\t\t\t */\n\t\t\tfunction processAnimation( clip, root ) {\n\n\t\t\t\tif ( ! outputJSON.animations ) {\n\n\t\t\t\t\toutputJSON.animations = [];\n\n\t\t\t\t}\n\n\t\t\t\tclip = THREE.GLTFExporter.Utils.mergeMorphTargetTracks( clip.clone(), root );\n\n\t\t\t\tvar tracks = clip.tracks;\n\t\t\t\tvar channels = [];\n\t\t\t\tvar samplers = [];\n\n\t\t\t\tfor ( var i = 0; i < tracks.length; ++ i ) {\n\n\t\t\t\t\tvar track = tracks[ i ];\n\t\t\t\t\tvar trackBinding = THREE.PropertyBinding.parseTrackName( track.name );\n\t\t\t\t\tvar trackNode = THREE.PropertyBinding.findNode( root, trackBinding.nodeName );\n\t\t\t\t\tvar trackProperty = PATH_PROPERTIES[ trackBinding.propertyName ];\n\n\t\t\t\t\tif ( trackBinding.objectName === 'bones' ) {\n\n\t\t\t\t\t\tif ( trackNode.isSkinnedMesh === true ) {\n\n\t\t\t\t\t\t\ttrackNode = trackNode.skeleton.getBoneByName( trackBinding.objectIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttrackNode = undefined;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! trackNode || ! trackProperty ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Could not export animation track \"%s\".', track.name );\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar inputItemSize = 1;\n\t\t\t\t\tvar outputItemSize = track.values.length / track.times.length;\n\n\t\t\t\t\tif ( trackProperty === PATH_PROPERTIES.morphTargetInfluences ) {\n\n\t\t\t\t\t\toutputItemSize /= trackNode.morphTargetInfluences.length;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar interpolation;\n\n\t\t\t\t\t// @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n\n\t\t\t\t\t// Detecting glTF cubic spline interpolant by checking factory method's special property\n\t\t\t\t\t// GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n\t\t\t\t\t// valid value from .getInterpolation().\n\t\t\t\t\tif ( track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true ) {\n\n\t\t\t\t\t\tinterpolation = 'CUBICSPLINE';\n\n\t\t\t\t\t\t// itemSize of CUBICSPLINE keyframe is 9\n\t\t\t\t\t\t// (VEC3 * 3: inTangent, splineVertex, and outTangent)\n\t\t\t\t\t\t// but needs to be stored as VEC3 so dividing by 3 here.\n\t\t\t\t\t\toutputItemSize /= 3;\n\n\t\t\t\t\t} else if ( track.getInterpolation() === THREE.InterpolateDiscrete ) {\n\n\t\t\t\t\t\tinterpolation = 'STEP';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinterpolation = 'LINEAR';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsamplers.push( {\n\n\t\t\t\t\t\tinput: processAccessor( new THREE.BufferAttribute( track.times, inputItemSize ) ),\n\t\t\t\t\t\toutput: processAccessor( new THREE.BufferAttribute( track.values, outputItemSize ) ),\n\t\t\t\t\t\tinterpolation: interpolation\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tchannels.push( {\n\n\t\t\t\t\t\tsampler: samplers.length - 1,\n\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\tnode: nodeMap.get( trackNode ),\n\t\t\t\t\t\t\tpath: trackProperty\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.animations.push( {\n\n\t\t\t\t\tname: clip.name || 'clip_' + outputJSON.animations.length,\n\t\t\t\t\tsamplers: samplers,\n\t\t\t\t\tchannels: channels\n\n\t\t\t\t} );\n\n\t\t\t\treturn outputJSON.animations.length - 1;\n\n\t\t\t}\n\n\t\t\tfunction processSkin( object ) {\n\n\t\t\t\tvar node = outputJSON.nodes[ nodeMap.get( object ) ];\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton === undefined ) return null;\n\n\t\t\t\tvar rootJoint = object.skeleton.bones[ 0 ];\n\n\t\t\t\tif ( rootJoint === undefined ) return null;\n\n\t\t\t\tvar joints = [];\n\t\t\t\tvar inverseBindMatrices = new Float32Array( skeleton.bones.length * 16 );\n\n\t\t\t\tfor ( var i = 0; i < skeleton.bones.length; ++ i ) {\n\n\t\t\t\t\tjoints.push( nodeMap.get( skeleton.bones[ i ] ) );\n\n\t\t\t\t\tskeleton.boneInverses[ i ].toArray( inverseBindMatrices, i * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputJSON.skins === undefined ) {\n\n\t\t\t\t\toutputJSON.skins = [];\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.skins.push( {\n\n\t\t\t\t\tinverseBindMatrices: processAccessor( new THREE.BufferAttribute( inverseBindMatrices, 16 ) ),\n\t\t\t\t\tjoints: joints,\n\t\t\t\t\tskeleton: nodeMap.get( rootJoint )\n\n\t\t\t\t} );\n\n\t\t\t\tvar skinIndex = node.skin = outputJSON.skins.length - 1;\n\n\t\t\t\treturn skinIndex;\n\n\t\t\t}\n\n\t\t\tfunction processLight( light ) {\n\n\t\t\t\tvar lightDef = {};\n\n\t\t\t\tif ( light.name ) lightDef.name = light.name;\n\n\t\t\t\tlightDef.color = light.color.toArray();\n\n\t\t\t\tlightDef.intensity = light.intensity;\n\n\t\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\t\tlightDef.type = 'directional';\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tlightDef.type = 'point';\n\t\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tlightDef.type = 'spot';\n\t\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\t\t\t\t\tlightDef.spot = {};\n\t\t\t\t\tlightDef.spot.innerConeAngle = ( light.penumbra - 1.0 ) * light.angle * - 1.0;\n\t\t\t\t\tlightDef.spot.outerConeAngle = light.angle;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light.decay !== undefined && light.decay !== 2 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, '\n\t\t\t\t\t\t+ 'and expects light.decay=2.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( light.target\n\t\t\t\t\t\t&& ( light.target.parent !== light\n\t\t\t\t\t\t || light.target.position.x !== 0\n\t\t\t\t\t\t || light.target.position.y !== 0\n\t\t\t\t\t\t || light.target.position.z !== - 1 ) ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light direction may be lost. For best results, '\n\t\t\t\t\t\t+ 'make light.target a child of the light with position 0,0,-1.' );\n\n\t\t\t\t}\n\n\t\t\t\tvar lights = outputJSON.extensions[ 'KHR_lights_punctual' ].lights;\n\t\t\t\tlights.push( lightDef );\n\t\t\t\treturn lights.length - 1;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process Object3D node\n\t\t\t * @param  {THREE.Object3D} node Object3D to processNode\n\t\t\t * @return {Integer}      Index of the node in the nodes list\n\t\t\t */\n\t\t\tfunction processNode( object ) {\n\n\t\t\t\tif ( ! outputJSON.nodes ) {\n\n\t\t\t\t\toutputJSON.nodes = [];\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfNode = {};\n\n\t\t\t\tif ( options.trs ) {\n\n\t\t\t\t\tvar rotation = object.quaternion.toArray();\n\t\t\t\t\tvar position = object.position.toArray();\n\t\t\t\t\tvar scale = object.scale.toArray();\n\n\t\t\t\t\tif ( ! equalArray( rotation, [ 0, 0, 0, 1 ] ) ) {\n\n\t\t\t\t\t\tgltfNode.rotation = rotation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! equalArray( position, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\t\t\tgltfNode.translation = position;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! equalArray( scale, [ 1, 1, 1 ] ) ) {\n\n\t\t\t\t\t\tgltfNode.scale = scale;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( object.matrixAutoUpdate ) {\n\n\t\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! equalArray( object.matrix.elements, [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ] ) ) {\n\n\t\t\t\t\t\tgltfNode.matrix = object.matrix.elements;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// We don't export empty strings name because it represents no-name in Three.js.\n\t\t\t\tif ( object.name !== '' ) {\n\n\t\t\t\t\tgltfNode.name = String( object.name );\n\n\t\t\t\t}\n\n\t\t\t\tserializeUserData( object, gltfNode );\n\n\t\t\t\tif ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tvar mesh = processMesh( object );\n\n\t\t\t\t\tif ( mesh !== null ) {\n\n\t\t\t\t\t\tgltfNode.mesh = mesh;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isCamera ) {\n\n\t\t\t\t\tgltfNode.camera = processCamera( object );\n\n\t\t\t\t} else if ( object.isDirectionalLight || object.isPointLight || object.isSpotLight ) {\n\n\t\t\t\t\tif ( ! extensionsUsed[ 'KHR_lights_punctual' ] ) {\n\n\t\t\t\t\t\toutputJSON.extensions = outputJSON.extensions || {};\n\t\t\t\t\t\toutputJSON.extensions[ 'KHR_lights_punctual' ] = { lights: [] };\n\t\t\t\t\t\textensionsUsed[ 'KHR_lights_punctual' ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgltfNode.extensions = gltfNode.extensions || {};\n\t\t\t\t\tgltfNode.extensions[ 'KHR_lights_punctual' ] = { light: processLight( object ) };\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\tskins.push( object );\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.children.length > 0 ) {\n\n\t\t\t\t\tvar children = [];\n\n\t\t\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar child = object.children[ i ];\n\n\t\t\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\t\t\tvar node = processNode( child );\n\n\t\t\t\t\t\t\tif ( node !== null ) {\n\n\t\t\t\t\t\t\t\tchildren.push( node );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( children.length > 0 ) {\n\n\t\t\t\t\t\tgltfNode.children = children;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.nodes.push( gltfNode );\n\n\t\t\t\tvar nodeIndex = outputJSON.nodes.length - 1;\n\t\t\t\tnodeMap.set( object, nodeIndex );\n\n\t\t\t\treturn nodeIndex;\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Process Scene\n\t\t\t * @param  {THREE.Scene} node Scene to process\n\t\t\t */\n\t\t\tfunction processScene( scene ) {\n\n\t\t\t\tif ( ! outputJSON.scenes ) {\n\n\t\t\t\t\toutputJSON.scenes = [];\n\t\t\t\t\toutputJSON.scene = 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar gltfScene = {};\n\n\t\t\t\tif ( scene.name !== '' ) {\n\n\t\t\t\t\tgltfScene.name = scene.name;\n\n\t\t\t\t}\n\n\t\t\t\toutputJSON.scenes.push( gltfScene );\n\n\t\t\t\tvar nodes = [];\n\n\t\t\t\tfor ( var i = 0, l = scene.children.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = scene.children[ i ];\n\n\t\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\t\tvar node = processNode( child );\n\n\t\t\t\t\t\tif ( node !== null ) {\n\n\t\t\t\t\t\t\tnodes.push( node );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodes.length > 0 ) {\n\n\t\t\t\t\tgltfScene.nodes = nodes;\n\n\t\t\t\t}\n\n\t\t\t\tserializeUserData( scene, gltfScene );\n\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Creates a THREE.Scene to hold a list of objects and parse it\n\t\t\t * @param  {Array} objects List of objects to process\n\t\t\t */\n\t\t\tfunction processObjects( objects ) {\n\n\t\t\t\tvar scene = new THREE.Scene();\n\t\t\t\tscene.name = 'AuxScene';\n\n\t\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t\t// We push directly to children instead of calling `add` to prevent\n\t\t\t\t\t// modify the .parent and break its original scene and hierarchy\n\t\t\t\t\tscene.children.push( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tprocessScene( scene );\n\n\t\t\t}\n\n\t\t\tfunction processInput( input ) {\n\n\t\t\t\tinput = input instanceof Array ? input : [ input ];\n\n\t\t\t\tvar objectsWithoutScene = [];\n\n\t\t\t\tfor ( var i = 0; i < input.length; i ++ ) {\n\n\t\t\t\t\tif ( input[ i ] instanceof THREE.Scene ) {\n\n\t\t\t\t\t\tprocessScene( input[ i ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobjectsWithoutScene.push( input[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( objectsWithoutScene.length > 0 ) {\n\n\t\t\t\t\tprocessObjects( objectsWithoutScene );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < skins.length; ++ i ) {\n\n\t\t\t\t\tprocessSkin( skins[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < options.animations.length; ++ i ) {\n\n\t\t\t\t\tprocessAnimation( options.animations[ i ], input[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tprocessInput( input );\n\n\t\t\tPromise.all( pending ).then( function () {\n\n\t\t\t\t// Merge buffers.\n\t\t\t\tvar blob = new Blob( buffers, { type: 'application/octet-stream' } );\n\n\t\t\t\t// Declare extensions.\n\t\t\t\tvar extensionsUsedList = Object.keys( extensionsUsed );\n\t\t\t\tif ( extensionsUsedList.length > 0 ) outputJSON.extensionsUsed = extensionsUsedList;\n\n\t\t\t\t// Update bytelength of the single buffer.\n\t\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) outputJSON.buffers[ 0 ].byteLength = blob.size;\n\n\t\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\n\t\t\t\t\tvar GLB_HEADER_BYTES = 12;\n\t\t\t\t\tvar GLB_HEADER_MAGIC = 0x46546C67;\n\t\t\t\t\tvar GLB_VERSION = 2;\n\n\t\t\t\t\tvar GLB_CHUNK_PREFIX_BYTES = 8;\n\t\t\t\t\tvar GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\n\t\t\t\t\tvar GLB_CHUNK_TYPE_BIN = 0x004E4942;\n\n\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t\t// Binary chunk.\n\t\t\t\t\t\tvar binaryChunk = getPaddedArrayBuffer( reader.result );\n\t\t\t\t\t\tvar binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\t\tbinaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );\n\t\t\t\t\t\tbinaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true );\n\n\t\t\t\t\t\t// JSON chunk.\n\t\t\t\t\t\tvar jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( outputJSON ) ), 0x20 );\n\t\t\t\t\t\tvar jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\t\tjsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );\n\t\t\t\t\t\tjsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true );\n\n\t\t\t\t\t\t// GLB header.\n\t\t\t\t\t\tvar header = new ArrayBuffer( GLB_HEADER_BYTES );\n\t\t\t\t\t\tvar headerView = new DataView( header );\n\t\t\t\t\t\theaderView.setUint32( 0, GLB_HEADER_MAGIC, true );\n\t\t\t\t\t\theaderView.setUint32( 4, GLB_VERSION, true );\n\t\t\t\t\t\tvar totalByteLength = GLB_HEADER_BYTES\n\t\t\t\t\t\t\t+ jsonChunkPrefix.byteLength + jsonChunk.byteLength\n\t\t\t\t\t\t\t+ binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n\t\t\t\t\t\theaderView.setUint32( 8, totalByteLength, true );\n\n\t\t\t\t\t\tvar glbBlob = new Blob( [\n\t\t\t\t\t\t\theader,\n\t\t\t\t\t\t\tjsonChunkPrefix,\n\t\t\t\t\t\t\tjsonChunk,\n\t\t\t\t\t\t\tbinaryChunkPrefix,\n\t\t\t\t\t\t\tbinaryChunk\n\t\t\t\t\t\t], { type: 'application/octet-stream' } );\n\n\t\t\t\t\t\tvar glbReader = new window.FileReader();\n\t\t\t\t\t\tglbReader.readAsArrayBuffer( glbBlob );\n\t\t\t\t\t\tglbReader.onloadend = function () {\n\n\t\t\t\t\t\t\tonDone( glbReader.result );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) {\n\n\t\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\t\treader.readAsDataURL( blob );\n\t\t\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t\t\tvar base64data = reader.result;\n\t\t\t\t\t\t\toutputJSON.buffers[ 0 ].uri = base64data;\n\t\t\t\t\t\t\tonDone( outputJSON );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tonDone( outputJSON );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t};\n\n\tTHREE.GLTFExporter.Utils = {\n\n\t\tinsertKeyframe: function ( track, time ) {\n\n\t\t\tvar tolerance = 0.001; // 1ms\n\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\tvar times = new track.TimeBufferType( track.times.length + 1 );\n\t\t\tvar values = new track.ValueBufferType( track.values.length + valueSize );\n\t\t\tvar interpolant = track.createInterpolant( new track.ValueBufferType( valueSize ) );\n\n\t\t\tvar index;\n\n\t\t\tif ( track.times.length === 0 ) {\n\n\t\t\t\ttimes[ 0 ] = time;\n\n\t\t\t\tfor ( var i = 0; i < valueSize; i ++ ) {\n\n\t\t\t\t\tvalues[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tindex = 0;\n\n\t\t\t} else if ( time < track.times[ 0 ] ) {\n\n\t\t\t\tif ( Math.abs( track.times[ 0 ] - time ) < tolerance ) return 0;\n\n\t\t\t\ttimes[ 0 ] = time;\n\t\t\t\ttimes.set( track.times, 1 );\n\n\t\t\t\tvalues.set( interpolant.evaluate( time ), 0 );\n\t\t\t\tvalues.set( track.values, valueSize );\n\n\t\t\t\tindex = 0;\n\n\t\t\t} else if ( time > track.times[ track.times.length - 1 ] ) {\n\n\t\t\t\tif ( Math.abs( track.times[ track.times.length - 1 ] - time ) < tolerance ) {\n\n\t\t\t\t\treturn track.times.length - 1;\n\n\t\t\t\t}\n\n\t\t\t\ttimes[ times.length - 1 ] = time;\n\t\t\t\ttimes.set( track.times, 0 );\n\n\t\t\t\tvalues.set( track.values, 0 );\n\t\t\t\tvalues.set( interpolant.evaluate( time ), track.values.length );\n\n\t\t\t\tindex = times.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < track.times.length; i ++ ) {\n\n\t\t\t\t\tif ( Math.abs( track.times[ i ] - time ) < tolerance ) return i;\n\n\t\t\t\t\tif ( track.times[ i ] < time && track.times[ i + 1 ] > time ) {\n\n\t\t\t\t\t\ttimes.set( track.times.slice( 0, i + 1 ), 0 );\n\t\t\t\t\t\ttimes[ i + 1 ] = time;\n\t\t\t\t\t\ttimes.set( track.times.slice( i + 1 ), i + 2 );\n\n\t\t\t\t\t\tvalues.set( track.values.slice( 0, ( i + 1 ) * valueSize ), 0 );\n\t\t\t\t\t\tvalues.set( interpolant.evaluate( time ), ( i + 1 ) * valueSize );\n\t\t\t\t\t\tvalues.set( track.values.slice( ( i + 1 ) * valueSize ), ( i + 2 ) * valueSize );\n\n\t\t\t\t\t\tindex = i + 1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttrack.times = times;\n\t\t\ttrack.values = values;\n\n\t\t\treturn index;\n\n\t\t},\n\n\t\tmergeMorphTargetTracks: function ( clip, root ) {\n\n\t\t\tvar tracks = [];\n\t\t\tvar mergedTracks = {};\n\t\t\tvar sourceTracks = clip.tracks;\n\n\t\t\tfor ( var i = 0; i < sourceTracks.length; ++ i ) {\n\n\t\t\t\tvar sourceTrack = sourceTracks[ i ];\n\t\t\t\tvar sourceTrackBinding = THREE.PropertyBinding.parseTrackName( sourceTrack.name );\n\t\t\t\tvar sourceTrackNode = THREE.PropertyBinding.findNode( root, sourceTrackBinding.nodeName );\n\n\t\t\t\tif ( sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined ) {\n\n\t\t\t\t\t// Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n\t\t\t\t\ttracks.push( sourceTrack );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete\n\t\t\t\t\t&& sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear ) {\n\n\t\t\t\t\tif ( sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\t\t\t// This should never happen, because glTF morph target animations\n\t\t\t\t\t\t// affect all targets already.\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.' );\n\n\t\t\t\t\tsourceTrack = sourceTrack.clone();\n\t\t\t\t\tsourceTrack.setInterpolation( THREE.InterpolateLinear );\n\n\t\t\t\t}\n\n\t\t\t\tvar targetCount = sourceTrackNode.morphTargetInfluences.length;\n\t\t\t\tvar targetIndex = sourceTrackNode.morphTargetDictionary[ sourceTrackBinding.propertyIndex ];\n\n\t\t\t\tif ( targetIndex === undefined ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedTrack;\n\n\t\t\t\t// If this is the first time we've seen this object, create a new\n\t\t\t\t// track to store merged keyframe data for each morph target.\n\t\t\t\tif ( mergedTracks[ sourceTrackNode.uuid ] === undefined ) {\n\n\t\t\t\t\tmergedTrack = sourceTrack.clone();\n\n\t\t\t\t\tvar values = new mergedTrack.ValueBufferType( targetCount * mergedTrack.times.length );\n\n\t\t\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\t\t\tvalues[ j * targetCount + targetIndex ] = mergedTrack.values[ j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmergedTrack.name = '.morphTargetInfluences';\n\t\t\t\t\tmergedTrack.values = values;\n\n\t\t\t\t\tmergedTracks[ sourceTrackNode.uuid ] = mergedTrack;\n\t\t\t\t\ttracks.push( mergedTrack );\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar sourceInterpolant = sourceTrack.createInterpolant( new sourceTrack.ValueBufferType( 1 ) );\n\n\t\t\t\tmergedTrack = mergedTracks[ sourceTrackNode.uuid ];\n\n\t\t\t\t// For every existing keyframe of the merged track, write a (possibly\n\t\t\t\t// interpolated) value from the source track.\n\t\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\t\tmergedTrack.values[ j * targetCount + targetIndex ] = sourceInterpolant.evaluate( mergedTrack.times[ j ] );\n\n\t\t\t\t}\n\n\t\t\t\t// For every existing keyframe of the source track, write a (possibly\n\t\t\t\t// new) keyframe to the merged track. Values from the previous loop may\n\t\t\t\t// be written again, but keyframes are de-duplicated.\n\t\t\t\tfor ( var j = 0; j < sourceTrack.times.length; j ++ ) {\n\n\t\t\t\t\tvar keyframeIndex = this.insertKeyframe( mergedTrack, sourceTrack.times[ j ] );\n\t\t\t\t\tmergedTrack.values[ keyframeIndex * targetCount + targetIndex ] = sourceTrack.values[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.GLTFExporter;\n});\n\ndefine('skylark-threejs-ex/exporters/ColladaExporter',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Garrett Johnson / http://gkjohnson.github.io/\n\t * https://github.com/gkjohnson/collada-exporter-js\n\t *\n\t * Usage:\n\t *  var exporter = new THREE.ColladaExporter();\n\t *\n\t *  var data = exporter.parse(mesh);\n\t *\n\t * Format Definition:\n\t *  https://www.khronos.org/collada/\n\t */\n\n\tTHREE.ColladaExporter = function () {};\n\n\tTHREE.ColladaExporter.prototype = {\n\n\t\tconstructor: THREE.ColladaExporter,\n\n\t\tparse: function ( object, onDone, options ) {\n\n\t\t\toptions = options || {};\n\n\t\t\toptions = Object.assign( {\n\t\t\t\tversion: '1.4.1',\n\t\t\t\tauthor: null,\n\t\t\t\ttextureDirectory: '',\n\t\t\t}, options );\n\n\t\t\tif ( options.textureDirectory !== '' ) {\n\n\t\t\t\toptions.textureDirectory = `${ options.textureDirectory }/`\n\t\t\t\t\t.replace( /\\\\/g, '/' )\n\t\t\t\t\t.replace( /\\/+/g, '/' );\n\n\t\t\t}\n\n\t\t\tvar version = options.version;\n\t\t\tif ( version !== '1.4.1' && version !== '1.5.0' ) {\n\n\t\t\t\tconsole.warn( `ColladaExporter : Version ${ version } not supported for export. Only 1.4.1 and 1.5.0.` );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Convert the urdf xml into a well-formatted, indented format\n\t\t\tfunction format( urdf ) {\n\n\t\t\t\tvar IS_END_TAG = /^<\\//;\n\t\t\t\tvar IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n\t\t\t\tvar HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n\t\t\t\tvar pad = ( ch, num ) => ( num > 0 ? ch + pad( ch, num - 1 ) : '' );\n\n\t\t\t\tvar tagnum = 0;\n\t\t\t\treturn urdf\n\t\t\t\t\t.match( /(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g )\n\t\t\t\t\t.map( tag => {\n\n\t\t\t\t\t\tif ( ! HAS_TEXT.test( tag ) && ! IS_SELF_CLOSING.test( tag ) && IS_END_TAG.test( tag ) ) {\n\n\t\t\t\t\t\t\ttagnum --;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar res = `${ pad( '  ', tagnum ) }${ tag }`;\n\n\t\t\t\t\t\tif ( ! HAS_TEXT.test( tag ) && ! IS_SELF_CLOSING.test( tag ) && ! IS_END_TAG.test( tag ) ) {\n\n\t\t\t\t\t\t\ttagnum ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn res;\n\n\t\t\t\t\t} )\n\t\t\t\t\t.join( '\\n' );\n\n\t\t\t}\n\n\t\t\t// Convert an image into a png format for saving\n\t\t\tfunction base64ToBuffer( str ) {\n\n\t\t\t\tvar b = atob( str );\n\t\t\t\tvar buf = new Uint8Array( b.length );\n\n\t\t\t\tfor ( var i = 0, l = buf.length; i < l; i ++ ) {\n\n\t\t\t\t\tbuf[ i ] = b.charCodeAt( i );\n\n\t\t\t\t}\n\n\t\t\t\treturn buf;\n\n\t\t\t}\n\n\t\t\tvar canvas, ctx;\n\t\t\tfunction imageToData( image, ext ) {\n\n\t\t\t\tcanvas = canvas || document.createElement( 'canvas' );\n\t\t\t\tctx = ctx || canvas.getContext( '2d' );\n\n\t\t\t\tcanvas.width = image.naturalWidth;\n\t\t\t\tcanvas.height = image.naturalHeight;\n\n\t\t\t\tctx.drawImage( image, 0, 0 );\n\n\t\t\t\t// Get the base64 encoded data\n\t\t\t\tvar base64data = canvas\n\t\t\t\t\t.toDataURL( `image/${ ext }`, 1 )\n\t\t\t\t\t.replace( /^data:image\\/(png|jpg);base64,/, '' );\n\n\t\t\t\t// Convert to a uint8 array\n\t\t\t\treturn base64ToBuffer( base64data );\n\n\t\t\t}\n\n\t\t\t// gets the attribute array. Generate a new array if the attribute is interleaved\n\t\t\tvar getFuncs = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\t\tfunction attrBufferToArray( attr ) {\n\n\t\t\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t// use the typed array constructor to save on memory\n\t\t\t\t\tvar arr = new attr.array.constructor( attr.count * attr.itemSize );\n\t\t\t\t\tvar size = attr.itemSize;\n\t\t\t\t\tfor ( var i = 0, l = attr.count; i < l; i ++ ) {\n\n\t\t\t\t\t\tfor ( var j = 0; j < size; j ++ ) {\n\n\t\t\t\t\t\t\tarr[ i * size + j ] = attr[ getFuncs[ j ] ]( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn arr;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn attr.array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Returns an array of the same type starting at the `st` index,\n\t\t\t// and `ct` length\n\t\t\tfunction subArray( arr, st, ct ) {\n\n\t\t\t\tif ( Array.isArray( arr ) ) return arr.slice( st, st + ct );\n\t\t\t\telse return new arr.constructor( arr.buffer, st * arr.BYTES_PER_ELEMENT, ct );\n\n\t\t\t}\n\n\t\t\t// Returns the string for a geometry's attribute\n\t\t\tfunction getAttribute( attr, name, params, type ) {\n\n\t\t\t\tvar array = attrBufferToArray( attr );\n\t\t\t\tvar res =\n\t\t\t\t\t\t`<source id=\"${ name }\">` +\n\n\t\t\t\t\t\t`<float_array id=\"${ name }-array\" count=\"${ array.length }\">` +\n\t\t\t\t\t\tarray.join( ' ' ) +\n\t\t\t\t\t\t'</float_array>' +\n\n\t\t\t\t\t\t'<technique_common>' +\n\t\t\t\t\t\t`<accessor source=\"#${ name }-array\" count=\"${ Math.floor( array.length / attr.itemSize ) }\" stride=\"${ attr.itemSize }\">` +\n\n\t\t\t\t\t\tparams.map( n => `<param name=\"${ n }\" type=\"${ type }\" />` ).join( '' ) +\n\n\t\t\t\t\t\t'</accessor>' +\n\t\t\t\t\t\t'</technique_common>' +\n\t\t\t\t\t\t'</source>';\n\n\t\t\t\treturn res;\n\n\t\t\t}\n\n\t\t\t// Returns the string for a node's transform information\n\t\t\tvar transMat;\n\t\t\tfunction getTransform( o ) {\n\n\t\t\t\t// ensure the object's matrix is up to date\n\t\t\t\t// before saving the transform\n\t\t\t\to.updateMatrix();\n\n\t\t\t\ttransMat = transMat || new THREE.Matrix4();\n\t\t\t\ttransMat.copy( o.matrix );\n\t\t\t\ttransMat.transpose();\n\t\t\t\treturn `<matrix>${ transMat.toArray().join( ' ' ) }</matrix>`;\n\n\t\t\t}\n\n\t\t\t// Process the given piece of geometry into the geometry library\n\t\t\t// Returns the mesh id\n\t\t\tfunction processGeometry( g ) {\n\n\t\t\t\tvar info = geometryInfo.get( g );\n\n\t\t\t\tif ( ! info ) {\n\n\t\t\t\t\t// convert the geometry to bufferGeometry if it isn't already\n\t\t\t\t\tvar bufferGeometry = g;\n\t\t\t\t\tif ( bufferGeometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tbufferGeometry = ( new THREE.BufferGeometry() ).fromGeometry( bufferGeometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar meshid = `Mesh${ libraryGeometries.length + 1 }`;\n\n\t\t\t\t\tvar indexCount =\n\t\t\t\t\t\tbufferGeometry.index ?\n\t\t\t\t\t\t\tbufferGeometry.index.count * bufferGeometry.index.itemSize :\n\t\t\t\t\t\t\tbufferGeometry.attributes.position.count;\n\n\t\t\t\t\tvar groups =\n\t\t\t\t\t\tbufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ?\n\t\t\t\t\t\t\tbufferGeometry.groups :\n\t\t\t\t\t\t\t[ { start: 0, count: indexCount, materialIndex: 0 } ];\n\n\n\t\t\t\t\tvar gname = g.name ? ` name=\"${ g.name }\"` : '';\n\t\t\t\t\tvar gnode = `<geometry id=\"${ meshid }\"${ gname }><mesh>`;\n\n\t\t\t\t\t// define the geometry node and the vertices for the geometry\n\t\t\t\t\tvar posName = `${ meshid }-position`;\n\t\t\t\t\tvar vertName = `${ meshid }-vertices`;\n\t\t\t\t\tgnode += getAttribute( bufferGeometry.attributes.position, posName, [ 'X', 'Y', 'Z' ], 'float' );\n\t\t\t\t\tgnode += `<vertices id=\"${ vertName }\"><input semantic=\"POSITION\" source=\"#${ posName }\" /></vertices>`;\n\n\t\t\t\t\t// NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n\t\t\t\t\t// can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n\t\t\t\t\t// models with attributes that share an offset.\n\t\t\t\t\t// MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n\n\t\t\t\t\t// serialize normals\n\t\t\t\t\tvar triangleInputs = `<input semantic=\"VERTEX\" source=\"#${ vertName }\" offset=\"0\" />`;\n\t\t\t\t\tif ( 'normal' in bufferGeometry.attributes ) {\n\n\t\t\t\t\t\tvar normName = `${ meshid }-normal`;\n\t\t\t\t\t\tgnode += getAttribute( bufferGeometry.attributes.normal, normName, [ 'X', 'Y', 'Z' ], 'float' );\n\t\t\t\t\t\ttriangleInputs += `<input semantic=\"NORMAL\" source=\"#${ normName }\" offset=\"0\" />`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// serialize uvs\n\t\t\t\t\tif ( 'uv' in bufferGeometry.attributes ) {\n\n\t\t\t\t\t\tvar uvName = `${ meshid }-texcoord`;\n\t\t\t\t\t\tgnode += getAttribute( bufferGeometry.attributes.uv, uvName, [ 'S', 'T' ], 'float' );\n\t\t\t\t\t\ttriangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${ uvName }\" offset=\"0\" set=\"0\" />`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// serialize colors\n\t\t\t\t\tif ( 'color' in bufferGeometry.attributes ) {\n\n\t\t\t\t\t\tvar colName = `${ meshid }-color`;\n\t\t\t\t\t\tgnode += getAttribute( bufferGeometry.attributes.color, colName, [ 'X', 'Y', 'Z' ], 'uint8' );\n\t\t\t\t\t\ttriangleInputs += `<input semantic=\"COLOR\" source=\"#${ colName }\" offset=\"0\" />`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar indexArray = null;\n\t\t\t\t\tif ( bufferGeometry.index ) {\n\n\t\t\t\t\t\tindexArray = attrBufferToArray( bufferGeometry.index );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tindexArray = new Array( indexCount );\n\t\t\t\t\t\tfor ( var i = 0, l = indexArray.length; i < l; i ++ ) indexArray[ i ] = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\tvar subarr = subArray( indexArray, group.start, group.count );\n\t\t\t\t\t\tvar polycount = subarr.length / 3;\n\t\t\t\t\t\tgnode += `<triangles material=\"MESH_MATERIAL_${ group.materialIndex }\" count=\"${ polycount }\">`;\n\t\t\t\t\t\tgnode += triangleInputs;\n\n\t\t\t\t\t\tgnode += `<p>${ subarr.join( ' ' ) }</p>`;\n\t\t\t\t\t\tgnode += '</triangles>';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgnode += `</mesh></geometry>`;\n\n\t\t\t\t\tlibraryGeometries.push( gnode );\n\n\t\t\t\t\tinfo = { meshid: meshid, bufferGeometry: bufferGeometry };\n\t\t\t\t\tgeometryInfo.set( g, info );\n\n\t\t\t\t}\n\n\t\t\t\treturn info;\n\n\t\t\t}\n\n\t\t\t// Process the given texture into the image library\n\t\t\t// Returns the image library\n\t\t\tfunction processTexture( tex ) {\n\n\t\t\t\tvar texid = imageMap.get( tex );\n\t\t\t\tif ( texid == null ) {\n\n\t\t\t\t\ttexid = `image-${ libraryImages.length + 1 }`;\n\n\t\t\t\t\tvar ext = 'png';\n\t\t\t\t\tvar name = tex.name || texid;\n\t\t\t\t\tvar imageNode = `<image id=\"${ texid }\" name=\"${ name }\">`;\n\n\t\t\t\t\tif ( version === '1.5.0' ) {\n\n\t\t\t\t\t\timageNode += `<init_from><ref>${ options.textureDirectory }${ name }.${ ext }</ref></init_from>`;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// version image node 1.4.1\n\t\t\t\t\t\timageNode += `<init_from>${ options.textureDirectory }${ name }.${ ext }</init_from>`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\timageNode += '</image>';\n\n\t\t\t\t\tlibraryImages.push( imageNode );\n\t\t\t\t\timageMap.set( tex, texid );\n\t\t\t\t\ttextures.push( {\n\t\t\t\t\t\tdirectory: options.textureDirectory,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\text,\n\t\t\t\t\t\tdata: imageToData( tex.image, ext ),\n\t\t\t\t\t\toriginal: tex\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn texid;\n\n\t\t\t}\n\n\t\t\t// Process the given material into the material and effect libraries\n\t\t\t// Returns the material id\n\t\t\tfunction processMaterial( m ) {\n\n\t\t\t\tvar matid = materialMap.get( m );\n\n\t\t\t\tif ( matid == null ) {\n\n\t\t\t\t\tmatid = `Mat${ libraryEffects.length + 1 }`;\n\n\t\t\t\t\tvar type = 'phong';\n\n\t\t\t\t\tif ( m instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\t\t\ttype = 'lambert';\n\n\t\t\t\t\t} else if ( m instanceof THREE.MeshBasicMaterial ) {\n\n\t\t\t\t\t\ttype = 'constant';\n\n\t\t\t\t\t\tif ( m.map !== null ) {\n\n\t\t\t\t\t\t\t// The Collada spec does not support diffuse texture maps with the\n\t\t\t\t\t\t\t// constant shader type.\n\t\t\t\t\t\t\t// mrdoob/three.js#15469\n\t\t\t\t\t\t\tconsole.warn( 'ColladaExporter: Texture maps not supported with MeshBasicMaterial.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar emissive = m.emissive ? m.emissive : new THREE.Color( 0, 0, 0 );\n\t\t\t\t\tvar diffuse = m.color ? m.color : new THREE.Color( 0, 0, 0 );\n\t\t\t\t\tvar specular = m.specular ? m.specular : new THREE.Color( 1, 1, 1 );\n\t\t\t\t\tvar shininess = m.shininess || 0;\n\t\t\t\t\tvar reflectivity = m.reflectivity || 0;\n\n\t\t\t\t\t// Do not export and alpha map for the reasons mentioned in issue (#13792)\n\t\t\t\t\t// in three.js alpha maps are black and white, but collada expects the alpha\n\t\t\t\t\t// channel to specify the transparency\n\t\t\t\t\tvar transparencyNode = '';\n\t\t\t\t\tif ( m.transparent === true ) {\n\n\t\t\t\t\t\ttransparencyNode +=\n\t\t\t\t\t\t\t`<transparent>` +\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tm.map ?\n\t\t\t\t\t\t\t\t\t`<texture texture=\"diffuse-sampler\"></texture>` :\n\t\t\t\t\t\t\t\t\t'<float>1</float>'\n\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t'</transparent>';\n\n\t\t\t\t\t\tif ( m.opacity < 1 ) {\n\n\t\t\t\t\t\t\ttransparencyNode += `<transparency><float>${ m.opacity }</float></transparency>`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar techniqueNode = `<technique sid=\"common\"><${ type }>` +\n\n\t\t\t\t\t\t'<emission>' +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tm.emissiveMap ?\n\t\t\t\t\t\t\t\t'<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' :\n\t\t\t\t\t\t\t\t`<color sid=\"emission\">${ emissive.r } ${ emissive.g } ${ emissive.b } 1</color>`\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t'</emission>' +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\ttype !== 'constant' ?\n\t\t\t\t\t\t\t\t'<diffuse>' +\n\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tm.map ?\n\t\t\t\t\t\t\t\t\t'<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' :\n\t\t\t\t\t\t\t\t\t`<color sid=\"diffuse\">${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color>`\n\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t'</diffuse>'\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\ttype !== 'constant' ?\n\t\t\t\t\t\t\t\t'<bump>' +\n\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tm.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : ''\n\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t'</bump>'\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\ttype === 'phong' ?\n\t\t\t\t\t\t\t\t`<specular><color sid=\"specular\">${ specular.r } ${ specular.g } ${ specular.b } 1</color></specular>` +\n\n\t\t\t\t\t\t\t'<shininess>' +\n\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tm.specularMap ?\n\t\t\t\t\t\t\t\t\t'<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' :\n\t\t\t\t\t\t\t\t\t`<float sid=\"shininess\">${ shininess }</float>`\n\t\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t\t'</shininess>'\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t`<reflective><color>${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color></reflective>` +\n\n\t\t\t\t\t\t`<reflectivity><float>${ reflectivity }</float></reflectivity>` +\n\n\t\t\t\t\t\ttransparencyNode +\n\n\t\t\t\t\t\t`</${ type }></technique>`;\n\n\t\t\t\t\tvar effectnode =\n\t\t\t\t\t\t`<effect id=\"${ matid }-effect\">` +\n\t\t\t\t\t\t'<profile_COMMON>' +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tm.map ?\n\t\t\t\t\t\t\t\t'<newparam sid=\"diffuse-surface\"><surface type=\"2D\">' +\n\t\t\t\t\t\t\t\t`<init_from>${ processTexture( m.map ) }</init_from>` +\n\t\t\t\t\t\t\t\t'</surface></newparam>' +\n\t\t\t\t\t\t\t\t'<newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tm.specularMap ?\n\t\t\t\t\t\t\t\t'<newparam sid=\"specular-surface\"><surface type=\"2D\">' +\n\t\t\t\t\t\t\t\t`<init_from>${ processTexture( m.specularMap ) }</init_from>` +\n\t\t\t\t\t\t\t\t'</surface></newparam>' +\n\t\t\t\t\t\t\t\t'<newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tm.emissiveMap ?\n\t\t\t\t\t\t\t\t'<newparam sid=\"emissive-surface\"><surface type=\"2D\">' +\n\t\t\t\t\t\t\t\t`<init_from>${ processTexture( m.emissiveMap ) }</init_from>` +\n\t\t\t\t\t\t\t\t'</surface></newparam>' +\n\t\t\t\t\t\t\t\t'<newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tm.normalMap ?\n\t\t\t\t\t\t\t\t'<newparam sid=\"bump-surface\"><surface type=\"2D\">' +\n\t\t\t\t\t\t\t\t`<init_from>${ processTexture( m.normalMap ) }</init_from>` +\n\t\t\t\t\t\t\t\t'</surface></newparam>' +\n\t\t\t\t\t\t\t\t'<newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\ttechniqueNode +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tm.side === THREE.DoubleSide ?\n\t\t\t\t\t\t\t\t`<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>` :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t'</profile_COMMON>' +\n\n\t\t\t\t\t\t'</effect>';\n\n\t\t\t\t\tvar materialName = m.name ? ` name=\"${ m.name }\"` : '';\n\t\t\t\t\tvar materialNode = `<material id=\"${ matid }\"${ materialName }><instance_effect url=\"#${ matid }-effect\" /></material>`;\n\n\t\t\t\t\tlibraryMaterials.push( materialNode );\n\t\t\t\t\tlibraryEffects.push( effectnode );\n\t\t\t\t\tmaterialMap.set( m, matid );\n\n\t\t\t\t}\n\n\t\t\t\treturn matid;\n\n\t\t\t}\n\n\t\t\t// Recursively process the object into a scene\n\t\t\tfunction processObject( o ) {\n\n\t\t\t\tvar node = `<node name=\"${ o.name }\">`;\n\n\t\t\t\tnode += getTransform( o );\n\n\t\t\t\tif ( o instanceof THREE.Mesh && o.geometry != null ) {\n\n\t\t\t\t\t// function returns the id associated with the mesh and a \"BufferGeometry\" version\n\t\t\t\t\t// of the geometry in case it's not a geometry.\n\t\t\t\t\tvar geomInfo = processGeometry( o.geometry );\n\t\t\t\t\tvar meshid = geomInfo.meshid;\n\t\t\t\t\tvar geometry = geomInfo.bufferGeometry;\n\n\t\t\t\t\t// ids of the materials to bind to the geometry\n\t\t\t\t\tvar matids = null;\n\t\t\t\t\tvar matidsArray = [];\n\n\t\t\t\t\t// get a list of materials to bind to the sub groups of the geometry.\n\t\t\t\t\t// If the amount of subgroups is greater than the materials, than reuse\n\t\t\t\t\t// the materials.\n\t\t\t\t\tvar mat = o.material || new THREE.MeshBasicMaterial();\n\t\t\t\t\tvar materials = Array.isArray( mat ) ? mat : [ mat ];\n\n\t\t\t\t\tif ( geometry.groups.length > materials.length ) {\n\n\t\t\t\t\t\tmatidsArray = new Array( geometry.groups.length );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmatidsArray = new Array( materials.length );\n\n\t\t\t\t\t}\n\t\t\t\t\tmatids = matidsArray.fill()\n\t\t\t\t\t\t.map( ( v, i ) => processMaterial( materials[ i % materials.length ] ) );\n\n\t\t\t\t\tnode +=\n\t\t\t\t\t\t`<instance_geometry url=\"#${ meshid }\">` +\n\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmatids != null ?\n\t\t\t\t\t\t\t\t'<bind_material><technique_common>' +\n\t\t\t\t\t\t\t\tmatids.map( ( id, i ) =>\n\n\t\t\t\t\t\t\t\t\t`<instance_material symbol=\"MESH_MATERIAL_${ i }\" target=\"#${ id }\" >` +\n\n\t\t\t\t\t\t\t\t\t'<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" />' +\n\n\t\t\t\t\t\t\t\t\t'</instance_material>'\n\t\t\t\t\t\t\t\t).join( '' ) +\n\t\t\t\t\t\t\t\t'</technique_common></bind_material>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\n\t\t\t\t\t\t'</instance_geometry>';\n\n\t\t\t\t}\n\n\t\t\t\to.children.forEach( c => node += processObject( c ) );\n\n\t\t\t\tnode += '</node>';\n\n\t\t\t\treturn node;\n\n\t\t\t}\n\n\t\t\tvar geometryInfo = new WeakMap();\n\t\t\tvar materialMap = new WeakMap();\n\t\t\tvar imageMap = new WeakMap();\n\t\t\tvar textures = [];\n\n\t\t\tvar libraryImages = [];\n\t\t\tvar libraryGeometries = [];\n\t\t\tvar libraryEffects = [];\n\t\t\tvar libraryMaterials = [];\n\t\t\tvar libraryVisualScenes = processObject( object );\n\n\t\t\tvar specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n\t\t\tvar dae =\n\t\t\t\t'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>' +\n\t\t\t\t`<COLLADA xmlns=\"${ specLink }\" version=\"${ version }\">` +\n\t\t\t\t'<asset>' +\n\t\t\t\t(\n\t\t\t\t\t'<contributor>' +\n\t\t\t\t\t'<authoring_tool>three.js Collada Exporter</authoring_tool>' +\n\t\t\t\t\t( options.author !== null ? `<author>${ options.author }</author>` : '' ) +\n\t\t\t\t\t'</contributor>' +\n\t\t\t\t\t`<created>${ ( new Date() ).toISOString() }</created>` +\n\t\t\t\t\t`<modified>${ ( new Date() ).toISOString() }</modified>` +\n\t\t\t\t\t'<up_axis>Y_UP</up_axis>'\n\t\t\t\t) +\n\t\t\t\t'</asset>';\n\n\t\t\tdae += `<library_images>${ libraryImages.join( '' ) }</library_images>`;\n\n\t\t\tdae += `<library_effects>${ libraryEffects.join( '' ) }</library_effects>`;\n\n\t\t\tdae += `<library_materials>${ libraryMaterials.join( '' ) }</library_materials>`;\n\n\t\t\tdae += `<library_geometries>${ libraryGeometries.join( '' ) }</library_geometries>`;\n\n\t\t\tdae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${ libraryVisualScenes }</visual_scene></library_visual_scenes>`;\n\n\t\t\tdae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n\n\t\t\tdae += '</COLLADA>';\n\n\t\t\tvar res = {\n\t\t\t\tdata: format( dae ),\n\t\t\t\ttextures\n\t\t\t};\n\n\t\t\tif ( typeof onDone === 'function' ) {\n\n\t\t\t\trequestAnimationFrame( () => onDone( res ) );\n\n\t\t\t}\n\n\t\t\treturn res;\n\n\t\t}\n\n\t};\n\n\treturn THREE.ColladaExporter;\n});\n\ndefine('skylark-threejs-ex/exporters/PLYExporter',[\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Garrett Johnson / http://gkjohnson.github.io/\n\t * https://github.com/gkjohnson/ply-exporter-js\n\t *\n\t * Usage:\n\t *  var exporter = new THREE.PLYExporter();\n\t *\n\t *  // second argument is a list of options\n\t *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n\t *\n\t * Format Definition:\n\t * http://paulbourke.net/dataformats/ply/\n\t */\n\n\tTHREE.PLYExporter = function () {};\n\n\tTHREE.PLYExporter.prototype = {\n\n\t\tconstructor: THREE.PLYExporter,\n\n\t\tparse: function ( object, onDone, options ) {\n\n\t\t\tif ( onDone && typeof onDone === 'object' ) {\n\n\t\t\t\tconsole.warn( 'THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.' );\n\t\t\t\toptions = onDone;\n\t\t\t\tonDone = undefined;\n\n\t\t\t}\n\n\t\t\t// Iterate over the valid meshes in the object\n\t\t\tfunction traverseMeshes( cb ) {\n\n\t\t\t\tobject.traverse( function ( child ) {\n\n\t\t\t\t\tif ( child.isMesh === true ) {\n\n\t\t\t\t\t\tvar mesh = child;\n\t\t\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\t\t\tif ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\t\tgeometry = geomToBufferGeom.get( geometry );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\t\tif ( geometry.getAttribute( 'position' ) !== undefined ) {\n\n\t\t\t\t\t\t\t\tcb( mesh, geometry );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\t// Default options\n\t\t\tvar defaultOptions = {\n\t\t\t\tbinary: false,\n\t\t\t\texcludeAttributes: [], // normal, uv, color, index\n\t\t\t\tlittleEndian: false\n\t\t\t};\n\n\t\t\toptions = Object.assign( defaultOptions, options );\n\n\t\t\tvar excludeAttributes = options.excludeAttributes;\n\t\t\tvar geomToBufferGeom = new WeakMap();\n\t\t\tvar includeNormals = false;\n\t\t\tvar includeColors = false;\n\t\t\tvar includeUVs = false;\n\n\t\t\t// count the vertices, check which properties are used,\n\t\t\t// and cache the BufferGeometry\n\t\t\tvar vertexCount = 0;\n\t\t\tvar faceCount = 0;\n\t\t\tobject.traverse( function ( child ) {\n\n\t\t\t\tif ( child.isMesh === true ) {\n\n\t\t\t\t\tvar mesh = child;\n\t\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\t\tif ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tvar bufferGeometry = geomToBufferGeom.get( geometry ) || new THREE.BufferGeometry().setFromObject( mesh );\n\t\t\t\t\t\tgeomToBufferGeom.set( geometry, bufferGeometry );\n\t\t\t\t\t\tgeometry = bufferGeometry;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\t\t\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\t\t\tif ( vertices === undefined ) {\n\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvertexCount += vertices.count;\n\t\t\t\t\t\tfaceCount += indices ? indices.count / 3 : vertices.count / 3;\n\n\t\t\t\t\t\tif ( normals !== undefined ) includeNormals = true;\n\n\t\t\t\t\t\tif ( uvs !== undefined ) includeUVs = true;\n\n\t\t\t\t\t\tif ( colors !== undefined ) includeColors = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar includeIndices = excludeAttributes.indexOf( 'index' ) === - 1;\n\t\t\tincludeNormals = includeNormals && excludeAttributes.indexOf( 'normal' ) === - 1;\n\t\t\tincludeColors = includeColors && excludeAttributes.indexOf( 'color' ) === - 1;\n\t\t\tincludeUVs = includeUVs && excludeAttributes.indexOf( 'uv' ) === - 1;\n\n\n\t\t\tif ( includeIndices && faceCount !== Math.floor( faceCount ) ) {\n\n\t\t\t\t// point cloud meshes will not have an index array and may not have a\n\t\t\t\t// number of vertices that is divisble by 3 (and therefore representable\n\t\t\t\t// as triangles)\n\t\t\t\tconsole.error(\n\n\t\t\t\t\t'PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' +\n\t\t\t\t\t'number of indices is not divisible by 3.'\n\n\t\t\t\t);\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar indexByteCount = 4;\n\n\t\t\tvar header =\n\t\t\t\t'ply\\n' +\n\t\t\t\t`format ${ options.binary ? ( options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' ) : 'ascii' } 1.0\\n` +\n\t\t\t\t`element vertex ${vertexCount}\\n` +\n\n\t\t\t\t// position\n\t\t\t\t'property float x\\n' +\n\t\t\t\t'property float y\\n' +\n\t\t\t\t'property float z\\n';\n\n\t\t\tif ( includeNormals === true ) {\n\n\t\t\t\t// normal\n\t\t\t\theader +=\n\t\t\t\t\t'property float nx\\n' +\n\t\t\t\t\t'property float ny\\n' +\n\t\t\t\t\t'property float nz\\n';\n\n\t\t\t}\n\n\t\t\tif ( includeUVs === true ) {\n\n\t\t\t\t// uvs\n\t\t\t\theader +=\n\t\t\t\t\t'property float s\\n' +\n\t\t\t\t\t'property float t\\n';\n\n\t\t\t}\n\n\t\t\tif ( includeColors === true ) {\n\n\t\t\t\t// colors\n\t\t\t\theader +=\n\t\t\t\t\t'property uchar red\\n' +\n\t\t\t\t\t'property uchar green\\n' +\n\t\t\t\t\t'property uchar blue\\n';\n\n\t\t\t}\n\n\t\t\tif ( includeIndices === true ) {\n\n\t\t\t\t// faces\n\t\t\t\theader +=\n\t\t\t\t\t`element face ${faceCount}\\n` +\n\t\t\t\t\t`property list uchar int vertex_index\\n`;\n\n\t\t\t}\n\n\t\t\theader += 'end_header\\n';\n\n\n\t\t\t// Generate attribute data\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvar normalMatrixWorld = new THREE.Matrix3();\n\t\t\tvar result = null;\n\n\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t// Binary File Generation\n\t\t\t\tvar headerBin = new TextEncoder().encode( header );\n\n\t\t\t\t// 3 position values at 4 bytes\n\t\t\t\t// 3 normal values at 4 bytes\n\t\t\t\t// 3 color channels with 1 byte\n\t\t\t\t// 2 uv values at 4 bytes\n\t\t\t\tvar vertexListLength = vertexCount * ( 4 * 3 + ( includeNormals ? 4 * 3 : 0 ) + ( includeColors ? 3 : 0 ) + ( includeUVs ? 4 * 2 : 0 ) );\n\n\t\t\t\t// 1 byte shape desciptor\n\t\t\t\t// 3 vertex indices at ${indexByteCount} bytes\n\t\t\t\tvar faceListLength = includeIndices ? faceCount * ( indexByteCount * 3 + 1 ) : 0;\n\t\t\t\tvar output = new DataView( new ArrayBuffer( headerBin.length + vertexListLength + faceListLength ) );\n\t\t\t\tnew Uint8Array( output.buffer ).set( headerBin, 0 );\n\n\n\t\t\t\tvar vOffset = headerBin.length;\n\t\t\t\tvar fOffset = headerBin.length + vertexListLength;\n\t\t\t\tvar writtenVertices = 0;\n\t\t\t\ttraverseMeshes( function ( mesh, geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\t\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i ++ ) {\n\n\t\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\n\n\t\t\t\t\t\t// Position information\n\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.x, options.littleEndian );\n\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.y, options.littleEndian );\n\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.z, options.littleEndian );\n\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t// Normal information\n\t\t\t\t\t\tif ( includeNormals === true ) {\n\n\t\t\t\t\t\t\tif ( normals != null ) {\n\n\t\t\t\t\t\t\t\tvertex.x = normals.getX( i );\n\t\t\t\t\t\t\t\tvertex.y = normals.getY( i );\n\t\t\t\t\t\t\t\tvertex.z = normals.getZ( i );\n\n\t\t\t\t\t\t\t\tvertex.applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.x, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.y, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, vertex.z, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// UV information\n\t\t\t\t\t\tif ( includeUVs === true ) {\n\n\t\t\t\t\t\t\tif ( uvs != null ) {\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, uvs.getX( i ), options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, uvs.getY( i ), options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t} else if ( includeUVs !== false ) {\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t\toutput.setFloat32( vOffset, 0, options.littleEndian );\n\t\t\t\t\t\t\t\tvOffset += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Color information\n\t\t\t\t\t\tif ( includeColors === true ) {\n\n\t\t\t\t\t\t\tif ( colors != null ) {\n\n\t\t\t\t\t\t\t\toutput.setUint8( vOffset, Math.floor( colors.getX( i ) * 255 ) );\n\t\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\t\toutput.setUint8( vOffset, Math.floor( colors.getY( i ) * 255 ) );\n\t\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\t\toutput.setUint8( vOffset, Math.floor( colors.getZ( i ) * 255 ) );\n\t\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\toutput.setUint8( vOffset, 255 );\n\t\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\t\toutput.setUint8( vOffset, 255 );\n\t\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\t\toutput.setUint8( vOffset, 255 );\n\t\t\t\t\t\t\t\tvOffset += 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( includeIndices === true ) {\n\n\t\t\t\t\t\t// Create the face list\n\n\t\t\t\t\t\tif ( indices !== null ) {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\toutput.setUint8( fOffset, 3 );\n\t\t\t\t\t\t\t\tfOffset += 1;\n\n\t\t\t\t\t\t\t\toutput.setUint32( fOffset, indices.getX( i + 0 ) + writtenVertices, options.littleEndian );\n\t\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\t\toutput.setUint32( fOffset, indices.getX( i + 1 ) + writtenVertices, options.littleEndian );\n\t\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\t\toutput.setUint32( fOffset, indices.getX( i + 2 ) + writtenVertices, options.littleEndian );\n\t\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\toutput.setUint8( fOffset, 3 );\n\t\t\t\t\t\t\t\tfOffset += 1;\n\n\t\t\t\t\t\t\t\toutput.setUint32( fOffset, writtenVertices + i, options.littleEndian );\n\t\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\t\toutput.setUint32( fOffset, writtenVertices + i + 1, options.littleEndian );\n\t\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\t\toutput.setUint32( fOffset, writtenVertices + i + 2, options.littleEndian );\n\t\t\t\t\t\t\t\tfOffset += indexByteCount;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// Save the amount of verts we've already written so we can offset\n\t\t\t\t\t// the face index on the next mesh\n\t\t\t\t\twrittenVertices += vertices.count;\n\n\t\t\t\t} );\n\n\t\t\t\tresult = output.buffer;\n\n\t\t\t} else {\n\n\t\t\t\t// Ascii File Generation\n\t\t\t\t// count the number of vertices\n\t\t\t\tvar writtenVertices = 0;\n\t\t\t\tvar vertexList = '';\n\t\t\t\tvar faceList = '';\n\n\t\t\t\ttraverseMeshes( function ( mesh, geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\t\tvar colors = geometry.getAttribute( 'color' );\n\t\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\t\t\t// form each line\n\t\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i ++ ) {\n\n\t\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\n\n\t\t\t\t\t\t// Position information\n\t\t\t\t\t\tvar line =\n\t\t\t\t\t\t\tvertex.x + ' ' +\n\t\t\t\t\t\t\tvertex.y + ' ' +\n\t\t\t\t\t\t\tvertex.z;\n\n\t\t\t\t\t\t// Normal information\n\t\t\t\t\t\tif ( includeNormals === true ) {\n\n\t\t\t\t\t\t\tif ( normals != null ) {\n\n\t\t\t\t\t\t\t\tvertex.x = normals.getX( i );\n\t\t\t\t\t\t\t\tvertex.y = normals.getY( i );\n\t\t\t\t\t\t\t\tvertex.z = normals.getZ( i );\n\n\t\t\t\t\t\t\t\tvertex.applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\t\t\tline += ' ' +\n\t\t\t\t\t\t\t\t\tvertex.x + ' ' +\n\t\t\t\t\t\t\t\t\tvertex.y + ' ' +\n\t\t\t\t\t\t\t\t\tvertex.z;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tline += ' 0 0 0';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// UV information\n\t\t\t\t\t\tif ( includeUVs === true ) {\n\n\t\t\t\t\t\t\tif ( uvs != null ) {\n\n\t\t\t\t\t\t\t\tline += ' ' +\n\t\t\t\t\t\t\t\t\tuvs.getX( i ) + ' ' +\n\t\t\t\t\t\t\t\t\tuvs.getY( i );\n\n\t\t\t\t\t\t\t} else if ( includeUVs !== false ) {\n\n\t\t\t\t\t\t\t\tline += ' 0 0';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Color information\n\t\t\t\t\t\tif ( includeColors === true ) {\n\n\t\t\t\t\t\t\tif ( colors != null ) {\n\n\t\t\t\t\t\t\t\tline += ' ' +\n\t\t\t\t\t\t\t\t\tMath.floor( colors.getX( i ) * 255 ) + ' ' +\n\t\t\t\t\t\t\t\t\tMath.floor( colors.getY( i ) * 255 ) + ' ' +\n\t\t\t\t\t\t\t\t\tMath.floor( colors.getZ( i ) * 255 );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tline += ' 255 255 255';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvertexList += line + '\\n';\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create the face list\n\t\t\t\t\tif ( includeIndices === true ) {\n\n\t\t\t\t\t\tif ( indices !== null ) {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\tfaceList += `3 ${ indices.getX( i + 0 ) + writtenVertices }`;\n\t\t\t\t\t\t\t\tfaceList += ` ${ indices.getX( i + 1 ) + writtenVertices }`;\n\t\t\t\t\t\t\t\tfaceList += ` ${ indices.getX( i + 2 ) + writtenVertices }\\n`;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = vertices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\tfaceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\\n`;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceCount += indices ? indices.count / 3 : vertices.count / 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t\twrittenVertices += vertices.count;\n\n\t\t\t\t} );\n\n\t\t\t\tresult = `${ header }${vertexList}${ includeIndices ? `${faceList}\\n` : '\\n' }`;\n\n\t\t\t}\n\n\t\t\tif ( typeof onDone === 'function' ) requestAnimationFrame( () => onDone( result ) );\n\t\t\treturn result;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.PLYExporter;\n});\n\ndefine('skylark-threejs-ex/main',[\r\n\t\"skylark-threejs\",\r\n\r\n\t\"./shaders/CopyShader\",\r\n\t\"./shaders/BokehShader\",\r\n\t\"./shaders/SAOShader\",\r\n\t\"./shaders/DepthLimitedBlurShader\",\r\n\t\"./shaders/UnpackDepthRGBAShader\",\r\n\t\"./shaders/ConvolutionShader\",\r\n\t\"./shaders/LuminosityHighPassShader\",\r\n\t\"./shaders/FXAAShader\",\r\n\t\"./shaders/SSAOShader\",\r\n\t\"./shaders/FilmShader\",\r\n\t\"./shaders/DotScreenShader\",\r\n\t\"./shaders/LuminosityShader\",\r\n\t\"./shaders/SobelOperatorShader\",\r\n\t\"./shaders/ColorifyShader\",\r\n\t\"./shaders/ToneMapShader\",\r\n\t\"./shaders/TechnicolorShader\",\r\n\t\"./shaders/HueSaturationShader\",\r\n\r\n\t\"./postprocessing/EffectComposer\",\r\n\t\"./postprocessing/RenderPass\",\r\n\t\"./postprocessing/ShaderPass\",\r\n\t\"./postprocessing/MaskPass\",\r\n\r\n\t\"./curves/NURBSCurve\",\r\n\t\"./curves/NURBSSurface\",\r\n\t\"./curves/NURBSUtils\",\r\n\r\n\t\"./objects/Lensflare\",\r\n\t\"./objects/Reflector\",\r\n\t\"./objects/Refractor\",\r\n\r\n\t\"./loaders/TTFLoader\",\r\n//\t\"./loaders/LoaderSupport\",\r\n\t\"./loaders/3MFLoader\",\r\n\t\"./loaders/AMFLoader\",\r\n//\t\"./loaders/AssimpJSONLoader\",\r\n\t\"./loaders/AssimpLoader\",\r\n//\t\"./loaders/AWDLoader\",\r\n//\t\"./loaders/BabylonLoader\",\r\n\t\"./loaders/ColladaLoader\",\r\n\t\"./loaders/DRACOLoader\",\r\n\t\"./loaders/FBXLoader\",\r\n\t\"./loaders/GCodeLoader\",\r\n\t\"./loaders/GLTFLoader\",\r\n\t\"./loaders/MTLLoader\",\r\n\t\"./loaders/OBJLoader\",\r\n//\t\"./loaders/OBJLoader2\",\r\n\t\"./loaders/PCDLoader\",\r\n\t\"./loaders/PLYLoader\",\r\n\t\"./loaders/PRWMLoader\",\r\n\t\"./loaders/STLLoader\",\r\n\t\"./loaders/SVGLoader\",\r\n\t\"./loaders/TDSLoader\",\r\n//\t\"./loaders/VRMLLoader\",\r\n\t\"./loaders/VTKLoader\",\r\n\t\"./loaders/XLoader\",\r\n\t\"./loaders/DDSLoader\",\r\n\t\"./loaders/PVRLoader\",\r\n\t\"./loaders/TGALoader\",\r\n\t\"./loaders/KTXLoader\",\r\n\r\n\t\"./modifiers/SimplifyModifier\",\r\n\t\"./modifiers/SubdivisionModifier\",\r\n\r\n\t\"./exporters/DRACOExporter\",\r\n\t\"./exporters/OBJExporter\",\r\n\t\"./exporters/STLExporter\",\r\n\t\"./exporters/GLTFExporter\",\r\n\t\"./exporters/ColladaExporter\",\r\n\t\"./exporters/PLYExporter\"\r\n\r\n],function(THREE){\r\n\treturn THREE;\r\n});\ndefine('skylark-threejs-ex', ['skylark-threejs-ex/main'], function (main) { return main; });\n\n"]}